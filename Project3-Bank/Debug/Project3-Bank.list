
Project3-Bank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006758  08006758  00016758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006884  08006884  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006884  08006884  00016884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800688c  0800688c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800688c  0800688c  0001688c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006890  08006890  00016890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000684c  20000010  080068a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000685c  080068a4  0002685c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000199fa  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035ba  00000000  00000000  00039a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  0003d038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011fa  00000000  00000000  0003e758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003416  00000000  00000000  0003f952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019bfb  00000000  00000000  00042d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fca3c  00000000  00000000  0005c963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061d4  00000000  00000000  001593a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0015f574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006740 	.word	0x08006740

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006740 	.word	0x08006740

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <clock_increment>:
	Clock.hour = 9;
	Clock.minute = 0;
	Clock.second = 0;
}

void clock_increment(WallClock Clock){
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Check if second is full, if so then increment
	//minute count and reset second count to 0
	//if minute count full increment hour count and reset minutes to 0
	if(Clock.second >= 59){
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	2b3a      	cmp	r3, #58	; 0x3a
 80004dc:	dd10      	ble.n	8000500 <clock_increment+0x34>
		Clock.second -= 60;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	3b3c      	subs	r3, #60	; 0x3c
 80004e2:	60fb      	str	r3, [r7, #12]
		if(Clock.minute >= 59){
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	2b3a      	cmp	r3, #58	; 0x3a
 80004e8:	dd06      	ble.n	80004f8 <clock_increment+0x2c>
			Clock.minute -= 60;
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	3b3c      	subs	r3, #60	; 0x3c
 80004ee:	60bb      	str	r3, [r7, #8]
			Clock.hour += 1;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
		}
	}
	else{
		Clock.second += 1;
	}
}
 80004f6:	e006      	b.n	8000506 <clock_increment+0x3a>
			Clock.minute += 1;
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	3301      	adds	r3, #1
 80004fc:	60bb      	str	r3, [r7, #8]
}
 80004fe:	e002      	b.n	8000506 <clock_increment+0x3a>
		Clock.second += 1;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	3301      	adds	r3, #1
 8000504:	60fb      	str	r3, [r7, #12]
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb1a 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f850 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f91a 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f8e8 	bl	80006f8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000528:	f000 f8b0 	bl	800068c <MX_TIM6_Init>
  MX_RNG_Init();
 800052c:	f000 f89a 	bl	8000664 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f003 fa70 	bl	8003a14 <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 8000534:	4814      	ldr	r0, [pc, #80]	; (8000588 <main+0x74>)
 8000536:	f003 fb64 	bl	8003c02 <osMutexNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a13      	ldr	r2, [pc, #76]	; (800058c <main+0x78>)
 800053e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tellers */
  TellersHandle = osThreadNew(StartTellers, NULL, &Tellers_attributes);
 8000540:	4a13      	ldr	r2, [pc, #76]	; (8000590 <main+0x7c>)
 8000542:	2100      	movs	r1, #0
 8000544:	4813      	ldr	r0, [pc, #76]	; (8000594 <main+0x80>)
 8000546:	f003 faaf 	bl	8003aa8 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a12      	ldr	r2, [pc, #72]	; (8000598 <main+0x84>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of Customers */
  CustomersHandle = osThreadNew(StartCustomers, NULL, &Customers_attributes);
 8000550:	4a12      	ldr	r2, [pc, #72]	; (800059c <main+0x88>)
 8000552:	2100      	movs	r1, #0
 8000554:	4812      	ldr	r0, [pc, #72]	; (80005a0 <main+0x8c>)
 8000556:	f003 faa7 	bl	8003aa8 <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a11      	ldr	r2, [pc, #68]	; (80005a4 <main+0x90>)
 800055e:	6013      	str	r3, [r2, #0]

  /* creation of Clock */
  ClockHandle = osThreadNew(StartClock, NULL, &Clock_attributes);
 8000560:	4a11      	ldr	r2, [pc, #68]	; (80005a8 <main+0x94>)
 8000562:	2100      	movs	r1, #0
 8000564:	4811      	ldr	r0, [pc, #68]	; (80005ac <main+0x98>)
 8000566:	f003 fa9f 	bl	8003aa8 <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a10      	ldr	r2, [pc, #64]	; (80005b0 <main+0x9c>)
 800056e:	6013      	str	r3, [r2, #0]

  /* creation of Manager */
  ManagerHandle = osThreadNew(StartManager, NULL, &Manager_attributes);
 8000570:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <main+0xa0>)
 8000572:	2100      	movs	r1, #0
 8000574:	4810      	ldr	r0, [pc, #64]	; (80005b8 <main+0xa4>)
 8000576:	f003 fa97 	bl	8003aa8 <osThreadNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <main+0xa8>)
 800057e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000580:	f003 fa6c 	bl	8003a5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000584:	e7fe      	b.n	8000584 <main+0x70>
 8000586:	bf00      	nop
 8000588:	0800682c 	.word	0x0800682c
 800058c:	2000012c 	.word	0x2000012c
 8000590:	0800679c 	.word	0x0800679c
 8000594:	08000825 	.word	0x08000825
 8000598:	2000011c 	.word	0x2000011c
 800059c:	080067c0 	.word	0x080067c0
 80005a0:	08000835 	.word	0x08000835
 80005a4:	20000120 	.word	0x20000120
 80005a8:	080067e4 	.word	0x080067e4
 80005ac:	08000845 	.word	0x08000845
 80005b0:	20000124 	.word	0x20000124
 80005b4:	08006808 	.word	0x08006808
 80005b8:	08000855 	.word	0x08000855
 80005bc:	20000128 	.word	0x20000128

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b096      	sub	sp, #88	; 0x58
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2244      	movs	r2, #68	; 0x44
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f006 f87c 	bl	80066cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	463b      	mov	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e6:	f000 fe11 	bl	800120c <HAL_PWREx_ControlVoltageScaling>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f0:	f000 f938 	bl	8000864 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fe:	2310      	movs	r3, #16
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000606:	2302      	movs	r3, #2
 8000608:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800060a:	2301      	movs	r3, #1
 800060c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800060e:	230a      	movs	r3, #10
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000612:	2307      	movs	r3, #7
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fe48 	bl	80012b8 <HAL_RCC_OscConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800062e:	f000 f919 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2303      	movs	r3, #3
 8000638:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000646:	463b      	mov	r3, r7
 8000648:	2104      	movs	r1, #4
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fa10 	bl	8001a70 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000656:	f000 f905 	bl	8000864 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3758      	adds	r7, #88	; 0x58
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_RNG_Init+0x20>)
 800066a:	4a07      	ldr	r2, [pc, #28]	; (8000688 <MX_RNG_Init+0x24>)
 800066c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_RNG_Init+0x20>)
 8000670:	f002 f8de 	bl	8002830 <HAL_RNG_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800067a:	f000 f8f3 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000038 	.word	0x20000038
 8000688:	50060800 	.word	0x50060800

0800068c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_TIM6_Init+0x64>)
 800069e:	4a15      	ldr	r2, [pc, #84]	; (80006f4 <MX_TIM6_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 600;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_TIM6_Init+0x64>)
 80006a4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80006a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_TIM6_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 222;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_TIM6_Init+0x64>)
 80006b2:	22de      	movs	r2, #222	; 0xde
 80006b4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_TIM6_Init+0x64>)
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <MX_TIM6_Init+0x64>)
 80006be:	f002 f98d 	bl	80029dc <HAL_TIM_Base_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80006c8:	f000 f8cc 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_TIM6_Init+0x64>)
 80006da:	f002 fba5 	bl	8002e28 <HAL_TIMEx_MasterConfigSynchronization>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80006e4:	f000 f8be 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000048 	.word	0x20000048
 80006f4:	40001000 	.word	0x40001000

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART2_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_USART2_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800073c:	f002 fc1a 	bl	8002f74 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f88d 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000094 	.word	0x20000094
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b2b      	ldr	r3, [pc, #172]	; (800081c <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a2a      	ldr	r2, [pc, #168]	; (800081c <MX_GPIO_Init+0xc4>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b28      	ldr	r3, [pc, #160]	; (800081c <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a24      	ldr	r2, [pc, #144]	; (800081c <MX_GPIO_Init+0xc4>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_GPIO_Init+0xc4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_GPIO_Init+0xc4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a1e      	ldr	r2, [pc, #120]	; (800081c <MX_GPIO_Init+0xc4>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_GPIO_Init+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a18      	ldr	r2, [pc, #96]	; (800081c <MX_GPIO_Init+0xc4>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_GPIO_Init+0xc4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2120      	movs	r1, #32
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f000 fcf3 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <MX_GPIO_Init+0xc8>)
 80007f2:	f000 fb3b 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f6:	2320      	movs	r3, #32
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f000 fb2c 	bl	8000e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000
 8000820:	48000800 	.word	0x48000800

08000824 <StartTellers>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTellers */
void StartTellers(void *argument)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Initialize 3 tellers
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f003 f9cd 	bl	8003bcc <osDelay>
 8000832:	e7fb      	b.n	800082c <StartTellers+0x8>

08000834 <StartCustomers>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCustomers */
void StartCustomers(void *argument)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCustomers */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800083c:	2001      	movs	r0, #1
 800083e:	f003 f9c5 	bl	8003bcc <osDelay>
 8000842:	e7fb      	b.n	800083c <StartCustomers+0x8>

08000844 <StartClock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClock */
void StartClock(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartClock */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f003 f9bd 	bl	8003bcc <osDelay>
 8000852:	e7fb      	b.n	800084c <StartClock+0x8>

08000854 <StartManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManager */
void StartManager(void *argument)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManager */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f003 f9b5 	bl	8003bcc <osDelay>
 8000862:	e7fb      	b.n	800085c <StartManager+0x8>

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_MspInit+0x4c>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <HAL_MspInit+0x4c>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6613      	str	r3, [r2, #96]	; 0x60
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_MspInit+0x4c>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HAL_MspInit+0x4c>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <HAL_MspInit+0x4c>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6593      	str	r3, [r2, #88]	; 0x58
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_MspInit+0x4c>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	210f      	movs	r1, #15
 80008aa:	f06f 0001 	mvn.w	r0, #1
 80008ae:	f000 faa6 	bl	8000dfe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000

080008c0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b0a6      	sub	sp, #152	; 0x98
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	2288      	movs	r2, #136	; 0x88
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f005 fefb 	bl	80066cc <memset>
  if(hrng->Instance==RNG)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a1d      	ldr	r2, [pc, #116]	; (8000950 <HAL_RNG_MspInit+0x90>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d133      	bne.n	8000948 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80008e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80008e4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80008e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80008ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80008ee:	2302      	movs	r3, #2
 80008f0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80008f6:	2308      	movs	r3, #8
 80008f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008fa:	2307      	movs	r3, #7
 80008fc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80008fe:	2304      	movs	r3, #4
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000902:	2302      	movs	r3, #2
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000906:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4618      	mov	r0, r3
 8000912:	f001 fad1 	bl	8001eb8 <HAL_RCCEx_PeriphCLKConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 800091c:	f7ff ffa2 	bl	8000864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <HAL_RNG_MspInit+0x94>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000924:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <HAL_RNG_MspInit+0x94>)
 8000926:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800092a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_RNG_MspInit+0x94>)
 800092e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 5, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2105      	movs	r1, #5
 800093c:	2050      	movs	r0, #80	; 0x50
 800093e:	f000 fa5e 	bl	8000dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8000942:	2050      	movs	r0, #80	; 0x50
 8000944:	f000 fa77 	bl	8000e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000948:	bf00      	nop
 800094a:	3798      	adds	r7, #152	; 0x98
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	50060800 	.word	0x50060800
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0d      	ldr	r2, [pc, #52]	; (800099c <HAL_TIM_Base_MspInit+0x44>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d113      	bne.n	8000992 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_TIM_Base_MspInit+0x48>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096e:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <HAL_TIM_Base_MspInit+0x48>)
 8000970:	f043 0310 	orr.w	r3, r3, #16
 8000974:	6593      	str	r3, [r2, #88]	; 0x58
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_TIM_Base_MspInit+0x48>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2105      	movs	r1, #5
 8000986:	2036      	movs	r0, #54	; 0x36
 8000988:	f000 fa39 	bl	8000dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800098c:	2036      	movs	r0, #54	; 0x36
 800098e:	f000 fa52 	bl	8000e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40001000 	.word	0x40001000
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0ac      	sub	sp, #176	; 0xb0
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2288      	movs	r2, #136	; 0x88
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f005 fe81 	bl	80066cc <memset>
  if(huart->Instance==USART2)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a21      	ldr	r2, [pc, #132]	; (8000a54 <HAL_UART_MspInit+0xb0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d13b      	bne.n	8000a4c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009d8:	2300      	movs	r3, #0
 80009da:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fa69 	bl	8001eb8 <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009ec:	f7ff ff3a 	bl	8000864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <HAL_UART_MspInit+0xb4>)
 80009f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f4:	4a18      	ldr	r2, [pc, #96]	; (8000a58 <HAL_UART_MspInit+0xb4>)
 80009f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fa:	6593      	str	r3, [r2, #88]	; 0x58
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <HAL_UART_MspInit+0xb4>)
 80009fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <HAL_UART_MspInit+0xb4>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0c:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <HAL_UART_MspInit+0xb4>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_UART_MspInit+0xb4>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a20:	230c      	movs	r3, #12
 8000a22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a42:	4619      	mov	r1, r3
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a48:	f000 fa10 	bl	8000e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	37b0      	adds	r7, #176	; 0xb0
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40004400 	.word	0x40004400
 8000a58:	40021000 	.word	0x40021000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8c:	f000 f8bc 	bl	8000c08 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a90:	f004 fdb6 	bl	8005600 <xTaskGetSchedulerState>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d001      	beq.n	8000a9e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a9a:	f005 fb9d 	bl	80061d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	clock_increment(Clock);
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <TIM6_DAC_IRQHandler+0x18>)
 8000aaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000aae:	f7ff fd0d 	bl	80004cc <clock_increment>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ab2:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <TIM6_DAC_IRQHandler+0x1c>)
 8000ab4:	f001 ffe9 	bl	8002a8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	2000002c 	.word	0x2000002c
 8000ac0:	20000048 	.word	0x20000048

08000ac4 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <RNG_IRQHandler+0x10>)
 8000aca:	f001 ff08 	bl	80028de <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000038 	.word	0x20000038

08000ad8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <SystemInit+0x20>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <SystemInit+0x20>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b00:	f7ff ffea 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	; (8000b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <LoopForever+0xe>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	; (8000b48 <LoopForever+0x16>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f005 fdd7 	bl	80066dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b2e:	f7ff fcf1 	bl	8000514 <main>

08000b32 <LoopForever>:

LoopForever:
    b LoopForever
 8000b32:	e7fe      	b.n	8000b32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b40:	08006894 	.word	0x08006894
  ldr r2, =_sbss
 8000b44:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b48:	2000685c 	.word	0x2000685c

08000b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_2_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_Init+0x3c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <HAL_Init+0x3c>)
 8000b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b64:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b66:	2003      	movs	r0, #3
 8000b68:	f000 f93e 	bl	8000de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b6c:	200f      	movs	r0, #15
 8000b6e:	f000 f80f 	bl	8000b90 <HAL_InitTick>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	e001      	b.n	8000b82 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b7e:	f7ff fe77 	bl	8000870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b82:	79fb      	ldrb	r3, [r7, #7]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <HAL_InitTick+0x6c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d023      	beq.n	8000bec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ba4:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <HAL_InitTick+0x70>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_InitTick+0x6c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f949 	bl	8000e52 <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10f      	bne.n	8000be6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d809      	bhi.n	8000be0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f000 f913 	bl	8000dfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_InitTick+0x74>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	e007      	b.n	8000bf0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	73fb      	strb	r3, [r7, #15]
 8000be4:	e004      	b.n	8000bf0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	73fb      	strb	r3, [r7, #15]
 8000bea:	e001      	b.n	8000bf0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000004 	.word	0x20000004

08000c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_IncTick+0x20>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x24>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <HAL_IncTick+0x24>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000130 	.word	0x20000130

08000c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <HAL_GetTick+0x14>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000130 	.word	0x20000130

08000c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c64:	4013      	ands	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7a:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	60d3      	str	r3, [r2, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	f003 0307 	and.w	r3, r3, #7
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	db0b      	blt.n	8000cd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 021f 	and.w	r2, r3, #31
 8000cc4:	4907      	ldr	r1, [pc, #28]	; (8000ce4 <__NVIC_EnableIRQ+0x38>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	095b      	lsrs	r3, r3, #5
 8000ccc:	2001      	movs	r0, #1
 8000cce:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000e100 	.word	0xe000e100

08000ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db0a      	blt.n	8000d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	490c      	ldr	r1, [pc, #48]	; (8000d34 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d10:	e00a      	b.n	8000d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4908      	ldr	r1, [pc, #32]	; (8000d38 <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	440b      	add	r3, r1
 8000d26:	761a      	strb	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f1c3 0307 	rsb	r3, r3, #7
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf28      	it	cs
 8000d5a:	2304      	movcs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3304      	adds	r3, #4
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d902      	bls.n	8000d6c <NVIC_EncodePriority+0x30>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b03      	subs	r3, #3
 8000d6a:	e000      	b.n	8000d6e <NVIC_EncodePriority+0x32>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
         );
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	; 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db4:	d301      	bcc.n	8000dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00f      	b.n	8000dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <SysTick_Config+0x40>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f7ff ff8e 	bl	8000ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <SysTick_Config+0x40>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <SysTick_Config+0x40>)
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	e000e010 	.word	0xe000e010

08000de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff29 	bl	8000c48 <__NVIC_SetPriorityGrouping>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
 8000e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e10:	f7ff ff3e 	bl	8000c90 <__NVIC_GetPriorityGrouping>
 8000e14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	68b9      	ldr	r1, [r7, #8]
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	f7ff ff8e 	bl	8000d3c <NVIC_EncodePriority>
 8000e20:	4602      	mov	r2, r0
 8000e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff5d 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff31 	bl	8000cac <__NVIC_EnableIRQ>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ffa2 	bl	8000da4 <SysTick_Config>
 8000e60:	4603      	mov	r3, r0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7a:	e17f      	b.n	800117c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	2101      	movs	r1, #1
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8171 	beq.w	8001176 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d005      	beq.n	8000eac <HAL_GPIO_Init+0x40>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d130      	bne.n	8000f0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	091b      	lsrs	r3, r3, #4
 8000ef8:	f003 0201 	and.w	r2, r3, #1
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d118      	bne.n	8000f4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	6939      	ldr	r1, [r7, #16]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80ac 	beq.w	8001176 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	4b5f      	ldr	r3, [pc, #380]	; (800119c <HAL_GPIO_Init+0x330>)
 8001020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001022:	4a5e      	ldr	r2, [pc, #376]	; (800119c <HAL_GPIO_Init+0x330>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6613      	str	r3, [r2, #96]	; 0x60
 800102a:	4b5c      	ldr	r3, [pc, #368]	; (800119c <HAL_GPIO_Init+0x330>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001036:	4a5a      	ldr	r2, [pc, #360]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001060:	d025      	beq.n	80010ae <HAL_GPIO_Init+0x242>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4f      	ldr	r2, [pc, #316]	; (80011a4 <HAL_GPIO_Init+0x338>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d01f      	beq.n	80010aa <HAL_GPIO_Init+0x23e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4e      	ldr	r2, [pc, #312]	; (80011a8 <HAL_GPIO_Init+0x33c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d019      	beq.n	80010a6 <HAL_GPIO_Init+0x23a>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4d      	ldr	r2, [pc, #308]	; (80011ac <HAL_GPIO_Init+0x340>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x236>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4c      	ldr	r2, [pc, #304]	; (80011b0 <HAL_GPIO_Init+0x344>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x232>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4b      	ldr	r2, [pc, #300]	; (80011b4 <HAL_GPIO_Init+0x348>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x22e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4a      	ldr	r2, [pc, #296]	; (80011b8 <HAL_GPIO_Init+0x34c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x22a>
 8001092:	2306      	movs	r3, #6
 8001094:	e00c      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 8001096:	2307      	movs	r3, #7
 8001098:	e00a      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 800109a:	2305      	movs	r3, #5
 800109c:	e008      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 800109e:	2304      	movs	r3, #4
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 80010a2:	2303      	movs	r3, #3
 80010a4:	e004      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x244>
 80010ae:	2300      	movs	r3, #0
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	f002 0203 	and.w	r2, r2, #3
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	4093      	lsls	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010c0:	4937      	ldr	r1, [pc, #220]	; (80011a0 <HAL_GPIO_Init+0x334>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3302      	adds	r3, #2
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <HAL_GPIO_Init+0x350>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010f2:	4a32      	ldr	r2, [pc, #200]	; (80011bc <HAL_GPIO_Init+0x350>)
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010f8:	4b30      	ldr	r3, [pc, #192]	; (80011bc <HAL_GPIO_Init+0x350>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800111c:	4a27      	ldr	r2, [pc, #156]	; (80011bc <HAL_GPIO_Init+0x350>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <HAL_GPIO_Init+0x350>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001146:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <HAL_GPIO_Init+0x350>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <HAL_GPIO_Init+0x350>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001170:	4a12      	ldr	r2, [pc, #72]	; (80011bc <HAL_GPIO_Init+0x350>)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa22 f303 	lsr.w	r3, r2, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	f47f ae78 	bne.w	8000e7c <HAL_GPIO_Init+0x10>
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	371c      	adds	r7, #28
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010000 	.word	0x40010000
 80011a4:	48000400 	.word	0x48000400
 80011a8:	48000800 	.word	0x48000800
 80011ac:	48000c00 	.word	0x48000c00
 80011b0:	48001000 	.word	0x48001000
 80011b4:	48001400 	.word	0x48001400
 80011b8:	48001800 	.word	0x48001800
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <HAL_PWREx_GetVoltageRange+0x18>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40007000 	.word	0x40007000

0800120c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800121a:	d130      	bne.n	800127e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001228:	d038      	beq.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001238:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2232      	movs	r2, #50	; 0x32
 8001240:	fb02 f303 	mul.w	r3, r2, r3
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0c9b      	lsrs	r3, r3, #18
 800124c:	3301      	adds	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001250:	e002      	b.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3b01      	subs	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001264:	d102      	bne.n	800126c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f2      	bne.n	8001252 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001278:	d110      	bne.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e00f      	b.n	800129e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128a:	d007      	beq.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001294:	4a05      	ldr	r2, [pc, #20]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40007000 	.word	0x40007000
 80012b0:	20000000 	.word	0x20000000
 80012b4:	431bde83 	.word	0x431bde83

080012b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e3ca      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ca:	4b97      	ldr	r3, [pc, #604]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d4:	4b94      	ldr	r3, [pc, #592]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 80e4 	beq.w	80014b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <HAL_RCC_OscConfig+0x4a>
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b0c      	cmp	r3, #12
 80012f6:	f040 808b 	bne.w	8001410 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	f040 8087 	bne.w	8001410 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001302:	4b89      	ldr	r3, [pc, #548]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <HAL_RCC_OscConfig+0x62>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e3a2      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1a      	ldr	r2, [r3, #32]
 800131e:	4b82      	ldr	r3, [pc, #520]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <HAL_RCC_OscConfig+0x7c>
 800132a:	4b7f      	ldr	r3, [pc, #508]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001332:	e005      	b.n	8001340 <HAL_RCC_OscConfig+0x88>
 8001334:	4b7c      	ldr	r3, [pc, #496]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001340:	4293      	cmp	r3, r2
 8001342:	d223      	bcs.n	800138c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fd55 	bl	8001df8 <RCC_SetFlashLatencyFromMSIRange>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e383      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001358:	4b73      	ldr	r3, [pc, #460]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a72      	ldr	r2, [pc, #456]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800135e:	f043 0308 	orr.w	r3, r3, #8
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b70      	ldr	r3, [pc, #448]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	496d      	ldr	r1, [pc, #436]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001376:	4b6c      	ldr	r3, [pc, #432]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	4968      	ldr	r1, [pc, #416]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
 800138a:	e025      	b.n	80013d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138c:	4b66      	ldr	r3, [pc, #408]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a65      	ldr	r2, [pc, #404]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b63      	ldr	r3, [pc, #396]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4960      	ldr	r1, [pc, #384]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013aa:	4b5f      	ldr	r3, [pc, #380]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	495b      	ldr	r1, [pc, #364]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fd15 	bl	8001df8 <RCC_SetFlashLatencyFromMSIRange>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e343      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013d8:	f000 fc4a 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b52      	ldr	r3, [pc, #328]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	4950      	ldr	r1, [pc, #320]	; (800152c <HAL_RCC_OscConfig+0x274>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	f003 031f 	and.w	r3, r3, #31
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	4a4e      	ldr	r2, [pc, #312]	; (8001530 <HAL_RCC_OscConfig+0x278>)
 80013f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013f8:	4b4e      	ldr	r3, [pc, #312]	; (8001534 <HAL_RCC_OscConfig+0x27c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fbc7 	bl	8000b90 <HAL_InitTick>
 8001402:	4603      	mov	r3, r0
 8001404:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d052      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	e327      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d032      	beq.n	800147e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001418:	4b43      	ldr	r3, [pc, #268]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a42      	ldr	r2, [pc, #264]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001424:	f7ff fc04 	bl	8000c30 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800142c:	f7ff fc00 	bl	8000c30 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e310      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800143e:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144a:	4b37      	ldr	r3, [pc, #220]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a36      	ldr	r2, [pc, #216]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b34      	ldr	r3, [pc, #208]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4931      	ldr	r1, [pc, #196]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001468:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	492c      	ldr	r1, [pc, #176]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
 800147c:	e01a      	b.n	80014b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a29      	ldr	r2, [pc, #164]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800148a:	f7ff fbd1 	bl	8000c30 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001492:	f7ff fbcd 	bl	8000c30 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e2dd      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f0      	bne.n	8001492 <HAL_RCC_OscConfig+0x1da>
 80014b0:	e000      	b.n	80014b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d074      	beq.n	80015aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x21a>
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	2b0c      	cmp	r3, #12
 80014ca:	d10e      	bne.n	80014ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d10b      	bne.n	80014ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d064      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d160      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e2ba      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x24a>
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80014fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	e026      	b.n	8001550 <HAL_RCC_OscConfig+0x298>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800150a:	d115      	bne.n	8001538 <HAL_RCC_OscConfig+0x280>
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a05      	ldr	r2, [pc, #20]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a02      	ldr	r2, [pc, #8]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e014      	b.n	8001550 <HAL_RCC_OscConfig+0x298>
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	0800683c 	.word	0x0800683c
 8001530:	20000000 	.word	0x20000000
 8001534:	20000004 	.word	0x20000004
 8001538:	4ba0      	ldr	r3, [pc, #640]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a9f      	ldr	r2, [pc, #636]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b9d      	ldr	r3, [pc, #628]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a9c      	ldr	r2, [pc, #624]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fb6a 	bl	8000c30 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fb66 	bl	8000c30 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e276      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001572:	4b92      	ldr	r3, [pc, #584]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x2a8>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fb56 	bl	8000c30 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fb52 	bl	8000c30 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e262      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159a:	4b88      	ldr	r3, [pc, #544]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x2d0>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d060      	beq.n	8001678 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_OscConfig+0x310>
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2b0c      	cmp	r3, #12
 80015c0:	d119      	bne.n	80015f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d116      	bne.n	80015f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c8:	4b7c      	ldr	r3, [pc, #496]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_OscConfig+0x328>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e23f      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	4b76      	ldr	r3, [pc, #472]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	4973      	ldr	r1, [pc, #460]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f4:	e040      	b.n	8001678 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d023      	beq.n	8001646 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fe:	4b6f      	ldr	r3, [pc, #444]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6e      	ldr	r2, [pc, #440]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fb11 	bl	8000c30 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fb0d 	bl	8000c30 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e21d      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001624:	4b65      	ldr	r3, [pc, #404]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b62      	ldr	r3, [pc, #392]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	495f      	ldr	r1, [pc, #380]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e018      	b.n	8001678 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a5c      	ldr	r2, [pc, #368]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800164c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff faed 	bl	8000c30 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff fae9 	bl	8000c30 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e1f9      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800166c:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d03c      	beq.n	80016fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168c:	4b4b      	ldr	r3, [pc, #300]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001692:	4a4a      	ldr	r2, [pc, #296]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff fac8 	bl	8000c30 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fac4 	bl	8000c30 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1d4      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80016b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ef      	beq.n	80016a4 <HAL_RCC_OscConfig+0x3ec>
 80016c4:	e01b      	b.n	80016fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c6:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80016c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016cc:	4a3b      	ldr	r2, [pc, #236]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff faab 	bl	8000c30 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff faa7 	bl	8000c30 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1b7      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f0:	4b32      	ldr	r3, [pc, #200]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80016f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ef      	bne.n	80016de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80a6 	beq.w	8001858 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001710:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10d      	bne.n	8001738 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	4a26      	ldr	r2, [pc, #152]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001726:	6593      	str	r3, [r2, #88]	; 0x58
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001734:	2301      	movs	r3, #1
 8001736:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001738:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_RCC_OscConfig+0x508>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d118      	bne.n	8001776 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <HAL_RCC_OscConfig+0x508>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_RCC_OscConfig+0x508>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001750:	f7ff fa6e 	bl	8000c30 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001758:	f7ff fa6a 	bl	8000c30 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e17a      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_RCC_OscConfig+0x508>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_RCC_OscConfig+0x4d8>
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800178e:	e029      	b.n	80017e4 <HAL_RCC_OscConfig+0x52c>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b05      	cmp	r3, #5
 8001796:	d115      	bne.n	80017c4 <HAL_RCC_OscConfig+0x50c>
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179e:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	4a03      	ldr	r2, [pc, #12]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b8:	e014      	b.n	80017e4 <HAL_RCC_OscConfig+0x52c>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40007000 	.word	0x40007000
 80017c4:	4b9c      	ldr	r3, [pc, #624]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	4a9b      	ldr	r2, [pc, #620]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d4:	4b98      	ldr	r3, [pc, #608]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017da:	4a97      	ldr	r2, [pc, #604]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d016      	beq.n	800181a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff fa20 	bl	8000c30 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f2:	e00a      	b.n	800180a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff fa1c 	bl	8000c30 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e12a      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800180a:	4b8b      	ldr	r3, [pc, #556]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 800180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0ed      	beq.n	80017f4 <HAL_RCC_OscConfig+0x53c>
 8001818:	e015      	b.n	8001846 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181a:	f7ff fa09 	bl	8000c30 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff fa05 	bl	8000c30 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e113      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001838:	4b7f      	ldr	r3, [pc, #508]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1ed      	bne.n	8001822 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001846:	7ffb      	ldrb	r3, [r7, #31]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d105      	bne.n	8001858 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800184c:	4b7a      	ldr	r3, [pc, #488]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	4a79      	ldr	r2, [pc, #484]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001856:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80fe 	beq.w	8001a5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	2b02      	cmp	r3, #2
 8001868:	f040 80d0 	bne.w	8001a0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800186c:	4b72      	ldr	r3, [pc, #456]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	429a      	cmp	r2, r3
 800187e:	d130      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	3b01      	subs	r3, #1
 800188c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d127      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d11f      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018ac:	2a07      	cmp	r2, #7
 80018ae:	bf14      	ite	ne
 80018b0:	2201      	movne	r2, #1
 80018b2:	2200      	moveq	r2, #0
 80018b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d113      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c4:	085b      	lsrs	r3, r3, #1
 80018c6:	3b01      	subs	r3, #1
 80018c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d109      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	085b      	lsrs	r3, r3, #1
 80018da:	3b01      	subs	r3, #1
 80018dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d06e      	beq.n	80019c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d069      	beq.n	80019bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018e8:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018f4:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0ad      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001904:	4b4c      	ldr	r3, [pc, #304]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a4b      	ldr	r2, [pc, #300]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 800190a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800190e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001910:	f7ff f98e 	bl	8000c30 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff f98a 	bl	8000c30 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e09a      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192a:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001936:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	4b40      	ldr	r3, [pc, #256]	; (8001a3c <HAL_RCC_OscConfig+0x784>)
 800193c:	4013      	ands	r3, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001946:	3a01      	subs	r2, #1
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001950:	0212      	lsls	r2, r2, #8
 8001952:	4311      	orrs	r1, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001958:	0852      	lsrs	r2, r2, #1
 800195a:	3a01      	subs	r2, #1
 800195c:	0552      	lsls	r2, r2, #21
 800195e:	4311      	orrs	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001964:	0852      	lsrs	r2, r2, #1
 8001966:	3a01      	subs	r2, #1
 8001968:	0652      	lsls	r2, r2, #25
 800196a:	4311      	orrs	r1, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001970:	0912      	lsrs	r2, r2, #4
 8001972:	0452      	lsls	r2, r2, #17
 8001974:	430a      	orrs	r2, r1
 8001976:	4930      	ldr	r1, [pc, #192]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001978:	4313      	orrs	r3, r2
 800197a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800197c:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a2d      	ldr	r2, [pc, #180]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001988:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4a2a      	ldr	r2, [pc, #168]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 800198e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001992:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001994:	f7ff f94c 	bl	8000c30 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f948 	bl	8000c30 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e058      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ae:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ba:	e050      	b.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e04f      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d148      	bne.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a19      	ldr	r2, [pc, #100]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019e4:	f7ff f924 	bl	8000c30 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f920 	bl	8000c30 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e030      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x734>
 8001a0a:	e028      	b.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d023      	beq.n	8001a5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f907 	bl	8000c30 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	e00c      	b.n	8001a40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff f903 	bl	8000c30 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d905      	bls.n	8001a40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e013      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_RCC_OscConfig+0x7b0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ec      	bne.n	8001a26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_RCC_OscConfig+0x7b0>)
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	4905      	ldr	r1, [pc, #20]	; (8001a68 <HAL_RCC_OscConfig+0x7b0>)
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_RCC_OscConfig+0x7b4>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	60cb      	str	r3, [r1, #12]
 8001a58:	e001      	b.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	feeefffc 	.word	0xfeeefffc

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0e7      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b75      	ldr	r3, [pc, #468]	; (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d910      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b72      	ldr	r3, [pc, #456]	; (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 0207 	bic.w	r2, r3, #7
 8001a9a:	4970      	ldr	r1, [pc, #448]	; (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b6e      	ldr	r3, [pc, #440]	; (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0cf      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d010      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	4b66      	ldr	r3, [pc, #408]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d908      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b63      	ldr	r3, [pc, #396]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4960      	ldr	r1, [pc, #384]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d04c      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af6:	4b5a      	ldr	r3, [pc, #360]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d121      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0a6      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0e:	4b54      	ldr	r3, [pc, #336]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d115      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e09a      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b26:	4b4e      	ldr	r3, [pc, #312]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e08e      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b36:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e086      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b46:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f023 0203 	bic.w	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4943      	ldr	r1, [pc, #268]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b58:	f7ff f86a 	bl	8000c30 <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff f866 	bl	8000c30 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e06e      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 020c 	and.w	r2, r3, #12
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d1eb      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d010      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d208      	bcs.n	8001bb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	492b      	ldr	r1, [pc, #172]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb6:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d210      	bcs.n	8001be6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 0207 	bic.w	r2, r3, #7
 8001bcc:	4923      	ldr	r1, [pc, #140]	; (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd4:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e036      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d008      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	4918      	ldr	r1, [pc, #96]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4910      	ldr	r1, [pc, #64]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c24:	f000 f824 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	490b      	ldr	r1, [pc, #44]	; (8001c64 <HAL_RCC_ClockConfig+0x1f4>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1fc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe ffa1 	bl	8000b90 <HAL_InitTick>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c52:	7afb      	ldrb	r3, [r7, #11]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	0800683c 	.word	0x0800683c
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7e:	4b3e      	ldr	r3, [pc, #248]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c88:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d121      	bne.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d11e      	bne.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ca4:	4b34      	ldr	r3, [pc, #208]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cb0:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	e005      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ccc:	4a2b      	ldr	r2, [pc, #172]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10d      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d102      	bne.n	8001cee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	e004      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf4:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d134      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d003      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0xac>
 8001d14:	e005      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d18:	617b      	str	r3, [r7, #20]
      break;
 8001d1a:	e005      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d1e:	617b      	str	r3, [r7, #20]
      break;
 8001d20:	e002      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	617b      	str	r3, [r7, #20]
      break;
 8001d26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	3301      	adds	r3, #1
 8001d34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	fb03 f202 	mul.w	r2, r3, r2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	0e5b      	lsrs	r3, r3, #25
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d68:	69bb      	ldr	r3, [r7, #24]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	; 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08006854 	.word	0x08006854
 8001d80:	00f42400 	.word	0x00f42400
 8001d84:	007a1200 	.word	0x007a1200

08001d88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001da4:	f7ff fff0 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4904      	ldr	r1, [pc, #16]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	0800684c 	.word	0x0800684c

08001dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dd0:	f7ff ffda 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	0adb      	lsrs	r3, r3, #11
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	4904      	ldr	r1, [pc, #16]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	0800684c 	.word	0x0800684c

08001df8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e04:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e10:	f7ff f9ee 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001e14:	6178      	str	r0, [r7, #20]
 8001e16:	e014      	b.n	8001e42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e18:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	4a24      	ldr	r2, [pc, #144]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e22:	6593      	str	r3, [r2, #88]	; 0x58
 8001e24:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e30:	f7ff f9de 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001e34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e48:	d10b      	bne.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b80      	cmp	r3, #128	; 0x80
 8001e4e:	d919      	bls.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2ba0      	cmp	r3, #160	; 0xa0
 8001e54:	d902      	bls.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e56:	2302      	movs	r3, #2
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	e013      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	e010      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d902      	bls.n	8001e6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e68:	2303      	movs	r3, #3
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	e00a      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b80      	cmp	r3, #128	; 0x80
 8001e72:	d102      	bne.n	8001e7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e74:	2302      	movs	r3, #2
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	e004      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b70      	cmp	r3, #112	; 0x70
 8001e7e:	d101      	bne.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e80:	2301      	movs	r3, #1
 8001e82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 0207 	bic.w	r2, r3, #7
 8001e8c:	4909      	ldr	r1, [pc, #36]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d001      	beq.n	8001ea6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40022000 	.word	0x40022000

08001eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d041      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ed8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001edc:	d02a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ede:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ee2:	d824      	bhi.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ee4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ee8:	d008      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001eea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001eee:	d81e      	bhi.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ef8:	d010      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001efa:	e018      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001efc:	4b86      	ldr	r3, [pc, #536]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a85      	ldr	r2, [pc, #532]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f08:	e015      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 fabb 	bl	800248c <RCCEx_PLLSAI1_Config>
 8001f16:	4603      	mov	r3, r0
 8001f18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f1a:	e00c      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3320      	adds	r3, #32
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fba6 	bl	8002674 <RCCEx_PLLSAI2_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f2c:	e003      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	74fb      	strb	r3, [r7, #19]
      break;
 8001f32:	e000      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10b      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f3c:	4b76      	ldr	r3, [pc, #472]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f4a:	4973      	ldr	r1, [pc, #460]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f52:	e001      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d041      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f6c:	d02a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f72:	d824      	bhi.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f78:	d008      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f7e:	d81e      	bhi.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f88:	d010      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f8a:	e018      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f8c:	4b62      	ldr	r3, [pc, #392]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4a61      	ldr	r2, [pc, #388]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f98:	e015      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fa73 	bl	800248c <RCCEx_PLLSAI1_Config>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001faa:	e00c      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3320      	adds	r3, #32
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fb5e 	bl	8002674 <RCCEx_PLLSAI2_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fbc:	e003      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fc6:	7cfb      	ldrb	r3, [r7, #19]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10b      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fcc:	4b52      	ldr	r3, [pc, #328]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fda:	494f      	ldr	r1, [pc, #316]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fe2:	e001      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80a0 	beq.w	8002136 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ffa:	4b47      	ldr	r3, [pc, #284]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800200a:	2300      	movs	r3, #0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002010:	4b41      	ldr	r3, [pc, #260]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	4a40      	ldr	r2, [pc, #256]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201a:	6593      	str	r3, [r2, #88]	; 0x58
 800201c:	4b3e      	ldr	r3, [pc, #248]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002028:	2301      	movs	r3, #1
 800202a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800202c:	4b3b      	ldr	r3, [pc, #236]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a3a      	ldr	r2, [pc, #232]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002036:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002038:	f7fe fdfa 	bl	8000c30 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800203e:	e009      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002040:	f7fe fdf6 	bl	8000c30 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d902      	bls.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	74fb      	strb	r3, [r7, #19]
        break;
 8002052:	e005      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002054:	4b31      	ldr	r3, [pc, #196]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ef      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d15c      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002066:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002070:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01f      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	d019      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	4a20      	ldr	r2, [pc, #128]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a6:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020b0:	4a19      	ldr	r2, [pc, #100]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d016      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7fe fdb5 	bl	8000c30 <HAL_GetTick>
 80020c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c8:	e00b      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7fe fdb1 	bl	8000c30 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d8:	4293      	cmp	r3, r2
 80020da:	d902      	bls.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	74fb      	strb	r3, [r7, #19]
            break;
 80020e0:	e006      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ec      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002106:	4904      	ldr	r1, [pc, #16]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800210e:	e009      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	74bb      	strb	r3, [r7, #18]
 8002114:	e006      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002124:	7c7b      	ldrb	r3, [r7, #17]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d105      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212a:	4b9e      	ldr	r3, [pc, #632]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	4a9d      	ldr	r2, [pc, #628]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002134:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002142:	4b98      	ldr	r3, [pc, #608]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002148:	f023 0203 	bic.w	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002150:	4994      	ldr	r1, [pc, #592]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002164:	4b8f      	ldr	r3, [pc, #572]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	f023 020c 	bic.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	498c      	ldr	r1, [pc, #560]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002186:	4b87      	ldr	r3, [pc, #540]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	4983      	ldr	r1, [pc, #524]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021a8:	4b7e      	ldr	r3, [pc, #504]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	497b      	ldr	r1, [pc, #492]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ca:	4b76      	ldr	r3, [pc, #472]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d8:	4972      	ldr	r1, [pc, #456]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021ec:	4b6d      	ldr	r3, [pc, #436]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	496a      	ldr	r1, [pc, #424]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800220e:	4b65      	ldr	r3, [pc, #404]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221c:	4961      	ldr	r1, [pc, #388]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002230:	4b5c      	ldr	r3, [pc, #368]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223e:	4959      	ldr	r1, [pc, #356]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002252:	4b54      	ldr	r3, [pc, #336]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002258:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002260:	4950      	ldr	r1, [pc, #320]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002274:	4b4b      	ldr	r3, [pc, #300]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002282:	4948      	ldr	r1, [pc, #288]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002296:	4b43      	ldr	r3, [pc, #268]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	493f      	ldr	r1, [pc, #252]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d028      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022b8:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022c6:	4937      	ldr	r1, [pc, #220]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022d6:	d106      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d8:	4b32      	ldr	r3, [pc, #200]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a31      	ldr	r2, [pc, #196]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e2:	60d3      	str	r3, [r2, #12]
 80022e4:	e011      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022ee:	d10c      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3304      	adds	r3, #4
 80022f4:	2101      	movs	r1, #1
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f8c8 	bl	800248c <RCCEx_PLLSAI1_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d028      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002316:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	491f      	ldr	r1, [pc, #124]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002334:	d106      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002336:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4a1a      	ldr	r2, [pc, #104]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002340:	60d3      	str	r3, [r2, #12]
 8002342:	e011      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800234c:	d10c      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	2101      	movs	r1, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f899 	bl	800248c <RCCEx_PLLSAI1_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d02b      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002382:	4908      	ldr	r1, [pc, #32]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002392:	d109      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a02      	ldr	r2, [pc, #8]	; (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800239e:	60d3      	str	r3, [r2, #12]
 80023a0:	e014      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2101      	movs	r1, #1
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 f867 	bl	800248c <RCCEx_PLLSAI1_Config>
 80023be:	4603      	mov	r3, r0
 80023c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d02f      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023d8:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023e6:	4928      	ldr	r1, [pc, #160]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023f6:	d10d      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3304      	adds	r3, #4
 80023fc:	2102      	movs	r1, #2
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f844 	bl	800248c <RCCEx_PLLSAI1_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d014      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	74bb      	strb	r3, [r7, #18]
 8002412:	e011      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800241c:	d10c      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3320      	adds	r3, #32
 8002422:	2102      	movs	r1, #2
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f925 	bl	8002674 <RCCEx_PLLSAI2_Config>
 800242a:	4603      	mov	r3, r0
 800242c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002444:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002452:	490d      	ldr	r1, [pc, #52]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002476:	4904      	ldr	r1, [pc, #16]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800247e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000

0800248c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800249a:	4b75      	ldr	r3, [pc, #468]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d018      	beq.n	80024d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024a6:	4b72      	ldr	r3, [pc, #456]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0203 	and.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d10d      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
       ||
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024be:	4b6c      	ldr	r3, [pc, #432]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
       ||
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d047      	beq.n	8002562 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
 80024d6:	e044      	b.n	8002562 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d018      	beq.n	8002512 <RCCEx_PLLSAI1_Config+0x86>
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d825      	bhi.n	8002530 <RCCEx_PLLSAI1_Config+0xa4>
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d002      	beq.n	80024ee <RCCEx_PLLSAI1_Config+0x62>
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d009      	beq.n	8002500 <RCCEx_PLLSAI1_Config+0x74>
 80024ec:	e020      	b.n	8002530 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024ee:	4b60      	ldr	r3, [pc, #384]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d11d      	bne.n	8002536 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024fe:	e01a      	b.n	8002536 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002500:	4b5b      	ldr	r3, [pc, #364]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002508:	2b00      	cmp	r3, #0
 800250a:	d116      	bne.n	800253a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002510:	e013      	b.n	800253a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002512:	4b57      	ldr	r3, [pc, #348]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10f      	bne.n	800253e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800251e:	4b54      	ldr	r3, [pc, #336]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800252e:	e006      	b.n	800253e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
      break;
 8002534:	e004      	b.n	8002540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002536:	bf00      	nop
 8002538:	e002      	b.n	8002540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800253a:	bf00      	nop
 800253c:	e000      	b.n	8002540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800253e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10d      	bne.n	8002562 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002546:	4b4a      	ldr	r3, [pc, #296]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6819      	ldr	r1, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	430b      	orrs	r3, r1
 800255c:	4944      	ldr	r1, [pc, #272]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d17d      	bne.n	8002664 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002568:	4b41      	ldr	r3, [pc, #260]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a40      	ldr	r2, [pc, #256]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002574:	f7fe fb5c 	bl	8000c30 <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800257a:	e009      	b.n	8002590 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800257c:	f7fe fb58 	bl	8000c30 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d902      	bls.n	8002590 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	73fb      	strb	r3, [r7, #15]
        break;
 800258e:	e005      	b.n	800259c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002590:	4b37      	ldr	r3, [pc, #220]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1ef      	bne.n	800257c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d160      	bne.n	8002664 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d111      	bne.n	80025cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025a8:	4b31      	ldr	r3, [pc, #196]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6892      	ldr	r2, [r2, #8]
 80025b8:	0211      	lsls	r1, r2, #8
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68d2      	ldr	r2, [r2, #12]
 80025be:	0912      	lsrs	r2, r2, #4
 80025c0:	0452      	lsls	r2, r2, #17
 80025c2:	430a      	orrs	r2, r1
 80025c4:	492a      	ldr	r1, [pc, #168]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	610b      	str	r3, [r1, #16]
 80025ca:	e027      	b.n	800261c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d112      	bne.n	80025f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025d2:	4b27      	ldr	r3, [pc, #156]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6892      	ldr	r2, [r2, #8]
 80025e2:	0211      	lsls	r1, r2, #8
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6912      	ldr	r2, [r2, #16]
 80025e8:	0852      	lsrs	r2, r2, #1
 80025ea:	3a01      	subs	r2, #1
 80025ec:	0552      	lsls	r2, r2, #21
 80025ee:	430a      	orrs	r2, r1
 80025f0:	491f      	ldr	r1, [pc, #124]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	610b      	str	r3, [r1, #16]
 80025f6:	e011      	b.n	800261c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025f8:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002600:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6892      	ldr	r2, [r2, #8]
 8002608:	0211      	lsls	r1, r2, #8
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6952      	ldr	r2, [r2, #20]
 800260e:	0852      	lsrs	r2, r2, #1
 8002610:	3a01      	subs	r2, #1
 8002612:	0652      	lsls	r2, r2, #25
 8002614:	430a      	orrs	r2, r1
 8002616:	4916      	ldr	r1, [pc, #88]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a13      	ldr	r2, [pc, #76]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002622:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002626:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe fb02 	bl	8000c30 <HAL_GetTick>
 800262c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800262e:	e009      	b.n	8002644 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002630:	f7fe fafe 	bl	8000c30 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d902      	bls.n	8002644 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	73fb      	strb	r3, [r7, #15]
          break;
 8002642:	e005      	b.n	8002650 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ef      	beq.n	8002630 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	4904      	ldr	r1, [pc, #16]	; (8002670 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000

08002674 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002682:	4b6a      	ldr	r3, [pc, #424]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d018      	beq.n	80026c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800268e:	4b67      	ldr	r3, [pc, #412]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f003 0203 	and.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d10d      	bne.n	80026ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
       ||
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026a6:	4b61      	ldr	r3, [pc, #388]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
       ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d047      	beq.n	800274a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
 80026be:	e044      	b.n	800274a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d018      	beq.n	80026fa <RCCEx_PLLSAI2_Config+0x86>
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d825      	bhi.n	8002718 <RCCEx_PLLSAI2_Config+0xa4>
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d002      	beq.n	80026d6 <RCCEx_PLLSAI2_Config+0x62>
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d009      	beq.n	80026e8 <RCCEx_PLLSAI2_Config+0x74>
 80026d4:	e020      	b.n	8002718 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026d6:	4b55      	ldr	r3, [pc, #340]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d11d      	bne.n	800271e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e6:	e01a      	b.n	800271e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026e8:	4b50      	ldr	r3, [pc, #320]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d116      	bne.n	8002722 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f8:	e013      	b.n	8002722 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026fa:	4b4c      	ldr	r3, [pc, #304]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002706:	4b49      	ldr	r3, [pc, #292]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002716:	e006      	b.n	8002726 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      break;
 800271c:	e004      	b.n	8002728 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800271e:	bf00      	nop
 8002720:	e002      	b.n	8002728 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002722:	bf00      	nop
 8002724:	e000      	b.n	8002728 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002726:	bf00      	nop
    }

    if(status == HAL_OK)
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10d      	bne.n	800274a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800272e:	4b3f      	ldr	r3, [pc, #252]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6819      	ldr	r1, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	430b      	orrs	r3, r1
 8002744:	4939      	ldr	r1, [pc, #228]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d167      	bne.n	8002820 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002750:	4b36      	ldr	r3, [pc, #216]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a35      	ldr	r2, [pc, #212]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800275c:	f7fe fa68 	bl	8000c30 <HAL_GetTick>
 8002760:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002762:	e009      	b.n	8002778 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002764:	f7fe fa64 	bl	8000c30 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d902      	bls.n	8002778 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	73fb      	strb	r3, [r7, #15]
        break;
 8002776:	e005      	b.n	8002784 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002778:	4b2c      	ldr	r3, [pc, #176]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1ef      	bne.n	8002764 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d14a      	bne.n	8002820 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d111      	bne.n	80027b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002790:	4b26      	ldr	r3, [pc, #152]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6892      	ldr	r2, [r2, #8]
 80027a0:	0211      	lsls	r1, r2, #8
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68d2      	ldr	r2, [r2, #12]
 80027a6:	0912      	lsrs	r2, r2, #4
 80027a8:	0452      	lsls	r2, r2, #17
 80027aa:	430a      	orrs	r2, r1
 80027ac:	491f      	ldr	r1, [pc, #124]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	614b      	str	r3, [r1, #20]
 80027b2:	e011      	b.n	80027d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6892      	ldr	r2, [r2, #8]
 80027c4:	0211      	lsls	r1, r2, #8
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6912      	ldr	r2, [r2, #16]
 80027ca:	0852      	lsrs	r2, r2, #1
 80027cc:	3a01      	subs	r2, #1
 80027ce:	0652      	lsls	r2, r2, #25
 80027d0:	430a      	orrs	r2, r1
 80027d2:	4916      	ldr	r1, [pc, #88]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027d8:	4b14      	ldr	r3, [pc, #80]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a13      	ldr	r2, [pc, #76]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7fe fa24 	bl	8000c30 <HAL_GetTick>
 80027e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027ea:	e009      	b.n	8002800 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027ec:	f7fe fa20 	bl	8000c30 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d902      	bls.n	8002800 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	73fb      	strb	r3, [r7, #15]
          break;
 80027fe:	e005      	b.n	800280c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002800:	4b0a      	ldr	r3, [pc, #40]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0ef      	beq.n	80027ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	4904      	ldr	r1, [pc, #16]	; (800282c <RCCEx_PLLSAI2_Config+0x1b8>)
 800281c:	4313      	orrs	r3, r2
 800281e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002820:	7bfb      	ldrb	r3, [r7, #15]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000

08002830 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e049      	b.n	80028d6 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	795b      	ldrb	r3, [r3, #5]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7fe f834 	bl	80008c0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 0204 	orr.w	r2, r2, #4
 800286c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d104      	bne.n	8002886 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2204      	movs	r2, #4
 8002880:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e027      	b.n	80028d6 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002886:	f7fe f9d3 	bl	8000c30 <HAL_GetTick>
 800288a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800288c:	e015      	b.n	80028ba <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800288e:	f7fe f9cf 	bl	8000c30 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d90e      	bls.n	80028ba <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d107      	bne.n	80028ba <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2204      	movs	r2, #4
 80028ae:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00d      	b.n	80028d6 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d0e2      	beq.n	800288e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2210      	movs	r2, #16
 8002900:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8002902:	2301      	movs	r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	e01f      	b.n	8002948 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01a      	beq.n	8002948 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d108      	bne.n	800292e <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	e00c      	b.n	8002948 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2208      	movs	r2, #8
 8002932:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 8002934:	2301      	movs	r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0208 	bic.w	r2, r2, #8
 8002946:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d10b      	bne.n	8002966 <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2204      	movs	r2, #4
 8002952:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f837 	bl	80029c8 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8002962:	605a      	str	r2, [r3, #4]

    return;
 8002964:	e022      	b.n	80029ac <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01d      	beq.n	80029ac <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0208 	bic.w	r2, r2, #8
 800297e:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	795b      	ldrb	r3, [r3, #5]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b04      	cmp	r3, #4
 8002992:	d00b      	beq.n	80029ac <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4619      	mov	r1, r3
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f803 	bl	80029b2 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e049      	b.n	8002a82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fd ffa8 	bl	8000958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f000 f96a 	bl	8002cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d020      	beq.n	8002aee <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01b      	beq.n	8002aee <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f06f 0202 	mvn.w	r2, #2
 8002abe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f8ee 	bl	8002cb6 <HAL_TIM_IC_CaptureCallback>
 8002ada:	e005      	b.n	8002ae8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f8e0 	bl	8002ca2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f8f1 	bl	8002cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d020      	beq.n	8002b3a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01b      	beq.n	8002b3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f06f 0204 	mvn.w	r2, #4
 8002b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f8c8 	bl	8002cb6 <HAL_TIM_IC_CaptureCallback>
 8002b26:	e005      	b.n	8002b34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f8ba 	bl	8002ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8cb 	bl	8002cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01b      	beq.n	8002b86 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f06f 0208 	mvn.w	r2, #8
 8002b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f8a2 	bl	8002cb6 <HAL_TIM_IC_CaptureCallback>
 8002b72:	e005      	b.n	8002b80 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f894 	bl	8002ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8a5 	bl	8002cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d020      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d01b      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f06f 0210 	mvn.w	r2, #16
 8002ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2208      	movs	r2, #8
 8002ba8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f87c 	bl	8002cb6 <HAL_TIM_IC_CaptureCallback>
 8002bbe:	e005      	b.n	8002bcc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f86e 	bl	8002ca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f87f 	bl	8002cca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00c      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f06f 0201 	mvn.w	r2, #1
 8002bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f84c 	bl	8002c8e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00c      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f999 	bl	8002f4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00c      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d007      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f991 	bl	8002f60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00c      	beq.n	8002c62 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f83e 	bl	8002cde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00c      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d007      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f06f 0220 	mvn.w	r2, #32
 8002c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f959 	bl	8002f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a40      	ldr	r2, [pc, #256]	; (8002e08 <TIM_Base_SetConfig+0x114>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d013      	beq.n	8002d34 <TIM_Base_SetConfig+0x40>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d12:	d00f      	beq.n	8002d34 <TIM_Base_SetConfig+0x40>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a3d      	ldr	r2, [pc, #244]	; (8002e0c <TIM_Base_SetConfig+0x118>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00b      	beq.n	8002d34 <TIM_Base_SetConfig+0x40>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a3c      	ldr	r2, [pc, #240]	; (8002e10 <TIM_Base_SetConfig+0x11c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d007      	beq.n	8002d34 <TIM_Base_SetConfig+0x40>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a3b      	ldr	r2, [pc, #236]	; (8002e14 <TIM_Base_SetConfig+0x120>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d003      	beq.n	8002d34 <TIM_Base_SetConfig+0x40>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a3a      	ldr	r2, [pc, #232]	; (8002e18 <TIM_Base_SetConfig+0x124>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d108      	bne.n	8002d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a2f      	ldr	r2, [pc, #188]	; (8002e08 <TIM_Base_SetConfig+0x114>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01f      	beq.n	8002d8e <TIM_Base_SetConfig+0x9a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d54:	d01b      	beq.n	8002d8e <TIM_Base_SetConfig+0x9a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a2c      	ldr	r2, [pc, #176]	; (8002e0c <TIM_Base_SetConfig+0x118>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d017      	beq.n	8002d8e <TIM_Base_SetConfig+0x9a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a2b      	ldr	r2, [pc, #172]	; (8002e10 <TIM_Base_SetConfig+0x11c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <TIM_Base_SetConfig+0x9a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a2a      	ldr	r2, [pc, #168]	; (8002e14 <TIM_Base_SetConfig+0x120>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00f      	beq.n	8002d8e <TIM_Base_SetConfig+0x9a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a29      	ldr	r2, [pc, #164]	; (8002e18 <TIM_Base_SetConfig+0x124>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00b      	beq.n	8002d8e <TIM_Base_SetConfig+0x9a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a28      	ldr	r2, [pc, #160]	; (8002e1c <TIM_Base_SetConfig+0x128>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d007      	beq.n	8002d8e <TIM_Base_SetConfig+0x9a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a27      	ldr	r2, [pc, #156]	; (8002e20 <TIM_Base_SetConfig+0x12c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d003      	beq.n	8002d8e <TIM_Base_SetConfig+0x9a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a26      	ldr	r2, [pc, #152]	; (8002e24 <TIM_Base_SetConfig+0x130>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d108      	bne.n	8002da0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <TIM_Base_SetConfig+0x114>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00f      	beq.n	8002dec <TIM_Base_SetConfig+0xf8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <TIM_Base_SetConfig+0x124>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d00b      	beq.n	8002dec <TIM_Base_SetConfig+0xf8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a11      	ldr	r2, [pc, #68]	; (8002e1c <TIM_Base_SetConfig+0x128>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d007      	beq.n	8002dec <TIM_Base_SetConfig+0xf8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a10      	ldr	r2, [pc, #64]	; (8002e20 <TIM_Base_SetConfig+0x12c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d003      	beq.n	8002dec <TIM_Base_SetConfig+0xf8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <TIM_Base_SetConfig+0x130>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d103      	bne.n	8002df4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	615a      	str	r2, [r3, #20]
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40000800 	.word	0x40000800
 8002e14:	40000c00 	.word	0x40000c00
 8002e18:	40013400 	.word	0x40013400
 8002e1c:	40014000 	.word	0x40014000
 8002e20:	40014400 	.word	0x40014400
 8002e24:	40014800 	.word	0x40014800

08002e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e068      	b.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a2e      	ldr	r2, [pc, #184]	; (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d004      	beq.n	8002e74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2d      	ldr	r2, [pc, #180]	; (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d108      	bne.n	8002e86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1e      	ldr	r2, [pc, #120]	; (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01d      	beq.n	8002ee6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb2:	d018      	beq.n	8002ee6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1b      	ldr	r2, [pc, #108]	; (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1a      	ldr	r2, [pc, #104]	; (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00e      	beq.n	8002ee6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d009      	beq.n	8002ee6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d004      	beq.n	8002ee6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d10c      	bne.n	8002f00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	40013400 	.word	0x40013400
 8002f28:	40000400 	.word	0x40000400
 8002f2c:	40000800 	.word	0x40000800
 8002f30:	40000c00 	.word	0x40000c00
 8002f34:	40014000 	.word	0x40014000

08002f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e040      	b.n	8003008 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd fd04 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2224      	movs	r2, #36	; 0x24
 8002fa0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0201 	bic.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fae0 	bl	8003580 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f825 	bl	8003010 <UART_SetConfig>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e01b      	b.n	8003008 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fb5f 	bl	80036c4 <UART_CheckIdleState>
 8003006:	4603      	mov	r3, r0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003014:	b08a      	sub	sp, #40	; 0x28
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	431a      	orrs	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	431a      	orrs	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	4313      	orrs	r3, r2
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4ba4      	ldr	r3, [pc, #656]	; (80032d0 <UART_SetConfig+0x2c0>)
 8003040:	4013      	ands	r3, r2
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003048:	430b      	orrs	r3, r1
 800304a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a99      	ldr	r2, [pc, #612]	; (80032d4 <UART_SetConfig+0x2c4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003078:	4313      	orrs	r3, r2
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a90      	ldr	r2, [pc, #576]	; (80032d8 <UART_SetConfig+0x2c8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d126      	bne.n	80030e8 <UART_SetConfig+0xd8>
 800309a:	4b90      	ldr	r3, [pc, #576]	; (80032dc <UART_SetConfig+0x2cc>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d81b      	bhi.n	80030e0 <UART_SetConfig+0xd0>
 80030a8:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <UART_SetConfig+0xa0>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030c1 	.word	0x080030c1
 80030b4:	080030d1 	.word	0x080030d1
 80030b8:	080030c9 	.word	0x080030c9
 80030bc:	080030d9 	.word	0x080030d9
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c6:	e116      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80030c8:	2302      	movs	r3, #2
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ce:	e112      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80030d0:	2304      	movs	r3, #4
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d6:	e10e      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80030d8:	2308      	movs	r3, #8
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030de:	e10a      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80030e0:	2310      	movs	r3, #16
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e6:	e106      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a7c      	ldr	r2, [pc, #496]	; (80032e0 <UART_SetConfig+0x2d0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d138      	bne.n	8003164 <UART_SetConfig+0x154>
 80030f2:	4b7a      	ldr	r3, [pc, #488]	; (80032dc <UART_SetConfig+0x2cc>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b0c      	cmp	r3, #12
 80030fe:	d82d      	bhi.n	800315c <UART_SetConfig+0x14c>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <UART_SetConfig+0xf8>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	0800313d 	.word	0x0800313d
 800310c:	0800315d 	.word	0x0800315d
 8003110:	0800315d 	.word	0x0800315d
 8003114:	0800315d 	.word	0x0800315d
 8003118:	0800314d 	.word	0x0800314d
 800311c:	0800315d 	.word	0x0800315d
 8003120:	0800315d 	.word	0x0800315d
 8003124:	0800315d 	.word	0x0800315d
 8003128:	08003145 	.word	0x08003145
 800312c:	0800315d 	.word	0x0800315d
 8003130:	0800315d 	.word	0x0800315d
 8003134:	0800315d 	.word	0x0800315d
 8003138:	08003155 	.word	0x08003155
 800313c:	2300      	movs	r3, #0
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003142:	e0d8      	b.n	80032f6 <UART_SetConfig+0x2e6>
 8003144:	2302      	movs	r3, #2
 8003146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314a:	e0d4      	b.n	80032f6 <UART_SetConfig+0x2e6>
 800314c:	2304      	movs	r3, #4
 800314e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003152:	e0d0      	b.n	80032f6 <UART_SetConfig+0x2e6>
 8003154:	2308      	movs	r3, #8
 8003156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315a:	e0cc      	b.n	80032f6 <UART_SetConfig+0x2e6>
 800315c:	2310      	movs	r3, #16
 800315e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003162:	e0c8      	b.n	80032f6 <UART_SetConfig+0x2e6>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a5e      	ldr	r2, [pc, #376]	; (80032e4 <UART_SetConfig+0x2d4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d125      	bne.n	80031ba <UART_SetConfig+0x1aa>
 800316e:	4b5b      	ldr	r3, [pc, #364]	; (80032dc <UART_SetConfig+0x2cc>)
 8003170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003174:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003178:	2b30      	cmp	r3, #48	; 0x30
 800317a:	d016      	beq.n	80031aa <UART_SetConfig+0x19a>
 800317c:	2b30      	cmp	r3, #48	; 0x30
 800317e:	d818      	bhi.n	80031b2 <UART_SetConfig+0x1a2>
 8003180:	2b20      	cmp	r3, #32
 8003182:	d00a      	beq.n	800319a <UART_SetConfig+0x18a>
 8003184:	2b20      	cmp	r3, #32
 8003186:	d814      	bhi.n	80031b2 <UART_SetConfig+0x1a2>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <UART_SetConfig+0x182>
 800318c:	2b10      	cmp	r3, #16
 800318e:	d008      	beq.n	80031a2 <UART_SetConfig+0x192>
 8003190:	e00f      	b.n	80031b2 <UART_SetConfig+0x1a2>
 8003192:	2300      	movs	r3, #0
 8003194:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003198:	e0ad      	b.n	80032f6 <UART_SetConfig+0x2e6>
 800319a:	2302      	movs	r3, #2
 800319c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a0:	e0a9      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80031a2:	2304      	movs	r3, #4
 80031a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a8:	e0a5      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80031aa:	2308      	movs	r3, #8
 80031ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b0:	e0a1      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80031b2:	2310      	movs	r3, #16
 80031b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b8:	e09d      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a4a      	ldr	r2, [pc, #296]	; (80032e8 <UART_SetConfig+0x2d8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d125      	bne.n	8003210 <UART_SetConfig+0x200>
 80031c4:	4b45      	ldr	r3, [pc, #276]	; (80032dc <UART_SetConfig+0x2cc>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031ce:	2bc0      	cmp	r3, #192	; 0xc0
 80031d0:	d016      	beq.n	8003200 <UART_SetConfig+0x1f0>
 80031d2:	2bc0      	cmp	r3, #192	; 0xc0
 80031d4:	d818      	bhi.n	8003208 <UART_SetConfig+0x1f8>
 80031d6:	2b80      	cmp	r3, #128	; 0x80
 80031d8:	d00a      	beq.n	80031f0 <UART_SetConfig+0x1e0>
 80031da:	2b80      	cmp	r3, #128	; 0x80
 80031dc:	d814      	bhi.n	8003208 <UART_SetConfig+0x1f8>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <UART_SetConfig+0x1d8>
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	d008      	beq.n	80031f8 <UART_SetConfig+0x1e8>
 80031e6:	e00f      	b.n	8003208 <UART_SetConfig+0x1f8>
 80031e8:	2300      	movs	r3, #0
 80031ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ee:	e082      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80031f0:	2302      	movs	r3, #2
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f6:	e07e      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80031f8:	2304      	movs	r3, #4
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fe:	e07a      	b.n	80032f6 <UART_SetConfig+0x2e6>
 8003200:	2308      	movs	r3, #8
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003206:	e076      	b.n	80032f6 <UART_SetConfig+0x2e6>
 8003208:	2310      	movs	r3, #16
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320e:	e072      	b.n	80032f6 <UART_SetConfig+0x2e6>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a35      	ldr	r2, [pc, #212]	; (80032ec <UART_SetConfig+0x2dc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d12a      	bne.n	8003270 <UART_SetConfig+0x260>
 800321a:	4b30      	ldr	r3, [pc, #192]	; (80032dc <UART_SetConfig+0x2cc>)
 800321c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003224:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003228:	d01a      	beq.n	8003260 <UART_SetConfig+0x250>
 800322a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800322e:	d81b      	bhi.n	8003268 <UART_SetConfig+0x258>
 8003230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003234:	d00c      	beq.n	8003250 <UART_SetConfig+0x240>
 8003236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323a:	d815      	bhi.n	8003268 <UART_SetConfig+0x258>
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <UART_SetConfig+0x238>
 8003240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003244:	d008      	beq.n	8003258 <UART_SetConfig+0x248>
 8003246:	e00f      	b.n	8003268 <UART_SetConfig+0x258>
 8003248:	2300      	movs	r3, #0
 800324a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324e:	e052      	b.n	80032f6 <UART_SetConfig+0x2e6>
 8003250:	2302      	movs	r3, #2
 8003252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003256:	e04e      	b.n	80032f6 <UART_SetConfig+0x2e6>
 8003258:	2304      	movs	r3, #4
 800325a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325e:	e04a      	b.n	80032f6 <UART_SetConfig+0x2e6>
 8003260:	2308      	movs	r3, #8
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003266:	e046      	b.n	80032f6 <UART_SetConfig+0x2e6>
 8003268:	2310      	movs	r3, #16
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326e:	e042      	b.n	80032f6 <UART_SetConfig+0x2e6>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <UART_SetConfig+0x2c4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d13a      	bne.n	80032f0 <UART_SetConfig+0x2e0>
 800327a:	4b18      	ldr	r3, [pc, #96]	; (80032dc <UART_SetConfig+0x2cc>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003280:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003284:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003288:	d01a      	beq.n	80032c0 <UART_SetConfig+0x2b0>
 800328a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800328e:	d81b      	bhi.n	80032c8 <UART_SetConfig+0x2b8>
 8003290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003294:	d00c      	beq.n	80032b0 <UART_SetConfig+0x2a0>
 8003296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800329a:	d815      	bhi.n	80032c8 <UART_SetConfig+0x2b8>
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <UART_SetConfig+0x298>
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a4:	d008      	beq.n	80032b8 <UART_SetConfig+0x2a8>
 80032a6:	e00f      	b.n	80032c8 <UART_SetConfig+0x2b8>
 80032a8:	2300      	movs	r3, #0
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ae:	e022      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80032b0:	2302      	movs	r3, #2
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b6:	e01e      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80032b8:	2304      	movs	r3, #4
 80032ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032be:	e01a      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80032c0:	2308      	movs	r3, #8
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c6:	e016      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80032c8:	2310      	movs	r3, #16
 80032ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ce:	e012      	b.n	80032f6 <UART_SetConfig+0x2e6>
 80032d0:	efff69f3 	.word	0xefff69f3
 80032d4:	40008000 	.word	0x40008000
 80032d8:	40013800 	.word	0x40013800
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40004400 	.word	0x40004400
 80032e4:	40004800 	.word	0x40004800
 80032e8:	40004c00 	.word	0x40004c00
 80032ec:	40005000 	.word	0x40005000
 80032f0:	2310      	movs	r3, #16
 80032f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a9f      	ldr	r2, [pc, #636]	; (8003578 <UART_SetConfig+0x568>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d17a      	bne.n	80033f6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003300:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003304:	2b08      	cmp	r3, #8
 8003306:	d824      	bhi.n	8003352 <UART_SetConfig+0x342>
 8003308:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <UART_SetConfig+0x300>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	08003335 	.word	0x08003335
 8003314:	08003353 	.word	0x08003353
 8003318:	0800333d 	.word	0x0800333d
 800331c:	08003353 	.word	0x08003353
 8003320:	08003343 	.word	0x08003343
 8003324:	08003353 	.word	0x08003353
 8003328:	08003353 	.word	0x08003353
 800332c:	08003353 	.word	0x08003353
 8003330:	0800334b 	.word	0x0800334b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003334:	f7fe fd34 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8003338:	61f8      	str	r0, [r7, #28]
        break;
 800333a:	e010      	b.n	800335e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800333c:	4b8f      	ldr	r3, [pc, #572]	; (800357c <UART_SetConfig+0x56c>)
 800333e:	61fb      	str	r3, [r7, #28]
        break;
 8003340:	e00d      	b.n	800335e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003342:	f7fe fc95 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8003346:	61f8      	str	r0, [r7, #28]
        break;
 8003348:	e009      	b.n	800335e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800334a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800334e:	61fb      	str	r3, [r7, #28]
        break;
 8003350:	e005      	b.n	800335e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800335c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80fb 	beq.w	800355c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	429a      	cmp	r2, r3
 8003374:	d305      	bcc.n	8003382 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	429a      	cmp	r2, r3
 8003380:	d903      	bls.n	800338a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003388:	e0e8      	b.n	800355c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	2200      	movs	r2, #0
 800338e:	461c      	mov	r4, r3
 8003390:	4615      	mov	r5, r2
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	022b      	lsls	r3, r5, #8
 800339c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033a0:	0222      	lsls	r2, r4, #8
 80033a2:	68f9      	ldr	r1, [r7, #12]
 80033a4:	6849      	ldr	r1, [r1, #4]
 80033a6:	0849      	lsrs	r1, r1, #1
 80033a8:	2000      	movs	r0, #0
 80033aa:	4688      	mov	r8, r1
 80033ac:	4681      	mov	r9, r0
 80033ae:	eb12 0a08 	adds.w	sl, r2, r8
 80033b2:	eb43 0b09 	adc.w	fp, r3, r9
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	607a      	str	r2, [r7, #4]
 80033c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033c4:	4650      	mov	r0, sl
 80033c6:	4659      	mov	r1, fp
 80033c8:	f7fc ff02 	bl	80001d0 <__aeabi_uldivmod>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4613      	mov	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033da:	d308      	bcc.n	80033ee <UART_SetConfig+0x3de>
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033e2:	d204      	bcs.n	80033ee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	60da      	str	r2, [r3, #12]
 80033ec:	e0b6      	b.n	800355c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033f4:	e0b2      	b.n	800355c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033fe:	d15e      	bne.n	80034be <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003400:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003404:	2b08      	cmp	r3, #8
 8003406:	d828      	bhi.n	800345a <UART_SetConfig+0x44a>
 8003408:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <UART_SetConfig+0x400>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	08003435 	.word	0x08003435
 8003414:	0800343d 	.word	0x0800343d
 8003418:	08003445 	.word	0x08003445
 800341c:	0800345b 	.word	0x0800345b
 8003420:	0800344b 	.word	0x0800344b
 8003424:	0800345b 	.word	0x0800345b
 8003428:	0800345b 	.word	0x0800345b
 800342c:	0800345b 	.word	0x0800345b
 8003430:	08003453 	.word	0x08003453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003434:	f7fe fcb4 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8003438:	61f8      	str	r0, [r7, #28]
        break;
 800343a:	e014      	b.n	8003466 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800343c:	f7fe fcc6 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 8003440:	61f8      	str	r0, [r7, #28]
        break;
 8003442:	e010      	b.n	8003466 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003444:	4b4d      	ldr	r3, [pc, #308]	; (800357c <UART_SetConfig+0x56c>)
 8003446:	61fb      	str	r3, [r7, #28]
        break;
 8003448:	e00d      	b.n	8003466 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800344a:	f7fe fc11 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 800344e:	61f8      	str	r0, [r7, #28]
        break;
 8003450:	e009      	b.n	8003466 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003456:	61fb      	str	r3, [r7, #28]
        break;
 8003458:	e005      	b.n	8003466 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003464:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d077      	beq.n	800355c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005a      	lsls	r2, r3, #1
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	441a      	add	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b0f      	cmp	r3, #15
 8003486:	d916      	bls.n	80034b6 <UART_SetConfig+0x4a6>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348e:	d212      	bcs.n	80034b6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	b29b      	uxth	r3, r3
 8003494:	f023 030f 	bic.w	r3, r3, #15
 8003498:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	b29b      	uxth	r3, r3
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	8afb      	ldrh	r3, [r7, #22]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	8afa      	ldrh	r2, [r7, #22]
 80034b2:	60da      	str	r2, [r3, #12]
 80034b4:	e052      	b.n	800355c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034bc:	e04e      	b.n	800355c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d827      	bhi.n	8003516 <UART_SetConfig+0x506>
 80034c6:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <UART_SetConfig+0x4bc>)
 80034c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034cc:	080034f1 	.word	0x080034f1
 80034d0:	080034f9 	.word	0x080034f9
 80034d4:	08003501 	.word	0x08003501
 80034d8:	08003517 	.word	0x08003517
 80034dc:	08003507 	.word	0x08003507
 80034e0:	08003517 	.word	0x08003517
 80034e4:	08003517 	.word	0x08003517
 80034e8:	08003517 	.word	0x08003517
 80034ec:	0800350f 	.word	0x0800350f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f0:	f7fe fc56 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 80034f4:	61f8      	str	r0, [r7, #28]
        break;
 80034f6:	e014      	b.n	8003522 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034f8:	f7fe fc68 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 80034fc:	61f8      	str	r0, [r7, #28]
        break;
 80034fe:	e010      	b.n	8003522 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003500:	4b1e      	ldr	r3, [pc, #120]	; (800357c <UART_SetConfig+0x56c>)
 8003502:	61fb      	str	r3, [r7, #28]
        break;
 8003504:	e00d      	b.n	8003522 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003506:	f7fe fbb3 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 800350a:	61f8      	str	r0, [r7, #28]
        break;
 800350c:	e009      	b.n	8003522 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800350e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003512:	61fb      	str	r3, [r7, #28]
        break;
 8003514:	e005      	b.n	8003522 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003520:	bf00      	nop
    }

    if (pclk != 0U)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d019      	beq.n	800355c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	085a      	lsrs	r2, r3, #1
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	441a      	add	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	fbb2 f3f3 	udiv	r3, r2, r3
 800353a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b0f      	cmp	r3, #15
 8003540:	d909      	bls.n	8003556 <UART_SetConfig+0x546>
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003548:	d205      	bcs.n	8003556 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60da      	str	r2, [r3, #12]
 8003554:	e002      	b.n	800355c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003568:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800356c:	4618      	mov	r0, r3
 800356e:	3728      	adds	r7, #40	; 0x28
 8003570:	46bd      	mov	sp, r7
 8003572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003576:	bf00      	nop
 8003578:	40008000 	.word	0x40008000
 800357c:	00f42400 	.word	0x00f42400

08003580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01a      	beq.n	8003696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800367e:	d10a      	bne.n	8003696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	605a      	str	r2, [r3, #4]
  }
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b098      	sub	sp, #96	; 0x60
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036d4:	f7fd faac 	bl	8000c30 <HAL_GetTick>
 80036d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d12e      	bne.n	8003746 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f0:	2200      	movs	r2, #0
 80036f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f88c 	bl	8003814 <UART_WaitOnFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d021      	beq.n	8003746 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003716:	653b      	str	r3, [r7, #80]	; 0x50
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003720:	647b      	str	r3, [r7, #68]	; 0x44
 8003722:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800372e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e6      	bne.n	8003702 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e062      	b.n	800380c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b04      	cmp	r3, #4
 8003752:	d149      	bne.n	80037e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800375c:	2200      	movs	r2, #0
 800375e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f856 	bl	8003814 <UART_WaitOnFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03c      	beq.n	80037e8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	e853 3f00 	ldrex	r3, [r3]
 800377a:	623b      	str	r3, [r7, #32]
   return(result);
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800378c:	633b      	str	r3, [r7, #48]	; 0x30
 800378e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003790:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003794:	e841 2300 	strex	r3, r2, [r1]
 8003798:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e6      	bne.n	800376e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3308      	adds	r3, #8
 80037a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3308      	adds	r3, #8
 80037be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037c0:	61fa      	str	r2, [r7, #28]
 80037c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	69b9      	ldr	r1, [r7, #24]
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	617b      	str	r3, [r7, #20]
   return(result);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e5      	bne.n	80037a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e011      	b.n	800380c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3758      	adds	r7, #88	; 0x58
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003824:	e049      	b.n	80038ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d045      	beq.n	80038ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382e:	f7fd f9ff 	bl	8000c30 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <UART_WaitOnFlagUntilTimeout+0x30>
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e048      	b.n	80038da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d031      	beq.n	80038ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b08      	cmp	r3, #8
 8003862:	d110      	bne.n	8003886 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2208      	movs	r2, #8
 800386a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f838 	bl	80038e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2208      	movs	r2, #8
 8003876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e029      	b.n	80038da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003894:	d111      	bne.n	80038ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800389e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f81e 	bl	80038e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e00f      	b.n	80038da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4013      	ands	r3, r2
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	bf0c      	ite	eq
 80038ca:	2301      	moveq	r3, #1
 80038cc:	2300      	movne	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d0a6      	beq.n	8003826 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b095      	sub	sp, #84	; 0x54
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003908:	643b      	str	r3, [r7, #64]	; 0x40
 800390a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800390e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e6      	bne.n	80038ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3308      	adds	r3, #8
 8003922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	61fb      	str	r3, [r7, #28]
   return(result);
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	64bb      	str	r3, [r7, #72]	; 0x48
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3308      	adds	r3, #8
 800393a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800393c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003944:	e841 2300 	strex	r3, r2, [r1]
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e5      	bne.n	800391c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003954:	2b01      	cmp	r3, #1
 8003956:	d118      	bne.n	800398a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	60bb      	str	r3, [r7, #8]
   return(result);
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f023 0310 	bic.w	r3, r3, #16
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	6979      	ldr	r1, [r7, #20]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	613b      	str	r3, [r7, #16]
   return(result);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e6      	bne.n	8003958 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800399e:	bf00      	nop
 80039a0:	3754      	adds	r7, #84	; 0x54
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <__NVIC_SetPriority>:
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	6039      	str	r1, [r7, #0]
 80039b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	db0a      	blt.n	80039d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	490c      	ldr	r1, [pc, #48]	; (80039f8 <__NVIC_SetPriority+0x4c>)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	0112      	lsls	r2, r2, #4
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	440b      	add	r3, r1
 80039d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039d4:	e00a      	b.n	80039ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4908      	ldr	r1, [pc, #32]	; (80039fc <__NVIC_SetPriority+0x50>)
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	3b04      	subs	r3, #4
 80039e4:	0112      	lsls	r2, r2, #4
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	440b      	add	r3, r1
 80039ea:	761a      	strb	r2, [r3, #24]
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	e000e100 	.word	0xe000e100
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a04:	2100      	movs	r1, #0
 8003a06:	f06f 0004 	mvn.w	r0, #4
 8003a0a:	f7ff ffcf 	bl	80039ac <__NVIC_SetPriority>
#endif
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a1a:	f3ef 8305 	mrs	r3, IPSR
 8003a1e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a26:	f06f 0305 	mvn.w	r3, #5
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	e00c      	b.n	8003a48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <osKernelInitialize+0x44>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d105      	bne.n	8003a42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <osKernelInitialize+0x44>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	607b      	str	r3, [r7, #4]
 8003a40:	e002      	b.n	8003a48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295
 8003a46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a48:	687b      	ldr	r3, [r7, #4]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	20000134 	.word	0x20000134

08003a5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a62:	f3ef 8305 	mrs	r3, IPSR
 8003a66:	603b      	str	r3, [r7, #0]
  return(result);
 8003a68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a6e:	f06f 0305 	mvn.w	r3, #5
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	e010      	b.n	8003a98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <osKernelStart+0x48>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d109      	bne.n	8003a92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a7e:	f7ff ffbf 	bl	8003a00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <osKernelStart+0x48>)
 8003a84:	2202      	movs	r2, #2
 8003a86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a88:	f001 f972 	bl	8004d70 <vTaskStartScheduler>
      stat = osOK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	607b      	str	r3, [r7, #4]
 8003a90:	e002      	b.n	8003a98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a92:	f04f 33ff 	mov.w	r3, #4294967295
 8003a96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a98:	687b      	ldr	r3, [r7, #4]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000134 	.word	0x20000134

08003aa8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08e      	sub	sp, #56	; 0x38
 8003aac:	af04      	add	r7, sp, #16
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ab8:	f3ef 8305 	mrs	r3, IPSR
 8003abc:	617b      	str	r3, [r7, #20]
  return(result);
 8003abe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d17e      	bne.n	8003bc2 <osThreadNew+0x11a>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d07b      	beq.n	8003bc2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ace:	2318      	movs	r3, #24
 8003ad0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ada:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d045      	beq.n	8003b6e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <osThreadNew+0x48>
        name = attr->name;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <osThreadNew+0x6e>
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b38      	cmp	r3, #56	; 0x38
 8003b08:	d805      	bhi.n	8003b16 <osThreadNew+0x6e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <osThreadNew+0x72>
        return (NULL);
 8003b16:	2300      	movs	r3, #0
 8003b18:	e054      	b.n	8003bc4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	089b      	lsrs	r3, r3, #2
 8003b28:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00e      	beq.n	8003b50 <osThreadNew+0xa8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b5b      	cmp	r3, #91	; 0x5b
 8003b38:	d90a      	bls.n	8003b50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d006      	beq.n	8003b50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <osThreadNew+0xa8>
        mem = 1;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e010      	b.n	8003b72 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10c      	bne.n	8003b72 <osThreadNew+0xca>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d108      	bne.n	8003b72 <osThreadNew+0xca>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d104      	bne.n	8003b72 <osThreadNew+0xca>
          mem = 0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	e001      	b.n	8003b72 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d110      	bne.n	8003b9a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b80:	9202      	str	r2, [sp, #8]
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	6a3a      	ldr	r2, [r7, #32]
 8003b8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 ff18 	bl	80049c4 <xTaskCreateStatic>
 8003b94:	4603      	mov	r3, r0
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	e013      	b.n	8003bc2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d110      	bne.n	8003bc2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	f107 0310 	add.w	r3, r7, #16
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 ff63 	bl	8004a7e <xTaskCreate>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d001      	beq.n	8003bc2 <osThreadNew+0x11a>
            hTask = NULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bc2:	693b      	ldr	r3, [r7, #16]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3728      	adds	r7, #40	; 0x28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bd4:	f3ef 8305 	mrs	r3, IPSR
 8003bd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bda:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <osDelay+0x1c>
    stat = osErrorISR;
 8003be0:	f06f 0305 	mvn.w	r3, #5
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	e007      	b.n	8003bf8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f001 f888 	bl	8004d08 <vTaskDelay>
    }
  }

  return (stat);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b088      	sub	sp, #32
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c0e:	f3ef 8305 	mrs	r3, IPSR
 8003c12:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c14:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d174      	bne.n	8003d04 <osMutexNew+0x102>
    if (attr != NULL) {
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	e001      	b.n	8003c2c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <osMutexNew+0x3a>
      rmtx = 1U;
 8003c36:	2301      	movs	r3, #1
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	e001      	b.n	8003c40 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d15c      	bne.n	8003d04 <osMutexNew+0x102>
      mem = -1;
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d015      	beq.n	8003c82 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <osMutexNew+0x6a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	2b4f      	cmp	r3, #79	; 0x4f
 8003c64:	d902      	bls.n	8003c6c <osMutexNew+0x6a>
          mem = 1;
 8003c66:	2301      	movs	r3, #1
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	e00c      	b.n	8003c86 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d108      	bne.n	8003c86 <osMutexNew+0x84>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d104      	bne.n	8003c86 <osMutexNew+0x84>
            mem = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	e001      	b.n	8003c86 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d112      	bne.n	8003cb2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	4619      	mov	r1, r3
 8003c98:	2004      	movs	r0, #4
 8003c9a:	f000 fa90 	bl	80041be <xQueueCreateMutexStatic>
 8003c9e:	61f8      	str	r0, [r7, #28]
 8003ca0:	e016      	b.n	8003cd0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f000 fa88 	bl	80041be <xQueueCreateMutexStatic>
 8003cae:	61f8      	str	r0, [r7, #28]
 8003cb0:	e00e      	b.n	8003cd0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10b      	bne.n	8003cd0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d004      	beq.n	8003cc8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003cbe:	2004      	movs	r0, #4
 8003cc0:	f000 fa65 	bl	800418e <xQueueCreateMutex>
 8003cc4:	61f8      	str	r0, [r7, #28]
 8003cc6:	e003      	b.n	8003cd0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f000 fa60 	bl	800418e <xQueueCreateMutex>
 8003cce:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00c      	beq.n	8003cf0 <osMutexNew+0xee>
        if (attr != NULL) {
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <osMutexNew+0xe2>
          name = attr->name;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	e001      	b.n	8003ce8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003ce8:	68f9      	ldr	r1, [r7, #12]
 8003cea:	69f8      	ldr	r0, [r7, #28]
 8003cec:	f000 fe0c 	bl	8004908 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d006      	beq.n	8003d04 <osMutexNew+0x102>
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003d04:	69fb      	ldr	r3, [r7, #28]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <vApplicationGetIdleTaskMemory+0x2c>)
 8003d20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4a06      	ldr	r2, [pc, #24]	; (8003d40 <vApplicationGetIdleTaskMemory+0x30>)
 8003d26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2280      	movs	r2, #128	; 0x80
 8003d2c:	601a      	str	r2, [r3, #0]
}
 8003d2e:	bf00      	nop
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	20000138 	.word	0x20000138
 8003d40:	20000194 	.word	0x20000194

08003d44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4a07      	ldr	r2, [pc, #28]	; (8003d70 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4a06      	ldr	r2, [pc, #24]	; (8003d74 <vApplicationGetTimerTaskMemory+0x30>)
 8003d5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d62:	601a      	str	r2, [r3, #0]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	20000394 	.word	0x20000394
 8003d74:	200003f0 	.word	0x200003f0

08003d78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f103 0208 	add.w	r2, r3, #8
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f103 0208 	add.w	r2, r3, #8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f103 0208 	add.w	r2, r3, #8
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	601a      	str	r2, [r3, #0]
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b085      	sub	sp, #20
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d103      	bne.n	8003e3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	e00c      	b.n	8003e54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	e002      	b.n	8003e48 <vListInsert+0x2e>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d2f6      	bcs.n	8003e42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	601a      	str	r2, [r3, #0]
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	6892      	ldr	r2, [r2, #8]
 8003ea2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6852      	ldr	r2, [r2, #4]
 8003eac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d103      	bne.n	8003ec0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	1e5a      	subs	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10a      	bne.n	8003f0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f06:	bf00      	nop
 8003f08:	e7fe      	b.n	8003f08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f0a:	f002 f8d3 	bl	80060b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f16:	68f9      	ldr	r1, [r7, #12]
 8003f18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	441a      	add	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	68f9      	ldr	r1, [r7, #12]
 8003f3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	441a      	add	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	22ff      	movs	r2, #255	; 0xff
 8003f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	22ff      	movs	r2, #255	; 0xff
 8003f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d114      	bne.n	8003f8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01a      	beq.n	8003f9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3310      	adds	r3, #16
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f001 f989 	bl	8005284 <xTaskRemoveFromEventList>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d012      	beq.n	8003f9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <xQueueGenericReset+0xcc>)
 8003f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	e009      	b.n	8003f9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3310      	adds	r3, #16
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff fef2 	bl	8003d78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3324      	adds	r3, #36	; 0x24
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff feed 	bl	8003d78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f9e:	f002 f8b9 	bl	8006114 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fa2:	2301      	movs	r3, #1
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	e000ed04 	.word	0xe000ed04

08003fb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08e      	sub	sp, #56	; 0x38
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10a      	bne.n	8003ff6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ff2:	bf00      	nop
 8003ff4:	e7fe      	b.n	8003ff4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <xQueueGenericCreateStatic+0x52>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <xQueueGenericCreateStatic+0x56>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <xQueueGenericCreateStatic+0x58>
 8004006:	2300      	movs	r3, #0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	623b      	str	r3, [r7, #32]
}
 800401e:	bf00      	nop
 8004020:	e7fe      	b.n	8004020 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <xQueueGenericCreateStatic+0x7e>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <xQueueGenericCreateStatic+0x82>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <xQueueGenericCreateStatic+0x84>
 8004032:	2300      	movs	r3, #0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	61fb      	str	r3, [r7, #28]
}
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800404e:	2350      	movs	r3, #80	; 0x50
 8004050:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b50      	cmp	r3, #80	; 0x50
 8004056:	d00a      	beq.n	800406e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	61bb      	str	r3, [r7, #24]
}
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800406e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00d      	beq.n	8004096 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004082:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	4613      	mov	r3, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f83f 	bl	8004114 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004098:	4618      	mov	r0, r3
 800409a:	3730      	adds	r7, #48	; 0x30
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	4613      	mov	r3, r2
 80040ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	613b      	str	r3, [r7, #16]
}
 80040c6:	bf00      	nop
 80040c8:	e7fe      	b.n	80040c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	3350      	adds	r3, #80	; 0x50
 80040d8:	4618      	mov	r0, r3
 80040da:	f002 f90d 	bl	80062f8 <pvPortMalloc>
 80040de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d011      	beq.n	800410a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	3350      	adds	r3, #80	; 0x50
 80040ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040f8:	79fa      	ldrb	r2, [r7, #7]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	4613      	mov	r3, r2
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f805 	bl	8004114 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800410a:	69bb      	ldr	r3, [r7, #24]
	}
 800410c:	4618      	mov	r0, r3
 800410e:	3720      	adds	r7, #32
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d103      	bne.n	8004130 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e002      	b.n	8004136 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004142:	2101      	movs	r1, #1
 8004144:	69b8      	ldr	r0, [r7, #24]
 8004146:	f7ff fecb 	bl	8003ee0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	78fa      	ldrb	r2, [r7, #3]
 800414e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004152:	bf00      	nop
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00e      	beq.n	8004186 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800417a:	2300      	movs	r3, #0
 800417c:	2200      	movs	r2, #0
 800417e:	2100      	movs	r1, #0
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f837 	bl	80041f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800418e:	b580      	push	{r7, lr}
 8004190:	b086      	sub	sp, #24
 8004192:	af00      	add	r7, sp, #0
 8004194:	4603      	mov	r3, r0
 8004196:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004198:	2301      	movs	r3, #1
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	461a      	mov	r2, r3
 80041a4:	6939      	ldr	r1, [r7, #16]
 80041a6:	6978      	ldr	r0, [r7, #20]
 80041a8:	f7ff ff7a 	bl	80040a0 <xQueueGenericCreate>
 80041ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7ff ffd3 	bl	800415a <prvInitialiseMutex>

		return xNewQueue;
 80041b4:	68fb      	ldr	r3, [r7, #12]
	}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b088      	sub	sp, #32
 80041c2:	af02      	add	r7, sp, #8
 80041c4:	4603      	mov	r3, r0
 80041c6:	6039      	str	r1, [r7, #0]
 80041c8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80041ca:	2301      	movs	r3, #1
 80041cc:	617b      	str	r3, [r7, #20]
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2200      	movs	r2, #0
 80041da:	6939      	ldr	r1, [r7, #16]
 80041dc:	6978      	ldr	r0, [r7, #20]
 80041de:	f7ff fee7 	bl	8003fb0 <xQueueGenericCreateStatic>
 80041e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f7ff ffb8 	bl	800415a <prvInitialiseMutex>

		return xNewQueue;
 80041ea:	68fb      	ldr	r3, [r7, #12]
	}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08e      	sub	sp, #56	; 0x38
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004202:	2300      	movs	r3, #0
 8004204:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10a      	bne.n	8004226 <xQueueGenericSend+0x32>
	__asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004222:	bf00      	nop
 8004224:	e7fe      	b.n	8004224 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d103      	bne.n	8004234 <xQueueGenericSend+0x40>
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <xQueueGenericSend+0x44>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <xQueueGenericSend+0x46>
 8004238:	2300      	movs	r3, #0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <xQueueGenericSend+0x60>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004250:	bf00      	nop
 8004252:	e7fe      	b.n	8004252 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d103      	bne.n	8004262 <xQueueGenericSend+0x6e>
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <xQueueGenericSend+0x72>
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <xQueueGenericSend+0x74>
 8004266:	2300      	movs	r3, #0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <xQueueGenericSend+0x8e>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	623b      	str	r3, [r7, #32]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004282:	f001 f9bd 	bl	8005600 <xTaskGetSchedulerState>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d102      	bne.n	8004292 <xQueueGenericSend+0x9e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <xQueueGenericSend+0xa2>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <xQueueGenericSend+0xa4>
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10a      	bne.n	80042b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800429c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a0:	f383 8811 	msr	BASEPRI, r3
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	61fb      	str	r3, [r7, #28]
}
 80042ae:	bf00      	nop
 80042b0:	e7fe      	b.n	80042b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042b2:	f001 feff 	bl	80060b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042be:	429a      	cmp	r2, r3
 80042c0:	d302      	bcc.n	80042c8 <xQueueGenericSend+0xd4>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d129      	bne.n	800431c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ce:	f000 fa0b 	bl	80046e8 <prvCopyDataToQueue>
 80042d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d010      	beq.n	80042fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042de:	3324      	adds	r3, #36	; 0x24
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 ffcf 	bl	8005284 <xTaskRemoveFromEventList>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d013      	beq.n	8004314 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042ec:	4b3f      	ldr	r3, [pc, #252]	; (80043ec <xQueueGenericSend+0x1f8>)
 80042ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	e00a      	b.n	8004314 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004304:	4b39      	ldr	r3, [pc, #228]	; (80043ec <xQueueGenericSend+0x1f8>)
 8004306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004314:	f001 fefe 	bl	8006114 <vPortExitCritical>
				return pdPASS;
 8004318:	2301      	movs	r3, #1
 800431a:	e063      	b.n	80043e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d103      	bne.n	800432a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004322:	f001 fef7 	bl	8006114 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004326:	2300      	movs	r3, #0
 8004328:	e05c      	b.n	80043e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800432a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004330:	f107 0314 	add.w	r3, r7, #20
 8004334:	4618      	mov	r0, r3
 8004336:	f001 f809 	bl	800534c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800433a:	2301      	movs	r3, #1
 800433c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800433e:	f001 fee9 	bl	8006114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004342:	f000 fd7b 	bl	8004e3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004346:	f001 feb5 	bl	80060b4 <vPortEnterCritical>
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004350:	b25b      	sxtb	r3, r3
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d103      	bne.n	8004360 <xQueueGenericSend+0x16c>
 8004358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435a:	2200      	movs	r2, #0
 800435c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004366:	b25b      	sxtb	r3, r3
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436c:	d103      	bne.n	8004376 <xQueueGenericSend+0x182>
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004376:	f001 fecd 	bl	8006114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800437a:	1d3a      	adds	r2, r7, #4
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fff8 	bl	8005378 <xTaskCheckForTimeOut>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d124      	bne.n	80043d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800438e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004390:	f000 faa2 	bl	80048d8 <prvIsQueueFull>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d018      	beq.n	80043cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	3310      	adds	r3, #16
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4611      	mov	r1, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 ff1e 	bl	80051e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043aa:	f000 fa2d 	bl	8004808 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043ae:	f000 fd53 	bl	8004e58 <xTaskResumeAll>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f47f af7c 	bne.w	80042b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80043ba:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <xQueueGenericSend+0x1f8>)
 80043bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	e772      	b.n	80042b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043ce:	f000 fa1b 	bl	8004808 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043d2:	f000 fd41 	bl	8004e58 <xTaskResumeAll>
 80043d6:	e76c      	b.n	80042b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043da:	f000 fa15 	bl	8004808 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043de:	f000 fd3b 	bl	8004e58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3738      	adds	r7, #56	; 0x38
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	e000ed04 	.word	0xe000ed04

080043f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b090      	sub	sp, #64	; 0x40
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800441a:	bf00      	nop
 800441c:	e7fe      	b.n	800441c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d103      	bne.n	800442c <xQueueGenericSendFromISR+0x3c>
 8004424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <xQueueGenericSendFromISR+0x40>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <xQueueGenericSendFromISR+0x42>
 8004430:	2300      	movs	r3, #0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d103      	bne.n	800445a <xQueueGenericSendFromISR+0x6a>
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <xQueueGenericSendFromISR+0x6e>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <xQueueGenericSendFromISR+0x70>
 800445e:	2300      	movs	r3, #0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10a      	bne.n	800447a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	623b      	str	r3, [r7, #32]
}
 8004476:	bf00      	nop
 8004478:	e7fe      	b.n	8004478 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800447a:	f001 fefd 	bl	8006278 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800447e:	f3ef 8211 	mrs	r2, BASEPRI
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	61fa      	str	r2, [r7, #28]
 8004494:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004496:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004498:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d302      	bcc.n	80044ac <xQueueGenericSendFromISR+0xbc>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d12f      	bne.n	800450c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80044c2:	f000 f911 	bl	80046e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ce:	d112      	bne.n	80044f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d016      	beq.n	8004506 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044da:	3324      	adds	r3, #36	; 0x24
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fed1 	bl	8005284 <xTaskRemoveFromEventList>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00e      	beq.n	8004506 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e007      	b.n	8004506 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044fa:	3301      	adds	r3, #1
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	b25a      	sxtb	r2, r3
 8004500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004506:	2301      	movs	r3, #1
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800450a:	e001      	b.n	8004510 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800450c:	2300      	movs	r3, #0
 800450e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004512:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800451a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800451c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800451e:	4618      	mov	r0, r3
 8004520:	3740      	adds	r7, #64	; 0x40
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08c      	sub	sp, #48	; 0x30
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004534:	2300      	movs	r3, #0
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10a      	bne.n	8004558 <xQueueReceive+0x30>
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	623b      	str	r3, [r7, #32]
}
 8004554:	bf00      	nop
 8004556:	e7fe      	b.n	8004556 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d103      	bne.n	8004566 <xQueueReceive+0x3e>
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <xQueueReceive+0x42>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <xQueueReceive+0x44>
 800456a:	2300      	movs	r3, #0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10a      	bne.n	8004586 <xQueueReceive+0x5e>
	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	61fb      	str	r3, [r7, #28]
}
 8004582:	bf00      	nop
 8004584:	e7fe      	b.n	8004584 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004586:	f001 f83b 	bl	8005600 <xTaskGetSchedulerState>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <xQueueReceive+0x6e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <xQueueReceive+0x72>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <xQueueReceive+0x74>
 800459a:	2300      	movs	r3, #0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <xQueueReceive+0x8e>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	61bb      	str	r3, [r7, #24]
}
 80045b2:	bf00      	nop
 80045b4:	e7fe      	b.n	80045b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045b6:	f001 fd7d 	bl	80060b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d01f      	beq.n	8004606 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ca:	f000 f8f7 	bl	80047bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	1e5a      	subs	r2, r3, #1
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00f      	beq.n	80045fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	3310      	adds	r3, #16
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fe4e 	bl	8005284 <xTaskRemoveFromEventList>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045ee:	4b3d      	ldr	r3, [pc, #244]	; (80046e4 <xQueueReceive+0x1bc>)
 80045f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045fe:	f001 fd89 	bl	8006114 <vPortExitCritical>
				return pdPASS;
 8004602:	2301      	movs	r3, #1
 8004604:	e069      	b.n	80046da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d103      	bne.n	8004614 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800460c:	f001 fd82 	bl	8006114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004610:	2300      	movs	r3, #0
 8004612:	e062      	b.n	80046da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800461a:	f107 0310 	add.w	r3, r7, #16
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fe94 	bl	800534c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004624:	2301      	movs	r3, #1
 8004626:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004628:	f001 fd74 	bl	8006114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800462c:	f000 fc06 	bl	8004e3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004630:	f001 fd40 	bl	80060b4 <vPortEnterCritical>
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800463a:	b25b      	sxtb	r3, r3
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d103      	bne.n	800464a <xQueueReceive+0x122>
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004650:	b25b      	sxtb	r3, r3
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	d103      	bne.n	8004660 <xQueueReceive+0x138>
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004660:	f001 fd58 	bl	8006114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004664:	1d3a      	adds	r2, r7, #4
 8004666:	f107 0310 	add.w	r3, r7, #16
 800466a:	4611      	mov	r1, r2
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fe83 	bl	8005378 <xTaskCheckForTimeOut>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d123      	bne.n	80046c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800467a:	f000 f917 	bl	80048ac <prvIsQueueEmpty>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d017      	beq.n	80046b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	3324      	adds	r3, #36	; 0x24
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fda9 	bl	80051e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004694:	f000 f8b8 	bl	8004808 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004698:	f000 fbde 	bl	8004e58 <xTaskResumeAll>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d189      	bne.n	80045b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80046a2:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <xQueueReceive+0x1bc>)
 80046a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	e780      	b.n	80045b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046b6:	f000 f8a7 	bl	8004808 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046ba:	f000 fbcd 	bl	8004e58 <xTaskResumeAll>
 80046be:	e77a      	b.n	80045b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046c2:	f000 f8a1 	bl	8004808 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046c6:	f000 fbc7 	bl	8004e58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046cc:	f000 f8ee 	bl	80048ac <prvIsQueueEmpty>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f43f af6f 	beq.w	80045b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3730      	adds	r7, #48	; 0x30
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	e000ed04 	.word	0xe000ed04

080046e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10d      	bne.n	8004722 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d14d      	bne.n	80047aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	4618      	mov	r0, r3
 8004714:	f000 ff92 	bl	800563c <xTaskPriorityDisinherit>
 8004718:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	609a      	str	r2, [r3, #8]
 8004720:	e043      	b.n	80047aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d119      	bne.n	800475c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6858      	ldr	r0, [r3, #4]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	461a      	mov	r2, r3
 8004732:	68b9      	ldr	r1, [r7, #8]
 8004734:	f001 fff6 	bl	8006724 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	441a      	add	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	429a      	cmp	r2, r3
 8004750:	d32b      	bcc.n	80047aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	e026      	b.n	80047aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	68d8      	ldr	r0, [r3, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	461a      	mov	r2, r3
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	f001 ffdc 	bl	8006724 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	425b      	negs	r3, r3
 8004776:	441a      	add	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d207      	bcs.n	8004798 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004790:	425b      	negs	r3, r3
 8004792:	441a      	add	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d105      	bne.n	80047aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80047b2:	697b      	ldr	r3, [r7, #20]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d018      	beq.n	8004800 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	441a      	add	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d303      	bcc.n	80047f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68d9      	ldr	r1, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	461a      	mov	r2, r3
 80047fa:	6838      	ldr	r0, [r7, #0]
 80047fc:	f001 ff92 	bl	8006724 <memcpy>
	}
}
 8004800:	bf00      	nop
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004810:	f001 fc50 	bl	80060b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800481a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800481c:	e011      	b.n	8004842 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	2b00      	cmp	r3, #0
 8004824:	d012      	beq.n	800484c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3324      	adds	r3, #36	; 0x24
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fd2a 	bl	8005284 <xTaskRemoveFromEventList>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004836:	f000 fe01 	bl	800543c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	3b01      	subs	r3, #1
 800483e:	b2db      	uxtb	r3, r3
 8004840:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004846:	2b00      	cmp	r3, #0
 8004848:	dce9      	bgt.n	800481e <prvUnlockQueue+0x16>
 800484a:	e000      	b.n	800484e <prvUnlockQueue+0x46>
					break;
 800484c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	22ff      	movs	r2, #255	; 0xff
 8004852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004856:	f001 fc5d 	bl	8006114 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800485a:	f001 fc2b 	bl	80060b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004864:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004866:	e011      	b.n	800488c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d012      	beq.n	8004896 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3310      	adds	r3, #16
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fd05 	bl	8005284 <xTaskRemoveFromEventList>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004880:	f000 fddc 	bl	800543c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004884:	7bbb      	ldrb	r3, [r7, #14]
 8004886:	3b01      	subs	r3, #1
 8004888:	b2db      	uxtb	r3, r3
 800488a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800488c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004890:	2b00      	cmp	r3, #0
 8004892:	dce9      	bgt.n	8004868 <prvUnlockQueue+0x60>
 8004894:	e000      	b.n	8004898 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004896:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	22ff      	movs	r2, #255	; 0xff
 800489c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80048a0:	f001 fc38 	bl	8006114 <vPortExitCritical>
}
 80048a4:	bf00      	nop
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048b4:	f001 fbfe 	bl	80060b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d102      	bne.n	80048c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048c0:	2301      	movs	r3, #1
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e001      	b.n	80048ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048ca:	f001 fc23 	bl	8006114 <vPortExitCritical>

	return xReturn;
 80048ce:	68fb      	ldr	r3, [r7, #12]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048e0:	f001 fbe8 	bl	80060b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d102      	bne.n	80048f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80048f0:	2301      	movs	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	e001      	b.n	80048fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048fa:	f001 fc0b 	bl	8006114 <vPortExitCritical>

	return xReturn;
 80048fe:	68fb      	ldr	r3, [r7, #12]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	e014      	b.n	8004942 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004918:	4a0f      	ldr	r2, [pc, #60]	; (8004958 <vQueueAddToRegistry+0x50>)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10b      	bne.n	800493c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004924:	490c      	ldr	r1, [pc, #48]	; (8004958 <vQueueAddToRegistry+0x50>)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800492e:	4a0a      	ldr	r2, [pc, #40]	; (8004958 <vQueueAddToRegistry+0x50>)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800493a:	e006      	b.n	800494a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3301      	adds	r3, #1
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b07      	cmp	r3, #7
 8004946:	d9e7      	bls.n	8004918 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	200007f0 	.word	0x200007f0

0800495c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800496c:	f001 fba2 	bl	80060b4 <vPortEnterCritical>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004976:	b25b      	sxtb	r3, r3
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d103      	bne.n	8004986 <vQueueWaitForMessageRestricted+0x2a>
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800498c:	b25b      	sxtb	r3, r3
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	d103      	bne.n	800499c <vQueueWaitForMessageRestricted+0x40>
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800499c:	f001 fbba 	bl	8006114 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d106      	bne.n	80049b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	3324      	adds	r3, #36	; 0x24
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fc3b 	bl	800522c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049b6:	6978      	ldr	r0, [r7, #20]
 80049b8:	f7ff ff26 	bl	8004808 <prvUnlockQueue>
	}
 80049bc:	bf00      	nop
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08e      	sub	sp, #56	; 0x38
 80049c8:	af04      	add	r7, sp, #16
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10a      	bne.n	80049ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	623b      	str	r3, [r7, #32]
}
 80049ea:	bf00      	nop
 80049ec:	e7fe      	b.n	80049ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <xTaskCreateStatic+0x46>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	61fb      	str	r3, [r7, #28]
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a0a:	235c      	movs	r3, #92	; 0x5c
 8004a0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b5c      	cmp	r3, #92	; 0x5c
 8004a12:	d00a      	beq.n	8004a2a <xTaskCreateStatic+0x66>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	61bb      	str	r3, [r7, #24]
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d01e      	beq.n	8004a70 <xTaskCreateStatic+0xac>
 8004a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01b      	beq.n	8004a70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	2202      	movs	r2, #2
 8004a46:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	9303      	str	r3, [sp, #12]
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	9302      	str	r3, [sp, #8]
 8004a52:	f107 0314 	add.w	r3, r7, #20
 8004a56:	9301      	str	r3, [sp, #4]
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f850 	bl	8004b08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a6a:	f000 f8dd 	bl	8004c28 <prvAddNewTaskToReadyList>
 8004a6e:	e001      	b.n	8004a74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a74:	697b      	ldr	r3, [r7, #20]
	}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3728      	adds	r7, #40	; 0x28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b08c      	sub	sp, #48	; 0x30
 8004a82:	af04      	add	r7, sp, #16
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a8e:	88fb      	ldrh	r3, [r7, #6]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f001 fc30 	bl	80062f8 <pvPortMalloc>
 8004a98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00e      	beq.n	8004abe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004aa0:	205c      	movs	r0, #92	; 0x5c
 8004aa2:	f001 fc29 	bl	80062f8 <pvPortMalloc>
 8004aa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ab4:	e005      	b.n	8004ac2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ab6:	6978      	ldr	r0, [r7, #20]
 8004ab8:	f001 fcea 	bl	8006490 <vPortFree>
 8004abc:	e001      	b.n	8004ac2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d017      	beq.n	8004af8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ad0:	88fa      	ldrh	r2, [r7, #6]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	9303      	str	r3, [sp, #12]
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	9302      	str	r3, [sp, #8]
 8004ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f80e 	bl	8004b08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004aec:	69f8      	ldr	r0, [r7, #28]
 8004aee:	f000 f89b 	bl	8004c28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004af2:	2301      	movs	r3, #1
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	e002      	b.n	8004afe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004af8:	f04f 33ff 	mov.w	r3, #4294967295
 8004afc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004afe:	69bb      	ldr	r3, [r7, #24]
	}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3720      	adds	r7, #32
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	461a      	mov	r2, r3
 8004b20:	21a5      	movs	r1, #165	; 0xa5
 8004b22:	f001 fdd3 	bl	80066cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b30:	3b01      	subs	r3, #1
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	f023 0307 	bic.w	r3, r3, #7
 8004b3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	617b      	str	r3, [r7, #20]
}
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d01f      	beq.n	8004ba6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
 8004b6a:	e012      	b.n	8004b92 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4413      	add	r3, r2
 8004b72:	7819      	ldrb	r1, [r3, #0]
 8004b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	3334      	adds	r3, #52	; 0x34
 8004b7c:	460a      	mov	r2, r1
 8004b7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	4413      	add	r3, r2
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d006      	beq.n	8004b9a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	2b0f      	cmp	r3, #15
 8004b96:	d9e9      	bls.n	8004b6c <prvInitialiseNewTask+0x64>
 8004b98:	e000      	b.n	8004b9c <prvInitialiseNewTask+0x94>
			{
				break;
 8004b9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ba4:	e003      	b.n	8004bae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb0:	2b37      	cmp	r3, #55	; 0x37
 8004bb2:	d901      	bls.n	8004bb8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bb4:	2337      	movs	r3, #55	; 0x37
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff f8f2 	bl	8003db8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd6:	3318      	adds	r3, #24
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff f8ed 	bl	8003db8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	68f9      	ldr	r1, [r7, #12]
 8004c06:	69b8      	ldr	r0, [r7, #24]
 8004c08:	f001 f928 	bl	8005e5c <pxPortInitialiseStack>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c1e:	bf00      	nop
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c30:	f001 fa40 	bl	80060b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c34:	4b2d      	ldr	r3, [pc, #180]	; (8004cec <prvAddNewTaskToReadyList+0xc4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	4a2c      	ldr	r2, [pc, #176]	; (8004cec <prvAddNewTaskToReadyList+0xc4>)
 8004c3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c3e:	4b2c      	ldr	r3, [pc, #176]	; (8004cf0 <prvAddNewTaskToReadyList+0xc8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c46:	4a2a      	ldr	r2, [pc, #168]	; (8004cf0 <prvAddNewTaskToReadyList+0xc8>)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c4c:	4b27      	ldr	r3, [pc, #156]	; (8004cec <prvAddNewTaskToReadyList+0xc4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d110      	bne.n	8004c76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c54:	f000 fc16 	bl	8005484 <prvInitialiseTaskLists>
 8004c58:	e00d      	b.n	8004c76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c5a:	4b26      	ldr	r3, [pc, #152]	; (8004cf4 <prvAddNewTaskToReadyList+0xcc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d109      	bne.n	8004c76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c62:	4b23      	ldr	r3, [pc, #140]	; (8004cf0 <prvAddNewTaskToReadyList+0xc8>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d802      	bhi.n	8004c76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c70:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <prvAddNewTaskToReadyList+0xc8>)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c76:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <prvAddNewTaskToReadyList+0xd0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	4a1e      	ldr	r2, [pc, #120]	; (8004cf8 <prvAddNewTaskToReadyList+0xd0>)
 8004c7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c80:	4b1d      	ldr	r3, [pc, #116]	; (8004cf8 <prvAddNewTaskToReadyList+0xd0>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8c:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <prvAddNewTaskToReadyList+0xd4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d903      	bls.n	8004c9c <prvAddNewTaskToReadyList+0x74>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	4a18      	ldr	r2, [pc, #96]	; (8004cfc <prvAddNewTaskToReadyList+0xd4>)
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4a15      	ldr	r2, [pc, #84]	; (8004d00 <prvAddNewTaskToReadyList+0xd8>)
 8004caa:	441a      	add	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f7ff f88d 	bl	8003dd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004cb8:	f001 fa2c 	bl	8006114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cbc:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <prvAddNewTaskToReadyList+0xcc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00e      	beq.n	8004ce2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <prvAddNewTaskToReadyList+0xc8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d207      	bcs.n	8004ce2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cd2:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <prvAddNewTaskToReadyList+0xdc>)
 8004cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000d04 	.word	0x20000d04
 8004cf0:	20000830 	.word	0x20000830
 8004cf4:	20000d10 	.word	0x20000d10
 8004cf8:	20000d20 	.word	0x20000d20
 8004cfc:	20000d0c 	.word	0x20000d0c
 8004d00:	20000834 	.word	0x20000834
 8004d04:	e000ed04 	.word	0xe000ed04

08004d08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d017      	beq.n	8004d4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d1a:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <vTaskDelay+0x60>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <vTaskDelay+0x30>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	60bb      	str	r3, [r7, #8]
}
 8004d34:	bf00      	nop
 8004d36:	e7fe      	b.n	8004d36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d38:	f000 f880 	bl	8004e3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fcea 	bl	8005718 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d44:	f000 f888 	bl	8004e58 <xTaskResumeAll>
 8004d48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d107      	bne.n	8004d60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d50:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <vTaskDelay+0x64>)
 8004d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	20000d2c 	.word	0x20000d2c
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	; 0x28
 8004d74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d7e:	463a      	mov	r2, r7
 8004d80:	1d39      	adds	r1, r7, #4
 8004d82:	f107 0308 	add.w	r3, r7, #8
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fe ffc2 	bl	8003d10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	9202      	str	r2, [sp, #8]
 8004d94:	9301      	str	r3, [sp, #4]
 8004d96:	2300      	movs	r3, #0
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	460a      	mov	r2, r1
 8004d9e:	4921      	ldr	r1, [pc, #132]	; (8004e24 <vTaskStartScheduler+0xb4>)
 8004da0:	4821      	ldr	r0, [pc, #132]	; (8004e28 <vTaskStartScheduler+0xb8>)
 8004da2:	f7ff fe0f 	bl	80049c4 <xTaskCreateStatic>
 8004da6:	4603      	mov	r3, r0
 8004da8:	4a20      	ldr	r2, [pc, #128]	; (8004e2c <vTaskStartScheduler+0xbc>)
 8004daa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004dac:	4b1f      	ldr	r3, [pc, #124]	; (8004e2c <vTaskStartScheduler+0xbc>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004db4:	2301      	movs	r3, #1
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e001      	b.n	8004dbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d102      	bne.n	8004dca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004dc4:	f000 fcfc 	bl	80057c0 <xTimerCreateTimerTask>
 8004dc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d116      	bne.n	8004dfe <vTaskStartScheduler+0x8e>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	613b      	str	r3, [r7, #16]
}
 8004de2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004de4:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <vTaskStartScheduler+0xc0>)
 8004de6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dec:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <vTaskStartScheduler+0xc4>)
 8004dee:	2201      	movs	r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004df2:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <vTaskStartScheduler+0xc8>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004df8:	f001 f8ba 	bl	8005f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004dfc:	e00e      	b.n	8004e1c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e04:	d10a      	bne.n	8004e1c <vTaskStartScheduler+0xac>
	__asm volatile
 8004e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0a:	f383 8811 	msr	BASEPRI, r3
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	60fb      	str	r3, [r7, #12]
}
 8004e18:	bf00      	nop
 8004e1a:	e7fe      	b.n	8004e1a <vTaskStartScheduler+0xaa>
}
 8004e1c:	bf00      	nop
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	08006784 	.word	0x08006784
 8004e28:	08005455 	.word	0x08005455
 8004e2c:	20000d28 	.word	0x20000d28
 8004e30:	20000d24 	.word	0x20000d24
 8004e34:	20000d10 	.word	0x20000d10
 8004e38:	20000d08 	.word	0x20000d08

08004e3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e40:	4b04      	ldr	r3, [pc, #16]	; (8004e54 <vTaskSuspendAll+0x18>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	4a03      	ldr	r2, [pc, #12]	; (8004e54 <vTaskSuspendAll+0x18>)
 8004e48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e4a:	bf00      	nop
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	20000d2c 	.word	0x20000d2c

08004e58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e66:	4b42      	ldr	r3, [pc, #264]	; (8004f70 <xTaskResumeAll+0x118>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10a      	bne.n	8004e84 <xTaskResumeAll+0x2c>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	603b      	str	r3, [r7, #0]
}
 8004e80:	bf00      	nop
 8004e82:	e7fe      	b.n	8004e82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e84:	f001 f916 	bl	80060b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e88:	4b39      	ldr	r3, [pc, #228]	; (8004f70 <xTaskResumeAll+0x118>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	4a38      	ldr	r2, [pc, #224]	; (8004f70 <xTaskResumeAll+0x118>)
 8004e90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e92:	4b37      	ldr	r3, [pc, #220]	; (8004f70 <xTaskResumeAll+0x118>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d162      	bne.n	8004f60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e9a:	4b36      	ldr	r3, [pc, #216]	; (8004f74 <xTaskResumeAll+0x11c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d05e      	beq.n	8004f60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ea2:	e02f      	b.n	8004f04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ea4:	4b34      	ldr	r3, [pc, #208]	; (8004f78 <xTaskResumeAll+0x120>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3318      	adds	r3, #24
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fe ffeb 	bl	8003e8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fe ffe6 	bl	8003e8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec4:	4b2d      	ldr	r3, [pc, #180]	; (8004f7c <xTaskResumeAll+0x124>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d903      	bls.n	8004ed4 <xTaskResumeAll+0x7c>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <xTaskResumeAll+0x124>)
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4a27      	ldr	r2, [pc, #156]	; (8004f80 <xTaskResumeAll+0x128>)
 8004ee2:	441a      	add	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f7fe ff71 	bl	8003dd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef4:	4b23      	ldr	r3, [pc, #140]	; (8004f84 <xTaskResumeAll+0x12c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d302      	bcc.n	8004f04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004efe:	4b22      	ldr	r3, [pc, #136]	; (8004f88 <xTaskResumeAll+0x130>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f04:	4b1c      	ldr	r3, [pc, #112]	; (8004f78 <xTaskResumeAll+0x120>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1cb      	bne.n	8004ea4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f12:	f000 fb55 	bl	80055c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f16:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <xTaskResumeAll+0x134>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d010      	beq.n	8004f44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f22:	f000 f847 	bl	8004fb4 <xTaskIncrementTick>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f2c:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <xTaskResumeAll+0x130>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3b01      	subs	r3, #1
 8004f36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f1      	bne.n	8004f22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004f3e:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <xTaskResumeAll+0x134>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f44:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <xTaskResumeAll+0x130>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d009      	beq.n	8004f60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f50:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <xTaskResumeAll+0x138>)
 8004f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f60:	f001 f8d8 	bl	8006114 <vPortExitCritical>

	return xAlreadyYielded;
 8004f64:	68bb      	ldr	r3, [r7, #8]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000d2c 	.word	0x20000d2c
 8004f74:	20000d04 	.word	0x20000d04
 8004f78:	20000cc4 	.word	0x20000cc4
 8004f7c:	20000d0c 	.word	0x20000d0c
 8004f80:	20000834 	.word	0x20000834
 8004f84:	20000830 	.word	0x20000830
 8004f88:	20000d18 	.word	0x20000d18
 8004f8c:	20000d14 	.word	0x20000d14
 8004f90:	e000ed04 	.word	0xe000ed04

08004f94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f9a:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <xTaskGetTickCount+0x1c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004fa0:	687b      	ldr	r3, [r7, #4]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20000d08 	.word	0x20000d08

08004fb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fbe:	4b4f      	ldr	r3, [pc, #316]	; (80050fc <xTaskIncrementTick+0x148>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f040 808f 	bne.w	80050e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fc8:	4b4d      	ldr	r3, [pc, #308]	; (8005100 <xTaskIncrementTick+0x14c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004fd0:	4a4b      	ldr	r2, [pc, #300]	; (8005100 <xTaskIncrementTick+0x14c>)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d120      	bne.n	800501e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fdc:	4b49      	ldr	r3, [pc, #292]	; (8005104 <xTaskIncrementTick+0x150>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <xTaskIncrementTick+0x48>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	603b      	str	r3, [r7, #0]
}
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <xTaskIncrementTick+0x46>
 8004ffc:	4b41      	ldr	r3, [pc, #260]	; (8005104 <xTaskIncrementTick+0x150>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	4b41      	ldr	r3, [pc, #260]	; (8005108 <xTaskIncrementTick+0x154>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a3f      	ldr	r2, [pc, #252]	; (8005104 <xTaskIncrementTick+0x150>)
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	4a3f      	ldr	r2, [pc, #252]	; (8005108 <xTaskIncrementTick+0x154>)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	4b3e      	ldr	r3, [pc, #248]	; (800510c <xTaskIncrementTick+0x158>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3301      	adds	r3, #1
 8005016:	4a3d      	ldr	r2, [pc, #244]	; (800510c <xTaskIncrementTick+0x158>)
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	f000 fad1 	bl	80055c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800501e:	4b3c      	ldr	r3, [pc, #240]	; (8005110 <xTaskIncrementTick+0x15c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	429a      	cmp	r2, r3
 8005026:	d349      	bcc.n	80050bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005028:	4b36      	ldr	r3, [pc, #216]	; (8005104 <xTaskIncrementTick+0x150>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d104      	bne.n	800503c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005032:	4b37      	ldr	r3, [pc, #220]	; (8005110 <xTaskIncrementTick+0x15c>)
 8005034:	f04f 32ff 	mov.w	r2, #4294967295
 8005038:	601a      	str	r2, [r3, #0]
					break;
 800503a:	e03f      	b.n	80050bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800503c:	4b31      	ldr	r3, [pc, #196]	; (8005104 <xTaskIncrementTick+0x150>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d203      	bcs.n	800505c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005054:	4a2e      	ldr	r2, [pc, #184]	; (8005110 <xTaskIncrementTick+0x15c>)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800505a:	e02f      	b.n	80050bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	3304      	adds	r3, #4
 8005060:	4618      	mov	r0, r3
 8005062:	f7fe ff13 	bl	8003e8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506a:	2b00      	cmp	r3, #0
 800506c:	d004      	beq.n	8005078 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	3318      	adds	r3, #24
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe ff0a 	bl	8003e8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507c:	4b25      	ldr	r3, [pc, #148]	; (8005114 <xTaskIncrementTick+0x160>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d903      	bls.n	800508c <xTaskIncrementTick+0xd8>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	4a22      	ldr	r2, [pc, #136]	; (8005114 <xTaskIncrementTick+0x160>)
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4a1f      	ldr	r2, [pc, #124]	; (8005118 <xTaskIncrementTick+0x164>)
 800509a:	441a      	add	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f7fe fe95 	bl	8003dd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ac:	4b1b      	ldr	r3, [pc, #108]	; (800511c <xTaskIncrementTick+0x168>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d3b8      	bcc.n	8005028 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80050b6:	2301      	movs	r3, #1
 80050b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050ba:	e7b5      	b.n	8005028 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050bc:	4b17      	ldr	r3, [pc, #92]	; (800511c <xTaskIncrementTick+0x168>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c2:	4915      	ldr	r1, [pc, #84]	; (8005118 <xTaskIncrementTick+0x164>)
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d901      	bls.n	80050d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80050d4:	2301      	movs	r3, #1
 80050d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80050d8:	4b11      	ldr	r3, [pc, #68]	; (8005120 <xTaskIncrementTick+0x16c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d007      	beq.n	80050f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80050e0:	2301      	movs	r3, #1
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	e004      	b.n	80050f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80050e6:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <xTaskIncrementTick+0x170>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3301      	adds	r3, #1
 80050ec:	4a0d      	ldr	r2, [pc, #52]	; (8005124 <xTaskIncrementTick+0x170>)
 80050ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80050f0:	697b      	ldr	r3, [r7, #20]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000d2c 	.word	0x20000d2c
 8005100:	20000d08 	.word	0x20000d08
 8005104:	20000cbc 	.word	0x20000cbc
 8005108:	20000cc0 	.word	0x20000cc0
 800510c:	20000d1c 	.word	0x20000d1c
 8005110:	20000d24 	.word	0x20000d24
 8005114:	20000d0c 	.word	0x20000d0c
 8005118:	20000834 	.word	0x20000834
 800511c:	20000830 	.word	0x20000830
 8005120:	20000d18 	.word	0x20000d18
 8005124:	20000d14 	.word	0x20000d14

08005128 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800512e:	4b28      	ldr	r3, [pc, #160]	; (80051d0 <vTaskSwitchContext+0xa8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005136:	4b27      	ldr	r3, [pc, #156]	; (80051d4 <vTaskSwitchContext+0xac>)
 8005138:	2201      	movs	r2, #1
 800513a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800513c:	e041      	b.n	80051c2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800513e:	4b25      	ldr	r3, [pc, #148]	; (80051d4 <vTaskSwitchContext+0xac>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005144:	4b24      	ldr	r3, [pc, #144]	; (80051d8 <vTaskSwitchContext+0xb0>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e010      	b.n	800516e <vTaskSwitchContext+0x46>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10a      	bne.n	8005168 <vTaskSwitchContext+0x40>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	607b      	str	r3, [r7, #4]
}
 8005164:	bf00      	nop
 8005166:	e7fe      	b.n	8005166 <vTaskSwitchContext+0x3e>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3b01      	subs	r3, #1
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	491b      	ldr	r1, [pc, #108]	; (80051dc <vTaskSwitchContext+0xb4>)
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4613      	mov	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0e4      	beq.n	800514c <vTaskSwitchContext+0x24>
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4a13      	ldr	r2, [pc, #76]	; (80051dc <vTaskSwitchContext+0xb4>)
 800518e:	4413      	add	r3, r2
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	605a      	str	r2, [r3, #4]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	3308      	adds	r3, #8
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d104      	bne.n	80051b2 <vTaskSwitchContext+0x8a>
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <vTaskSwitchContext+0xb8>)
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	4a06      	ldr	r2, [pc, #24]	; (80051d8 <vTaskSwitchContext+0xb0>)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6013      	str	r3, [r2, #0]
}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	20000d2c 	.word	0x20000d2c
 80051d4:	20000d18 	.word	0x20000d18
 80051d8:	20000d0c 	.word	0x20000d0c
 80051dc:	20000834 	.word	0x20000834
 80051e0:	20000830 	.word	0x20000830

080051e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	60fb      	str	r3, [r7, #12]
}
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800520a:	4b07      	ldr	r3, [pc, #28]	; (8005228 <vTaskPlaceOnEventList+0x44>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3318      	adds	r3, #24
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fe fe01 	bl	8003e1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005218:	2101      	movs	r1, #1
 800521a:	6838      	ldr	r0, [r7, #0]
 800521c:	f000 fa7c 	bl	8005718 <prvAddCurrentTaskToDelayedList>
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20000830 	.word	0x20000830

0800522c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	617b      	str	r3, [r7, #20]
}
 8005250:	bf00      	nop
 8005252:	e7fe      	b.n	8005252 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005254:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <vTaskPlaceOnEventListRestricted+0x54>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3318      	adds	r3, #24
 800525a:	4619      	mov	r1, r3
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7fe fdb8 	bl	8003dd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005268:	f04f 33ff 	mov.w	r3, #4294967295
 800526c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	68b8      	ldr	r0, [r7, #8]
 8005272:	f000 fa51 	bl	8005718 <prvAddCurrentTaskToDelayedList>
	}
 8005276:	bf00      	nop
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20000830 	.word	0x20000830

08005284 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10a      	bne.n	80052b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	60fb      	str	r3, [r7, #12]
}
 80052ac:	bf00      	nop
 80052ae:	e7fe      	b.n	80052ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	3318      	adds	r3, #24
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fe fde9 	bl	8003e8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ba:	4b1e      	ldr	r3, [pc, #120]	; (8005334 <xTaskRemoveFromEventList+0xb0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d11d      	bne.n	80052fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	3304      	adds	r3, #4
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fe fde0 	bl	8003e8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d0:	4b19      	ldr	r3, [pc, #100]	; (8005338 <xTaskRemoveFromEventList+0xb4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d903      	bls.n	80052e0 <xTaskRemoveFromEventList+0x5c>
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	4a16      	ldr	r2, [pc, #88]	; (8005338 <xTaskRemoveFromEventList+0xb4>)
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4a13      	ldr	r2, [pc, #76]	; (800533c <xTaskRemoveFromEventList+0xb8>)
 80052ee:	441a      	add	r2, r3
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	3304      	adds	r3, #4
 80052f4:	4619      	mov	r1, r3
 80052f6:	4610      	mov	r0, r2
 80052f8:	f7fe fd6b 	bl	8003dd2 <vListInsertEnd>
 80052fc:	e005      	b.n	800530a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	3318      	adds	r3, #24
 8005302:	4619      	mov	r1, r3
 8005304:	480e      	ldr	r0, [pc, #56]	; (8005340 <xTaskRemoveFromEventList+0xbc>)
 8005306:	f7fe fd64 	bl	8003dd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530e:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <xTaskRemoveFromEventList+0xc0>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	429a      	cmp	r2, r3
 8005316:	d905      	bls.n	8005324 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005318:	2301      	movs	r3, #1
 800531a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <xTaskRemoveFromEventList+0xc4>)
 800531e:	2201      	movs	r2, #1
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	e001      	b.n	8005328 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005328:	697b      	ldr	r3, [r7, #20]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20000d2c 	.word	0x20000d2c
 8005338:	20000d0c 	.word	0x20000d0c
 800533c:	20000834 	.word	0x20000834
 8005340:	20000cc4 	.word	0x20000cc4
 8005344:	20000830 	.word	0x20000830
 8005348:	20000d18 	.word	0x20000d18

0800534c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <vTaskInternalSetTimeOutState+0x24>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <vTaskInternalSetTimeOutState+0x28>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	605a      	str	r2, [r3, #4]
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	20000d1c 	.word	0x20000d1c
 8005374:	20000d08 	.word	0x20000d08

08005378 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	613b      	str	r3, [r7, #16]
}
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	60fb      	str	r3, [r7, #12]
}
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80053ba:	f000 fe7b 	bl	80060b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053be:	4b1d      	ldr	r3, [pc, #116]	; (8005434 <xTaskCheckForTimeOut+0xbc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	d102      	bne.n	80053de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80053d8:	2300      	movs	r3, #0
 80053da:	61fb      	str	r3, [r7, #28]
 80053dc:	e023      	b.n	8005426 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	4b15      	ldr	r3, [pc, #84]	; (8005438 <xTaskCheckForTimeOut+0xc0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d007      	beq.n	80053fa <xTaskCheckForTimeOut+0x82>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d302      	bcc.n	80053fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80053f4:	2301      	movs	r3, #1
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	e015      	b.n	8005426 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	429a      	cmp	r2, r3
 8005402:	d20b      	bcs.n	800541c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	1ad2      	subs	r2, r2, r3
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff ff9b 	bl	800534c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005416:	2300      	movs	r3, #0
 8005418:	61fb      	str	r3, [r7, #28]
 800541a:	e004      	b.n	8005426 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005422:	2301      	movs	r3, #1
 8005424:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005426:	f000 fe75 	bl	8006114 <vPortExitCritical>

	return xReturn;
 800542a:	69fb      	ldr	r3, [r7, #28]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3720      	adds	r7, #32
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20000d08 	.word	0x20000d08
 8005438:	20000d1c 	.word	0x20000d1c

0800543c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005440:	4b03      	ldr	r3, [pc, #12]	; (8005450 <vTaskMissedYield+0x14>)
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]
}
 8005446:	bf00      	nop
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	20000d18 	.word	0x20000d18

08005454 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800545c:	f000 f852 	bl	8005504 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005460:	4b06      	ldr	r3, [pc, #24]	; (800547c <prvIdleTask+0x28>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d9f9      	bls.n	800545c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005468:	4b05      	ldr	r3, [pc, #20]	; (8005480 <prvIdleTask+0x2c>)
 800546a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005478:	e7f0      	b.n	800545c <prvIdleTask+0x8>
 800547a:	bf00      	nop
 800547c:	20000834 	.word	0x20000834
 8005480:	e000ed04 	.word	0xe000ed04

08005484 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800548a:	2300      	movs	r3, #0
 800548c:	607b      	str	r3, [r7, #4]
 800548e:	e00c      	b.n	80054aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4a12      	ldr	r2, [pc, #72]	; (80054e4 <prvInitialiseTaskLists+0x60>)
 800549c:	4413      	add	r3, r2
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fe fc6a 	bl	8003d78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3301      	adds	r3, #1
 80054a8:	607b      	str	r3, [r7, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b37      	cmp	r3, #55	; 0x37
 80054ae:	d9ef      	bls.n	8005490 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054b0:	480d      	ldr	r0, [pc, #52]	; (80054e8 <prvInitialiseTaskLists+0x64>)
 80054b2:	f7fe fc61 	bl	8003d78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054b6:	480d      	ldr	r0, [pc, #52]	; (80054ec <prvInitialiseTaskLists+0x68>)
 80054b8:	f7fe fc5e 	bl	8003d78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054bc:	480c      	ldr	r0, [pc, #48]	; (80054f0 <prvInitialiseTaskLists+0x6c>)
 80054be:	f7fe fc5b 	bl	8003d78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054c2:	480c      	ldr	r0, [pc, #48]	; (80054f4 <prvInitialiseTaskLists+0x70>)
 80054c4:	f7fe fc58 	bl	8003d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054c8:	480b      	ldr	r0, [pc, #44]	; (80054f8 <prvInitialiseTaskLists+0x74>)
 80054ca:	f7fe fc55 	bl	8003d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054ce:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <prvInitialiseTaskLists+0x78>)
 80054d0:	4a05      	ldr	r2, [pc, #20]	; (80054e8 <prvInitialiseTaskLists+0x64>)
 80054d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80054d4:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <prvInitialiseTaskLists+0x7c>)
 80054d6:	4a05      	ldr	r2, [pc, #20]	; (80054ec <prvInitialiseTaskLists+0x68>)
 80054d8:	601a      	str	r2, [r3, #0]
}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20000834 	.word	0x20000834
 80054e8:	20000c94 	.word	0x20000c94
 80054ec:	20000ca8 	.word	0x20000ca8
 80054f0:	20000cc4 	.word	0x20000cc4
 80054f4:	20000cd8 	.word	0x20000cd8
 80054f8:	20000cf0 	.word	0x20000cf0
 80054fc:	20000cbc 	.word	0x20000cbc
 8005500:	20000cc0 	.word	0x20000cc0

08005504 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800550a:	e019      	b.n	8005540 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800550c:	f000 fdd2 	bl	80060b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005510:	4b10      	ldr	r3, [pc, #64]	; (8005554 <prvCheckTasksWaitingTermination+0x50>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3304      	adds	r3, #4
 800551c:	4618      	mov	r0, r3
 800551e:	f7fe fcb5 	bl	8003e8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005522:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <prvCheckTasksWaitingTermination+0x54>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3b01      	subs	r3, #1
 8005528:	4a0b      	ldr	r2, [pc, #44]	; (8005558 <prvCheckTasksWaitingTermination+0x54>)
 800552a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800552c:	4b0b      	ldr	r3, [pc, #44]	; (800555c <prvCheckTasksWaitingTermination+0x58>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3b01      	subs	r3, #1
 8005532:	4a0a      	ldr	r2, [pc, #40]	; (800555c <prvCheckTasksWaitingTermination+0x58>)
 8005534:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005536:	f000 fded 	bl	8006114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f810 	bl	8005560 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005540:	4b06      	ldr	r3, [pc, #24]	; (800555c <prvCheckTasksWaitingTermination+0x58>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e1      	bne.n	800550c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005548:	bf00      	nop
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20000cd8 	.word	0x20000cd8
 8005558:	20000d04 	.word	0x20000d04
 800555c:	20000cec 	.word	0x20000cec

08005560 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800556e:	2b00      	cmp	r3, #0
 8005570:	d108      	bne.n	8005584 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	4618      	mov	r0, r3
 8005578:	f000 ff8a 	bl	8006490 <vPortFree>
				vPortFree( pxTCB );
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 ff87 	bl	8006490 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005582:	e018      	b.n	80055b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800558a:	2b01      	cmp	r3, #1
 800558c:	d103      	bne.n	8005596 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 ff7e 	bl	8006490 <vPortFree>
	}
 8005594:	e00f      	b.n	80055b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800559c:	2b02      	cmp	r3, #2
 800559e:	d00a      	beq.n	80055b6 <prvDeleteTCB+0x56>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	60fb      	str	r3, [r7, #12]
}
 80055b2:	bf00      	nop
 80055b4:	e7fe      	b.n	80055b4 <prvDeleteTCB+0x54>
	}
 80055b6:	bf00      	nop
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055c6:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <prvResetNextTaskUnblockTime+0x38>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d104      	bne.n	80055da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80055d0:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <prvResetNextTaskUnblockTime+0x3c>)
 80055d2:	f04f 32ff 	mov.w	r2, #4294967295
 80055d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80055d8:	e008      	b.n	80055ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055da:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <prvResetNextTaskUnblockTime+0x38>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	4a04      	ldr	r2, [pc, #16]	; (80055fc <prvResetNextTaskUnblockTime+0x3c>)
 80055ea:	6013      	str	r3, [r2, #0]
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	20000cbc 	.word	0x20000cbc
 80055fc:	20000d24 	.word	0x20000d24

08005600 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005606:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <xTaskGetSchedulerState+0x34>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d102      	bne.n	8005614 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800560e:	2301      	movs	r3, #1
 8005610:	607b      	str	r3, [r7, #4]
 8005612:	e008      	b.n	8005626 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005614:	4b08      	ldr	r3, [pc, #32]	; (8005638 <xTaskGetSchedulerState+0x38>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d102      	bne.n	8005622 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800561c:	2302      	movs	r3, #2
 800561e:	607b      	str	r3, [r7, #4]
 8005620:	e001      	b.n	8005626 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005622:	2300      	movs	r3, #0
 8005624:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005626:	687b      	ldr	r3, [r7, #4]
	}
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	20000d10 	.word	0x20000d10
 8005638:	20000d2c 	.word	0x20000d2c

0800563c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d056      	beq.n	8005700 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005652:	4b2e      	ldr	r3, [pc, #184]	; (800570c <xTaskPriorityDisinherit+0xd0>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	429a      	cmp	r2, r3
 800565a:	d00a      	beq.n	8005672 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	60fb      	str	r3, [r7, #12]
}
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	60bb      	str	r3, [r7, #8]
}
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005694:	1e5a      	subs	r2, r3, #1
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d02c      	beq.n	8005700 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d128      	bne.n	8005700 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	3304      	adds	r3, #4
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fe fbea 	bl	8003e8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d0:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <xTaskPriorityDisinherit+0xd4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d903      	bls.n	80056e0 <xTaskPriorityDisinherit+0xa4>
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	4a0c      	ldr	r2, [pc, #48]	; (8005710 <xTaskPriorityDisinherit+0xd4>)
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4a09      	ldr	r2, [pc, #36]	; (8005714 <xTaskPriorityDisinherit+0xd8>)
 80056ee:	441a      	add	r2, r3
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	3304      	adds	r3, #4
 80056f4:	4619      	mov	r1, r3
 80056f6:	4610      	mov	r0, r2
 80056f8:	f7fe fb6b 	bl	8003dd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80056fc:	2301      	movs	r3, #1
 80056fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005700:	697b      	ldr	r3, [r7, #20]
	}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000830 	.word	0x20000830
 8005710:	20000d0c 	.word	0x20000d0c
 8005714:	20000834 	.word	0x20000834

08005718 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005722:	4b21      	ldr	r3, [pc, #132]	; (80057a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005728:	4b20      	ldr	r3, [pc, #128]	; (80057ac <prvAddCurrentTaskToDelayedList+0x94>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3304      	adds	r3, #4
 800572e:	4618      	mov	r0, r3
 8005730:	f7fe fbac 	bl	8003e8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573a:	d10a      	bne.n	8005752 <prvAddCurrentTaskToDelayedList+0x3a>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005742:	4b1a      	ldr	r3, [pc, #104]	; (80057ac <prvAddCurrentTaskToDelayedList+0x94>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3304      	adds	r3, #4
 8005748:	4619      	mov	r1, r3
 800574a:	4819      	ldr	r0, [pc, #100]	; (80057b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800574c:	f7fe fb41 	bl	8003dd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005750:	e026      	b.n	80057a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4413      	add	r3, r2
 8005758:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800575a:	4b14      	ldr	r3, [pc, #80]	; (80057ac <prvAddCurrentTaskToDelayedList+0x94>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	429a      	cmp	r2, r3
 8005768:	d209      	bcs.n	800577e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800576a:	4b12      	ldr	r3, [pc, #72]	; (80057b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <prvAddCurrentTaskToDelayedList+0x94>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3304      	adds	r3, #4
 8005774:	4619      	mov	r1, r3
 8005776:	4610      	mov	r0, r2
 8005778:	f7fe fb4f 	bl	8003e1a <vListInsert>
}
 800577c:	e010      	b.n	80057a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800577e:	4b0e      	ldr	r3, [pc, #56]	; (80057b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <prvAddCurrentTaskToDelayedList+0x94>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3304      	adds	r3, #4
 8005788:	4619      	mov	r1, r3
 800578a:	4610      	mov	r0, r2
 800578c:	f7fe fb45 	bl	8003e1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005790:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	429a      	cmp	r2, r3
 8005798:	d202      	bcs.n	80057a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800579a:	4a08      	ldr	r2, [pc, #32]	; (80057bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	6013      	str	r3, [r2, #0]
}
 80057a0:	bf00      	nop
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	20000d08 	.word	0x20000d08
 80057ac:	20000830 	.word	0x20000830
 80057b0:	20000cf0 	.word	0x20000cf0
 80057b4:	20000cc0 	.word	0x20000cc0
 80057b8:	20000cbc 	.word	0x20000cbc
 80057bc:	20000d24 	.word	0x20000d24

080057c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08a      	sub	sp, #40	; 0x28
 80057c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80057ca:	f000 fb07 	bl	8005ddc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80057ce:	4b1c      	ldr	r3, [pc, #112]	; (8005840 <xTimerCreateTimerTask+0x80>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d021      	beq.n	800581a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80057de:	1d3a      	adds	r2, r7, #4
 80057e0:	f107 0108 	add.w	r1, r7, #8
 80057e4:	f107 030c 	add.w	r3, r7, #12
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe faab 	bl	8003d44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	9202      	str	r2, [sp, #8]
 80057f6:	9301      	str	r3, [sp, #4]
 80057f8:	2302      	movs	r3, #2
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	2300      	movs	r3, #0
 80057fe:	460a      	mov	r2, r1
 8005800:	4910      	ldr	r1, [pc, #64]	; (8005844 <xTimerCreateTimerTask+0x84>)
 8005802:	4811      	ldr	r0, [pc, #68]	; (8005848 <xTimerCreateTimerTask+0x88>)
 8005804:	f7ff f8de 	bl	80049c4 <xTaskCreateStatic>
 8005808:	4603      	mov	r3, r0
 800580a:	4a10      	ldr	r2, [pc, #64]	; (800584c <xTimerCreateTimerTask+0x8c>)
 800580c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800580e:	4b0f      	ldr	r3, [pc, #60]	; (800584c <xTimerCreateTimerTask+0x8c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005816:	2301      	movs	r3, #1
 8005818:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	613b      	str	r3, [r7, #16]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005836:	697b      	ldr	r3, [r7, #20]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	20000d60 	.word	0x20000d60
 8005844:	0800678c 	.word	0x0800678c
 8005848:	08005985 	.word	0x08005985
 800584c:	20000d64 	.word	0x20000d64

08005850 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08a      	sub	sp, #40	; 0x28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800585e:	2300      	movs	r3, #0
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	623b      	str	r3, [r7, #32]
}
 800587a:	bf00      	nop
 800587c:	e7fe      	b.n	800587c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800587e:	4b1a      	ldr	r3, [pc, #104]	; (80058e8 <xTimerGenericCommand+0x98>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d02a      	beq.n	80058dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b05      	cmp	r3, #5
 8005896:	dc18      	bgt.n	80058ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005898:	f7ff feb2 	bl	8005600 <xTaskGetSchedulerState>
 800589c:	4603      	mov	r3, r0
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d109      	bne.n	80058b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058a2:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <xTimerGenericCommand+0x98>)
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	f107 0110 	add.w	r1, r7, #16
 80058aa:	2300      	movs	r3, #0
 80058ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ae:	f7fe fca1 	bl	80041f4 <xQueueGenericSend>
 80058b2:	6278      	str	r0, [r7, #36]	; 0x24
 80058b4:	e012      	b.n	80058dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058b6:	4b0c      	ldr	r3, [pc, #48]	; (80058e8 <xTimerGenericCommand+0x98>)
 80058b8:	6818      	ldr	r0, [r3, #0]
 80058ba:	f107 0110 	add.w	r1, r7, #16
 80058be:	2300      	movs	r3, #0
 80058c0:	2200      	movs	r2, #0
 80058c2:	f7fe fc97 	bl	80041f4 <xQueueGenericSend>
 80058c6:	6278      	str	r0, [r7, #36]	; 0x24
 80058c8:	e008      	b.n	80058dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058ca:	4b07      	ldr	r3, [pc, #28]	; (80058e8 <xTimerGenericCommand+0x98>)
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	f107 0110 	add.w	r1, r7, #16
 80058d2:	2300      	movs	r3, #0
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	f7fe fd8b 	bl	80043f0 <xQueueGenericSendFromISR>
 80058da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3728      	adds	r7, #40	; 0x28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20000d60 	.word	0x20000d60

080058ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058f6:	4b22      	ldr	r3, [pc, #136]	; (8005980 <prvProcessExpiredTimer+0x94>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	3304      	adds	r3, #4
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe fac1 	bl	8003e8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d022      	beq.n	800595e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	699a      	ldr	r2, [r3, #24]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	18d1      	adds	r1, r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	6978      	ldr	r0, [r7, #20]
 8005926:	f000 f8d1 	bl	8005acc <prvInsertTimerInActiveList>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01f      	beq.n	8005970 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005930:	2300      	movs	r3, #0
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	2300      	movs	r3, #0
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	2100      	movs	r1, #0
 800593a:	6978      	ldr	r0, [r7, #20]
 800593c:	f7ff ff88 	bl	8005850 <xTimerGenericCommand>
 8005940:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d113      	bne.n	8005970 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	60fb      	str	r3, [r7, #12]
}
 800595a:	bf00      	nop
 800595c:	e7fe      	b.n	800595c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005964:	f023 0301 	bic.w	r3, r3, #1
 8005968:	b2da      	uxtb	r2, r3
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	6978      	ldr	r0, [r7, #20]
 8005976:	4798      	blx	r3
}
 8005978:	bf00      	nop
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20000d58 	.word	0x20000d58

08005984 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800598c:	f107 0308 	add.w	r3, r7, #8
 8005990:	4618      	mov	r0, r3
 8005992:	f000 f857 	bl	8005a44 <prvGetNextExpireTime>
 8005996:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4619      	mov	r1, r3
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 f803 	bl	80059a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059a2:	f000 f8d5 	bl	8005b50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059a6:	e7f1      	b.n	800598c <prvTimerTask+0x8>

080059a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059b2:	f7ff fa43 	bl	8004e3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059b6:	f107 0308 	add.w	r3, r7, #8
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 f866 	bl	8005a8c <prvSampleTimeNow>
 80059c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d130      	bne.n	8005a2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <prvProcessTimerOrBlockTask+0x3c>
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d806      	bhi.n	80059e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80059d6:	f7ff fa3f 	bl	8004e58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80059da:	68f9      	ldr	r1, [r7, #12]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff ff85 	bl	80058ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80059e2:	e024      	b.n	8005a2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d008      	beq.n	80059fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80059ea:	4b13      	ldr	r3, [pc, #76]	; (8005a38 <prvProcessTimerOrBlockTask+0x90>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <prvProcessTimerOrBlockTask+0x50>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <prvProcessTimerOrBlockTask+0x52>
 80059f8:	2300      	movs	r3, #0
 80059fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80059fc:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <prvProcessTimerOrBlockTask+0x94>)
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	f7fe ffa7 	bl	800495c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a0e:	f7ff fa23 	bl	8004e58 <xTaskResumeAll>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a18:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <prvProcessTimerOrBlockTask+0x98>)
 8005a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	f3bf 8f6f 	isb	sy
}
 8005a28:	e001      	b.n	8005a2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a2a:	f7ff fa15 	bl	8004e58 <xTaskResumeAll>
}
 8005a2e:	bf00      	nop
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000d5c 	.word	0x20000d5c
 8005a3c:	20000d60 	.word	0x20000d60
 8005a40:	e000ed04 	.word	0xe000ed04

08005a44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a4c:	4b0e      	ldr	r3, [pc, #56]	; (8005a88 <prvGetNextExpireTime+0x44>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <prvGetNextExpireTime+0x16>
 8005a56:	2201      	movs	r2, #1
 8005a58:	e000      	b.n	8005a5c <prvGetNextExpireTime+0x18>
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d105      	bne.n	8005a74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a68:	4b07      	ldr	r3, [pc, #28]	; (8005a88 <prvGetNextExpireTime+0x44>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	e001      	b.n	8005a78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a78:	68fb      	ldr	r3, [r7, #12]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	20000d58 	.word	0x20000d58

08005a8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a94:	f7ff fa7e 	bl	8004f94 <xTaskGetTickCount>
 8005a98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <prvSampleTimeNow+0x3c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d205      	bcs.n	8005ab0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005aa4:	f000 f936 	bl	8005d14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	e002      	b.n	8005ab6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ab6:	4a04      	ldr	r2, [pc, #16]	; (8005ac8 <prvSampleTimeNow+0x3c>)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005abc:	68fb      	ldr	r3, [r7, #12]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000d68 	.word	0x20000d68

08005acc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d812      	bhi.n	8005b18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	1ad2      	subs	r2, r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d302      	bcc.n	8005b06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b00:	2301      	movs	r3, #1
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	e01b      	b.n	8005b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b06:	4b10      	ldr	r3, [pc, #64]	; (8005b48 <prvInsertTimerInActiveList+0x7c>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	4619      	mov	r1, r3
 8005b10:	4610      	mov	r0, r2
 8005b12:	f7fe f982 	bl	8003e1a <vListInsert>
 8005b16:	e012      	b.n	8005b3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d206      	bcs.n	8005b2e <prvInsertTimerInActiveList+0x62>
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d302      	bcc.n	8005b2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	e007      	b.n	8005b3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <prvInsertTimerInActiveList+0x80>)
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3304      	adds	r3, #4
 8005b36:	4619      	mov	r1, r3
 8005b38:	4610      	mov	r0, r2
 8005b3a:	f7fe f96e 	bl	8003e1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b3e:	697b      	ldr	r3, [r7, #20]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20000d5c 	.word	0x20000d5c
 8005b4c:	20000d58 	.word	0x20000d58

08005b50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08e      	sub	sp, #56	; 0x38
 8005b54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b56:	e0ca      	b.n	8005cee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	da18      	bge.n	8005b90 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b5e:	1d3b      	adds	r3, r7, #4
 8005b60:	3304      	adds	r3, #4
 8005b62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10a      	bne.n	8005b80 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	61fb      	str	r3, [r7, #28]
}
 8005b7c:	bf00      	nop
 8005b7e:	e7fe      	b.n	8005b7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b86:	6850      	ldr	r0, [r2, #4]
 8005b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b8a:	6892      	ldr	r2, [r2, #8]
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f2c0 80ab 	blt.w	8005cee <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe f96f 	bl	8003e8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bae:	463b      	mov	r3, r7
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff ff6b 	bl	8005a8c <prvSampleTimeNow>
 8005bb6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b09      	cmp	r3, #9
 8005bbc:	f200 8096 	bhi.w	8005cec <prvProcessReceivedCommands+0x19c>
 8005bc0:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <prvProcessReceivedCommands+0x78>)
 8005bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc6:	bf00      	nop
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf1 	.word	0x08005bf1
 8005bd0:	08005bf1 	.word	0x08005bf1
 8005bd4:	08005c65 	.word	0x08005c65
 8005bd8:	08005c79 	.word	0x08005c79
 8005bdc:	08005cc3 	.word	0x08005cc3
 8005be0:	08005bf1 	.word	0x08005bf1
 8005be4:	08005bf1 	.word	0x08005bf1
 8005be8:	08005c65 	.word	0x08005c65
 8005bec:	08005c79 	.word	0x08005c79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bf6:	f043 0301 	orr.w	r3, r3, #1
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	18d1      	adds	r1, r2, r3
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c10:	f7ff ff5c 	bl	8005acc <prvInsertTimerInActiveList>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d069      	beq.n	8005cee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d05e      	beq.n	8005cee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	441a      	add	r2, r3
 8005c38:	2300      	movs	r3, #0
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2100      	movs	r1, #0
 8005c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c42:	f7ff fe05 	bl	8005850 <xTimerGenericCommand>
 8005c46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d14f      	bne.n	8005cee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	61bb      	str	r3, [r7, #24]
}
 8005c60:	bf00      	nop
 8005c62:	e7fe      	b.n	8005c62 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c6a:	f023 0301 	bic.w	r3, r3, #1
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005c76:	e03a      	b.n	8005cee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	617b      	str	r3, [r7, #20]
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	18d1      	adds	r1, r2, r3
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cbc:	f7ff ff06 	bl	8005acc <prvInsertTimerInActiveList>
					break;
 8005cc0:	e015      	b.n	8005cee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d103      	bne.n	8005cd8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cd2:	f000 fbdd 	bl	8006490 <vPortFree>
 8005cd6:	e00a      	b.n	8005cee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cde:	f023 0301 	bic.w	r3, r3, #1
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005cea:	e000      	b.n	8005cee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005cec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cee:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <prvProcessReceivedCommands+0x1c0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	1d39      	adds	r1, r7, #4
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fe fc16 	bl	8004528 <xQueueReceive>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f47f af2a 	bne.w	8005b58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop
 8005d08:	3730      	adds	r7, #48	; 0x30
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	20000d60 	.word	0x20000d60

08005d14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d1a:	e048      	b.n	8005dae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d1c:	4b2d      	ldr	r3, [pc, #180]	; (8005dd4 <prvSwitchTimerLists+0xc0>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d26:	4b2b      	ldr	r3, [pc, #172]	; (8005dd4 <prvSwitchTimerLists+0xc0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7fe f8a9 	bl	8003e8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d02e      	beq.n	8005dae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4413      	add	r3, r2
 8005d58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d90e      	bls.n	8005d80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d6e:	4b19      	ldr	r3, [pc, #100]	; (8005dd4 <prvSwitchTimerLists+0xc0>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3304      	adds	r3, #4
 8005d76:	4619      	mov	r1, r3
 8005d78:	4610      	mov	r0, r2
 8005d7a:	f7fe f84e 	bl	8003e1a <vListInsert>
 8005d7e:	e016      	b.n	8005dae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d80:	2300      	movs	r3, #0
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	2300      	movs	r3, #0
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	2100      	movs	r1, #0
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f7ff fd60 	bl	8005850 <xTimerGenericCommand>
 8005d90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10a      	bne.n	8005dae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	603b      	str	r3, [r7, #0]
}
 8005daa:	bf00      	nop
 8005dac:	e7fe      	b.n	8005dac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dae:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <prvSwitchTimerLists+0xc0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1b1      	bne.n	8005d1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005db8:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <prvSwitchTimerLists+0xc0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005dbe:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <prvSwitchTimerLists+0xc4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a04      	ldr	r2, [pc, #16]	; (8005dd4 <prvSwitchTimerLists+0xc0>)
 8005dc4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005dc6:	4a04      	ldr	r2, [pc, #16]	; (8005dd8 <prvSwitchTimerLists+0xc4>)
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	6013      	str	r3, [r2, #0]
}
 8005dcc:	bf00      	nop
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20000d58 	.word	0x20000d58
 8005dd8:	20000d5c 	.word	0x20000d5c

08005ddc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005de2:	f000 f967 	bl	80060b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005de6:	4b15      	ldr	r3, [pc, #84]	; (8005e3c <prvCheckForValidListAndQueue+0x60>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d120      	bne.n	8005e30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005dee:	4814      	ldr	r0, [pc, #80]	; (8005e40 <prvCheckForValidListAndQueue+0x64>)
 8005df0:	f7fd ffc2 	bl	8003d78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005df4:	4813      	ldr	r0, [pc, #76]	; (8005e44 <prvCheckForValidListAndQueue+0x68>)
 8005df6:	f7fd ffbf 	bl	8003d78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005dfa:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <prvCheckForValidListAndQueue+0x6c>)
 8005dfc:	4a10      	ldr	r2, [pc, #64]	; (8005e40 <prvCheckForValidListAndQueue+0x64>)
 8005dfe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e00:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <prvCheckForValidListAndQueue+0x70>)
 8005e02:	4a10      	ldr	r2, [pc, #64]	; (8005e44 <prvCheckForValidListAndQueue+0x68>)
 8005e04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e06:	2300      	movs	r3, #0
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	4b11      	ldr	r3, [pc, #68]	; (8005e50 <prvCheckForValidListAndQueue+0x74>)
 8005e0c:	4a11      	ldr	r2, [pc, #68]	; (8005e54 <prvCheckForValidListAndQueue+0x78>)
 8005e0e:	2110      	movs	r1, #16
 8005e10:	200a      	movs	r0, #10
 8005e12:	f7fe f8cd 	bl	8003fb0 <xQueueGenericCreateStatic>
 8005e16:	4603      	mov	r3, r0
 8005e18:	4a08      	ldr	r2, [pc, #32]	; (8005e3c <prvCheckForValidListAndQueue+0x60>)
 8005e1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e1c:	4b07      	ldr	r3, [pc, #28]	; (8005e3c <prvCheckForValidListAndQueue+0x60>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e24:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <prvCheckForValidListAndQueue+0x60>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	490b      	ldr	r1, [pc, #44]	; (8005e58 <prvCheckForValidListAndQueue+0x7c>)
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe fd6c 	bl	8004908 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e30:	f000 f970 	bl	8006114 <vPortExitCritical>
}
 8005e34:	bf00      	nop
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20000d60 	.word	0x20000d60
 8005e40:	20000d30 	.word	0x20000d30
 8005e44:	20000d44 	.word	0x20000d44
 8005e48:	20000d58 	.word	0x20000d58
 8005e4c:	20000d5c 	.word	0x20000d5c
 8005e50:	20000e0c 	.word	0x20000e0c
 8005e54:	20000d6c 	.word	0x20000d6c
 8005e58:	08006794 	.word	0x08006794

08005e5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3b04      	subs	r3, #4
 8005e6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3b04      	subs	r3, #4
 8005e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f023 0201 	bic.w	r2, r3, #1
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3b04      	subs	r3, #4
 8005e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e8c:	4a0c      	ldr	r2, [pc, #48]	; (8005ec0 <pxPortInitialiseStack+0x64>)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3b14      	subs	r3, #20
 8005e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3b04      	subs	r3, #4
 8005ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f06f 0202 	mvn.w	r2, #2
 8005eaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3b20      	subs	r3, #32
 8005eb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	08005ec5 	.word	0x08005ec5

08005ec4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ece:	4b12      	ldr	r3, [pc, #72]	; (8005f18 <prvTaskExitError+0x54>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d00a      	beq.n	8005eee <prvTaskExitError+0x2a>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	60fb      	str	r3, [r7, #12]
}
 8005eea:	bf00      	nop
 8005eec:	e7fe      	b.n	8005eec <prvTaskExitError+0x28>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	60bb      	str	r3, [r7, #8]
}
 8005f00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f02:	bf00      	nop
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0fc      	beq.n	8005f04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f0a:	bf00      	nop
 8005f0c:	bf00      	nop
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	2000000c 	.word	0x2000000c
 8005f1c:	00000000 	.word	0x00000000

08005f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <pxCurrentTCBConst2>)
 8005f22:	6819      	ldr	r1, [r3, #0]
 8005f24:	6808      	ldr	r0, [r1, #0]
 8005f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2a:	f380 8809 	msr	PSP, r0
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f04f 0000 	mov.w	r0, #0
 8005f36:	f380 8811 	msr	BASEPRI, r0
 8005f3a:	4770      	bx	lr
 8005f3c:	f3af 8000 	nop.w

08005f40 <pxCurrentTCBConst2>:
 8005f40:	20000830 	.word	0x20000830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop

08005f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f48:	4808      	ldr	r0, [pc, #32]	; (8005f6c <prvPortStartFirstTask+0x24>)
 8005f4a:	6800      	ldr	r0, [r0, #0]
 8005f4c:	6800      	ldr	r0, [r0, #0]
 8005f4e:	f380 8808 	msr	MSP, r0
 8005f52:	f04f 0000 	mov.w	r0, #0
 8005f56:	f380 8814 	msr	CONTROL, r0
 8005f5a:	b662      	cpsie	i
 8005f5c:	b661      	cpsie	f
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	df00      	svc	0
 8005f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f6a:	bf00      	nop
 8005f6c:	e000ed08 	.word	0xe000ed08

08005f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f76:	4b46      	ldr	r3, [pc, #280]	; (8006090 <xPortStartScheduler+0x120>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a46      	ldr	r2, [pc, #280]	; (8006094 <xPortStartScheduler+0x124>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d10a      	bne.n	8005f96 <xPortStartScheduler+0x26>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	613b      	str	r3, [r7, #16]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f96:	4b3e      	ldr	r3, [pc, #248]	; (8006090 <xPortStartScheduler+0x120>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a3f      	ldr	r2, [pc, #252]	; (8006098 <xPortStartScheduler+0x128>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d10a      	bne.n	8005fb6 <xPortStartScheduler+0x46>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	60fb      	str	r3, [r7, #12]
}
 8005fb2:	bf00      	nop
 8005fb4:	e7fe      	b.n	8005fb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fb6:	4b39      	ldr	r3, [pc, #228]	; (800609c <xPortStartScheduler+0x12c>)
 8005fb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	22ff      	movs	r2, #255	; 0xff
 8005fc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	4b31      	ldr	r3, [pc, #196]	; (80060a0 <xPortStartScheduler+0x130>)
 8005fdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fde:	4b31      	ldr	r3, [pc, #196]	; (80060a4 <xPortStartScheduler+0x134>)
 8005fe0:	2207      	movs	r2, #7
 8005fe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fe4:	e009      	b.n	8005ffa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005fe6:	4b2f      	ldr	r3, [pc, #188]	; (80060a4 <xPortStartScheduler+0x134>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	4a2d      	ldr	r2, [pc, #180]	; (80060a4 <xPortStartScheduler+0x134>)
 8005fee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006002:	2b80      	cmp	r3, #128	; 0x80
 8006004:	d0ef      	beq.n	8005fe6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006006:	4b27      	ldr	r3, [pc, #156]	; (80060a4 <xPortStartScheduler+0x134>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f1c3 0307 	rsb	r3, r3, #7
 800600e:	2b04      	cmp	r3, #4
 8006010:	d00a      	beq.n	8006028 <xPortStartScheduler+0xb8>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	60bb      	str	r3, [r7, #8]
}
 8006024:	bf00      	nop
 8006026:	e7fe      	b.n	8006026 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006028:	4b1e      	ldr	r3, [pc, #120]	; (80060a4 <xPortStartScheduler+0x134>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	4a1d      	ldr	r2, [pc, #116]	; (80060a4 <xPortStartScheduler+0x134>)
 8006030:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006032:	4b1c      	ldr	r3, [pc, #112]	; (80060a4 <xPortStartScheduler+0x134>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800603a:	4a1a      	ldr	r2, [pc, #104]	; (80060a4 <xPortStartScheduler+0x134>)
 800603c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	b2da      	uxtb	r2, r3
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006046:	4b18      	ldr	r3, [pc, #96]	; (80060a8 <xPortStartScheduler+0x138>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a17      	ldr	r2, [pc, #92]	; (80060a8 <xPortStartScheduler+0x138>)
 800604c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006052:	4b15      	ldr	r3, [pc, #84]	; (80060a8 <xPortStartScheduler+0x138>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a14      	ldr	r2, [pc, #80]	; (80060a8 <xPortStartScheduler+0x138>)
 8006058:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800605c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800605e:	f000 f8dd 	bl	800621c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006062:	4b12      	ldr	r3, [pc, #72]	; (80060ac <xPortStartScheduler+0x13c>)
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006068:	f000 f8fc 	bl	8006264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800606c:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <xPortStartScheduler+0x140>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a0f      	ldr	r2, [pc, #60]	; (80060b0 <xPortStartScheduler+0x140>)
 8006072:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006076:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006078:	f7ff ff66 	bl	8005f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800607c:	f7ff f854 	bl	8005128 <vTaskSwitchContext>
	prvTaskExitError();
 8006080:	f7ff ff20 	bl	8005ec4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	e000ed00 	.word	0xe000ed00
 8006094:	410fc271 	.word	0x410fc271
 8006098:	410fc270 	.word	0x410fc270
 800609c:	e000e400 	.word	0xe000e400
 80060a0:	20000e5c 	.word	0x20000e5c
 80060a4:	20000e60 	.word	0x20000e60
 80060a8:	e000ed20 	.word	0xe000ed20
 80060ac:	2000000c 	.word	0x2000000c
 80060b0:	e000ef34 	.word	0xe000ef34

080060b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
	__asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	607b      	str	r3, [r7, #4]
}
 80060cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060ce:	4b0f      	ldr	r3, [pc, #60]	; (800610c <vPortEnterCritical+0x58>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3301      	adds	r3, #1
 80060d4:	4a0d      	ldr	r2, [pc, #52]	; (800610c <vPortEnterCritical+0x58>)
 80060d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060d8:	4b0c      	ldr	r3, [pc, #48]	; (800610c <vPortEnterCritical+0x58>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d10f      	bne.n	8006100 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060e0:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <vPortEnterCritical+0x5c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <vPortEnterCritical+0x4c>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	603b      	str	r3, [r7, #0]
}
 80060fc:	bf00      	nop
 80060fe:	e7fe      	b.n	80060fe <vPortEnterCritical+0x4a>
	}
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	2000000c 	.word	0x2000000c
 8006110:	e000ed04 	.word	0xe000ed04

08006114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800611a:	4b12      	ldr	r3, [pc, #72]	; (8006164 <vPortExitCritical+0x50>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <vPortExitCritical+0x24>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	607b      	str	r3, [r7, #4]
}
 8006134:	bf00      	nop
 8006136:	e7fe      	b.n	8006136 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <vPortExitCritical+0x50>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3b01      	subs	r3, #1
 800613e:	4a09      	ldr	r2, [pc, #36]	; (8006164 <vPortExitCritical+0x50>)
 8006140:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006142:	4b08      	ldr	r3, [pc, #32]	; (8006164 <vPortExitCritical+0x50>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d105      	bne.n	8006156 <vPortExitCritical+0x42>
 800614a:	2300      	movs	r3, #0
 800614c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	f383 8811 	msr	BASEPRI, r3
}
 8006154:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	2000000c 	.word	0x2000000c
	...

08006170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006170:	f3ef 8009 	mrs	r0, PSP
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <pxCurrentTCBConst>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	f01e 0f10 	tst.w	lr, #16
 8006180:	bf08      	it	eq
 8006182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618a:	6010      	str	r0, [r2, #0]
 800618c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006190:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006194:	f380 8811 	msr	BASEPRI, r0
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f7fe ffc2 	bl	8005128 <vTaskSwitchContext>
 80061a4:	f04f 0000 	mov.w	r0, #0
 80061a8:	f380 8811 	msr	BASEPRI, r0
 80061ac:	bc09      	pop	{r0, r3}
 80061ae:	6819      	ldr	r1, [r3, #0]
 80061b0:	6808      	ldr	r0, [r1, #0]
 80061b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b6:	f01e 0f10 	tst.w	lr, #16
 80061ba:	bf08      	it	eq
 80061bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061c0:	f380 8809 	msr	PSP, r0
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	f3af 8000 	nop.w

080061d0 <pxCurrentTCBConst>:
 80061d0:	20000830 	.word	0x20000830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop

080061d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	607b      	str	r3, [r7, #4]
}
 80061f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061f2:	f7fe fedf 	bl	8004fb4 <xTaskIncrementTick>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061fc:	4b06      	ldr	r3, [pc, #24]	; (8006218 <xPortSysTickHandler+0x40>)
 80061fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	2300      	movs	r3, #0
 8006206:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	f383 8811 	msr	BASEPRI, r3
}
 800620e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	e000ed04 	.word	0xe000ed04

0800621c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006220:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <vPortSetupTimerInterrupt+0x34>)
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006226:	4b0b      	ldr	r3, [pc, #44]	; (8006254 <vPortSetupTimerInterrupt+0x38>)
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <vPortSetupTimerInterrupt+0x3c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a0a      	ldr	r2, [pc, #40]	; (800625c <vPortSetupTimerInterrupt+0x40>)
 8006232:	fba2 2303 	umull	r2, r3, r2, r3
 8006236:	099b      	lsrs	r3, r3, #6
 8006238:	4a09      	ldr	r2, [pc, #36]	; (8006260 <vPortSetupTimerInterrupt+0x44>)
 800623a:	3b01      	subs	r3, #1
 800623c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800623e:	4b04      	ldr	r3, [pc, #16]	; (8006250 <vPortSetupTimerInterrupt+0x34>)
 8006240:	2207      	movs	r2, #7
 8006242:	601a      	str	r2, [r3, #0]
}
 8006244:	bf00      	nop
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	e000e010 	.word	0xe000e010
 8006254:	e000e018 	.word	0xe000e018
 8006258:	20000000 	.word	0x20000000
 800625c:	1b4e81b5 	.word	0x1b4e81b5
 8006260:	e000e014 	.word	0xe000e014

08006264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006274 <vPortEnableVFP+0x10>
 8006268:	6801      	ldr	r1, [r0, #0]
 800626a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800626e:	6001      	str	r1, [r0, #0]
 8006270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006272:	bf00      	nop
 8006274:	e000ed88 	.word	0xe000ed88

08006278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800627e:	f3ef 8305 	mrs	r3, IPSR
 8006282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b0f      	cmp	r3, #15
 8006288:	d914      	bls.n	80062b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800628a:	4a17      	ldr	r2, [pc, #92]	; (80062e8 <vPortValidateInterruptPriority+0x70>)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006294:	4b15      	ldr	r3, [pc, #84]	; (80062ec <vPortValidateInterruptPriority+0x74>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	7afa      	ldrb	r2, [r7, #11]
 800629a:	429a      	cmp	r2, r3
 800629c:	d20a      	bcs.n	80062b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	607b      	str	r3, [r7, #4]
}
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062b4:	4b0e      	ldr	r3, [pc, #56]	; (80062f0 <vPortValidateInterruptPriority+0x78>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062bc:	4b0d      	ldr	r3, [pc, #52]	; (80062f4 <vPortValidateInterruptPriority+0x7c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d90a      	bls.n	80062da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	603b      	str	r3, [r7, #0]
}
 80062d6:	bf00      	nop
 80062d8:	e7fe      	b.n	80062d8 <vPortValidateInterruptPriority+0x60>
	}
 80062da:	bf00      	nop
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	e000e3f0 	.word	0xe000e3f0
 80062ec:	20000e5c 	.word	0x20000e5c
 80062f0:	e000ed0c 	.word	0xe000ed0c
 80062f4:	20000e60 	.word	0x20000e60

080062f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08a      	sub	sp, #40	; 0x28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006300:	2300      	movs	r3, #0
 8006302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006304:	f7fe fd9a 	bl	8004e3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006308:	4b5b      	ldr	r3, [pc, #364]	; (8006478 <pvPortMalloc+0x180>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006310:	f000 f920 	bl	8006554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006314:	4b59      	ldr	r3, [pc, #356]	; (800647c <pvPortMalloc+0x184>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4013      	ands	r3, r2
 800631c:	2b00      	cmp	r3, #0
 800631e:	f040 8093 	bne.w	8006448 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01d      	beq.n	8006364 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006328:	2208      	movs	r2, #8
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4413      	add	r3, r2
 800632e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	2b00      	cmp	r3, #0
 8006338:	d014      	beq.n	8006364 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f023 0307 	bic.w	r3, r3, #7
 8006340:	3308      	adds	r3, #8
 8006342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <pvPortMalloc+0x6c>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	617b      	str	r3, [r7, #20]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d06e      	beq.n	8006448 <pvPortMalloc+0x150>
 800636a:	4b45      	ldr	r3, [pc, #276]	; (8006480 <pvPortMalloc+0x188>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	429a      	cmp	r2, r3
 8006372:	d869      	bhi.n	8006448 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006374:	4b43      	ldr	r3, [pc, #268]	; (8006484 <pvPortMalloc+0x18c>)
 8006376:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006378:	4b42      	ldr	r3, [pc, #264]	; (8006484 <pvPortMalloc+0x18c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800637e:	e004      	b.n	800638a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	429a      	cmp	r2, r3
 8006392:	d903      	bls.n	800639c <pvPortMalloc+0xa4>
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1f1      	bne.n	8006380 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800639c:	4b36      	ldr	r3, [pc, #216]	; (8006478 <pvPortMalloc+0x180>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d050      	beq.n	8006448 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2208      	movs	r2, #8
 80063ac:	4413      	add	r3, r2
 80063ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	1ad2      	subs	r2, r2, r3
 80063c0:	2308      	movs	r3, #8
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d91f      	bls.n	8006408 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4413      	add	r3, r2
 80063ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <pvPortMalloc+0xf8>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	613b      	str	r3, [r7, #16]
}
 80063ec:	bf00      	nop
 80063ee:	e7fe      	b.n	80063ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	1ad2      	subs	r2, r2, r3
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006402:	69b8      	ldr	r0, [r7, #24]
 8006404:	f000 f908 	bl	8006618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006408:	4b1d      	ldr	r3, [pc, #116]	; (8006480 <pvPortMalloc+0x188>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	4a1b      	ldr	r2, [pc, #108]	; (8006480 <pvPortMalloc+0x188>)
 8006414:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006416:	4b1a      	ldr	r3, [pc, #104]	; (8006480 <pvPortMalloc+0x188>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <pvPortMalloc+0x190>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d203      	bcs.n	800642a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006422:	4b17      	ldr	r3, [pc, #92]	; (8006480 <pvPortMalloc+0x188>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a18      	ldr	r2, [pc, #96]	; (8006488 <pvPortMalloc+0x190>)
 8006428:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	4b13      	ldr	r3, [pc, #76]	; (800647c <pvPortMalloc+0x184>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	431a      	orrs	r2, r3
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800643e:	4b13      	ldr	r3, [pc, #76]	; (800648c <pvPortMalloc+0x194>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3301      	adds	r3, #1
 8006444:	4a11      	ldr	r2, [pc, #68]	; (800648c <pvPortMalloc+0x194>)
 8006446:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006448:	f7fe fd06 	bl	8004e58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <pvPortMalloc+0x174>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	60fb      	str	r3, [r7, #12]
}
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <pvPortMalloc+0x172>
	return pvReturn;
 800646c:	69fb      	ldr	r3, [r7, #28]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3728      	adds	r7, #40	; 0x28
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20006844 	.word	0x20006844
 800647c:	20006858 	.word	0x20006858
 8006480:	20006848 	.word	0x20006848
 8006484:	2000683c 	.word	0x2000683c
 8006488:	2000684c 	.word	0x2000684c
 800648c:	20006850 	.word	0x20006850

08006490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d04d      	beq.n	800653e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064a2:	2308      	movs	r3, #8
 80064a4:	425b      	negs	r3, r3
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4413      	add	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	4b24      	ldr	r3, [pc, #144]	; (8006548 <vPortFree+0xb8>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4013      	ands	r3, r2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10a      	bne.n	80064d4 <vPortFree+0x44>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	60fb      	str	r3, [r7, #12]
}
 80064d0:	bf00      	nop
 80064d2:	e7fe      	b.n	80064d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <vPortFree+0x62>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	60bb      	str	r3, [r7, #8]
}
 80064ee:	bf00      	nop
 80064f0:	e7fe      	b.n	80064f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	4b14      	ldr	r3, [pc, #80]	; (8006548 <vPortFree+0xb8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01e      	beq.n	800653e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d11a      	bne.n	800653e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	4b0e      	ldr	r3, [pc, #56]	; (8006548 <vPortFree+0xb8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	43db      	mvns	r3, r3
 8006512:	401a      	ands	r2, r3
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006518:	f7fe fc90 	bl	8004e3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	4b0a      	ldr	r3, [pc, #40]	; (800654c <vPortFree+0xbc>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4413      	add	r3, r2
 8006526:	4a09      	ldr	r2, [pc, #36]	; (800654c <vPortFree+0xbc>)
 8006528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800652a:	6938      	ldr	r0, [r7, #16]
 800652c:	f000 f874 	bl	8006618 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <vPortFree+0xc0>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3301      	adds	r3, #1
 8006536:	4a06      	ldr	r2, [pc, #24]	; (8006550 <vPortFree+0xc0>)
 8006538:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800653a:	f7fe fc8d 	bl	8004e58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800653e:	bf00      	nop
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20006858 	.word	0x20006858
 800654c:	20006848 	.word	0x20006848
 8006550:	20006854 	.word	0x20006854

08006554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800655a:	f645 13d8 	movw	r3, #23000	; 0x59d8
 800655e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006560:	4b27      	ldr	r3, [pc, #156]	; (8006600 <prvHeapInit+0xac>)
 8006562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f003 0307 	and.w	r3, r3, #7
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00c      	beq.n	8006588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3307      	adds	r3, #7
 8006572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0307 	bic.w	r3, r3, #7
 800657a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <prvHeapInit+0xac>)
 8006584:	4413      	add	r3, r2
 8006586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800658c:	4a1d      	ldr	r2, [pc, #116]	; (8006604 <prvHeapInit+0xb0>)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006592:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <prvHeapInit+0xb0>)
 8006594:	2200      	movs	r2, #0
 8006596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	4413      	add	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065a0:	2208      	movs	r2, #8
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1a9b      	subs	r3, r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0307 	bic.w	r3, r3, #7
 80065ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4a15      	ldr	r2, [pc, #84]	; (8006608 <prvHeapInit+0xb4>)
 80065b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065b6:	4b14      	ldr	r3, [pc, #80]	; (8006608 <prvHeapInit+0xb4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2200      	movs	r2, #0
 80065bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065be:	4b12      	ldr	r3, [pc, #72]	; (8006608 <prvHeapInit+0xb4>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	1ad2      	subs	r2, r2, r3
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065d4:	4b0c      	ldr	r3, [pc, #48]	; (8006608 <prvHeapInit+0xb4>)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	4a0a      	ldr	r2, [pc, #40]	; (800660c <prvHeapInit+0xb8>)
 80065e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	4a09      	ldr	r2, [pc, #36]	; (8006610 <prvHeapInit+0xbc>)
 80065ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065ec:	4b09      	ldr	r3, [pc, #36]	; (8006614 <prvHeapInit+0xc0>)
 80065ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065f2:	601a      	str	r2, [r3, #0]
}
 80065f4:	bf00      	nop
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	20000e64 	.word	0x20000e64
 8006604:	2000683c 	.word	0x2000683c
 8006608:	20006844 	.word	0x20006844
 800660c:	2000684c 	.word	0x2000684c
 8006610:	20006848 	.word	0x20006848
 8006614:	20006858 	.word	0x20006858

08006618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006620:	4b28      	ldr	r3, [pc, #160]	; (80066c4 <prvInsertBlockIntoFreeList+0xac>)
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	e002      	b.n	800662c <prvInsertBlockIntoFreeList+0x14>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60fb      	str	r3, [r7, #12]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	429a      	cmp	r2, r3
 8006634:	d8f7      	bhi.n	8006626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	4413      	add	r3, r2
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	429a      	cmp	r2, r3
 8006646:	d108      	bne.n	800665a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	441a      	add	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	441a      	add	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d118      	bne.n	80066a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d00d      	beq.n	8006696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	441a      	add	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	e008      	b.n	80066a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006696:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <prvInsertBlockIntoFreeList+0xb0>)
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	e003      	b.n	80066a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d002      	beq.n	80066b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066b6:	bf00      	nop
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	2000683c 	.word	0x2000683c
 80066c8:	20006844 	.word	0x20006844

080066cc <memset>:
 80066cc:	4402      	add	r2, r0
 80066ce:	4603      	mov	r3, r0
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d100      	bne.n	80066d6 <memset+0xa>
 80066d4:	4770      	bx	lr
 80066d6:	f803 1b01 	strb.w	r1, [r3], #1
 80066da:	e7f9      	b.n	80066d0 <memset+0x4>

080066dc <__libc_init_array>:
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	4d0d      	ldr	r5, [pc, #52]	; (8006714 <__libc_init_array+0x38>)
 80066e0:	4c0d      	ldr	r4, [pc, #52]	; (8006718 <__libc_init_array+0x3c>)
 80066e2:	1b64      	subs	r4, r4, r5
 80066e4:	10a4      	asrs	r4, r4, #2
 80066e6:	2600      	movs	r6, #0
 80066e8:	42a6      	cmp	r6, r4
 80066ea:	d109      	bne.n	8006700 <__libc_init_array+0x24>
 80066ec:	4d0b      	ldr	r5, [pc, #44]	; (800671c <__libc_init_array+0x40>)
 80066ee:	4c0c      	ldr	r4, [pc, #48]	; (8006720 <__libc_init_array+0x44>)
 80066f0:	f000 f826 	bl	8006740 <_init>
 80066f4:	1b64      	subs	r4, r4, r5
 80066f6:	10a4      	asrs	r4, r4, #2
 80066f8:	2600      	movs	r6, #0
 80066fa:	42a6      	cmp	r6, r4
 80066fc:	d105      	bne.n	800670a <__libc_init_array+0x2e>
 80066fe:	bd70      	pop	{r4, r5, r6, pc}
 8006700:	f855 3b04 	ldr.w	r3, [r5], #4
 8006704:	4798      	blx	r3
 8006706:	3601      	adds	r6, #1
 8006708:	e7ee      	b.n	80066e8 <__libc_init_array+0xc>
 800670a:	f855 3b04 	ldr.w	r3, [r5], #4
 800670e:	4798      	blx	r3
 8006710:	3601      	adds	r6, #1
 8006712:	e7f2      	b.n	80066fa <__libc_init_array+0x1e>
 8006714:	0800688c 	.word	0x0800688c
 8006718:	0800688c 	.word	0x0800688c
 800671c:	0800688c 	.word	0x0800688c
 8006720:	08006890 	.word	0x08006890

08006724 <memcpy>:
 8006724:	440a      	add	r2, r1
 8006726:	4291      	cmp	r1, r2
 8006728:	f100 33ff 	add.w	r3, r0, #4294967295
 800672c:	d100      	bne.n	8006730 <memcpy+0xc>
 800672e:	4770      	bx	lr
 8006730:	b510      	push	{r4, lr}
 8006732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800673a:	4291      	cmp	r1, r2
 800673c:	d1f9      	bne.n	8006732 <memcpy+0xe>
 800673e:	bd10      	pop	{r4, pc}

08006740 <_init>:
 8006740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006742:	bf00      	nop
 8006744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006746:	bc08      	pop	{r3}
 8006748:	469e      	mov	lr, r3
 800674a:	4770      	bx	lr

0800674c <_fini>:
 800674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674e:	bf00      	nop
 8006750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006752:	bc08      	pop	{r3}
 8006754:	469e      	mov	lr, r3
 8006756:	4770      	bx	lr
