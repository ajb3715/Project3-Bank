
Project3-Bank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006458  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080065e8  080065e8  000165e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006758  08006758  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006758  08006758  00016758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006760  08006760  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006760  08006760  00016760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006764  08006764  00016764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006844  20000010  08006778  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006854  08006778  00026854  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001925b  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033be  00000000  00000000  000392de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  0003c6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116a  00000000  00000000  0003dd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027683  00000000  00000000  0003ee6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018f01  00000000  00000000  000664ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc300  00000000  00000000  0007f3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e9c  00000000  00000000  0017b6f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0018158c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065d0 	.word	0x080065d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080065d0 	.word	0x080065d0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <clock_increment>:
	Clock.hour = 9;
	Clock.minute = 0;
	Clock.second = 0;
}

void clock_increment(WallClock Clock){
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Check if second is full, if so then increment
	//minute count and reset second count to 0
	//if minute count full increment hour count and reset minutes to 0
	if(Clock.second == 59){
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	2b3b      	cmp	r3, #59	; 0x3b
 80004dc:	d10e      	bne.n	80004fc <clock_increment+0x30>
		Clock.second = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
		if(Clock.minute == 59){
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	2b3b      	cmp	r3, #59	; 0x3b
 80004e6:	d105      	bne.n	80004f4 <clock_increment+0x28>
			Clock.minute = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60bb      	str	r3, [r7, #8]
			Clock.hour += 1;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3301      	adds	r3, #1
 80004f0:	607b      	str	r3, [r7, #4]
		}
	}
	else{
		Clock.second += 1;
	}
}
 80004f2:	e006      	b.n	8000502 <clock_increment+0x36>
			Clock.minute += 1;
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	3301      	adds	r3, #1
 80004f8:	60bb      	str	r3, [r7, #8]
}
 80004fa:	e002      	b.n	8000502 <clock_increment+0x36>
		Clock.second += 1;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	3301      	adds	r3, #1
 8000500:	60fb      	str	r3, [r7, #12]
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fac6 	bl	8000aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f866 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f91c 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000520:	f000 f8ea 	bl	80006f8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000524:	f000 f8b2 	bl	800068c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000528:	f003 f948 	bl	80037bc <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 800052c:	481c      	ldr	r0, [pc, #112]	; (80005a0 <main+0x90>)
 800052e:	f003 fa3c 	bl	80039aa <osMutexNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a1b      	ldr	r2, [pc, #108]	; (80005a4 <main+0x94>)
 8000536:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of TELLER */
  TELLERHandle = osMessageQueueNew (64, sizeof(uint64_t), &TELLER_attributes);
 8000538:	4a1b      	ldr	r2, [pc, #108]	; (80005a8 <main+0x98>)
 800053a:	2108      	movs	r1, #8
 800053c:	2040      	movs	r0, #64	; 0x40
 800053e:	f003 faba 	bl	8003ab6 <osMessageQueueNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a19      	ldr	r2, [pc, #100]	; (80005ac <main+0x9c>)
 8000546:	6013      	str	r3, [r2, #0]

  /* creation of CUSTOMER */
  CUSTOMERHandle = osMessageQueueNew (64, sizeof(uint64_t), &CUSTOMER_attributes);
 8000548:	4a19      	ldr	r2, [pc, #100]	; (80005b0 <main+0xa0>)
 800054a:	2108      	movs	r1, #8
 800054c:	2040      	movs	r0, #64	; 0x40
 800054e:	f003 fab2 	bl	8003ab6 <osMessageQueueNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a17      	ldr	r2, [pc, #92]	; (80005b4 <main+0xa4>)
 8000556:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tellers */
  TellersHandle = osThreadNew(StartTellers, NULL, &Tellers_attributes);
 8000558:	4a17      	ldr	r2, [pc, #92]	; (80005b8 <main+0xa8>)
 800055a:	2100      	movs	r1, #0
 800055c:	4817      	ldr	r0, [pc, #92]	; (80005bc <main+0xac>)
 800055e:	f003 f977 	bl	8003850 <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a16      	ldr	r2, [pc, #88]	; (80005c0 <main+0xb0>)
 8000566:	6013      	str	r3, [r2, #0]

  /* creation of Customers */
  CustomersHandle = osThreadNew(StartCustomers, NULL, &Customers_attributes);
 8000568:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <main+0xb4>)
 800056a:	2100      	movs	r1, #0
 800056c:	4816      	ldr	r0, [pc, #88]	; (80005c8 <main+0xb8>)
 800056e:	f003 f96f 	bl	8003850 <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a15      	ldr	r2, [pc, #84]	; (80005cc <main+0xbc>)
 8000576:	6013      	str	r3, [r2, #0]

  /* creation of Clock */
  ClockHandle = osThreadNew(StartClock, NULL, &Clock_attributes);
 8000578:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <main+0xc0>)
 800057a:	2100      	movs	r1, #0
 800057c:	4815      	ldr	r0, [pc, #84]	; (80005d4 <main+0xc4>)
 800057e:	f003 f967 	bl	8003850 <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a14      	ldr	r2, [pc, #80]	; (80005d8 <main+0xc8>)
 8000586:	6013      	str	r3, [r2, #0]

  /* creation of Manager */
  ManagerHandle = osThreadNew(StartManager, NULL, &Manager_attributes);
 8000588:	4a14      	ldr	r2, [pc, #80]	; (80005dc <main+0xcc>)
 800058a:	2100      	movs	r1, #0
 800058c:	4814      	ldr	r0, [pc, #80]	; (80005e0 <main+0xd0>)
 800058e:	f003 f95f 	bl	8003850 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <main+0xd4>)
 8000596:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000598:	f003 f934 	bl	8003804 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059c:	e7fe      	b.n	800059c <main+0x8c>
 800059e:	bf00      	nop
 80005a0:	08006700 	.word	0x08006700
 80005a4:	20000124 	.word	0x20000124
 80005a8:	080066d0 	.word	0x080066d0
 80005ac:	2000011c 	.word	0x2000011c
 80005b0:	080066e8 	.word	0x080066e8
 80005b4:	20000120 	.word	0x20000120
 80005b8:	08006640 	.word	0x08006640
 80005bc:	08000825 	.word	0x08000825
 80005c0:	2000010c 	.word	0x2000010c
 80005c4:	08006664 	.word	0x08006664
 80005c8:	08000835 	.word	0x08000835
 80005cc:	20000110 	.word	0x20000110
 80005d0:	08006688 	.word	0x08006688
 80005d4:	08000845 	.word	0x08000845
 80005d8:	20000114 	.word	0x20000114
 80005dc:	080066ac 	.word	0x080066ac
 80005e0:	08000855 	.word	0x08000855
 80005e4:	20000118 	.word	0x20000118

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b096      	sub	sp, #88	; 0x58
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2244      	movs	r2, #68	; 0x44
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f005 ffb0 	bl	800655c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800060e:	f000 fda7 	bl	8001160 <HAL_PWREx_ControlVoltageScaling>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000618:	f000 f924 	bl	8000864 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000624:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	2310      	movs	r3, #16
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062e:	2302      	movs	r3, #2
 8000630:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000636:	230a      	movs	r3, #10
 8000638:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800063a:	2307      	movs	r3, #7
 800063c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fdde 	bl	800120c <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000656:	f000 f905 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2303      	movs	r3, #3
 8000660:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	2104      	movs	r1, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f001 f9a6 	bl	80019c4 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800067e:	f000 f8f1 	bl	8000864 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3758      	adds	r7, #88	; 0x58
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_TIM6_Init+0x64>)
 800069e:	4a15      	ldr	r2, [pc, #84]	; (80006f4 <MX_TIM6_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 600;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_TIM6_Init+0x64>)
 80006a4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80006a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_TIM6_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 222;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_TIM6_Init+0x64>)
 80006b2:	22de      	movs	r2, #222	; 0xde
 80006b4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_TIM6_Init+0x64>)
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <MX_TIM6_Init+0x64>)
 80006be:	f002 f861 	bl	8002784 <HAL_TIM_Base_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80006c8:	f000 f8cc 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_TIM6_Init+0x64>)
 80006da:	f002 fa79 	bl	8002bd0 <HAL_TIMEx_MasterConfigSynchronization>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80006e4:	f000 f8be 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000038 	.word	0x20000038
 80006f4:	40001000 	.word	0x40001000

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART2_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_USART2_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800073c:	f002 faee 	bl	8002d1c <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f88d 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000084 	.word	0x20000084
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b2b      	ldr	r3, [pc, #172]	; (800081c <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a2a      	ldr	r2, [pc, #168]	; (800081c <MX_GPIO_Init+0xc4>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b28      	ldr	r3, [pc, #160]	; (800081c <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a24      	ldr	r2, [pc, #144]	; (800081c <MX_GPIO_Init+0xc4>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_GPIO_Init+0xc4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_GPIO_Init+0xc4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a1e      	ldr	r2, [pc, #120]	; (800081c <MX_GPIO_Init+0xc4>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_GPIO_Init+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a18      	ldr	r2, [pc, #96]	; (800081c <MX_GPIO_Init+0xc4>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_GPIO_Init+0xc4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2120      	movs	r1, #32
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f000 fc9d 	bl	8001114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <MX_GPIO_Init+0xc8>)
 80007f2:	f000 fae5 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f6:	2320      	movs	r3, #32
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f000 fad6 	bl	8000dc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000
 8000820:	48000800 	.word	0x48000800

08000824 <StartTellers>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTellers */
void StartTellers(void *argument)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f003 f8a1 	bl	8003974 <osDelay>
 8000832:	e7fb      	b.n	800082c <StartTellers+0x8>

08000834 <StartCustomers>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCustomers */
void StartCustomers(void *argument)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCustomers */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800083c:	2001      	movs	r0, #1
 800083e:	f003 f899 	bl	8003974 <osDelay>
 8000842:	e7fb      	b.n	800083c <StartCustomers+0x8>

08000844 <StartClock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClock */
void StartClock(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartClock */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f003 f891 	bl	8003974 <osDelay>
 8000852:	e7fb      	b.n	800084c <StartClock+0x8>

08000854 <StartManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManager */
void StartManager(void *argument)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManager */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f003 f889 	bl	8003974 <osDelay>
 8000862:	e7fb      	b.n	800085c <StartManager+0x8>

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_MspInit+0x4c>)
 8000878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <HAL_MspInit+0x4c>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6613      	str	r3, [r2, #96]	; 0x60
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_MspInit+0x4c>)
 8000884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HAL_MspInit+0x4c>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <HAL_MspInit+0x4c>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6593      	str	r3, [r2, #88]	; 0x58
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_MspInit+0x4c>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	210f      	movs	r1, #15
 80008aa:	f06f 0001 	mvn.w	r0, #1
 80008ae:	f000 fa50 	bl	8000d52 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000

080008c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <HAL_TIM_Base_MspInit+0x44>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d113      	bne.n	80008fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <HAL_TIM_Base_MspInit+0x48>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	4a0c      	ldr	r2, [pc, #48]	; (8000908 <HAL_TIM_Base_MspInit+0x48>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	6593      	str	r3, [r2, #88]	; 0x58
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <HAL_TIM_Base_MspInit+0x48>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2105      	movs	r1, #5
 80008ee:	2036      	movs	r0, #54	; 0x36
 80008f0:	f000 fa2f 	bl	8000d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008f4:	2036      	movs	r0, #54	; 0x36
 80008f6:	f000 fa48 	bl	8000d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40001000 	.word	0x40001000
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b0ac      	sub	sp, #176	; 0xb0
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2288      	movs	r2, #136	; 0x88
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f005 fe15 	bl	800655c <memset>
  if(huart->Instance==USART2)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a21      	ldr	r2, [pc, #132]	; (80009bc <HAL_UART_MspInit+0xb0>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d13b      	bne.n	80009b4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800093c:	2302      	movs	r3, #2
 800093e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000940:	2300      	movs	r3, #0
 8000942:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fa5f 	bl	8001e0c <HAL_RCCEx_PeriphCLKConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000954:	f7ff ff86 	bl	8000864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_UART_MspInit+0xb4>)
 800095a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095c:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <HAL_UART_MspInit+0xb4>)
 800095e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000962:	6593      	str	r3, [r2, #88]	; 0x58
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_UART_MspInit+0xb4>)
 8000966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_UART_MspInit+0xb4>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000974:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <HAL_UART_MspInit+0xb4>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_UART_MspInit+0xb4>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000988:	230c      	movs	r3, #12
 800098a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a0:	2307      	movs	r3, #7
 80009a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009aa:	4619      	mov	r1, r3
 80009ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b0:	f000 fa06 	bl	8000dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b4:	bf00      	nop
 80009b6:	37b0      	adds	r7, #176	; 0xb0
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40004400 	.word	0x40004400
 80009c0:	40021000 	.word	0x40021000

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f8b2 	bl	8000b5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009f8:	f004 fd48 	bl	800548c <xTaskGetSchedulerState>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d001      	beq.n	8000a06 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a02:	f005 fb31 	bl	8006068 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	clock_increment(Clock);
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <TIM6_DAC_IRQHandler+0x18>)
 8000a12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a16:	f7ff fd59 	bl	80004cc <clock_increment>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <TIM6_DAC_IRQHandler+0x1c>)
 8000a1c:	f001 ff09 	bl	8002832 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000002c 	.word	0x2000002c
 8000a28:	20000038 	.word	0x20000038

08000a2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <SystemInit+0x20>)
 8000a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <SystemInit+0x20>)
 8000a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a54:	f7ff ffea 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a5a:	490d      	ldr	r1, [pc, #52]	; (8000a90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <LoopForever+0xe>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a70:	4c0a      	ldr	r4, [pc, #40]	; (8000a9c <LoopForever+0x16>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f005 fd75 	bl	800656c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a82:	f7ff fd45 	bl	8000510 <main>

08000a86 <LoopForever>:

LoopForever:
    b LoopForever
 8000a86:	e7fe      	b.n	8000a86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a94:	08006768 	.word	0x08006768
  ldr r2, =_sbss
 8000a98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a9c:	20006854 	.word	0x20006854

08000aa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC1_2_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_Init+0x3c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <HAL_Init+0x3c>)
 8000ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aba:	2003      	movs	r0, #3
 8000abc:	f000 f93e 	bl	8000d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f000 f80f 	bl	8000ae4 <HAL_InitTick>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d002      	beq.n	8000ad2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	71fb      	strb	r3, [r7, #7]
 8000ad0:	e001      	b.n	8000ad6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad2:	f7ff fecd 	bl	8000870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40022000 	.word	0x40022000

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_InitTick+0x6c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d023      	beq.n	8000b40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_InitTick+0x70>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_InitTick+0x6c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f949 	bl	8000da6 <HAL_SYSTICK_Config>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d10f      	bne.n	8000b3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d809      	bhi.n	8000b34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f913 	bl	8000d52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_InitTick+0x74>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
 8000b32:	e007      	b.n	8000b44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e004      	b.n	8000b44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	73fb      	strb	r3, [r7, #15]
 8000b3e:	e001      	b.n	8000b44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x20>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_IncTick+0x24>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000128 	.word	0x20000128

08000b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <HAL_GetTick+0x14>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000128 	.word	0x20000128

08000b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <__NVIC_GetPriorityGrouping+0x18>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	f003 0307 	and.w	r3, r3, #7
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	db0b      	blt.n	8000c2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f003 021f 	and.w	r2, r3, #31
 8000c18:	4907      	ldr	r1, [pc, #28]	; (8000c38 <__NVIC_EnableIRQ+0x38>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	2001      	movs	r0, #1
 8000c22:	fa00 f202 	lsl.w	r2, r0, r2
 8000c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db0a      	blt.n	8000c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	490c      	ldr	r1, [pc, #48]	; (8000c88 <__NVIC_SetPriority+0x4c>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	0112      	lsls	r2, r2, #4
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	440b      	add	r3, r1
 8000c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c64:	e00a      	b.n	8000c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4908      	ldr	r1, [pc, #32]	; (8000c8c <__NVIC_SetPriority+0x50>)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	3b04      	subs	r3, #4
 8000c74:	0112      	lsls	r2, r2, #4
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	440b      	add	r3, r1
 8000c7a:	761a      	strb	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b089      	sub	sp, #36	; 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f1c3 0307 	rsb	r3, r3, #7
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	bf28      	it	cs
 8000cae:	2304      	movcs	r3, #4
 8000cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d902      	bls.n	8000cc0 <NVIC_EncodePriority+0x30>
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3b03      	subs	r3, #3
 8000cbe:	e000      	b.n	8000cc2 <NVIC_EncodePriority+0x32>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43d9      	mvns	r1, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	4313      	orrs	r3, r2
         );
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3724      	adds	r7, #36	; 0x24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d08:	d301      	bcc.n	8000d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00f      	b.n	8000d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <SysTick_Config+0x40>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d16:	210f      	movs	r1, #15
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	f7ff ff8e 	bl	8000c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <SysTick_Config+0x40>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <SysTick_Config+0x40>)
 8000d28:	2207      	movs	r2, #7
 8000d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	e000e010 	.word	0xe000e010

08000d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ff29 	bl	8000b9c <__NVIC_SetPriorityGrouping>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d64:	f7ff ff3e 	bl	8000be4 <__NVIC_GetPriorityGrouping>
 8000d68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	6978      	ldr	r0, [r7, #20]
 8000d70:	f7ff ff8e 	bl	8000c90 <NVIC_EncodePriority>
 8000d74:	4602      	mov	r2, r0
 8000d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff5d 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff31 	bl	8000c00 <__NVIC_EnableIRQ>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffa2 	bl	8000cf8 <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dce:	e17f      	b.n	80010d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 8171 	beq.w	80010ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d005      	beq.n	8000e00 <HAL_GPIO_Init+0x40>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d130      	bne.n	8000e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e36:	2201      	movs	r2, #1
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	091b      	lsrs	r3, r3, #4
 8000e4c:	f003 0201 	and.w	r2, r3, #1
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d118      	bne.n	8000ea0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e74:	2201      	movs	r2, #1
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	08db      	lsrs	r3, r3, #3
 8000e8a:	f003 0201 	and.w	r2, r3, #1
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d017      	beq.n	8000edc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d123      	bne.n	8000f30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	691a      	ldr	r2, [r3, #16]
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	6939      	ldr	r1, [r7, #16]
 8000f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0203 	and.w	r2, r3, #3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 80ac 	beq.w	80010ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	4b5f      	ldr	r3, [pc, #380]	; (80010f0 <HAL_GPIO_Init+0x330>)
 8000f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f76:	4a5e      	ldr	r2, [pc, #376]	; (80010f0 <HAL_GPIO_Init+0x330>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f7e:	4b5c      	ldr	r3, [pc, #368]	; (80010f0 <HAL_GPIO_Init+0x330>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f8a:	4a5a      	ldr	r2, [pc, #360]	; (80010f4 <HAL_GPIO_Init+0x334>)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fb4:	d025      	beq.n	8001002 <HAL_GPIO_Init+0x242>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4f      	ldr	r2, [pc, #316]	; (80010f8 <HAL_GPIO_Init+0x338>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d01f      	beq.n	8000ffe <HAL_GPIO_Init+0x23e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4e      	ldr	r2, [pc, #312]	; (80010fc <HAL_GPIO_Init+0x33c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d019      	beq.n	8000ffa <HAL_GPIO_Init+0x23a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4d      	ldr	r2, [pc, #308]	; (8001100 <HAL_GPIO_Init+0x340>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d013      	beq.n	8000ff6 <HAL_GPIO_Init+0x236>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4c      	ldr	r2, [pc, #304]	; (8001104 <HAL_GPIO_Init+0x344>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00d      	beq.n	8000ff2 <HAL_GPIO_Init+0x232>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4b      	ldr	r2, [pc, #300]	; (8001108 <HAL_GPIO_Init+0x348>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d007      	beq.n	8000fee <HAL_GPIO_Init+0x22e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4a      	ldr	r2, [pc, #296]	; (800110c <HAL_GPIO_Init+0x34c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_GPIO_Init+0x22a>
 8000fe6:	2306      	movs	r3, #6
 8000fe8:	e00c      	b.n	8001004 <HAL_GPIO_Init+0x244>
 8000fea:	2307      	movs	r3, #7
 8000fec:	e00a      	b.n	8001004 <HAL_GPIO_Init+0x244>
 8000fee:	2305      	movs	r3, #5
 8000ff0:	e008      	b.n	8001004 <HAL_GPIO_Init+0x244>
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x244>
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e004      	b.n	8001004 <HAL_GPIO_Init+0x244>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_Init+0x244>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <HAL_GPIO_Init+0x244>
 8001002:	2300      	movs	r3, #0
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	f002 0203 	and.w	r2, r2, #3
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	4093      	lsls	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001014:	4937      	ldr	r1, [pc, #220]	; (80010f4 <HAL_GPIO_Init+0x334>)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001022:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <HAL_GPIO_Init+0x350>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001046:	4a32      	ldr	r2, [pc, #200]	; (8001110 <HAL_GPIO_Init+0x350>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800104c:	4b30      	ldr	r3, [pc, #192]	; (8001110 <HAL_GPIO_Init+0x350>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001070:	4a27      	ldr	r2, [pc, #156]	; (8001110 <HAL_GPIO_Init+0x350>)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <HAL_GPIO_Init+0x350>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800109a:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <HAL_GPIO_Init+0x350>)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <HAL_GPIO_Init+0x350>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010c4:	4a12      	ldr	r2, [pc, #72]	; (8001110 <HAL_GPIO_Init+0x350>)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa22 f303 	lsr.w	r3, r2, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f47f ae78 	bne.w	8000dd0 <HAL_GPIO_Init+0x10>
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010000 	.word	0x40010000
 80010f8:	48000400 	.word	0x48000400
 80010fc:	48000800 	.word	0x48000800
 8001100:	48000c00 	.word	0x48000c00
 8001104:	48001000 	.word	0x48001000
 8001108:	48001400 	.word	0x48001400
 800110c:	48001800 	.word	0x48001800
 8001110:	40010400 	.word	0x40010400

08001114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
 8001120:	4613      	mov	r3, r2
 8001122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001124:	787b      	ldrb	r3, [r7, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001130:	e002      	b.n	8001138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <HAL_PWREx_GetVoltageRange+0x18>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40007000 	.word	0x40007000

08001160 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800116e:	d130      	bne.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800117c:	d038      	beq.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001186:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2232      	movs	r2, #50	; 0x32
 8001194:	fb02 f303 	mul.w	r3, r2, r3
 8001198:	4a1b      	ldr	r2, [pc, #108]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800119a:	fba2 2303 	umull	r2, r3, r2, r3
 800119e:	0c9b      	lsrs	r3, r3, #18
 80011a0:	3301      	adds	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011a4:	e002      	b.n	80011ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b8:	d102      	bne.n	80011c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f2      	bne.n	80011a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011cc:	d110      	bne.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e00f      	b.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011de:	d007      	beq.n	80011f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011e8:	4a05      	ldr	r2, [pc, #20]	; (8001200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40007000 	.word	0x40007000
 8001204:	20000000 	.word	0x20000000
 8001208:	431bde83 	.word	0x431bde83

0800120c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e3ca      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800121e:	4b97      	ldr	r3, [pc, #604]	; (800147c <HAL_RCC_OscConfig+0x270>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001228:	4b94      	ldr	r3, [pc, #592]	; (800147c <HAL_RCC_OscConfig+0x270>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 80e4 	beq.w	8001408 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d007      	beq.n	8001256 <HAL_RCC_OscConfig+0x4a>
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	2b0c      	cmp	r3, #12
 800124a:	f040 808b 	bne.w	8001364 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2b01      	cmp	r3, #1
 8001252:	f040 8087 	bne.w	8001364 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001256:	4b89      	ldr	r3, [pc, #548]	; (800147c <HAL_RCC_OscConfig+0x270>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d005      	beq.n	800126e <HAL_RCC_OscConfig+0x62>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e3a2      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a1a      	ldr	r2, [r3, #32]
 8001272:	4b82      	ldr	r3, [pc, #520]	; (800147c <HAL_RCC_OscConfig+0x270>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <HAL_RCC_OscConfig+0x7c>
 800127e:	4b7f      	ldr	r3, [pc, #508]	; (800147c <HAL_RCC_OscConfig+0x270>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001286:	e005      	b.n	8001294 <HAL_RCC_OscConfig+0x88>
 8001288:	4b7c      	ldr	r3, [pc, #496]	; (800147c <HAL_RCC_OscConfig+0x270>)
 800128a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001294:	4293      	cmp	r3, r2
 8001296:	d223      	bcs.n	80012e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fd55 	bl	8001d4c <RCC_SetFlashLatencyFromMSIRange>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e383      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ac:	4b73      	ldr	r3, [pc, #460]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a72      	ldr	r2, [pc, #456]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80012b2:	f043 0308 	orr.w	r3, r3, #8
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b70      	ldr	r3, [pc, #448]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	496d      	ldr	r1, [pc, #436]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ca:	4b6c      	ldr	r3, [pc, #432]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	4968      	ldr	r1, [pc, #416]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]
 80012de:	e025      	b.n	800132c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e0:	4b66      	ldr	r3, [pc, #408]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a65      	ldr	r2, [pc, #404]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b63      	ldr	r3, [pc, #396]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	4960      	ldr	r1, [pc, #384]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012fe:	4b5f      	ldr	r3, [pc, #380]	; (800147c <HAL_RCC_OscConfig+0x270>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	495b      	ldr	r1, [pc, #364]	; (800147c <HAL_RCC_OscConfig+0x270>)
 800130e:	4313      	orrs	r3, r2
 8001310:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d109      	bne.n	800132c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fd15 	bl	8001d4c <RCC_SetFlashLatencyFromMSIRange>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e343      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800132c:	f000 fc4a 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 8001330:	4602      	mov	r2, r0
 8001332:	4b52      	ldr	r3, [pc, #328]	; (800147c <HAL_RCC_OscConfig+0x270>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	091b      	lsrs	r3, r3, #4
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	4950      	ldr	r1, [pc, #320]	; (8001480 <HAL_RCC_OscConfig+0x274>)
 800133e:	5ccb      	ldrb	r3, [r1, r3]
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	fa22 f303 	lsr.w	r3, r2, r3
 8001348:	4a4e      	ldr	r2, [pc, #312]	; (8001484 <HAL_RCC_OscConfig+0x278>)
 800134a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800134c:	4b4e      	ldr	r3, [pc, #312]	; (8001488 <HAL_RCC_OscConfig+0x27c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fbc7 	bl	8000ae4 <HAL_InitTick>
 8001356:	4603      	mov	r3, r0
 8001358:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d052      	beq.n	8001406 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	e327      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d032      	beq.n	80013d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800136c:	4b43      	ldr	r3, [pc, #268]	; (800147c <HAL_RCC_OscConfig+0x270>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a42      	ldr	r2, [pc, #264]	; (800147c <HAL_RCC_OscConfig+0x270>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001378:	f7ff fc04 	bl	8000b84 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001380:	f7ff fc00 	bl	8000b84 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e310      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001392:	4b3a      	ldr	r3, [pc, #232]	; (800147c <HAL_RCC_OscConfig+0x270>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800139e:	4b37      	ldr	r3, [pc, #220]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a36      	ldr	r2, [pc, #216]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b34      	ldr	r3, [pc, #208]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4931      	ldr	r1, [pc, #196]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013bc:	4b2f      	ldr	r3, [pc, #188]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	492c      	ldr	r1, [pc, #176]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
 80013d0:	e01a      	b.n	8001408 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013d2:	4b2a      	ldr	r3, [pc, #168]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a29      	ldr	r2, [pc, #164]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013de:	f7ff fbd1 	bl	8000b84 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013e6:	f7ff fbcd 	bl	8000b84 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e2dd      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013f8:	4b20      	ldr	r3, [pc, #128]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f0      	bne.n	80013e6 <HAL_RCC_OscConfig+0x1da>
 8001404:	e000      	b.n	8001408 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001406:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d074      	beq.n	80014fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2b08      	cmp	r3, #8
 8001418:	d005      	beq.n	8001426 <HAL_RCC_OscConfig+0x21a>
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	d10e      	bne.n	800143e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b03      	cmp	r3, #3
 8001424:	d10b      	bne.n	800143e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d064      	beq.n	80014fc <HAL_RCC_OscConfig+0x2f0>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d160      	bne.n	80014fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e2ba      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x24a>
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_RCC_OscConfig+0x270>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a0b      	ldr	r2, [pc, #44]	; (800147c <HAL_RCC_OscConfig+0x270>)
 800144e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	e026      	b.n	80014a4 <HAL_RCC_OscConfig+0x298>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800145e:	d115      	bne.n	800148c <HAL_RCC_OscConfig+0x280>
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_RCC_OscConfig+0x270>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a05      	ldr	r2, [pc, #20]	; (800147c <HAL_RCC_OscConfig+0x270>)
 8001466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_RCC_OscConfig+0x270>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a02      	ldr	r2, [pc, #8]	; (800147c <HAL_RCC_OscConfig+0x270>)
 8001472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e014      	b.n	80014a4 <HAL_RCC_OscConfig+0x298>
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000
 8001480:	08006710 	.word	0x08006710
 8001484:	20000000 	.word	0x20000000
 8001488:	20000004 	.word	0x20000004
 800148c:	4ba0      	ldr	r3, [pc, #640]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a9f      	ldr	r2, [pc, #636]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 8001492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b9d      	ldr	r3, [pc, #628]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a9c      	ldr	r2, [pc, #624]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 800149e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fb6a 	bl	8000b84 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fb66 	bl	8000b84 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e276      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c6:	4b92      	ldr	r3, [pc, #584]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x2a8>
 80014d2:	e014      	b.n	80014fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff fb56 	bl	8000b84 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fb52 	bl	8000b84 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e262      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ee:	4b88      	ldr	r3, [pc, #544]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x2d0>
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d060      	beq.n	80015cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2b04      	cmp	r3, #4
 800150e:	d005      	beq.n	800151c <HAL_RCC_OscConfig+0x310>
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2b0c      	cmp	r3, #12
 8001514:	d119      	bne.n	800154a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d116      	bne.n	800154a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800151c:	4b7c      	ldr	r3, [pc, #496]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_RCC_OscConfig+0x328>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e23f      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b76      	ldr	r3, [pc, #472]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	061b      	lsls	r3, r3, #24
 8001542:	4973      	ldr	r1, [pc, #460]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001548:	e040      	b.n	80015cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d023      	beq.n	800159a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001552:	4b6f      	ldr	r3, [pc, #444]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a6e      	ldr	r2, [pc, #440]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 8001558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7ff fb11 	bl	8000b84 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001566:	f7ff fb0d 	bl	8000b84 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e21d      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001578:	4b65      	ldr	r3, [pc, #404]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001584:	4b62      	ldr	r3, [pc, #392]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	061b      	lsls	r3, r3, #24
 8001592:	495f      	ldr	r1, [pc, #380]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
 8001598:	e018      	b.n	80015cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159a:	4b5d      	ldr	r3, [pc, #372]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a5c      	ldr	r2, [pc, #368]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 80015a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a6:	f7ff faed 	bl	8000b84 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ae:	f7ff fae9 	bl	8000b84 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e1f9      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c0:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d03c      	beq.n	8001652 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d01c      	beq.n	800161a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e0:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 80015e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e6:	4a4a      	ldr	r2, [pc, #296]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fac8 	bl	8000b84 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f8:	f7ff fac4 	bl	8000b84 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e1d4      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 800160c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0ef      	beq.n	80015f8 <HAL_RCC_OscConfig+0x3ec>
 8001618:	e01b      	b.n	8001652 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161a:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 800161c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001620:	4a3b      	ldr	r2, [pc, #236]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162a:	f7ff faab 	bl	8000b84 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001632:	f7ff faa7 	bl	8000b84 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e1b7      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001644:	4b32      	ldr	r3, [pc, #200]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 8001646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ef      	bne.n	8001632 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 80a6 	beq.w	80017ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001664:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 8001666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10d      	bne.n	800168c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001670:	4b27      	ldr	r3, [pc, #156]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	4a26      	ldr	r2, [pc, #152]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 8001676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167a:	6593      	str	r3, [r2, #88]	; 0x58
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001688:	2301      	movs	r3, #1
 800168a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168c:	4b21      	ldr	r3, [pc, #132]	; (8001714 <HAL_RCC_OscConfig+0x508>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d118      	bne.n	80016ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <HAL_RCC_OscConfig+0x508>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <HAL_RCC_OscConfig+0x508>)
 800169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a4:	f7ff fa6e 	bl	8000b84 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ac:	f7ff fa6a 	bl	8000b84 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e17a      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_RCC_OscConfig+0x508>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d108      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4d8>
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 80016d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d8:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016e2:	e029      	b.n	8001738 <HAL_RCC_OscConfig+0x52c>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d115      	bne.n	8001718 <HAL_RCC_OscConfig+0x50c>
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f2:	4a07      	ldr	r2, [pc, #28]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 80016fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001702:	4a03      	ldr	r2, [pc, #12]	; (8001710 <HAL_RCC_OscConfig+0x504>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800170c:	e014      	b.n	8001738 <HAL_RCC_OscConfig+0x52c>
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	40007000 	.word	0x40007000
 8001718:	4b9c      	ldr	r3, [pc, #624]	; (800198c <HAL_RCC_OscConfig+0x780>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171e:	4a9b      	ldr	r2, [pc, #620]	; (800198c <HAL_RCC_OscConfig+0x780>)
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001728:	4b98      	ldr	r3, [pc, #608]	; (800198c <HAL_RCC_OscConfig+0x780>)
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172e:	4a97      	ldr	r2, [pc, #604]	; (800198c <HAL_RCC_OscConfig+0x780>)
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d016      	beq.n	800176e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001740:	f7ff fa20 	bl	8000b84 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001746:	e00a      	b.n	800175e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001748:	f7ff fa1c 	bl	8000b84 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	; 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e12a      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800175e:	4b8b      	ldr	r3, [pc, #556]	; (800198c <HAL_RCC_OscConfig+0x780>)
 8001760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0ed      	beq.n	8001748 <HAL_RCC_OscConfig+0x53c>
 800176c:	e015      	b.n	800179a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176e:	f7ff fa09 	bl	8000b84 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001774:	e00a      	b.n	800178c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f7ff fa05 	bl	8000b84 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	f241 3288 	movw	r2, #5000	; 0x1388
 8001784:	4293      	cmp	r3, r2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e113      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800178c:	4b7f      	ldr	r3, [pc, #508]	; (800198c <HAL_RCC_OscConfig+0x780>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1ed      	bne.n	8001776 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800179a:	7ffb      	ldrb	r3, [r7, #31]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d105      	bne.n	80017ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a0:	4b7a      	ldr	r3, [pc, #488]	; (800198c <HAL_RCC_OscConfig+0x780>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a4:	4a79      	ldr	r2, [pc, #484]	; (800198c <HAL_RCC_OscConfig+0x780>)
 80017a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80fe 	beq.w	80019b2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	f040 80d0 	bne.w	8001960 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017c0:	4b72      	ldr	r3, [pc, #456]	; (800198c <HAL_RCC_OscConfig+0x780>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0203 	and.w	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d130      	bne.n	8001836 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	3b01      	subs	r3, #1
 80017e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d127      	bne.n	8001836 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d11f      	bne.n	8001836 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001800:	2a07      	cmp	r2, #7
 8001802:	bf14      	ite	ne
 8001804:	2201      	movne	r2, #1
 8001806:	2200      	moveq	r2, #0
 8001808:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800180a:	4293      	cmp	r3, r2
 800180c:	d113      	bne.n	8001836 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	3b01      	subs	r3, #1
 800181c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d109      	bne.n	8001836 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	085b      	lsrs	r3, r3, #1
 800182e:	3b01      	subs	r3, #1
 8001830:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001832:	429a      	cmp	r2, r3
 8001834:	d06e      	beq.n	8001914 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b0c      	cmp	r3, #12
 800183a:	d069      	beq.n	8001910 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800183c:	4b53      	ldr	r3, [pc, #332]	; (800198c <HAL_RCC_OscConfig+0x780>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d105      	bne.n	8001854 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001848:	4b50      	ldr	r3, [pc, #320]	; (800198c <HAL_RCC_OscConfig+0x780>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0ad      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001858:	4b4c      	ldr	r3, [pc, #304]	; (800198c <HAL_RCC_OscConfig+0x780>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a4b      	ldr	r2, [pc, #300]	; (800198c <HAL_RCC_OscConfig+0x780>)
 800185e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001862:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001864:	f7ff f98e 	bl	8000b84 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff f98a 	bl	8000b84 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e09a      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800187e:	4b43      	ldr	r3, [pc, #268]	; (800198c <HAL_RCC_OscConfig+0x780>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800188a:	4b40      	ldr	r3, [pc, #256]	; (800198c <HAL_RCC_OscConfig+0x780>)
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	4b40      	ldr	r3, [pc, #256]	; (8001990 <HAL_RCC_OscConfig+0x784>)
 8001890:	4013      	ands	r3, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800189a:	3a01      	subs	r2, #1
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	4311      	orrs	r1, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018a4:	0212      	lsls	r2, r2, #8
 80018a6:	4311      	orrs	r1, r2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018ac:	0852      	lsrs	r2, r2, #1
 80018ae:	3a01      	subs	r2, #1
 80018b0:	0552      	lsls	r2, r2, #21
 80018b2:	4311      	orrs	r1, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018b8:	0852      	lsrs	r2, r2, #1
 80018ba:	3a01      	subs	r2, #1
 80018bc:	0652      	lsls	r2, r2, #25
 80018be:	4311      	orrs	r1, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018c4:	0912      	lsrs	r2, r2, #4
 80018c6:	0452      	lsls	r2, r2, #17
 80018c8:	430a      	orrs	r2, r1
 80018ca:	4930      	ldr	r1, [pc, #192]	; (800198c <HAL_RCC_OscConfig+0x780>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018d0:	4b2e      	ldr	r3, [pc, #184]	; (800198c <HAL_RCC_OscConfig+0x780>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a2d      	ldr	r2, [pc, #180]	; (800198c <HAL_RCC_OscConfig+0x780>)
 80018d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018dc:	4b2b      	ldr	r3, [pc, #172]	; (800198c <HAL_RCC_OscConfig+0x780>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4a2a      	ldr	r2, [pc, #168]	; (800198c <HAL_RCC_OscConfig+0x780>)
 80018e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018e8:	f7ff f94c 	bl	8000b84 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f0:	f7ff f948 	bl	8000b84 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e058      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_RCC_OscConfig+0x780>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800190e:	e050      	b.n	80019b2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e04f      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <HAL_RCC_OscConfig+0x780>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d148      	bne.n	80019b2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_RCC_OscConfig+0x780>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <HAL_RCC_OscConfig+0x780>)
 8001926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <HAL_RCC_OscConfig+0x780>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4a16      	ldr	r2, [pc, #88]	; (800198c <HAL_RCC_OscConfig+0x780>)
 8001932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001936:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001938:	f7ff f924 	bl	8000b84 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff f920 	bl	8000b84 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e030      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_RCC_OscConfig+0x780>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x734>
 800195e:	e028      	b.n	80019b2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d023      	beq.n	80019ae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_OscConfig+0x780>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a08      	ldr	r2, [pc, #32]	; (800198c <HAL_RCC_OscConfig+0x780>)
 800196c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001972:	f7ff f907 	bl	8000b84 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001978:	e00c      	b.n	8001994 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197a:	f7ff f903 	bl	8000b84 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d905      	bls.n	8001994 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e013      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
 800198c:	40021000 	.word	0x40021000
 8001990:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_RCC_OscConfig+0x7b0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1ec      	bne.n	800197a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_RCC_OscConfig+0x7b0>)
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	4905      	ldr	r1, [pc, #20]	; (80019bc <HAL_RCC_OscConfig+0x7b0>)
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_RCC_OscConfig+0x7b4>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
 80019ac:	e001      	b.n	80019b2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3720      	adds	r7, #32
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000
 80019c0:	feeefffc 	.word	0xfeeefffc

080019c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0e7      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d8:	4b75      	ldr	r3, [pc, #468]	; (8001bb0 <HAL_RCC_ClockConfig+0x1ec>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d910      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b72      	ldr	r3, [pc, #456]	; (8001bb0 <HAL_RCC_ClockConfig+0x1ec>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 0207 	bic.w	r2, r3, #7
 80019ee:	4970      	ldr	r1, [pc, #448]	; (8001bb0 <HAL_RCC_ClockConfig+0x1ec>)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b6e      	ldr	r3, [pc, #440]	; (8001bb0 <HAL_RCC_ClockConfig+0x1ec>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0cf      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d010      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	4b66      	ldr	r3, [pc, #408]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d908      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a24:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4960      	ldr	r1, [pc, #384]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d04c      	beq.n	8001adc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4a:	4b5a      	ldr	r3, [pc, #360]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d121      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e0a6      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a62:	4b54      	ldr	r3, [pc, #336]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d115      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e09a      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a7a:	4b4e      	ldr	r3, [pc, #312]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e08e      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8a:	4b4a      	ldr	r3, [pc, #296]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e086      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a9a:	4b46      	ldr	r3, [pc, #280]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f023 0203 	bic.w	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4943      	ldr	r1, [pc, #268]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aac:	f7ff f86a 	bl	8000b84 <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab4:	f7ff f866 	bl	8000b84 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e06e      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	4b3a      	ldr	r3, [pc, #232]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 020c 	and.w	r2, r3, #12
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1eb      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d010      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d208      	bcs.n	8001b0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af8:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	492b      	ldr	r1, [pc, #172]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b0a:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d210      	bcs.n	8001b3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 0207 	bic.w	r2, r3, #7
 8001b20:	4923      	ldr	r1, [pc, #140]	; (8001bb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e036      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d008      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	4918      	ldr	r1, [pc, #96]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d009      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4910      	ldr	r1, [pc, #64]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b78:	f000 f824 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	490b      	ldr	r1, [pc, #44]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f4>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
 8001b94:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1f8>)
 8001b96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1fc>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe ffa1 	bl	8000ae4 <HAL_InitTick>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ba6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40022000 	.word	0x40022000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	08006710 	.word	0x08006710
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000004 	.word	0x20000004

08001bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bdc:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	2b0c      	cmp	r3, #12
 8001bf0:	d121      	bne.n	8001c36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d11e      	bne.n	8001c36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bf8:	4b34      	ldr	r3, [pc, #208]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	e005      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c20:	4a2b      	ldr	r2, [pc, #172]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10d      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c34:	e00a      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d102      	bne.n	8001c42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c3c:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c3e:	61bb      	str	r3, [r7, #24]
 8001c40:	e004      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	d134      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0xa6>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d003      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0xac>
 8001c68:	e005      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c6c:	617b      	str	r3, [r7, #20]
      break;
 8001c6e:	e005      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c70:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c72:	617b      	str	r3, [r7, #20]
      break;
 8001c74:	e002      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	617b      	str	r3, [r7, #20]
      break;
 8001c7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	3301      	adds	r3, #1
 8001c88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	fb03 f202 	mul.w	r2, r3, r2
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	0e5b      	lsrs	r3, r3, #25
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	3301      	adds	r3, #1
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cbc:	69bb      	ldr	r3, [r7, #24]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	; 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	08006728 	.word	0x08006728
 8001cd4:	00f42400 	.word	0x00f42400
 8001cd8:	007a1200 	.word	0x007a1200

08001cdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000000 	.word	0x20000000

08001cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cf8:	f7ff fff0 	bl	8001cdc <HAL_RCC_GetHCLKFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	4904      	ldr	r1, [pc, #16]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	08006720 	.word	0x08006720

08001d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d24:	f7ff ffda 	bl	8001cdc <HAL_RCC_GetHCLKFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	0adb      	lsrs	r3, r3, #11
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	4904      	ldr	r1, [pc, #16]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000
 8001d48:	08006720 	.word	0x08006720

08001d4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d58:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d64:	f7ff f9ee 	bl	8001144 <HAL_PWREx_GetVoltageRange>
 8001d68:	6178      	str	r0, [r7, #20]
 8001d6a:	e014      	b.n	8001d96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d6c:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d76:	6593      	str	r3, [r2, #88]	; 0x58
 8001d78:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d84:	f7ff f9de 	bl	8001144 <HAL_PWREx_GetVoltageRange>
 8001d88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	4a1d      	ldr	r2, [pc, #116]	; (8001e04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d9c:	d10b      	bne.n	8001db6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b80      	cmp	r3, #128	; 0x80
 8001da2:	d919      	bls.n	8001dd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2ba0      	cmp	r3, #160	; 0xa0
 8001da8:	d902      	bls.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001daa:	2302      	movs	r3, #2
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	e013      	b.n	8001dd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001db0:	2301      	movs	r3, #1
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	e010      	b.n	8001dd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b80      	cmp	r3, #128	; 0x80
 8001dba:	d902      	bls.n	8001dc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	e00a      	b.n	8001dd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b80      	cmp	r3, #128	; 0x80
 8001dc6:	d102      	bne.n	8001dce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dc8:	2302      	movs	r3, #2
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	e004      	b.n	8001dd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b70      	cmp	r3, #112	; 0x70
 8001dd2:	d101      	bne.n	8001dd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 0207 	bic.w	r2, r3, #7
 8001de0:	4909      	ldr	r1, [pc, #36]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d001      	beq.n	8001dfa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40022000 	.word	0x40022000

08001e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e14:	2300      	movs	r3, #0
 8001e16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e18:	2300      	movs	r3, #0
 8001e1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d041      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e30:	d02a      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e36:	d824      	bhi.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e3c:	d008      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e42:	d81e      	bhi.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e4c:	d010      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e4e:	e018      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e50:	4b86      	ldr	r3, [pc, #536]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4a85      	ldr	r2, [pc, #532]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e5c:	e015      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 fabb 	bl	80023e0 <RCCEx_PLLSAI1_Config>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e6e:	e00c      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3320      	adds	r3, #32
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fba6 	bl	80025c8 <RCCEx_PLLSAI2_Config>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e80:	e003      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	74fb      	strb	r3, [r7, #19]
      break;
 8001e86:	e000      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e8a:	7cfb      	ldrb	r3, [r7, #19]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e90:	4b76      	ldr	r3, [pc, #472]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e9e:	4973      	ldr	r1, [pc, #460]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ea6:	e001      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ea8:	7cfb      	ldrb	r3, [r7, #19]
 8001eaa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d041      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ebc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ec0:	d02a      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ec2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ec6:	d824      	bhi.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ec8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ecc:	d008      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ed2:	d81e      	bhi.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00a      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001edc:	d010      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ede:	e018      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ee0:	4b62      	ldr	r3, [pc, #392]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4a61      	ldr	r2, [pc, #388]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001eec:	e015      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 fa73 	bl	80023e0 <RCCEx_PLLSAI1_Config>
 8001efa:	4603      	mov	r3, r0
 8001efc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001efe:	e00c      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3320      	adds	r3, #32
 8001f04:	2100      	movs	r1, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fb5e 	bl	80025c8 <RCCEx_PLLSAI2_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f10:	e003      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	74fb      	strb	r3, [r7, #19]
      break;
 8001f16:	e000      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f1a:	7cfb      	ldrb	r3, [r7, #19]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10b      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f20:	4b52      	ldr	r3, [pc, #328]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f2e:	494f      	ldr	r1, [pc, #316]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f36:	e001      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f38:	7cfb      	ldrb	r3, [r7, #19]
 8001f3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80a0 	beq.w	800208a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00d      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	4b41      	ldr	r3, [pc, #260]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	4a40      	ldr	r2, [pc, #256]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f70:	4b3e      	ldr	r3, [pc, #248]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f80:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a3a      	ldr	r2, [pc, #232]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f8c:	f7fe fdfa 	bl	8000b84 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f92:	e009      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f94:	f7fe fdf6 	bl	8000b84 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d902      	bls.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	74fb      	strb	r3, [r7, #19]
        break;
 8001fa6:	e005      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fa8:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ef      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fb4:	7cfb      	ldrb	r3, [r7, #19]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d15c      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fba:	4b2c      	ldr	r3, [pc, #176]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01f      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d019      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fd8:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fe4:	4b21      	ldr	r3, [pc, #132]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fea:	4a20      	ldr	r2, [pc, #128]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffa:	4a1c      	ldr	r2, [pc, #112]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002004:	4a19      	ldr	r2, [pc, #100]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d016      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7fe fdb5 	bl	8000b84 <HAL_GetTick>
 800201a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800201c:	e00b      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7fe fdb1 	bl	8000b84 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d902      	bls.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	74fb      	strb	r3, [r7, #19]
            break;
 8002034:	e006      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0ec      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002044:	7cfb      	ldrb	r3, [r7, #19]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800205a:	4904      	ldr	r1, [pc, #16]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002062:	e009      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	74bb      	strb	r3, [r7, #18]
 8002068:	e006      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002078:	7c7b      	ldrb	r3, [r7, #17]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d105      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207e:	4b9e      	ldr	r3, [pc, #632]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	4a9d      	ldr	r2, [pc, #628]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002088:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002096:	4b98      	ldr	r3, [pc, #608]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209c:	f023 0203 	bic.w	r2, r3, #3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a4:	4994      	ldr	r1, [pc, #592]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020b8:	4b8f      	ldr	r3, [pc, #572]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	f023 020c 	bic.w	r2, r3, #12
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c6:	498c      	ldr	r1, [pc, #560]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020da:	4b87      	ldr	r3, [pc, #540]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	4983      	ldr	r1, [pc, #524]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020fc:	4b7e      	ldr	r3, [pc, #504]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	497b      	ldr	r1, [pc, #492]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800211e:	4b76      	ldr	r3, [pc, #472]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212c:	4972      	ldr	r1, [pc, #456]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0320 	and.w	r3, r3, #32
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002140:	4b6d      	ldr	r3, [pc, #436]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	496a      	ldr	r1, [pc, #424]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002162:	4b65      	ldr	r3, [pc, #404]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002168:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	4961      	ldr	r1, [pc, #388]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002184:	4b5c      	ldr	r3, [pc, #368]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002192:	4959      	ldr	r1, [pc, #356]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021a6:	4b54      	ldr	r3, [pc, #336]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b4:	4950      	ldr	r1, [pc, #320]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021c8:	4b4b      	ldr	r3, [pc, #300]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	4948      	ldr	r1, [pc, #288]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021ea:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	493f      	ldr	r1, [pc, #252]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d028      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800220c:	4b3a      	ldr	r3, [pc, #232]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800221a:	4937      	ldr	r1, [pc, #220]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800222a:	d106      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800222c:	4b32      	ldr	r3, [pc, #200]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a31      	ldr	r2, [pc, #196]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002236:	60d3      	str	r3, [r2, #12]
 8002238:	e011      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800223e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002242:	d10c      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3304      	adds	r3, #4
 8002248:	2101      	movs	r1, #1
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f8c8 	bl	80023e0 <RCCEx_PLLSAI1_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d028      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002270:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	491f      	ldr	r1, [pc, #124]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002288:	d106      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	4a1a      	ldr	r2, [pc, #104]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002294:	60d3      	str	r3, [r2, #12]
 8002296:	e011      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3304      	adds	r3, #4
 80022a6:	2101      	movs	r1, #1
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f899 	bl	80023e0 <RCCEx_PLLSAI1_Config>
 80022ae:	4603      	mov	r3, r0
 80022b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022b2:	7cfb      	ldrb	r3, [r7, #19]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d02b      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d6:	4908      	ldr	r1, [pc, #32]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022e6:	d109      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4a02      	ldr	r2, [pc, #8]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f2:	60d3      	str	r3, [r2, #12]
 80022f4:	e014      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002300:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002304:	d10c      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3304      	adds	r3, #4
 800230a:	2101      	movs	r1, #1
 800230c:	4618      	mov	r0, r3
 800230e:	f000 f867 	bl	80023e0 <RCCEx_PLLSAI1_Config>
 8002312:	4603      	mov	r3, r0
 8002314:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d02f      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800232c:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800233a:	4928      	ldr	r1, [pc, #160]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002346:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800234a:	d10d      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3304      	adds	r3, #4
 8002350:	2102      	movs	r1, #2
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f844 	bl	80023e0 <RCCEx_PLLSAI1_Config>
 8002358:	4603      	mov	r3, r0
 800235a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800235c:	7cfb      	ldrb	r3, [r7, #19]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d014      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002362:	7cfb      	ldrb	r3, [r7, #19]
 8002364:	74bb      	strb	r3, [r7, #18]
 8002366:	e011      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800236c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002370:	d10c      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3320      	adds	r3, #32
 8002376:	2102      	movs	r1, #2
 8002378:	4618      	mov	r0, r3
 800237a:	f000 f925 	bl	80025c8 <RCCEx_PLLSAI2_Config>
 800237e:	4603      	mov	r3, r0
 8002380:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002382:	7cfb      	ldrb	r3, [r7, #19]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002398:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023a6:	490d      	ldr	r1, [pc, #52]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ca:	4904      	ldr	r1, [pc, #16]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000

080023e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023ee:	4b75      	ldr	r3, [pc, #468]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d018      	beq.n	800242c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023fa:	4b72      	ldr	r3, [pc, #456]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f003 0203 	and.w	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d10d      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
       ||
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002412:	4b6c      	ldr	r3, [pc, #432]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
       ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d047      	beq.n	80024b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
 800242a:	e044      	b.n	80024b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b03      	cmp	r3, #3
 8002432:	d018      	beq.n	8002466 <RCCEx_PLLSAI1_Config+0x86>
 8002434:	2b03      	cmp	r3, #3
 8002436:	d825      	bhi.n	8002484 <RCCEx_PLLSAI1_Config+0xa4>
 8002438:	2b01      	cmp	r3, #1
 800243a:	d002      	beq.n	8002442 <RCCEx_PLLSAI1_Config+0x62>
 800243c:	2b02      	cmp	r3, #2
 800243e:	d009      	beq.n	8002454 <RCCEx_PLLSAI1_Config+0x74>
 8002440:	e020      	b.n	8002484 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002442:	4b60      	ldr	r3, [pc, #384]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d11d      	bne.n	800248a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002452:	e01a      	b.n	800248a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002454:	4b5b      	ldr	r3, [pc, #364]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d116      	bne.n	800248e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002464:	e013      	b.n	800248e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002466:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10f      	bne.n	8002492 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002472:	4b54      	ldr	r3, [pc, #336]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002482:	e006      	b.n	8002492 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
      break;
 8002488:	e004      	b.n	8002494 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800248a:	bf00      	nop
 800248c:	e002      	b.n	8002494 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800248e:	bf00      	nop
 8002490:	e000      	b.n	8002494 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002492:	bf00      	nop
    }

    if(status == HAL_OK)
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10d      	bne.n	80024b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800249a:	4b4a      	ldr	r3, [pc, #296]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6819      	ldr	r1, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	430b      	orrs	r3, r1
 80024b0:	4944      	ldr	r1, [pc, #272]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d17d      	bne.n	80025b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024bc:	4b41      	ldr	r3, [pc, #260]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a40      	ldr	r2, [pc, #256]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c8:	f7fe fb5c 	bl	8000b84 <HAL_GetTick>
 80024cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ce:	e009      	b.n	80024e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024d0:	f7fe fb58 	bl	8000b84 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d902      	bls.n	80024e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	73fb      	strb	r3, [r7, #15]
        break;
 80024e2:	e005      	b.n	80024f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024e4:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ef      	bne.n	80024d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d160      	bne.n	80025b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d111      	bne.n	8002520 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024fc:	4b31      	ldr	r3, [pc, #196]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6892      	ldr	r2, [r2, #8]
 800250c:	0211      	lsls	r1, r2, #8
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68d2      	ldr	r2, [r2, #12]
 8002512:	0912      	lsrs	r2, r2, #4
 8002514:	0452      	lsls	r2, r2, #17
 8002516:	430a      	orrs	r2, r1
 8002518:	492a      	ldr	r1, [pc, #168]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	610b      	str	r3, [r1, #16]
 800251e:	e027      	b.n	8002570 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d112      	bne.n	800254c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002526:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800252e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6892      	ldr	r2, [r2, #8]
 8002536:	0211      	lsls	r1, r2, #8
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6912      	ldr	r2, [r2, #16]
 800253c:	0852      	lsrs	r2, r2, #1
 800253e:	3a01      	subs	r2, #1
 8002540:	0552      	lsls	r2, r2, #21
 8002542:	430a      	orrs	r2, r1
 8002544:	491f      	ldr	r1, [pc, #124]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	610b      	str	r3, [r1, #16]
 800254a:	e011      	b.n	8002570 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002554:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6892      	ldr	r2, [r2, #8]
 800255c:	0211      	lsls	r1, r2, #8
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6952      	ldr	r2, [r2, #20]
 8002562:	0852      	lsrs	r2, r2, #1
 8002564:	3a01      	subs	r2, #1
 8002566:	0652      	lsls	r2, r2, #25
 8002568:	430a      	orrs	r2, r1
 800256a:	4916      	ldr	r1, [pc, #88]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002576:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800257a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257c:	f7fe fb02 	bl	8000b84 <HAL_GetTick>
 8002580:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002582:	e009      	b.n	8002598 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002584:	f7fe fafe 	bl	8000b84 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d902      	bls.n	8002598 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	73fb      	strb	r3, [r7, #15]
          break;
 8002596:	e005      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ef      	beq.n	8002584 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	4904      	ldr	r1, [pc, #16]	; (80025c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000

080025c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025d6:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d018      	beq.n	8002614 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025e2:	4b67      	ldr	r3, [pc, #412]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0203 	and.w	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d10d      	bne.n	800260e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
       ||
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025fa:	4b61      	ldr	r3, [pc, #388]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
       ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d047      	beq.n	800269e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	e044      	b.n	800269e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d018      	beq.n	800264e <RCCEx_PLLSAI2_Config+0x86>
 800261c:	2b03      	cmp	r3, #3
 800261e:	d825      	bhi.n	800266c <RCCEx_PLLSAI2_Config+0xa4>
 8002620:	2b01      	cmp	r3, #1
 8002622:	d002      	beq.n	800262a <RCCEx_PLLSAI2_Config+0x62>
 8002624:	2b02      	cmp	r3, #2
 8002626:	d009      	beq.n	800263c <RCCEx_PLLSAI2_Config+0x74>
 8002628:	e020      	b.n	800266c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800262a:	4b55      	ldr	r3, [pc, #340]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d11d      	bne.n	8002672 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800263a:	e01a      	b.n	8002672 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800263c:	4b50      	ldr	r3, [pc, #320]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002644:	2b00      	cmp	r3, #0
 8002646:	d116      	bne.n	8002676 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264c:	e013      	b.n	8002676 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800264e:	4b4c      	ldr	r3, [pc, #304]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10f      	bne.n	800267a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800265a:	4b49      	ldr	r3, [pc, #292]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800266a:	e006      	b.n	800267a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
      break;
 8002670:	e004      	b.n	800267c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002672:	bf00      	nop
 8002674:	e002      	b.n	800267c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002676:	bf00      	nop
 8002678:	e000      	b.n	800267c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800267a:	bf00      	nop
    }

    if(status == HAL_OK)
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10d      	bne.n	800269e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002682:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6819      	ldr	r1, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	430b      	orrs	r3, r1
 8002698:	4939      	ldr	r1, [pc, #228]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269a:	4313      	orrs	r3, r2
 800269c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d167      	bne.n	8002774 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026a4:	4b36      	ldr	r3, [pc, #216]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a35      	ldr	r2, [pc, #212]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b0:	f7fe fa68 	bl	8000b84 <HAL_GetTick>
 80026b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026b6:	e009      	b.n	80026cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026b8:	f7fe fa64 	bl	8000b84 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d902      	bls.n	80026cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	73fb      	strb	r3, [r7, #15]
        break;
 80026ca:	e005      	b.n	80026d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026cc:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ef      	bne.n	80026b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d14a      	bne.n	8002774 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d111      	bne.n	8002708 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026e4:	4b26      	ldr	r3, [pc, #152]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6892      	ldr	r2, [r2, #8]
 80026f4:	0211      	lsls	r1, r2, #8
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68d2      	ldr	r2, [r2, #12]
 80026fa:	0912      	lsrs	r2, r2, #4
 80026fc:	0452      	lsls	r2, r2, #17
 80026fe:	430a      	orrs	r2, r1
 8002700:	491f      	ldr	r1, [pc, #124]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002702:	4313      	orrs	r3, r2
 8002704:	614b      	str	r3, [r1, #20]
 8002706:	e011      	b.n	800272c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002710:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6892      	ldr	r2, [r2, #8]
 8002718:	0211      	lsls	r1, r2, #8
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6912      	ldr	r2, [r2, #16]
 800271e:	0852      	lsrs	r2, r2, #1
 8002720:	3a01      	subs	r2, #1
 8002722:	0652      	lsls	r2, r2, #25
 8002724:	430a      	orrs	r2, r1
 8002726:	4916      	ldr	r1, [pc, #88]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002728:	4313      	orrs	r3, r2
 800272a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a13      	ldr	r2, [pc, #76]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7fe fa24 	bl	8000b84 <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800273e:	e009      	b.n	8002754 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002740:	f7fe fa20 	bl	8000b84 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d902      	bls.n	8002754 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	73fb      	strb	r3, [r7, #15]
          break;
 8002752:	e005      	b.n	8002760 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ef      	beq.n	8002740 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	4904      	ldr	r1, [pc, #16]	; (8002780 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002770:	4313      	orrs	r3, r2
 8002772:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000

08002784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e049      	b.n	800282a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe f888 	bl	80008c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3304      	adds	r3, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f000 f96a 	bl	8002a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d01b      	beq.n	8002896 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f06f 0202 	mvn.w	r2, #2
 8002866:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f8ee 	bl	8002a5e <HAL_TIM_IC_CaptureCallback>
 8002882:	e005      	b.n	8002890 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f8e0 	bl	8002a4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f8f1 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d01b      	beq.n	80028e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f06f 0204 	mvn.w	r2, #4
 80028b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f8c8 	bl	8002a5e <HAL_TIM_IC_CaptureCallback>
 80028ce:	e005      	b.n	80028dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f8ba 	bl	8002a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f8cb 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d020      	beq.n	800292e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d01b      	beq.n	800292e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f06f 0208 	mvn.w	r2, #8
 80028fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2204      	movs	r2, #4
 8002904:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f8a2 	bl	8002a5e <HAL_TIM_IC_CaptureCallback>
 800291a:	e005      	b.n	8002928 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f894 	bl	8002a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f8a5 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01b      	beq.n	800297a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f06f 0210 	mvn.w	r2, #16
 800294a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2208      	movs	r2, #8
 8002950:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f87c 	bl	8002a5e <HAL_TIM_IC_CaptureCallback>
 8002966:	e005      	b.n	8002974 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f86e 	bl	8002a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f87f 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00c      	beq.n	800299e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f06f 0201 	mvn.w	r2, #1
 8002996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f84c 	bl	8002a36 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00c      	beq.n	80029c2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f999 	bl	8002cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00c      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d007      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f991 	bl	8002d08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00c      	beq.n	8002a0a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f83e 	bl	8002a86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00c      	beq.n	8002a2e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f06f 0220 	mvn.w	r2, #32
 8002a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f959 	bl	8002ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a40      	ldr	r2, [pc, #256]	; (8002bb0 <TIM_Base_SetConfig+0x114>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d013      	beq.n	8002adc <TIM_Base_SetConfig+0x40>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aba:	d00f      	beq.n	8002adc <TIM_Base_SetConfig+0x40>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a3d      	ldr	r2, [pc, #244]	; (8002bb4 <TIM_Base_SetConfig+0x118>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00b      	beq.n	8002adc <TIM_Base_SetConfig+0x40>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a3c      	ldr	r2, [pc, #240]	; (8002bb8 <TIM_Base_SetConfig+0x11c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d007      	beq.n	8002adc <TIM_Base_SetConfig+0x40>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a3b      	ldr	r2, [pc, #236]	; (8002bbc <TIM_Base_SetConfig+0x120>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d003      	beq.n	8002adc <TIM_Base_SetConfig+0x40>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a3a      	ldr	r2, [pc, #232]	; (8002bc0 <TIM_Base_SetConfig+0x124>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d108      	bne.n	8002aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a2f      	ldr	r2, [pc, #188]	; (8002bb0 <TIM_Base_SetConfig+0x114>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01f      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afc:	d01b      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a2c      	ldr	r2, [pc, #176]	; (8002bb4 <TIM_Base_SetConfig+0x118>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d017      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a2b      	ldr	r2, [pc, #172]	; (8002bb8 <TIM_Base_SetConfig+0x11c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d013      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a2a      	ldr	r2, [pc, #168]	; (8002bbc <TIM_Base_SetConfig+0x120>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00f      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a29      	ldr	r2, [pc, #164]	; (8002bc0 <TIM_Base_SetConfig+0x124>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00b      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a28      	ldr	r2, [pc, #160]	; (8002bc4 <TIM_Base_SetConfig+0x128>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d007      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a27      	ldr	r2, [pc, #156]	; (8002bc8 <TIM_Base_SetConfig+0x12c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d003      	beq.n	8002b36 <TIM_Base_SetConfig+0x9a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a26      	ldr	r2, [pc, #152]	; (8002bcc <TIM_Base_SetConfig+0x130>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d108      	bne.n	8002b48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a10      	ldr	r2, [pc, #64]	; (8002bb0 <TIM_Base_SetConfig+0x114>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00f      	beq.n	8002b94 <TIM_Base_SetConfig+0xf8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <TIM_Base_SetConfig+0x124>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00b      	beq.n	8002b94 <TIM_Base_SetConfig+0xf8>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a11      	ldr	r2, [pc, #68]	; (8002bc4 <TIM_Base_SetConfig+0x128>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <TIM_Base_SetConfig+0xf8>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a10      	ldr	r2, [pc, #64]	; (8002bc8 <TIM_Base_SetConfig+0x12c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d003      	beq.n	8002b94 <TIM_Base_SetConfig+0xf8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a0f      	ldr	r2, [pc, #60]	; (8002bcc <TIM_Base_SetConfig+0x130>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d103      	bne.n	8002b9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	615a      	str	r2, [r3, #20]
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40012c00 	.word	0x40012c00
 8002bb4:	40000400 	.word	0x40000400
 8002bb8:	40000800 	.word	0x40000800
 8002bbc:	40000c00 	.word	0x40000c00
 8002bc0:	40013400 	.word	0x40013400
 8002bc4:	40014000 	.word	0x40014000
 8002bc8:	40014400 	.word	0x40014400
 8002bcc:	40014800 	.word	0x40014800

08002bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e068      	b.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a2e      	ldr	r2, [pc, #184]	; (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2d      	ldr	r2, [pc, #180]	; (8002ccc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d108      	bne.n	8002c2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01d      	beq.n	8002c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5a:	d018      	beq.n	8002c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a1b      	ldr	r2, [pc, #108]	; (8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1a      	ldr	r2, [pc, #104]	; (8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00e      	beq.n	8002c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d009      	beq.n	8002c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a13      	ldr	r2, [pc, #76]	; (8002ccc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a14      	ldr	r2, [pc, #80]	; (8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40012c00 	.word	0x40012c00
 8002ccc:	40013400 	.word	0x40013400
 8002cd0:	40000400 	.word	0x40000400
 8002cd4:	40000800 	.word	0x40000800
 8002cd8:	40000c00 	.word	0x40000c00
 8002cdc:	40014000 	.word	0x40014000

08002ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e040      	b.n	8002db0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fd fde4 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2224      	movs	r2, #36	; 0x24
 8002d48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fae0 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f825 	bl	8002db8 <UART_SetConfig>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e01b      	b.n	8002db0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fb5f 	bl	800346c <UART_CheckIdleState>
 8002dae:	4603      	mov	r3, r0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dbc:	b08a      	sub	sp, #40	; 0x28
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4ba4      	ldr	r3, [pc, #656]	; (8003078 <UART_SetConfig+0x2c0>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df0:	430b      	orrs	r3, r1
 8002df2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a99      	ldr	r2, [pc, #612]	; (800307c <UART_SetConfig+0x2c4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d004      	beq.n	8002e24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e20:	4313      	orrs	r3, r2
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e34:	430a      	orrs	r2, r1
 8002e36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a90      	ldr	r2, [pc, #576]	; (8003080 <UART_SetConfig+0x2c8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d126      	bne.n	8002e90 <UART_SetConfig+0xd8>
 8002e42:	4b90      	ldr	r3, [pc, #576]	; (8003084 <UART_SetConfig+0x2cc>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d81b      	bhi.n	8002e88 <UART_SetConfig+0xd0>
 8002e50:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <UART_SetConfig+0xa0>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002e69 	.word	0x08002e69
 8002e5c:	08002e79 	.word	0x08002e79
 8002e60:	08002e71 	.word	0x08002e71
 8002e64:	08002e81 	.word	0x08002e81
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e6e:	e116      	b.n	800309e <UART_SetConfig+0x2e6>
 8002e70:	2302      	movs	r3, #2
 8002e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e76:	e112      	b.n	800309e <UART_SetConfig+0x2e6>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e7e:	e10e      	b.n	800309e <UART_SetConfig+0x2e6>
 8002e80:	2308      	movs	r3, #8
 8002e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e86:	e10a      	b.n	800309e <UART_SetConfig+0x2e6>
 8002e88:	2310      	movs	r3, #16
 8002e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e8e:	e106      	b.n	800309e <UART_SetConfig+0x2e6>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a7c      	ldr	r2, [pc, #496]	; (8003088 <UART_SetConfig+0x2d0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d138      	bne.n	8002f0c <UART_SetConfig+0x154>
 8002e9a:	4b7a      	ldr	r3, [pc, #488]	; (8003084 <UART_SetConfig+0x2cc>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b0c      	cmp	r3, #12
 8002ea6:	d82d      	bhi.n	8002f04 <UART_SetConfig+0x14c>
 8002ea8:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <UART_SetConfig+0xf8>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08002ee5 	.word	0x08002ee5
 8002eb4:	08002f05 	.word	0x08002f05
 8002eb8:	08002f05 	.word	0x08002f05
 8002ebc:	08002f05 	.word	0x08002f05
 8002ec0:	08002ef5 	.word	0x08002ef5
 8002ec4:	08002f05 	.word	0x08002f05
 8002ec8:	08002f05 	.word	0x08002f05
 8002ecc:	08002f05 	.word	0x08002f05
 8002ed0:	08002eed 	.word	0x08002eed
 8002ed4:	08002f05 	.word	0x08002f05
 8002ed8:	08002f05 	.word	0x08002f05
 8002edc:	08002f05 	.word	0x08002f05
 8002ee0:	08002efd 	.word	0x08002efd
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eea:	e0d8      	b.n	800309e <UART_SetConfig+0x2e6>
 8002eec:	2302      	movs	r3, #2
 8002eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ef2:	e0d4      	b.n	800309e <UART_SetConfig+0x2e6>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002efa:	e0d0      	b.n	800309e <UART_SetConfig+0x2e6>
 8002efc:	2308      	movs	r3, #8
 8002efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f02:	e0cc      	b.n	800309e <UART_SetConfig+0x2e6>
 8002f04:	2310      	movs	r3, #16
 8002f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f0a:	e0c8      	b.n	800309e <UART_SetConfig+0x2e6>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a5e      	ldr	r2, [pc, #376]	; (800308c <UART_SetConfig+0x2d4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d125      	bne.n	8002f62 <UART_SetConfig+0x1aa>
 8002f16:	4b5b      	ldr	r3, [pc, #364]	; (8003084 <UART_SetConfig+0x2cc>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f20:	2b30      	cmp	r3, #48	; 0x30
 8002f22:	d016      	beq.n	8002f52 <UART_SetConfig+0x19a>
 8002f24:	2b30      	cmp	r3, #48	; 0x30
 8002f26:	d818      	bhi.n	8002f5a <UART_SetConfig+0x1a2>
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d00a      	beq.n	8002f42 <UART_SetConfig+0x18a>
 8002f2c:	2b20      	cmp	r3, #32
 8002f2e:	d814      	bhi.n	8002f5a <UART_SetConfig+0x1a2>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <UART_SetConfig+0x182>
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d008      	beq.n	8002f4a <UART_SetConfig+0x192>
 8002f38:	e00f      	b.n	8002f5a <UART_SetConfig+0x1a2>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f40:	e0ad      	b.n	800309e <UART_SetConfig+0x2e6>
 8002f42:	2302      	movs	r3, #2
 8002f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f48:	e0a9      	b.n	800309e <UART_SetConfig+0x2e6>
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f50:	e0a5      	b.n	800309e <UART_SetConfig+0x2e6>
 8002f52:	2308      	movs	r3, #8
 8002f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f58:	e0a1      	b.n	800309e <UART_SetConfig+0x2e6>
 8002f5a:	2310      	movs	r3, #16
 8002f5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f60:	e09d      	b.n	800309e <UART_SetConfig+0x2e6>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a4a      	ldr	r2, [pc, #296]	; (8003090 <UART_SetConfig+0x2d8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d125      	bne.n	8002fb8 <UART_SetConfig+0x200>
 8002f6c:	4b45      	ldr	r3, [pc, #276]	; (8003084 <UART_SetConfig+0x2cc>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f76:	2bc0      	cmp	r3, #192	; 0xc0
 8002f78:	d016      	beq.n	8002fa8 <UART_SetConfig+0x1f0>
 8002f7a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f7c:	d818      	bhi.n	8002fb0 <UART_SetConfig+0x1f8>
 8002f7e:	2b80      	cmp	r3, #128	; 0x80
 8002f80:	d00a      	beq.n	8002f98 <UART_SetConfig+0x1e0>
 8002f82:	2b80      	cmp	r3, #128	; 0x80
 8002f84:	d814      	bhi.n	8002fb0 <UART_SetConfig+0x1f8>
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <UART_SetConfig+0x1d8>
 8002f8a:	2b40      	cmp	r3, #64	; 0x40
 8002f8c:	d008      	beq.n	8002fa0 <UART_SetConfig+0x1e8>
 8002f8e:	e00f      	b.n	8002fb0 <UART_SetConfig+0x1f8>
 8002f90:	2300      	movs	r3, #0
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f96:	e082      	b.n	800309e <UART_SetConfig+0x2e6>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f9e:	e07e      	b.n	800309e <UART_SetConfig+0x2e6>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fa6:	e07a      	b.n	800309e <UART_SetConfig+0x2e6>
 8002fa8:	2308      	movs	r3, #8
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fae:	e076      	b.n	800309e <UART_SetConfig+0x2e6>
 8002fb0:	2310      	movs	r3, #16
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb6:	e072      	b.n	800309e <UART_SetConfig+0x2e6>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a35      	ldr	r2, [pc, #212]	; (8003094 <UART_SetConfig+0x2dc>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d12a      	bne.n	8003018 <UART_SetConfig+0x260>
 8002fc2:	4b30      	ldr	r3, [pc, #192]	; (8003084 <UART_SetConfig+0x2cc>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fd0:	d01a      	beq.n	8003008 <UART_SetConfig+0x250>
 8002fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fd6:	d81b      	bhi.n	8003010 <UART_SetConfig+0x258>
 8002fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fdc:	d00c      	beq.n	8002ff8 <UART_SetConfig+0x240>
 8002fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe2:	d815      	bhi.n	8003010 <UART_SetConfig+0x258>
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <UART_SetConfig+0x238>
 8002fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fec:	d008      	beq.n	8003000 <UART_SetConfig+0x248>
 8002fee:	e00f      	b.n	8003010 <UART_SetConfig+0x258>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff6:	e052      	b.n	800309e <UART_SetConfig+0x2e6>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ffe:	e04e      	b.n	800309e <UART_SetConfig+0x2e6>
 8003000:	2304      	movs	r3, #4
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003006:	e04a      	b.n	800309e <UART_SetConfig+0x2e6>
 8003008:	2308      	movs	r3, #8
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300e:	e046      	b.n	800309e <UART_SetConfig+0x2e6>
 8003010:	2310      	movs	r3, #16
 8003012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003016:	e042      	b.n	800309e <UART_SetConfig+0x2e6>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a17      	ldr	r2, [pc, #92]	; (800307c <UART_SetConfig+0x2c4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d13a      	bne.n	8003098 <UART_SetConfig+0x2e0>
 8003022:	4b18      	ldr	r3, [pc, #96]	; (8003084 <UART_SetConfig+0x2cc>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003028:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800302c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003030:	d01a      	beq.n	8003068 <UART_SetConfig+0x2b0>
 8003032:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003036:	d81b      	bhi.n	8003070 <UART_SetConfig+0x2b8>
 8003038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800303c:	d00c      	beq.n	8003058 <UART_SetConfig+0x2a0>
 800303e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003042:	d815      	bhi.n	8003070 <UART_SetConfig+0x2b8>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <UART_SetConfig+0x298>
 8003048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304c:	d008      	beq.n	8003060 <UART_SetConfig+0x2a8>
 800304e:	e00f      	b.n	8003070 <UART_SetConfig+0x2b8>
 8003050:	2300      	movs	r3, #0
 8003052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003056:	e022      	b.n	800309e <UART_SetConfig+0x2e6>
 8003058:	2302      	movs	r3, #2
 800305a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800305e:	e01e      	b.n	800309e <UART_SetConfig+0x2e6>
 8003060:	2304      	movs	r3, #4
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003066:	e01a      	b.n	800309e <UART_SetConfig+0x2e6>
 8003068:	2308      	movs	r3, #8
 800306a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306e:	e016      	b.n	800309e <UART_SetConfig+0x2e6>
 8003070:	2310      	movs	r3, #16
 8003072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003076:	e012      	b.n	800309e <UART_SetConfig+0x2e6>
 8003078:	efff69f3 	.word	0xefff69f3
 800307c:	40008000 	.word	0x40008000
 8003080:	40013800 	.word	0x40013800
 8003084:	40021000 	.word	0x40021000
 8003088:	40004400 	.word	0x40004400
 800308c:	40004800 	.word	0x40004800
 8003090:	40004c00 	.word	0x40004c00
 8003094:	40005000 	.word	0x40005000
 8003098:	2310      	movs	r3, #16
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a9f      	ldr	r2, [pc, #636]	; (8003320 <UART_SetConfig+0x568>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d17a      	bne.n	800319e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d824      	bhi.n	80030fa <UART_SetConfig+0x342>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <UART_SetConfig+0x300>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	080030dd 	.word	0x080030dd
 80030bc:	080030fb 	.word	0x080030fb
 80030c0:	080030e5 	.word	0x080030e5
 80030c4:	080030fb 	.word	0x080030fb
 80030c8:	080030eb 	.word	0x080030eb
 80030cc:	080030fb 	.word	0x080030fb
 80030d0:	080030fb 	.word	0x080030fb
 80030d4:	080030fb 	.word	0x080030fb
 80030d8:	080030f3 	.word	0x080030f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030dc:	f7fe fe0a 	bl	8001cf4 <HAL_RCC_GetPCLK1Freq>
 80030e0:	61f8      	str	r0, [r7, #28]
        break;
 80030e2:	e010      	b.n	8003106 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030e4:	4b8f      	ldr	r3, [pc, #572]	; (8003324 <UART_SetConfig+0x56c>)
 80030e6:	61fb      	str	r3, [r7, #28]
        break;
 80030e8:	e00d      	b.n	8003106 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ea:	f7fe fd6b 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 80030ee:	61f8      	str	r0, [r7, #28]
        break;
 80030f0:	e009      	b.n	8003106 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030f6:	61fb      	str	r3, [r7, #28]
        break;
 80030f8:	e005      	b.n	8003106 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003104:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80fb 	beq.w	8003304 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	429a      	cmp	r2, r3
 800311c:	d305      	bcc.n	800312a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	429a      	cmp	r2, r3
 8003128:	d903      	bls.n	8003132 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003130:	e0e8      	b.n	8003304 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	2200      	movs	r2, #0
 8003136:	461c      	mov	r4, r3
 8003138:	4615      	mov	r5, r2
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	022b      	lsls	r3, r5, #8
 8003144:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003148:	0222      	lsls	r2, r4, #8
 800314a:	68f9      	ldr	r1, [r7, #12]
 800314c:	6849      	ldr	r1, [r1, #4]
 800314e:	0849      	lsrs	r1, r1, #1
 8003150:	2000      	movs	r0, #0
 8003152:	4688      	mov	r8, r1
 8003154:	4681      	mov	r9, r0
 8003156:	eb12 0a08 	adds.w	sl, r2, r8
 800315a:	eb43 0b09 	adc.w	fp, r3, r9
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800316c:	4650      	mov	r0, sl
 800316e:	4659      	mov	r1, fp
 8003170:	f7fd f82e 	bl	80001d0 <__aeabi_uldivmod>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4613      	mov	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003182:	d308      	bcc.n	8003196 <UART_SetConfig+0x3de>
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800318a:	d204      	bcs.n	8003196 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	60da      	str	r2, [r3, #12]
 8003194:	e0b6      	b.n	8003304 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800319c:	e0b2      	b.n	8003304 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a6:	d15e      	bne.n	8003266 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80031a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d828      	bhi.n	8003202 <UART_SetConfig+0x44a>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <UART_SetConfig+0x400>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	080031dd 	.word	0x080031dd
 80031bc:	080031e5 	.word	0x080031e5
 80031c0:	080031ed 	.word	0x080031ed
 80031c4:	08003203 	.word	0x08003203
 80031c8:	080031f3 	.word	0x080031f3
 80031cc:	08003203 	.word	0x08003203
 80031d0:	08003203 	.word	0x08003203
 80031d4:	08003203 	.word	0x08003203
 80031d8:	080031fb 	.word	0x080031fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031dc:	f7fe fd8a 	bl	8001cf4 <HAL_RCC_GetPCLK1Freq>
 80031e0:	61f8      	str	r0, [r7, #28]
        break;
 80031e2:	e014      	b.n	800320e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031e4:	f7fe fd9c 	bl	8001d20 <HAL_RCC_GetPCLK2Freq>
 80031e8:	61f8      	str	r0, [r7, #28]
        break;
 80031ea:	e010      	b.n	800320e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031ec:	4b4d      	ldr	r3, [pc, #308]	; (8003324 <UART_SetConfig+0x56c>)
 80031ee:	61fb      	str	r3, [r7, #28]
        break;
 80031f0:	e00d      	b.n	800320e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031f2:	f7fe fce7 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 80031f6:	61f8      	str	r0, [r7, #28]
        break;
 80031f8:	e009      	b.n	800320e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031fe:	61fb      	str	r3, [r7, #28]
        break;
 8003200:	e005      	b.n	800320e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800320c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d077      	beq.n	8003304 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005a      	lsls	r2, r3, #1
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	085b      	lsrs	r3, r3, #1
 800321e:	441a      	add	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b0f      	cmp	r3, #15
 800322e:	d916      	bls.n	800325e <UART_SetConfig+0x4a6>
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003236:	d212      	bcs.n	800325e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	b29b      	uxth	r3, r3
 800323c:	f023 030f 	bic.w	r3, r3, #15
 8003240:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	b29b      	uxth	r3, r3
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	b29a      	uxth	r2, r3
 800324e:	8afb      	ldrh	r3, [r7, #22]
 8003250:	4313      	orrs	r3, r2
 8003252:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	8afa      	ldrh	r2, [r7, #22]
 800325a:	60da      	str	r2, [r3, #12]
 800325c:	e052      	b.n	8003304 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003264:	e04e      	b.n	8003304 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800326a:	2b08      	cmp	r3, #8
 800326c:	d827      	bhi.n	80032be <UART_SetConfig+0x506>
 800326e:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <UART_SetConfig+0x4bc>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	08003299 	.word	0x08003299
 8003278:	080032a1 	.word	0x080032a1
 800327c:	080032a9 	.word	0x080032a9
 8003280:	080032bf 	.word	0x080032bf
 8003284:	080032af 	.word	0x080032af
 8003288:	080032bf 	.word	0x080032bf
 800328c:	080032bf 	.word	0x080032bf
 8003290:	080032bf 	.word	0x080032bf
 8003294:	080032b7 	.word	0x080032b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003298:	f7fe fd2c 	bl	8001cf4 <HAL_RCC_GetPCLK1Freq>
 800329c:	61f8      	str	r0, [r7, #28]
        break;
 800329e:	e014      	b.n	80032ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032a0:	f7fe fd3e 	bl	8001d20 <HAL_RCC_GetPCLK2Freq>
 80032a4:	61f8      	str	r0, [r7, #28]
        break;
 80032a6:	e010      	b.n	80032ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032a8:	4b1e      	ldr	r3, [pc, #120]	; (8003324 <UART_SetConfig+0x56c>)
 80032aa:	61fb      	str	r3, [r7, #28]
        break;
 80032ac:	e00d      	b.n	80032ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ae:	f7fe fc89 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 80032b2:	61f8      	str	r0, [r7, #28]
        break;
 80032b4:	e009      	b.n	80032ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ba:	61fb      	str	r3, [r7, #28]
        break;
 80032bc:	e005      	b.n	80032ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032c8:	bf00      	nop
    }

    if (pclk != 0U)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d019      	beq.n	8003304 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	085a      	lsrs	r2, r3, #1
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	441a      	add	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b0f      	cmp	r3, #15
 80032e8:	d909      	bls.n	80032fe <UART_SetConfig+0x546>
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f0:	d205      	bcs.n	80032fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	e002      	b.n	8003304 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003310:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003314:	4618      	mov	r0, r3
 8003316:	3728      	adds	r7, #40	; 0x28
 8003318:	46bd      	mov	sp, r7
 800331a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800331e:	bf00      	nop
 8003320:	40008000 	.word	0x40008000
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b098      	sub	sp, #96	; 0x60
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fb82 	bl	8000b84 <HAL_GetTick>
 8003480:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d12e      	bne.n	80034ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f88c 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d021      	beq.n	80034ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b2:	e853 3f00 	ldrex	r3, [r3]
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034be:	653b      	str	r3, [r7, #80]	; 0x50
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034c8:	647b      	str	r3, [r7, #68]	; 0x44
 80034ca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034d0:	e841 2300 	strex	r3, r2, [r1]
 80034d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e6      	bne.n	80034aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e062      	b.n	80035b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d149      	bne.n	8003590 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003504:	2200      	movs	r2, #0
 8003506:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f856 	bl	80035bc <UART_WaitOnFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d03c      	beq.n	8003590 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	e853 3f00 	ldrex	r3, [r3]
 8003522:	623b      	str	r3, [r7, #32]
   return(result);
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800352a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003534:	633b      	str	r3, [r7, #48]	; 0x30
 8003536:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800353a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353c:	e841 2300 	strex	r3, r2, [r1]
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e6      	bne.n	8003516 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3308      	adds	r3, #8
 800354e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	e853 3f00 	ldrex	r3, [r3]
 8003556:	60fb      	str	r3, [r7, #12]
   return(result);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3308      	adds	r3, #8
 8003566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003568:	61fa      	str	r2, [r7, #28]
 800356a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356c:	69b9      	ldr	r1, [r7, #24]
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	e841 2300 	strex	r3, r2, [r1]
 8003574:	617b      	str	r3, [r7, #20]
   return(result);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e5      	bne.n	8003548 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e011      	b.n	80035b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3758      	adds	r7, #88	; 0x58
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035cc:	e049      	b.n	8003662 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d045      	beq.n	8003662 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d6:	f7fd fad5 	bl	8000b84 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d302      	bcc.n	80035ec <UART_WaitOnFlagUntilTimeout+0x30>
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e048      	b.n	8003682 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d031      	beq.n	8003662 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b08      	cmp	r3, #8
 800360a:	d110      	bne.n	800362e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2208      	movs	r2, #8
 8003612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 f838 	bl	800368a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2208      	movs	r2, #8
 800361e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e029      	b.n	8003682 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800363c:	d111      	bne.n	8003662 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f81e 	bl	800368a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e00f      	b.n	8003682 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4013      	ands	r3, r2
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	bf0c      	ite	eq
 8003672:	2301      	moveq	r3, #1
 8003674:	2300      	movne	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	429a      	cmp	r2, r3
 800367e:	d0a6      	beq.n	80035ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800368a:	b480      	push	{r7}
 800368c:	b095      	sub	sp, #84	; 0x54
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369a:	e853 3f00 	ldrex	r3, [r3]
 800369e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b0:	643b      	str	r3, [r7, #64]	; 0x40
 80036b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e6      	bne.n	8003692 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3308      	adds	r3, #8
 80036ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	e853 3f00 	ldrex	r3, [r3]
 80036d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f023 0301 	bic.w	r3, r3, #1
 80036da:	64bb      	str	r3, [r7, #72]	; 0x48
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3308      	adds	r3, #8
 80036e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ec:	e841 2300 	strex	r3, r2, [r1]
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e5      	bne.n	80036c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d118      	bne.n	8003732 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	60bb      	str	r3, [r7, #8]
   return(result);
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f023 0310 	bic.w	r3, r3, #16
 8003714:	647b      	str	r3, [r7, #68]	; 0x44
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003722:	6979      	ldr	r1, [r7, #20]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	e841 2300 	strex	r3, r2, [r1]
 800372a:	613b      	str	r3, [r7, #16]
   return(result);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1e6      	bne.n	8003700 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003746:	bf00      	nop
 8003748:	3754      	adds	r7, #84	; 0x54
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <__NVIC_SetPriority>:
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	6039      	str	r1, [r7, #0]
 800375e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003764:	2b00      	cmp	r3, #0
 8003766:	db0a      	blt.n	800377e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	490c      	ldr	r1, [pc, #48]	; (80037a0 <__NVIC_SetPriority+0x4c>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	0112      	lsls	r2, r2, #4
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	440b      	add	r3, r1
 8003778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800377c:	e00a      	b.n	8003794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	4908      	ldr	r1, [pc, #32]	; (80037a4 <__NVIC_SetPriority+0x50>)
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	3b04      	subs	r3, #4
 800378c:	0112      	lsls	r2, r2, #4
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	440b      	add	r3, r1
 8003792:	761a      	strb	r2, [r3, #24]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000e100 	.word	0xe000e100
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80037ac:	2100      	movs	r1, #0
 80037ae:	f06f 0004 	mvn.w	r0, #4
 80037b2:	f7ff ffcf 	bl	8003754 <__NVIC_SetPriority>
#endif
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037c2:	f3ef 8305 	mrs	r3, IPSR
 80037c6:	603b      	str	r3, [r7, #0]
  return(result);
 80037c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80037ce:	f06f 0305 	mvn.w	r3, #5
 80037d2:	607b      	str	r3, [r7, #4]
 80037d4:	e00c      	b.n	80037f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <osKernelInitialize+0x44>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d105      	bne.n	80037ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80037de:	4b08      	ldr	r3, [pc, #32]	; (8003800 <osKernelInitialize+0x44>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	e002      	b.n	80037f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80037ea:	f04f 33ff 	mov.w	r3, #4294967295
 80037ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037f0:	687b      	ldr	r3, [r7, #4]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	2000012c 	.word	0x2000012c

08003804 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800380a:	f3ef 8305 	mrs	r3, IPSR
 800380e:	603b      	str	r3, [r7, #0]
  return(result);
 8003810:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003816:	f06f 0305 	mvn.w	r3, #5
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	e010      	b.n	8003840 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800381e:	4b0b      	ldr	r3, [pc, #44]	; (800384c <osKernelStart+0x48>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d109      	bne.n	800383a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003826:	f7ff ffbf 	bl	80037a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <osKernelStart+0x48>)
 800382c:	2202      	movs	r2, #2
 800382e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003830:	f001 f9e4 	bl	8004bfc <vTaskStartScheduler>
      stat = osOK;
 8003834:	2300      	movs	r3, #0
 8003836:	607b      	str	r3, [r7, #4]
 8003838:	e002      	b.n	8003840 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800383a:	f04f 33ff 	mov.w	r3, #4294967295
 800383e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003840:	687b      	ldr	r3, [r7, #4]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	2000012c 	.word	0x2000012c

08003850 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003850:	b580      	push	{r7, lr}
 8003852:	b08e      	sub	sp, #56	; 0x38
 8003854:	af04      	add	r7, sp, #16
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003860:	f3ef 8305 	mrs	r3, IPSR
 8003864:	617b      	str	r3, [r7, #20]
  return(result);
 8003866:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003868:	2b00      	cmp	r3, #0
 800386a:	d17e      	bne.n	800396a <osThreadNew+0x11a>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d07b      	beq.n	800396a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003876:	2318      	movs	r3, #24
 8003878:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800387a:	2300      	movs	r3, #0
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800387e:	f04f 33ff 	mov.w	r3, #4294967295
 8003882:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d045      	beq.n	8003916 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <osThreadNew+0x48>
        name = attr->name;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <osThreadNew+0x6e>
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	2b38      	cmp	r3, #56	; 0x38
 80038b0:	d805      	bhi.n	80038be <osThreadNew+0x6e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <osThreadNew+0x72>
        return (NULL);
 80038be:	2300      	movs	r3, #0
 80038c0:	e054      	b.n	800396c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	089b      	lsrs	r3, r3, #2
 80038d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00e      	beq.n	80038f8 <osThreadNew+0xa8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b5b      	cmp	r3, #91	; 0x5b
 80038e0:	d90a      	bls.n	80038f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d006      	beq.n	80038f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <osThreadNew+0xa8>
        mem = 1;
 80038f2:	2301      	movs	r3, #1
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	e010      	b.n	800391a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10c      	bne.n	800391a <osThreadNew+0xca>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d108      	bne.n	800391a <osThreadNew+0xca>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d104      	bne.n	800391a <osThreadNew+0xca>
          mem = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	61bb      	str	r3, [r7, #24]
 8003914:	e001      	b.n	800391a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d110      	bne.n	8003942 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003928:	9202      	str	r2, [sp, #8]
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	6a3a      	ldr	r2, [r7, #32]
 8003934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 ff8a 	bl	8004850 <xTaskCreateStatic>
 800393c:	4603      	mov	r3, r0
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	e013      	b.n	800396a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d110      	bne.n	800396a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	b29a      	uxth	r2, r3
 800394c:	f107 0310 	add.w	r3, r7, #16
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 ffd5 	bl	800490a <xTaskCreate>
 8003960:	4603      	mov	r3, r0
 8003962:	2b01      	cmp	r3, #1
 8003964:	d001      	beq.n	800396a <osThreadNew+0x11a>
            hTask = NULL;
 8003966:	2300      	movs	r3, #0
 8003968:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800396a:	693b      	ldr	r3, [r7, #16]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3728      	adds	r7, #40	; 0x28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800397c:	f3ef 8305 	mrs	r3, IPSR
 8003980:	60bb      	str	r3, [r7, #8]
  return(result);
 8003982:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <osDelay+0x1c>
    stat = osErrorISR;
 8003988:	f06f 0305 	mvn.w	r3, #5
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	e007      	b.n	80039a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f001 f8fa 	bl	8004b94 <vTaskDelay>
    }
  }

  return (stat);
 80039a0:	68fb      	ldr	r3, [r7, #12]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b088      	sub	sp, #32
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039b6:	f3ef 8305 	mrs	r3, IPSR
 80039ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80039bc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d174      	bne.n	8003aac <osMutexNew+0x102>
    if (attr != NULL) {
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <osMutexNew+0x26>
      type = attr->attr_bits;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	e001      	b.n	80039d4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <osMutexNew+0x3a>
      rmtx = 1U;
 80039de:	2301      	movs	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e001      	b.n	80039e8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d15c      	bne.n	8003aac <osMutexNew+0x102>
      mem = -1;
 80039f2:	f04f 33ff 	mov.w	r3, #4294967295
 80039f6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d015      	beq.n	8003a2a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d006      	beq.n	8003a14 <osMutexNew+0x6a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	2b4f      	cmp	r3, #79	; 0x4f
 8003a0c:	d902      	bls.n	8003a14 <osMutexNew+0x6a>
          mem = 1;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	e00c      	b.n	8003a2e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d108      	bne.n	8003a2e <osMutexNew+0x84>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <osMutexNew+0x84>
            mem = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	e001      	b.n	8003a2e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d112      	bne.n	8003a5a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	2004      	movs	r0, #4
 8003a42:	f000 fb02 	bl	800404a <xQueueCreateMutexStatic>
 8003a46:	61f8      	str	r0, [r7, #28]
 8003a48:	e016      	b.n	8003a78 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	2001      	movs	r0, #1
 8003a52:	f000 fafa 	bl	800404a <xQueueCreateMutexStatic>
 8003a56:	61f8      	str	r0, [r7, #28]
 8003a58:	e00e      	b.n	8003a78 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10b      	bne.n	8003a78 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d004      	beq.n	8003a70 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003a66:	2004      	movs	r0, #4
 8003a68:	f000 fad7 	bl	800401a <xQueueCreateMutex>
 8003a6c:	61f8      	str	r0, [r7, #28]
 8003a6e:	e003      	b.n	8003a78 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003a70:	2001      	movs	r0, #1
 8003a72:	f000 fad2 	bl	800401a <xQueueCreateMutex>
 8003a76:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00c      	beq.n	8003a98 <osMutexNew+0xee>
        if (attr != NULL) {
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <osMutexNew+0xe2>
          name = attr->name;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	e001      	b.n	8003a90 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003a90:	68f9      	ldr	r1, [r7, #12]
 8003a92:	69f8      	ldr	r0, [r7, #28]
 8003a94:	f000 fe7e 	bl	8004794 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d006      	beq.n	8003aac <osMutexNew+0x102>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003aac:	69fb      	ldr	r3, [r7, #28]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b08a      	sub	sp, #40	; 0x28
 8003aba:	af02      	add	r7, sp, #8
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ac6:	f3ef 8305 	mrs	r3, IPSR
 8003aca:	613b      	str	r3, [r7, #16]
  return(result);
 8003acc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d15f      	bne.n	8003b92 <osMessageQueueNew+0xdc>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d05c      	beq.n	8003b92 <osMessageQueueNew+0xdc>
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d059      	beq.n	8003b92 <osMessageQueueNew+0xdc>
    mem = -1;
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d029      	beq.n	8003b3e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d012      	beq.n	8003b18 <osMessageQueueNew+0x62>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	2b4f      	cmp	r3, #79	; 0x4f
 8003af8:	d90e      	bls.n	8003b18 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <osMessageQueueNew+0x62>
        mem = 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	e014      	b.n	8003b42 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d110      	bne.n	8003b42 <osMessageQueueNew+0x8c>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10c      	bne.n	8003b42 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d108      	bne.n	8003b42 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <osMessageQueueNew+0x8c>
          mem = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e001      	b.n	8003b42 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d10b      	bne.n	8003b60 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2100      	movs	r1, #0
 8003b52:	9100      	str	r1, [sp, #0]
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f970 	bl	8003e3c <xQueueGenericCreateStatic>
 8003b5c:	61f8      	str	r0, [r7, #28]
 8003b5e:	e008      	b.n	8003b72 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d105      	bne.n	8003b72 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003b66:	2200      	movs	r2, #0
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f9de 	bl	8003f2c <xQueueGenericCreate>
 8003b70:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00c      	beq.n	8003b92 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e001      	b.n	8003b8a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003b8a:	6979      	ldr	r1, [r7, #20]
 8003b8c:	69f8      	ldr	r0, [r7, #28]
 8003b8e:	f000 fe01 	bl	8004794 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003b92:	69fb      	ldr	r3, [r7, #28]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3720      	adds	r7, #32
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003bac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4a06      	ldr	r2, [pc, #24]	; (8003bcc <vApplicationGetIdleTaskMemory+0x30>)
 8003bb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2280      	movs	r2, #128	; 0x80
 8003bb8:	601a      	str	r2, [r3, #0]
}
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000130 	.word	0x20000130
 8003bcc:	2000018c 	.word	0x2000018c

08003bd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a07      	ldr	r2, [pc, #28]	; (8003bfc <vApplicationGetTimerTaskMemory+0x2c>)
 8003be0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4a06      	ldr	r2, [pc, #24]	; (8003c00 <vApplicationGetTimerTaskMemory+0x30>)
 8003be6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bee:	601a      	str	r2, [r3, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	2000038c 	.word	0x2000038c
 8003c00:	200003e8 	.word	0x200003e8

08003c04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f103 0208 	add.w	r2, r3, #8
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f04f 32ff 	mov.w	r2, #4294967295
 8003c1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f103 0208 	add.w	r2, r3, #8
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f103 0208 	add.w	r2, r3, #8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	601a      	str	r2, [r3, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbc:	d103      	bne.n	8003cc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e00c      	b.n	8003ce0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3308      	adds	r3, #8
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	e002      	b.n	8003cd4 <vListInsert+0x2e>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d2f6      	bcs.n	8003cce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	601a      	str	r2, [r3, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6892      	ldr	r2, [r2, #8]
 8003d2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6852      	ldr	r2, [r2, #4]
 8003d38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d103      	bne.n	8003d4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	1e5a      	subs	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d92:	bf00      	nop
 8003d94:	e7fe      	b.n	8003d94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d96:	f002 f8d5 	bl	8005f44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da2:	68f9      	ldr	r1, [r7, #12]
 8003da4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003da6:	fb01 f303 	mul.w	r3, r1, r3
 8003daa:	441a      	add	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	68f9      	ldr	r1, [r7, #12]
 8003dca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	441a      	add	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	22ff      	movs	r2, #255	; 0xff
 8003dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	22ff      	movs	r2, #255	; 0xff
 8003de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d114      	bne.n	8003e16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01a      	beq.n	8003e2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3310      	adds	r3, #16
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f001 f989 	bl	8005110 <xTaskRemoveFromEventList>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d012      	beq.n	8003e2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e04:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <xQueueGenericReset+0xcc>)
 8003e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	e009      	b.n	8003e2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3310      	adds	r3, #16
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fef2 	bl	8003c04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3324      	adds	r3, #36	; 0x24
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff feed 	bl	8003c04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e2a:	f002 f8bb 	bl	8005fa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e2e:	2301      	movs	r3, #1
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08e      	sub	sp, #56	; 0x38
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10a      	bne.n	8003e66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e62:	bf00      	nop
 8003e64:	e7fe      	b.n	8003e64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e7e:	bf00      	nop
 8003e80:	e7fe      	b.n	8003e80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <xQueueGenericCreateStatic+0x52>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <xQueueGenericCreateStatic+0x56>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <xQueueGenericCreateStatic+0x58>
 8003e92:	2300      	movs	r3, #0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10a      	bne.n	8003eae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	623b      	str	r3, [r7, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <xQueueGenericCreateStatic+0x7e>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <xQueueGenericCreateStatic+0x82>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <xQueueGenericCreateStatic+0x84>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	61fb      	str	r3, [r7, #28]
}
 8003ed6:	bf00      	nop
 8003ed8:	e7fe      	b.n	8003ed8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003eda:	2350      	movs	r3, #80	; 0x50
 8003edc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b50      	cmp	r3, #80	; 0x50
 8003ee2:	d00a      	beq.n	8003efa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	61bb      	str	r3, [r7, #24]
}
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003efa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00d      	beq.n	8003f22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	4613      	mov	r3, r2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f83f 	bl	8003fa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3730      	adds	r7, #48	; 0x30
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	; 0x28
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	4613      	mov	r3, r2
 8003f38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	613b      	str	r3, [r7, #16]
}
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	3350      	adds	r3, #80	; 0x50
 8003f64:	4618      	mov	r0, r3
 8003f66:	f002 f90f 	bl	8006188 <pvPortMalloc>
 8003f6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d011      	beq.n	8003f96 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	3350      	adds	r3, #80	; 0x50
 8003f7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f84:	79fa      	ldrb	r2, [r7, #7]
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f805 	bl	8003fa0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f96:	69bb      	ldr	r3, [r7, #24]
	}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d103      	bne.n	8003fbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	e002      	b.n	8003fc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fce:	2101      	movs	r1, #1
 8003fd0:	69b8      	ldr	r0, [r7, #24]
 8003fd2:	f7ff fecb 	bl	8003d6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00e      	beq.n	8004012 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004006:	2300      	movs	r3, #0
 8004008:	2200      	movs	r2, #0
 800400a:	2100      	movs	r1, #0
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f837 	bl	8004080 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800401a:	b580      	push	{r7, lr}
 800401c:	b086      	sub	sp, #24
 800401e:	af00      	add	r7, sp, #0
 8004020:	4603      	mov	r3, r0
 8004022:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004024:	2301      	movs	r3, #1
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	2300      	movs	r3, #0
 800402a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	461a      	mov	r2, r3
 8004030:	6939      	ldr	r1, [r7, #16]
 8004032:	6978      	ldr	r0, [r7, #20]
 8004034:	f7ff ff7a 	bl	8003f2c <xQueueGenericCreate>
 8004038:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f7ff ffd3 	bl	8003fe6 <prvInitialiseMutex>

		return xNewQueue;
 8004040:	68fb      	ldr	r3, [r7, #12]
	}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800404a:	b580      	push	{r7, lr}
 800404c:	b088      	sub	sp, #32
 800404e:	af02      	add	r7, sp, #8
 8004050:	4603      	mov	r3, r0
 8004052:	6039      	str	r1, [r7, #0]
 8004054:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004056:	2301      	movs	r3, #1
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2200      	movs	r2, #0
 8004066:	6939      	ldr	r1, [r7, #16]
 8004068:	6978      	ldr	r0, [r7, #20]
 800406a:	f7ff fee7 	bl	8003e3c <xQueueGenericCreateStatic>
 800406e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7ff ffb8 	bl	8003fe6 <prvInitialiseMutex>

		return xNewQueue;
 8004076:	68fb      	ldr	r3, [r7, #12]
	}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08e      	sub	sp, #56	; 0x38
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800408e:	2300      	movs	r3, #0
 8004090:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <xQueueGenericSend+0x32>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d103      	bne.n	80040c0 <xQueueGenericSend+0x40>
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <xQueueGenericSend+0x44>
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <xQueueGenericSend+0x46>
 80040c4:	2300      	movs	r3, #0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <xQueueGenericSend+0x60>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040dc:	bf00      	nop
 80040de:	e7fe      	b.n	80040de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d103      	bne.n	80040ee <xQueueGenericSend+0x6e>
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <xQueueGenericSend+0x72>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <xQueueGenericSend+0x74>
 80040f2:	2300      	movs	r3, #0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <xQueueGenericSend+0x8e>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	623b      	str	r3, [r7, #32]
}
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800410e:	f001 f9bd 	bl	800548c <xTaskGetSchedulerState>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d102      	bne.n	800411e <xQueueGenericSend+0x9e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <xQueueGenericSend+0xa2>
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <xQueueGenericSend+0xa4>
 8004122:	2300      	movs	r3, #0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10a      	bne.n	800413e <xQueueGenericSend+0xbe>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	61fb      	str	r3, [r7, #28]
}
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800413e:	f001 ff01 	bl	8005f44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414a:	429a      	cmp	r2, r3
 800414c:	d302      	bcc.n	8004154 <xQueueGenericSend+0xd4>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d129      	bne.n	80041a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800415a:	f000 fa0b 	bl	8004574 <prvCopyDataToQueue>
 800415e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	2b00      	cmp	r3, #0
 8004166:	d010      	beq.n	800418a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	3324      	adds	r3, #36	; 0x24
 800416c:	4618      	mov	r0, r3
 800416e:	f000 ffcf 	bl	8005110 <xTaskRemoveFromEventList>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d013      	beq.n	80041a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004178:	4b3f      	ldr	r3, [pc, #252]	; (8004278 <xQueueGenericSend+0x1f8>)
 800417a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	e00a      	b.n	80041a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d007      	beq.n	80041a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004190:	4b39      	ldr	r3, [pc, #228]	; (8004278 <xQueueGenericSend+0x1f8>)
 8004192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041a0:	f001 ff00 	bl	8005fa4 <vPortExitCritical>
				return pdPASS;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e063      	b.n	8004270 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d103      	bne.n	80041b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041ae:	f001 fef9 	bl	8005fa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	e05c      	b.n	8004270 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d106      	bne.n	80041ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041bc:	f107 0314 	add.w	r3, r7, #20
 80041c0:	4618      	mov	r0, r3
 80041c2:	f001 f809 	bl	80051d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041c6:	2301      	movs	r3, #1
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041ca:	f001 feeb 	bl	8005fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041ce:	f000 fd7b 	bl	8004cc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041d2:	f001 feb7 	bl	8005f44 <vPortEnterCritical>
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041dc:	b25b      	sxtb	r3, r3
 80041de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e2:	d103      	bne.n	80041ec <xQueueGenericSend+0x16c>
 80041e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041f2:	b25b      	sxtb	r3, r3
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d103      	bne.n	8004202 <xQueueGenericSend+0x182>
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004202:	f001 fecf 	bl	8005fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004206:	1d3a      	adds	r2, r7, #4
 8004208:	f107 0314 	add.w	r3, r7, #20
 800420c:	4611      	mov	r1, r2
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fff8 	bl	8005204 <xTaskCheckForTimeOut>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d124      	bne.n	8004264 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800421a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800421c:	f000 faa2 	bl	8004764 <prvIsQueueFull>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d018      	beq.n	8004258 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	3310      	adds	r3, #16
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	4611      	mov	r1, r2
 800422e:	4618      	mov	r0, r3
 8004230:	f000 ff1e 	bl	8005070 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004236:	f000 fa2d 	bl	8004694 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800423a:	f000 fd53 	bl	8004ce4 <xTaskResumeAll>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	f47f af7c 	bne.w	800413e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <xQueueGenericSend+0x1f8>)
 8004248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	e772      	b.n	800413e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800425a:	f000 fa1b 	bl	8004694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800425e:	f000 fd41 	bl	8004ce4 <xTaskResumeAll>
 8004262:	e76c      	b.n	800413e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004266:	f000 fa15 	bl	8004694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800426a:	f000 fd3b 	bl	8004ce4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800426e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004270:	4618      	mov	r0, r3
 8004272:	3738      	adds	r7, #56	; 0x38
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	e000ed04 	.word	0xe000ed04

0800427c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b090      	sub	sp, #64	; 0x40
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800428e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <xQueueGenericSendFromISR+0x3c>
 80042b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <xQueueGenericSendFromISR+0x40>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <xQueueGenericSendFromISR+0x42>
 80042bc:	2300      	movs	r3, #0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d103      	bne.n	80042e6 <xQueueGenericSendFromISR+0x6a>
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <xQueueGenericSendFromISR+0x6e>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <xQueueGenericSendFromISR+0x70>
 80042ea:	2300      	movs	r3, #0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10a      	bne.n	8004306 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	623b      	str	r3, [r7, #32]
}
 8004302:	bf00      	nop
 8004304:	e7fe      	b.n	8004304 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004306:	f001 feff 	bl	8006108 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800430a:	f3ef 8211 	mrs	r2, BASEPRI
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	61fa      	str	r2, [r7, #28]
 8004320:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004322:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004324:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <xQueueGenericSendFromISR+0xbc>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d12f      	bne.n	8004398 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800433e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800434e:	f000 f911 	bl	8004574 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004352:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d112      	bne.n	8004382 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800435c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	2b00      	cmp	r3, #0
 8004362:	d016      	beq.n	8004392 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	3324      	adds	r3, #36	; 0x24
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fed1 	bl	8005110 <xTaskRemoveFromEventList>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00e      	beq.n	8004392 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	e007      	b.n	8004392 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004382:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004386:	3301      	adds	r3, #1
 8004388:	b2db      	uxtb	r3, r3
 800438a:	b25a      	sxtb	r2, r3
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004392:	2301      	movs	r3, #1
 8004394:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004396:	e001      	b.n	800439c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004398:	2300      	movs	r3, #0
 800439a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800439c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80043a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3740      	adds	r7, #64	; 0x40
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08c      	sub	sp, #48	; 0x30
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10a      	bne.n	80043e4 <xQueueReceive+0x30>
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	623b      	str	r3, [r7, #32]
}
 80043e0:	bf00      	nop
 80043e2:	e7fe      	b.n	80043e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d103      	bne.n	80043f2 <xQueueReceive+0x3e>
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <xQueueReceive+0x42>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <xQueueReceive+0x44>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <xQueueReceive+0x5e>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	61fb      	str	r3, [r7, #28]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004412:	f001 f83b 	bl	800548c <xTaskGetSchedulerState>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <xQueueReceive+0x6e>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <xQueueReceive+0x72>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <xQueueReceive+0x74>
 8004426:	2300      	movs	r3, #0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <xQueueReceive+0x8e>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	61bb      	str	r3, [r7, #24]
}
 800443e:	bf00      	nop
 8004440:	e7fe      	b.n	8004440 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004442:	f001 fd7f 	bl	8005f44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01f      	beq.n	8004492 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004456:	f000 f8f7 	bl	8004648 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	1e5a      	subs	r2, r3, #1
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00f      	beq.n	800448a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	3310      	adds	r3, #16
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fe4e 	bl	8005110 <xTaskRemoveFromEventList>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800447a:	4b3d      	ldr	r3, [pc, #244]	; (8004570 <xQueueReceive+0x1bc>)
 800447c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800448a:	f001 fd8b 	bl	8005fa4 <vPortExitCritical>
				return pdPASS;
 800448e:	2301      	movs	r3, #1
 8004490:	e069      	b.n	8004566 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d103      	bne.n	80044a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004498:	f001 fd84 	bl	8005fa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800449c:	2300      	movs	r3, #0
 800449e:	e062      	b.n	8004566 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044a6:	f107 0310 	add.w	r3, r7, #16
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fe94 	bl	80051d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044b0:	2301      	movs	r3, #1
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044b4:	f001 fd76 	bl	8005fa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044b8:	f000 fc06 	bl	8004cc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044bc:	f001 fd42 	bl	8005f44 <vPortEnterCritical>
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044c6:	b25b      	sxtb	r3, r3
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d103      	bne.n	80044d6 <xQueueReceive+0x122>
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044dc:	b25b      	sxtb	r3, r3
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e2:	d103      	bne.n	80044ec <xQueueReceive+0x138>
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044ec:	f001 fd5a 	bl	8005fa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044f0:	1d3a      	adds	r2, r7, #4
 80044f2:	f107 0310 	add.w	r3, r7, #16
 80044f6:	4611      	mov	r1, r2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fe83 	bl	8005204 <xTaskCheckForTimeOut>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d123      	bne.n	800454c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004506:	f000 f917 	bl	8004738 <prvIsQueueEmpty>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d017      	beq.n	8004540 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	3324      	adds	r3, #36	; 0x24
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	4611      	mov	r1, r2
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fda9 	bl	8005070 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800451e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004520:	f000 f8b8 	bl	8004694 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004524:	f000 fbde 	bl	8004ce4 <xTaskResumeAll>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d189      	bne.n	8004442 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800452e:	4b10      	ldr	r3, [pc, #64]	; (8004570 <xQueueReceive+0x1bc>)
 8004530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	e780      	b.n	8004442 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004542:	f000 f8a7 	bl	8004694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004546:	f000 fbcd 	bl	8004ce4 <xTaskResumeAll>
 800454a:	e77a      	b.n	8004442 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800454c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800454e:	f000 f8a1 	bl	8004694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004552:	f000 fbc7 	bl	8004ce4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004558:	f000 f8ee 	bl	8004738 <prvIsQueueEmpty>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	f43f af6f 	beq.w	8004442 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004564:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004566:	4618      	mov	r0, r3
 8004568:	3730      	adds	r7, #48	; 0x30
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10d      	bne.n	80045ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d14d      	bne.n	8004636 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 ff92 	bl	80054c8 <xTaskPriorityDisinherit>
 80045a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	609a      	str	r2, [r3, #8]
 80045ac:	e043      	b.n	8004636 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d119      	bne.n	80045e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6858      	ldr	r0, [r3, #4]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	461a      	mov	r2, r3
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	f001 fff8 	bl	80065b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	441a      	add	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d32b      	bcc.n	8004636 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	e026      	b.n	8004636 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	68d8      	ldr	r0, [r3, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	461a      	mov	r2, r3
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	f001 ffde 	bl	80065b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	425b      	negs	r3, r3
 8004602:	441a      	add	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d207      	bcs.n	8004624 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	425b      	negs	r3, r3
 800461e:	441a      	add	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d105      	bne.n	8004636 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	3b01      	subs	r3, #1
 8004634:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800463e:	697b      	ldr	r3, [r7, #20]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d018      	beq.n	800468c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	441a      	add	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	429a      	cmp	r2, r3
 8004672:	d303      	bcc.n	800467c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68d9      	ldr	r1, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	461a      	mov	r2, r3
 8004686:	6838      	ldr	r0, [r7, #0]
 8004688:	f001 ff94 	bl	80065b4 <memcpy>
	}
}
 800468c:	bf00      	nop
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800469c:	f001 fc52 	bl	8005f44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046a8:	e011      	b.n	80046ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d012      	beq.n	80046d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3324      	adds	r3, #36	; 0x24
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fd2a 	bl	8005110 <xTaskRemoveFromEventList>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046c2:	f000 fe01 	bl	80052c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	dce9      	bgt.n	80046aa <prvUnlockQueue+0x16>
 80046d6:	e000      	b.n	80046da <prvUnlockQueue+0x46>
					break;
 80046d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	22ff      	movs	r2, #255	; 0xff
 80046de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80046e2:	f001 fc5f 	bl	8005fa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046e6:	f001 fc2d 	bl	8005f44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046f2:	e011      	b.n	8004718 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d012      	beq.n	8004722 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3310      	adds	r3, #16
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fd05 	bl	8005110 <xTaskRemoveFromEventList>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800470c:	f000 fddc 	bl	80052c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004710:	7bbb      	ldrb	r3, [r7, #14]
 8004712:	3b01      	subs	r3, #1
 8004714:	b2db      	uxtb	r3, r3
 8004716:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800471c:	2b00      	cmp	r3, #0
 800471e:	dce9      	bgt.n	80046f4 <prvUnlockQueue+0x60>
 8004720:	e000      	b.n	8004724 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004722:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	22ff      	movs	r2, #255	; 0xff
 8004728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800472c:	f001 fc3a 	bl	8005fa4 <vPortExitCritical>
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004740:	f001 fc00 	bl	8005f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	2b00      	cmp	r3, #0
 800474a:	d102      	bne.n	8004752 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e001      	b.n	8004756 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004756:	f001 fc25 	bl	8005fa4 <vPortExitCritical>

	return xReturn;
 800475a:	68fb      	ldr	r3, [r7, #12]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800476c:	f001 fbea 	bl	8005f44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004778:	429a      	cmp	r2, r3
 800477a:	d102      	bne.n	8004782 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800477c:	2301      	movs	r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	e001      	b.n	8004786 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004786:	f001 fc0d 	bl	8005fa4 <vPortExitCritical>

	return xReturn;
 800478a:	68fb      	ldr	r3, [r7, #12]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	e014      	b.n	80047ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047a4:	4a0f      	ldr	r2, [pc, #60]	; (80047e4 <vQueueAddToRegistry+0x50>)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10b      	bne.n	80047c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047b0:	490c      	ldr	r1, [pc, #48]	; (80047e4 <vQueueAddToRegistry+0x50>)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80047ba:	4a0a      	ldr	r2, [pc, #40]	; (80047e4 <vQueueAddToRegistry+0x50>)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	4413      	add	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80047c6:	e006      	b.n	80047d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	3301      	adds	r3, #1
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b07      	cmp	r3, #7
 80047d2:	d9e7      	bls.n	80047a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	200007e8 	.word	0x200007e8

080047e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80047f8:	f001 fba4 	bl	8005f44 <vPortEnterCritical>
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004802:	b25b      	sxtb	r3, r3
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d103      	bne.n	8004812 <vQueueWaitForMessageRestricted+0x2a>
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004818:	b25b      	sxtb	r3, r3
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d103      	bne.n	8004828 <vQueueWaitForMessageRestricted+0x40>
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004828:	f001 fbbc 	bl	8005fa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	3324      	adds	r3, #36	; 0x24
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fc3b 	bl	80050b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004842:	6978      	ldr	r0, [r7, #20]
 8004844:	f7ff ff26 	bl	8004694 <prvUnlockQueue>
	}
 8004848:	bf00      	nop
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08e      	sub	sp, #56	; 0x38
 8004854:	af04      	add	r7, sp, #16
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800485e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	623b      	str	r3, [r7, #32]
}
 8004876:	bf00      	nop
 8004878:	e7fe      	b.n	8004878 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <xTaskCreateStatic+0x46>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	61fb      	str	r3, [r7, #28]
}
 8004892:	bf00      	nop
 8004894:	e7fe      	b.n	8004894 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004896:	235c      	movs	r3, #92	; 0x5c
 8004898:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	2b5c      	cmp	r3, #92	; 0x5c
 800489e:	d00a      	beq.n	80048b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	61bb      	str	r3, [r7, #24]
}
 80048b2:	bf00      	nop
 80048b4:	e7fe      	b.n	80048b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80048b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01e      	beq.n	80048fc <xTaskCreateStatic+0xac>
 80048be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01b      	beq.n	80048fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	2202      	movs	r2, #2
 80048d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048d6:	2300      	movs	r3, #0
 80048d8:	9303      	str	r3, [sp, #12]
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	9302      	str	r3, [sp, #8]
 80048de:	f107 0314 	add.w	r3, r7, #20
 80048e2:	9301      	str	r3, [sp, #4]
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f850 	bl	8004994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048f6:	f000 f8dd 	bl	8004ab4 <prvAddNewTaskToReadyList>
 80048fa:	e001      	b.n	8004900 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004900:	697b      	ldr	r3, [r7, #20]
	}
 8004902:	4618      	mov	r0, r3
 8004904:	3728      	adds	r7, #40	; 0x28
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800490a:	b580      	push	{r7, lr}
 800490c:	b08c      	sub	sp, #48	; 0x30
 800490e:	af04      	add	r7, sp, #16
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	4613      	mov	r3, r2
 8004918:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4618      	mov	r0, r3
 8004920:	f001 fc32 	bl	8006188 <pvPortMalloc>
 8004924:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00e      	beq.n	800494a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800492c:	205c      	movs	r0, #92	; 0x5c
 800492e:	f001 fc2b 	bl	8006188 <pvPortMalloc>
 8004932:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
 8004940:	e005      	b.n	800494e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004942:	6978      	ldr	r0, [r7, #20]
 8004944:	f001 fcec 	bl	8006320 <vPortFree>
 8004948:	e001      	b.n	800494e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d017      	beq.n	8004984 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800495c:	88fa      	ldrh	r2, [r7, #6]
 800495e:	2300      	movs	r3, #0
 8004960:	9303      	str	r3, [sp, #12]
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	9302      	str	r3, [sp, #8]
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	9301      	str	r3, [sp, #4]
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f80e 	bl	8004994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004978:	69f8      	ldr	r0, [r7, #28]
 800497a:	f000 f89b 	bl	8004ab4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800497e:	2301      	movs	r3, #1
 8004980:	61bb      	str	r3, [r7, #24]
 8004982:	e002      	b.n	800498a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004984:	f04f 33ff 	mov.w	r3, #4294967295
 8004988:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800498a:	69bb      	ldr	r3, [r7, #24]
	}
 800498c:	4618      	mov	r0, r3
 800498e:	3720      	adds	r7, #32
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	461a      	mov	r2, r3
 80049ac:	21a5      	movs	r1, #165	; 0xa5
 80049ae:	f001 fdd5 	bl	800655c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049bc:	3b01      	subs	r3, #1
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f023 0307 	bic.w	r3, r3, #7
 80049ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	617b      	str	r3, [r7, #20]
}
 80049e8:	bf00      	nop
 80049ea:	e7fe      	b.n	80049ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d01f      	beq.n	8004a32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049f2:	2300      	movs	r3, #0
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	e012      	b.n	8004a1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	4413      	add	r3, r2
 80049fe:	7819      	ldrb	r1, [r3, #0]
 8004a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	4413      	add	r3, r2
 8004a06:	3334      	adds	r3, #52	; 0x34
 8004a08:	460a      	mov	r2, r1
 8004a0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d006      	beq.n	8004a26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	2b0f      	cmp	r3, #15
 8004a22:	d9e9      	bls.n	80049f8 <prvInitialiseNewTask+0x64>
 8004a24:	e000      	b.n	8004a28 <prvInitialiseNewTask+0x94>
			{
				break;
 8004a26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a30:	e003      	b.n	8004a3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3c:	2b37      	cmp	r3, #55	; 0x37
 8004a3e:	d901      	bls.n	8004a44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a40:	2337      	movs	r3, #55	; 0x37
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	2200      	movs	r2, #0
 8004a54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff f8f2 	bl	8003c44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	3318      	adds	r3, #24
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff f8ed 	bl	8003c44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	2200      	movs	r2, #0
 8004a84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	68f9      	ldr	r1, [r7, #12]
 8004a92:	69b8      	ldr	r0, [r7, #24]
 8004a94:	f001 f928 	bl	8005ce8 <pxPortInitialiseStack>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004aaa:	bf00      	nop
 8004aac:	3720      	adds	r7, #32
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004abc:	f001 fa42 	bl	8005f44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ac0:	4b2d      	ldr	r3, [pc, #180]	; (8004b78 <prvAddNewTaskToReadyList+0xc4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	4a2c      	ldr	r2, [pc, #176]	; (8004b78 <prvAddNewTaskToReadyList+0xc4>)
 8004ac8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004aca:	4b2c      	ldr	r3, [pc, #176]	; (8004b7c <prvAddNewTaskToReadyList+0xc8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d109      	bne.n	8004ae6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ad2:	4a2a      	ldr	r2, [pc, #168]	; (8004b7c <prvAddNewTaskToReadyList+0xc8>)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ad8:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <prvAddNewTaskToReadyList+0xc4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d110      	bne.n	8004b02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ae0:	f000 fc16 	bl	8005310 <prvInitialiseTaskLists>
 8004ae4:	e00d      	b.n	8004b02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ae6:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <prvAddNewTaskToReadyList+0xcc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004aee:	4b23      	ldr	r3, [pc, #140]	; (8004b7c <prvAddNewTaskToReadyList+0xc8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d802      	bhi.n	8004b02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004afc:	4a1f      	ldr	r2, [pc, #124]	; (8004b7c <prvAddNewTaskToReadyList+0xc8>)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b02:	4b20      	ldr	r3, [pc, #128]	; (8004b84 <prvAddNewTaskToReadyList+0xd0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3301      	adds	r3, #1
 8004b08:	4a1e      	ldr	r2, [pc, #120]	; (8004b84 <prvAddNewTaskToReadyList+0xd0>)
 8004b0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b0c:	4b1d      	ldr	r3, [pc, #116]	; (8004b84 <prvAddNewTaskToReadyList+0xd0>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b18:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <prvAddNewTaskToReadyList+0xd4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d903      	bls.n	8004b28 <prvAddNewTaskToReadyList+0x74>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	4a18      	ldr	r2, [pc, #96]	; (8004b88 <prvAddNewTaskToReadyList+0xd4>)
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <prvAddNewTaskToReadyList+0xd8>)
 8004b36:	441a      	add	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f7ff f88d 	bl	8003c5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b44:	f001 fa2e 	bl	8005fa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b48:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <prvAddNewTaskToReadyList+0xcc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00e      	beq.n	8004b6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b50:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <prvAddNewTaskToReadyList+0xc8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d207      	bcs.n	8004b6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <prvAddNewTaskToReadyList+0xdc>)
 8004b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000cfc 	.word	0x20000cfc
 8004b7c:	20000828 	.word	0x20000828
 8004b80:	20000d08 	.word	0x20000d08
 8004b84:	20000d18 	.word	0x20000d18
 8004b88:	20000d04 	.word	0x20000d04
 8004b8c:	2000082c 	.word	0x2000082c
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d017      	beq.n	8004bd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004ba6:	4b13      	ldr	r3, [pc, #76]	; (8004bf4 <vTaskDelay+0x60>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <vTaskDelay+0x30>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	60bb      	str	r3, [r7, #8]
}
 8004bc0:	bf00      	nop
 8004bc2:	e7fe      	b.n	8004bc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004bc4:	f000 f880 	bl	8004cc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bc8:	2100      	movs	r1, #0
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fcea 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bd0:	f000 f888 	bl	8004ce4 <xTaskResumeAll>
 8004bd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d107      	bne.n	8004bec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <vTaskDelay+0x64>)
 8004bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20000d24 	.word	0x20000d24
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	; 0x28
 8004c00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c0a:	463a      	mov	r2, r7
 8004c0c:	1d39      	adds	r1, r7, #4
 8004c0e:	f107 0308 	add.w	r3, r7, #8
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe ffc2 	bl	8003b9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c18:	6839      	ldr	r1, [r7, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	9202      	str	r2, [sp, #8]
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	2300      	movs	r3, #0
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	2300      	movs	r3, #0
 8004c28:	460a      	mov	r2, r1
 8004c2a:	4921      	ldr	r1, [pc, #132]	; (8004cb0 <vTaskStartScheduler+0xb4>)
 8004c2c:	4821      	ldr	r0, [pc, #132]	; (8004cb4 <vTaskStartScheduler+0xb8>)
 8004c2e:	f7ff fe0f 	bl	8004850 <xTaskCreateStatic>
 8004c32:	4603      	mov	r3, r0
 8004c34:	4a20      	ldr	r2, [pc, #128]	; (8004cb8 <vTaskStartScheduler+0xbc>)
 8004c36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c38:	4b1f      	ldr	r3, [pc, #124]	; (8004cb8 <vTaskStartScheduler+0xbc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c40:	2301      	movs	r3, #1
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	e001      	b.n	8004c4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d102      	bne.n	8004c56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c50:	f000 fcfc 	bl	800564c <xTimerCreateTimerTask>
 8004c54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d116      	bne.n	8004c8a <vTaskStartScheduler+0x8e>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	613b      	str	r3, [r7, #16]
}
 8004c6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c70:	4b12      	ldr	r3, [pc, #72]	; (8004cbc <vTaskStartScheduler+0xc0>)
 8004c72:	f04f 32ff 	mov.w	r2, #4294967295
 8004c76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c78:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <vTaskStartScheduler+0xc4>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c7e:	4b11      	ldr	r3, [pc, #68]	; (8004cc4 <vTaskStartScheduler+0xc8>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c84:	f001 f8bc 	bl	8005e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c88:	e00e      	b.n	8004ca8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d10a      	bne.n	8004ca8 <vTaskStartScheduler+0xac>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	60fb      	str	r3, [r7, #12]
}
 8004ca4:	bf00      	nop
 8004ca6:	e7fe      	b.n	8004ca6 <vTaskStartScheduler+0xaa>
}
 8004ca8:	bf00      	nop
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	08006628 	.word	0x08006628
 8004cb4:	080052e1 	.word	0x080052e1
 8004cb8:	20000d20 	.word	0x20000d20
 8004cbc:	20000d1c 	.word	0x20000d1c
 8004cc0:	20000d08 	.word	0x20000d08
 8004cc4:	20000d00 	.word	0x20000d00

08004cc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ccc:	4b04      	ldr	r3, [pc, #16]	; (8004ce0 <vTaskSuspendAll+0x18>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	4a03      	ldr	r2, [pc, #12]	; (8004ce0 <vTaskSuspendAll+0x18>)
 8004cd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004cd6:	bf00      	nop
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	20000d24 	.word	0x20000d24

08004ce4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cf2:	4b42      	ldr	r3, [pc, #264]	; (8004dfc <xTaskResumeAll+0x118>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10a      	bne.n	8004d10 <xTaskResumeAll+0x2c>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	603b      	str	r3, [r7, #0]
}
 8004d0c:	bf00      	nop
 8004d0e:	e7fe      	b.n	8004d0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d10:	f001 f918 	bl	8005f44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d14:	4b39      	ldr	r3, [pc, #228]	; (8004dfc <xTaskResumeAll+0x118>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	4a38      	ldr	r2, [pc, #224]	; (8004dfc <xTaskResumeAll+0x118>)
 8004d1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d1e:	4b37      	ldr	r3, [pc, #220]	; (8004dfc <xTaskResumeAll+0x118>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d162      	bne.n	8004dec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d26:	4b36      	ldr	r3, [pc, #216]	; (8004e00 <xTaskResumeAll+0x11c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d05e      	beq.n	8004dec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d2e:	e02f      	b.n	8004d90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d30:	4b34      	ldr	r3, [pc, #208]	; (8004e04 <xTaskResumeAll+0x120>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3318      	adds	r3, #24
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe ffeb 	bl	8003d18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe ffe6 	bl	8003d18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d50:	4b2d      	ldr	r3, [pc, #180]	; (8004e08 <xTaskResumeAll+0x124>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d903      	bls.n	8004d60 <xTaskResumeAll+0x7c>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	4a2a      	ldr	r2, [pc, #168]	; (8004e08 <xTaskResumeAll+0x124>)
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4a27      	ldr	r2, [pc, #156]	; (8004e0c <xTaskResumeAll+0x128>)
 8004d6e:	441a      	add	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3304      	adds	r3, #4
 8004d74:	4619      	mov	r1, r3
 8004d76:	4610      	mov	r0, r2
 8004d78:	f7fe ff71 	bl	8003c5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <xTaskResumeAll+0x12c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d8a:	4b22      	ldr	r3, [pc, #136]	; (8004e14 <xTaskResumeAll+0x130>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d90:	4b1c      	ldr	r3, [pc, #112]	; (8004e04 <xTaskResumeAll+0x120>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1cb      	bne.n	8004d30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d9e:	f000 fb55 	bl	800544c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004da2:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <xTaskResumeAll+0x134>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d010      	beq.n	8004dd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004dae:	f000 f847 	bl	8004e40 <xTaskIncrementTick>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004db8:	4b16      	ldr	r3, [pc, #88]	; (8004e14 <xTaskResumeAll+0x130>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f1      	bne.n	8004dae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004dca:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <xTaskResumeAll+0x134>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004dd0:	4b10      	ldr	r3, [pc, #64]	; (8004e14 <xTaskResumeAll+0x130>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d009      	beq.n	8004dec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ddc:	4b0f      	ldr	r3, [pc, #60]	; (8004e1c <xTaskResumeAll+0x138>)
 8004dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dec:	f001 f8da 	bl	8005fa4 <vPortExitCritical>

	return xAlreadyYielded;
 8004df0:	68bb      	ldr	r3, [r7, #8]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000d24 	.word	0x20000d24
 8004e00:	20000cfc 	.word	0x20000cfc
 8004e04:	20000cbc 	.word	0x20000cbc
 8004e08:	20000d04 	.word	0x20000d04
 8004e0c:	2000082c 	.word	0x2000082c
 8004e10:	20000828 	.word	0x20000828
 8004e14:	20000d10 	.word	0x20000d10
 8004e18:	20000d0c 	.word	0x20000d0c
 8004e1c:	e000ed04 	.word	0xe000ed04

08004e20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <xTaskGetTickCount+0x1c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e2c:	687b      	ldr	r3, [r7, #4]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000d00 	.word	0x20000d00

08004e40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e4a:	4b4f      	ldr	r3, [pc, #316]	; (8004f88 <xTaskIncrementTick+0x148>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f040 808f 	bne.w	8004f72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e54:	4b4d      	ldr	r3, [pc, #308]	; (8004f8c <xTaskIncrementTick+0x14c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e5c:	4a4b      	ldr	r2, [pc, #300]	; (8004f8c <xTaskIncrementTick+0x14c>)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d120      	bne.n	8004eaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e68:	4b49      	ldr	r3, [pc, #292]	; (8004f90 <xTaskIncrementTick+0x150>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	603b      	str	r3, [r7, #0]
}
 8004e84:	bf00      	nop
 8004e86:	e7fe      	b.n	8004e86 <xTaskIncrementTick+0x46>
 8004e88:	4b41      	ldr	r3, [pc, #260]	; (8004f90 <xTaskIncrementTick+0x150>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	4b41      	ldr	r3, [pc, #260]	; (8004f94 <xTaskIncrementTick+0x154>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a3f      	ldr	r2, [pc, #252]	; (8004f90 <xTaskIncrementTick+0x150>)
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	4a3f      	ldr	r2, [pc, #252]	; (8004f94 <xTaskIncrementTick+0x154>)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	4b3e      	ldr	r3, [pc, #248]	; (8004f98 <xTaskIncrementTick+0x158>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	4a3d      	ldr	r2, [pc, #244]	; (8004f98 <xTaskIncrementTick+0x158>)
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	f000 fad1 	bl	800544c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004eaa:	4b3c      	ldr	r3, [pc, #240]	; (8004f9c <xTaskIncrementTick+0x15c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d349      	bcc.n	8004f48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eb4:	4b36      	ldr	r3, [pc, #216]	; (8004f90 <xTaskIncrementTick+0x150>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d104      	bne.n	8004ec8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ebe:	4b37      	ldr	r3, [pc, #220]	; (8004f9c <xTaskIncrementTick+0x15c>)
 8004ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec4:	601a      	str	r2, [r3, #0]
					break;
 8004ec6:	e03f      	b.n	8004f48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ec8:	4b31      	ldr	r3, [pc, #196]	; (8004f90 <xTaskIncrementTick+0x150>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d203      	bcs.n	8004ee8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ee0:	4a2e      	ldr	r2, [pc, #184]	; (8004f9c <xTaskIncrementTick+0x15c>)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ee6:	e02f      	b.n	8004f48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	3304      	adds	r3, #4
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fe ff13 	bl	8003d18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	3318      	adds	r3, #24
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe ff0a 	bl	8003d18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f08:	4b25      	ldr	r3, [pc, #148]	; (8004fa0 <xTaskIncrementTick+0x160>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d903      	bls.n	8004f18 <xTaskIncrementTick+0xd8>
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	4a22      	ldr	r2, [pc, #136]	; (8004fa0 <xTaskIncrementTick+0x160>)
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4a1f      	ldr	r2, [pc, #124]	; (8004fa4 <xTaskIncrementTick+0x164>)
 8004f26:	441a      	add	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f7fe fe95 	bl	8003c5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f38:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <xTaskIncrementTick+0x168>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d3b8      	bcc.n	8004eb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f42:	2301      	movs	r3, #1
 8004f44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f46:	e7b5      	b.n	8004eb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f48:	4b17      	ldr	r3, [pc, #92]	; (8004fa8 <xTaskIncrementTick+0x168>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4e:	4915      	ldr	r1, [pc, #84]	; (8004fa4 <xTaskIncrementTick+0x164>)
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d901      	bls.n	8004f64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004f60:	2301      	movs	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004f64:	4b11      	ldr	r3, [pc, #68]	; (8004fac <xTaskIncrementTick+0x16c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e004      	b.n	8004f7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f72:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <xTaskIncrementTick+0x170>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3301      	adds	r3, #1
 8004f78:	4a0d      	ldr	r2, [pc, #52]	; (8004fb0 <xTaskIncrementTick+0x170>)
 8004f7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f7c:	697b      	ldr	r3, [r7, #20]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000d24 	.word	0x20000d24
 8004f8c:	20000d00 	.word	0x20000d00
 8004f90:	20000cb4 	.word	0x20000cb4
 8004f94:	20000cb8 	.word	0x20000cb8
 8004f98:	20000d14 	.word	0x20000d14
 8004f9c:	20000d1c 	.word	0x20000d1c
 8004fa0:	20000d04 	.word	0x20000d04
 8004fa4:	2000082c 	.word	0x2000082c
 8004fa8:	20000828 	.word	0x20000828
 8004fac:	20000d10 	.word	0x20000d10
 8004fb0:	20000d0c 	.word	0x20000d0c

08004fb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fba:	4b28      	ldr	r3, [pc, #160]	; (800505c <vTaskSwitchContext+0xa8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fc2:	4b27      	ldr	r3, [pc, #156]	; (8005060 <vTaskSwitchContext+0xac>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fc8:	e041      	b.n	800504e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004fca:	4b25      	ldr	r3, [pc, #148]	; (8005060 <vTaskSwitchContext+0xac>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd0:	4b24      	ldr	r3, [pc, #144]	; (8005064 <vTaskSwitchContext+0xb0>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	e010      	b.n	8004ffa <vTaskSwitchContext+0x46>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	607b      	str	r3, [r7, #4]
}
 8004ff0:	bf00      	nop
 8004ff2:	e7fe      	b.n	8004ff2 <vTaskSwitchContext+0x3e>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]
 8004ffa:	491b      	ldr	r1, [pc, #108]	; (8005068 <vTaskSwitchContext+0xb4>)
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0e4      	beq.n	8004fd8 <vTaskSwitchContext+0x24>
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4a13      	ldr	r2, [pc, #76]	; (8005068 <vTaskSwitchContext+0xb4>)
 800501a:	4413      	add	r3, r2
 800501c:	60bb      	str	r3, [r7, #8]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	605a      	str	r2, [r3, #4]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	3308      	adds	r3, #8
 8005030:	429a      	cmp	r2, r3
 8005032:	d104      	bne.n	800503e <vTaskSwitchContext+0x8a>
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4a09      	ldr	r2, [pc, #36]	; (800506c <vTaskSwitchContext+0xb8>)
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	4a06      	ldr	r2, [pc, #24]	; (8005064 <vTaskSwitchContext+0xb0>)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6013      	str	r3, [r2, #0]
}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20000d24 	.word	0x20000d24
 8005060:	20000d10 	.word	0x20000d10
 8005064:	20000d04 	.word	0x20000d04
 8005068:	2000082c 	.word	0x2000082c
 800506c:	20000828 	.word	0x20000828

08005070 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10a      	bne.n	8005096 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	60fb      	str	r3, [r7, #12]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005096:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <vTaskPlaceOnEventList+0x44>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3318      	adds	r3, #24
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fe fe01 	bl	8003ca6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050a4:	2101      	movs	r1, #1
 80050a6:	6838      	ldr	r0, [r7, #0]
 80050a8:	f000 fa7c 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
}
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20000828 	.word	0x20000828

080050b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10a      	bne.n	80050e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	617b      	str	r3, [r7, #20]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <vTaskPlaceOnEventListRestricted+0x54>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3318      	adds	r3, #24
 80050e6:	4619      	mov	r1, r3
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7fe fdb8 	bl	8003c5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80050f4:	f04f 33ff 	mov.w	r3, #4294967295
 80050f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	68b8      	ldr	r0, [r7, #8]
 80050fe:	f000 fa51 	bl	80055a4 <prvAddCurrentTaskToDelayedList>
	}
 8005102:	bf00      	nop
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20000828 	.word	0x20000828

08005110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10a      	bne.n	800513c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60fb      	str	r3, [r7, #12]
}
 8005138:	bf00      	nop
 800513a:	e7fe      	b.n	800513a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	3318      	adds	r3, #24
 8005140:	4618      	mov	r0, r3
 8005142:	f7fe fde9 	bl	8003d18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005146:	4b1e      	ldr	r3, [pc, #120]	; (80051c0 <xTaskRemoveFromEventList+0xb0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d11d      	bne.n	800518a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	3304      	adds	r3, #4
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe fde0 	bl	8003d18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515c:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <xTaskRemoveFromEventList+0xb4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d903      	bls.n	800516c <xTaskRemoveFromEventList+0x5c>
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	4a16      	ldr	r2, [pc, #88]	; (80051c4 <xTaskRemoveFromEventList+0xb4>)
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4a13      	ldr	r2, [pc, #76]	; (80051c8 <xTaskRemoveFromEventList+0xb8>)
 800517a:	441a      	add	r2, r3
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	3304      	adds	r3, #4
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f7fe fd6b 	bl	8003c5e <vListInsertEnd>
 8005188:	e005      	b.n	8005196 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	3318      	adds	r3, #24
 800518e:	4619      	mov	r1, r3
 8005190:	480e      	ldr	r0, [pc, #56]	; (80051cc <xTaskRemoveFromEventList+0xbc>)
 8005192:	f7fe fd64 	bl	8003c5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <xTaskRemoveFromEventList+0xc0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d905      	bls.n	80051b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80051a8:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <xTaskRemoveFromEventList+0xc4>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	e001      	b.n	80051b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80051b4:	697b      	ldr	r3, [r7, #20]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000d24 	.word	0x20000d24
 80051c4:	20000d04 	.word	0x20000d04
 80051c8:	2000082c 	.word	0x2000082c
 80051cc:	20000cbc 	.word	0x20000cbc
 80051d0:	20000828 	.word	0x20000828
 80051d4:	20000d10 	.word	0x20000d10

080051d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051e0:	4b06      	ldr	r3, [pc, #24]	; (80051fc <vTaskInternalSetTimeOutState+0x24>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <vTaskInternalSetTimeOutState+0x28>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	605a      	str	r2, [r3, #4]
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	20000d14 	.word	0x20000d14
 8005200:	20000d00 	.word	0x20000d00

08005204 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	613b      	str	r3, [r7, #16]
}
 8005226:	bf00      	nop
 8005228:	e7fe      	b.n	8005228 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	60fb      	str	r3, [r7, #12]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005246:	f000 fe7d 	bl	8005f44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800524a:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <xTaskCheckForTimeOut+0xbc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005262:	d102      	bne.n	800526a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005264:	2300      	movs	r3, #0
 8005266:	61fb      	str	r3, [r7, #28]
 8005268:	e023      	b.n	80052b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4b15      	ldr	r3, [pc, #84]	; (80052c4 <xTaskCheckForTimeOut+0xc0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d007      	beq.n	8005286 <xTaskCheckForTimeOut+0x82>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	429a      	cmp	r2, r3
 800527e:	d302      	bcc.n	8005286 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005280:	2301      	movs	r3, #1
 8005282:	61fb      	str	r3, [r7, #28]
 8005284:	e015      	b.n	80052b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	429a      	cmp	r2, r3
 800528e:	d20b      	bcs.n	80052a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	1ad2      	subs	r2, r2, r3
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff ff9b 	bl	80051d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
 80052a6:	e004      	b.n	80052b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80052ae:	2301      	movs	r3, #1
 80052b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80052b2:	f000 fe77 	bl	8005fa4 <vPortExitCritical>

	return xReturn;
 80052b6:	69fb      	ldr	r3, [r7, #28]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3720      	adds	r7, #32
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20000d00 	.word	0x20000d00
 80052c4:	20000d14 	.word	0x20000d14

080052c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052cc:	4b03      	ldr	r3, [pc, #12]	; (80052dc <vTaskMissedYield+0x14>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	601a      	str	r2, [r3, #0]
}
 80052d2:	bf00      	nop
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	20000d10 	.word	0x20000d10

080052e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052e8:	f000 f852 	bl	8005390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052ec:	4b06      	ldr	r3, [pc, #24]	; (8005308 <prvIdleTask+0x28>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d9f9      	bls.n	80052e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052f4:	4b05      	ldr	r3, [pc, #20]	; (800530c <prvIdleTask+0x2c>)
 80052f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005304:	e7f0      	b.n	80052e8 <prvIdleTask+0x8>
 8005306:	bf00      	nop
 8005308:	2000082c 	.word	0x2000082c
 800530c:	e000ed04 	.word	0xe000ed04

08005310 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005316:	2300      	movs	r3, #0
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	e00c      	b.n	8005336 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4a12      	ldr	r2, [pc, #72]	; (8005370 <prvInitialiseTaskLists+0x60>)
 8005328:	4413      	add	r3, r2
 800532a:	4618      	mov	r0, r3
 800532c:	f7fe fc6a 	bl	8003c04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3301      	adds	r3, #1
 8005334:	607b      	str	r3, [r7, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b37      	cmp	r3, #55	; 0x37
 800533a:	d9ef      	bls.n	800531c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800533c:	480d      	ldr	r0, [pc, #52]	; (8005374 <prvInitialiseTaskLists+0x64>)
 800533e:	f7fe fc61 	bl	8003c04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005342:	480d      	ldr	r0, [pc, #52]	; (8005378 <prvInitialiseTaskLists+0x68>)
 8005344:	f7fe fc5e 	bl	8003c04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005348:	480c      	ldr	r0, [pc, #48]	; (800537c <prvInitialiseTaskLists+0x6c>)
 800534a:	f7fe fc5b 	bl	8003c04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800534e:	480c      	ldr	r0, [pc, #48]	; (8005380 <prvInitialiseTaskLists+0x70>)
 8005350:	f7fe fc58 	bl	8003c04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005354:	480b      	ldr	r0, [pc, #44]	; (8005384 <prvInitialiseTaskLists+0x74>)
 8005356:	f7fe fc55 	bl	8003c04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800535a:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <prvInitialiseTaskLists+0x78>)
 800535c:	4a05      	ldr	r2, [pc, #20]	; (8005374 <prvInitialiseTaskLists+0x64>)
 800535e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005360:	4b0a      	ldr	r3, [pc, #40]	; (800538c <prvInitialiseTaskLists+0x7c>)
 8005362:	4a05      	ldr	r2, [pc, #20]	; (8005378 <prvInitialiseTaskLists+0x68>)
 8005364:	601a      	str	r2, [r3, #0]
}
 8005366:	bf00      	nop
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	2000082c 	.word	0x2000082c
 8005374:	20000c8c 	.word	0x20000c8c
 8005378:	20000ca0 	.word	0x20000ca0
 800537c:	20000cbc 	.word	0x20000cbc
 8005380:	20000cd0 	.word	0x20000cd0
 8005384:	20000ce8 	.word	0x20000ce8
 8005388:	20000cb4 	.word	0x20000cb4
 800538c:	20000cb8 	.word	0x20000cb8

08005390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005396:	e019      	b.n	80053cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005398:	f000 fdd4 	bl	8005f44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800539c:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <prvCheckTasksWaitingTermination+0x50>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fe fcb5 	bl	8003d18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053ae:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <prvCheckTasksWaitingTermination+0x54>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	4a0b      	ldr	r2, [pc, #44]	; (80053e4 <prvCheckTasksWaitingTermination+0x54>)
 80053b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053b8:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <prvCheckTasksWaitingTermination+0x58>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3b01      	subs	r3, #1
 80053be:	4a0a      	ldr	r2, [pc, #40]	; (80053e8 <prvCheckTasksWaitingTermination+0x58>)
 80053c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053c2:	f000 fdef 	bl	8005fa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f810 	bl	80053ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053cc:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <prvCheckTasksWaitingTermination+0x58>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e1      	bne.n	8005398 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000cd0 	.word	0x20000cd0
 80053e4:	20000cfc 	.word	0x20000cfc
 80053e8:	20000ce4 	.word	0x20000ce4

080053ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d108      	bne.n	8005410 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	4618      	mov	r0, r3
 8005404:	f000 ff8c 	bl	8006320 <vPortFree>
				vPortFree( pxTCB );
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 ff89 	bl	8006320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800540e:	e018      	b.n	8005442 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005416:	2b01      	cmp	r3, #1
 8005418:	d103      	bne.n	8005422 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 ff80 	bl	8006320 <vPortFree>
	}
 8005420:	e00f      	b.n	8005442 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005428:	2b02      	cmp	r3, #2
 800542a:	d00a      	beq.n	8005442 <prvDeleteTCB+0x56>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	60fb      	str	r3, [r7, #12]
}
 800543e:	bf00      	nop
 8005440:	e7fe      	b.n	8005440 <prvDeleteTCB+0x54>
	}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005452:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <prvResetNextTaskUnblockTime+0x38>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d104      	bne.n	8005466 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <prvResetNextTaskUnblockTime+0x3c>)
 800545e:	f04f 32ff 	mov.w	r2, #4294967295
 8005462:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005464:	e008      	b.n	8005478 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005466:	4b07      	ldr	r3, [pc, #28]	; (8005484 <prvResetNextTaskUnblockTime+0x38>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	4a04      	ldr	r2, [pc, #16]	; (8005488 <prvResetNextTaskUnblockTime+0x3c>)
 8005476:	6013      	str	r3, [r2, #0]
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	20000cb4 	.word	0x20000cb4
 8005488:	20000d1c 	.word	0x20000d1c

0800548c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005492:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <xTaskGetSchedulerState+0x34>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d102      	bne.n	80054a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800549a:	2301      	movs	r3, #1
 800549c:	607b      	str	r3, [r7, #4]
 800549e:	e008      	b.n	80054b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054a0:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <xTaskGetSchedulerState+0x38>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054a8:	2302      	movs	r3, #2
 80054aa:	607b      	str	r3, [r7, #4]
 80054ac:	e001      	b.n	80054b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054ae:	2300      	movs	r3, #0
 80054b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054b2:	687b      	ldr	r3, [r7, #4]
	}
 80054b4:	4618      	mov	r0, r3
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	20000d08 	.word	0x20000d08
 80054c4:	20000d24 	.word	0x20000d24

080054c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d056      	beq.n	800558c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054de:	4b2e      	ldr	r3, [pc, #184]	; (8005598 <xTaskPriorityDisinherit+0xd0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d00a      	beq.n	80054fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	60fb      	str	r3, [r7, #12]
}
 80054fa:	bf00      	nop
 80054fc:	e7fe      	b.n	80054fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10a      	bne.n	800551c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	60bb      	str	r3, [r7, #8]
}
 8005518:	bf00      	nop
 800551a:	e7fe      	b.n	800551a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005520:	1e5a      	subs	r2, r3, #1
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552e:	429a      	cmp	r2, r3
 8005530:	d02c      	beq.n	800558c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005536:	2b00      	cmp	r3, #0
 8005538:	d128      	bne.n	800558c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	3304      	adds	r3, #4
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe fbea 	bl	8003d18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555c:	4b0f      	ldr	r3, [pc, #60]	; (800559c <xTaskPriorityDisinherit+0xd4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d903      	bls.n	800556c <xTaskPriorityDisinherit+0xa4>
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005568:	4a0c      	ldr	r2, [pc, #48]	; (800559c <xTaskPriorityDisinherit+0xd4>)
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <xTaskPriorityDisinherit+0xd8>)
 800557a:	441a      	add	r2, r3
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	3304      	adds	r3, #4
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f7fe fb6b 	bl	8003c5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005588:	2301      	movs	r3, #1
 800558a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800558c:	697b      	ldr	r3, [r7, #20]
	}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000828 	.word	0x20000828
 800559c:	20000d04 	.word	0x20000d04
 80055a0:	2000082c 	.word	0x2000082c

080055a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055ae:	4b21      	ldr	r3, [pc, #132]	; (8005634 <prvAddCurrentTaskToDelayedList+0x90>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055b4:	4b20      	ldr	r3, [pc, #128]	; (8005638 <prvAddCurrentTaskToDelayedList+0x94>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3304      	adds	r3, #4
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe fbac 	bl	8003d18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c6:	d10a      	bne.n	80055de <prvAddCurrentTaskToDelayedList+0x3a>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ce:	4b1a      	ldr	r3, [pc, #104]	; (8005638 <prvAddCurrentTaskToDelayedList+0x94>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4619      	mov	r1, r3
 80055d6:	4819      	ldr	r0, [pc, #100]	; (800563c <prvAddCurrentTaskToDelayedList+0x98>)
 80055d8:	f7fe fb41 	bl	8003c5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055dc:	e026      	b.n	800562c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4413      	add	r3, r2
 80055e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <prvAddCurrentTaskToDelayedList+0x94>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d209      	bcs.n	800560a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f6:	4b12      	ldr	r3, [pc, #72]	; (8005640 <prvAddCurrentTaskToDelayedList+0x9c>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <prvAddCurrentTaskToDelayedList+0x94>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3304      	adds	r3, #4
 8005600:	4619      	mov	r1, r3
 8005602:	4610      	mov	r0, r2
 8005604:	f7fe fb4f 	bl	8003ca6 <vListInsert>
}
 8005608:	e010      	b.n	800562c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800560a:	4b0e      	ldr	r3, [pc, #56]	; (8005644 <prvAddCurrentTaskToDelayedList+0xa0>)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <prvAddCurrentTaskToDelayedList+0x94>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3304      	adds	r3, #4
 8005614:	4619      	mov	r1, r3
 8005616:	4610      	mov	r0, r2
 8005618:	f7fe fb45 	bl	8003ca6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800561c:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <prvAddCurrentTaskToDelayedList+0xa4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	429a      	cmp	r2, r3
 8005624:	d202      	bcs.n	800562c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005626:	4a08      	ldr	r2, [pc, #32]	; (8005648 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	6013      	str	r3, [r2, #0]
}
 800562c:	bf00      	nop
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	20000d00 	.word	0x20000d00
 8005638:	20000828 	.word	0x20000828
 800563c:	20000ce8 	.word	0x20000ce8
 8005640:	20000cb8 	.word	0x20000cb8
 8005644:	20000cb4 	.word	0x20000cb4
 8005648:	20000d1c 	.word	0x20000d1c

0800564c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08a      	sub	sp, #40	; 0x28
 8005650:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005656:	f000 fb07 	bl	8005c68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800565a:	4b1c      	ldr	r3, [pc, #112]	; (80056cc <xTimerCreateTimerTask+0x80>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d021      	beq.n	80056a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800566a:	1d3a      	adds	r2, r7, #4
 800566c:	f107 0108 	add.w	r1, r7, #8
 8005670:	f107 030c 	add.w	r3, r7, #12
 8005674:	4618      	mov	r0, r3
 8005676:	f7fe faab 	bl	8003bd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	9202      	str	r2, [sp, #8]
 8005682:	9301      	str	r3, [sp, #4]
 8005684:	2302      	movs	r3, #2
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	2300      	movs	r3, #0
 800568a:	460a      	mov	r2, r1
 800568c:	4910      	ldr	r1, [pc, #64]	; (80056d0 <xTimerCreateTimerTask+0x84>)
 800568e:	4811      	ldr	r0, [pc, #68]	; (80056d4 <xTimerCreateTimerTask+0x88>)
 8005690:	f7ff f8de 	bl	8004850 <xTaskCreateStatic>
 8005694:	4603      	mov	r3, r0
 8005696:	4a10      	ldr	r2, [pc, #64]	; (80056d8 <xTimerCreateTimerTask+0x8c>)
 8005698:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800569a:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <xTimerCreateTimerTask+0x8c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80056a2:	2301      	movs	r3, #1
 80056a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	613b      	str	r3, [r7, #16]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80056c2:	697b      	ldr	r3, [r7, #20]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20000d58 	.word	0x20000d58
 80056d0:	08006630 	.word	0x08006630
 80056d4:	08005811 	.word	0x08005811
 80056d8:	20000d5c 	.word	0x20000d5c

080056dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08a      	sub	sp, #40	; 0x28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <xTimerGenericCommand+0x2e>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	623b      	str	r3, [r7, #32]
}
 8005706:	bf00      	nop
 8005708:	e7fe      	b.n	8005708 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800570a:	4b1a      	ldr	r3, [pc, #104]	; (8005774 <xTimerGenericCommand+0x98>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d02a      	beq.n	8005768 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b05      	cmp	r3, #5
 8005722:	dc18      	bgt.n	8005756 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005724:	f7ff feb2 	bl	800548c <xTaskGetSchedulerState>
 8005728:	4603      	mov	r3, r0
 800572a:	2b02      	cmp	r3, #2
 800572c:	d109      	bne.n	8005742 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800572e:	4b11      	ldr	r3, [pc, #68]	; (8005774 <xTimerGenericCommand+0x98>)
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	f107 0110 	add.w	r1, r7, #16
 8005736:	2300      	movs	r3, #0
 8005738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800573a:	f7fe fca1 	bl	8004080 <xQueueGenericSend>
 800573e:	6278      	str	r0, [r7, #36]	; 0x24
 8005740:	e012      	b.n	8005768 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005742:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <xTimerGenericCommand+0x98>)
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	f107 0110 	add.w	r1, r7, #16
 800574a:	2300      	movs	r3, #0
 800574c:	2200      	movs	r2, #0
 800574e:	f7fe fc97 	bl	8004080 <xQueueGenericSend>
 8005752:	6278      	str	r0, [r7, #36]	; 0x24
 8005754:	e008      	b.n	8005768 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005756:	4b07      	ldr	r3, [pc, #28]	; (8005774 <xTimerGenericCommand+0x98>)
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	f107 0110 	add.w	r1, r7, #16
 800575e:	2300      	movs	r3, #0
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	f7fe fd8b 	bl	800427c <xQueueGenericSendFromISR>
 8005766:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800576a:	4618      	mov	r0, r3
 800576c:	3728      	adds	r7, #40	; 0x28
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000d58 	.word	0x20000d58

08005778 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af02      	add	r7, sp, #8
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005782:	4b22      	ldr	r3, [pc, #136]	; (800580c <prvProcessExpiredTimer+0x94>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	3304      	adds	r3, #4
 8005790:	4618      	mov	r0, r3
 8005792:	f7fe fac1 	bl	8003d18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d022      	beq.n	80057ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	699a      	ldr	r2, [r3, #24]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	18d1      	adds	r1, r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	6978      	ldr	r0, [r7, #20]
 80057b2:	f000 f8d1 	bl	8005958 <prvInsertTimerInActiveList>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01f      	beq.n	80057fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057bc:	2300      	movs	r3, #0
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	2300      	movs	r3, #0
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	2100      	movs	r1, #0
 80057c6:	6978      	ldr	r0, [r7, #20]
 80057c8:	f7ff ff88 	bl	80056dc <xTimerGenericCommand>
 80057cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d113      	bne.n	80057fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	60fb      	str	r3, [r7, #12]
}
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	6978      	ldr	r0, [r7, #20]
 8005802:	4798      	blx	r3
}
 8005804:	bf00      	nop
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000d50 	.word	0x20000d50

08005810 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005818:	f107 0308 	add.w	r3, r7, #8
 800581c:	4618      	mov	r0, r3
 800581e:	f000 f857 	bl	80058d0 <prvGetNextExpireTime>
 8005822:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4619      	mov	r1, r3
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f803 	bl	8005834 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800582e:	f000 f8d5 	bl	80059dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005832:	e7f1      	b.n	8005818 <prvTimerTask+0x8>

08005834 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800583e:	f7ff fa43 	bl	8004cc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005842:	f107 0308 	add.w	r3, r7, #8
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f866 	bl	8005918 <prvSampleTimeNow>
 800584c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d130      	bne.n	80058b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10a      	bne.n	8005870 <prvProcessTimerOrBlockTask+0x3c>
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	429a      	cmp	r2, r3
 8005860:	d806      	bhi.n	8005870 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005862:	f7ff fa3f 	bl	8004ce4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005866:	68f9      	ldr	r1, [r7, #12]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff ff85 	bl	8005778 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800586e:	e024      	b.n	80058ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d008      	beq.n	8005888 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005876:	4b13      	ldr	r3, [pc, #76]	; (80058c4 <prvProcessTimerOrBlockTask+0x90>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <prvProcessTimerOrBlockTask+0x50>
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <prvProcessTimerOrBlockTask+0x52>
 8005884:	2300      	movs	r3, #0
 8005886:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005888:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <prvProcessTimerOrBlockTask+0x94>)
 800588a:	6818      	ldr	r0, [r3, #0]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	4619      	mov	r1, r3
 8005896:	f7fe ffa7 	bl	80047e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800589a:	f7ff fa23 	bl	8004ce4 <xTaskResumeAll>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80058a4:	4b09      	ldr	r3, [pc, #36]	; (80058cc <prvProcessTimerOrBlockTask+0x98>)
 80058a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	f3bf 8f6f 	isb	sy
}
 80058b4:	e001      	b.n	80058ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80058b6:	f7ff fa15 	bl	8004ce4 <xTaskResumeAll>
}
 80058ba:	bf00      	nop
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000d54 	.word	0x20000d54
 80058c8:	20000d58 	.word	0x20000d58
 80058cc:	e000ed04 	.word	0xe000ed04

080058d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058d8:	4b0e      	ldr	r3, [pc, #56]	; (8005914 <prvGetNextExpireTime+0x44>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <prvGetNextExpireTime+0x16>
 80058e2:	2201      	movs	r2, #1
 80058e4:	e000      	b.n	80058e8 <prvGetNextExpireTime+0x18>
 80058e6:	2200      	movs	r2, #0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d105      	bne.n	8005900 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058f4:	4b07      	ldr	r3, [pc, #28]	; (8005914 <prvGetNextExpireTime+0x44>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	e001      	b.n	8005904 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005904:	68fb      	ldr	r3, [r7, #12]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20000d50 	.word	0x20000d50

08005918 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005920:	f7ff fa7e 	bl	8004e20 <xTaskGetTickCount>
 8005924:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005926:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <prvSampleTimeNow+0x3c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	429a      	cmp	r2, r3
 800592e:	d205      	bcs.n	800593c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005930:	f000 f936 	bl	8005ba0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	e002      	b.n	8005942 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005942:	4a04      	ldr	r2, [pc, #16]	; (8005954 <prvSampleTimeNow+0x3c>)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005948:	68fb      	ldr	r3, [r7, #12]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000d60 	.word	0x20000d60

08005958 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005966:	2300      	movs	r3, #0
 8005968:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	429a      	cmp	r2, r3
 800597c:	d812      	bhi.n	80059a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	1ad2      	subs	r2, r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	429a      	cmp	r2, r3
 800598a:	d302      	bcc.n	8005992 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800598c:	2301      	movs	r3, #1
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	e01b      	b.n	80059ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005992:	4b10      	ldr	r3, [pc, #64]	; (80059d4 <prvInsertTimerInActiveList+0x7c>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3304      	adds	r3, #4
 800599a:	4619      	mov	r1, r3
 800599c:	4610      	mov	r0, r2
 800599e:	f7fe f982 	bl	8003ca6 <vListInsert>
 80059a2:	e012      	b.n	80059ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d206      	bcs.n	80059ba <prvInsertTimerInActiveList+0x62>
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d302      	bcc.n	80059ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80059b4:	2301      	movs	r3, #1
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	e007      	b.n	80059ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059ba:	4b07      	ldr	r3, [pc, #28]	; (80059d8 <prvInsertTimerInActiveList+0x80>)
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3304      	adds	r3, #4
 80059c2:	4619      	mov	r1, r3
 80059c4:	4610      	mov	r0, r2
 80059c6:	f7fe f96e 	bl	8003ca6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80059ca:	697b      	ldr	r3, [r7, #20]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	20000d54 	.word	0x20000d54
 80059d8:	20000d50 	.word	0x20000d50

080059dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08e      	sub	sp, #56	; 0x38
 80059e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059e2:	e0ca      	b.n	8005b7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	da18      	bge.n	8005a1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80059ea:	1d3b      	adds	r3, r7, #4
 80059ec:	3304      	adds	r3, #4
 80059ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	61fb      	str	r3, [r7, #28]
}
 8005a08:	bf00      	nop
 8005a0a:	e7fe      	b.n	8005a0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a12:	6850      	ldr	r0, [r2, #4]
 8005a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a16:	6892      	ldr	r2, [r2, #8]
 8005a18:	4611      	mov	r1, r2
 8005a1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f2c0 80ab 	blt.w	8005b7a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d004      	beq.n	8005a3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	3304      	adds	r3, #4
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fe f96f 	bl	8003d18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a3a:	463b      	mov	r3, r7
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff ff6b 	bl	8005918 <prvSampleTimeNow>
 8005a42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b09      	cmp	r3, #9
 8005a48:	f200 8096 	bhi.w	8005b78 <prvProcessReceivedCommands+0x19c>
 8005a4c:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <prvProcessReceivedCommands+0x78>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005a7d 	.word	0x08005a7d
 8005a58:	08005a7d 	.word	0x08005a7d
 8005a5c:	08005a7d 	.word	0x08005a7d
 8005a60:	08005af1 	.word	0x08005af1
 8005a64:	08005b05 	.word	0x08005b05
 8005a68:	08005b4f 	.word	0x08005b4f
 8005a6c:	08005a7d 	.word	0x08005a7d
 8005a70:	08005a7d 	.word	0x08005a7d
 8005a74:	08005af1 	.word	0x08005af1
 8005a78:	08005b05 	.word	0x08005b05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a82:	f043 0301 	orr.w	r3, r3, #1
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	18d1      	adds	r1, r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a9c:	f7ff ff5c 	bl	8005958 <prvInsertTimerInActiveList>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d069      	beq.n	8005b7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d05e      	beq.n	8005b7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	441a      	add	r2, r3
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	2100      	movs	r1, #0
 8005acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ace:	f7ff fe05 	bl	80056dc <xTimerGenericCommand>
 8005ad2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d14f      	bne.n	8005b7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	61bb      	str	r3, [r7, #24]
}
 8005aec:	bf00      	nop
 8005aee:	e7fe      	b.n	8005aee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005af6:	f023 0301 	bic.w	r3, r3, #1
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005b02:	e03a      	b.n	8005b7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b0a:	f043 0301 	orr.w	r3, r3, #1
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	617b      	str	r3, [r7, #20]
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	18d1      	adds	r1, r2, r3
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b48:	f7ff ff06 	bl	8005958 <prvInsertTimerInActiveList>
					break;
 8005b4c:	e015      	b.n	8005b7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d103      	bne.n	8005b64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b5e:	f000 fbdf 	bl	8006320 <vPortFree>
 8005b62:	e00a      	b.n	8005b7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b6a:	f023 0301 	bic.w	r3, r3, #1
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005b76:	e000      	b.n	8005b7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005b78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b7a:	4b08      	ldr	r3, [pc, #32]	; (8005b9c <prvProcessReceivedCommands+0x1c0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	1d39      	adds	r1, r7, #4
 8005b80:	2200      	movs	r2, #0
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fe fc16 	bl	80043b4 <xQueueReceive>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f47f af2a 	bne.w	80059e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	3730      	adds	r7, #48	; 0x30
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000d58 	.word	0x20000d58

08005ba0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ba6:	e048      	b.n	8005c3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ba8:	4b2d      	ldr	r3, [pc, #180]	; (8005c60 <prvSwitchTimerLists+0xc0>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bb2:	4b2b      	ldr	r3, [pc, #172]	; (8005c60 <prvSwitchTimerLists+0xc0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fe f8a9 	bl	8003d18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d02e      	beq.n	8005c3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4413      	add	r3, r2
 8005be4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d90e      	bls.n	8005c0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bfa:	4b19      	ldr	r3, [pc, #100]	; (8005c60 <prvSwitchTimerLists+0xc0>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3304      	adds	r3, #4
 8005c02:	4619      	mov	r1, r3
 8005c04:	4610      	mov	r0, r2
 8005c06:	f7fe f84e 	bl	8003ca6 <vListInsert>
 8005c0a:	e016      	b.n	8005c3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	2300      	movs	r3, #0
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	2100      	movs	r1, #0
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7ff fd60 	bl	80056dc <xTimerGenericCommand>
 8005c1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	603b      	str	r3, [r7, #0]
}
 8005c36:	bf00      	nop
 8005c38:	e7fe      	b.n	8005c38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c3a:	4b09      	ldr	r3, [pc, #36]	; (8005c60 <prvSwitchTimerLists+0xc0>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1b1      	bne.n	8005ba8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005c44:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <prvSwitchTimerLists+0xc0>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005c4a:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <prvSwitchTimerLists+0xc4>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a04      	ldr	r2, [pc, #16]	; (8005c60 <prvSwitchTimerLists+0xc0>)
 8005c50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005c52:	4a04      	ldr	r2, [pc, #16]	; (8005c64 <prvSwitchTimerLists+0xc4>)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	6013      	str	r3, [r2, #0]
}
 8005c58:	bf00      	nop
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20000d50 	.word	0x20000d50
 8005c64:	20000d54 	.word	0x20000d54

08005c68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005c6e:	f000 f969 	bl	8005f44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005c72:	4b15      	ldr	r3, [pc, #84]	; (8005cc8 <prvCheckForValidListAndQueue+0x60>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d120      	bne.n	8005cbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005c7a:	4814      	ldr	r0, [pc, #80]	; (8005ccc <prvCheckForValidListAndQueue+0x64>)
 8005c7c:	f7fd ffc2 	bl	8003c04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005c80:	4813      	ldr	r0, [pc, #76]	; (8005cd0 <prvCheckForValidListAndQueue+0x68>)
 8005c82:	f7fd ffbf 	bl	8003c04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c86:	4b13      	ldr	r3, [pc, #76]	; (8005cd4 <prvCheckForValidListAndQueue+0x6c>)
 8005c88:	4a10      	ldr	r2, [pc, #64]	; (8005ccc <prvCheckForValidListAndQueue+0x64>)
 8005c8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c8c:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <prvCheckForValidListAndQueue+0x70>)
 8005c8e:	4a10      	ldr	r2, [pc, #64]	; (8005cd0 <prvCheckForValidListAndQueue+0x68>)
 8005c90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c92:	2300      	movs	r3, #0
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <prvCheckForValidListAndQueue+0x74>)
 8005c98:	4a11      	ldr	r2, [pc, #68]	; (8005ce0 <prvCheckForValidListAndQueue+0x78>)
 8005c9a:	2110      	movs	r1, #16
 8005c9c:	200a      	movs	r0, #10
 8005c9e:	f7fe f8cd 	bl	8003e3c <xQueueGenericCreateStatic>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4a08      	ldr	r2, [pc, #32]	; (8005cc8 <prvCheckForValidListAndQueue+0x60>)
 8005ca6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ca8:	4b07      	ldr	r3, [pc, #28]	; (8005cc8 <prvCheckForValidListAndQueue+0x60>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005cb0:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <prvCheckForValidListAndQueue+0x60>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	490b      	ldr	r1, [pc, #44]	; (8005ce4 <prvCheckForValidListAndQueue+0x7c>)
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fe fd6c 	bl	8004794 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cbc:	f000 f972 	bl	8005fa4 <vPortExitCritical>
}
 8005cc0:	bf00      	nop
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20000d58 	.word	0x20000d58
 8005ccc:	20000d28 	.word	0x20000d28
 8005cd0:	20000d3c 	.word	0x20000d3c
 8005cd4:	20000d50 	.word	0x20000d50
 8005cd8:	20000d54 	.word	0x20000d54
 8005cdc:	20000e04 	.word	0x20000e04
 8005ce0:	20000d64 	.word	0x20000d64
 8005ce4:	08006638 	.word	0x08006638

08005ce8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3b04      	subs	r3, #4
 8005cf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3b04      	subs	r3, #4
 8005d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f023 0201 	bic.w	r2, r3, #1
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	3b04      	subs	r3, #4
 8005d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d18:	4a0c      	ldr	r2, [pc, #48]	; (8005d4c <pxPortInitialiseStack+0x64>)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3b14      	subs	r3, #20
 8005d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3b04      	subs	r3, #4
 8005d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f06f 0202 	mvn.w	r2, #2
 8005d36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3b20      	subs	r3, #32
 8005d3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	08005d51 	.word	0x08005d51

08005d50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005d56:	2300      	movs	r3, #0
 8005d58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005d5a:	4b12      	ldr	r3, [pc, #72]	; (8005da4 <prvTaskExitError+0x54>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d62:	d00a      	beq.n	8005d7a <prvTaskExitError+0x2a>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	60fb      	str	r3, [r7, #12]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <prvTaskExitError+0x28>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	60bb      	str	r3, [r7, #8]
}
 8005d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d8e:	bf00      	nop
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0fc      	beq.n	8005d90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d96:	bf00      	nop
 8005d98:	bf00      	nop
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	2000000c 	.word	0x2000000c
	...

08005db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005db0:	4b07      	ldr	r3, [pc, #28]	; (8005dd0 <pxCurrentTCBConst2>)
 8005db2:	6819      	ldr	r1, [r3, #0]
 8005db4:	6808      	ldr	r0, [r1, #0]
 8005db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dba:	f380 8809 	msr	PSP, r0
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f04f 0000 	mov.w	r0, #0
 8005dc6:	f380 8811 	msr	BASEPRI, r0
 8005dca:	4770      	bx	lr
 8005dcc:	f3af 8000 	nop.w

08005dd0 <pxCurrentTCBConst2>:
 8005dd0:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop

08005dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005dd8:	4808      	ldr	r0, [pc, #32]	; (8005dfc <prvPortStartFirstTask+0x24>)
 8005dda:	6800      	ldr	r0, [r0, #0]
 8005ddc:	6800      	ldr	r0, [r0, #0]
 8005dde:	f380 8808 	msr	MSP, r0
 8005de2:	f04f 0000 	mov.w	r0, #0
 8005de6:	f380 8814 	msr	CONTROL, r0
 8005dea:	b662      	cpsie	i
 8005dec:	b661      	cpsie	f
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	df00      	svc	0
 8005df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005dfa:	bf00      	nop
 8005dfc:	e000ed08 	.word	0xe000ed08

08005e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e06:	4b46      	ldr	r3, [pc, #280]	; (8005f20 <xPortStartScheduler+0x120>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a46      	ldr	r2, [pc, #280]	; (8005f24 <xPortStartScheduler+0x124>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d10a      	bne.n	8005e26 <xPortStartScheduler+0x26>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	613b      	str	r3, [r7, #16]
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e26:	4b3e      	ldr	r3, [pc, #248]	; (8005f20 <xPortStartScheduler+0x120>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a3f      	ldr	r2, [pc, #252]	; (8005f28 <xPortStartScheduler+0x128>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d10a      	bne.n	8005e46 <xPortStartScheduler+0x46>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	60fb      	str	r3, [r7, #12]
}
 8005e42:	bf00      	nop
 8005e44:	e7fe      	b.n	8005e44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e46:	4b39      	ldr	r3, [pc, #228]	; (8005f2c <xPortStartScheduler+0x12c>)
 8005e48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	22ff      	movs	r2, #255	; 0xff
 8005e56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	4b31      	ldr	r3, [pc, #196]	; (8005f30 <xPortStartScheduler+0x130>)
 8005e6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005e6e:	4b31      	ldr	r3, [pc, #196]	; (8005f34 <xPortStartScheduler+0x134>)
 8005e70:	2207      	movs	r2, #7
 8005e72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e74:	e009      	b.n	8005e8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005e76:	4b2f      	ldr	r3, [pc, #188]	; (8005f34 <xPortStartScheduler+0x134>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	4a2d      	ldr	r2, [pc, #180]	; (8005f34 <xPortStartScheduler+0x134>)
 8005e7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e92:	2b80      	cmp	r3, #128	; 0x80
 8005e94:	d0ef      	beq.n	8005e76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e96:	4b27      	ldr	r3, [pc, #156]	; (8005f34 <xPortStartScheduler+0x134>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f1c3 0307 	rsb	r3, r3, #7
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d00a      	beq.n	8005eb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	60bb      	str	r3, [r7, #8]
}
 8005eb4:	bf00      	nop
 8005eb6:	e7fe      	b.n	8005eb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005eb8:	4b1e      	ldr	r3, [pc, #120]	; (8005f34 <xPortStartScheduler+0x134>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	021b      	lsls	r3, r3, #8
 8005ebe:	4a1d      	ldr	r2, [pc, #116]	; (8005f34 <xPortStartScheduler+0x134>)
 8005ec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	; (8005f34 <xPortStartScheduler+0x134>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eca:	4a1a      	ldr	r2, [pc, #104]	; (8005f34 <xPortStartScheduler+0x134>)
 8005ecc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ed6:	4b18      	ldr	r3, [pc, #96]	; (8005f38 <xPortStartScheduler+0x138>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a17      	ldr	r2, [pc, #92]	; (8005f38 <xPortStartScheduler+0x138>)
 8005edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <xPortStartScheduler+0x138>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a14      	ldr	r2, [pc, #80]	; (8005f38 <xPortStartScheduler+0x138>)
 8005ee8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005eec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005eee:	f000 f8dd 	bl	80060ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ef2:	4b12      	ldr	r3, [pc, #72]	; (8005f3c <xPortStartScheduler+0x13c>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ef8:	f000 f8fc 	bl	80060f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005efc:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <xPortStartScheduler+0x140>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a0f      	ldr	r2, [pc, #60]	; (8005f40 <xPortStartScheduler+0x140>)
 8005f02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f08:	f7ff ff66 	bl	8005dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f0c:	f7ff f852 	bl	8004fb4 <vTaskSwitchContext>
	prvTaskExitError();
 8005f10:	f7ff ff1e 	bl	8005d50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	e000ed00 	.word	0xe000ed00
 8005f24:	410fc271 	.word	0x410fc271
 8005f28:	410fc270 	.word	0x410fc270
 8005f2c:	e000e400 	.word	0xe000e400
 8005f30:	20000e54 	.word	0x20000e54
 8005f34:	20000e58 	.word	0x20000e58
 8005f38:	e000ed20 	.word	0xe000ed20
 8005f3c:	2000000c 	.word	0x2000000c
 8005f40:	e000ef34 	.word	0xe000ef34

08005f44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	607b      	str	r3, [r7, #4]
}
 8005f5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f5e:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <vPortEnterCritical+0x58>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3301      	adds	r3, #1
 8005f64:	4a0d      	ldr	r2, [pc, #52]	; (8005f9c <vPortEnterCritical+0x58>)
 8005f66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f68:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <vPortEnterCritical+0x58>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d10f      	bne.n	8005f90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f70:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <vPortEnterCritical+0x5c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	603b      	str	r3, [r7, #0]
}
 8005f8c:	bf00      	nop
 8005f8e:	e7fe      	b.n	8005f8e <vPortEnterCritical+0x4a>
	}
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	2000000c 	.word	0x2000000c
 8005fa0:	e000ed04 	.word	0xe000ed04

08005fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005faa:	4b12      	ldr	r3, [pc, #72]	; (8005ff4 <vPortExitCritical+0x50>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10a      	bne.n	8005fc8 <vPortExitCritical+0x24>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	607b      	str	r3, [r7, #4]
}
 8005fc4:	bf00      	nop
 8005fc6:	e7fe      	b.n	8005fc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <vPortExitCritical+0x50>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	4a09      	ldr	r2, [pc, #36]	; (8005ff4 <vPortExitCritical+0x50>)
 8005fd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fd2:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <vPortExitCritical+0x50>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d105      	bne.n	8005fe6 <vPortExitCritical+0x42>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	f383 8811 	msr	BASEPRI, r3
}
 8005fe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	2000000c 	.word	0x2000000c
	...

08006000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006000:	f3ef 8009 	mrs	r0, PSP
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	4b15      	ldr	r3, [pc, #84]	; (8006060 <pxCurrentTCBConst>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	f01e 0f10 	tst.w	lr, #16
 8006010:	bf08      	it	eq
 8006012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601a:	6010      	str	r0, [r2, #0]
 800601c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006024:	f380 8811 	msr	BASEPRI, r0
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f7fe ffc0 	bl	8004fb4 <vTaskSwitchContext>
 8006034:	f04f 0000 	mov.w	r0, #0
 8006038:	f380 8811 	msr	BASEPRI, r0
 800603c:	bc09      	pop	{r0, r3}
 800603e:	6819      	ldr	r1, [r3, #0]
 8006040:	6808      	ldr	r0, [r1, #0]
 8006042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006046:	f01e 0f10 	tst.w	lr, #16
 800604a:	bf08      	it	eq
 800604c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006050:	f380 8809 	msr	PSP, r0
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	f3af 8000 	nop.w

08006060 <pxCurrentTCBConst>:
 8006060:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop

08006068 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	607b      	str	r3, [r7, #4]
}
 8006080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006082:	f7fe fedd 	bl	8004e40 <xTaskIncrementTick>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <xPortSysTickHandler+0x40>)
 800608e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	2300      	movs	r3, #0
 8006096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	f383 8811 	msr	BASEPRI, r3
}
 800609e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060b0:	4b0b      	ldr	r3, [pc, #44]	; (80060e0 <vPortSetupTimerInterrupt+0x34>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060b6:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <vPortSetupTimerInterrupt+0x38>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060bc:	4b0a      	ldr	r3, [pc, #40]	; (80060e8 <vPortSetupTimerInterrupt+0x3c>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a0a      	ldr	r2, [pc, #40]	; (80060ec <vPortSetupTimerInterrupt+0x40>)
 80060c2:	fba2 2303 	umull	r2, r3, r2, r3
 80060c6:	099b      	lsrs	r3, r3, #6
 80060c8:	4a09      	ldr	r2, [pc, #36]	; (80060f0 <vPortSetupTimerInterrupt+0x44>)
 80060ca:	3b01      	subs	r3, #1
 80060cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ce:	4b04      	ldr	r3, [pc, #16]	; (80060e0 <vPortSetupTimerInterrupt+0x34>)
 80060d0:	2207      	movs	r2, #7
 80060d2:	601a      	str	r2, [r3, #0]
}
 80060d4:	bf00      	nop
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	e000e010 	.word	0xe000e010
 80060e4:	e000e018 	.word	0xe000e018
 80060e8:	20000000 	.word	0x20000000
 80060ec:	10624dd3 	.word	0x10624dd3
 80060f0:	e000e014 	.word	0xe000e014

080060f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80060f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006104 <vPortEnableVFP+0x10>
 80060f8:	6801      	ldr	r1, [r0, #0]
 80060fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80060fe:	6001      	str	r1, [r0, #0]
 8006100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006102:	bf00      	nop
 8006104:	e000ed88 	.word	0xe000ed88

08006108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800610e:	f3ef 8305 	mrs	r3, IPSR
 8006112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b0f      	cmp	r3, #15
 8006118:	d914      	bls.n	8006144 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800611a:	4a17      	ldr	r2, [pc, #92]	; (8006178 <vPortValidateInterruptPriority+0x70>)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006124:	4b15      	ldr	r3, [pc, #84]	; (800617c <vPortValidateInterruptPriority+0x74>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	7afa      	ldrb	r2, [r7, #11]
 800612a:	429a      	cmp	r2, r3
 800612c:	d20a      	bcs.n	8006144 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	607b      	str	r3, [r7, #4]
}
 8006140:	bf00      	nop
 8006142:	e7fe      	b.n	8006142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006144:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <vPortValidateInterruptPriority+0x78>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800614c:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <vPortValidateInterruptPriority+0x7c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	429a      	cmp	r2, r3
 8006152:	d90a      	bls.n	800616a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	603b      	str	r3, [r7, #0]
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <vPortValidateInterruptPriority+0x60>
	}
 800616a:	bf00      	nop
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	e000e3f0 	.word	0xe000e3f0
 800617c:	20000e54 	.word	0x20000e54
 8006180:	e000ed0c 	.word	0xe000ed0c
 8006184:	20000e58 	.word	0x20000e58

08006188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08a      	sub	sp, #40	; 0x28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006190:	2300      	movs	r3, #0
 8006192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006194:	f7fe fd98 	bl	8004cc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006198:	4b5b      	ldr	r3, [pc, #364]	; (8006308 <pvPortMalloc+0x180>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061a0:	f000 f920 	bl	80063e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061a4:	4b59      	ldr	r3, [pc, #356]	; (800630c <pvPortMalloc+0x184>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f040 8093 	bne.w	80062d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01d      	beq.n	80061f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80061b8:	2208      	movs	r2, #8
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d014      	beq.n	80061f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f023 0307 	bic.w	r3, r3, #7
 80061d0:	3308      	adds	r3, #8
 80061d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <pvPortMalloc+0x6c>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	617b      	str	r3, [r7, #20]
}
 80061f0:	bf00      	nop
 80061f2:	e7fe      	b.n	80061f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d06e      	beq.n	80062d8 <pvPortMalloc+0x150>
 80061fa:	4b45      	ldr	r3, [pc, #276]	; (8006310 <pvPortMalloc+0x188>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d869      	bhi.n	80062d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006204:	4b43      	ldr	r3, [pc, #268]	; (8006314 <pvPortMalloc+0x18c>)
 8006206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006208:	4b42      	ldr	r3, [pc, #264]	; (8006314 <pvPortMalloc+0x18c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800620e:	e004      	b.n	800621a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	429a      	cmp	r2, r3
 8006222:	d903      	bls.n	800622c <pvPortMalloc+0xa4>
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1f1      	bne.n	8006210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800622c:	4b36      	ldr	r3, [pc, #216]	; (8006308 <pvPortMalloc+0x180>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006232:	429a      	cmp	r2, r3
 8006234:	d050      	beq.n	80062d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2208      	movs	r2, #8
 800623c:	4413      	add	r3, r2
 800623e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	1ad2      	subs	r2, r2, r3
 8006250:	2308      	movs	r3, #8
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	429a      	cmp	r2, r3
 8006256:	d91f      	bls.n	8006298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4413      	add	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <pvPortMalloc+0xf8>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	613b      	str	r3, [r7, #16]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	1ad2      	subs	r2, r2, r3
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006292:	69b8      	ldr	r0, [r7, #24]
 8006294:	f000 f908 	bl	80064a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006298:	4b1d      	ldr	r3, [pc, #116]	; (8006310 <pvPortMalloc+0x188>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	4a1b      	ldr	r2, [pc, #108]	; (8006310 <pvPortMalloc+0x188>)
 80062a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062a6:	4b1a      	ldr	r3, [pc, #104]	; (8006310 <pvPortMalloc+0x188>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <pvPortMalloc+0x190>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d203      	bcs.n	80062ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062b2:	4b17      	ldr	r3, [pc, #92]	; (8006310 <pvPortMalloc+0x188>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a18      	ldr	r2, [pc, #96]	; (8006318 <pvPortMalloc+0x190>)
 80062b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	4b13      	ldr	r3, [pc, #76]	; (800630c <pvPortMalloc+0x184>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <pvPortMalloc+0x194>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3301      	adds	r3, #1
 80062d4:	4a11      	ldr	r2, [pc, #68]	; (800631c <pvPortMalloc+0x194>)
 80062d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062d8:	f7fe fd04 	bl	8004ce4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <pvPortMalloc+0x174>
	__asm volatile
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	60fb      	str	r3, [r7, #12]
}
 80062f8:	bf00      	nop
 80062fa:	e7fe      	b.n	80062fa <pvPortMalloc+0x172>
	return pvReturn;
 80062fc:	69fb      	ldr	r3, [r7, #28]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3728      	adds	r7, #40	; 0x28
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	2000683c 	.word	0x2000683c
 800630c:	20006850 	.word	0x20006850
 8006310:	20006840 	.word	0x20006840
 8006314:	20006834 	.word	0x20006834
 8006318:	20006844 	.word	0x20006844
 800631c:	20006848 	.word	0x20006848

08006320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d04d      	beq.n	80063ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006332:	2308      	movs	r3, #8
 8006334:	425b      	negs	r3, r3
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4413      	add	r3, r2
 800633a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	4b24      	ldr	r3, [pc, #144]	; (80063d8 <vPortFree+0xb8>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4013      	ands	r3, r2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <vPortFree+0x44>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	60fb      	str	r3, [r7, #12]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <vPortFree+0x62>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	60bb      	str	r3, [r7, #8]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	4b14      	ldr	r3, [pc, #80]	; (80063d8 <vPortFree+0xb8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01e      	beq.n	80063ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d11a      	bne.n	80063ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <vPortFree+0xb8>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	43db      	mvns	r3, r3
 80063a2:	401a      	ands	r2, r3
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063a8:	f7fe fc8e 	bl	8004cc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <vPortFree+0xbc>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4413      	add	r3, r2
 80063b6:	4a09      	ldr	r2, [pc, #36]	; (80063dc <vPortFree+0xbc>)
 80063b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063ba:	6938      	ldr	r0, [r7, #16]
 80063bc:	f000 f874 	bl	80064a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063c0:	4b07      	ldr	r3, [pc, #28]	; (80063e0 <vPortFree+0xc0>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	4a06      	ldr	r2, [pc, #24]	; (80063e0 <vPortFree+0xc0>)
 80063c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063ca:	f7fe fc8b 	bl	8004ce4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063ce:	bf00      	nop
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20006850 	.word	0x20006850
 80063dc:	20006840 	.word	0x20006840
 80063e0:	2000684c 	.word	0x2000684c

080063e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063ea:	f645 13d8 	movw	r3, #23000	; 0x59d8
 80063ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063f0:	4b27      	ldr	r3, [pc, #156]	; (8006490 <prvHeapInit+0xac>)
 80063f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00c      	beq.n	8006418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3307      	adds	r3, #7
 8006402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0307 	bic.w	r3, r3, #7
 800640a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <prvHeapInit+0xac>)
 8006414:	4413      	add	r3, r2
 8006416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800641c:	4a1d      	ldr	r2, [pc, #116]	; (8006494 <prvHeapInit+0xb0>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006422:	4b1c      	ldr	r3, [pc, #112]	; (8006494 <prvHeapInit+0xb0>)
 8006424:	2200      	movs	r2, #0
 8006426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	4413      	add	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006430:	2208      	movs	r2, #8
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0307 	bic.w	r3, r3, #7
 800643e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4a15      	ldr	r2, [pc, #84]	; (8006498 <prvHeapInit+0xb4>)
 8006444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006446:	4b14      	ldr	r3, [pc, #80]	; (8006498 <prvHeapInit+0xb4>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800644e:	4b12      	ldr	r3, [pc, #72]	; (8006498 <prvHeapInit+0xb4>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	1ad2      	subs	r2, r2, r3
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006464:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <prvHeapInit+0xb4>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	4a0a      	ldr	r2, [pc, #40]	; (800649c <prvHeapInit+0xb8>)
 8006472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	4a09      	ldr	r2, [pc, #36]	; (80064a0 <prvHeapInit+0xbc>)
 800647a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800647c:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <prvHeapInit+0xc0>)
 800647e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006482:	601a      	str	r2, [r3, #0]
}
 8006484:	bf00      	nop
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	20000e5c 	.word	0x20000e5c
 8006494:	20006834 	.word	0x20006834
 8006498:	2000683c 	.word	0x2000683c
 800649c:	20006844 	.word	0x20006844
 80064a0:	20006840 	.word	0x20006840
 80064a4:	20006850 	.word	0x20006850

080064a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064b0:	4b28      	ldr	r3, [pc, #160]	; (8006554 <prvInsertBlockIntoFreeList+0xac>)
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	e002      	b.n	80064bc <prvInsertBlockIntoFreeList+0x14>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d8f7      	bhi.n	80064b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	4413      	add	r3, r2
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d108      	bne.n	80064ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	441a      	add	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	441a      	add	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d118      	bne.n	8006530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	4b15      	ldr	r3, [pc, #84]	; (8006558 <prvInsertBlockIntoFreeList+0xb0>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d00d      	beq.n	8006526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	441a      	add	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	e008      	b.n	8006538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006526:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <prvInsertBlockIntoFreeList+0xb0>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	e003      	b.n	8006538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	429a      	cmp	r2, r3
 800653e:	d002      	beq.n	8006546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006546:	bf00      	nop
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	20006834 	.word	0x20006834
 8006558:	2000683c 	.word	0x2000683c

0800655c <memset>:
 800655c:	4402      	add	r2, r0
 800655e:	4603      	mov	r3, r0
 8006560:	4293      	cmp	r3, r2
 8006562:	d100      	bne.n	8006566 <memset+0xa>
 8006564:	4770      	bx	lr
 8006566:	f803 1b01 	strb.w	r1, [r3], #1
 800656a:	e7f9      	b.n	8006560 <memset+0x4>

0800656c <__libc_init_array>:
 800656c:	b570      	push	{r4, r5, r6, lr}
 800656e:	4d0d      	ldr	r5, [pc, #52]	; (80065a4 <__libc_init_array+0x38>)
 8006570:	4c0d      	ldr	r4, [pc, #52]	; (80065a8 <__libc_init_array+0x3c>)
 8006572:	1b64      	subs	r4, r4, r5
 8006574:	10a4      	asrs	r4, r4, #2
 8006576:	2600      	movs	r6, #0
 8006578:	42a6      	cmp	r6, r4
 800657a:	d109      	bne.n	8006590 <__libc_init_array+0x24>
 800657c:	4d0b      	ldr	r5, [pc, #44]	; (80065ac <__libc_init_array+0x40>)
 800657e:	4c0c      	ldr	r4, [pc, #48]	; (80065b0 <__libc_init_array+0x44>)
 8006580:	f000 f826 	bl	80065d0 <_init>
 8006584:	1b64      	subs	r4, r4, r5
 8006586:	10a4      	asrs	r4, r4, #2
 8006588:	2600      	movs	r6, #0
 800658a:	42a6      	cmp	r6, r4
 800658c:	d105      	bne.n	800659a <__libc_init_array+0x2e>
 800658e:	bd70      	pop	{r4, r5, r6, pc}
 8006590:	f855 3b04 	ldr.w	r3, [r5], #4
 8006594:	4798      	blx	r3
 8006596:	3601      	adds	r6, #1
 8006598:	e7ee      	b.n	8006578 <__libc_init_array+0xc>
 800659a:	f855 3b04 	ldr.w	r3, [r5], #4
 800659e:	4798      	blx	r3
 80065a0:	3601      	adds	r6, #1
 80065a2:	e7f2      	b.n	800658a <__libc_init_array+0x1e>
 80065a4:	08006760 	.word	0x08006760
 80065a8:	08006760 	.word	0x08006760
 80065ac:	08006760 	.word	0x08006760
 80065b0:	08006764 	.word	0x08006764

080065b4 <memcpy>:
 80065b4:	440a      	add	r2, r1
 80065b6:	4291      	cmp	r1, r2
 80065b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80065bc:	d100      	bne.n	80065c0 <memcpy+0xc>
 80065be:	4770      	bx	lr
 80065c0:	b510      	push	{r4, lr}
 80065c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ca:	4291      	cmp	r1, r2
 80065cc:	d1f9      	bne.n	80065c2 <memcpy+0xe>
 80065ce:	bd10      	pop	{r4, pc}

080065d0 <_init>:
 80065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d2:	bf00      	nop
 80065d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d6:	bc08      	pop	{r3}
 80065d8:	469e      	mov	lr, r3
 80065da:	4770      	bx	lr

080065dc <_fini>:
 80065dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065de:	bf00      	nop
 80065e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e2:	bc08      	pop	{r3}
 80065e4:	469e      	mov	lr, r3
 80065e6:	4770      	bx	lr
