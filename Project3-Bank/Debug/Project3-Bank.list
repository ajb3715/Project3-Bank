
Project3-Bank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007738  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a20  08007a20  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007a20  08007a20  00017a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a28  08007a28  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a28  08007a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a2c  08007a2c  00017a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006fd0  20000010  08007a40  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006fe0  08007a40  00026fe0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015812  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003541  00000000  00000000  00035895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  00038dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd8  00000000  00000000  00039ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000358a  00000000  00000000  0003add0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001596b  00000000  00000000  0003e35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f213a  00000000  00000000  00053cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049cc  00000000  00000000  00145e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0014a7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078b0 	.word	0x080078b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080078b0 	.word	0x080078b0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <init_breaker>:
uint32_t* random2;
uint32_t* random3;



void init_breaker(void){
 80004cc:	b5b0      	push	{r4, r5, r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af02      	add	r7, sp, #8
	//What time the variable for going on break will be assigned
	breaker.start_break[0] = 0;
 80004d2:	4b9c      	ldr	r3, [pc, #624]	; (8000744 <init_breaker+0x278>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
	breaker.start_break[1] = 0;
 80004d8:	4b9a      	ldr	r3, [pc, #616]	; (8000744 <init_breaker+0x278>)
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random1);
 80004de:	4b9a      	ldr	r3, [pc, #616]	; (8000748 <init_breaker+0x27c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4619      	mov	r1, r3
 80004e4:	4899      	ldr	r0, [pc, #612]	; (800074c <init_breaker+0x280>)
 80004e6:	f003 fa02 	bl	80038ee <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock1 = { .hour = 0, .minute = (30 + (*random1 - 30) % 31), .second = (*random1 % 60)};
 80004ea:	2300      	movs	r3, #0
 80004ec:	61fb      	str	r3, [r7, #28]
 80004ee:	4b96      	ldr	r3, [pc, #600]	; (8000748 <init_breaker+0x27c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f1a3 011e 	sub.w	r1, r3, #30
 80004f8:	4b95      	ldr	r3, [pc, #596]	; (8000750 <init_breaker+0x284>)
 80004fa:	fba3 2301 	umull	r2, r3, r3, r1
 80004fe:	1aca      	subs	r2, r1, r3
 8000500:	0852      	lsrs	r2, r2, #1
 8000502:	4413      	add	r3, r2
 8000504:	091a      	lsrs	r2, r3, #4
 8000506:	4613      	mov	r3, r2
 8000508:	015b      	lsls	r3, r3, #5
 800050a:	1a9b      	subs	r3, r3, r2
 800050c:	1aca      	subs	r2, r1, r3
 800050e:	f102 031e 	add.w	r3, r2, #30
 8000512:	623b      	str	r3, [r7, #32]
 8000514:	4b8c      	ldr	r3, [pc, #560]	; (8000748 <init_breaker+0x27c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	6819      	ldr	r1, [r3, #0]
 800051a:	4b8e      	ldr	r3, [pc, #568]	; (8000754 <init_breaker+0x288>)
 800051c:	fba3 2301 	umull	r2, r3, r3, r1
 8000520:	095a      	lsrs	r2, r3, #5
 8000522:	4613      	mov	r3, r2
 8000524:	011b      	lsls	r3, r3, #4
 8000526:	1a9b      	subs	r3, r3, r2
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	1aca      	subs	r2, r1, r3
 800052c:	4613      	mov	r3, r2
 800052e:	627b      	str	r3, [r7, #36]	; 0x24
	add_clocks(breaker.break_time1,Clock);
 8000530:	4b89      	ldr	r3, [pc, #548]	; (8000758 <init_breaker+0x28c>)
 8000532:	4d84      	ldr	r5, [pc, #528]	; (8000744 <init_breaker+0x278>)
 8000534:	466c      	mov	r4, sp
 8000536:	1d1a      	adds	r2, r3, #4
 8000538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800053c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f105 020c 	add.w	r2, r5, #12
 8000546:	ca07      	ldmia	r2, {r0, r1, r2}
 8000548:	f000 faed 	bl	8000b26 <add_clocks>
	add_clocks(breaker.break_time1,temp_clock1);
 800054c:	4c7d      	ldr	r4, [pc, #500]	; (8000744 <init_breaker+0x278>)
 800054e:	466a      	mov	r2, sp
 8000550:	f107 0320 	add.w	r3, r7, #32
 8000554:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000558:	e882 0003 	stmia.w	r2, {r0, r1}
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	f104 020c 	add.w	r2, r4, #12
 8000562:	ca07      	ldmia	r2, {r0, r1, r2}
 8000564:	f000 fadf 	bl	8000b26 <add_clocks>
	breaker.break_duration1.hour = 0;
 8000568:	4b76      	ldr	r3, [pc, #472]	; (8000744 <init_breaker+0x278>)
 800056a:	2200      	movs	r2, #0
 800056c:	619a      	str	r2, [r3, #24]
	breaker.break_duration1.minute = (*random1 % 5);
 800056e:	4b76      	ldr	r3, [pc, #472]	; (8000748 <init_breaker+0x27c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	6819      	ldr	r1, [r3, #0]
 8000574:	4b79      	ldr	r3, [pc, #484]	; (800075c <init_breaker+0x290>)
 8000576:	fba3 2301 	umull	r2, r3, r3, r1
 800057a:	089a      	lsrs	r2, r3, #2
 800057c:	4613      	mov	r3, r2
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	4413      	add	r3, r2
 8000582:	1aca      	subs	r2, r1, r3
 8000584:	4b6f      	ldr	r3, [pc, #444]	; (8000744 <init_breaker+0x278>)
 8000586:	61da      	str	r2, [r3, #28]
	breaker.break_duration1.second = (*random1 % 60);
 8000588:	4b6f      	ldr	r3, [pc, #444]	; (8000748 <init_breaker+0x27c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	6819      	ldr	r1, [r3, #0]
 800058e:	4b71      	ldr	r3, [pc, #452]	; (8000754 <init_breaker+0x288>)
 8000590:	fba3 2301 	umull	r2, r3, r3, r1
 8000594:	095a      	lsrs	r2, r3, #5
 8000596:	4613      	mov	r3, r2
 8000598:	011b      	lsls	r3, r3, #4
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	1aca      	subs	r2, r1, r3
 80005a0:	4b68      	ldr	r3, [pc, #416]	; (8000744 <init_breaker+0x278>)
 80005a2:	621a      	str	r2, [r3, #32]

	//What time the variable for going on break will be assigned
	breaker.start_break[2] = 0;
 80005a4:	4b67      	ldr	r3, [pc, #412]	; (8000744 <init_breaker+0x278>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random2);
 80005aa:	4b6d      	ldr	r3, [pc, #436]	; (8000760 <init_breaker+0x294>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4619      	mov	r1, r3
 80005b0:	4866      	ldr	r0, [pc, #408]	; (800074c <init_breaker+0x280>)
 80005b2:	f003 f99c 	bl	80038ee <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock2 = { .hour = 0, .minute = (30 + (*random2 - 30) % 31), .second = (*random2 % 60)};
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	4b69      	ldr	r3, [pc, #420]	; (8000760 <init_breaker+0x294>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f1a3 011e 	sub.w	r1, r3, #30
 80005c4:	4b62      	ldr	r3, [pc, #392]	; (8000750 <init_breaker+0x284>)
 80005c6:	fba3 2301 	umull	r2, r3, r3, r1
 80005ca:	1aca      	subs	r2, r1, r3
 80005cc:	0852      	lsrs	r2, r2, #1
 80005ce:	4413      	add	r3, r2
 80005d0:	091a      	lsrs	r2, r3, #4
 80005d2:	4613      	mov	r3, r2
 80005d4:	015b      	lsls	r3, r3, #5
 80005d6:	1a9b      	subs	r3, r3, r2
 80005d8:	1aca      	subs	r2, r1, r3
 80005da:	f102 031e 	add.w	r3, r2, #30
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	4b5f      	ldr	r3, [pc, #380]	; (8000760 <init_breaker+0x294>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6819      	ldr	r1, [r3, #0]
 80005e6:	4b5b      	ldr	r3, [pc, #364]	; (8000754 <init_breaker+0x288>)
 80005e8:	fba3 2301 	umull	r2, r3, r3, r1
 80005ec:	095a      	lsrs	r2, r3, #5
 80005ee:	4613      	mov	r3, r2
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	1a9b      	subs	r3, r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	1aca      	subs	r2, r1, r3
 80005f8:	4613      	mov	r3, r2
 80005fa:	61bb      	str	r3, [r7, #24]
	add_clocks(breaker.break_time2,Clock);
 80005fc:	4b56      	ldr	r3, [pc, #344]	; (8000758 <init_breaker+0x28c>)
 80005fe:	4d51      	ldr	r5, [pc, #324]	; (8000744 <init_breaker+0x278>)
 8000600:	466c      	mov	r4, sp
 8000602:	1d1a      	adds	r2, r3, #4
 8000604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000608:	e884 0003 	stmia.w	r4, {r0, r1}
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8000612:	ca07      	ldmia	r2, {r0, r1, r2}
 8000614:	f000 fa87 	bl	8000b26 <add_clocks>
	add_clocks(breaker.break_time2,temp_clock2);
 8000618:	4c4a      	ldr	r4, [pc, #296]	; (8000744 <init_breaker+0x278>)
 800061a:	466a      	mov	r2, sp
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000624:	e882 0003 	stmia.w	r2, {r0, r1}
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	f104 0224 	add.w	r2, r4, #36	; 0x24
 800062e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000630:	f000 fa79 	bl	8000b26 <add_clocks>
	breaker.break_duration2.hour = 0;
 8000634:	4b43      	ldr	r3, [pc, #268]	; (8000744 <init_breaker+0x278>)
 8000636:	2200      	movs	r2, #0
 8000638:	631a      	str	r2, [r3, #48]	; 0x30
	breaker.break_duration2.minute = (*random2 % 5);
 800063a:	4b49      	ldr	r3, [pc, #292]	; (8000760 <init_breaker+0x294>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6819      	ldr	r1, [r3, #0]
 8000640:	4b46      	ldr	r3, [pc, #280]	; (800075c <init_breaker+0x290>)
 8000642:	fba3 2301 	umull	r2, r3, r3, r1
 8000646:	089a      	lsrs	r2, r3, #2
 8000648:	4613      	mov	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	1aca      	subs	r2, r1, r3
 8000650:	4b3c      	ldr	r3, [pc, #240]	; (8000744 <init_breaker+0x278>)
 8000652:	635a      	str	r2, [r3, #52]	; 0x34
	breaker.break_duration2.second = (*random2 % 60);
 8000654:	4b42      	ldr	r3, [pc, #264]	; (8000760 <init_breaker+0x294>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6819      	ldr	r1, [r3, #0]
 800065a:	4b3e      	ldr	r3, [pc, #248]	; (8000754 <init_breaker+0x288>)
 800065c:	fba3 2301 	umull	r2, r3, r3, r1
 8000660:	095a      	lsrs	r2, r3, #5
 8000662:	4613      	mov	r3, r2
 8000664:	011b      	lsls	r3, r3, #4
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	1aca      	subs	r2, r1, r3
 800066c:	4b35      	ldr	r3, [pc, #212]	; (8000744 <init_breaker+0x278>)
 800066e:	639a      	str	r2, [r3, #56]	; 0x38
	//What time the variable for going on break will be assigned
	breaker.start_break[3] = 0;
 8000670:	4b34      	ldr	r3, [pc, #208]	; (8000744 <init_breaker+0x278>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random3);
 8000676:	4b3b      	ldr	r3, [pc, #236]	; (8000764 <init_breaker+0x298>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4619      	mov	r1, r3
 800067c:	4833      	ldr	r0, [pc, #204]	; (800074c <init_breaker+0x280>)
 800067e:	f003 f936 	bl	80038ee <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock3 = { .hour = 0, .minute = (30 + (*random3 - 30) % 31), .second = (*random3 % 60)};
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b37      	ldr	r3, [pc, #220]	; (8000764 <init_breaker+0x298>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f1a3 011e 	sub.w	r1, r3, #30
 8000690:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <init_breaker+0x284>)
 8000692:	fba3 2301 	umull	r2, r3, r3, r1
 8000696:	1aca      	subs	r2, r1, r3
 8000698:	0852      	lsrs	r2, r2, #1
 800069a:	4413      	add	r3, r2
 800069c:	091a      	lsrs	r2, r3, #4
 800069e:	4613      	mov	r3, r2
 80006a0:	015b      	lsls	r3, r3, #5
 80006a2:	1a9b      	subs	r3, r3, r2
 80006a4:	1aca      	subs	r2, r1, r3
 80006a6:	f102 031e 	add.w	r3, r2, #30
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	4b2d      	ldr	r3, [pc, #180]	; (8000764 <init_breaker+0x298>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6819      	ldr	r1, [r3, #0]
 80006b2:	4b28      	ldr	r3, [pc, #160]	; (8000754 <init_breaker+0x288>)
 80006b4:	fba3 2301 	umull	r2, r3, r3, r1
 80006b8:	095a      	lsrs	r2, r3, #5
 80006ba:	4613      	mov	r3, r2
 80006bc:	011b      	lsls	r3, r3, #4
 80006be:	1a9b      	subs	r3, r3, r2
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	1aca      	subs	r2, r1, r3
 80006c4:	4613      	mov	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
	add_clocks(breaker.break_time3,Clock);
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <init_breaker+0x28c>)
 80006ca:	4d1e      	ldr	r5, [pc, #120]	; (8000744 <init_breaker+0x278>)
 80006cc:	466c      	mov	r4, sp
 80006ce:	1d1a      	adds	r2, r3, #4
 80006d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 80006de:	ca07      	ldmia	r2, {r0, r1, r2}
 80006e0:	f000 fa21 	bl	8000b26 <add_clocks>
	add_clocks(breaker.break_time3,temp_clock3);
 80006e4:	4c17      	ldr	r4, [pc, #92]	; (8000744 <init_breaker+0x278>)
 80006e6:	466a      	mov	r2, sp
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006f0:	e882 0003 	stmia.w	r2, {r0, r1}
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80006fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80006fc:	f000 fa13 	bl	8000b26 <add_clocks>
	breaker.break_duration3.hour = 0;
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <init_breaker+0x278>)
 8000702:	2200      	movs	r2, #0
 8000704:	649a      	str	r2, [r3, #72]	; 0x48
	breaker.break_duration3.minute = (*random3 % 5);
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <init_breaker+0x298>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	6819      	ldr	r1, [r3, #0]
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <init_breaker+0x290>)
 800070e:	fba3 2301 	umull	r2, r3, r3, r1
 8000712:	089a      	lsrs	r2, r3, #2
 8000714:	4613      	mov	r3, r2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	4413      	add	r3, r2
 800071a:	1aca      	subs	r2, r1, r3
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <init_breaker+0x278>)
 800071e:	64da      	str	r2, [r3, #76]	; 0x4c
	breaker.break_duration3.second = (*random3 % 60);
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <init_breaker+0x298>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6819      	ldr	r1, [r3, #0]
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <init_breaker+0x288>)
 8000728:	fba3 2301 	umull	r2, r3, r3, r1
 800072c:	095a      	lsrs	r2, r3, #5
 800072e:	4613      	mov	r3, r2
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	1a9b      	subs	r3, r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	1aca      	subs	r2, r1, r3
 8000738:	4b02      	ldr	r3, [pc, #8]	; (8000744 <init_breaker+0x278>)
 800073a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	; 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bdb0      	pop	{r4, r5, r7, pc}
 8000744:	2000002c 	.word	0x2000002c
 8000748:	20000080 	.word	0x20000080
 800074c:	20000240 	.word	0x20000240
 8000750:	08421085 	.word	0x08421085
 8000754:	88888889 	.word	0x88888889
 8000758:	2000008c 	.word	0x2000008c
 800075c:	cccccccd 	.word	0xcccccccd
 8000760:	20000084 	.word	0x20000084
 8000764:	20000088 	.word	0x20000088

08000768 <run_breaker>:

void run_breaker(){
 8000768:	b5b0      	push	{r4, r5, r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af02      	add	r7, sp, #8
	if(clock_compare(Clock, breaker.break_time1) == 1){
 800076e:	4bb6      	ldr	r3, [pc, #728]	; (8000a48 <run_breaker+0x2e0>)
 8000770:	4ab6      	ldr	r2, [pc, #728]	; (8000a4c <run_breaker+0x2e4>)
 8000772:	466c      	mov	r4, sp
 8000774:	f103 0110 	add.w	r1, r3, #16
 8000778:	c903      	ldmia	r1, {r0, r1}
 800077a:	e884 0003 	stmia.w	r4, {r0, r1}
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	ca07      	ldmia	r2, {r0, r1, r2}
 8000782:	f000 fa05 	bl	8000b90 <clock_compare>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d103      	bne.n	8000794 <run_breaker+0x2c>
		tellers[1].take_break = 1;
 800078c:	4bb0      	ldr	r3, [pc, #704]	; (8000a50 <run_breaker+0x2e8>)
 800078e:	2201      	movs	r2, #1
 8000790:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}
	if(clock_compare(Clock, breaker.break_time2) == 1){
 8000794:	4bac      	ldr	r3, [pc, #688]	; (8000a48 <run_breaker+0x2e0>)
 8000796:	4aad      	ldr	r2, [pc, #692]	; (8000a4c <run_breaker+0x2e4>)
 8000798:	466c      	mov	r4, sp
 800079a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800079e:	c903      	ldmia	r1, {r0, r1}
 80007a0:	e884 0003 	stmia.w	r4, {r0, r1}
 80007a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80007a8:	f000 f9f2 	bl	8000b90 <clock_compare>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d103      	bne.n	80007ba <run_breaker+0x52>
		tellers[2].take_break = 1;
 80007b2:	4ba7      	ldr	r3, [pc, #668]	; (8000a50 <run_breaker+0x2e8>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	}
	if(clock_compare(Clock, breaker.break_time3) == 1){
 80007ba:	4ba3      	ldr	r3, [pc, #652]	; (8000a48 <run_breaker+0x2e0>)
 80007bc:	4aa3      	ldr	r2, [pc, #652]	; (8000a4c <run_breaker+0x2e4>)
 80007be:	466c      	mov	r4, sp
 80007c0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80007c4:	c903      	ldmia	r1, {r0, r1}
 80007c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80007ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ce:	f000 f9df 	bl	8000b90 <clock_compare>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d103      	bne.n	80007e0 <run_breaker+0x78>
		tellers[3].take_break = 1;
 80007d8:	4b9d      	ldr	r3, [pc, #628]	; (8000a50 <run_breaker+0x2e8>)
 80007da:	2201      	movs	r2, #1
 80007dc:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	}
	if(breaker.start_break[1] == 1){
 80007e0:	4b99      	ldr	r3, [pc, #612]	; (8000a48 <run_breaker+0x2e0>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d165      	bne.n	80008b4 <run_breaker+0x14c>
		breaker.start_break[1] = 0;
 80007e8:	4b97      	ldr	r3, [pc, #604]	; (8000a48 <run_breaker+0x2e0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
		HAL_RNG_GenerateRandomNumber(&hrng,random1);
 80007ee:	4b99      	ldr	r3, [pc, #612]	; (8000a54 <run_breaker+0x2ec>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4619      	mov	r1, r3
 80007f4:	4898      	ldr	r0, [pc, #608]	; (8000a58 <run_breaker+0x2f0>)
 80007f6:	f003 f87a 	bl	80038ee <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock1 = { .hour = 0, .minute = (30 + (*random1 - 30) % 31), .second = (*random1 % 60)};
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
 80007fe:	4b95      	ldr	r3, [pc, #596]	; (8000a54 <run_breaker+0x2ec>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f1a3 011e 	sub.w	r1, r3, #30
 8000808:	4b94      	ldr	r3, [pc, #592]	; (8000a5c <run_breaker+0x2f4>)
 800080a:	fba3 2301 	umull	r2, r3, r3, r1
 800080e:	1aca      	subs	r2, r1, r3
 8000810:	0852      	lsrs	r2, r2, #1
 8000812:	4413      	add	r3, r2
 8000814:	091a      	lsrs	r2, r3, #4
 8000816:	4613      	mov	r3, r2
 8000818:	015b      	lsls	r3, r3, #5
 800081a:	1a9b      	subs	r3, r3, r2
 800081c:	1aca      	subs	r2, r1, r3
 800081e:	f102 031e 	add.w	r3, r2, #30
 8000822:	623b      	str	r3, [r7, #32]
 8000824:	4b8b      	ldr	r3, [pc, #556]	; (8000a54 <run_breaker+0x2ec>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	6819      	ldr	r1, [r3, #0]
 800082a:	4b8d      	ldr	r3, [pc, #564]	; (8000a60 <run_breaker+0x2f8>)
 800082c:	fba3 2301 	umull	r2, r3, r3, r1
 8000830:	095a      	lsrs	r2, r3, #5
 8000832:	4613      	mov	r3, r2
 8000834:	011b      	lsls	r3, r3, #4
 8000836:	1a9b      	subs	r3, r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	1aca      	subs	r2, r1, r3
 800083c:	4613      	mov	r3, r2
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
		add_clocks(breaker.break_time1,Clock);
 8000840:	4b82      	ldr	r3, [pc, #520]	; (8000a4c <run_breaker+0x2e4>)
 8000842:	4d81      	ldr	r5, [pc, #516]	; (8000a48 <run_breaker+0x2e0>)
 8000844:	466c      	mov	r4, sp
 8000846:	1d1a      	adds	r2, r3, #4
 8000848:	e892 0003 	ldmia.w	r2, {r0, r1}
 800084c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f105 020c 	add.w	r2, r5, #12
 8000856:	ca07      	ldmia	r2, {r0, r1, r2}
 8000858:	f000 f965 	bl	8000b26 <add_clocks>
		add_clocks(breaker.break_time1,temp_clock1);
 800085c:	4c7a      	ldr	r4, [pc, #488]	; (8000a48 <run_breaker+0x2e0>)
 800085e:	466a      	mov	r2, sp
 8000860:	f107 0320 	add.w	r3, r7, #32
 8000864:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000868:	e882 0003 	stmia.w	r2, {r0, r1}
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f104 020c 	add.w	r2, r4, #12
 8000872:	ca07      	ldmia	r2, {r0, r1, r2}
 8000874:	f000 f957 	bl	8000b26 <add_clocks>
		breaker.break_duration1.hour = 0;
 8000878:	4b73      	ldr	r3, [pc, #460]	; (8000a48 <run_breaker+0x2e0>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
		breaker.break_duration1.minute = (*random1 % 5);
 800087e:	4b75      	ldr	r3, [pc, #468]	; (8000a54 <run_breaker+0x2ec>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	6819      	ldr	r1, [r3, #0]
 8000884:	4b77      	ldr	r3, [pc, #476]	; (8000a64 <run_breaker+0x2fc>)
 8000886:	fba3 2301 	umull	r2, r3, r3, r1
 800088a:	089a      	lsrs	r2, r3, #2
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	1aca      	subs	r2, r1, r3
 8000894:	4b6c      	ldr	r3, [pc, #432]	; (8000a48 <run_breaker+0x2e0>)
 8000896:	61da      	str	r2, [r3, #28]
		breaker.break_duration1.second = (*random1 % 60);
 8000898:	4b6e      	ldr	r3, [pc, #440]	; (8000a54 <run_breaker+0x2ec>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6819      	ldr	r1, [r3, #0]
 800089e:	4b70      	ldr	r3, [pc, #448]	; (8000a60 <run_breaker+0x2f8>)
 80008a0:	fba3 2301 	umull	r2, r3, r3, r1
 80008a4:	095a      	lsrs	r2, r3, #5
 80008a6:	4613      	mov	r3, r2
 80008a8:	011b      	lsls	r3, r3, #4
 80008aa:	1a9b      	subs	r3, r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	1aca      	subs	r2, r1, r3
 80008b0:	4b65      	ldr	r3, [pc, #404]	; (8000a48 <run_breaker+0x2e0>)
 80008b2:	621a      	str	r2, [r3, #32]
	}
	if(breaker.start_break[2] == 1){
 80008b4:	4b64      	ldr	r3, [pc, #400]	; (8000a48 <run_breaker+0x2e0>)
 80008b6:	689b      	ldr	r3, [r3, #8]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d165      	bne.n	8000988 <run_breaker+0x220>
		breaker.start_break[2] = 0;
 80008bc:	4b62      	ldr	r3, [pc, #392]	; (8000a48 <run_breaker+0x2e0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
		HAL_RNG_GenerateRandomNumber(&hrng,random2);
 80008c2:	4b69      	ldr	r3, [pc, #420]	; (8000a68 <run_breaker+0x300>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4619      	mov	r1, r3
 80008c8:	4863      	ldr	r0, [pc, #396]	; (8000a58 <run_breaker+0x2f0>)
 80008ca:	f003 f810 	bl	80038ee <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock2 = { .hour = 0, .minute = (30 + (*random2 - 30) % 31), .second = (*random2 % 60)};
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b65      	ldr	r3, [pc, #404]	; (8000a68 <run_breaker+0x300>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f1a3 011e 	sub.w	r1, r3, #30
 80008dc:	4b5f      	ldr	r3, [pc, #380]	; (8000a5c <run_breaker+0x2f4>)
 80008de:	fba3 2301 	umull	r2, r3, r3, r1
 80008e2:	1aca      	subs	r2, r1, r3
 80008e4:	0852      	lsrs	r2, r2, #1
 80008e6:	4413      	add	r3, r2
 80008e8:	091a      	lsrs	r2, r3, #4
 80008ea:	4613      	mov	r3, r2
 80008ec:	015b      	lsls	r3, r3, #5
 80008ee:	1a9b      	subs	r3, r3, r2
 80008f0:	1aca      	subs	r2, r1, r3
 80008f2:	f102 031e 	add.w	r3, r2, #30
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	4b5b      	ldr	r3, [pc, #364]	; (8000a68 <run_breaker+0x300>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	6819      	ldr	r1, [r3, #0]
 80008fe:	4b58      	ldr	r3, [pc, #352]	; (8000a60 <run_breaker+0x2f8>)
 8000900:	fba3 2301 	umull	r2, r3, r3, r1
 8000904:	095a      	lsrs	r2, r3, #5
 8000906:	4613      	mov	r3, r2
 8000908:	011b      	lsls	r3, r3, #4
 800090a:	1a9b      	subs	r3, r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	1aca      	subs	r2, r1, r3
 8000910:	4613      	mov	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]
		add_clocks(breaker.break_time2,Clock);
 8000914:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <run_breaker+0x2e4>)
 8000916:	4d4c      	ldr	r5, [pc, #304]	; (8000a48 <run_breaker+0x2e0>)
 8000918:	466c      	mov	r4, sp
 800091a:	1d1a      	adds	r2, r3, #4
 800091c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000920:	e884 0003 	stmia.w	r4, {r0, r1}
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f105 0224 	add.w	r2, r5, #36	; 0x24
 800092a:	ca07      	ldmia	r2, {r0, r1, r2}
 800092c:	f000 f8fb 	bl	8000b26 <add_clocks>
		add_clocks(breaker.break_time2,temp_clock2);
 8000930:	4c45      	ldr	r4, [pc, #276]	; (8000a48 <run_breaker+0x2e0>)
 8000932:	466a      	mov	r2, sp
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	e893 0003 	ldmia.w	r3, {r0, r1}
 800093c:	e882 0003 	stmia.w	r2, {r0, r1}
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8000946:	ca07      	ldmia	r2, {r0, r1, r2}
 8000948:	f000 f8ed 	bl	8000b26 <add_clocks>
		breaker.break_duration2.hour = 0;
 800094c:	4b3e      	ldr	r3, [pc, #248]	; (8000a48 <run_breaker+0x2e0>)
 800094e:	2200      	movs	r2, #0
 8000950:	631a      	str	r2, [r3, #48]	; 0x30
		breaker.break_duration2.minute = (*random2 % 5);
 8000952:	4b45      	ldr	r3, [pc, #276]	; (8000a68 <run_breaker+0x300>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	6819      	ldr	r1, [r3, #0]
 8000958:	4b42      	ldr	r3, [pc, #264]	; (8000a64 <run_breaker+0x2fc>)
 800095a:	fba3 2301 	umull	r2, r3, r3, r1
 800095e:	089a      	lsrs	r2, r3, #2
 8000960:	4613      	mov	r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	4413      	add	r3, r2
 8000966:	1aca      	subs	r2, r1, r3
 8000968:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <run_breaker+0x2e0>)
 800096a:	635a      	str	r2, [r3, #52]	; 0x34
		breaker.break_duration2.second = (*random2 % 60);
 800096c:	4b3e      	ldr	r3, [pc, #248]	; (8000a68 <run_breaker+0x300>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6819      	ldr	r1, [r3, #0]
 8000972:	4b3b      	ldr	r3, [pc, #236]	; (8000a60 <run_breaker+0x2f8>)
 8000974:	fba3 2301 	umull	r2, r3, r3, r1
 8000978:	095a      	lsrs	r2, r3, #5
 800097a:	4613      	mov	r3, r2
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	1a9b      	subs	r3, r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	1aca      	subs	r2, r1, r3
 8000984:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <run_breaker+0x2e0>)
 8000986:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(breaker.start_break[3] == 1){
 8000988:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <run_breaker+0x2e0>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d17a      	bne.n	8000a86 <run_breaker+0x31e>
		breaker.start_break[3] = 0;
 8000990:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <run_breaker+0x2e0>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
		HAL_RNG_GenerateRandomNumber(&hrng,random3);
 8000996:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <run_breaker+0x304>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4619      	mov	r1, r3
 800099c:	482e      	ldr	r0, [pc, #184]	; (8000a58 <run_breaker+0x2f0>)
 800099e:	f002 ffa6 	bl	80038ee <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock2 = { .hour = 0, .minute = (30 + (*random3 - 30) % 31), .second = (*random3 % 60)};
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <run_breaker+0x304>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f1a3 011e 	sub.w	r1, r3, #30
 80009b0:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <run_breaker+0x2f4>)
 80009b2:	fba3 2301 	umull	r2, r3, r3, r1
 80009b6:	1aca      	subs	r2, r1, r3
 80009b8:	0852      	lsrs	r2, r2, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	091a      	lsrs	r2, r3, #4
 80009be:	4613      	mov	r3, r2
 80009c0:	015b      	lsls	r3, r3, #5
 80009c2:	1a9b      	subs	r3, r3, r2
 80009c4:	1aca      	subs	r2, r1, r3
 80009c6:	f102 031e 	add.w	r3, r2, #30
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <run_breaker+0x304>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6819      	ldr	r1, [r3, #0]
 80009d2:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <run_breaker+0x2f8>)
 80009d4:	fba3 2301 	umull	r2, r3, r3, r1
 80009d8:	095a      	lsrs	r2, r3, #5
 80009da:	4613      	mov	r3, r2
 80009dc:	011b      	lsls	r3, r3, #4
 80009de:	1a9b      	subs	r3, r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	1aca      	subs	r2, r1, r3
 80009e4:	4613      	mov	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
		add_clocks(breaker.break_time3,Clock);
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <run_breaker+0x2e4>)
 80009ea:	4d17      	ldr	r5, [pc, #92]	; (8000a48 <run_breaker+0x2e0>)
 80009ec:	466c      	mov	r4, sp
 80009ee:	1d1a      	adds	r2, r3, #4
 80009f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 80009fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a00:	f000 f891 	bl	8000b26 <add_clocks>
		add_clocks(breaker.break_time3,temp_clock2);
 8000a04:	4c10      	ldr	r4, [pc, #64]	; (8000a48 <run_breaker+0x2e0>)
 8000a06:	466a      	mov	r2, sp
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a10:	e882 0003 	stmia.w	r2, {r0, r1}
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8000a1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a1c:	f000 f883 	bl	8000b26 <add_clocks>
		breaker.break_duration3.hour = 0;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <run_breaker+0x2e0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	649a      	str	r2, [r3, #72]	; 0x48
		breaker.break_duration3.minute = (*random2 % 5);
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <run_breaker+0x300>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	6819      	ldr	r1, [r3, #0]
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <run_breaker+0x2fc>)
 8000a2e:	fba3 2301 	umull	r2, r3, r3, r1
 8000a32:	089a      	lsrs	r2, r3, #2
 8000a34:	4613      	mov	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4413      	add	r3, r2
 8000a3a:	1aca      	subs	r2, r1, r3
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <run_breaker+0x2e0>)
 8000a3e:	64da      	str	r2, [r3, #76]	; 0x4c
		breaker.break_duration3.second = (*random2 % 60);
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <run_breaker+0x300>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6819      	ldr	r1, [r3, #0]
 8000a46:	e013      	b.n	8000a70 <run_breaker+0x308>
 8000a48:	2000002c 	.word	0x2000002c
 8000a4c:	2000008c 	.word	0x2000008c
 8000a50:	200002f0 	.word	0x200002f0
 8000a54:	20000080 	.word	0x20000080
 8000a58:	20000240 	.word	0x20000240
 8000a5c:	08421085 	.word	0x08421085
 8000a60:	88888889 	.word	0x88888889
 8000a64:	cccccccd 	.word	0xcccccccd
 8000a68:	20000084 	.word	0x20000084
 8000a6c:	20000088 	.word	0x20000088
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <run_breaker+0x328>)
 8000a72:	fba3 2301 	umull	r2, r3, r3, r1
 8000a76:	095a      	lsrs	r2, r3, #5
 8000a78:	4613      	mov	r3, r2
 8000a7a:	011b      	lsls	r3, r3, #4
 8000a7c:	1a9b      	subs	r3, r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	1aca      	subs	r2, r1, r3
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <run_breaker+0x32c>)
 8000a84:	651a      	str	r2, [r3, #80]	; 0x50
	}

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	88888889 	.word	0x88888889
 8000a94:	2000002c 	.word	0x2000002c

08000a98 <clock_init>:
//The main clock to be checked by the program
//Declare extern within the header file
WallClock Clock = { .hour = 0, .minute = 0, .second = 0};


void clock_init(void) {
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
	//Initialize the main clock
	Clock.hour = 0;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <clock_init+0x20>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
	Clock.minute = 0;
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <clock_init+0x20>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	605a      	str	r2, [r3, #4]
	Clock.second = 0;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <clock_init+0x20>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	2000008c 	.word	0x2000008c

08000abc <day_init>:

void day_init(WallClock Clock) {
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Initialize the main clock
	Clock.hour = 9;
 8000ac8:	2309      	movs	r3, #9
 8000aca:	607b      	str	r3, [r7, #4]
	Clock.minute = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
	Clock.second = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <clock_increment>:

void clock_increment(WallClock Clock){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Check if second is full, if so then increment
	//minute count and reset second count to 0
	//if minute count full increment hour count and reset minutes to 0
	if(Clock.second >= 59){
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2b3a      	cmp	r3, #58	; 0x3a
 8000af0:	dd10      	ble.n	8000b14 <clock_increment+0x34>
		Clock.second -= 60;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3b3c      	subs	r3, #60	; 0x3c
 8000af6:	60fb      	str	r3, [r7, #12]
		if(Clock.minute >= 59){
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	2b3a      	cmp	r3, #58	; 0x3a
 8000afc:	dd06      	ble.n	8000b0c <clock_increment+0x2c>
			Clock.minute -= 60;
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	3b3c      	subs	r3, #60	; 0x3c
 8000b02:	60bb      	str	r3, [r7, #8]
			Clock.hour += 1;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3301      	adds	r3, #1
 8000b08:	607b      	str	r3, [r7, #4]
		}
	}
	else{
		Clock.second += 1;
	}
}
 8000b0a:	e006      	b.n	8000b1a <clock_increment+0x3a>
			Clock.minute += 1;
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
}
 8000b12:	e002      	b.n	8000b1a <clock_increment+0x3a>
		Clock.second += 1;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3301      	adds	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <add_clocks>:

void add_clocks(WallClock Clock1, WallClock Clock2){
 8000b26:	b082      	sub	sp, #8
 8000b28:	b490      	push	{r4, r7}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	1d3c      	adds	r4, r7, #4
 8000b30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000b34:	61fb      	str	r3, [r7, #28]
	//Adds seconds then minutes then hours, accounting for overflows as needed
	//Add seconds and account overflow
	Clock1.second += Clock2.second;
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	4413      	add	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
	if(Clock1.second >= 60){
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2b3b      	cmp	r3, #59	; 0x3b
 8000b42:	dd0e      	ble.n	8000b62 <add_clocks+0x3c>
		Clock1.minute += 1;
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	3301      	adds	r3, #1
 8000b48:	60bb      	str	r3, [r7, #8]
		Clock1.second -= 60;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	3b3c      	subs	r3, #60	; 0x3c
 8000b4e:	60fb      	str	r3, [r7, #12]
		if(Clock1.minute >= 60){
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	2b3b      	cmp	r3, #59	; 0x3b
 8000b54:	dd05      	ble.n	8000b62 <add_clocks+0x3c>
			Clock1.hour += 1;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
			Clock1.minute -= 60;
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	3b3c      	subs	r3, #60	; 0x3c
 8000b60:	60bb      	str	r3, [r7, #8]
		}
	}
	//Add minutes and account overflow
	Clock1.minute += Clock2.minute;
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	6a3b      	ldr	r3, [r7, #32]
 8000b66:	4413      	add	r3, r2
 8000b68:	60bb      	str	r3, [r7, #8]
	if(Clock1.minute >= 60){
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	2b3b      	cmp	r3, #59	; 0x3b
 8000b6e:	dd05      	ble.n	8000b7c <add_clocks+0x56>
		Clock1.hour += 1;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3301      	adds	r3, #1
 8000b74:	607b      	str	r3, [r7, #4]
		Clock1.minute -= 60;
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	3b3c      	subs	r3, #60	; 0x3c
 8000b7a:	60bb      	str	r3, [r7, #8]
	}
	//Add hours, don't account overflow as impossible
	Clock1.hour += Clock2.hour;
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	4413      	add	r3, r2
 8000b82:	607b      	str	r3, [r7, #4]
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc90      	pop	{r4, r7}
 8000b8c:	b002      	add	sp, #8
 8000b8e:	4770      	bx	lr

08000b90 <clock_compare>:

//if clock 1 is greater than clock 2(later) then return 0
//if clock 1 is less than clock 2(earlier) then return 2
int clock_compare(WallClock Clock1, WallClock Clock2){
 8000b90:	b082      	sub	sp, #8
 8000b92:	b490      	push	{r4, r7}
 8000b94:	b084      	sub	sp, #16
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	1d3c      	adds	r4, r7, #4
 8000b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000b9e:	61fb      	str	r3, [r7, #28]
	if(Clock1.hour == Clock2.hour){
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d121      	bne.n	8000bec <clock_compare+0x5c>
		if(Clock1.minute == Clock2.minute){
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	6a3b      	ldr	r3, [r7, #32]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d111      	bne.n	8000bd4 <clock_compare+0x44>
			if(Clock1.second == Clock2.second){
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d101      	bne.n	8000bbc <clock_compare+0x2c>
				return 1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e024      	b.n	8000c06 <clock_compare+0x76>
			}
			else if(Clock1.second > Clock2.second){
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dd01      	ble.n	8000bc8 <clock_compare+0x38>
				return 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	e01e      	b.n	8000c06 <clock_compare+0x76>
			}
			else if(Clock1.second < Clock2.second){
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	da19      	bge.n	8000c04 <clock_compare+0x74>
				return 2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	e018      	b.n	8000c06 <clock_compare+0x76>
			}
		}
		else if(Clock1.minute > Clock2.minute){
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	dd01      	ble.n	8000be0 <clock_compare+0x50>
			return 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e012      	b.n	8000c06 <clock_compare+0x76>
		}
		else if(Clock1.minute < Clock2.minute){
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	6a3b      	ldr	r3, [r7, #32]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	da0d      	bge.n	8000c04 <clock_compare+0x74>
			return 2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	e00c      	b.n	8000c06 <clock_compare+0x76>
		}
	}
	else if(Clock1.hour > Clock2.hour){
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	dd01      	ble.n	8000bf8 <clock_compare+0x68>
		return 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e006      	b.n	8000c06 <clock_compare+0x76>
	}
	else if(Clock1.hour < Clock2.hour){
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	da01      	bge.n	8000c04 <clock_compare+0x74>
		return 2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	e000      	b.n	8000c06 <clock_compare+0x76>
	}
	return 0;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc90      	pop	{r4, r7}
 8000c0e:	b002      	add	sp, #8
 8000c10:	4770      	bx	lr
	...

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c18:	f000 ffa2 	bl	8001b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1c:	f000 f85c 	bl	8000cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c20:	f000 f8f0 	bl	8000e04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c24:	f000 f8be 	bl	8000da4 <MX_USART2_UART_Init>
  MX_RNG_Init();
 8000c28:	f000 f8a8 	bl	8000d7c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c2c:	f003 fc84 	bl	8004538 <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 8000c30:	4818      	ldr	r0, [pc, #96]	; (8000c94 <main+0x80>)
 8000c32:	f003 fd78 	bl	8004726 <osMutexNew>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <main+0x84>)
 8000c3a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tellers */
  TellersHandle = osThreadNew(StartTellers, NULL, &Tellers_attributes);
 8000c3c:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <main+0x88>)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4817      	ldr	r0, [pc, #92]	; (8000ca0 <main+0x8c>)
 8000c42:	f003 fcc3 	bl	80045cc <osThreadNew>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <main+0x90>)
 8000c4a:	6013      	str	r3, [r2, #0]

  /* creation of Customers */
  CustomersHandle = osThreadNew(StartCustomers, NULL, &Customers_attributes);
 8000c4c:	4a16      	ldr	r2, [pc, #88]	; (8000ca8 <main+0x94>)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4816      	ldr	r0, [pc, #88]	; (8000cac <main+0x98>)
 8000c52:	f003 fcbb 	bl	80045cc <osThreadNew>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <main+0x9c>)
 8000c5a:	6013      	str	r3, [r2, #0]

  /* creation of Clock */
  ClockHandle = osThreadNew(StartClock, NULL, &Clock_attributes);
 8000c5c:	4a15      	ldr	r2, [pc, #84]	; (8000cb4 <main+0xa0>)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4815      	ldr	r0, [pc, #84]	; (8000cb8 <main+0xa4>)
 8000c62:	f003 fcb3 	bl	80045cc <osThreadNew>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <main+0xa8>)
 8000c6a:	6013      	str	r3, [r2, #0]

  /* creation of Manager */
  ManagerHandle = osThreadNew(StartManager, NULL, &Manager_attributes);
 8000c6c:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <main+0xac>)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4814      	ldr	r0, [pc, #80]	; (8000cc4 <main+0xb0>)
 8000c72:	f003 fcab 	bl	80045cc <osThreadNew>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4a13      	ldr	r2, [pc, #76]	; (8000cc8 <main+0xb4>)
 8000c7a:	6013      	str	r3, [r2, #0]

  /* creation of Breaker */
  BreakerHandle = osThreadNew(StartBreaker, NULL, &Breaker_attributes);
 8000c7c:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <main+0xb8>)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <main+0xbc>)
 8000c82:	f003 fca3 	bl	80045cc <osThreadNew>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <main+0xc0>)
 8000c8a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c8c:	f003 fc78 	bl	8004580 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <main+0x7c>
 8000c92:	bf00      	nop
 8000c94:	080079c8 	.word	0x080079c8
 8000c98:	200002ec 	.word	0x200002ec
 8000c9c:	08007914 	.word	0x08007914
 8000ca0:	08000ed1 	.word	0x08000ed1
 8000ca4:	200002d8 	.word	0x200002d8
 8000ca8:	08007938 	.word	0x08007938
 8000cac:	08000f01 	.word	0x08000f01
 8000cb0:	200002dc 	.word	0x200002dc
 8000cb4:	0800795c 	.word	0x0800795c
 8000cb8:	08000f11 	.word	0x08000f11
 8000cbc:	200002e0 	.word	0x200002e0
 8000cc0:	08007980 	.word	0x08007980
 8000cc4:	08000f51 	.word	0x08000f51
 8000cc8:	200002e4 	.word	0x200002e4
 8000ccc:	080079a4 	.word	0x080079a4
 8000cd0:	08000f61 	.word	0x08000f61
 8000cd4:	200002e8 	.word	0x200002e8

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b096      	sub	sp, #88	; 0x58
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	2244      	movs	r2, #68	; 0x44
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f006 fda8 	bl	800783c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cfa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cfe:	f001 fa8d 	bl	800221c <HAL_PWREx_ControlVoltageScaling>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d08:	f000 f942 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d16:	2310      	movs	r3, #16
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d22:	2301      	movs	r3, #1
 8000d24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d26:	230a      	movs	r3, #10
 8000d28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d32:	2302      	movs	r3, #2
 8000d34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 fac4 	bl	80022c8 <HAL_RCC_OscConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000d46:	f000 f923 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d5e:	463b      	mov	r3, r7
 8000d60:	2104      	movs	r1, #4
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 fe8c 	bl	8002a80 <HAL_RCC_ClockConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d6e:	f000 f90f 	bl	8000f90 <Error_Handler>
  }
}
 8000d72:	bf00      	nop
 8000d74:	3758      	adds	r7, #88	; 0x58
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_RNG_Init+0x20>)
 8000d82:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <MX_RNG_Init+0x24>)
 8000d84:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_RNG_Init+0x20>)
 8000d88:	f002 fd5a 	bl	8003840 <HAL_RNG_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000d92:	f000 f8fd 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000240 	.word	0x20000240
 8000da0:	50060800 	.word	0x50060800

08000da4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000daa:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <MX_USART2_UART_Init+0x5c>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000de8:	f002 fe56 	bl	8003a98 <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000df2:	f000 f8cd 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000250 	.word	0x20000250
 8000e00:	40004400 	.word	0x40004400

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <MX_GPIO_Init+0xc4>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a2a      	ldr	r2, [pc, #168]	; (8000ec8 <MX_GPIO_Init+0xc4>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <MX_GPIO_Init+0xc4>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <MX_GPIO_Init+0xc4>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a24      	ldr	r2, [pc, #144]	; (8000ec8 <MX_GPIO_Init+0xc4>)
 8000e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <MX_GPIO_Init+0xc4>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <MX_GPIO_Init+0xc4>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ec8 <MX_GPIO_Init+0xc4>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <MX_GPIO_Init+0xc4>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <MX_GPIO_Init+0xc4>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	4a18      	ldr	r2, [pc, #96]	; (8000ec8 <MX_GPIO_Init+0xc4>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_GPIO_Init+0xc4>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e82:	f001 f9a5 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e8c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480b      	ldr	r0, [pc, #44]	; (8000ecc <MX_GPIO_Init+0xc8>)
 8000e9e:	f000 ffed 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ea2:	2320      	movs	r3, #32
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebc:	f000 ffde 	bl	8001e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	48000800 	.word	0x48000800

08000ed0 <StartTellers>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTellers */
void StartTellers(void *argument)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Initialize 3 tellers
  /* Infinite loop */
	initialize_tellers();
 8000ed8:	f000 f970 	bl	80011bc <initialize_tellers>
  for(;;)
  {
    osMutexAcquire(MUTEXHandle, osWaitForever);
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <StartTellers+0x2c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f003 fca4 	bl	8004832 <osMutexAcquire>
    manage_tellers();
 8000eea:	f000 fa4f 	bl	800138c <manage_tellers>
    osMutexRelease(MUTEXHandle);
 8000eee:	4b03      	ldr	r3, [pc, #12]	; (8000efc <StartTellers+0x2c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 fce8 	bl	80048c8 <osMutexRelease>
    osMutexAcquire(MUTEXHandle, osWaitForever);
 8000ef8:	e7f0      	b.n	8000edc <StartTellers+0xc>
 8000efa:	bf00      	nop
 8000efc:	200002ec 	.word	0x200002ec

08000f00 <StartCustomers>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCustomers */
void StartCustomers(void *argument)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCustomers */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f003 fbf1 	bl	80046f0 <osDelay>
 8000f0e:	e7fb      	b.n	8000f08 <StartCustomers+0x8>

08000f10 <StartClock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClock */
void StartClock(void *argument)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartClock */
  /* Infinite loop */
	day_init(Clock);
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <StartClock+0x38>)
 8000f1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f1e:	f7ff fdcd 	bl	8000abc <day_init>
  for(;;)
  {
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <StartClock+0x3c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 fc81 	bl	8004832 <osMutexAcquire>
    clock_increment(Clock);
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <StartClock+0x38>)
 8000f32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f36:	f7ff fdd3 	bl	8000ae0 <clock_increment>
    osMutexRelease(MUTEXHandle);
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <StartClock+0x3c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 fcc2 	bl	80048c8 <osMutexRelease>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8000f44:	e7ed      	b.n	8000f22 <StartClock+0x12>
 8000f46:	bf00      	nop
 8000f48:	2000008c 	.word	0x2000008c
 8000f4c:	200002ec 	.word	0x200002ec

08000f50 <StartManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManager */
void StartManager(void *argument)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManager */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f003 fbc9 	bl	80046f0 <osDelay>
 8000f5e:	e7fb      	b.n	8000f58 <StartManager+0x8>

08000f60 <StartBreaker>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBreaker */
void StartBreaker(void *argument)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBreaker */
  /* Infinite loop */
	init_breaker();
 8000f68:	f7ff fab0 	bl	80004cc <init_breaker>
  for(;;)
  {
	    osMutexAcquire(MUTEXHandle, osWaitForever);
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <StartBreaker+0x2c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	4618      	mov	r0, r3
 8000f76:	f003 fc5c 	bl	8004832 <osMutexAcquire>
	    run_breaker();
 8000f7a:	f7ff fbf5 	bl	8000768 <run_breaker>
	    osMutexRelease(MUTEXHandle);
 8000f7e:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <StartBreaker+0x2c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 fca0 	bl	80048c8 <osMutexRelease>
	    osMutexAcquire(MUTEXHandle, osWaitForever);
 8000f88:	e7f0      	b.n	8000f6c <StartBreaker+0xc>
 8000f8a:	bf00      	nop
 8000f8c:	200002ec 	.word	0x200002ec

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <Error_Handler+0x8>
	...

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6613      	str	r3, [r2, #96]	; 0x60
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_MspInit+0x4c>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	f06f 0001 	mvn.w	r0, #1
 8000fda:	f000 ff18 	bl	8001e0e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0a6      	sub	sp, #152	; 0x98
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	2288      	movs	r2, #136	; 0x88
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f006 fc1d 	bl	800783c <memset>
  if(hrng->Instance==RNG)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a1d      	ldr	r2, [pc, #116]	; (800107c <HAL_RNG_MspInit+0x90>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d133      	bne.n	8001074 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800100c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001010:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001012:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800101a:	2302      	movs	r3, #2
 800101c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800101e:	2301      	movs	r3, #1
 8001020:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001022:	2308      	movs	r3, #8
 8001024:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001026:	2307      	movs	r3, #7
 8001028:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800102a:	2304      	movs	r3, #4
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800102e:	2302      	movs	r3, #2
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001032:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	4618      	mov	r0, r3
 800103e:	f001 ff43 	bl	8002ec8 <HAL_RCCEx_PeriphCLKConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8001048:	f7ff ffa2 	bl	8000f90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_RNG_MspInit+0x94>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001050:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <HAL_RNG_MspInit+0x94>)
 8001052:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_RNG_MspInit+0x94>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 5, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2105      	movs	r1, #5
 8001068:	2050      	movs	r0, #80	; 0x50
 800106a:	f000 fed0 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 800106e:	2050      	movs	r0, #80	; 0x50
 8001070:	f000 fee9 	bl	8001e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	3798      	adds	r7, #152	; 0x98
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	50060800 	.word	0x50060800
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0ac      	sub	sp, #176	; 0xb0
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2288      	movs	r2, #136	; 0x88
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f006 fbc9 	bl	800783c <memset>
  if(huart->Instance==USART2)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a21      	ldr	r2, [pc, #132]	; (8001134 <HAL_UART_MspInit+0xb0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d13b      	bne.n	800112c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 ff01 	bl	8002ec8 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010cc:	f7ff ff60 	bl	8000f90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_UART_MspInit+0xb4>)
 80010d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d4:	4a18      	ldr	r2, [pc, #96]	; (8001138 <HAL_UART_MspInit+0xb4>)
 80010d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010da:	6593      	str	r3, [r2, #88]	; 0x58
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_UART_MspInit+0xb4>)
 80010de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_UART_MspInit+0xb4>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ec:	4a12      	ldr	r2, [pc, #72]	; (8001138 <HAL_UART_MspInit+0xb4>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_UART_MspInit+0xb4>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001100:	230c      	movs	r3, #12
 8001102:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001118:	2307      	movs	r3, #7
 800111a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001128:	f000 fea8 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	37b0      	adds	r7, #176	; 0xb0
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40004400 	.word	0x40004400
 8001138:	40021000 	.word	0x40021000

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001140:	e7fe      	b.n	8001140 <NMI_Handler+0x4>

08001142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <MemManage_Handler+0x4>

0800114e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <UsageFault_Handler+0x4>

0800115a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116c:	f000 fd54 	bl	8001c18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001170:	f005 f9fe 	bl	8006570 <xTaskGetSchedulerState>
 8001174:	4603      	mov	r3, r0
 8001176:	2b01      	cmp	r3, #1
 8001178:	d001      	beq.n	800117e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800117a:	f006 f8e5 	bl	8007348 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <RNG_IRQHandler+0x10>)
 800118a:	f002 fc06 	bl	800399a <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000240 	.word	0x20000240

08001198 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <initialize_tellers>:

Teller VOID_TELLER;
//fix this
Teller teller_wait[4];

void initialize_tellers(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
    for (int i = 1; i < 4; i++) {
 80011c2:	2301      	movs	r3, #1
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	e0ca      	b.n	800135e <initialize_tellers+0x1a2>
    	//Initialize ID
        tellers[i].id = i;
 80011c8:	4a6d      	ldr	r2, [pc, #436]	; (8001380 <initialize_tellers+0x1c4>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	21a4      	movs	r1, #164	; 0xa4
 80011ce:	fb01 f303 	mul.w	r3, r1, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	601a      	str	r2, [r3, #0]
        // Initialize statuses
        tellers[i].status = 0;
 80011d8:	4a69      	ldr	r2, [pc, #420]	; (8001380 <initialize_tellers+0x1c4>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	21a4      	movs	r1, #164	; 0xa4
 80011de:	fb01 f303 	mul.w	r3, r1, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	3304      	adds	r3, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
        tellers[i].take_break = 0;
 80011ea:	4a65      	ldr	r2, [pc, #404]	; (8001380 <initialize_tellers+0x1c4>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	21a4      	movs	r1, #164	; 0xa4
 80011f0:	fb01 f303 	mul.w	r3, r1, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	3308      	adds	r3, #8
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
        //service function
        clock_init(tellers[i].service_end_time);
 80011fc:	4a60      	ldr	r2, [pc, #384]	; (8001380 <initialize_tellers+0x1c4>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	21a4      	movs	r1, #164	; 0xa4
 8001202:	fb01 f303 	mul.w	r3, r1, r3
 8001206:	4413      	add	r3, r2
 8001208:	3308      	adds	r3, #8
 800120a:	3304      	adds	r3, #4
 800120c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001210:	f7ff fc42 	bl	8000a98 <clock_init>
        //Initialize metrics
        tellers[i].customers_served = 0;
 8001214:	4a5a      	ldr	r2, [pc, #360]	; (8001380 <initialize_tellers+0x1c4>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	21a4      	movs	r1, #164	; 0xa4
 800121a:	fb01 f303 	mul.w	r3, r1, r3
 800121e:	4413      	add	r3, r2
 8001220:	3318      	adds	r3, #24
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
        clock_init(tellers[i].total_time_working);
 8001226:	4a56      	ldr	r2, [pc, #344]	; (8001380 <initialize_tellers+0x1c4>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	21a4      	movs	r1, #164	; 0xa4
 800122c:	fb01 f303 	mul.w	r3, r1, r3
 8001230:	4413      	add	r3, r2
 8001232:	3318      	adds	r3, #24
 8001234:	3304      	adds	r3, #4
 8001236:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800123a:	f7ff fc2d 	bl	8000a98 <clock_init>
        clock_init(tellers[i].total_time_waiting);
 800123e:	4a50      	ldr	r2, [pc, #320]	; (8001380 <initialize_tellers+0x1c4>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	21a4      	movs	r1, #164	; 0xa4
 8001244:	fb01 f303 	mul.w	r3, r1, r3
 8001248:	4413      	add	r3, r2
 800124a:	3328      	adds	r3, #40	; 0x28
 800124c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001250:	f7ff fc22 	bl	8000a98 <clock_init>
        clock_init(tellers[i].current_time_working);
 8001254:	4a4a      	ldr	r2, [pc, #296]	; (8001380 <initialize_tellers+0x1c4>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	21a4      	movs	r1, #164	; 0xa4
 800125a:	fb01 f303 	mul.w	r3, r1, r3
 800125e:	4413      	add	r3, r2
 8001260:	3330      	adds	r3, #48	; 0x30
 8001262:	3304      	adds	r3, #4
 8001264:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001268:	f7ff fc16 	bl	8000a98 <clock_init>
        clock_init(tellers[i].current_time_waiting);
 800126c:	4a44      	ldr	r2, [pc, #272]	; (8001380 <initialize_tellers+0x1c4>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	21a4      	movs	r1, #164	; 0xa4
 8001272:	fb01 f303 	mul.w	r3, r1, r3
 8001276:	4413      	add	r3, r2
 8001278:	3340      	adds	r3, #64	; 0x40
 800127a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800127e:	f7ff fc0b 	bl	8000a98 <clock_init>
        clock_init(tellers[i].max_time_working);
 8001282:	4a3f      	ldr	r2, [pc, #252]	; (8001380 <initialize_tellers+0x1c4>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	21a4      	movs	r1, #164	; 0xa4
 8001288:	fb01 f303 	mul.w	r3, r1, r3
 800128c:	4413      	add	r3, r2
 800128e:	3348      	adds	r3, #72	; 0x48
 8001290:	3304      	adds	r3, #4
 8001292:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001296:	f7ff fbff 	bl	8000a98 <clock_init>
        clock_init(tellers[i].max_time_waiting);
 800129a:	4a39      	ldr	r2, [pc, #228]	; (8001380 <initialize_tellers+0x1c4>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	21a4      	movs	r1, #164	; 0xa4
 80012a0:	fb01 f303 	mul.w	r3, r1, r3
 80012a4:	4413      	add	r3, r2
 80012a6:	3358      	adds	r3, #88	; 0x58
 80012a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012ac:	f7ff fbf4 	bl	8000a98 <clock_init>
        //Initialize break taking
        clock_init(tellers[i].break_end);
 80012b0:	4a33      	ldr	r2, [pc, #204]	; (8001380 <initialize_tellers+0x1c4>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	21a4      	movs	r1, #164	; 0xa4
 80012b6:	fb01 f303 	mul.w	r3, r1, r3
 80012ba:	4413      	add	r3, r2
 80012bc:	3360      	adds	r3, #96	; 0x60
 80012be:	3304      	adds	r3, #4
 80012c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012c4:	f7ff fbe8 	bl	8000a98 <clock_init>
        clock_init(tellers[i].current_break);
 80012c8:	4a2d      	ldr	r2, [pc, #180]	; (8001380 <initialize_tellers+0x1c4>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	21a4      	movs	r1, #164	; 0xa4
 80012ce:	fb01 f303 	mul.w	r3, r1, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	3370      	adds	r3, #112	; 0x70
 80012d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012da:	f7ff fbdd 	bl	8000a98 <clock_init>
        //Initialize break metrics
        tellers[i].num_breaks = 0;
 80012de:	4a28      	ldr	r2, [pc, #160]	; (8001380 <initialize_tellers+0x1c4>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	21a4      	movs	r1, #164	; 0xa4
 80012e4:	fb01 f303 	mul.w	r3, r1, r3
 80012e8:	4413      	add	r3, r2
 80012ea:	337c      	adds	r3, #124	; 0x7c
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
        clock_init(tellers[i].max_break);
 80012f0:	4a23      	ldr	r2, [pc, #140]	; (8001380 <initialize_tellers+0x1c4>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	21a4      	movs	r1, #164	; 0xa4
 80012f6:	fb01 f303 	mul.w	r3, r1, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	3380      	adds	r3, #128	; 0x80
 80012fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001302:	f7ff fbc9 	bl	8000a98 <clock_init>
        clock_init(tellers[i].min_break);
 8001306:	4a1e      	ldr	r2, [pc, #120]	; (8001380 <initialize_tellers+0x1c4>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	21a4      	movs	r1, #164	; 0xa4
 800130c:	fb01 f303 	mul.w	r3, r1, r3
 8001310:	4413      	add	r3, r2
 8001312:	3388      	adds	r3, #136	; 0x88
 8001314:	3304      	adds	r3, #4
 8001316:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800131a:	f7ff fbbd 	bl	8000a98 <clock_init>
        clock_init(tellers[i].total_break);
 800131e:	4a18      	ldr	r2, [pc, #96]	; (8001380 <initialize_tellers+0x1c4>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	21a4      	movs	r1, #164	; 0xa4
 8001324:	fb01 f303 	mul.w	r3, r1, r3
 8001328:	4413      	add	r3, r2
 800132a:	3398      	adds	r3, #152	; 0x98
 800132c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001330:	f7ff fbb2 	bl	8000a98 <clock_init>

        //initialize tellers in Queue
        teller_wait[i-1] = tellers[i];
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <initialize_tellers+0x1c8>)
 800133a:	21a4      	movs	r1, #164	; 0xa4
 800133c:	fb01 f303 	mul.w	r3, r1, r3
 8001340:	18d0      	adds	r0, r2, r3
 8001342:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <initialize_tellers+0x1c4>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	21a4      	movs	r1, #164	; 0xa4
 8001348:	fb01 f303 	mul.w	r3, r1, r3
 800134c:	4413      	add	r3, r2
 800134e:	4619      	mov	r1, r3
 8001350:	23a4      	movs	r3, #164	; 0xa4
 8001352:	461a      	mov	r2, r3
 8001354:	f006 fa9e 	bl	8007894 <memcpy>
    for (int i = 1; i < 4; i++) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3301      	adds	r3, #1
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b03      	cmp	r3, #3
 8001362:	f77f af31 	ble.w	80011c8 <initialize_tellers+0xc>

    }
    	teller_wait[3] = VOID_TELLER;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <initialize_tellers+0x1c8>)
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <initialize_tellers+0x1cc>)
 800136a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800136e:	4611      	mov	r1, r2
 8001370:	22a4      	movs	r2, #164	; 0xa4
 8001372:	4618      	mov	r0, r3
 8001374:	f006 fa8e 	bl	8007894 <memcpy>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200002f0 	.word	0x200002f0
 8001384:	20000624 	.word	0x20000624
 8001388:	20000580 	.word	0x20000580

0800138c <manage_tellers>:

//Maybe Put entire thing inside a case statement if at all possible,
//Would Simplify logic and speed it up
void manage_tellers(void){
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b090      	sub	sp, #64	; 0x40
 8001390:	af02      	add	r7, sp, #8
	int i;
	for (i = 1; i < 4; i++) {
 8001392:	2301      	movs	r3, #1
 8001394:	637b      	str	r3, [r7, #52]	; 0x34
 8001396:	bf00      	nop
 8001398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139a:	2b03      	cmp	r3, #3
 800139c:	f300 83aa 	bgt.w	8001af4 <manage_tellers+0x768>
		switch (tellers[i].status){
 80013a0:	4a93      	ldr	r2, [pc, #588]	; (80015f0 <manage_tellers+0x264>)
 80013a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a4:	21a4      	movs	r1, #164	; 0xa4
 80013a6:	fb01 f303 	mul.w	r3, r1, r3
 80013aa:	4413      	add	r3, r2
 80013ac:	3304      	adds	r3, #4
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d009      	beq.n	80013c8 <manage_tellers+0x3c>
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	f300 839f 	bgt.w	8001af8 <manage_tellers+0x76c>
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 811c 	beq.w	80015f8 <manage_tellers+0x26c>
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	f000 82a0 	beq.w	8001906 <manage_tellers+0x57a>
				}
				break;
			}
		}
			//Case Break
			break;
 80013c6:	e397      	b.n	8001af8 <manage_tellers+0x76c>
			if(clock_compare(tellers[i].current_break,tellers[i].break_end) != 1){
 80013c8:	4a89      	ldr	r2, [pc, #548]	; (80015f0 <manage_tellers+0x264>)
 80013ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013cc:	21a4      	movs	r1, #164	; 0xa4
 80013ce:	fb01 f303 	mul.w	r3, r1, r3
 80013d2:	4413      	add	r3, r2
 80013d4:	3360      	adds	r3, #96	; 0x60
 80013d6:	4986      	ldr	r1, [pc, #536]	; (80015f0 <manage_tellers+0x264>)
 80013d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013da:	20a4      	movs	r0, #164	; 0xa4
 80013dc:	fb00 f202 	mul.w	r2, r0, r2
 80013e0:	440a      	add	r2, r1
 80013e2:	3270      	adds	r2, #112	; 0x70
 80013e4:	466c      	mov	r4, sp
 80013e6:	f103 0108 	add.w	r1, r3, #8
 80013ea:	c903      	ldmia	r1, {r0, r1}
 80013ec:	e884 0003 	stmia.w	r4, {r0, r1}
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80013f4:	f7ff fbcc 	bl	8000b90 <clock_compare>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d00b      	beq.n	8001416 <manage_tellers+0x8a>
				clock_increment(tellers[i].current_break);
 80013fe:	4a7c      	ldr	r2, [pc, #496]	; (80015f0 <manage_tellers+0x264>)
 8001400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001402:	21a4      	movs	r1, #164	; 0xa4
 8001404:	fb01 f303 	mul.w	r3, r1, r3
 8001408:	4413      	add	r3, r2
 800140a:	3370      	adds	r3, #112	; 0x70
 800140c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001410:	f7ff fb66 	bl	8000ae0 <clock_increment>
				break;
 8001414:	e36d      	b.n	8001af2 <manage_tellers+0x766>
			if(clock_compare(tellers[i].current_break,tellers[i].break_end) == 1){
 8001416:	4a76      	ldr	r2, [pc, #472]	; (80015f0 <manage_tellers+0x264>)
 8001418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800141a:	21a4      	movs	r1, #164	; 0xa4
 800141c:	fb01 f303 	mul.w	r3, r1, r3
 8001420:	4413      	add	r3, r2
 8001422:	3360      	adds	r3, #96	; 0x60
 8001424:	4972      	ldr	r1, [pc, #456]	; (80015f0 <manage_tellers+0x264>)
 8001426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001428:	20a4      	movs	r0, #164	; 0xa4
 800142a:	fb00 f202 	mul.w	r2, r0, r2
 800142e:	440a      	add	r2, r1
 8001430:	3270      	adds	r2, #112	; 0x70
 8001432:	466c      	mov	r4, sp
 8001434:	f103 0108 	add.w	r1, r3, #8
 8001438:	c903      	ldmia	r1, {r0, r1}
 800143a:	e884 0003 	stmia.w	r4, {r0, r1}
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	ca07      	ldmia	r2, {r0, r1, r2}
 8001442:	f7ff fba5 	bl	8000b90 <clock_compare>
 8001446:	4603      	mov	r3, r0
 8001448:	2b01      	cmp	r3, #1
 800144a:	f040 8347 	bne.w	8001adc <manage_tellers+0x750>
				if(clock_compare(tellers[i].current_break,tellers[i].max_break) == 0){
 800144e:	4a68      	ldr	r2, [pc, #416]	; (80015f0 <manage_tellers+0x264>)
 8001450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001452:	21a4      	movs	r1, #164	; 0xa4
 8001454:	fb01 f303 	mul.w	r3, r1, r3
 8001458:	4413      	add	r3, r2
 800145a:	3380      	adds	r3, #128	; 0x80
 800145c:	4964      	ldr	r1, [pc, #400]	; (80015f0 <manage_tellers+0x264>)
 800145e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001460:	20a4      	movs	r0, #164	; 0xa4
 8001462:	fb00 f202 	mul.w	r2, r0, r2
 8001466:	440a      	add	r2, r1
 8001468:	3270      	adds	r2, #112	; 0x70
 800146a:	466c      	mov	r4, sp
 800146c:	1d19      	adds	r1, r3, #4
 800146e:	c903      	ldmia	r1, {r0, r1}
 8001470:	e884 0003 	stmia.w	r4, {r0, r1}
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	ca07      	ldmia	r2, {r0, r1, r2}
 8001478:	f7ff fb8a 	bl	8000b90 <clock_compare>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d113      	bne.n	80014aa <manage_tellers+0x11e>
					tellers[i].max_break = tellers[i].current_break;
 8001482:	4a5b      	ldr	r2, [pc, #364]	; (80015f0 <manage_tellers+0x264>)
 8001484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001486:	21a4      	movs	r1, #164	; 0xa4
 8001488:	fb01 f303 	mul.w	r3, r1, r3
 800148c:	4413      	add	r3, r2
 800148e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8001492:	4a57      	ldr	r2, [pc, #348]	; (80015f0 <manage_tellers+0x264>)
 8001494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001496:	21a4      	movs	r1, #164	; 0xa4
 8001498:	fb01 f303 	mul.w	r3, r1, r3
 800149c:	4413      	add	r3, r2
 800149e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80014a2:	4603      	mov	r3, r0
 80014a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80014a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				if(clock_compare(tellers[i].current_break,tellers[i].min_break) == 2){
 80014aa:	4a51      	ldr	r2, [pc, #324]	; (80015f0 <manage_tellers+0x264>)
 80014ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ae:	21a4      	movs	r1, #164	; 0xa4
 80014b0:	fb01 f303 	mul.w	r3, r1, r3
 80014b4:	4413      	add	r3, r2
 80014b6:	3388      	adds	r3, #136	; 0x88
 80014b8:	494d      	ldr	r1, [pc, #308]	; (80015f0 <manage_tellers+0x264>)
 80014ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014bc:	20a4      	movs	r0, #164	; 0xa4
 80014be:	fb00 f202 	mul.w	r2, r0, r2
 80014c2:	440a      	add	r2, r1
 80014c4:	3270      	adds	r2, #112	; 0x70
 80014c6:	466c      	mov	r4, sp
 80014c8:	f103 0108 	add.w	r1, r3, #8
 80014cc:	c903      	ldmia	r1, {r0, r1}
 80014ce:	e884 0003 	stmia.w	r4, {r0, r1}
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80014d6:	f7ff fb5b 	bl	8000b90 <clock_compare>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d111      	bne.n	8001504 <manage_tellers+0x178>
					tellers[i].min_break = tellers[i].current_break;
 80014e0:	4a43      	ldr	r2, [pc, #268]	; (80015f0 <manage_tellers+0x264>)
 80014e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e4:	21a4      	movs	r1, #164	; 0xa4
 80014e6:	fb01 f303 	mul.w	r3, r1, r3
 80014ea:	4413      	add	r3, r2
 80014ec:	3388      	adds	r3, #136	; 0x88
 80014ee:	4940      	ldr	r1, [pc, #256]	; (80015f0 <manage_tellers+0x264>)
 80014f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014f2:	20a4      	movs	r0, #164	; 0xa4
 80014f4:	fb00 f202 	mul.w	r2, r0, r2
 80014f8:	440a      	add	r2, r1
 80014fa:	3270      	adds	r2, #112	; 0x70
 80014fc:	3304      	adds	r3, #4
 80014fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001500:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				add_clocks(tellers[i].total_break, tellers[i].current_break);
 8001504:	4a3a      	ldr	r2, [pc, #232]	; (80015f0 <manage_tellers+0x264>)
 8001506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001508:	21a4      	movs	r1, #164	; 0xa4
 800150a:	fb01 f303 	mul.w	r3, r1, r3
 800150e:	4413      	add	r3, r2
 8001510:	3370      	adds	r3, #112	; 0x70
 8001512:	4937      	ldr	r1, [pc, #220]	; (80015f0 <manage_tellers+0x264>)
 8001514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001516:	20a4      	movs	r0, #164	; 0xa4
 8001518:	fb00 f202 	mul.w	r2, r0, r2
 800151c:	440a      	add	r2, r1
 800151e:	3298      	adds	r2, #152	; 0x98
 8001520:	466c      	mov	r4, sp
 8001522:	1d19      	adds	r1, r3, #4
 8001524:	c903      	ldmia	r1, {r0, r1}
 8001526:	e884 0003 	stmia.w	r4, {r0, r1}
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	ca07      	ldmia	r2, {r0, r1, r2}
 800152e:	f7ff fafa 	bl	8000b26 <add_clocks>
				clock_init(tellers[i].current_break);
 8001532:	4a2f      	ldr	r2, [pc, #188]	; (80015f0 <manage_tellers+0x264>)
 8001534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001536:	21a4      	movs	r1, #164	; 0xa4
 8001538:	fb01 f303 	mul.w	r3, r1, r3
 800153c:	4413      	add	r3, r2
 800153e:	3370      	adds	r3, #112	; 0x70
 8001540:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001544:	f7ff faa8 	bl	8000a98 <clock_init>
				tellers[i].status = 0;
 8001548:	4a29      	ldr	r2, [pc, #164]	; (80015f0 <manage_tellers+0x264>)
 800154a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154c:	21a4      	movs	r1, #164	; 0xa4
 800154e:	fb01 f303 	mul.w	r3, r1, r3
 8001552:	4413      	add	r3, r2
 8001554:	3304      	adds	r3, #4
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
				if(!((teller_wait[0].id == i) && (teller_wait[1].id == i) && (teller_wait[2].id == i))){
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <manage_tellers+0x268>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001560:	429a      	cmp	r2, r3
 8001562:	d10c      	bne.n	800157e <manage_tellers+0x1f2>
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <manage_tellers+0x268>)
 8001566:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800156a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800156c:	429a      	cmp	r2, r3
 800156e:	d106      	bne.n	800157e <manage_tellers+0x1f2>
 8001570:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <manage_tellers+0x268>)
 8001572:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001576:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001578:	429a      	cmp	r2, r3
 800157a:	f000 82af 	beq.w	8001adc <manage_tellers+0x750>
					if(teller_wait[0].id == 0){
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <manage_tellers+0x268>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <manage_tellers+0x214>
						teller_wait[0] = tellers[i];
 8001586:	481b      	ldr	r0, [pc, #108]	; (80015f4 <manage_tellers+0x268>)
 8001588:	4a19      	ldr	r2, [pc, #100]	; (80015f0 <manage_tellers+0x264>)
 800158a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800158c:	21a4      	movs	r1, #164	; 0xa4
 800158e:	fb01 f303 	mul.w	r3, r1, r3
 8001592:	4413      	add	r3, r2
 8001594:	4619      	mov	r1, r3
 8001596:	23a4      	movs	r3, #164	; 0xa4
 8001598:	461a      	mov	r2, r3
 800159a:	f006 f97b 	bl	8007894 <memcpy>
					break;
 800159e:	e29f      	b.n	8001ae0 <manage_tellers+0x754>
					else if(teller_wait[1].id == 0){
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <manage_tellers+0x268>)
 80015a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10d      	bne.n	80015c6 <manage_tellers+0x23a>
						teller_wait[1] = tellers[i];
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <manage_tellers+0x268>)
 80015ac:	4910      	ldr	r1, [pc, #64]	; (80015f0 <manage_tellers+0x264>)
 80015ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b0:	20a4      	movs	r0, #164	; 0xa4
 80015b2:	fb00 f303 	mul.w	r3, r0, r3
 80015b6:	4419      	add	r1, r3
 80015b8:	f102 03a4 	add.w	r3, r2, #164	; 0xa4
 80015bc:	22a4      	movs	r2, #164	; 0xa4
 80015be:	4618      	mov	r0, r3
 80015c0:	f006 f968 	bl	8007894 <memcpy>
					break;
 80015c4:	e28c      	b.n	8001ae0 <manage_tellers+0x754>
					else if(teller_wait[2].id == 0){
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <manage_tellers+0x268>)
 80015c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f040 8287 	bne.w	8001ae0 <manage_tellers+0x754>
						teller_wait[2] = tellers[i];
 80015d2:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <manage_tellers+0x268>)
 80015d4:	4906      	ldr	r1, [pc, #24]	; (80015f0 <manage_tellers+0x264>)
 80015d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d8:	20a4      	movs	r0, #164	; 0xa4
 80015da:	fb00 f303 	mul.w	r3, r0, r3
 80015de:	4419      	add	r1, r3
 80015e0:	f502 73a4 	add.w	r3, r2, #328	; 0x148
 80015e4:	22a4      	movs	r2, #164	; 0xa4
 80015e6:	4618      	mov	r0, r3
 80015e8:	f006 f954 	bl	8007894 <memcpy>
					break;
 80015ec:	e278      	b.n	8001ae0 <manage_tellers+0x754>
 80015ee:	bf00      	nop
 80015f0:	200002f0 	.word	0x200002f0
 80015f4:	20000624 	.word	0x20000624
			if(tellers[i].take_break == 0){
 80015f8:	4a8e      	ldr	r2, [pc, #568]	; (8001834 <manage_tellers+0x4a8>)
 80015fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fc:	21a4      	movs	r1, #164	; 0xa4
 80015fe:	fb01 f303 	mul.w	r3, r1, r3
 8001602:	4413      	add	r3, r2
 8001604:	3308      	adds	r3, #8
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	f040 80b8 	bne.w	800177e <manage_tellers+0x3f2>
				clock_increment(tellers[i].current_time_waiting);
 800160e:	4a89      	ldr	r2, [pc, #548]	; (8001834 <manage_tellers+0x4a8>)
 8001610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001612:	21a4      	movs	r1, #164	; 0xa4
 8001614:	fb01 f303 	mul.w	r3, r1, r3
 8001618:	4413      	add	r3, r2
 800161a:	3340      	adds	r3, #64	; 0x40
 800161c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001620:	f7ff fa5e 	bl	8000ae0 <clock_increment>
				  if((waiting[0] != NULL) && (tellers[i].id == teller_wait[0].id)){
 8001624:	4b84      	ldr	r3, [pc, #528]	; (8001838 <manage_tellers+0x4ac>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 825b 	beq.w	8001ae4 <manage_tellers+0x758>
 800162e:	4a81      	ldr	r2, [pc, #516]	; (8001834 <manage_tellers+0x4a8>)
 8001630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001632:	21a4      	movs	r1, #164	; 0xa4
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	4413      	add	r3, r2
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b7f      	ldr	r3, [pc, #508]	; (800183c <manage_tellers+0x4b0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	f040 824f 	bne.w	8001ae4 <manage_tellers+0x758>
					Customer customer = *waiting[0];
 8001646:	4b7c      	ldr	r3, [pc, #496]	; (8001838 <manage_tellers+0x4ac>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	463c      	mov	r4, r7
 800164c:	461d      	mov	r5, r3
 800164e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800165a:	682b      	ldr	r3, [r5, #0]
 800165c:	6023      	str	r3, [r4, #0]
					waiting[0] = NULL;
 800165e:	4b76      	ldr	r3, [pc, #472]	; (8001838 <manage_tellers+0x4ac>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
				  	tellers[i].service_end_time = customer.service_time;
 8001664:	4a73      	ldr	r2, [pc, #460]	; (8001834 <manage_tellers+0x4a8>)
 8001666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001668:	21a4      	movs	r1, #164	; 0xa4
 800166a:	fb01 f303 	mul.w	r3, r1, r3
 800166e:	4413      	add	r3, r2
 8001670:	3308      	adds	r3, #8
 8001672:	3304      	adds	r3, #4
 8001674:	1d3a      	adds	r2, r7, #4
 8001676:	ca07      	ldmia	r2, {r0, r1, r2}
 8001678:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  	add_clocks(total_customer_wait, customer.total_queue_time);
 800167c:	4a70      	ldr	r2, [pc, #448]	; (8001840 <manage_tellers+0x4b4>)
 800167e:	466c      	mov	r4, sp
 8001680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001684:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001688:	e884 0003 	stmia.w	r4, {r0, r1}
 800168c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001690:	f7ff fa49 	bl	8000b26 <add_clocks>
				  	if(clock_compare(customer.total_queue_time,max_customer_wait) == 0){
 8001694:	4b6b      	ldr	r3, [pc, #428]	; (8001844 <manage_tellers+0x4b8>)
 8001696:	466c      	mov	r4, sp
 8001698:	1d1a      	adds	r2, r3, #4
 800169a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800169e:	e884 0003 	stmia.w	r4, {r0, r1}
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80016aa:	f7ff fa71 	bl	8000b90 <clock_compare>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d107      	bne.n	80016c4 <manage_tellers+0x338>
				  		max_customer_wait = customer.total_queue_time;
 80016b4:	4b63      	ldr	r3, [pc, #396]	; (8001844 <manage_tellers+0x4b8>)
 80016b6:	461c      	mov	r4, r3
 80016b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				  	tellers[i].status = 1;
 80016c4:	4a5b      	ldr	r2, [pc, #364]	; (8001834 <manage_tellers+0x4a8>)
 80016c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c8:	21a4      	movs	r1, #164	; 0xa4
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	3304      	adds	r3, #4
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
				  	if(clock_compare(tellers[i].current_time_waiting,tellers[i].max_time_waiting) == 0){
 80016d6:	4a57      	ldr	r2, [pc, #348]	; (8001834 <manage_tellers+0x4a8>)
 80016d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016da:	21a4      	movs	r1, #164	; 0xa4
 80016dc:	fb01 f303 	mul.w	r3, r1, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	3358      	adds	r3, #88	; 0x58
 80016e4:	4953      	ldr	r1, [pc, #332]	; (8001834 <manage_tellers+0x4a8>)
 80016e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016e8:	20a4      	movs	r0, #164	; 0xa4
 80016ea:	fb00 f202 	mul.w	r2, r0, r2
 80016ee:	440a      	add	r2, r1
 80016f0:	3240      	adds	r2, #64	; 0x40
 80016f2:	466c      	mov	r4, sp
 80016f4:	1d19      	adds	r1, r3, #4
 80016f6:	c903      	ldmia	r1, {r0, r1}
 80016f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001700:	f7ff fa46 	bl	8000b90 <clock_compare>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d12d      	bne.n	8001766 <manage_tellers+0x3da>
				 	tellers[i].max_time_waiting = tellers[i].current_time_waiting;
 800170a:	4a4a      	ldr	r2, [pc, #296]	; (8001834 <manage_tellers+0x4a8>)
 800170c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800170e:	21a4      	movs	r1, #164	; 0xa4
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800171a:	4a46      	ldr	r2, [pc, #280]	; (8001834 <manage_tellers+0x4a8>)
 800171c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171e:	21a4      	movs	r1, #164	; 0xa4
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	4413      	add	r3, r2
 8001726:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800172a:	4603      	mov	r3, r0
 800172c:	ca07      	ldmia	r2, {r0, r1, r2}
 800172e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				 	teller_wait[0] = teller_wait[1];
 8001732:	4a42      	ldr	r2, [pc, #264]	; (800183c <manage_tellers+0x4b0>)
 8001734:	4b41      	ldr	r3, [pc, #260]	; (800183c <manage_tellers+0x4b0>)
 8001736:	4610      	mov	r0, r2
 8001738:	33a4      	adds	r3, #164	; 0xa4
 800173a:	22a4      	movs	r2, #164	; 0xa4
 800173c:	4619      	mov	r1, r3
 800173e:	f006 f8a9 	bl	8007894 <memcpy>
				 	teller_wait[1] = teller_wait[2];
 8001742:	4b3e      	ldr	r3, [pc, #248]	; (800183c <manage_tellers+0x4b0>)
 8001744:	4a3d      	ldr	r2, [pc, #244]	; (800183c <manage_tellers+0x4b0>)
 8001746:	33a4      	adds	r3, #164	; 0xa4
 8001748:	f502 71a4 	add.w	r1, r2, #328	; 0x148
 800174c:	22a4      	movs	r2, #164	; 0xa4
 800174e:	4618      	mov	r0, r3
 8001750:	f006 f8a0 	bl	8007894 <memcpy>
				 	teller_wait[4] = VOID_TELLER;
 8001754:	4b39      	ldr	r3, [pc, #228]	; (800183c <manage_tellers+0x4b0>)
 8001756:	4a3c      	ldr	r2, [pc, #240]	; (8001848 <manage_tellers+0x4bc>)
 8001758:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800175c:	4611      	mov	r1, r2
 800175e:	22a4      	movs	r2, #164	; 0xa4
 8001760:	4618      	mov	r0, r3
 8001762:	f006 f897 	bl	8007894 <memcpy>
				   clock_init(tellers[i].current_time_waiting);
 8001766:	4a33      	ldr	r2, [pc, #204]	; (8001834 <manage_tellers+0x4a8>)
 8001768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176a:	21a4      	movs	r1, #164	; 0xa4
 800176c:	fb01 f303 	mul.w	r3, r1, r3
 8001770:	4413      	add	r3, r2
 8001772:	3340      	adds	r3, #64	; 0x40
 8001774:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001778:	f7ff f98e 	bl	8000a98 <clock_init>
				break;
 800177c:	e1b2      	b.n	8001ae4 <manage_tellers+0x758>
			if(tellers[i].take_break == 1){
 800177e:	4a2d      	ldr	r2, [pc, #180]	; (8001834 <manage_tellers+0x4a8>)
 8001780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001782:	21a4      	movs	r1, #164	; 0xa4
 8001784:	fb01 f303 	mul.w	r3, r1, r3
 8001788:	4413      	add	r3, r2
 800178a:	3308      	adds	r3, #8
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	f040 81aa 	bne.w	8001ae8 <manage_tellers+0x75c>
				tellers[i].status = 2;
 8001794:	4a27      	ldr	r2, [pc, #156]	; (8001834 <manage_tellers+0x4a8>)
 8001796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001798:	21a4      	movs	r1, #164	; 0xa4
 800179a:	fb01 f303 	mul.w	r3, r1, r3
 800179e:	4413      	add	r3, r2
 80017a0:	3304      	adds	r3, #4
 80017a2:	2202      	movs	r2, #2
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d02f      	beq.n	800180c <manage_tellers+0x480>
 80017ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	dc4e      	bgt.n	8001850 <manage_tellers+0x4c4>
 80017b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d003      	beq.n	80017c0 <manage_tellers+0x434>
 80017b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d013      	beq.n	80017e6 <manage_tellers+0x45a>
					break;
 80017be:	e047      	b.n	8001850 <manage_tellers+0x4c4>
					breaker.start_break[i] = 1;
 80017c0:	4a22      	ldr	r2, [pc, #136]	; (800184c <manage_tellers+0x4c0>)
 80017c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c4:	2101      	movs	r1, #1
 80017c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration1;
 80017ca:	4a1a      	ldr	r2, [pc, #104]	; (8001834 <manage_tellers+0x4a8>)
 80017cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ce:	21a4      	movs	r1, #164	; 0xa4
 80017d0:	fb01 f303 	mul.w	r3, r1, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	3360      	adds	r3, #96	; 0x60
 80017d8:	4a1c      	ldr	r2, [pc, #112]	; (800184c <manage_tellers+0x4c0>)
 80017da:	3304      	adds	r3, #4
 80017dc:	3218      	adds	r2, #24
 80017de:	ca07      	ldmia	r2, {r0, r1, r2}
 80017e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					break;
 80017e4:	e035      	b.n	8001852 <manage_tellers+0x4c6>
					breaker.start_break[i] = 1;
 80017e6:	4a19      	ldr	r2, [pc, #100]	; (800184c <manage_tellers+0x4c0>)
 80017e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ea:	2101      	movs	r1, #1
 80017ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration2;
 80017f0:	4a10      	ldr	r2, [pc, #64]	; (8001834 <manage_tellers+0x4a8>)
 80017f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f4:	21a4      	movs	r1, #164	; 0xa4
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	3360      	adds	r3, #96	; 0x60
 80017fe:	4a13      	ldr	r2, [pc, #76]	; (800184c <manage_tellers+0x4c0>)
 8001800:	3304      	adds	r3, #4
 8001802:	3230      	adds	r2, #48	; 0x30
 8001804:	ca07      	ldmia	r2, {r0, r1, r2}
 8001806:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					break;
 800180a:	e022      	b.n	8001852 <manage_tellers+0x4c6>
					breaker.start_break[i] = 1;
 800180c:	4a0f      	ldr	r2, [pc, #60]	; (800184c <manage_tellers+0x4c0>)
 800180e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001810:	2101      	movs	r1, #1
 8001812:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration3;
 8001816:	4a07      	ldr	r2, [pc, #28]	; (8001834 <manage_tellers+0x4a8>)
 8001818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181a:	21a4      	movs	r1, #164	; 0xa4
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	3360      	adds	r3, #96	; 0x60
 8001824:	4a09      	ldr	r2, [pc, #36]	; (800184c <manage_tellers+0x4c0>)
 8001826:	3304      	adds	r3, #4
 8001828:	3248      	adds	r2, #72	; 0x48
 800182a:	ca07      	ldmia	r2, {r0, r1, r2}
 800182c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					break;
 8001830:	e00f      	b.n	8001852 <manage_tellers+0x4c6>
 8001832:	bf00      	nop
 8001834:	200002f0 	.word	0x200002f0
 8001838:	20000098 	.word	0x20000098
 800183c:	20000624 	.word	0x20000624
 8001840:	20000228 	.word	0x20000228
 8001844:	20000234 	.word	0x20000234
 8001848:	20000580 	.word	0x20000580
 800184c:	2000002c 	.word	0x2000002c
					break;
 8001850:	bf00      	nop
				tellers[i].take_break = 0;
 8001852:	4aac      	ldr	r2, [pc, #688]	; (8001b04 <manage_tellers+0x778>)
 8001854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001856:	21a4      	movs	r1, #164	; 0xa4
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	3308      	adds	r3, #8
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
				if(clock_compare(tellers[i].current_time_waiting,tellers[i].max_time_waiting) == 0){
 8001864:	4aa7      	ldr	r2, [pc, #668]	; (8001b04 <manage_tellers+0x778>)
 8001866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001868:	21a4      	movs	r1, #164	; 0xa4
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	4413      	add	r3, r2
 8001870:	3358      	adds	r3, #88	; 0x58
 8001872:	49a4      	ldr	r1, [pc, #656]	; (8001b04 <manage_tellers+0x778>)
 8001874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001876:	20a4      	movs	r0, #164	; 0xa4
 8001878:	fb00 f202 	mul.w	r2, r0, r2
 800187c:	440a      	add	r2, r1
 800187e:	3240      	adds	r2, #64	; 0x40
 8001880:	466c      	mov	r4, sp
 8001882:	1d19      	adds	r1, r3, #4
 8001884:	c903      	ldmia	r1, {r0, r1}
 8001886:	e884 0003 	stmia.w	r4, {r0, r1}
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	ca07      	ldmia	r2, {r0, r1, r2}
 800188e:	f7ff f97f 	bl	8000b90 <clock_compare>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d113      	bne.n	80018c0 <manage_tellers+0x534>
					tellers[i].max_time_waiting = tellers[i].current_time_waiting;
 8001898:	4a9a      	ldr	r2, [pc, #616]	; (8001b04 <manage_tellers+0x778>)
 800189a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189c:	21a4      	movs	r1, #164	; 0xa4
 800189e:	fb01 f303 	mul.w	r3, r1, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	f103 0058 	add.w	r0, r3, #88	; 0x58
 80018a8:	4a96      	ldr	r2, [pc, #600]	; (8001b04 <manage_tellers+0x778>)
 80018aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ac:	21a4      	movs	r1, #164	; 0xa4
 80018ae:	fb01 f303 	mul.w	r3, r1, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80018b8:	4603      	mov	r3, r0
 80018ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80018bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				add_clocks(tellers[i].total_time_waiting,tellers[i].current_time_waiting);
 80018c0:	4a90      	ldr	r2, [pc, #576]	; (8001b04 <manage_tellers+0x778>)
 80018c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c4:	21a4      	movs	r1, #164	; 0xa4
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	3340      	adds	r3, #64	; 0x40
 80018ce:	498d      	ldr	r1, [pc, #564]	; (8001b04 <manage_tellers+0x778>)
 80018d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018d2:	20a4      	movs	r0, #164	; 0xa4
 80018d4:	fb00 f202 	mul.w	r2, r0, r2
 80018d8:	440a      	add	r2, r1
 80018da:	3228      	adds	r2, #40	; 0x28
 80018dc:	466c      	mov	r4, sp
 80018de:	1d19      	adds	r1, r3, #4
 80018e0:	c903      	ldmia	r1, {r0, r1}
 80018e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80018ea:	f7ff f91c 	bl	8000b26 <add_clocks>
				clock_init(tellers[i].current_time_waiting);
 80018ee:	4a85      	ldr	r2, [pc, #532]	; (8001b04 <manage_tellers+0x778>)
 80018f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f2:	21a4      	movs	r1, #164	; 0xa4
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	3340      	adds	r3, #64	; 0x40
 80018fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001900:	f7ff f8ca 	bl	8000a98 <clock_init>
			break;
 8001904:	e0f0      	b.n	8001ae8 <manage_tellers+0x75c>
			if(clock_compare(tellers[i].current_time_working,tellers[i].service_end_time) == 1){
 8001906:	4a7f      	ldr	r2, [pc, #508]	; (8001b04 <manage_tellers+0x778>)
 8001908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190a:	21a4      	movs	r1, #164	; 0xa4
 800190c:	fb01 f303 	mul.w	r3, r1, r3
 8001910:	4413      	add	r3, r2
 8001912:	3308      	adds	r3, #8
 8001914:	497b      	ldr	r1, [pc, #492]	; (8001b04 <manage_tellers+0x778>)
 8001916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001918:	20a4      	movs	r0, #164	; 0xa4
 800191a:	fb00 f202 	mul.w	r2, r0, r2
 800191e:	440a      	add	r2, r1
 8001920:	3230      	adds	r2, #48	; 0x30
 8001922:	466c      	mov	r4, sp
 8001924:	f103 0108 	add.w	r1, r3, #8
 8001928:	c903      	ldmia	r1, {r0, r1}
 800192a:	e884 0003 	stmia.w	r4, {r0, r1}
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	3204      	adds	r2, #4
 8001932:	ca07      	ldmia	r2, {r0, r1, r2}
 8001934:	f7ff f92c 	bl	8000b90 <clock_compare>
 8001938:	4603      	mov	r3, r0
 800193a:	2b01      	cmp	r3, #1
 800193c:	d10c      	bne.n	8001958 <manage_tellers+0x5cc>
				clock_increment(tellers[i].current_time_working);
 800193e:	4a71      	ldr	r2, [pc, #452]	; (8001b04 <manage_tellers+0x778>)
 8001940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001942:	21a4      	movs	r1, #164	; 0xa4
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4413      	add	r3, r2
 800194a:	3330      	adds	r3, #48	; 0x30
 800194c:	3304      	adds	r3, #4
 800194e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001952:	f7ff f8c5 	bl	8000ae0 <clock_increment>
				break;
 8001956:	e0cc      	b.n	8001af2 <manage_tellers+0x766>
			if(clock_compare(tellers[i].current_time_working,tellers[i].service_end_time) == 1){
 8001958:	4a6a      	ldr	r2, [pc, #424]	; (8001b04 <manage_tellers+0x778>)
 800195a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195c:	21a4      	movs	r1, #164	; 0xa4
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	4413      	add	r3, r2
 8001964:	3308      	adds	r3, #8
 8001966:	4967      	ldr	r1, [pc, #412]	; (8001b04 <manage_tellers+0x778>)
 8001968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800196a:	20a4      	movs	r0, #164	; 0xa4
 800196c:	fb00 f202 	mul.w	r2, r0, r2
 8001970:	440a      	add	r2, r1
 8001972:	3230      	adds	r2, #48	; 0x30
 8001974:	466c      	mov	r4, sp
 8001976:	f103 0108 	add.w	r1, r3, #8
 800197a:	c903      	ldmia	r1, {r0, r1}
 800197c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	3204      	adds	r2, #4
 8001984:	ca07      	ldmia	r2, {r0, r1, r2}
 8001986:	f7ff f903 	bl	8000b90 <clock_compare>
 800198a:	4603      	mov	r3, r0
 800198c:	2b01      	cmp	r3, #1
 800198e:	f040 80b3 	bne.w	8001af8 <manage_tellers+0x76c>
				if(clock_compare(tellers[i].current_time_working,tellers[i].max_time_working) == 0){
 8001992:	4a5c      	ldr	r2, [pc, #368]	; (8001b04 <manage_tellers+0x778>)
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	21a4      	movs	r1, #164	; 0xa4
 8001998:	fb01 f303 	mul.w	r3, r1, r3
 800199c:	4413      	add	r3, r2
 800199e:	3348      	adds	r3, #72	; 0x48
 80019a0:	4958      	ldr	r1, [pc, #352]	; (8001b04 <manage_tellers+0x778>)
 80019a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019a4:	20a4      	movs	r0, #164	; 0xa4
 80019a6:	fb00 f202 	mul.w	r2, r0, r2
 80019aa:	440a      	add	r2, r1
 80019ac:	3230      	adds	r2, #48	; 0x30
 80019ae:	466c      	mov	r4, sp
 80019b0:	f103 0108 	add.w	r1, r3, #8
 80019b4:	c903      	ldmia	r1, {r0, r1}
 80019b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	3204      	adds	r2, #4
 80019be:	ca07      	ldmia	r2, {r0, r1, r2}
 80019c0:	f7ff f8e6 	bl	8000b90 <clock_compare>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d112      	bne.n	80019f0 <manage_tellers+0x664>
					tellers[i].max_time_working = tellers[i].current_time_working;
 80019ca:	4a4e      	ldr	r2, [pc, #312]	; (8001b04 <manage_tellers+0x778>)
 80019cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ce:	21a4      	movs	r1, #164	; 0xa4
 80019d0:	fb01 f303 	mul.w	r3, r1, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	3348      	adds	r3, #72	; 0x48
 80019d8:	494a      	ldr	r1, [pc, #296]	; (8001b04 <manage_tellers+0x778>)
 80019da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019dc:	20a4      	movs	r0, #164	; 0xa4
 80019de:	fb00 f202 	mul.w	r2, r0, r2
 80019e2:	440a      	add	r2, r1
 80019e4:	3230      	adds	r2, #48	; 0x30
 80019e6:	3304      	adds	r3, #4
 80019e8:	3204      	adds	r2, #4
 80019ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				add_clocks(tellers[i].total_time_working,tellers[i].current_time_working);
 80019f0:	4a44      	ldr	r2, [pc, #272]	; (8001b04 <manage_tellers+0x778>)
 80019f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f4:	21a4      	movs	r1, #164	; 0xa4
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	3330      	adds	r3, #48	; 0x30
 80019fe:	4941      	ldr	r1, [pc, #260]	; (8001b04 <manage_tellers+0x778>)
 8001a00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a02:	20a4      	movs	r0, #164	; 0xa4
 8001a04:	fb00 f202 	mul.w	r2, r0, r2
 8001a08:	440a      	add	r2, r1
 8001a0a:	3218      	adds	r2, #24
 8001a0c:	466c      	mov	r4, sp
 8001a0e:	f103 0108 	add.w	r1, r3, #8
 8001a12:	c903      	ldmia	r1, {r0, r1}
 8001a14:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	3204      	adds	r2, #4
 8001a1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a1e:	f7ff f882 	bl	8000b26 <add_clocks>
				clock_init(tellers[i].current_time_working);
 8001a22:	4a38      	ldr	r2, [pc, #224]	; (8001b04 <manage_tellers+0x778>)
 8001a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a26:	21a4      	movs	r1, #164	; 0xa4
 8001a28:	fb01 f303 	mul.w	r3, r1, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3330      	adds	r3, #48	; 0x30
 8001a30:	3304      	adds	r3, #4
 8001a32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a36:	f7ff f82f 	bl	8000a98 <clock_init>
				tellers[i].status = 0;
 8001a3a:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <manage_tellers+0x778>)
 8001a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3e:	21a4      	movs	r1, #164	; 0xa4
 8001a40:	fb01 f303 	mul.w	r3, r1, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	3304      	adds	r3, #4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
				if(!((teller_wait[0].id == i) && (teller_wait[1].id == i) && (teller_wait[2].id == i))){
 8001a4c:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <manage_tellers+0x77c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d10b      	bne.n	8001a6e <manage_tellers+0x6e2>
 8001a56:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <manage_tellers+0x77c>)
 8001a58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d105      	bne.n	8001a6e <manage_tellers+0x6e2>
 8001a62:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <manage_tellers+0x77c>)
 8001a64:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d03e      	beq.n	8001aec <manage_tellers+0x760>
					if(teller_wait[0].id == 0){
 8001a6e:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <manage_tellers+0x77c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10c      	bne.n	8001a90 <manage_tellers+0x704>
						teller_wait[0] = tellers[i];
 8001a76:	4824      	ldr	r0, [pc, #144]	; (8001b08 <manage_tellers+0x77c>)
 8001a78:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <manage_tellers+0x778>)
 8001a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7c:	21a4      	movs	r1, #164	; 0xa4
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	23a4      	movs	r3, #164	; 0xa4
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f005 ff03 	bl	8007894 <memcpy>
					break;
 8001a8e:	e02f      	b.n	8001af0 <manage_tellers+0x764>
					else if(teller_wait[1].id == 0){
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <manage_tellers+0x77c>)
 8001a92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <manage_tellers+0x72a>
						teller_wait[1] = tellers[i];
 8001a9a:	4a1b      	ldr	r2, [pc, #108]	; (8001b08 <manage_tellers+0x77c>)
 8001a9c:	4919      	ldr	r1, [pc, #100]	; (8001b04 <manage_tellers+0x778>)
 8001a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa0:	20a4      	movs	r0, #164	; 0xa4
 8001aa2:	fb00 f303 	mul.w	r3, r0, r3
 8001aa6:	4419      	add	r1, r3
 8001aa8:	f102 03a4 	add.w	r3, r2, #164	; 0xa4
 8001aac:	22a4      	movs	r2, #164	; 0xa4
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f005 fef0 	bl	8007894 <memcpy>
					break;
 8001ab4:	e01c      	b.n	8001af0 <manage_tellers+0x764>
					else if(teller_wait[2].id == 0){
 8001ab6:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <manage_tellers+0x77c>)
 8001ab8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d117      	bne.n	8001af0 <manage_tellers+0x764>
						teller_wait[2] = tellers[i];
 8001ac0:	4a11      	ldr	r2, [pc, #68]	; (8001b08 <manage_tellers+0x77c>)
 8001ac2:	4910      	ldr	r1, [pc, #64]	; (8001b04 <manage_tellers+0x778>)
 8001ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac6:	20a4      	movs	r0, #164	; 0xa4
 8001ac8:	fb00 f303 	mul.w	r3, r0, r3
 8001acc:	4419      	add	r1, r3
 8001ace:	f502 73a4 	add.w	r3, r2, #328	; 0x148
 8001ad2:	22a4      	movs	r2, #164	; 0xa4
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f005 fedd 	bl	8007894 <memcpy>
					break;
 8001ada:	e009      	b.n	8001af0 <manage_tellers+0x764>
			break;
 8001adc:	bf00      	nop
 8001ade:	e00b      	b.n	8001af8 <manage_tellers+0x76c>
					break;
 8001ae0:	bf00      	nop
 8001ae2:	e009      	b.n	8001af8 <manage_tellers+0x76c>
				break;
 8001ae4:	bf00      	nop
 8001ae6:	e007      	b.n	8001af8 <manage_tellers+0x76c>
			break;
 8001ae8:	bf00      	nop
 8001aea:	e005      	b.n	8001af8 <manage_tellers+0x76c>
				break;
 8001aec:	bf00      	nop
 8001aee:	e003      	b.n	8001af8 <manage_tellers+0x76c>
					break;
 8001af0:	bf00      	nop
			break;
 8001af2:	e001      	b.n	8001af8 <manage_tellers+0x76c>
	}
}
 8001af4:	bf00      	nop
 8001af6:	e000      	b.n	8001afa <manage_tellers+0x76e>
			break;
 8001af8:	bf00      	nop
}
 8001afa:	bf00      	nop
 8001afc:	3738      	adds	r7, #56	; 0x38
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bdb0      	pop	{r4, r5, r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200002f0 	.word	0x200002f0
 8001b08:	20000624 	.word	0x20000624

08001b0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b10:	f7ff fb42 	bl	8001198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b16:	490d      	ldr	r1, [pc, #52]	; (8001b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b18:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <LoopForever+0xe>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b1c:	e002      	b.n	8001b24 <LoopCopyDataInit>

08001b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b22:	3304      	adds	r3, #4

08001b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b28:	d3f9      	bcc.n	8001b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b2c:	4c0a      	ldr	r4, [pc, #40]	; (8001b58 <LoopForever+0x16>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b30:	e001      	b.n	8001b36 <LoopFillZerobss>

08001b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b34:	3204      	adds	r2, #4

08001b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b38:	d3fb      	bcc.n	8001b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b3a:	f005 fe87 	bl	800784c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b3e:	f7ff f869 	bl	8000c14 <main>

08001b42 <LoopForever>:

LoopForever:
    b LoopForever
 8001b42:	e7fe      	b.n	8001b42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001b50:	08007a30 	.word	0x08007a30
  ldr r2, =_sbss
 8001b54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001b58:	20006fe0 	.word	0x20006fe0

08001b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b5c:	e7fe      	b.n	8001b5c <ADC1_2_IRQHandler>
	...

08001b60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <HAL_Init+0x3c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <HAL_Init+0x3c>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b76:	2003      	movs	r0, #3
 8001b78:	f000 f93e 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b7c:	200f      	movs	r0, #15
 8001b7e:	f000 f80f 	bl	8001ba0 <HAL_InitTick>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	71fb      	strb	r3, [r7, #7]
 8001b8c:	e001      	b.n	8001b92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b8e:	f7ff fa05 	bl	8000f9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b92:	79fb      	ldrb	r3, [r7, #7]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40022000 	.word	0x40022000

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_InitTick+0x6c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d023      	beq.n	8001bfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <HAL_InitTick+0x70>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_InitTick+0x6c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f949 	bl	8001e62 <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d809      	bhi.n	8001bf0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f000 f913 	bl	8001e0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001be8:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <HAL_InitTick+0x74>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e007      	b.n	8001c00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	e004      	b.n	8001c00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	e001      	b.n	8001c00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000008 	.word	0x20000008
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000004 	.word	0x20000004

08001c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_IncTick+0x20>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x24>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_IncTick+0x24>)
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000008 	.word	0x20000008
 8001c3c:	200008b4 	.word	0x200008b4

08001c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return uwTick;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_GetTick+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	200008b4 	.word	0x200008b4

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db0b      	blt.n	8001ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4907      	ldr	r1, [pc, #28]	; (8001cf4 <__NVIC_EnableIRQ+0x38>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	; (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc4:	d301      	bcc.n	8001dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00f      	b.n	8001dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <SysTick_Config+0x40>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f7ff ff8e 	bl	8001cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <SysTick_Config+0x40>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SysTick_Config+0x40>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000e010 	.word	0xe000e010

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff29 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff3e 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ff8e 	bl	8001d4c <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff5d 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff31 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffa2 	bl	8001db4 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8a:	e17f      	b.n	800218c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2101      	movs	r1, #1
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8171 	beq.w	8002186 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d005      	beq.n	8001ebc <HAL_GPIO_Init+0x40>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d130      	bne.n	8001f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	f003 0201 	and.w	r2, r3, #1
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d118      	bne.n	8001f5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f30:	2201      	movs	r2, #1
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	08db      	lsrs	r3, r3, #3
 8001f46:	f003 0201 	and.w	r2, r3, #1
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d017      	beq.n	8001f98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d123      	bne.n	8001fec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	08da      	lsrs	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3208      	adds	r2, #8
 8001fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	220f      	movs	r2, #15
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	6939      	ldr	r1, [r7, #16]
 8001fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0203 	and.w	r2, r3, #3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80ac 	beq.w	8002186 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	4b5f      	ldr	r3, [pc, #380]	; (80021ac <HAL_GPIO_Init+0x330>)
 8002030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002032:	4a5e      	ldr	r2, [pc, #376]	; (80021ac <HAL_GPIO_Init+0x330>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6613      	str	r3, [r2, #96]	; 0x60
 800203a:	4b5c      	ldr	r3, [pc, #368]	; (80021ac <HAL_GPIO_Init+0x330>)
 800203c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002046:	4a5a      	ldr	r2, [pc, #360]	; (80021b0 <HAL_GPIO_Init+0x334>)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002070:	d025      	beq.n	80020be <HAL_GPIO_Init+0x242>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4f      	ldr	r2, [pc, #316]	; (80021b4 <HAL_GPIO_Init+0x338>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01f      	beq.n	80020ba <HAL_GPIO_Init+0x23e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4e      	ldr	r2, [pc, #312]	; (80021b8 <HAL_GPIO_Init+0x33c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d019      	beq.n	80020b6 <HAL_GPIO_Init+0x23a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4d      	ldr	r2, [pc, #308]	; (80021bc <HAL_GPIO_Init+0x340>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_GPIO_Init+0x236>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4c      	ldr	r2, [pc, #304]	; (80021c0 <HAL_GPIO_Init+0x344>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00d      	beq.n	80020ae <HAL_GPIO_Init+0x232>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4b      	ldr	r2, [pc, #300]	; (80021c4 <HAL_GPIO_Init+0x348>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d007      	beq.n	80020aa <HAL_GPIO_Init+0x22e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4a      	ldr	r2, [pc, #296]	; (80021c8 <HAL_GPIO_Init+0x34c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <HAL_GPIO_Init+0x22a>
 80020a2:	2306      	movs	r3, #6
 80020a4:	e00c      	b.n	80020c0 <HAL_GPIO_Init+0x244>
 80020a6:	2307      	movs	r3, #7
 80020a8:	e00a      	b.n	80020c0 <HAL_GPIO_Init+0x244>
 80020aa:	2305      	movs	r3, #5
 80020ac:	e008      	b.n	80020c0 <HAL_GPIO_Init+0x244>
 80020ae:	2304      	movs	r3, #4
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x244>
 80020b2:	2303      	movs	r3, #3
 80020b4:	e004      	b.n	80020c0 <HAL_GPIO_Init+0x244>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_Init+0x244>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_GPIO_Init+0x244>
 80020be:	2300      	movs	r3, #0
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	f002 0203 	and.w	r2, r2, #3
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	4093      	lsls	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020d0:	4937      	ldr	r1, [pc, #220]	; (80021b0 <HAL_GPIO_Init+0x334>)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020de:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_GPIO_Init+0x350>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002102:	4a32      	ldr	r2, [pc, #200]	; (80021cc <HAL_GPIO_Init+0x350>)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002108:	4b30      	ldr	r3, [pc, #192]	; (80021cc <HAL_GPIO_Init+0x350>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	43db      	mvns	r3, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800212c:	4a27      	ldr	r2, [pc, #156]	; (80021cc <HAL_GPIO_Init+0x350>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002132:	4b26      	ldr	r3, [pc, #152]	; (80021cc <HAL_GPIO_Init+0x350>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002156:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <HAL_GPIO_Init+0x350>)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <HAL_GPIO_Init+0x350>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	43db      	mvns	r3, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002180:	4a12      	ldr	r2, [pc, #72]	; (80021cc <HAL_GPIO_Init+0x350>)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3301      	adds	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa22 f303 	lsr.w	r3, r2, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	f47f ae78 	bne.w	8001e8c <HAL_GPIO_Init+0x10>
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40010000 	.word	0x40010000
 80021b4:	48000400 	.word	0x48000400
 80021b8:	48000800 	.word	0x48000800
 80021bc:	48000c00 	.word	0x48000c00
 80021c0:	48001000 	.word	0x48001000
 80021c4:	48001400 	.word	0x48001400
 80021c8:	48001800 	.word	0x48001800
 80021cc:	40010400 	.word	0x40010400

080021d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]
 80021dc:	4613      	mov	r3, r2
 80021de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e0:	787b      	ldrb	r3, [r7, #1]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021ec:	e002      	b.n	80021f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <HAL_PWREx_GetVoltageRange+0x18>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40007000 	.word	0x40007000

0800221c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800222a:	d130      	bne.n	800228e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800222c:	4b23      	ldr	r3, [pc, #140]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002238:	d038      	beq.n	80022ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002242:	4a1e      	ldr	r2, [pc, #120]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002244:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002248:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800224a:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2232      	movs	r2, #50	; 0x32
 8002250:	fb02 f303 	mul.w	r3, r2, r3
 8002254:	4a1b      	ldr	r2, [pc, #108]	; (80022c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0c9b      	lsrs	r3, r3, #18
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002260:	e002      	b.n	8002268 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3b01      	subs	r3, #1
 8002266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002274:	d102      	bne.n	800227c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f2      	bne.n	8002262 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002288:	d110      	bne.n	80022ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e00f      	b.n	80022ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229a:	d007      	beq.n	80022ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022a4:	4a05      	ldr	r2, [pc, #20]	; (80022bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40007000 	.word	0x40007000
 80022c0:	20000000 	.word	0x20000000
 80022c4:	431bde83 	.word	0x431bde83

080022c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e3ca      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022da:	4b97      	ldr	r3, [pc, #604]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e4:	4b94      	ldr	r3, [pc, #592]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80e4 	beq.w	80024c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d007      	beq.n	8002312 <HAL_RCC_OscConfig+0x4a>
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b0c      	cmp	r3, #12
 8002306:	f040 808b 	bne.w	8002420 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b01      	cmp	r3, #1
 800230e:	f040 8087 	bne.w	8002420 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002312:	4b89      	ldr	r3, [pc, #548]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x62>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e3a2      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1a      	ldr	r2, [r3, #32]
 800232e:	4b82      	ldr	r3, [pc, #520]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <HAL_RCC_OscConfig+0x7c>
 800233a:	4b7f      	ldr	r3, [pc, #508]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002342:	e005      	b.n	8002350 <HAL_RCC_OscConfig+0x88>
 8002344:	4b7c      	ldr	r3, [pc, #496]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002350:	4293      	cmp	r3, r2
 8002352:	d223      	bcs.n	800239c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fd55 	bl	8002e08 <RCC_SetFlashLatencyFromMSIRange>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e383      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002368:	4b73      	ldr	r3, [pc, #460]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a72      	ldr	r2, [pc, #456]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 800236e:	f043 0308 	orr.w	r3, r3, #8
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b70      	ldr	r3, [pc, #448]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	496d      	ldr	r1, [pc, #436]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002386:	4b6c      	ldr	r3, [pc, #432]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	4968      	ldr	r1, [pc, #416]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002396:	4313      	orrs	r3, r2
 8002398:	604b      	str	r3, [r1, #4]
 800239a:	e025      	b.n	80023e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239c:	4b66      	ldr	r3, [pc, #408]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a65      	ldr	r2, [pc, #404]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 80023a2:	f043 0308 	orr.w	r3, r3, #8
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	4b63      	ldr	r3, [pc, #396]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	4960      	ldr	r1, [pc, #384]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ba:	4b5f      	ldr	r3, [pc, #380]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	495b      	ldr	r1, [pc, #364]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d109      	bne.n	80023e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fd15 	bl	8002e08 <RCC_SetFlashLatencyFromMSIRange>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e343      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e8:	f000 fc4a 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b52      	ldr	r3, [pc, #328]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	4950      	ldr	r1, [pc, #320]	; (800253c <HAL_RCC_OscConfig+0x274>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
 8002404:	4a4e      	ldr	r2, [pc, #312]	; (8002540 <HAL_RCC_OscConfig+0x278>)
 8002406:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002408:	4b4e      	ldr	r3, [pc, #312]	; (8002544 <HAL_RCC_OscConfig+0x27c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fbc7 	bl	8001ba0 <HAL_InitTick>
 8002412:	4603      	mov	r3, r0
 8002414:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d052      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	e327      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d032      	beq.n	800248e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002428:	4b43      	ldr	r3, [pc, #268]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a42      	ldr	r2, [pc, #264]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002434:	f7ff fc04 	bl	8001c40 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800243c:	f7ff fc00 	bl	8001c40 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e310      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800244e:	4b3a      	ldr	r3, [pc, #232]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800245a:	4b37      	ldr	r3, [pc, #220]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a36      	ldr	r2, [pc, #216]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002460:	f043 0308 	orr.w	r3, r3, #8
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b34      	ldr	r3, [pc, #208]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4931      	ldr	r1, [pc, #196]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002478:	4b2f      	ldr	r3, [pc, #188]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	492c      	ldr	r1, [pc, #176]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
 800248c:	e01a      	b.n	80024c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800248e:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a29      	ldr	r2, [pc, #164]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800249a:	f7ff fbd1 	bl	8001c40 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a2:	f7ff fbcd 	bl	8001c40 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e2dd      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024b4:	4b20      	ldr	r3, [pc, #128]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0x1da>
 80024c0:	e000      	b.n	80024c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d074      	beq.n	80025ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d005      	beq.n	80024e2 <HAL_RCC_OscConfig+0x21a>
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	2b0c      	cmp	r3, #12
 80024da:	d10e      	bne.n	80024fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d10b      	bne.n	80024fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d064      	beq.n	80025b8 <HAL_RCC_OscConfig+0x2f0>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d160      	bne.n	80025b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e2ba      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x24a>
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	e026      	b.n	8002560 <HAL_RCC_OscConfig+0x298>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800251a:	d115      	bne.n	8002548 <HAL_RCC_OscConfig+0x280>
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a05      	ldr	r2, [pc, #20]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 8002522:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a02      	ldr	r2, [pc, #8]	; (8002538 <HAL_RCC_OscConfig+0x270>)
 800252e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e014      	b.n	8002560 <HAL_RCC_OscConfig+0x298>
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	080079d8 	.word	0x080079d8
 8002540:	20000000 	.word	0x20000000
 8002544:	20000004 	.word	0x20000004
 8002548:	4ba0      	ldr	r3, [pc, #640]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a9f      	ldr	r2, [pc, #636]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 800254e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4b9d      	ldr	r3, [pc, #628]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a9c      	ldr	r2, [pc, #624]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 800255a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7ff fb6a 	bl	8001c40 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002570:	f7ff fb66 	bl	8001c40 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	; 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e276      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002582:	4b92      	ldr	r3, [pc, #584]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x2a8>
 800258e:	e014      	b.n	80025ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7ff fb56 	bl	8001c40 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7ff fb52 	bl	8001c40 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e262      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025aa:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x2d0>
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d060      	beq.n	8002688 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_OscConfig+0x310>
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	2b0c      	cmp	r3, #12
 80025d0:	d119      	bne.n	8002606 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d116      	bne.n	8002606 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d8:	4b7c      	ldr	r3, [pc, #496]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_OscConfig+0x328>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e23f      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	061b      	lsls	r3, r3, #24
 80025fe:	4973      	ldr	r1, [pc, #460]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002604:	e040      	b.n	8002688 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d023      	beq.n	8002656 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800260e:	4b6f      	ldr	r3, [pc, #444]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a6e      	ldr	r2, [pc, #440]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 8002614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7ff fb11 	bl	8001c40 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002622:	f7ff fb0d 	bl	8001c40 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e21d      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002634:	4b65      	ldr	r3, [pc, #404]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002640:	4b62      	ldr	r3, [pc, #392]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	061b      	lsls	r3, r3, #24
 800264e:	495f      	ldr	r1, [pc, #380]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
 8002654:	e018      	b.n	8002688 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002656:	4b5d      	ldr	r3, [pc, #372]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a5c      	ldr	r2, [pc, #368]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 800265c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7ff faed 	bl	8001c40 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266a:	f7ff fae9 	bl	8001c40 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1f9      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800267c:	4b53      	ldr	r3, [pc, #332]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f0      	bne.n	800266a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d03c      	beq.n	800270e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269c:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 800269e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a2:	4a4a      	ldr	r2, [pc, #296]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7ff fac8 	bl	8001c40 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b4:	f7ff fac4 	bl	8001c40 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1d4      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 80026c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ef      	beq.n	80026b4 <HAL_RCC_OscConfig+0x3ec>
 80026d4:	e01b      	b.n	800270e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d6:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 80026d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026dc:	4a3b      	ldr	r2, [pc, #236]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7ff faab 	bl	8001c40 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ee:	f7ff faa7 	bl	8001c40 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e1b7      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002700:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 8002702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ef      	bne.n	80026ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80a6 	beq.w	8002868 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271c:	2300      	movs	r3, #0
 800271e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002720:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10d      	bne.n	8002748 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b27      	ldr	r3, [pc, #156]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	4a26      	ldr	r2, [pc, #152]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	6593      	str	r3, [r2, #88]	; 0x58
 8002738:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002744:	2301      	movs	r3, #1
 8002746:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002748:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <HAL_RCC_OscConfig+0x508>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d118      	bne.n	8002786 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002754:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <HAL_RCC_OscConfig+0x508>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <HAL_RCC_OscConfig+0x508>)
 800275a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002760:	f7ff fa6e 	bl	8001c40 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002768:	f7ff fa6a 	bl	8001c40 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e17a      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <HAL_RCC_OscConfig+0x508>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d108      	bne.n	80027a0 <HAL_RCC_OscConfig+0x4d8>
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800279e:	e029      	b.n	80027f4 <HAL_RCC_OscConfig+0x52c>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b05      	cmp	r3, #5
 80027a6:	d115      	bne.n	80027d4 <HAL_RCC_OscConfig+0x50c>
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ae:	4a07      	ldr	r2, [pc, #28]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 80027b0:	f043 0304 	orr.w	r3, r3, #4
 80027b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027be:	4a03      	ldr	r2, [pc, #12]	; (80027cc <HAL_RCC_OscConfig+0x504>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027c8:	e014      	b.n	80027f4 <HAL_RCC_OscConfig+0x52c>
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
 80027d4:	4b9c      	ldr	r3, [pc, #624]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	4a9b      	ldr	r2, [pc, #620]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027e4:	4b98      	ldr	r3, [pc, #608]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ea:	4a97      	ldr	r2, [pc, #604]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d016      	beq.n	800282a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fc:	f7ff fa20 	bl	8001c40 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002802:	e00a      	b.n	800281a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002804:	f7ff fa1c 	bl	8001c40 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e12a      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281a:	4b8b      	ldr	r3, [pc, #556]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ed      	beq.n	8002804 <HAL_RCC_OscConfig+0x53c>
 8002828:	e015      	b.n	8002856 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7ff fa09 	bl	8001c40 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7ff fa05 	bl	8001c40 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e113      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002848:	4b7f      	ldr	r3, [pc, #508]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ed      	bne.n	8002832 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002856:	7ffb      	ldrb	r3, [r7, #31]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285c:	4b7a      	ldr	r3, [pc, #488]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	4a79      	ldr	r2, [pc, #484]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002866:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80fe 	beq.w	8002a6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	2b02      	cmp	r3, #2
 8002878:	f040 80d0 	bne.w	8002a1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800287c:	4b72      	ldr	r3, [pc, #456]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f003 0203 	and.w	r2, r3, #3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	429a      	cmp	r2, r3
 800288e:	d130      	bne.n	80028f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	3b01      	subs	r3, #1
 800289c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d127      	bne.n	80028f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d11f      	bne.n	80028f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028bc:	2a07      	cmp	r2, #7
 80028be:	bf14      	ite	ne
 80028c0:	2201      	movne	r2, #1
 80028c2:	2200      	moveq	r2, #0
 80028c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d113      	bne.n	80028f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	3b01      	subs	r3, #1
 80028d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d109      	bne.n	80028f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	3b01      	subs	r3, #1
 80028ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d06e      	beq.n	80029d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	2b0c      	cmp	r3, #12
 80028f6:	d069      	beq.n	80029cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028f8:	4b53      	ldr	r3, [pc, #332]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002904:	4b50      	ldr	r3, [pc, #320]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0ad      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002914:	4b4c      	ldr	r3, [pc, #304]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a4b      	ldr	r2, [pc, #300]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 800291a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002920:	f7ff f98e 	bl	8001c40 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7ff f98a 	bl	8001c40 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e09a      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293a:	4b43      	ldr	r3, [pc, #268]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002946:	4b40      	ldr	r3, [pc, #256]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	4b40      	ldr	r3, [pc, #256]	; (8002a4c <HAL_RCC_OscConfig+0x784>)
 800294c:	4013      	ands	r3, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002956:	3a01      	subs	r2, #1
 8002958:	0112      	lsls	r2, r2, #4
 800295a:	4311      	orrs	r1, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002960:	0212      	lsls	r2, r2, #8
 8002962:	4311      	orrs	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002968:	0852      	lsrs	r2, r2, #1
 800296a:	3a01      	subs	r2, #1
 800296c:	0552      	lsls	r2, r2, #21
 800296e:	4311      	orrs	r1, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002974:	0852      	lsrs	r2, r2, #1
 8002976:	3a01      	subs	r2, #1
 8002978:	0652      	lsls	r2, r2, #25
 800297a:	4311      	orrs	r1, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002980:	0912      	lsrs	r2, r2, #4
 8002982:	0452      	lsls	r2, r2, #17
 8002984:	430a      	orrs	r2, r1
 8002986:	4930      	ldr	r1, [pc, #192]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002988:	4313      	orrs	r3, r2
 800298a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800298c:	4b2e      	ldr	r3, [pc, #184]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a2d      	ldr	r2, [pc, #180]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002996:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4a2a      	ldr	r2, [pc, #168]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 800299e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029a4:	f7ff f94c 	bl	8001c40 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ac:	f7ff f948 	bl	8001c40 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e058      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029be:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ca:	e050      	b.n	8002a6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e04f      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d148      	bne.n	8002a6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029dc:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a19      	ldr	r2, [pc, #100]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 80029e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029e8:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4a16      	ldr	r2, [pc, #88]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 80029ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029f4:	f7ff f924 	bl	8001c40 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fc:	f7ff f920 	bl	8001c40 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e030      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x734>
 8002a1a:	e028      	b.n	8002a6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d023      	beq.n	8002a6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a08      	ldr	r2, [pc, #32]	; (8002a48 <HAL_RCC_OscConfig+0x780>)
 8002a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2e:	f7ff f907 	bl	8001c40 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a34:	e00c      	b.n	8002a50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a36:	f7ff f903 	bl	8001c40 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d905      	bls.n	8002a50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e013      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <HAL_RCC_OscConfig+0x7b0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ec      	bne.n	8002a36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_RCC_OscConfig+0x7b0>)
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	4905      	ldr	r1, [pc, #20]	; (8002a78 <HAL_RCC_OscConfig+0x7b0>)
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCC_OscConfig+0x7b4>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	60cb      	str	r3, [r1, #12]
 8002a68:	e001      	b.n	8002a6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3720      	adds	r7, #32
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	feeefffc 	.word	0xfeeefffc

08002a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0e7      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a94:	4b75      	ldr	r3, [pc, #468]	; (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d910      	bls.n	8002ac4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b72      	ldr	r3, [pc, #456]	; (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 0207 	bic.w	r2, r3, #7
 8002aaa:	4970      	ldr	r1, [pc, #448]	; (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab2:	4b6e      	ldr	r3, [pc, #440]	; (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0cf      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d010      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	4b66      	ldr	r3, [pc, #408]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d908      	bls.n	8002af2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae0:	4b63      	ldr	r3, [pc, #396]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4960      	ldr	r1, [pc, #384]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d04c      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b06:	4b5a      	ldr	r3, [pc, #360]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d121      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e0a6      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1e:	4b54      	ldr	r3, [pc, #336]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d115      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e09a      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b36:	4b4e      	ldr	r3, [pc, #312]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e08e      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b46:	4b4a      	ldr	r3, [pc, #296]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e086      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b56:	4b46      	ldr	r3, [pc, #280]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f023 0203 	bic.w	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4943      	ldr	r1, [pc, #268]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b68:	f7ff f86a 	bl	8001c40 <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b70:	f7ff f866 	bl	8001c40 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e06e      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	4b3a      	ldr	r3, [pc, #232]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 020c 	and.w	r2, r3, #12
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d1eb      	bne.n	8002b70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d010      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d208      	bcs.n	8002bc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb4:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	492b      	ldr	r1, [pc, #172]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc6:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d210      	bcs.n	8002bf6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd4:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 0207 	bic.w	r2, r3, #7
 8002bdc:	4923      	ldr	r1, [pc, #140]	; (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be4:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <HAL_RCC_ClockConfig+0x1ec>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d001      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e036      	b.n	8002c64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	4918      	ldr	r1, [pc, #96]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d009      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c20:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4910      	ldr	r1, [pc, #64]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c34:	f000 f824 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	490b      	ldr	r1, [pc, #44]	; (8002c74 <HAL_RCC_ClockConfig+0x1f4>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c50:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <HAL_RCC_ClockConfig+0x1f8>)
 8002c52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c54:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_ClockConfig+0x1fc>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe ffa1 	bl	8001ba0 <HAL_InitTick>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c62:	7afb      	ldrb	r3, [r7, #11]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40022000 	.word	0x40022000
 8002c70:	40021000 	.word	0x40021000
 8002c74:	080079d8 	.word	0x080079d8
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	20000004 	.word	0x20000004

08002c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b089      	sub	sp, #36	; 0x24
 8002c84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8e:	4b3e      	ldr	r3, [pc, #248]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c98:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d121      	bne.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d11e      	bne.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cb4:	4b34      	ldr	r3, [pc, #208]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cc0:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	e005      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cdc:	4a2b      	ldr	r2, [pc, #172]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10d      	bne.n	8002d08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d102      	bne.n	8002cfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	e004      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d04:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d134      	bne.n	8002d78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d0e:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d003      	beq.n	8002d26 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d003      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0xac>
 8002d24:	e005      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d26:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d28:	617b      	str	r3, [r7, #20]
      break;
 8002d2a:	e005      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d2e:	617b      	str	r3, [r7, #20]
      break;
 8002d30:	e002      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	617b      	str	r3, [r7, #20]
      break;
 8002d36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	3301      	adds	r3, #1
 8002d44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d46:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	fb03 f202 	mul.w	r2, r3, r2
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	0e5b      	lsrs	r3, r3, #25
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d78:	69bb      	ldr	r3, [r7, #24]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	; 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	080079f0 	.word	0x080079f0
 8002d90:	00f42400 	.word	0x00f42400
 8002d94:	007a1200 	.word	0x007a1200

08002d98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <HAL_RCC_GetHCLKFreq+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000000 	.word	0x20000000

08002db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002db4:	f7ff fff0 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4904      	ldr	r1, [pc, #16]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	080079e8 	.word	0x080079e8

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002de0:	f7ff ffda 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0adb      	lsrs	r3, r3, #11
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4904      	ldr	r1, [pc, #16]	; (8002e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	080079e8 	.word	0x080079e8

08002e08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e10:	2300      	movs	r3, #0
 8002e12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e14:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e20:	f7ff f9ee 	bl	8002200 <HAL_PWREx_GetVoltageRange>
 8002e24:	6178      	str	r0, [r7, #20]
 8002e26:	e014      	b.n	8002e52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	4a24      	ldr	r2, [pc, #144]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e32:	6593      	str	r3, [r2, #88]	; 0x58
 8002e34:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e40:	f7ff f9de 	bl	8002200 <HAL_PWREx_GetVoltageRange>
 8002e44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e46:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e58:	d10b      	bne.n	8002e72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b80      	cmp	r3, #128	; 0x80
 8002e5e:	d919      	bls.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2ba0      	cmp	r3, #160	; 0xa0
 8002e64:	d902      	bls.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e66:	2302      	movs	r3, #2
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	e013      	b.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	e010      	b.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b80      	cmp	r3, #128	; 0x80
 8002e76:	d902      	bls.n	8002e7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e78:	2303      	movs	r3, #3
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	e00a      	b.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b80      	cmp	r3, #128	; 0x80
 8002e82:	d102      	bne.n	8002e8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e84:	2302      	movs	r3, #2
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	e004      	b.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b70      	cmp	r3, #112	; 0x70
 8002e8e:	d101      	bne.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e90:	2301      	movs	r3, #1
 8002e92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f023 0207 	bic.w	r2, r3, #7
 8002e9c:	4909      	ldr	r1, [pc, #36]	; (8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d001      	beq.n	8002eb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40022000 	.word	0x40022000

08002ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d041      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ee8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eec:	d02a      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002eee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ef2:	d824      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ef4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ef8:	d008      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002efa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002efe:	d81e      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f08:	d010      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f0a:	e018      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f0c:	4b86      	ldr	r3, [pc, #536]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a85      	ldr	r2, [pc, #532]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f18:	e015      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fabb 	bl	800349c <RCCEx_PLLSAI1_Config>
 8002f26:	4603      	mov	r3, r0
 8002f28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f2a:	e00c      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3320      	adds	r3, #32
 8002f30:	2100      	movs	r1, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fba6 	bl	8003684 <RCCEx_PLLSAI2_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f3c:	e003      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	74fb      	strb	r3, [r7, #19]
      break;
 8002f42:	e000      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10b      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f4c:	4b76      	ldr	r3, [pc, #472]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f5a:	4973      	ldr	r1, [pc, #460]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f62:	e001      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d041      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f7c:	d02a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f82:	d824      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f88:	d008      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f8e:	d81e      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f98:	d010      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f9a:	e018      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f9c:	4b62      	ldr	r3, [pc, #392]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a61      	ldr	r2, [pc, #388]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fa8:	e015      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fa73 	bl	800349c <RCCEx_PLLSAI1_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fba:	e00c      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3320      	adds	r3, #32
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fb5e 	bl	8003684 <RCCEx_PLLSAI2_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fcc:	e003      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd6:	7cfb      	ldrb	r3, [r7, #19]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fdc:	4b52      	ldr	r3, [pc, #328]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fea:	494f      	ldr	r1, [pc, #316]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ff2:	e001      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80a0 	beq.w	8003146 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800301a:	2300      	movs	r3, #0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00d      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003020:	4b41      	ldr	r3, [pc, #260]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	4a40      	ldr	r2, [pc, #256]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302a:	6593      	str	r3, [r2, #88]	; 0x58
 800302c:	4b3e      	ldr	r3, [pc, #248]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003038:	2301      	movs	r3, #1
 800303a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800303c:	4b3b      	ldr	r3, [pc, #236]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a3a      	ldr	r2, [pc, #232]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003046:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003048:	f7fe fdfa 	bl	8001c40 <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800304e:	e009      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003050:	f7fe fdf6 	bl	8001c40 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d902      	bls.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	74fb      	strb	r3, [r7, #19]
        break;
 8003062:	e005      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003064:	4b31      	ldr	r3, [pc, #196]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0ef      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d15c      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003076:	4b2c      	ldr	r3, [pc, #176]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003080:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01f      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	429a      	cmp	r2, r3
 8003092:	d019      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003094:	4b24      	ldr	r3, [pc, #144]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030a0:	4b21      	ldr	r3, [pc, #132]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	4a20      	ldr	r2, [pc, #128]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030b0:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	4a1c      	ldr	r2, [pc, #112]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030c0:	4a19      	ldr	r2, [pc, #100]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d2:	f7fe fdb5 	bl	8001c40 <HAL_GetTick>
 80030d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d8:	e00b      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fe fdb1 	bl	8001c40 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d902      	bls.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	74fb      	strb	r3, [r7, #19]
            break;
 80030f0:	e006      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ec      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10c      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003116:	4904      	ldr	r1, [pc, #16]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800311e:	e009      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	74bb      	strb	r3, [r7, #18]
 8003124:	e006      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003130:	7cfb      	ldrb	r3, [r7, #19]
 8003132:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003134:	7c7b      	ldrb	r3, [r7, #17]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d105      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313a:	4b9e      	ldr	r3, [pc, #632]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	4a9d      	ldr	r2, [pc, #628]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003144:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003152:	4b98      	ldr	r3, [pc, #608]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003158:	f023 0203 	bic.w	r2, r3, #3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	4994      	ldr	r1, [pc, #592]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003174:	4b8f      	ldr	r3, [pc, #572]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317a:	f023 020c 	bic.w	r2, r3, #12
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	498c      	ldr	r1, [pc, #560]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003196:	4b87      	ldr	r3, [pc, #540]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	4983      	ldr	r1, [pc, #524]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031b8:	4b7e      	ldr	r3, [pc, #504]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	497b      	ldr	r1, [pc, #492]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031da:	4b76      	ldr	r3, [pc, #472]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e8:	4972      	ldr	r1, [pc, #456]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031fc:	4b6d      	ldr	r3, [pc, #436]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320a:	496a      	ldr	r1, [pc, #424]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800321e:	4b65      	ldr	r3, [pc, #404]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	4961      	ldr	r1, [pc, #388]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003240:	4b5c      	ldr	r3, [pc, #368]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324e:	4959      	ldr	r1, [pc, #356]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003262:	4b54      	ldr	r3, [pc, #336]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003270:	4950      	ldr	r1, [pc, #320]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003284:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	4948      	ldr	r1, [pc, #288]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032a6:	4b43      	ldr	r3, [pc, #268]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	493f      	ldr	r1, [pc, #252]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d028      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032c8:	4b3a      	ldr	r3, [pc, #232]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d6:	4937      	ldr	r1, [pc, #220]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e6:	d106      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e8:	4b32      	ldr	r3, [pc, #200]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a31      	ldr	r2, [pc, #196]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032f2:	60d3      	str	r3, [r2, #12]
 80032f4:	e011      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032fe:	d10c      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3304      	adds	r3, #4
 8003304:	2101      	movs	r1, #1
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f8c8 	bl	800349c <RCCEx_PLLSAI1_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d028      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003326:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	491f      	ldr	r1, [pc, #124]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003344:	d106      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003346:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	4a1a      	ldr	r2, [pc, #104]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003350:	60d3      	str	r3, [r2, #12]
 8003352:	e011      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800335c:	d10c      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3304      	adds	r3, #4
 8003362:	2101      	movs	r1, #1
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f899 	bl	800349c <RCCEx_PLLSAI1_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800336e:	7cfb      	ldrb	r3, [r7, #19]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02b      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003392:	4908      	ldr	r1, [pc, #32]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033a2:	d109      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a02      	ldr	r2, [pc, #8]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ae:	60d3      	str	r3, [r2, #12]
 80033b0:	e014      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2101      	movs	r1, #1
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f867 	bl	800349c <RCCEx_PLLSAI1_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d2:	7cfb      	ldrb	r3, [r7, #19]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02f      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033f6:	4928      	ldr	r1, [pc, #160]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003406:	d10d      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	2102      	movs	r1, #2
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f844 	bl	800349c <RCCEx_PLLSAI1_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003418:	7cfb      	ldrb	r3, [r7, #19]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d014      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	74bb      	strb	r3, [r7, #18]
 8003422:	e011      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800342c:	d10c      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3320      	adds	r3, #32
 8003432:	2102      	movs	r1, #2
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f925 	bl	8003684 <RCCEx_PLLSAI2_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800343e:	7cfb      	ldrb	r3, [r7, #19]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003454:	4b10      	ldr	r3, [pc, #64]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003462:	490d      	ldr	r1, [pc, #52]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003486:	4904      	ldr	r1, [pc, #16]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800348e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000

0800349c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034aa:	4b75      	ldr	r3, [pc, #468]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d018      	beq.n	80034e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034b6:	4b72      	ldr	r3, [pc, #456]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0203 	and.w	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d10d      	bne.n	80034e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
       ||
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034ce:	4b6c      	ldr	r3, [pc, #432]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
       ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d047      	beq.n	8003572 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
 80034e6:	e044      	b.n	8003572 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d018      	beq.n	8003522 <RCCEx_PLLSAI1_Config+0x86>
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d825      	bhi.n	8003540 <RCCEx_PLLSAI1_Config+0xa4>
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d002      	beq.n	80034fe <RCCEx_PLLSAI1_Config+0x62>
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d009      	beq.n	8003510 <RCCEx_PLLSAI1_Config+0x74>
 80034fc:	e020      	b.n	8003540 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034fe:	4b60      	ldr	r3, [pc, #384]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d11d      	bne.n	8003546 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350e:	e01a      	b.n	8003546 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003510:	4b5b      	ldr	r3, [pc, #364]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003518:	2b00      	cmp	r3, #0
 800351a:	d116      	bne.n	800354a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003520:	e013      	b.n	800354a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003522:	4b57      	ldr	r3, [pc, #348]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10f      	bne.n	800354e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800352e:	4b54      	ldr	r3, [pc, #336]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800353e:	e006      	b.n	800354e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      break;
 8003544:	e004      	b.n	8003550 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003546:	bf00      	nop
 8003548:	e002      	b.n	8003550 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800354a:	bf00      	nop
 800354c:	e000      	b.n	8003550 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800354e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10d      	bne.n	8003572 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003556:	4b4a      	ldr	r3, [pc, #296]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6819      	ldr	r1, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	430b      	orrs	r3, r1
 800356c:	4944      	ldr	r1, [pc, #272]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d17d      	bne.n	8003674 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003578:	4b41      	ldr	r3, [pc, #260]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a40      	ldr	r2, [pc, #256]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003584:	f7fe fb5c 	bl	8001c40 <HAL_GetTick>
 8003588:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800358a:	e009      	b.n	80035a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800358c:	f7fe fb58 	bl	8001c40 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d902      	bls.n	80035a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	73fb      	strb	r3, [r7, #15]
        break;
 800359e:	e005      	b.n	80035ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035a0:	4b37      	ldr	r3, [pc, #220]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ef      	bne.n	800358c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d160      	bne.n	8003674 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d111      	bne.n	80035dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035b8:	4b31      	ldr	r3, [pc, #196]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6892      	ldr	r2, [r2, #8]
 80035c8:	0211      	lsls	r1, r2, #8
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68d2      	ldr	r2, [r2, #12]
 80035ce:	0912      	lsrs	r2, r2, #4
 80035d0:	0452      	lsls	r2, r2, #17
 80035d2:	430a      	orrs	r2, r1
 80035d4:	492a      	ldr	r1, [pc, #168]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	610b      	str	r3, [r1, #16]
 80035da:	e027      	b.n	800362c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d112      	bne.n	8003608 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035e2:	4b27      	ldr	r3, [pc, #156]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6892      	ldr	r2, [r2, #8]
 80035f2:	0211      	lsls	r1, r2, #8
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6912      	ldr	r2, [r2, #16]
 80035f8:	0852      	lsrs	r2, r2, #1
 80035fa:	3a01      	subs	r2, #1
 80035fc:	0552      	lsls	r2, r2, #21
 80035fe:	430a      	orrs	r2, r1
 8003600:	491f      	ldr	r1, [pc, #124]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003602:	4313      	orrs	r3, r2
 8003604:	610b      	str	r3, [r1, #16]
 8003606:	e011      	b.n	800362c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003608:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003610:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6892      	ldr	r2, [r2, #8]
 8003618:	0211      	lsls	r1, r2, #8
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6952      	ldr	r2, [r2, #20]
 800361e:	0852      	lsrs	r2, r2, #1
 8003620:	3a01      	subs	r2, #1
 8003622:	0652      	lsls	r2, r2, #25
 8003624:	430a      	orrs	r2, r1
 8003626:	4916      	ldr	r1, [pc, #88]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003628:	4313      	orrs	r3, r2
 800362a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800362c:	4b14      	ldr	r3, [pc, #80]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a13      	ldr	r2, [pc, #76]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003632:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003636:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003638:	f7fe fb02 	bl	8001c40 <HAL_GetTick>
 800363c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800363e:	e009      	b.n	8003654 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003640:	f7fe fafe 	bl	8001c40 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d902      	bls.n	8003654 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	73fb      	strb	r3, [r7, #15]
          break;
 8003652:	e005      	b.n	8003660 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0ef      	beq.n	8003640 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	4904      	ldr	r1, [pc, #16]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003670:	4313      	orrs	r3, r2
 8003672:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000

08003684 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003692:	4b6a      	ldr	r3, [pc, #424]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d018      	beq.n	80036d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800369e:	4b67      	ldr	r3, [pc, #412]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0203 	and.w	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d10d      	bne.n	80036ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
       ||
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036b6:	4b61      	ldr	r3, [pc, #388]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
       ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d047      	beq.n	800375a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	e044      	b.n	800375a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d018      	beq.n	800370a <RCCEx_PLLSAI2_Config+0x86>
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d825      	bhi.n	8003728 <RCCEx_PLLSAI2_Config+0xa4>
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d002      	beq.n	80036e6 <RCCEx_PLLSAI2_Config+0x62>
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d009      	beq.n	80036f8 <RCCEx_PLLSAI2_Config+0x74>
 80036e4:	e020      	b.n	8003728 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036e6:	4b55      	ldr	r3, [pc, #340]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d11d      	bne.n	800372e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f6:	e01a      	b.n	800372e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036f8:	4b50      	ldr	r3, [pc, #320]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003700:	2b00      	cmp	r3, #0
 8003702:	d116      	bne.n	8003732 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003708:	e013      	b.n	8003732 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800370a:	4b4c      	ldr	r3, [pc, #304]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10f      	bne.n	8003736 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003716:	4b49      	ldr	r3, [pc, #292]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003726:	e006      	b.n	8003736 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      break;
 800372c:	e004      	b.n	8003738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800372e:	bf00      	nop
 8003730:	e002      	b.n	8003738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003736:	bf00      	nop
    }

    if(status == HAL_OK)
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10d      	bne.n	800375a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800373e:	4b3f      	ldr	r3, [pc, #252]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6819      	ldr	r1, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	3b01      	subs	r3, #1
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	430b      	orrs	r3, r1
 8003754:	4939      	ldr	r1, [pc, #228]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003756:	4313      	orrs	r3, r2
 8003758:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d167      	bne.n	8003830 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003760:	4b36      	ldr	r3, [pc, #216]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a35      	ldr	r2, [pc, #212]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376c:	f7fe fa68 	bl	8001c40 <HAL_GetTick>
 8003770:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003772:	e009      	b.n	8003788 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003774:	f7fe fa64 	bl	8001c40 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d902      	bls.n	8003788 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	73fb      	strb	r3, [r7, #15]
        break;
 8003786:	e005      	b.n	8003794 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003788:	4b2c      	ldr	r3, [pc, #176]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1ef      	bne.n	8003774 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d14a      	bne.n	8003830 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d111      	bne.n	80037c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037a0:	4b26      	ldr	r3, [pc, #152]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6892      	ldr	r2, [r2, #8]
 80037b0:	0211      	lsls	r1, r2, #8
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68d2      	ldr	r2, [r2, #12]
 80037b6:	0912      	lsrs	r2, r2, #4
 80037b8:	0452      	lsls	r2, r2, #17
 80037ba:	430a      	orrs	r2, r1
 80037bc:	491f      	ldr	r1, [pc, #124]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	614b      	str	r3, [r1, #20]
 80037c2:	e011      	b.n	80037e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037c4:	4b1d      	ldr	r3, [pc, #116]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6892      	ldr	r2, [r2, #8]
 80037d4:	0211      	lsls	r1, r2, #8
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6912      	ldr	r2, [r2, #16]
 80037da:	0852      	lsrs	r2, r2, #1
 80037dc:	3a01      	subs	r2, #1
 80037de:	0652      	lsls	r2, r2, #25
 80037e0:	430a      	orrs	r2, r1
 80037e2:	4916      	ldr	r1, [pc, #88]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a13      	ldr	r2, [pc, #76]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f4:	f7fe fa24 	bl	8001c40 <HAL_GetTick>
 80037f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037fa:	e009      	b.n	8003810 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037fc:	f7fe fa20 	bl	8001c40 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d902      	bls.n	8003810 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	73fb      	strb	r3, [r7, #15]
          break;
 800380e:	e005      	b.n	800381c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ef      	beq.n	80037fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	4904      	ldr	r1, [pc, #16]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 800382c:	4313      	orrs	r3, r2
 800382e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000

08003840 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e049      	b.n	80038e6 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	795b      	ldrb	r3, [r3, #5]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd fbc2 	bl	8000fec <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0204 	orr.w	r2, r2, #4
 800387c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d104      	bne.n	8003896 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2204      	movs	r2, #4
 8003890:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e027      	b.n	80038e6 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003896:	f7fe f9d3 	bl	8001c40 <HAL_GetTick>
 800389a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800389c:	e015      	b.n	80038ca <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800389e:	f7fe f9cf 	bl	8001c40 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d90e      	bls.n	80038ca <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d107      	bne.n	80038ca <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2204      	movs	r2, #4
 80038be:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e00d      	b.n	80038e6 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d0e2      	beq.n	800389e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	791b      	ldrb	r3, [r3, #4]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_RNG_GenerateRandomNumber+0x1a>
 8003904:	2302      	movs	r3, #2
 8003906:	e044      	b.n	8003992 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	795b      	ldrb	r3, [r3, #5]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	d133      	bne.n	8003980 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800391e:	f7fe f98f 	bl	8001c40 <HAL_GetTick>
 8003922:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003924:	e018      	b.n	8003958 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003926:	f7fe f98b 	bl	8001c40 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d911      	bls.n	8003958 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d00a      	beq.n	8003958 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e01c      	b.n	8003992 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d1df      	bne.n	8003926 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	715a      	strb	r2, [r3, #5]
 800397e:	e004      	b.n	800398a <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2204      	movs	r2, #4
 8003984:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	711a      	strb	r2, [r3, #4]

  return status;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2210      	movs	r2, #16
 80039bc:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80039be:	2301      	movs	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	e01f      	b.n	8003a04 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d01a      	beq.n	8003a04 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d108      	bne.n	80039ea <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e6:	605a      	str	r2, [r3, #4]
 80039e8:	e00c      	b.n	8003a04 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2208      	movs	r2, #8
 80039ee:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 80039f0:	2301      	movs	r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0208 	bic.w	r2, r2, #8
 8003a02:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d10b      	bne.n	8003a22 <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f837 	bl	8003a84 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8003a1e:	605a      	str	r2, [r3, #4]

    return;
 8003a20:	e022      	b.n	8003a68 <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01d      	beq.n	8003a68 <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0208 	bic.w	r2, r2, #8
 8003a3a:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	795b      	ldrb	r3, [r3, #5]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d00b      	beq.n	8003a68 <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4619      	mov	r1, r3
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f803 	bl	8003a6e <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e040      	b.n	8003b2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fd fae2 	bl	8001084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2224      	movs	r2, #36	; 0x24
 8003ac4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0201 	bic.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fae0 	bl	80040a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f825 	bl	8003b34 <UART_SetConfig>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e01b      	b.n	8003b2c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fb5f 	bl	80041e8 <UART_CheckIdleState>
 8003b2a:	4603      	mov	r3, r0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b38:	b08a      	sub	sp, #40	; 0x28
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4ba4      	ldr	r3, [pc, #656]	; (8003df4 <UART_SetConfig+0x2c0>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a99      	ldr	r2, [pc, #612]	; (8003df8 <UART_SetConfig+0x2c4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a90      	ldr	r2, [pc, #576]	; (8003dfc <UART_SetConfig+0x2c8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d126      	bne.n	8003c0c <UART_SetConfig+0xd8>
 8003bbe:	4b90      	ldr	r3, [pc, #576]	; (8003e00 <UART_SetConfig+0x2cc>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d81b      	bhi.n	8003c04 <UART_SetConfig+0xd0>
 8003bcc:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <UART_SetConfig+0xa0>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003be5 	.word	0x08003be5
 8003bd8:	08003bf5 	.word	0x08003bf5
 8003bdc:	08003bed 	.word	0x08003bed
 8003be0:	08003bfd 	.word	0x08003bfd
 8003be4:	2301      	movs	r3, #1
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bea:	e116      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003bec:	2302      	movs	r3, #2
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf2:	e112      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfa:	e10e      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c02:	e10a      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003c04:	2310      	movs	r3, #16
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0a:	e106      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a7c      	ldr	r2, [pc, #496]	; (8003e04 <UART_SetConfig+0x2d0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d138      	bne.n	8003c88 <UART_SetConfig+0x154>
 8003c16:	4b7a      	ldr	r3, [pc, #488]	; (8003e00 <UART_SetConfig+0x2cc>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b0c      	cmp	r3, #12
 8003c22:	d82d      	bhi.n	8003c80 <UART_SetConfig+0x14c>
 8003c24:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <UART_SetConfig+0xf8>)
 8003c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2a:	bf00      	nop
 8003c2c:	08003c61 	.word	0x08003c61
 8003c30:	08003c81 	.word	0x08003c81
 8003c34:	08003c81 	.word	0x08003c81
 8003c38:	08003c81 	.word	0x08003c81
 8003c3c:	08003c71 	.word	0x08003c71
 8003c40:	08003c81 	.word	0x08003c81
 8003c44:	08003c81 	.word	0x08003c81
 8003c48:	08003c81 	.word	0x08003c81
 8003c4c:	08003c69 	.word	0x08003c69
 8003c50:	08003c81 	.word	0x08003c81
 8003c54:	08003c81 	.word	0x08003c81
 8003c58:	08003c81 	.word	0x08003c81
 8003c5c:	08003c79 	.word	0x08003c79
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c66:	e0d8      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6e:	e0d4      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003c70:	2304      	movs	r3, #4
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c76:	e0d0      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003c78:	2308      	movs	r3, #8
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7e:	e0cc      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003c80:	2310      	movs	r3, #16
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c86:	e0c8      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a5e      	ldr	r2, [pc, #376]	; (8003e08 <UART_SetConfig+0x2d4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d125      	bne.n	8003cde <UART_SetConfig+0x1aa>
 8003c92:	4b5b      	ldr	r3, [pc, #364]	; (8003e00 <UART_SetConfig+0x2cc>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c9c:	2b30      	cmp	r3, #48	; 0x30
 8003c9e:	d016      	beq.n	8003cce <UART_SetConfig+0x19a>
 8003ca0:	2b30      	cmp	r3, #48	; 0x30
 8003ca2:	d818      	bhi.n	8003cd6 <UART_SetConfig+0x1a2>
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d00a      	beq.n	8003cbe <UART_SetConfig+0x18a>
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d814      	bhi.n	8003cd6 <UART_SetConfig+0x1a2>
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <UART_SetConfig+0x182>
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d008      	beq.n	8003cc6 <UART_SetConfig+0x192>
 8003cb4:	e00f      	b.n	8003cd6 <UART_SetConfig+0x1a2>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cbc:	e0ad      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc4:	e0a9      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003cc6:	2304      	movs	r3, #4
 8003cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ccc:	e0a5      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003cce:	2308      	movs	r3, #8
 8003cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd4:	e0a1      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003cd6:	2310      	movs	r3, #16
 8003cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cdc:	e09d      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a4a      	ldr	r2, [pc, #296]	; (8003e0c <UART_SetConfig+0x2d8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d125      	bne.n	8003d34 <UART_SetConfig+0x200>
 8003ce8:	4b45      	ldr	r3, [pc, #276]	; (8003e00 <UART_SetConfig+0x2cc>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cf2:	2bc0      	cmp	r3, #192	; 0xc0
 8003cf4:	d016      	beq.n	8003d24 <UART_SetConfig+0x1f0>
 8003cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cf8:	d818      	bhi.n	8003d2c <UART_SetConfig+0x1f8>
 8003cfa:	2b80      	cmp	r3, #128	; 0x80
 8003cfc:	d00a      	beq.n	8003d14 <UART_SetConfig+0x1e0>
 8003cfe:	2b80      	cmp	r3, #128	; 0x80
 8003d00:	d814      	bhi.n	8003d2c <UART_SetConfig+0x1f8>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <UART_SetConfig+0x1d8>
 8003d06:	2b40      	cmp	r3, #64	; 0x40
 8003d08:	d008      	beq.n	8003d1c <UART_SetConfig+0x1e8>
 8003d0a:	e00f      	b.n	8003d2c <UART_SetConfig+0x1f8>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d12:	e082      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d14:	2302      	movs	r3, #2
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1a:	e07e      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d22:	e07a      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d24:	2308      	movs	r3, #8
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2a:	e076      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d32:	e072      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a35      	ldr	r2, [pc, #212]	; (8003e10 <UART_SetConfig+0x2dc>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d12a      	bne.n	8003d94 <UART_SetConfig+0x260>
 8003d3e:	4b30      	ldr	r3, [pc, #192]	; (8003e00 <UART_SetConfig+0x2cc>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d4c:	d01a      	beq.n	8003d84 <UART_SetConfig+0x250>
 8003d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d52:	d81b      	bhi.n	8003d8c <UART_SetConfig+0x258>
 8003d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d58:	d00c      	beq.n	8003d74 <UART_SetConfig+0x240>
 8003d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d5e:	d815      	bhi.n	8003d8c <UART_SetConfig+0x258>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <UART_SetConfig+0x238>
 8003d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d68:	d008      	beq.n	8003d7c <UART_SetConfig+0x248>
 8003d6a:	e00f      	b.n	8003d8c <UART_SetConfig+0x258>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d72:	e052      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d74:	2302      	movs	r3, #2
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7a:	e04e      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d82:	e04a      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d84:	2308      	movs	r3, #8
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8a:	e046      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d8c:	2310      	movs	r3, #16
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d92:	e042      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <UART_SetConfig+0x2c4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d13a      	bne.n	8003e14 <UART_SetConfig+0x2e0>
 8003d9e:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <UART_SetConfig+0x2cc>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003da8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dac:	d01a      	beq.n	8003de4 <UART_SetConfig+0x2b0>
 8003dae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db2:	d81b      	bhi.n	8003dec <UART_SetConfig+0x2b8>
 8003db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db8:	d00c      	beq.n	8003dd4 <UART_SetConfig+0x2a0>
 8003dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dbe:	d815      	bhi.n	8003dec <UART_SetConfig+0x2b8>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <UART_SetConfig+0x298>
 8003dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc8:	d008      	beq.n	8003ddc <UART_SetConfig+0x2a8>
 8003dca:	e00f      	b.n	8003dec <UART_SetConfig+0x2b8>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd2:	e022      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dda:	e01e      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003ddc:	2304      	movs	r3, #4
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de2:	e01a      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003de4:	2308      	movs	r3, #8
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dea:	e016      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003dec:	2310      	movs	r3, #16
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df2:	e012      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003df4:	efff69f3 	.word	0xefff69f3
 8003df8:	40008000 	.word	0x40008000
 8003dfc:	40013800 	.word	0x40013800
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40004400 	.word	0x40004400
 8003e08:	40004800 	.word	0x40004800
 8003e0c:	40004c00 	.word	0x40004c00
 8003e10:	40005000 	.word	0x40005000
 8003e14:	2310      	movs	r3, #16
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a9f      	ldr	r2, [pc, #636]	; (800409c <UART_SetConfig+0x568>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d17a      	bne.n	8003f1a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d824      	bhi.n	8003e76 <UART_SetConfig+0x342>
 8003e2c:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <UART_SetConfig+0x300>)
 8003e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e32:	bf00      	nop
 8003e34:	08003e59 	.word	0x08003e59
 8003e38:	08003e77 	.word	0x08003e77
 8003e3c:	08003e61 	.word	0x08003e61
 8003e40:	08003e77 	.word	0x08003e77
 8003e44:	08003e67 	.word	0x08003e67
 8003e48:	08003e77 	.word	0x08003e77
 8003e4c:	08003e77 	.word	0x08003e77
 8003e50:	08003e77 	.word	0x08003e77
 8003e54:	08003e6f 	.word	0x08003e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e58:	f7fe ffaa 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003e5c:	61f8      	str	r0, [r7, #28]
        break;
 8003e5e:	e010      	b.n	8003e82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e60:	4b8f      	ldr	r3, [pc, #572]	; (80040a0 <UART_SetConfig+0x56c>)
 8003e62:	61fb      	str	r3, [r7, #28]
        break;
 8003e64:	e00d      	b.n	8003e82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e66:	f7fe ff0b 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003e6a:	61f8      	str	r0, [r7, #28]
        break;
 8003e6c:	e009      	b.n	8003e82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e72:	61fb      	str	r3, [r7, #28]
        break;
 8003e74:	e005      	b.n	8003e82 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80fb 	beq.w	8004080 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d305      	bcc.n	8003ea6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d903      	bls.n	8003eae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003eac:	e0e8      	b.n	8004080 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	461c      	mov	r4, r3
 8003eb4:	4615      	mov	r5, r2
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	022b      	lsls	r3, r5, #8
 8003ec0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ec4:	0222      	lsls	r2, r4, #8
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	6849      	ldr	r1, [r1, #4]
 8003eca:	0849      	lsrs	r1, r1, #1
 8003ecc:	2000      	movs	r0, #0
 8003ece:	4688      	mov	r8, r1
 8003ed0:	4681      	mov	r9, r0
 8003ed2:	eb12 0a08 	adds.w	sl, r2, r8
 8003ed6:	eb43 0b09 	adc.w	fp, r3, r9
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ee8:	4650      	mov	r0, sl
 8003eea:	4659      	mov	r1, fp
 8003eec:	f7fc f970 	bl	80001d0 <__aeabi_uldivmod>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003efe:	d308      	bcc.n	8003f12 <UART_SetConfig+0x3de>
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f06:	d204      	bcs.n	8003f12 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	60da      	str	r2, [r3, #12]
 8003f10:	e0b6      	b.n	8004080 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f18:	e0b2      	b.n	8004080 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f22:	d15e      	bne.n	8003fe2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d828      	bhi.n	8003f7e <UART_SetConfig+0x44a>
 8003f2c:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <UART_SetConfig+0x400>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f61 	.word	0x08003f61
 8003f3c:	08003f69 	.word	0x08003f69
 8003f40:	08003f7f 	.word	0x08003f7f
 8003f44:	08003f6f 	.word	0x08003f6f
 8003f48:	08003f7f 	.word	0x08003f7f
 8003f4c:	08003f7f 	.word	0x08003f7f
 8003f50:	08003f7f 	.word	0x08003f7f
 8003f54:	08003f77 	.word	0x08003f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f58:	f7fe ff2a 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003f5c:	61f8      	str	r0, [r7, #28]
        break;
 8003f5e:	e014      	b.n	8003f8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f60:	f7fe ff3c 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8003f64:	61f8      	str	r0, [r7, #28]
        break;
 8003f66:	e010      	b.n	8003f8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f68:	4b4d      	ldr	r3, [pc, #308]	; (80040a0 <UART_SetConfig+0x56c>)
 8003f6a:	61fb      	str	r3, [r7, #28]
        break;
 8003f6c:	e00d      	b.n	8003f8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6e:	f7fe fe87 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003f72:	61f8      	str	r0, [r7, #28]
        break;
 8003f74:	e009      	b.n	8003f8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7a:	61fb      	str	r3, [r7, #28]
        break;
 8003f7c:	e005      	b.n	8003f8a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d077      	beq.n	8004080 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	005a      	lsls	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	441a      	add	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d916      	bls.n	8003fda <UART_SetConfig+0x4a6>
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb2:	d212      	bcs.n	8003fda <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f023 030f 	bic.w	r3, r3, #15
 8003fbc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	8afb      	ldrh	r3, [r7, #22]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	8afa      	ldrh	r2, [r7, #22]
 8003fd6:	60da      	str	r2, [r3, #12]
 8003fd8:	e052      	b.n	8004080 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fe0:	e04e      	b.n	8004080 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fe2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d827      	bhi.n	800403a <UART_SetConfig+0x506>
 8003fea:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <UART_SetConfig+0x4bc>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	08004015 	.word	0x08004015
 8003ff4:	0800401d 	.word	0x0800401d
 8003ff8:	08004025 	.word	0x08004025
 8003ffc:	0800403b 	.word	0x0800403b
 8004000:	0800402b 	.word	0x0800402b
 8004004:	0800403b 	.word	0x0800403b
 8004008:	0800403b 	.word	0x0800403b
 800400c:	0800403b 	.word	0x0800403b
 8004010:	08004033 	.word	0x08004033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004014:	f7fe fecc 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8004018:	61f8      	str	r0, [r7, #28]
        break;
 800401a:	e014      	b.n	8004046 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800401c:	f7fe fede 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8004020:	61f8      	str	r0, [r7, #28]
        break;
 8004022:	e010      	b.n	8004046 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004024:	4b1e      	ldr	r3, [pc, #120]	; (80040a0 <UART_SetConfig+0x56c>)
 8004026:	61fb      	str	r3, [r7, #28]
        break;
 8004028:	e00d      	b.n	8004046 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402a:	f7fe fe29 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 800402e:	61f8      	str	r0, [r7, #28]
        break;
 8004030:	e009      	b.n	8004046 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004036:	61fb      	str	r3, [r7, #28]
        break;
 8004038:	e005      	b.n	8004046 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004044:	bf00      	nop
    }

    if (pclk != 0U)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d019      	beq.n	8004080 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	085a      	lsrs	r2, r3, #1
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	441a      	add	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	fbb2 f3f3 	udiv	r3, r2, r3
 800405e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b0f      	cmp	r3, #15
 8004064:	d909      	bls.n	800407a <UART_SetConfig+0x546>
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406c:	d205      	bcs.n	800407a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60da      	str	r2, [r3, #12]
 8004078:	e002      	b.n	8004080 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800408c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004090:	4618      	mov	r0, r3
 8004092:	3728      	adds	r7, #40	; 0x28
 8004094:	46bd      	mov	sp, r7
 8004096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800409a:	bf00      	nop
 800409c:	40008000 	.word	0x40008000
 80040a0:	00f42400 	.word	0x00f42400

080040a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01a      	beq.n	80041ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041a2:	d10a      	bne.n	80041ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	605a      	str	r2, [r3, #4]
  }
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b098      	sub	sp, #96	; 0x60
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041f8:	f7fd fd22 	bl	8001c40 <HAL_GetTick>
 80041fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b08      	cmp	r3, #8
 800420a:	d12e      	bne.n	800426a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800420c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004214:	2200      	movs	r2, #0
 8004216:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f88c 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d021      	beq.n	800426a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422e:	e853 3f00 	ldrex	r3, [r3]
 8004232:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800423a:	653b      	str	r3, [r7, #80]	; 0x50
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004244:	647b      	str	r3, [r7, #68]	; 0x44
 8004246:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800424a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e6      	bne.n	8004226 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e062      	b.n	8004330 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b04      	cmp	r3, #4
 8004276:	d149      	bne.n	800430c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004278:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004280:	2200      	movs	r2, #0
 8004282:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f856 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d03c      	beq.n	800430c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	623b      	str	r3, [r7, #32]
   return(result);
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b0:	633b      	str	r3, [r7, #48]	; 0x30
 80042b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e6      	bne.n	8004292 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3308      	adds	r3, #8
 80042ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	64bb      	str	r3, [r7, #72]	; 0x48
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042e4:	61fa      	str	r2, [r7, #28]
 80042e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e8:	69b9      	ldr	r1, [r7, #24]
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	e841 2300 	strex	r3, r2, [r1]
 80042f0:	617b      	str	r3, [r7, #20]
   return(result);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1e5      	bne.n	80042c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e011      	b.n	8004330 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3758      	adds	r7, #88	; 0x58
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004348:	e049      	b.n	80043de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d045      	beq.n	80043de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fd fc75 	bl	8001c40 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <UART_WaitOnFlagUntilTimeout+0x30>
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e048      	b.n	80043fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d031      	beq.n	80043de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b08      	cmp	r3, #8
 8004386:	d110      	bne.n	80043aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2208      	movs	r2, #8
 800438e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f838 	bl	8004406 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2208      	movs	r2, #8
 800439a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e029      	b.n	80043fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b8:	d111      	bne.n	80043de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f81e 	bl	8004406 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e00f      	b.n	80043fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4013      	ands	r3, r2
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	bf0c      	ite	eq
 80043ee:	2301      	moveq	r3, #1
 80043f0:	2300      	movne	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d0a6      	beq.n	800434a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004406:	b480      	push	{r7}
 8004408:	b095      	sub	sp, #84	; 0x54
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800442c:	643b      	str	r3, [r7, #64]	; 0x40
 800442e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004432:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e6      	bne.n	800440e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3308      	adds	r3, #8
 8004446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	64bb      	str	r3, [r7, #72]	; 0x48
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3308      	adds	r3, #8
 800445e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004460:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e5      	bne.n	8004440 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004478:	2b01      	cmp	r3, #1
 800447a:	d118      	bne.n	80044ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	60bb      	str	r3, [r7, #8]
   return(result);
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f023 0310 	bic.w	r3, r3, #16
 8004490:	647b      	str	r3, [r7, #68]	; 0x44
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6979      	ldr	r1, [r7, #20]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	613b      	str	r3, [r7, #16]
   return(result);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e6      	bne.n	800447c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044c2:	bf00      	nop
 80044c4:	3754      	adds	r7, #84	; 0x54
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <__NVIC_SetPriority>:
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	6039      	str	r1, [r7, #0]
 80044da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	db0a      	blt.n	80044fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	490c      	ldr	r1, [pc, #48]	; (800451c <__NVIC_SetPriority+0x4c>)
 80044ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ee:	0112      	lsls	r2, r2, #4
 80044f0:	b2d2      	uxtb	r2, r2
 80044f2:	440b      	add	r3, r1
 80044f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80044f8:	e00a      	b.n	8004510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	4908      	ldr	r1, [pc, #32]	; (8004520 <__NVIC_SetPriority+0x50>)
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	3b04      	subs	r3, #4
 8004508:	0112      	lsls	r2, r2, #4
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	440b      	add	r3, r1
 800450e:	761a      	strb	r2, [r3, #24]
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	e000e100 	.word	0xe000e100
 8004520:	e000ed00 	.word	0xe000ed00

08004524 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004528:	2100      	movs	r1, #0
 800452a:	f06f 0004 	mvn.w	r0, #4
 800452e:	f7ff ffcf 	bl	80044d0 <__NVIC_SetPriority>
#endif
}
 8004532:	bf00      	nop
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800453e:	f3ef 8305 	mrs	r3, IPSR
 8004542:	603b      	str	r3, [r7, #0]
  return(result);
 8004544:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800454a:	f06f 0305 	mvn.w	r3, #5
 800454e:	607b      	str	r3, [r7, #4]
 8004550:	e00c      	b.n	800456c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004552:	4b0a      	ldr	r3, [pc, #40]	; (800457c <osKernelInitialize+0x44>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d105      	bne.n	8004566 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800455a:	4b08      	ldr	r3, [pc, #32]	; (800457c <osKernelInitialize+0x44>)
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004560:	2300      	movs	r3, #0
 8004562:	607b      	str	r3, [r7, #4]
 8004564:	e002      	b.n	800456c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004566:	f04f 33ff 	mov.w	r3, #4294967295
 800456a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800456c:	687b      	ldr	r3, [r7, #4]
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	200008b8 	.word	0x200008b8

08004580 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004586:	f3ef 8305 	mrs	r3, IPSR
 800458a:	603b      	str	r3, [r7, #0]
  return(result);
 800458c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004592:	f06f 0305 	mvn.w	r3, #5
 8004596:	607b      	str	r3, [r7, #4]
 8004598:	e010      	b.n	80045bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <osKernelStart+0x48>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d109      	bne.n	80045b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045a2:	f7ff ffbf 	bl	8004524 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045a6:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <osKernelStart+0x48>)
 80045a8:	2202      	movs	r2, #2
 80045aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045ac:	f001 fb88 	bl	8005cc0 <vTaskStartScheduler>
      stat = osOK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	607b      	str	r3, [r7, #4]
 80045b4:	e002      	b.n	80045bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80045b6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045bc:	687b      	ldr	r3, [r7, #4]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200008b8 	.word	0x200008b8

080045cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b08e      	sub	sp, #56	; 0x38
 80045d0:	af04      	add	r7, sp, #16
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045dc:	f3ef 8305 	mrs	r3, IPSR
 80045e0:	617b      	str	r3, [r7, #20]
  return(result);
 80045e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d17e      	bne.n	80046e6 <osThreadNew+0x11a>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d07b      	beq.n	80046e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80045ee:	2380      	movs	r3, #128	; 0x80
 80045f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80045f2:	2318      	movs	r3, #24
 80045f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80045fa:	f04f 33ff 	mov.w	r3, #4294967295
 80045fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d045      	beq.n	8004692 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <osThreadNew+0x48>
        name = attr->name;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <osThreadNew+0x6e>
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	2b38      	cmp	r3, #56	; 0x38
 800462c:	d805      	bhi.n	800463a <osThreadNew+0x6e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <osThreadNew+0x72>
        return (NULL);
 800463a:	2300      	movs	r3, #0
 800463c:	e054      	b.n	80046e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00e      	beq.n	8004674 <osThreadNew+0xa8>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	2b5b      	cmp	r3, #91	; 0x5b
 800465c:	d90a      	bls.n	8004674 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004662:	2b00      	cmp	r3, #0
 8004664:	d006      	beq.n	8004674 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <osThreadNew+0xa8>
        mem = 1;
 800466e:	2301      	movs	r3, #1
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	e010      	b.n	8004696 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10c      	bne.n	8004696 <osThreadNew+0xca>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d108      	bne.n	8004696 <osThreadNew+0xca>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <osThreadNew+0xca>
          mem = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	e001      	b.n	8004696 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004692:	2300      	movs	r3, #0
 8004694:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d110      	bne.n	80046be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046a4:	9202      	str	r2, [sp, #8]
 80046a6:	9301      	str	r3, [sp, #4]
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6a3a      	ldr	r2, [r7, #32]
 80046b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f001 f92e 	bl	8005914 <xTaskCreateStatic>
 80046b8:	4603      	mov	r3, r0
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	e013      	b.n	80046e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d110      	bne.n	80046e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	f107 0310 	add.w	r3, r7, #16
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f001 f979 	bl	80059ce <xTaskCreate>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d001      	beq.n	80046e6 <osThreadNew+0x11a>
            hTask = NULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80046e6:	693b      	ldr	r3, [r7, #16]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3728      	adds	r7, #40	; 0x28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f8:	f3ef 8305 	mrs	r3, IPSR
 80046fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80046fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <osDelay+0x1c>
    stat = osErrorISR;
 8004704:	f06f 0305 	mvn.w	r3, #5
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	e007      	b.n	800471c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f001 fa9e 	bl	8005c58 <vTaskDelay>
    }
  }

  return (stat);
 800471c:	68fb      	ldr	r3, [r7, #12]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004726:	b580      	push	{r7, lr}
 8004728:	b088      	sub	sp, #32
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004732:	f3ef 8305 	mrs	r3, IPSR
 8004736:	60bb      	str	r3, [r7, #8]
  return(result);
 8004738:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800473a:	2b00      	cmp	r3, #0
 800473c:	d174      	bne.n	8004828 <osMutexNew+0x102>
    if (attr != NULL) {
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <osMutexNew+0x26>
      type = attr->attr_bits;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	e001      	b.n	8004750 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <osMutexNew+0x3a>
      rmtx = 1U;
 800475a:	2301      	movs	r3, #1
 800475c:	617b      	str	r3, [r7, #20]
 800475e:	e001      	b.n	8004764 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d15c      	bne.n	8004828 <osMutexNew+0x102>
      mem = -1;
 800476e:	f04f 33ff 	mov.w	r3, #4294967295
 8004772:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d015      	beq.n	80047a6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d006      	beq.n	8004790 <osMutexNew+0x6a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	2b4f      	cmp	r3, #79	; 0x4f
 8004788:	d902      	bls.n	8004790 <osMutexNew+0x6a>
          mem = 1;
 800478a:	2301      	movs	r3, #1
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	e00c      	b.n	80047aa <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d108      	bne.n	80047aa <osMutexNew+0x84>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d104      	bne.n	80047aa <osMutexNew+0x84>
            mem = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	e001      	b.n	80047aa <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d112      	bne.n	80047d6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	4619      	mov	r1, r3
 80047bc:	2004      	movs	r0, #4
 80047be:	f000 fb18 	bl	8004df2 <xQueueCreateMutexStatic>
 80047c2:	61f8      	str	r0, [r7, #28]
 80047c4:	e016      	b.n	80047f4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	4619      	mov	r1, r3
 80047cc:	2001      	movs	r0, #1
 80047ce:	f000 fb10 	bl	8004df2 <xQueueCreateMutexStatic>
 80047d2:	61f8      	str	r0, [r7, #28]
 80047d4:	e00e      	b.n	80047f4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d004      	beq.n	80047ec <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80047e2:	2004      	movs	r0, #4
 80047e4:	f000 faed 	bl	8004dc2 <xQueueCreateMutex>
 80047e8:	61f8      	str	r0, [r7, #28]
 80047ea:	e003      	b.n	80047f4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80047ec:	2001      	movs	r0, #1
 80047ee:	f000 fae8 	bl	8004dc2 <xQueueCreateMutex>
 80047f2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00c      	beq.n	8004814 <osMutexNew+0xee>
        if (attr != NULL) {
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <osMutexNew+0xe2>
          name = attr->name;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	e001      	b.n	800480c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800480c:	68f9      	ldr	r1, [r7, #12]
 800480e:	69f8      	ldr	r0, [r7, #28]
 8004810:	f001 f822 	bl	8005858 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d006      	beq.n	8004828 <osMutexNew+0x102>
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004828:	69fb      	ldr	r3, [r7, #28]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004832:	b580      	push	{r7, lr}
 8004834:	b086      	sub	sp, #24
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f023 0301 	bic.w	r3, r3, #1
 8004842:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004850:	f3ef 8305 	mrs	r3, IPSR
 8004854:	60bb      	str	r3, [r7, #8]
  return(result);
 8004856:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800485c:	f06f 0305 	mvn.w	r3, #5
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	e02c      	b.n	80048be <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d103      	bne.n	8004872 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800486a:	f06f 0303 	mvn.w	r3, #3
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	e025      	b.n	80048be <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d011      	beq.n	800489c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004878:	6839      	ldr	r1, [r7, #0]
 800487a:	6938      	ldr	r0, [r7, #16]
 800487c:	f000 fb08 	bl	8004e90 <xQueueTakeMutexRecursive>
 8004880:	4603      	mov	r3, r0
 8004882:	2b01      	cmp	r3, #1
 8004884:	d01b      	beq.n	80048be <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800488c:	f06f 0301 	mvn.w	r3, #1
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	e014      	b.n	80048be <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004894:	f06f 0302 	mvn.w	r3, #2
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	e010      	b.n	80048be <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800489c:	6839      	ldr	r1, [r7, #0]
 800489e:	6938      	ldr	r0, [r7, #16]
 80048a0:	f000 fda6 	bl	80053f0 <xQueueSemaphoreTake>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d009      	beq.n	80048be <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80048b0:	f06f 0301 	mvn.w	r3, #1
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	e002      	b.n	80048be <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80048b8:	f06f 0302 	mvn.w	r3, #2
 80048bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80048be:	697b      	ldr	r3, [r7, #20]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048e4:	f3ef 8305 	mrs	r3, IPSR
 80048e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80048ea:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <osMutexRelease+0x30>
    stat = osErrorISR;
 80048f0:	f06f 0305 	mvn.w	r3, #5
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	e01f      	b.n	8004938 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d103      	bne.n	8004906 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80048fe:	f06f 0303 	mvn.w	r3, #3
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	e018      	b.n	8004938 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d009      	beq.n	8004920 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800490c:	6938      	ldr	r0, [r7, #16]
 800490e:	f000 fa8b 	bl	8004e28 <xQueueGiveMutexRecursive>
 8004912:	4603      	mov	r3, r0
 8004914:	2b01      	cmp	r3, #1
 8004916:	d00f      	beq.n	8004938 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004918:	f06f 0302 	mvn.w	r3, #2
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	e00b      	b.n	8004938 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004920:	2300      	movs	r3, #0
 8004922:	2200      	movs	r2, #0
 8004924:	2100      	movs	r1, #0
 8004926:	6938      	ldr	r0, [r7, #16]
 8004928:	f000 fae8 	bl	8004efc <xQueueGenericSend>
 800492c:	4603      	mov	r3, r0
 800492e:	2b01      	cmp	r3, #1
 8004930:	d002      	beq.n	8004938 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004932:	f06f 0302 	mvn.w	r3, #2
 8004936:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004938:	697b      	ldr	r3, [r7, #20]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a07      	ldr	r2, [pc, #28]	; (8004970 <vApplicationGetIdleTaskMemory+0x2c>)
 8004954:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4a06      	ldr	r2, [pc, #24]	; (8004974 <vApplicationGetIdleTaskMemory+0x30>)
 800495a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2280      	movs	r2, #128	; 0x80
 8004960:	601a      	str	r2, [r3, #0]
}
 8004962:	bf00      	nop
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	200008bc 	.word	0x200008bc
 8004974:	20000918 	.word	0x20000918

08004978 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4a07      	ldr	r2, [pc, #28]	; (80049a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004988:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4a06      	ldr	r2, [pc, #24]	; (80049a8 <vApplicationGetTimerTaskMemory+0x30>)
 800498e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004996:	601a      	str	r2, [r3, #0]
}
 8004998:	bf00      	nop
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	20000b18 	.word	0x20000b18
 80049a8:	20000b74 	.word	0x20000b74

080049ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f103 0208 	add.w	r2, r3, #8
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f04f 32ff 	mov.w	r2, #4294967295
 80049c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f103 0208 	add.w	r2, r3, #8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f103 0208 	add.w	r2, r3, #8
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	601a      	str	r2, [r3, #0]
}
 8004a42:	bf00      	nop
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d103      	bne.n	8004a6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	e00c      	b.n	8004a88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3308      	adds	r3, #8
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	e002      	b.n	8004a7c <vListInsert+0x2e>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d2f6      	bcs.n	8004a76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	601a      	str	r2, [r3, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6892      	ldr	r2, [r2, #8]
 8004ad6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6852      	ldr	r2, [r2, #4]
 8004ae0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d103      	bne.n	8004af4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	1e5a      	subs	r2, r3, #1
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b3e:	f002 fb71 	bl	8007224 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4a:	68f9      	ldr	r1, [r7, #12]
 8004b4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b4e:	fb01 f303 	mul.w	r3, r1, r3
 8004b52:	441a      	add	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	68f9      	ldr	r1, [r7, #12]
 8004b72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	441a      	add	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	22ff      	movs	r2, #255	; 0xff
 8004b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	22ff      	movs	r2, #255	; 0xff
 8004b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d114      	bne.n	8004bbe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01a      	beq.n	8004bd2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3310      	adds	r3, #16
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 fb17 	bl	80061d4 <xTaskRemoveFromEventList>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d012      	beq.n	8004bd2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bac:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <xQueueGenericReset+0xcc>)
 8004bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	e009      	b.n	8004bd2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3310      	adds	r3, #16
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff fef2 	bl	80049ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	3324      	adds	r3, #36	; 0x24
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff feed 	bl	80049ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bd2:	f002 fb57 	bl	8007284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bd6:	2301      	movs	r3, #1
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	e000ed04 	.word	0xe000ed04

08004be4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08e      	sub	sp, #56	; 0x38
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <xQueueGenericCreateStatic+0x52>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <xQueueGenericCreateStatic+0x56>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <xQueueGenericCreateStatic+0x58>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	623b      	str	r3, [r7, #32]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <xQueueGenericCreateStatic+0x7e>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <xQueueGenericCreateStatic+0x82>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <xQueueGenericCreateStatic+0x84>
 8004c66:	2300      	movs	r3, #0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10a      	bne.n	8004c82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	61fb      	str	r3, [r7, #28]
}
 8004c7e:	bf00      	nop
 8004c80:	e7fe      	b.n	8004c80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c82:	2350      	movs	r3, #80	; 0x50
 8004c84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2b50      	cmp	r3, #80	; 0x50
 8004c8a:	d00a      	beq.n	8004ca2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	61bb      	str	r3, [r7, #24]
}
 8004c9e:	bf00      	nop
 8004ca0:	e7fe      	b.n	8004ca0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ca2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00d      	beq.n	8004cca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cb6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f83f 	bl	8004d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3730      	adds	r7, #48	; 0x30
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08a      	sub	sp, #40	; 0x28
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <xQueueGenericCreate+0x2a>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	613b      	str	r3, [r7, #16]
}
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	fb02 f303 	mul.w	r3, r2, r3
 8004d06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	3350      	adds	r3, #80	; 0x50
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f002 fbab 	bl	8007468 <pvPortMalloc>
 8004d12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d011      	beq.n	8004d3e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	3350      	adds	r3, #80	; 0x50
 8004d22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d2c:	79fa      	ldrb	r2, [r7, #7]
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	4613      	mov	r3, r2
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f805 	bl	8004d48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d3e:	69bb      	ldr	r3, [r7, #24]
	}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3720      	adds	r7, #32
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e002      	b.n	8004d6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d76:	2101      	movs	r1, #1
 8004d78:	69b8      	ldr	r0, [r7, #24]
 8004d7a:	f7ff fecb 	bl	8004b14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d86:	bf00      	nop
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00e      	beq.n	8004dba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004dae:	2300      	movs	r3, #0
 8004db0:	2200      	movs	r2, #0
 8004db2:	2100      	movs	r1, #0
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f8a1 	bl	8004efc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b086      	sub	sp, #24
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	4603      	mov	r3, r0
 8004dca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6939      	ldr	r1, [r7, #16]
 8004dda:	6978      	ldr	r0, [r7, #20]
 8004ddc:	f7ff ff7a 	bl	8004cd4 <xQueueGenericCreate>
 8004de0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7ff ffd3 	bl	8004d8e <prvInitialiseMutex>

		return xNewQueue;
 8004de8:	68fb      	ldr	r3, [r7, #12]
	}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b088      	sub	sp, #32
 8004df6:	af02      	add	r7, sp, #8
 8004df8:	4603      	mov	r3, r0
 8004dfa:	6039      	str	r1, [r7, #0]
 8004dfc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	2300      	movs	r3, #0
 8004e04:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	6939      	ldr	r1, [r7, #16]
 8004e10:	6978      	ldr	r0, [r7, #20]
 8004e12:	f7ff fee7 	bl	8004be4 <xQueueGenericCreateStatic>
 8004e16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7ff ffb8 	bl	8004d8e <prvInitialiseMutex>

		return xNewQueue;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
	}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004e28:	b590      	push	{r4, r7, lr}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10a      	bne.n	8004e50 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	60fb      	str	r3, [r7, #12]
}
 8004e4c:	bf00      	nop
 8004e4e:	e7fe      	b.n	8004e4e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	689c      	ldr	r4, [r3, #8]
 8004e54:	f001 fb7c 	bl	8006550 <xTaskGetCurrentTaskHandle>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	429c      	cmp	r4, r3
 8004e5c:	d111      	bne.n	8004e82 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	1e5a      	subs	r2, r3, #1
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d105      	bne.n	8004e7c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004e70:	2300      	movs	r3, #0
 8004e72:	2200      	movs	r2, #0
 8004e74:	2100      	movs	r1, #0
 8004e76:	6938      	ldr	r0, [r7, #16]
 8004e78:	f000 f840 	bl	8004efc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	e001      	b.n	8004e86 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004e86:	697b      	ldr	r3, [r7, #20]
	}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd90      	pop	{r4, r7, pc}

08004e90 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004e90:	b590      	push	{r4, r7, lr}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	60fb      	str	r3, [r7, #12]
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	689c      	ldr	r4, [r3, #8]
 8004ebe:	f001 fb47 	bl	8006550 <xTaskGetCurrentTaskHandle>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	429c      	cmp	r4, r3
 8004ec6:	d107      	bne.n	8004ed8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	617b      	str	r3, [r7, #20]
 8004ed6:	e00c      	b.n	8004ef2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004ed8:	6839      	ldr	r1, [r7, #0]
 8004eda:	6938      	ldr	r0, [r7, #16]
 8004edc:	f000 fa88 	bl	80053f0 <xQueueSemaphoreTake>
 8004ee0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d004      	beq.n	8004ef2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004ef2:	697b      	ldr	r3, [r7, #20]
	}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd90      	pop	{r4, r7, pc}

08004efc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08e      	sub	sp, #56	; 0x38
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <xQueueGenericSend+0x32>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d103      	bne.n	8004f3c <xQueueGenericSend+0x40>
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <xQueueGenericSend+0x44>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <xQueueGenericSend+0x46>
 8004f40:	2300      	movs	r3, #0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <xQueueGenericSend+0x60>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f58:	bf00      	nop
 8004f5a:	e7fe      	b.n	8004f5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d103      	bne.n	8004f6a <xQueueGenericSend+0x6e>
 8004f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <xQueueGenericSend+0x72>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <xQueueGenericSend+0x74>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10a      	bne.n	8004f8a <xQueueGenericSend+0x8e>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	623b      	str	r3, [r7, #32]
}
 8004f86:	bf00      	nop
 8004f88:	e7fe      	b.n	8004f88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f8a:	f001 faf1 	bl	8006570 <xTaskGetSchedulerState>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d102      	bne.n	8004f9a <xQueueGenericSend+0x9e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <xQueueGenericSend+0xa2>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <xQueueGenericSend+0xa4>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10a      	bne.n	8004fba <xQueueGenericSend+0xbe>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	61fb      	str	r3, [r7, #28]
}
 8004fb6:	bf00      	nop
 8004fb8:	e7fe      	b.n	8004fb8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fba:	f002 f933 	bl	8007224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d302      	bcc.n	8004fd0 <xQueueGenericSend+0xd4>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d129      	bne.n	8005024 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fd6:	f000 fb2f 	bl	8005638 <prvCopyDataToQueue>
 8004fda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d010      	beq.n	8005006 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	3324      	adds	r3, #36	; 0x24
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f001 f8f3 	bl	80061d4 <xTaskRemoveFromEventList>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d013      	beq.n	800501c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ff4:	4b3f      	ldr	r3, [pc, #252]	; (80050f4 <xQueueGenericSend+0x1f8>)
 8004ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	e00a      	b.n	800501c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800500c:	4b39      	ldr	r3, [pc, #228]	; (80050f4 <xQueueGenericSend+0x1f8>)
 800500e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800501c:	f002 f932 	bl	8007284 <vPortExitCritical>
				return pdPASS;
 8005020:	2301      	movs	r3, #1
 8005022:	e063      	b.n	80050ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800502a:	f002 f92b 	bl	8007284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800502e:	2300      	movs	r3, #0
 8005030:	e05c      	b.n	80050ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	4618      	mov	r0, r3
 800503e:	f001 f92d 	bl	800629c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005042:	2301      	movs	r3, #1
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005046:	f002 f91d 	bl	8007284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800504a:	f000 fe9f 	bl	8005d8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800504e:	f002 f8e9 	bl	8007224 <vPortEnterCritical>
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005058:	b25b      	sxtb	r3, r3
 800505a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505e:	d103      	bne.n	8005068 <xQueueGenericSend+0x16c>
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800506e:	b25b      	sxtb	r3, r3
 8005070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005074:	d103      	bne.n	800507e <xQueueGenericSend+0x182>
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800507e:	f002 f901 	bl	8007284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005082:	1d3a      	adds	r2, r7, #4
 8005084:	f107 0314 	add.w	r3, r7, #20
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f001 f91c 	bl	80062c8 <xTaskCheckForTimeOut>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d124      	bne.n	80050e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005098:	f000 fbc6 	bl	8005828 <prvIsQueueFull>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d018      	beq.n	80050d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	3310      	adds	r3, #16
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	4611      	mov	r1, r2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f001 f842 	bl	8006134 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050b2:	f000 fb51 	bl	8005758 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050b6:	f000 fe77 	bl	8005da8 <xTaskResumeAll>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f47f af7c 	bne.w	8004fba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80050c2:	4b0c      	ldr	r3, [pc, #48]	; (80050f4 <xQueueGenericSend+0x1f8>)
 80050c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	e772      	b.n	8004fba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050d6:	f000 fb3f 	bl	8005758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050da:	f000 fe65 	bl	8005da8 <xTaskResumeAll>
 80050de:	e76c      	b.n	8004fba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050e2:	f000 fb39 	bl	8005758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050e6:	f000 fe5f 	bl	8005da8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3738      	adds	r7, #56	; 0x38
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	e000ed04 	.word	0xe000ed04

080050f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b090      	sub	sp, #64	; 0x40
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d103      	bne.n	8005134 <xQueueGenericSendFromISR+0x3c>
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <xQueueGenericSendFromISR+0x40>
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <xQueueGenericSendFromISR+0x42>
 8005138:	2300      	movs	r3, #0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005150:	bf00      	nop
 8005152:	e7fe      	b.n	8005152 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b02      	cmp	r3, #2
 8005158:	d103      	bne.n	8005162 <xQueueGenericSendFromISR+0x6a>
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <xQueueGenericSendFromISR+0x6e>
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <xQueueGenericSendFromISR+0x70>
 8005166:	2300      	movs	r3, #0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10a      	bne.n	8005182 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	623b      	str	r3, [r7, #32]
}
 800517e:	bf00      	nop
 8005180:	e7fe      	b.n	8005180 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005182:	f002 f931 	bl	80073e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005186:	f3ef 8211 	mrs	r2, BASEPRI
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	61fa      	str	r2, [r7, #28]
 800519c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800519e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <xQueueGenericSendFromISR+0xbc>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d12f      	bne.n	8005214 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051ca:	f000 fa35 	bl	8005638 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80051d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d6:	d112      	bne.n	80051fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d016      	beq.n	800520e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e2:	3324      	adds	r3, #36	; 0x24
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fff5 	bl	80061d4 <xTaskRemoveFromEventList>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00e      	beq.n	800520e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	e007      	b.n	800520e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005202:	3301      	adds	r3, #1
 8005204:	b2db      	uxtb	r3, r3
 8005206:	b25a      	sxtb	r2, r3
 8005208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800520e:	2301      	movs	r3, #1
 8005210:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005212:	e001      	b.n	8005218 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005214:	2300      	movs	r3, #0
 8005216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005222:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005226:	4618      	mov	r0, r3
 8005228:	3740      	adds	r7, #64	; 0x40
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08c      	sub	sp, #48	; 0x30
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800523c:	2300      	movs	r3, #0
 800523e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10a      	bne.n	8005260 <xQueueReceive+0x30>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	623b      	str	r3, [r7, #32]
}
 800525c:	bf00      	nop
 800525e:	e7fe      	b.n	800525e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d103      	bne.n	800526e <xQueueReceive+0x3e>
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <xQueueReceive+0x42>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <xQueueReceive+0x44>
 8005272:	2300      	movs	r3, #0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <xQueueReceive+0x5e>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	61fb      	str	r3, [r7, #28]
}
 800528a:	bf00      	nop
 800528c:	e7fe      	b.n	800528c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800528e:	f001 f96f 	bl	8006570 <xTaskGetSchedulerState>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d102      	bne.n	800529e <xQueueReceive+0x6e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <xQueueReceive+0x72>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <xQueueReceive+0x74>
 80052a2:	2300      	movs	r3, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <xQueueReceive+0x8e>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	61bb      	str	r3, [r7, #24]
}
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052be:	f001 ffb1 	bl	8007224 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d01f      	beq.n	800530e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052d2:	f000 fa1b 	bl	800570c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	1e5a      	subs	r2, r3, #1
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00f      	beq.n	8005306 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	3310      	adds	r3, #16
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 ff72 	bl	80061d4 <xTaskRemoveFromEventList>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052f6:	4b3d      	ldr	r3, [pc, #244]	; (80053ec <xQueueReceive+0x1bc>)
 80052f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005306:	f001 ffbd 	bl	8007284 <vPortExitCritical>
				return pdPASS;
 800530a:	2301      	movs	r3, #1
 800530c:	e069      	b.n	80053e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d103      	bne.n	800531c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005314:	f001 ffb6 	bl	8007284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005318:	2300      	movs	r3, #0
 800531a:	e062      	b.n	80053e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005322:	f107 0310 	add.w	r3, r7, #16
 8005326:	4618      	mov	r0, r3
 8005328:	f000 ffb8 	bl	800629c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800532c:	2301      	movs	r3, #1
 800532e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005330:	f001 ffa8 	bl	8007284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005334:	f000 fd2a 	bl	8005d8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005338:	f001 ff74 	bl	8007224 <vPortEnterCritical>
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005342:	b25b      	sxtb	r3, r3
 8005344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005348:	d103      	bne.n	8005352 <xQueueReceive+0x122>
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005358:	b25b      	sxtb	r3, r3
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535e:	d103      	bne.n	8005368 <xQueueReceive+0x138>
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005368:	f001 ff8c 	bl	8007284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800536c:	1d3a      	adds	r2, r7, #4
 800536e:	f107 0310 	add.w	r3, r7, #16
 8005372:	4611      	mov	r1, r2
 8005374:	4618      	mov	r0, r3
 8005376:	f000 ffa7 	bl	80062c8 <xTaskCheckForTimeOut>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d123      	bne.n	80053c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005382:	f000 fa3b 	bl	80057fc <prvIsQueueEmpty>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d017      	beq.n	80053bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538e:	3324      	adds	r3, #36	; 0x24
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	4611      	mov	r1, r2
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fecd 	bl	8006134 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800539a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800539c:	f000 f9dc 	bl	8005758 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053a0:	f000 fd02 	bl	8005da8 <xTaskResumeAll>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d189      	bne.n	80052be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80053aa:	4b10      	ldr	r3, [pc, #64]	; (80053ec <xQueueReceive+0x1bc>)
 80053ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	e780      	b.n	80052be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053be:	f000 f9cb 	bl	8005758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053c2:	f000 fcf1 	bl	8005da8 <xTaskResumeAll>
 80053c6:	e77a      	b.n	80052be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ca:	f000 f9c5 	bl	8005758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053ce:	f000 fceb 	bl	8005da8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053d4:	f000 fa12 	bl	80057fc <prvIsQueueEmpty>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f43f af6f 	beq.w	80052be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3730      	adds	r7, #48	; 0x30
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	e000ed04 	.word	0xe000ed04

080053f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08e      	sub	sp, #56	; 0x38
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80053fa:	2300      	movs	r3, #0
 80053fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005402:	2300      	movs	r3, #0
 8005404:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	623b      	str	r3, [r7, #32]
}
 800541e:	bf00      	nop
 8005420:	e7fe      	b.n	8005420 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	61fb      	str	r3, [r7, #28]
}
 800543c:	bf00      	nop
 800543e:	e7fe      	b.n	800543e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005440:	f001 f896 	bl	8006570 <xTaskGetSchedulerState>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <xQueueSemaphoreTake+0x60>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <xQueueSemaphoreTake+0x64>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <xQueueSemaphoreTake+0x66>
 8005454:	2300      	movs	r3, #0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	61bb      	str	r3, [r7, #24]
}
 800546c:	bf00      	nop
 800546e:	e7fe      	b.n	800546e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005470:	f001 fed8 	bl	8007224 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	2b00      	cmp	r3, #0
 800547e:	d024      	beq.n	80054ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	1e5a      	subs	r2, r3, #1
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d104      	bne.n	800549a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005490:	f001 f9e4 	bl	800685c <pvTaskIncrementMutexHeldCount>
 8005494:	4602      	mov	r2, r0
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800549a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00f      	beq.n	80054c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	3310      	adds	r3, #16
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fe94 	bl	80061d4 <xTaskRemoveFromEventList>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d007      	beq.n	80054c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054b2:	4b54      	ldr	r3, [pc, #336]	; (8005604 <xQueueSemaphoreTake+0x214>)
 80054b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054c2:	f001 fedf 	bl	8007284 <vPortExitCritical>
				return pdPASS;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e097      	b.n	80055fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d111      	bne.n	80054f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	617b      	str	r3, [r7, #20]
}
 80054e8:	bf00      	nop
 80054ea:	e7fe      	b.n	80054ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80054ec:	f001 feca 	bl	8007284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054f0:	2300      	movs	r3, #0
 80054f2:	e082      	b.n	80055fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054fa:	f107 030c 	add.w	r3, r7, #12
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fecc 	bl	800629c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005504:	2301      	movs	r3, #1
 8005506:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005508:	f001 febc 	bl	8007284 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800550c:	f000 fc3e 	bl	8005d8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005510:	f001 fe88 	bl	8007224 <vPortEnterCritical>
 8005514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005516:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800551a:	b25b      	sxtb	r3, r3
 800551c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005520:	d103      	bne.n	800552a <xQueueSemaphoreTake+0x13a>
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005530:	b25b      	sxtb	r3, r3
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d103      	bne.n	8005540 <xQueueSemaphoreTake+0x150>
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005540:	f001 fea0 	bl	8007284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005544:	463a      	mov	r2, r7
 8005546:	f107 030c 	add.w	r3, r7, #12
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f000 febb 	bl	80062c8 <xTaskCheckForTimeOut>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d132      	bne.n	80055be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005558:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800555a:	f000 f94f 	bl	80057fc <prvIsQueueEmpty>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d026      	beq.n	80055b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d109      	bne.n	8005580 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800556c:	f001 fe5a 	bl	8007224 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4618      	mov	r0, r3
 8005576:	f001 f819 	bl	80065ac <xTaskPriorityInherit>
 800557a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800557c:	f001 fe82 	bl	8007284 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005582:	3324      	adds	r3, #36	; 0x24
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	4611      	mov	r1, r2
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fdd3 	bl	8006134 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800558e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005590:	f000 f8e2 	bl	8005758 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005594:	f000 fc08 	bl	8005da8 <xTaskResumeAll>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	f47f af68 	bne.w	8005470 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80055a0:	4b18      	ldr	r3, [pc, #96]	; (8005604 <xQueueSemaphoreTake+0x214>)
 80055a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	e75e      	b.n	8005470 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80055b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055b4:	f000 f8d0 	bl	8005758 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055b8:	f000 fbf6 	bl	8005da8 <xTaskResumeAll>
 80055bc:	e758      	b.n	8005470 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80055be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055c0:	f000 f8ca 	bl	8005758 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055c4:	f000 fbf0 	bl	8005da8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055ca:	f000 f917 	bl	80057fc <prvIsQueueEmpty>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f43f af4d 	beq.w	8005470 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00d      	beq.n	80055f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80055dc:	f001 fe22 	bl	8007224 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80055e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055e2:	f000 f811 	bl	8005608 <prvGetDisinheritPriorityAfterTimeout>
 80055e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80055e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055ee:	4618      	mov	r0, r3
 80055f0:	f001 f8b2 	bl	8006758 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80055f4:	f001 fe46 	bl	8007284 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3738      	adds	r7, #56	; 0x38
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	e000ed04 	.word	0xe000ed04

08005608 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	2b00      	cmp	r3, #0
 8005616:	d006      	beq.n	8005626 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e001      	b.n	800562a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800562a:	68fb      	ldr	r3, [r7, #12]
	}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005644:	2300      	movs	r3, #0
 8005646:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10d      	bne.n	8005672 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d14d      	bne.n	80056fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	4618      	mov	r0, r3
 8005664:	f001 f80a 	bl	800667c <xTaskPriorityDisinherit>
 8005668:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	609a      	str	r2, [r3, #8]
 8005670:	e043      	b.n	80056fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d119      	bne.n	80056ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6858      	ldr	r0, [r3, #4]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	461a      	mov	r2, r3
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	f002 f906 	bl	8007894 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	441a      	add	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d32b      	bcc.n	80056fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	605a      	str	r2, [r3, #4]
 80056aa:	e026      	b.n	80056fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	68d8      	ldr	r0, [r3, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	461a      	mov	r2, r3
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	f002 f8ec 	bl	8007894 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	425b      	negs	r3, r3
 80056c6:	441a      	add	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d207      	bcs.n	80056e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	425b      	negs	r3, r3
 80056e2:	441a      	add	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d105      	bne.n	80056fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005702:	697b      	ldr	r3, [r7, #20]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d018      	beq.n	8005750 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	441a      	add	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	429a      	cmp	r2, r3
 8005736:	d303      	bcc.n	8005740 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68d9      	ldr	r1, [r3, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	461a      	mov	r2, r3
 800574a:	6838      	ldr	r0, [r7, #0]
 800574c:	f002 f8a2 	bl	8007894 <memcpy>
	}
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005760:	f001 fd60 	bl	8007224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800576a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800576c:	e011      	b.n	8005792 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	2b00      	cmp	r3, #0
 8005774:	d012      	beq.n	800579c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3324      	adds	r3, #36	; 0x24
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fd2a 	bl	80061d4 <xTaskRemoveFromEventList>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005786:	f000 fe01 	bl	800638c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	3b01      	subs	r3, #1
 800578e:	b2db      	uxtb	r3, r3
 8005790:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005796:	2b00      	cmp	r3, #0
 8005798:	dce9      	bgt.n	800576e <prvUnlockQueue+0x16>
 800579a:	e000      	b.n	800579e <prvUnlockQueue+0x46>
					break;
 800579c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	22ff      	movs	r2, #255	; 0xff
 80057a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80057a6:	f001 fd6d 	bl	8007284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057aa:	f001 fd3b 	bl	8007224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057b6:	e011      	b.n	80057dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d012      	beq.n	80057e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3310      	adds	r3, #16
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fd05 	bl	80061d4 <xTaskRemoveFromEventList>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80057d0:	f000 fddc 	bl	800638c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80057d4:	7bbb      	ldrb	r3, [r7, #14]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	dce9      	bgt.n	80057b8 <prvUnlockQueue+0x60>
 80057e4:	e000      	b.n	80057e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80057e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	22ff      	movs	r2, #255	; 0xff
 80057ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80057f0:	f001 fd48 	bl	8007284 <vPortExitCritical>
}
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005804:	f001 fd0e 	bl	8007224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	d102      	bne.n	8005816 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005810:	2301      	movs	r3, #1
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	e001      	b.n	800581a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800581a:	f001 fd33 	bl	8007284 <vPortExitCritical>

	return xReturn;
 800581e:	68fb      	ldr	r3, [r7, #12]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005830:	f001 fcf8 	bl	8007224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583c:	429a      	cmp	r2, r3
 800583e:	d102      	bne.n	8005846 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005840:	2301      	movs	r3, #1
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	e001      	b.n	800584a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800584a:	f001 fd1b 	bl	8007284 <vPortExitCritical>

	return xReturn;
 800584e:	68fb      	ldr	r3, [r7, #12]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	e014      	b.n	8005892 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005868:	4a0f      	ldr	r2, [pc, #60]	; (80058a8 <vQueueAddToRegistry+0x50>)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10b      	bne.n	800588c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005874:	490c      	ldr	r1, [pc, #48]	; (80058a8 <vQueueAddToRegistry+0x50>)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800587e:	4a0a      	ldr	r2, [pc, #40]	; (80058a8 <vQueueAddToRegistry+0x50>)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	4413      	add	r3, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800588a:	e006      	b.n	800589a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3301      	adds	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b07      	cmp	r3, #7
 8005896:	d9e7      	bls.n	8005868 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	20000f74 	.word	0x20000f74

080058ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80058bc:	f001 fcb2 	bl	8007224 <vPortEnterCritical>
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058c6:	b25b      	sxtb	r3, r3
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d103      	bne.n	80058d6 <vQueueWaitForMessageRestricted+0x2a>
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058dc:	b25b      	sxtb	r3, r3
 80058de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e2:	d103      	bne.n	80058ec <vQueueWaitForMessageRestricted+0x40>
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058ec:	f001 fcca 	bl	8007284 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d106      	bne.n	8005906 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	3324      	adds	r3, #36	; 0x24
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	68b9      	ldr	r1, [r7, #8]
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fc3b 	bl	800617c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005906:	6978      	ldr	r0, [r7, #20]
 8005908:	f7ff ff26 	bl	8005758 <prvUnlockQueue>
	}
 800590c:	bf00      	nop
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08e      	sub	sp, #56	; 0x38
 8005918:	af04      	add	r7, sp, #16
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10a      	bne.n	800593e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	623b      	str	r3, [r7, #32]
}
 800593a:	bf00      	nop
 800593c:	e7fe      	b.n	800593c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <xTaskCreateStatic+0x46>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	61fb      	str	r3, [r7, #28]
}
 8005956:	bf00      	nop
 8005958:	e7fe      	b.n	8005958 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800595a:	235c      	movs	r3, #92	; 0x5c
 800595c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b5c      	cmp	r3, #92	; 0x5c
 8005962:	d00a      	beq.n	800597a <xTaskCreateStatic+0x66>
	__asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	61bb      	str	r3, [r7, #24]
}
 8005976:	bf00      	nop
 8005978:	e7fe      	b.n	8005978 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800597a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01e      	beq.n	80059c0 <xTaskCreateStatic+0xac>
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005984:	2b00      	cmp	r3, #0
 8005986:	d01b      	beq.n	80059c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005990:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	2202      	movs	r2, #2
 8005996:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800599a:	2300      	movs	r3, #0
 800599c:	9303      	str	r3, [sp, #12]
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	9302      	str	r3, [sp, #8]
 80059a2:	f107 0314 	add.w	r3, r7, #20
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 f850 	bl	8005a58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059ba:	f000 f8dd 	bl	8005b78 <prvAddNewTaskToReadyList>
 80059be:	e001      	b.n	80059c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80059c4:	697b      	ldr	r3, [r7, #20]
	}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3728      	adds	r7, #40	; 0x28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b08c      	sub	sp, #48	; 0x30
 80059d2:	af04      	add	r7, sp, #16
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	603b      	str	r3, [r7, #0]
 80059da:	4613      	mov	r3, r2
 80059dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4618      	mov	r0, r3
 80059e4:	f001 fd40 	bl	8007468 <pvPortMalloc>
 80059e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00e      	beq.n	8005a0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80059f0:	205c      	movs	r0, #92	; 0x5c
 80059f2:	f001 fd39 	bl	8007468 <pvPortMalloc>
 80059f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	631a      	str	r2, [r3, #48]	; 0x30
 8005a04:	e005      	b.n	8005a12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a06:	6978      	ldr	r0, [r7, #20]
 8005a08:	f001 fdfa 	bl	8007600 <vPortFree>
 8005a0c:	e001      	b.n	8005a12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d017      	beq.n	8005a48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a20:	88fa      	ldrh	r2, [r7, #6]
 8005a22:	2300      	movs	r3, #0
 8005a24:	9303      	str	r3, [sp, #12]
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	9302      	str	r3, [sp, #8]
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	9301      	str	r3, [sp, #4]
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f80e 	bl	8005a58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a3c:	69f8      	ldr	r0, [r7, #28]
 8005a3e:	f000 f89b 	bl	8005b78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a42:	2301      	movs	r3, #1
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	e002      	b.n	8005a4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a48:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
	}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	461a      	mov	r2, r3
 8005a70:	21a5      	movs	r1, #165	; 0xa5
 8005a72:	f001 fee3 	bl	800783c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a80:	3b01      	subs	r3, #1
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	f023 0307 	bic.w	r3, r3, #7
 8005a8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	617b      	str	r3, [r7, #20]
}
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d01f      	beq.n	8005af6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61fb      	str	r3, [r7, #28]
 8005aba:	e012      	b.n	8005ae2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	7819      	ldrb	r1, [r3, #0]
 8005ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	4413      	add	r3, r2
 8005aca:	3334      	adds	r3, #52	; 0x34
 8005acc:	460a      	mov	r2, r1
 8005ace:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d006      	beq.n	8005aea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	61fb      	str	r3, [r7, #28]
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	2b0f      	cmp	r3, #15
 8005ae6:	d9e9      	bls.n	8005abc <prvInitialiseNewTask+0x64>
 8005ae8:	e000      	b.n	8005aec <prvInitialiseNewTask+0x94>
			{
				break;
 8005aea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005af4:	e003      	b.n	8005afe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	2b37      	cmp	r3, #55	; 0x37
 8005b02:	d901      	bls.n	8005b08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b04:	2337      	movs	r3, #55	; 0x37
 8005b06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	2200      	movs	r2, #0
 8005b18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe ff64 	bl	80049ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	3318      	adds	r3, #24
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fe ff5f 	bl	80049ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	2200      	movs	r2, #0
 8005b48:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	68f9      	ldr	r1, [r7, #12]
 8005b56:	69b8      	ldr	r0, [r7, #24]
 8005b58:	f001 fa36 	bl	8006fc8 <pxPortInitialiseStack>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b6e:	bf00      	nop
 8005b70:	3720      	adds	r7, #32
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b80:	f001 fb50 	bl	8007224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b84:	4b2d      	ldr	r3, [pc, #180]	; (8005c3c <prvAddNewTaskToReadyList+0xc4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	4a2c      	ldr	r2, [pc, #176]	; (8005c3c <prvAddNewTaskToReadyList+0xc4>)
 8005b8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b8e:	4b2c      	ldr	r3, [pc, #176]	; (8005c40 <prvAddNewTaskToReadyList+0xc8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d109      	bne.n	8005baa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b96:	4a2a      	ldr	r2, [pc, #168]	; (8005c40 <prvAddNewTaskToReadyList+0xc8>)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b9c:	4b27      	ldr	r3, [pc, #156]	; (8005c3c <prvAddNewTaskToReadyList+0xc4>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d110      	bne.n	8005bc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ba4:	f000 fc16 	bl	80063d4 <prvInitialiseTaskLists>
 8005ba8:	e00d      	b.n	8005bc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005baa:	4b26      	ldr	r3, [pc, #152]	; (8005c44 <prvAddNewTaskToReadyList+0xcc>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d109      	bne.n	8005bc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bb2:	4b23      	ldr	r3, [pc, #140]	; (8005c40 <prvAddNewTaskToReadyList+0xc8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d802      	bhi.n	8005bc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005bc0:	4a1f      	ldr	r2, [pc, #124]	; (8005c40 <prvAddNewTaskToReadyList+0xc8>)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005bc6:	4b20      	ldr	r3, [pc, #128]	; (8005c48 <prvAddNewTaskToReadyList+0xd0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <prvAddNewTaskToReadyList+0xd0>)
 8005bce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005bd0:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <prvAddNewTaskToReadyList+0xd0>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bdc:	4b1b      	ldr	r3, [pc, #108]	; (8005c4c <prvAddNewTaskToReadyList+0xd4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d903      	bls.n	8005bec <prvAddNewTaskToReadyList+0x74>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	4a18      	ldr	r2, [pc, #96]	; (8005c4c <prvAddNewTaskToReadyList+0xd4>)
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4a15      	ldr	r2, [pc, #84]	; (8005c50 <prvAddNewTaskToReadyList+0xd8>)
 8005bfa:	441a      	add	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4619      	mov	r1, r3
 8005c02:	4610      	mov	r0, r2
 8005c04:	f7fe feff 	bl	8004a06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c08:	f001 fb3c 	bl	8007284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c0c:	4b0d      	ldr	r3, [pc, #52]	; (8005c44 <prvAddNewTaskToReadyList+0xcc>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00e      	beq.n	8005c32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c14:	4b0a      	ldr	r3, [pc, #40]	; (8005c40 <prvAddNewTaskToReadyList+0xc8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d207      	bcs.n	8005c32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c22:	4b0c      	ldr	r3, [pc, #48]	; (8005c54 <prvAddNewTaskToReadyList+0xdc>)
 8005c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c32:	bf00      	nop
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20001488 	.word	0x20001488
 8005c40:	20000fb4 	.word	0x20000fb4
 8005c44:	20001494 	.word	0x20001494
 8005c48:	200014a4 	.word	0x200014a4
 8005c4c:	20001490 	.word	0x20001490
 8005c50:	20000fb8 	.word	0x20000fb8
 8005c54:	e000ed04 	.word	0xe000ed04

08005c58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d017      	beq.n	8005c9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c6a:	4b13      	ldr	r3, [pc, #76]	; (8005cb8 <vTaskDelay+0x60>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <vTaskDelay+0x30>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60bb      	str	r3, [r7, #8]
}
 8005c84:	bf00      	nop
 8005c86:	e7fe      	b.n	8005c86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c88:	f000 f880 	bl	8005d8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fdf8 	bl	8006884 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c94:	f000 f888 	bl	8005da8 <xTaskResumeAll>
 8005c98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d107      	bne.n	8005cb0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ca0:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <vTaskDelay+0x64>)
 8005ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cb0:	bf00      	nop
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	200014b0 	.word	0x200014b0
 8005cbc:	e000ed04 	.word	0xe000ed04

08005cc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	; 0x28
 8005cc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005cce:	463a      	mov	r2, r7
 8005cd0:	1d39      	adds	r1, r7, #4
 8005cd2:	f107 0308 	add.w	r3, r7, #8
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fe fe34 	bl	8004944 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	9202      	str	r2, [sp, #8]
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	2300      	movs	r3, #0
 8005cec:	460a      	mov	r2, r1
 8005cee:	4921      	ldr	r1, [pc, #132]	; (8005d74 <vTaskStartScheduler+0xb4>)
 8005cf0:	4821      	ldr	r0, [pc, #132]	; (8005d78 <vTaskStartScheduler+0xb8>)
 8005cf2:	f7ff fe0f 	bl	8005914 <xTaskCreateStatic>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4a20      	ldr	r2, [pc, #128]	; (8005d7c <vTaskStartScheduler+0xbc>)
 8005cfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005cfc:	4b1f      	ldr	r3, [pc, #124]	; (8005d7c <vTaskStartScheduler+0xbc>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d04:	2301      	movs	r3, #1
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	e001      	b.n	8005d0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d102      	bne.n	8005d1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d14:	f000 fe0a 	bl	800692c <xTimerCreateTimerTask>
 8005d18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d116      	bne.n	8005d4e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	613b      	str	r3, [r7, #16]
}
 8005d32:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d34:	4b12      	ldr	r3, [pc, #72]	; (8005d80 <vTaskStartScheduler+0xc0>)
 8005d36:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d3c:	4b11      	ldr	r3, [pc, #68]	; (8005d84 <vTaskStartScheduler+0xc4>)
 8005d3e:	2201      	movs	r2, #1
 8005d40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d42:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <vTaskStartScheduler+0xc8>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d48:	f001 f9ca 	bl	80070e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d4c:	e00e      	b.n	8005d6c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d10a      	bne.n	8005d6c <vTaskStartScheduler+0xac>
	__asm volatile
 8005d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	60fb      	str	r3, [r7, #12]
}
 8005d68:	bf00      	nop
 8005d6a:	e7fe      	b.n	8005d6a <vTaskStartScheduler+0xaa>
}
 8005d6c:	bf00      	nop
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	080078fc 	.word	0x080078fc
 8005d78:	080063a5 	.word	0x080063a5
 8005d7c:	200014ac 	.word	0x200014ac
 8005d80:	200014a8 	.word	0x200014a8
 8005d84:	20001494 	.word	0x20001494
 8005d88:	2000148c 	.word	0x2000148c

08005d8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d90:	4b04      	ldr	r3, [pc, #16]	; (8005da4 <vTaskSuspendAll+0x18>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3301      	adds	r3, #1
 8005d96:	4a03      	ldr	r2, [pc, #12]	; (8005da4 <vTaskSuspendAll+0x18>)
 8005d98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d9a:	bf00      	nop
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	200014b0 	.word	0x200014b0

08005da8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005db6:	4b42      	ldr	r3, [pc, #264]	; (8005ec0 <xTaskResumeAll+0x118>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10a      	bne.n	8005dd4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	603b      	str	r3, [r7, #0]
}
 8005dd0:	bf00      	nop
 8005dd2:	e7fe      	b.n	8005dd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005dd4:	f001 fa26 	bl	8007224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005dd8:	4b39      	ldr	r3, [pc, #228]	; (8005ec0 <xTaskResumeAll+0x118>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	4a38      	ldr	r2, [pc, #224]	; (8005ec0 <xTaskResumeAll+0x118>)
 8005de0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005de2:	4b37      	ldr	r3, [pc, #220]	; (8005ec0 <xTaskResumeAll+0x118>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d162      	bne.n	8005eb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005dea:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <xTaskResumeAll+0x11c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d05e      	beq.n	8005eb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005df2:	e02f      	b.n	8005e54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df4:	4b34      	ldr	r3, [pc, #208]	; (8005ec8 <xTaskResumeAll+0x120>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3318      	adds	r3, #24
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fe fe5d 	bl	8004ac0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fe fe58 	bl	8004ac0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e14:	4b2d      	ldr	r3, [pc, #180]	; (8005ecc <xTaskResumeAll+0x124>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d903      	bls.n	8005e24 <xTaskResumeAll+0x7c>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	4a2a      	ldr	r2, [pc, #168]	; (8005ecc <xTaskResumeAll+0x124>)
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4a27      	ldr	r2, [pc, #156]	; (8005ed0 <xTaskResumeAll+0x128>)
 8005e32:	441a      	add	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	f7fe fde3 	bl	8004a06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e44:	4b23      	ldr	r3, [pc, #140]	; (8005ed4 <xTaskResumeAll+0x12c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d302      	bcc.n	8005e54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005e4e:	4b22      	ldr	r3, [pc, #136]	; (8005ed8 <xTaskResumeAll+0x130>)
 8005e50:	2201      	movs	r2, #1
 8005e52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e54:	4b1c      	ldr	r3, [pc, #112]	; (8005ec8 <xTaskResumeAll+0x120>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1cb      	bne.n	8005df4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e62:	f000 fb55 	bl	8006510 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e66:	4b1d      	ldr	r3, [pc, #116]	; (8005edc <xTaskResumeAll+0x134>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d010      	beq.n	8005e94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e72:	f000 f847 	bl	8005f04 <xTaskIncrementTick>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005e7c:	4b16      	ldr	r3, [pc, #88]	; (8005ed8 <xTaskResumeAll+0x130>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f1      	bne.n	8005e72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005e8e:	4b13      	ldr	r3, [pc, #76]	; (8005edc <xTaskResumeAll+0x134>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e94:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <xTaskResumeAll+0x130>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d009      	beq.n	8005eb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ea0:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <xTaskResumeAll+0x138>)
 8005ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005eb0:	f001 f9e8 	bl	8007284 <vPortExitCritical>

	return xAlreadyYielded;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	200014b0 	.word	0x200014b0
 8005ec4:	20001488 	.word	0x20001488
 8005ec8:	20001448 	.word	0x20001448
 8005ecc:	20001490 	.word	0x20001490
 8005ed0:	20000fb8 	.word	0x20000fb8
 8005ed4:	20000fb4 	.word	0x20000fb4
 8005ed8:	2000149c 	.word	0x2000149c
 8005edc:	20001498 	.word	0x20001498
 8005ee0:	e000ed04 	.word	0xe000ed04

08005ee4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005eea:	4b05      	ldr	r3, [pc, #20]	; (8005f00 <xTaskGetTickCount+0x1c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ef0:	687b      	ldr	r3, [r7, #4]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	2000148c 	.word	0x2000148c

08005f04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f0e:	4b4f      	ldr	r3, [pc, #316]	; (800604c <xTaskIncrementTick+0x148>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f040 808f 	bne.w	8006036 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f18:	4b4d      	ldr	r3, [pc, #308]	; (8006050 <xTaskIncrementTick+0x14c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f20:	4a4b      	ldr	r2, [pc, #300]	; (8006050 <xTaskIncrementTick+0x14c>)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d120      	bne.n	8005f6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f2c:	4b49      	ldr	r3, [pc, #292]	; (8006054 <xTaskIncrementTick+0x150>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <xTaskIncrementTick+0x48>
	__asm volatile
 8005f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	603b      	str	r3, [r7, #0]
}
 8005f48:	bf00      	nop
 8005f4a:	e7fe      	b.n	8005f4a <xTaskIncrementTick+0x46>
 8005f4c:	4b41      	ldr	r3, [pc, #260]	; (8006054 <xTaskIncrementTick+0x150>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	4b41      	ldr	r3, [pc, #260]	; (8006058 <xTaskIncrementTick+0x154>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a3f      	ldr	r2, [pc, #252]	; (8006054 <xTaskIncrementTick+0x150>)
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	4a3f      	ldr	r2, [pc, #252]	; (8006058 <xTaskIncrementTick+0x154>)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	4b3e      	ldr	r3, [pc, #248]	; (800605c <xTaskIncrementTick+0x158>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3301      	adds	r3, #1
 8005f66:	4a3d      	ldr	r2, [pc, #244]	; (800605c <xTaskIncrementTick+0x158>)
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	f000 fad1 	bl	8006510 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f6e:	4b3c      	ldr	r3, [pc, #240]	; (8006060 <xTaskIncrementTick+0x15c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d349      	bcc.n	800600c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f78:	4b36      	ldr	r3, [pc, #216]	; (8006054 <xTaskIncrementTick+0x150>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d104      	bne.n	8005f8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f82:	4b37      	ldr	r3, [pc, #220]	; (8006060 <xTaskIncrementTick+0x15c>)
 8005f84:	f04f 32ff 	mov.w	r2, #4294967295
 8005f88:	601a      	str	r2, [r3, #0]
					break;
 8005f8a:	e03f      	b.n	800600c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f8c:	4b31      	ldr	r3, [pc, #196]	; (8006054 <xTaskIncrementTick+0x150>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d203      	bcs.n	8005fac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fa4:	4a2e      	ldr	r2, [pc, #184]	; (8006060 <xTaskIncrementTick+0x15c>)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005faa:	e02f      	b.n	800600c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fd85 	bl	8004ac0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d004      	beq.n	8005fc8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	3318      	adds	r3, #24
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe fd7c 	bl	8004ac0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fcc:	4b25      	ldr	r3, [pc, #148]	; (8006064 <xTaskIncrementTick+0x160>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d903      	bls.n	8005fdc <xTaskIncrementTick+0xd8>
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	4a22      	ldr	r2, [pc, #136]	; (8006064 <xTaskIncrementTick+0x160>)
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4a1f      	ldr	r2, [pc, #124]	; (8006068 <xTaskIncrementTick+0x164>)
 8005fea:	441a      	add	r2, r3
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	f7fe fd07 	bl	8004a06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffc:	4b1b      	ldr	r3, [pc, #108]	; (800606c <xTaskIncrementTick+0x168>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	429a      	cmp	r2, r3
 8006004:	d3b8      	bcc.n	8005f78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006006:	2301      	movs	r3, #1
 8006008:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800600a:	e7b5      	b.n	8005f78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800600c:	4b17      	ldr	r3, [pc, #92]	; (800606c <xTaskIncrementTick+0x168>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006012:	4915      	ldr	r1, [pc, #84]	; (8006068 <xTaskIncrementTick+0x164>)
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d901      	bls.n	8006028 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006024:	2301      	movs	r3, #1
 8006026:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006028:	4b11      	ldr	r3, [pc, #68]	; (8006070 <xTaskIncrementTick+0x16c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006030:	2301      	movs	r3, #1
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	e004      	b.n	8006040 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006036:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <xTaskIncrementTick+0x170>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3301      	adds	r3, #1
 800603c:	4a0d      	ldr	r2, [pc, #52]	; (8006074 <xTaskIncrementTick+0x170>)
 800603e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006040:	697b      	ldr	r3, [r7, #20]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	200014b0 	.word	0x200014b0
 8006050:	2000148c 	.word	0x2000148c
 8006054:	20001440 	.word	0x20001440
 8006058:	20001444 	.word	0x20001444
 800605c:	200014a0 	.word	0x200014a0
 8006060:	200014a8 	.word	0x200014a8
 8006064:	20001490 	.word	0x20001490
 8006068:	20000fb8 	.word	0x20000fb8
 800606c:	20000fb4 	.word	0x20000fb4
 8006070:	2000149c 	.word	0x2000149c
 8006074:	20001498 	.word	0x20001498

08006078 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800607e:	4b28      	ldr	r3, [pc, #160]	; (8006120 <vTaskSwitchContext+0xa8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006086:	4b27      	ldr	r3, [pc, #156]	; (8006124 <vTaskSwitchContext+0xac>)
 8006088:	2201      	movs	r2, #1
 800608a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800608c:	e041      	b.n	8006112 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800608e:	4b25      	ldr	r3, [pc, #148]	; (8006124 <vTaskSwitchContext+0xac>)
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006094:	4b24      	ldr	r3, [pc, #144]	; (8006128 <vTaskSwitchContext+0xb0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	e010      	b.n	80060be <vTaskSwitchContext+0x46>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	607b      	str	r3, [r7, #4]
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <vTaskSwitchContext+0x3e>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	491b      	ldr	r1, [pc, #108]	; (800612c <vTaskSwitchContext+0xb4>)
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0e4      	beq.n	800609c <vTaskSwitchContext+0x24>
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4613      	mov	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4a13      	ldr	r2, [pc, #76]	; (800612c <vTaskSwitchContext+0xb4>)
 80060de:	4413      	add	r3, r2
 80060e0:	60bb      	str	r3, [r7, #8]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	605a      	str	r2, [r3, #4]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	3308      	adds	r3, #8
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d104      	bne.n	8006102 <vTaskSwitchContext+0x8a>
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	605a      	str	r2, [r3, #4]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	4a09      	ldr	r2, [pc, #36]	; (8006130 <vTaskSwitchContext+0xb8>)
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	4a06      	ldr	r2, [pc, #24]	; (8006128 <vTaskSwitchContext+0xb0>)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6013      	str	r3, [r2, #0]
}
 8006112:	bf00      	nop
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	200014b0 	.word	0x200014b0
 8006124:	2000149c 	.word	0x2000149c
 8006128:	20001490 	.word	0x20001490
 800612c:	20000fb8 	.word	0x20000fb8
 8006130:	20000fb4 	.word	0x20000fb4

08006134 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	60fb      	str	r3, [r7, #12]
}
 8006156:	bf00      	nop
 8006158:	e7fe      	b.n	8006158 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800615a:	4b07      	ldr	r3, [pc, #28]	; (8006178 <vTaskPlaceOnEventList+0x44>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3318      	adds	r3, #24
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fe fc73 	bl	8004a4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006168:	2101      	movs	r1, #1
 800616a:	6838      	ldr	r0, [r7, #0]
 800616c:	f000 fb8a 	bl	8006884 <prvAddCurrentTaskToDelayedList>
}
 8006170:	bf00      	nop
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	20000fb4 	.word	0x20000fb4

0800617c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	617b      	str	r3, [r7, #20]
}
 80061a0:	bf00      	nop
 80061a2:	e7fe      	b.n	80061a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061a4:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3318      	adds	r3, #24
 80061aa:	4619      	mov	r1, r3
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f7fe fc2a 	bl	8004a06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80061b8:	f04f 33ff 	mov.w	r3, #4294967295
 80061bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	68b8      	ldr	r0, [r7, #8]
 80061c2:	f000 fb5f 	bl	8006884 <prvAddCurrentTaskToDelayedList>
	}
 80061c6:	bf00      	nop
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000fb4 	.word	0x20000fb4

080061d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10a      	bne.n	8006200 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	60fb      	str	r3, [r7, #12]
}
 80061fc:	bf00      	nop
 80061fe:	e7fe      	b.n	80061fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	3318      	adds	r3, #24
 8006204:	4618      	mov	r0, r3
 8006206:	f7fe fc5b 	bl	8004ac0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800620a:	4b1e      	ldr	r3, [pc, #120]	; (8006284 <xTaskRemoveFromEventList+0xb0>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d11d      	bne.n	800624e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	3304      	adds	r3, #4
 8006216:	4618      	mov	r0, r3
 8006218:	f7fe fc52 	bl	8004ac0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006220:	4b19      	ldr	r3, [pc, #100]	; (8006288 <xTaskRemoveFromEventList+0xb4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	429a      	cmp	r2, r3
 8006226:	d903      	bls.n	8006230 <xTaskRemoveFromEventList+0x5c>
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	4a16      	ldr	r2, [pc, #88]	; (8006288 <xTaskRemoveFromEventList+0xb4>)
 800622e:	6013      	str	r3, [r2, #0]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4a13      	ldr	r2, [pc, #76]	; (800628c <xTaskRemoveFromEventList+0xb8>)
 800623e:	441a      	add	r2, r3
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	3304      	adds	r3, #4
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f7fe fbdd 	bl	8004a06 <vListInsertEnd>
 800624c:	e005      	b.n	800625a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	3318      	adds	r3, #24
 8006252:	4619      	mov	r1, r3
 8006254:	480e      	ldr	r0, [pc, #56]	; (8006290 <xTaskRemoveFromEventList+0xbc>)
 8006256:	f7fe fbd6 	bl	8004a06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625e:	4b0d      	ldr	r3, [pc, #52]	; (8006294 <xTaskRemoveFromEventList+0xc0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	429a      	cmp	r2, r3
 8006266:	d905      	bls.n	8006274 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006268:	2301      	movs	r3, #1
 800626a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <xTaskRemoveFromEventList+0xc4>)
 800626e:	2201      	movs	r2, #1
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	e001      	b.n	8006278 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006278:	697b      	ldr	r3, [r7, #20]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	200014b0 	.word	0x200014b0
 8006288:	20001490 	.word	0x20001490
 800628c:	20000fb8 	.word	0x20000fb8
 8006290:	20001448 	.word	0x20001448
 8006294:	20000fb4 	.word	0x20000fb4
 8006298:	2000149c 	.word	0x2000149c

0800629c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062a4:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <vTaskInternalSetTimeOutState+0x24>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062ac:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <vTaskInternalSetTimeOutState+0x28>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	605a      	str	r2, [r3, #4]
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	200014a0 	.word	0x200014a0
 80062c4:	2000148c 	.word	0x2000148c

080062c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	613b      	str	r3, [r7, #16]
}
 80062ea:	bf00      	nop
 80062ec:	e7fe      	b.n	80062ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	60fb      	str	r3, [r7, #12]
}
 8006306:	bf00      	nop
 8006308:	e7fe      	b.n	8006308 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800630a:	f000 ff8b 	bl	8007224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800630e:	4b1d      	ldr	r3, [pc, #116]	; (8006384 <xTaskCheckForTimeOut+0xbc>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006326:	d102      	bne.n	800632e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006328:	2300      	movs	r3, #0
 800632a:	61fb      	str	r3, [r7, #28]
 800632c:	e023      	b.n	8006376 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b15      	ldr	r3, [pc, #84]	; (8006388 <xTaskCheckForTimeOut+0xc0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d007      	beq.n	800634a <xTaskCheckForTimeOut+0x82>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	429a      	cmp	r2, r3
 8006342:	d302      	bcc.n	800634a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006344:	2301      	movs	r3, #1
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	e015      	b.n	8006376 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	429a      	cmp	r2, r3
 8006352:	d20b      	bcs.n	800636c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	1ad2      	subs	r2, r2, r3
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff ff9b 	bl	800629c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006366:	2300      	movs	r3, #0
 8006368:	61fb      	str	r3, [r7, #28]
 800636a:	e004      	b.n	8006376 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006372:	2301      	movs	r3, #1
 8006374:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006376:	f000 ff85 	bl	8007284 <vPortExitCritical>

	return xReturn;
 800637a:	69fb      	ldr	r3, [r7, #28]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3720      	adds	r7, #32
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	2000148c 	.word	0x2000148c
 8006388:	200014a0 	.word	0x200014a0

0800638c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006390:	4b03      	ldr	r3, [pc, #12]	; (80063a0 <vTaskMissedYield+0x14>)
 8006392:	2201      	movs	r2, #1
 8006394:	601a      	str	r2, [r3, #0]
}
 8006396:	bf00      	nop
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	2000149c 	.word	0x2000149c

080063a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063ac:	f000 f852 	bl	8006454 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063b0:	4b06      	ldr	r3, [pc, #24]	; (80063cc <prvIdleTask+0x28>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d9f9      	bls.n	80063ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <prvIdleTask+0x2c>)
 80063ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80063c8:	e7f0      	b.n	80063ac <prvIdleTask+0x8>
 80063ca:	bf00      	nop
 80063cc:	20000fb8 	.word	0x20000fb8
 80063d0:	e000ed04 	.word	0xe000ed04

080063d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063da:	2300      	movs	r3, #0
 80063dc:	607b      	str	r3, [r7, #4]
 80063de:	e00c      	b.n	80063fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4a12      	ldr	r2, [pc, #72]	; (8006434 <prvInitialiseTaskLists+0x60>)
 80063ec:	4413      	add	r3, r2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe fadc 	bl	80049ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3301      	adds	r3, #1
 80063f8:	607b      	str	r3, [r7, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b37      	cmp	r3, #55	; 0x37
 80063fe:	d9ef      	bls.n	80063e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006400:	480d      	ldr	r0, [pc, #52]	; (8006438 <prvInitialiseTaskLists+0x64>)
 8006402:	f7fe fad3 	bl	80049ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006406:	480d      	ldr	r0, [pc, #52]	; (800643c <prvInitialiseTaskLists+0x68>)
 8006408:	f7fe fad0 	bl	80049ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800640c:	480c      	ldr	r0, [pc, #48]	; (8006440 <prvInitialiseTaskLists+0x6c>)
 800640e:	f7fe facd 	bl	80049ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006412:	480c      	ldr	r0, [pc, #48]	; (8006444 <prvInitialiseTaskLists+0x70>)
 8006414:	f7fe faca 	bl	80049ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006418:	480b      	ldr	r0, [pc, #44]	; (8006448 <prvInitialiseTaskLists+0x74>)
 800641a:	f7fe fac7 	bl	80049ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800641e:	4b0b      	ldr	r3, [pc, #44]	; (800644c <prvInitialiseTaskLists+0x78>)
 8006420:	4a05      	ldr	r2, [pc, #20]	; (8006438 <prvInitialiseTaskLists+0x64>)
 8006422:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006424:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <prvInitialiseTaskLists+0x7c>)
 8006426:	4a05      	ldr	r2, [pc, #20]	; (800643c <prvInitialiseTaskLists+0x68>)
 8006428:	601a      	str	r2, [r3, #0]
}
 800642a:	bf00      	nop
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000fb8 	.word	0x20000fb8
 8006438:	20001418 	.word	0x20001418
 800643c:	2000142c 	.word	0x2000142c
 8006440:	20001448 	.word	0x20001448
 8006444:	2000145c 	.word	0x2000145c
 8006448:	20001474 	.word	0x20001474
 800644c:	20001440 	.word	0x20001440
 8006450:	20001444 	.word	0x20001444

08006454 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800645a:	e019      	b.n	8006490 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800645c:	f000 fee2 	bl	8007224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006460:	4b10      	ldr	r3, [pc, #64]	; (80064a4 <prvCheckTasksWaitingTermination+0x50>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3304      	adds	r3, #4
 800646c:	4618      	mov	r0, r3
 800646e:	f7fe fb27 	bl	8004ac0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006472:	4b0d      	ldr	r3, [pc, #52]	; (80064a8 <prvCheckTasksWaitingTermination+0x54>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3b01      	subs	r3, #1
 8006478:	4a0b      	ldr	r2, [pc, #44]	; (80064a8 <prvCheckTasksWaitingTermination+0x54>)
 800647a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800647c:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <prvCheckTasksWaitingTermination+0x58>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3b01      	subs	r3, #1
 8006482:	4a0a      	ldr	r2, [pc, #40]	; (80064ac <prvCheckTasksWaitingTermination+0x58>)
 8006484:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006486:	f000 fefd 	bl	8007284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f810 	bl	80064b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006490:	4b06      	ldr	r3, [pc, #24]	; (80064ac <prvCheckTasksWaitingTermination+0x58>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e1      	bne.n	800645c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	2000145c 	.word	0x2000145c
 80064a8:	20001488 	.word	0x20001488
 80064ac:	20001470 	.word	0x20001470

080064b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d108      	bne.n	80064d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 f89a 	bl	8007600 <vPortFree>
				vPortFree( pxTCB );
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 f897 	bl	8007600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064d2:	e018      	b.n	8006506 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d103      	bne.n	80064e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 f88e 	bl	8007600 <vPortFree>
	}
 80064e4:	e00f      	b.n	8006506 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d00a      	beq.n	8006506 <prvDeleteTCB+0x56>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	60fb      	str	r3, [r7, #12]
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <prvDeleteTCB+0x54>
	}
 8006506:	bf00      	nop
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006516:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <prvResetNextTaskUnblockTime+0x38>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006520:	4b0a      	ldr	r3, [pc, #40]	; (800654c <prvResetNextTaskUnblockTime+0x3c>)
 8006522:	f04f 32ff 	mov.w	r2, #4294967295
 8006526:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006528:	e008      	b.n	800653c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800652a:	4b07      	ldr	r3, [pc, #28]	; (8006548 <prvResetNextTaskUnblockTime+0x38>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	4a04      	ldr	r2, [pc, #16]	; (800654c <prvResetNextTaskUnblockTime+0x3c>)
 800653a:	6013      	str	r3, [r2, #0]
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	20001440 	.word	0x20001440
 800654c:	200014a8 	.word	0x200014a8

08006550 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006556:	4b05      	ldr	r3, [pc, #20]	; (800656c <xTaskGetCurrentTaskHandle+0x1c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800655c:	687b      	ldr	r3, [r7, #4]
	}
 800655e:	4618      	mov	r0, r3
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20000fb4 	.word	0x20000fb4

08006570 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006576:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <xTaskGetSchedulerState+0x34>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d102      	bne.n	8006584 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800657e:	2301      	movs	r3, #1
 8006580:	607b      	str	r3, [r7, #4]
 8006582:	e008      	b.n	8006596 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006584:	4b08      	ldr	r3, [pc, #32]	; (80065a8 <xTaskGetSchedulerState+0x38>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d102      	bne.n	8006592 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800658c:	2302      	movs	r3, #2
 800658e:	607b      	str	r3, [r7, #4]
 8006590:	e001      	b.n	8006596 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006592:	2300      	movs	r3, #0
 8006594:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006596:	687b      	ldr	r3, [r7, #4]
	}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	20001494 	.word	0x20001494
 80065a8:	200014b0 	.word	0x200014b0

080065ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d051      	beq.n	8006666 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c6:	4b2a      	ldr	r3, [pc, #168]	; (8006670 <xTaskPriorityInherit+0xc4>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d241      	bcs.n	8006654 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	db06      	blt.n	80065e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065d8:	4b25      	ldr	r3, [pc, #148]	; (8006670 <xTaskPriorityInherit+0xc4>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	6959      	ldr	r1, [r3, #20]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4a1f      	ldr	r2, [pc, #124]	; (8006674 <xTaskPriorityInherit+0xc8>)
 80065f8:	4413      	add	r3, r2
 80065fa:	4299      	cmp	r1, r3
 80065fc:	d122      	bne.n	8006644 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	3304      	adds	r3, #4
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fa5c 	bl	8004ac0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006608:	4b19      	ldr	r3, [pc, #100]	; (8006670 <xTaskPriorityInherit+0xc4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006616:	4b18      	ldr	r3, [pc, #96]	; (8006678 <xTaskPriorityInherit+0xcc>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	429a      	cmp	r2, r3
 800661c:	d903      	bls.n	8006626 <xTaskPriorityInherit+0x7a>
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	4a15      	ldr	r2, [pc, #84]	; (8006678 <xTaskPriorityInherit+0xcc>)
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4a10      	ldr	r2, [pc, #64]	; (8006674 <xTaskPriorityInherit+0xc8>)
 8006634:	441a      	add	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	3304      	adds	r3, #4
 800663a:	4619      	mov	r1, r3
 800663c:	4610      	mov	r0, r2
 800663e:	f7fe f9e2 	bl	8004a06 <vListInsertEnd>
 8006642:	e004      	b.n	800664e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006644:	4b0a      	ldr	r3, [pc, #40]	; (8006670 <xTaskPriorityInherit+0xc4>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800664e:	2301      	movs	r3, #1
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	e008      	b.n	8006666 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006658:	4b05      	ldr	r3, [pc, #20]	; (8006670 <xTaskPriorityInherit+0xc4>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	429a      	cmp	r2, r3
 8006660:	d201      	bcs.n	8006666 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006662:	2301      	movs	r3, #1
 8006664:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006666:	68fb      	ldr	r3, [r7, #12]
	}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20000fb4 	.word	0x20000fb4
 8006674:	20000fb8 	.word	0x20000fb8
 8006678:	20001490 	.word	0x20001490

0800667c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006688:	2300      	movs	r3, #0
 800668a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d056      	beq.n	8006740 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006692:	4b2e      	ldr	r3, [pc, #184]	; (800674c <xTaskPriorityDisinherit+0xd0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	429a      	cmp	r2, r3
 800669a:	d00a      	beq.n	80066b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	60fb      	str	r3, [r7, #12]
}
 80066ae:	bf00      	nop
 80066b0:	e7fe      	b.n	80066b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10a      	bne.n	80066d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	60bb      	str	r3, [r7, #8]
}
 80066cc:	bf00      	nop
 80066ce:	e7fe      	b.n	80066ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d4:	1e5a      	subs	r2, r3, #1
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d02c      	beq.n	8006740 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d128      	bne.n	8006740 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	3304      	adds	r3, #4
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe f9e4 	bl	8004ac0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <xTaskPriorityDisinherit+0xd4>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d903      	bls.n	8006720 <xTaskPriorityDisinherit+0xa4>
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671c:	4a0c      	ldr	r2, [pc, #48]	; (8006750 <xTaskPriorityDisinherit+0xd4>)
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006724:	4613      	mov	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4a09      	ldr	r2, [pc, #36]	; (8006754 <xTaskPriorityDisinherit+0xd8>)
 800672e:	441a      	add	r2, r3
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	3304      	adds	r3, #4
 8006734:	4619      	mov	r1, r3
 8006736:	4610      	mov	r0, r2
 8006738:	f7fe f965 	bl	8004a06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800673c:	2301      	movs	r3, #1
 800673e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006740:	697b      	ldr	r3, [r7, #20]
	}
 8006742:	4618      	mov	r0, r3
 8006744:	3718      	adds	r7, #24
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20000fb4 	.word	0x20000fb4
 8006750:	20001490 	.word	0x20001490
 8006754:	20000fb8 	.word	0x20000fb8

08006758 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006766:	2301      	movs	r3, #1
 8006768:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d06a      	beq.n	8006846 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10a      	bne.n	800678e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	60fb      	str	r3, [r7, #12]
}
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d902      	bls.n	800679e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	e002      	b.n	80067a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	69fa      	ldr	r2, [r7, #28]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d04b      	beq.n	8006846 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d146      	bne.n	8006846 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80067b8:	4b25      	ldr	r3, [pc, #148]	; (8006850 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d10a      	bne.n	80067d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	60bb      	str	r3, [r7, #8]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	69fa      	ldr	r2, [r7, #28]
 80067e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	db04      	blt.n	80067f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	6959      	ldr	r1, [r3, #20]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4613      	mov	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4a13      	ldr	r2, [pc, #76]	; (8006854 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006806:	4413      	add	r3, r2
 8006808:	4299      	cmp	r1, r3
 800680a:	d11c      	bne.n	8006846 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	3304      	adds	r3, #4
 8006810:	4618      	mov	r0, r3
 8006812:	f7fe f955 	bl	8004ac0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681a:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d903      	bls.n	800682a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006826:	4a0c      	ldr	r2, [pc, #48]	; (8006858 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4a07      	ldr	r2, [pc, #28]	; (8006854 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006838:	441a      	add	r2, r3
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	3304      	adds	r3, #4
 800683e:	4619      	mov	r1, r3
 8006840:	4610      	mov	r0, r2
 8006842:	f7fe f8e0 	bl	8004a06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006846:	bf00      	nop
 8006848:	3720      	adds	r7, #32
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20000fb4 	.word	0x20000fb4
 8006854:	20000fb8 	.word	0x20000fb8
 8006858:	20001490 	.word	0x20001490

0800685c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006860:	4b07      	ldr	r3, [pc, #28]	; (8006880 <pvTaskIncrementMutexHeldCount+0x24>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006868:	4b05      	ldr	r3, [pc, #20]	; (8006880 <pvTaskIncrementMutexHeldCount+0x24>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800686e:	3201      	adds	r2, #1
 8006870:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006872:	4b03      	ldr	r3, [pc, #12]	; (8006880 <pvTaskIncrementMutexHeldCount+0x24>)
 8006874:	681b      	ldr	r3, [r3, #0]
	}
 8006876:	4618      	mov	r0, r3
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	20000fb4 	.word	0x20000fb4

08006884 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800688e:	4b21      	ldr	r3, [pc, #132]	; (8006914 <prvAddCurrentTaskToDelayedList+0x90>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006894:	4b20      	ldr	r3, [pc, #128]	; (8006918 <prvAddCurrentTaskToDelayedList+0x94>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3304      	adds	r3, #4
 800689a:	4618      	mov	r0, r3
 800689c:	f7fe f910 	bl	8004ac0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a6:	d10a      	bne.n	80068be <prvAddCurrentTaskToDelayedList+0x3a>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d007      	beq.n	80068be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068ae:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <prvAddCurrentTaskToDelayedList+0x94>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3304      	adds	r3, #4
 80068b4:	4619      	mov	r1, r3
 80068b6:	4819      	ldr	r0, [pc, #100]	; (800691c <prvAddCurrentTaskToDelayedList+0x98>)
 80068b8:	f7fe f8a5 	bl	8004a06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80068bc:	e026      	b.n	800690c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4413      	add	r3, r2
 80068c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80068c6:	4b14      	ldr	r3, [pc, #80]	; (8006918 <prvAddCurrentTaskToDelayedList+0x94>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d209      	bcs.n	80068ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068d6:	4b12      	ldr	r3, [pc, #72]	; (8006920 <prvAddCurrentTaskToDelayedList+0x9c>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4b0f      	ldr	r3, [pc, #60]	; (8006918 <prvAddCurrentTaskToDelayedList+0x94>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3304      	adds	r3, #4
 80068e0:	4619      	mov	r1, r3
 80068e2:	4610      	mov	r0, r2
 80068e4:	f7fe f8b3 	bl	8004a4e <vListInsert>
}
 80068e8:	e010      	b.n	800690c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068ea:	4b0e      	ldr	r3, [pc, #56]	; (8006924 <prvAddCurrentTaskToDelayedList+0xa0>)
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	4b0a      	ldr	r3, [pc, #40]	; (8006918 <prvAddCurrentTaskToDelayedList+0x94>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3304      	adds	r3, #4
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f7fe f8a9 	bl	8004a4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068fc:	4b0a      	ldr	r3, [pc, #40]	; (8006928 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	429a      	cmp	r2, r3
 8006904:	d202      	bcs.n	800690c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006906:	4a08      	ldr	r2, [pc, #32]	; (8006928 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	6013      	str	r3, [r2, #0]
}
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	2000148c 	.word	0x2000148c
 8006918:	20000fb4 	.word	0x20000fb4
 800691c:	20001474 	.word	0x20001474
 8006920:	20001444 	.word	0x20001444
 8006924:	20001440 	.word	0x20001440
 8006928:	200014a8 	.word	0x200014a8

0800692c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08a      	sub	sp, #40	; 0x28
 8006930:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006932:	2300      	movs	r3, #0
 8006934:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006936:	f000 fb07 	bl	8006f48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800693a:	4b1c      	ldr	r3, [pc, #112]	; (80069ac <xTimerCreateTimerTask+0x80>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d021      	beq.n	8006986 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006946:	2300      	movs	r3, #0
 8006948:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800694a:	1d3a      	adds	r2, r7, #4
 800694c:	f107 0108 	add.w	r1, r7, #8
 8006950:	f107 030c 	add.w	r3, r7, #12
 8006954:	4618      	mov	r0, r3
 8006956:	f7fe f80f 	bl	8004978 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800695a:	6879      	ldr	r1, [r7, #4]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	9202      	str	r2, [sp, #8]
 8006962:	9301      	str	r3, [sp, #4]
 8006964:	2302      	movs	r3, #2
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	2300      	movs	r3, #0
 800696a:	460a      	mov	r2, r1
 800696c:	4910      	ldr	r1, [pc, #64]	; (80069b0 <xTimerCreateTimerTask+0x84>)
 800696e:	4811      	ldr	r0, [pc, #68]	; (80069b4 <xTimerCreateTimerTask+0x88>)
 8006970:	f7fe ffd0 	bl	8005914 <xTaskCreateStatic>
 8006974:	4603      	mov	r3, r0
 8006976:	4a10      	ldr	r2, [pc, #64]	; (80069b8 <xTimerCreateTimerTask+0x8c>)
 8006978:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800697a:	4b0f      	ldr	r3, [pc, #60]	; (80069b8 <xTimerCreateTimerTask+0x8c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006982:	2301      	movs	r3, #1
 8006984:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10a      	bne.n	80069a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	613b      	str	r3, [r7, #16]
}
 800699e:	bf00      	nop
 80069a0:	e7fe      	b.n	80069a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80069a2:	697b      	ldr	r3, [r7, #20]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	200014e4 	.word	0x200014e4
 80069b0:	08007904 	.word	0x08007904
 80069b4:	08006af1 	.word	0x08006af1
 80069b8:	200014e8 	.word	0x200014e8

080069bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08a      	sub	sp, #40	; 0x28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80069ca:	2300      	movs	r3, #0
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	623b      	str	r3, [r7, #32]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069ea:	4b1a      	ldr	r3, [pc, #104]	; (8006a54 <xTimerGenericCommand+0x98>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d02a      	beq.n	8006a48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b05      	cmp	r3, #5
 8006a02:	dc18      	bgt.n	8006a36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a04:	f7ff fdb4 	bl	8006570 <xTaskGetSchedulerState>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d109      	bne.n	8006a22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a0e:	4b11      	ldr	r3, [pc, #68]	; (8006a54 <xTimerGenericCommand+0x98>)
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	f107 0110 	add.w	r1, r7, #16
 8006a16:	2300      	movs	r3, #0
 8006a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a1a:	f7fe fa6f 	bl	8004efc <xQueueGenericSend>
 8006a1e:	6278      	str	r0, [r7, #36]	; 0x24
 8006a20:	e012      	b.n	8006a48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a22:	4b0c      	ldr	r3, [pc, #48]	; (8006a54 <xTimerGenericCommand+0x98>)
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	f107 0110 	add.w	r1, r7, #16
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f7fe fa65 	bl	8004efc <xQueueGenericSend>
 8006a32:	6278      	str	r0, [r7, #36]	; 0x24
 8006a34:	e008      	b.n	8006a48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a36:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <xTimerGenericCommand+0x98>)
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	f107 0110 	add.w	r1, r7, #16
 8006a3e:	2300      	movs	r3, #0
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	f7fe fb59 	bl	80050f8 <xQueueGenericSendFromISR>
 8006a46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3728      	adds	r7, #40	; 0x28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	200014e4 	.word	0x200014e4

08006a58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a62:	4b22      	ldr	r3, [pc, #136]	; (8006aec <prvProcessExpiredTimer+0x94>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	3304      	adds	r3, #4
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe f825 	bl	8004ac0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d022      	beq.n	8006aca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	699a      	ldr	r2, [r3, #24]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	18d1      	adds	r1, r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	6978      	ldr	r0, [r7, #20]
 8006a92:	f000 f8d1 	bl	8006c38 <prvInsertTimerInActiveList>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01f      	beq.n	8006adc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	6978      	ldr	r0, [r7, #20]
 8006aa8:	f7ff ff88 	bl	80069bc <xTimerGenericCommand>
 8006aac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d113      	bne.n	8006adc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	60fb      	str	r3, [r7, #12]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ad0:	f023 0301 	bic.w	r3, r3, #1
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	6978      	ldr	r0, [r7, #20]
 8006ae2:	4798      	blx	r3
}
 8006ae4:	bf00      	nop
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	200014dc 	.word	0x200014dc

08006af0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006af8:	f107 0308 	add.w	r3, r7, #8
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 f857 	bl	8006bb0 <prvGetNextExpireTime>
 8006b02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	4619      	mov	r1, r3
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f803 	bl	8006b14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006b0e:	f000 f8d5 	bl	8006cbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b12:	e7f1      	b.n	8006af8 <prvTimerTask+0x8>

08006b14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006b1e:	f7ff f935 	bl	8005d8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b22:	f107 0308 	add.w	r3, r7, #8
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 f866 	bl	8006bf8 <prvSampleTimeNow>
 8006b2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d130      	bne.n	8006b96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10a      	bne.n	8006b50 <prvProcessTimerOrBlockTask+0x3c>
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d806      	bhi.n	8006b50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b42:	f7ff f931 	bl	8005da8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b46:	68f9      	ldr	r1, [r7, #12]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff ff85 	bl	8006a58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b4e:	e024      	b.n	8006b9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d008      	beq.n	8006b68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b56:	4b13      	ldr	r3, [pc, #76]	; (8006ba4 <prvProcessTimerOrBlockTask+0x90>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <prvProcessTimerOrBlockTask+0x50>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <prvProcessTimerOrBlockTask+0x52>
 8006b64:	2300      	movs	r3, #0
 8006b66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b68:	4b0f      	ldr	r3, [pc, #60]	; (8006ba8 <prvProcessTimerOrBlockTask+0x94>)
 8006b6a:	6818      	ldr	r0, [r3, #0]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	4619      	mov	r1, r3
 8006b76:	f7fe fe99 	bl	80058ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b7a:	f7ff f915 	bl	8005da8 <xTaskResumeAll>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b84:	4b09      	ldr	r3, [pc, #36]	; (8006bac <prvProcessTimerOrBlockTask+0x98>)
 8006b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	f3bf 8f6f 	isb	sy
}
 8006b94:	e001      	b.n	8006b9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b96:	f7ff f907 	bl	8005da8 <xTaskResumeAll>
}
 8006b9a:	bf00      	nop
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	200014e0 	.word	0x200014e0
 8006ba8:	200014e4 	.word	0x200014e4
 8006bac:	e000ed04 	.word	0xe000ed04

08006bb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006bb8:	4b0e      	ldr	r3, [pc, #56]	; (8006bf4 <prvGetNextExpireTime+0x44>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <prvGetNextExpireTime+0x16>
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	e000      	b.n	8006bc8 <prvGetNextExpireTime+0x18>
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d105      	bne.n	8006be0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bd4:	4b07      	ldr	r3, [pc, #28]	; (8006bf4 <prvGetNextExpireTime+0x44>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	e001      	b.n	8006be4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006be4:	68fb      	ldr	r3, [r7, #12]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	200014dc 	.word	0x200014dc

08006bf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c00:	f7ff f970 	bl	8005ee4 <xTaskGetTickCount>
 8006c04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c06:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <prvSampleTimeNow+0x3c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d205      	bcs.n	8006c1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006c10:	f000 f936 	bl	8006e80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	e002      	b.n	8006c22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006c22:	4a04      	ldr	r2, [pc, #16]	; (8006c34 <prvSampleTimeNow+0x3c>)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006c28:	68fb      	ldr	r3, [r7, #12]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	200014ec 	.word	0x200014ec

08006c38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d812      	bhi.n	8006c84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	1ad2      	subs	r2, r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d302      	bcc.n	8006c72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	e01b      	b.n	8006caa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c72:	4b10      	ldr	r3, [pc, #64]	; (8006cb4 <prvInsertTimerInActiveList+0x7c>)
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	f7fd fee6 	bl	8004a4e <vListInsert>
 8006c82:	e012      	b.n	8006caa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d206      	bcs.n	8006c9a <prvInsertTimerInActiveList+0x62>
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d302      	bcc.n	8006c9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c94:	2301      	movs	r3, #1
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	e007      	b.n	8006caa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c9a:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <prvInsertTimerInActiveList+0x80>)
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	f7fd fed2 	bl	8004a4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006caa:	697b      	ldr	r3, [r7, #20]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	200014e0 	.word	0x200014e0
 8006cb8:	200014dc 	.word	0x200014dc

08006cbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08e      	sub	sp, #56	; 0x38
 8006cc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cc2:	e0ca      	b.n	8006e5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	da18      	bge.n	8006cfc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006cca:	1d3b      	adds	r3, r7, #4
 8006ccc:	3304      	adds	r3, #4
 8006cce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10a      	bne.n	8006cec <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	61fb      	str	r3, [r7, #28]
}
 8006ce8:	bf00      	nop
 8006cea:	e7fe      	b.n	8006cea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf2:	6850      	ldr	r0, [r2, #4]
 8006cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf6:	6892      	ldr	r2, [r2, #8]
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f2c0 80ab 	blt.w	8006e5a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d004      	beq.n	8006d1a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	3304      	adds	r3, #4
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fd fed3 	bl	8004ac0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d1a:	463b      	mov	r3, r7
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff ff6b 	bl	8006bf8 <prvSampleTimeNow>
 8006d22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b09      	cmp	r3, #9
 8006d28:	f200 8096 	bhi.w	8006e58 <prvProcessReceivedCommands+0x19c>
 8006d2c:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <prvProcessReceivedCommands+0x78>)
 8006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d32:	bf00      	nop
 8006d34:	08006d5d 	.word	0x08006d5d
 8006d38:	08006d5d 	.word	0x08006d5d
 8006d3c:	08006d5d 	.word	0x08006d5d
 8006d40:	08006dd1 	.word	0x08006dd1
 8006d44:	08006de5 	.word	0x08006de5
 8006d48:	08006e2f 	.word	0x08006e2f
 8006d4c:	08006d5d 	.word	0x08006d5d
 8006d50:	08006d5d 	.word	0x08006d5d
 8006d54:	08006dd1 	.word	0x08006dd1
 8006d58:	08006de5 	.word	0x08006de5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d62:	f043 0301 	orr.w	r3, r3, #1
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	18d1      	adds	r1, r2, r3
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d7c:	f7ff ff5c 	bl	8006c38 <prvInsertTimerInActiveList>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d069      	beq.n	8006e5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d05e      	beq.n	8006e5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	441a      	add	r2, r3
 8006da4:	2300      	movs	r3, #0
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	2300      	movs	r3, #0
 8006daa:	2100      	movs	r1, #0
 8006dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dae:	f7ff fe05 	bl	80069bc <xTimerGenericCommand>
 8006db2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d14f      	bne.n	8006e5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	61bb      	str	r3, [r7, #24]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dd6:	f023 0301 	bic.w	r3, r3, #1
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006de2:	e03a      	b.n	8006e5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dea:	f043 0301 	orr.w	r3, r3, #1
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10a      	bne.n	8006e1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	617b      	str	r3, [r7, #20]
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	699a      	ldr	r2, [r3, #24]
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	18d1      	adds	r1, r2, r3
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e28:	f7ff ff06 	bl	8006c38 <prvInsertTimerInActiveList>
					break;
 8006e2c:	e015      	b.n	8006e5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d103      	bne.n	8006e44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e3e:	f000 fbdf 	bl	8007600 <vPortFree>
 8006e42:	e00a      	b.n	8006e5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e4a:	f023 0301 	bic.w	r3, r3, #1
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e56:	e000      	b.n	8006e5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006e58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e5a:	4b08      	ldr	r3, [pc, #32]	; (8006e7c <prvProcessReceivedCommands+0x1c0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	1d39      	adds	r1, r7, #4
 8006e60:	2200      	movs	r2, #0
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe f9e4 	bl	8005230 <xQueueReceive>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f47f af2a 	bne.w	8006cc4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006e70:	bf00      	nop
 8006e72:	bf00      	nop
 8006e74:	3730      	adds	r7, #48	; 0x30
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	200014e4 	.word	0x200014e4

08006e80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e86:	e048      	b.n	8006f1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e88:	4b2d      	ldr	r3, [pc, #180]	; (8006f40 <prvSwitchTimerLists+0xc0>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e92:	4b2b      	ldr	r3, [pc, #172]	; (8006f40 <prvSwitchTimerLists+0xc0>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fd fe0d 	bl	8004ac0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d02e      	beq.n	8006f1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d90e      	bls.n	8006eec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006eda:	4b19      	ldr	r3, [pc, #100]	; (8006f40 <prvSwitchTimerLists+0xc0>)
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	f7fd fdb2 	bl	8004a4e <vListInsert>
 8006eea:	e016      	b.n	8006f1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eec:	2300      	movs	r3, #0
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f7ff fd60 	bl	80069bc <xTimerGenericCommand>
 8006efc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	603b      	str	r3, [r7, #0]
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <prvSwitchTimerLists+0xc0>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1b1      	bne.n	8006e88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f24:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <prvSwitchTimerLists+0xc0>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f2a:	4b06      	ldr	r3, [pc, #24]	; (8006f44 <prvSwitchTimerLists+0xc4>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a04      	ldr	r2, [pc, #16]	; (8006f40 <prvSwitchTimerLists+0xc0>)
 8006f30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f32:	4a04      	ldr	r2, [pc, #16]	; (8006f44 <prvSwitchTimerLists+0xc4>)
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	6013      	str	r3, [r2, #0]
}
 8006f38:	bf00      	nop
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	200014dc 	.word	0x200014dc
 8006f44:	200014e0 	.word	0x200014e0

08006f48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f4e:	f000 f969 	bl	8007224 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f52:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <prvCheckForValidListAndQueue+0x60>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d120      	bne.n	8006f9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f5a:	4814      	ldr	r0, [pc, #80]	; (8006fac <prvCheckForValidListAndQueue+0x64>)
 8006f5c:	f7fd fd26 	bl	80049ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f60:	4813      	ldr	r0, [pc, #76]	; (8006fb0 <prvCheckForValidListAndQueue+0x68>)
 8006f62:	f7fd fd23 	bl	80049ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f66:	4b13      	ldr	r3, [pc, #76]	; (8006fb4 <prvCheckForValidListAndQueue+0x6c>)
 8006f68:	4a10      	ldr	r2, [pc, #64]	; (8006fac <prvCheckForValidListAndQueue+0x64>)
 8006f6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f6c:	4b12      	ldr	r3, [pc, #72]	; (8006fb8 <prvCheckForValidListAndQueue+0x70>)
 8006f6e:	4a10      	ldr	r2, [pc, #64]	; (8006fb0 <prvCheckForValidListAndQueue+0x68>)
 8006f70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f72:	2300      	movs	r3, #0
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	4b11      	ldr	r3, [pc, #68]	; (8006fbc <prvCheckForValidListAndQueue+0x74>)
 8006f78:	4a11      	ldr	r2, [pc, #68]	; (8006fc0 <prvCheckForValidListAndQueue+0x78>)
 8006f7a:	2110      	movs	r1, #16
 8006f7c:	200a      	movs	r0, #10
 8006f7e:	f7fd fe31 	bl	8004be4 <xQueueGenericCreateStatic>
 8006f82:	4603      	mov	r3, r0
 8006f84:	4a08      	ldr	r2, [pc, #32]	; (8006fa8 <prvCheckForValidListAndQueue+0x60>)
 8006f86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f88:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <prvCheckForValidListAndQueue+0x60>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d005      	beq.n	8006f9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <prvCheckForValidListAndQueue+0x60>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	490b      	ldr	r1, [pc, #44]	; (8006fc4 <prvCheckForValidListAndQueue+0x7c>)
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe fc5e 	bl	8005858 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f9c:	f000 f972 	bl	8007284 <vPortExitCritical>
}
 8006fa0:	bf00      	nop
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	200014e4 	.word	0x200014e4
 8006fac:	200014b4 	.word	0x200014b4
 8006fb0:	200014c8 	.word	0x200014c8
 8006fb4:	200014dc 	.word	0x200014dc
 8006fb8:	200014e0 	.word	0x200014e0
 8006fbc:	20001590 	.word	0x20001590
 8006fc0:	200014f0 	.word	0x200014f0
 8006fc4:	0800790c 	.word	0x0800790c

08006fc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3b04      	subs	r3, #4
 8006fd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3b04      	subs	r3, #4
 8006fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f023 0201 	bic.w	r2, r3, #1
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3b04      	subs	r3, #4
 8006ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ff8:	4a0c      	ldr	r2, [pc, #48]	; (800702c <pxPortInitialiseStack+0x64>)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3b14      	subs	r3, #20
 8007002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3b04      	subs	r3, #4
 800700e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f06f 0202 	mvn.w	r2, #2
 8007016:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3b20      	subs	r3, #32
 800701c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800701e:	68fb      	ldr	r3, [r7, #12]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	08007031 	.word	0x08007031

08007030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007036:	2300      	movs	r3, #0
 8007038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800703a:	4b12      	ldr	r3, [pc, #72]	; (8007084 <prvTaskExitError+0x54>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007042:	d00a      	beq.n	800705a <prvTaskExitError+0x2a>
	__asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	60fb      	str	r3, [r7, #12]
}
 8007056:	bf00      	nop
 8007058:	e7fe      	b.n	8007058 <prvTaskExitError+0x28>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	60bb      	str	r3, [r7, #8]
}
 800706c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800706e:	bf00      	nop
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0fc      	beq.n	8007070 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007076:	bf00      	nop
 8007078:	bf00      	nop
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	2000000c 	.word	0x2000000c
	...

08007090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007090:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <pxCurrentTCBConst2>)
 8007092:	6819      	ldr	r1, [r3, #0]
 8007094:	6808      	ldr	r0, [r1, #0]
 8007096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709a:	f380 8809 	msr	PSP, r0
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f04f 0000 	mov.w	r0, #0
 80070a6:	f380 8811 	msr	BASEPRI, r0
 80070aa:	4770      	bx	lr
 80070ac:	f3af 8000 	nop.w

080070b0 <pxCurrentTCBConst2>:
 80070b0:	20000fb4 	.word	0x20000fb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop

080070b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070b8:	4808      	ldr	r0, [pc, #32]	; (80070dc <prvPortStartFirstTask+0x24>)
 80070ba:	6800      	ldr	r0, [r0, #0]
 80070bc:	6800      	ldr	r0, [r0, #0]
 80070be:	f380 8808 	msr	MSP, r0
 80070c2:	f04f 0000 	mov.w	r0, #0
 80070c6:	f380 8814 	msr	CONTROL, r0
 80070ca:	b662      	cpsie	i
 80070cc:	b661      	cpsie	f
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	df00      	svc	0
 80070d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070da:	bf00      	nop
 80070dc:	e000ed08 	.word	0xe000ed08

080070e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070e6:	4b46      	ldr	r3, [pc, #280]	; (8007200 <xPortStartScheduler+0x120>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a46      	ldr	r2, [pc, #280]	; (8007204 <xPortStartScheduler+0x124>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d10a      	bne.n	8007106 <xPortStartScheduler+0x26>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	613b      	str	r3, [r7, #16]
}
 8007102:	bf00      	nop
 8007104:	e7fe      	b.n	8007104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007106:	4b3e      	ldr	r3, [pc, #248]	; (8007200 <xPortStartScheduler+0x120>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a3f      	ldr	r2, [pc, #252]	; (8007208 <xPortStartScheduler+0x128>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d10a      	bne.n	8007126 <xPortStartScheduler+0x46>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	60fb      	str	r3, [r7, #12]
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007126:	4b39      	ldr	r3, [pc, #228]	; (800720c <xPortStartScheduler+0x12c>)
 8007128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	22ff      	movs	r2, #255	; 0xff
 8007136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007148:	b2da      	uxtb	r2, r3
 800714a:	4b31      	ldr	r3, [pc, #196]	; (8007210 <xPortStartScheduler+0x130>)
 800714c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800714e:	4b31      	ldr	r3, [pc, #196]	; (8007214 <xPortStartScheduler+0x134>)
 8007150:	2207      	movs	r2, #7
 8007152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007154:	e009      	b.n	800716a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007156:	4b2f      	ldr	r3, [pc, #188]	; (8007214 <xPortStartScheduler+0x134>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3b01      	subs	r3, #1
 800715c:	4a2d      	ldr	r2, [pc, #180]	; (8007214 <xPortStartScheduler+0x134>)
 800715e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	b2db      	uxtb	r3, r3
 8007168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800716a:	78fb      	ldrb	r3, [r7, #3]
 800716c:	b2db      	uxtb	r3, r3
 800716e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007172:	2b80      	cmp	r3, #128	; 0x80
 8007174:	d0ef      	beq.n	8007156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007176:	4b27      	ldr	r3, [pc, #156]	; (8007214 <xPortStartScheduler+0x134>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f1c3 0307 	rsb	r3, r3, #7
 800717e:	2b04      	cmp	r3, #4
 8007180:	d00a      	beq.n	8007198 <xPortStartScheduler+0xb8>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	60bb      	str	r3, [r7, #8]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007198:	4b1e      	ldr	r3, [pc, #120]	; (8007214 <xPortStartScheduler+0x134>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	021b      	lsls	r3, r3, #8
 800719e:	4a1d      	ldr	r2, [pc, #116]	; (8007214 <xPortStartScheduler+0x134>)
 80071a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071a2:	4b1c      	ldr	r3, [pc, #112]	; (8007214 <xPortStartScheduler+0x134>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071aa:	4a1a      	ldr	r2, [pc, #104]	; (8007214 <xPortStartScheduler+0x134>)
 80071ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071b6:	4b18      	ldr	r3, [pc, #96]	; (8007218 <xPortStartScheduler+0x138>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a17      	ldr	r2, [pc, #92]	; (8007218 <xPortStartScheduler+0x138>)
 80071bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071c2:	4b15      	ldr	r3, [pc, #84]	; (8007218 <xPortStartScheduler+0x138>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a14      	ldr	r2, [pc, #80]	; (8007218 <xPortStartScheduler+0x138>)
 80071c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071ce:	f000 f8dd 	bl	800738c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071d2:	4b12      	ldr	r3, [pc, #72]	; (800721c <xPortStartScheduler+0x13c>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071d8:	f000 f8fc 	bl	80073d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071dc:	4b10      	ldr	r3, [pc, #64]	; (8007220 <xPortStartScheduler+0x140>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a0f      	ldr	r2, [pc, #60]	; (8007220 <xPortStartScheduler+0x140>)
 80071e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071e8:	f7ff ff66 	bl	80070b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071ec:	f7fe ff44 	bl	8006078 <vTaskSwitchContext>
	prvTaskExitError();
 80071f0:	f7ff ff1e 	bl	8007030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	e000ed00 	.word	0xe000ed00
 8007204:	410fc271 	.word	0x410fc271
 8007208:	410fc270 	.word	0x410fc270
 800720c:	e000e400 	.word	0xe000e400
 8007210:	200015e0 	.word	0x200015e0
 8007214:	200015e4 	.word	0x200015e4
 8007218:	e000ed20 	.word	0xe000ed20
 800721c:	2000000c 	.word	0x2000000c
 8007220:	e000ef34 	.word	0xe000ef34

08007224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
	__asm volatile
 800722a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	607b      	str	r3, [r7, #4]
}
 800723c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800723e:	4b0f      	ldr	r3, [pc, #60]	; (800727c <vPortEnterCritical+0x58>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3301      	adds	r3, #1
 8007244:	4a0d      	ldr	r2, [pc, #52]	; (800727c <vPortEnterCritical+0x58>)
 8007246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007248:	4b0c      	ldr	r3, [pc, #48]	; (800727c <vPortEnterCritical+0x58>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d10f      	bne.n	8007270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007250:	4b0b      	ldr	r3, [pc, #44]	; (8007280 <vPortEnterCritical+0x5c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <vPortEnterCritical+0x4c>
	__asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	603b      	str	r3, [r7, #0]
}
 800726c:	bf00      	nop
 800726e:	e7fe      	b.n	800726e <vPortEnterCritical+0x4a>
	}
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	2000000c 	.word	0x2000000c
 8007280:	e000ed04 	.word	0xe000ed04

08007284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800728a:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <vPortExitCritical+0x50>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10a      	bne.n	80072a8 <vPortExitCritical+0x24>
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	607b      	str	r3, [r7, #4]
}
 80072a4:	bf00      	nop
 80072a6:	e7fe      	b.n	80072a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072a8:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <vPortExitCritical+0x50>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	4a09      	ldr	r2, [pc, #36]	; (80072d4 <vPortExitCritical+0x50>)
 80072b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072b2:	4b08      	ldr	r3, [pc, #32]	; (80072d4 <vPortExitCritical+0x50>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d105      	bne.n	80072c6 <vPortExitCritical+0x42>
 80072ba:	2300      	movs	r3, #0
 80072bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	f383 8811 	msr	BASEPRI, r3
}
 80072c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	2000000c 	.word	0x2000000c
	...

080072e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072e0:	f3ef 8009 	mrs	r0, PSP
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	4b15      	ldr	r3, [pc, #84]	; (8007340 <pxCurrentTCBConst>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	f01e 0f10 	tst.w	lr, #16
 80072f0:	bf08      	it	eq
 80072f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fa:	6010      	str	r0, [r2, #0]
 80072fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007304:	f380 8811 	msr	BASEPRI, r0
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f7fe feb2 	bl	8006078 <vTaskSwitchContext>
 8007314:	f04f 0000 	mov.w	r0, #0
 8007318:	f380 8811 	msr	BASEPRI, r0
 800731c:	bc09      	pop	{r0, r3}
 800731e:	6819      	ldr	r1, [r3, #0]
 8007320:	6808      	ldr	r0, [r1, #0]
 8007322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007326:	f01e 0f10 	tst.w	lr, #16
 800732a:	bf08      	it	eq
 800732c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007330:	f380 8809 	msr	PSP, r0
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	f3af 8000 	nop.w

08007340 <pxCurrentTCBConst>:
 8007340:	20000fb4 	.word	0x20000fb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop

08007348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	607b      	str	r3, [r7, #4]
}
 8007360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007362:	f7fe fdcf 	bl	8005f04 <xTaskIncrementTick>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800736c:	4b06      	ldr	r3, [pc, #24]	; (8007388 <xPortSysTickHandler+0x40>)
 800736e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	2300      	movs	r3, #0
 8007376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	f383 8811 	msr	BASEPRI, r3
}
 800737e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007380:	bf00      	nop
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007390:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <vPortSetupTimerInterrupt+0x34>)
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007396:	4b0b      	ldr	r3, [pc, #44]	; (80073c4 <vPortSetupTimerInterrupt+0x38>)
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800739c:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <vPortSetupTimerInterrupt+0x3c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a0a      	ldr	r2, [pc, #40]	; (80073cc <vPortSetupTimerInterrupt+0x40>)
 80073a2:	fba2 2303 	umull	r2, r3, r2, r3
 80073a6:	099b      	lsrs	r3, r3, #6
 80073a8:	4a09      	ldr	r2, [pc, #36]	; (80073d0 <vPortSetupTimerInterrupt+0x44>)
 80073aa:	3b01      	subs	r3, #1
 80073ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073ae:	4b04      	ldr	r3, [pc, #16]	; (80073c0 <vPortSetupTimerInterrupt+0x34>)
 80073b0:	2207      	movs	r2, #7
 80073b2:	601a      	str	r2, [r3, #0]
}
 80073b4:	bf00      	nop
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	e000e010 	.word	0xe000e010
 80073c4:	e000e018 	.word	0xe000e018
 80073c8:	20000000 	.word	0x20000000
 80073cc:	1b4e81b5 	.word	0x1b4e81b5
 80073d0:	e000e014 	.word	0xe000e014

080073d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073e4 <vPortEnableVFP+0x10>
 80073d8:	6801      	ldr	r1, [r0, #0]
 80073da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073de:	6001      	str	r1, [r0, #0]
 80073e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073e2:	bf00      	nop
 80073e4:	e000ed88 	.word	0xe000ed88

080073e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073ee:	f3ef 8305 	mrs	r3, IPSR
 80073f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2b0f      	cmp	r3, #15
 80073f8:	d914      	bls.n	8007424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073fa:	4a17      	ldr	r2, [pc, #92]	; (8007458 <vPortValidateInterruptPriority+0x70>)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4413      	add	r3, r2
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007404:	4b15      	ldr	r3, [pc, #84]	; (800745c <vPortValidateInterruptPriority+0x74>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	7afa      	ldrb	r2, [r7, #11]
 800740a:	429a      	cmp	r2, r3
 800740c:	d20a      	bcs.n	8007424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	607b      	str	r3, [r7, #4]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007424:	4b0e      	ldr	r3, [pc, #56]	; (8007460 <vPortValidateInterruptPriority+0x78>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800742c:	4b0d      	ldr	r3, [pc, #52]	; (8007464 <vPortValidateInterruptPriority+0x7c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d90a      	bls.n	800744a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	603b      	str	r3, [r7, #0]
}
 8007446:	bf00      	nop
 8007448:	e7fe      	b.n	8007448 <vPortValidateInterruptPriority+0x60>
	}
 800744a:	bf00      	nop
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	e000e3f0 	.word	0xe000e3f0
 800745c:	200015e0 	.word	0x200015e0
 8007460:	e000ed0c 	.word	0xe000ed0c
 8007464:	200015e4 	.word	0x200015e4

08007468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08a      	sub	sp, #40	; 0x28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007470:	2300      	movs	r3, #0
 8007472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007474:	f7fe fc8a 	bl	8005d8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007478:	4b5b      	ldr	r3, [pc, #364]	; (80075e8 <pvPortMalloc+0x180>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007480:	f000 f920 	bl	80076c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007484:	4b59      	ldr	r3, [pc, #356]	; (80075ec <pvPortMalloc+0x184>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4013      	ands	r3, r2
 800748c:	2b00      	cmp	r3, #0
 800748e:	f040 8093 	bne.w	80075b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d01d      	beq.n	80074d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007498:	2208      	movs	r2, #8
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4413      	add	r3, r2
 800749e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d014      	beq.n	80074d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f023 0307 	bic.w	r3, r3, #7
 80074b0:	3308      	adds	r3, #8
 80074b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <pvPortMalloc+0x6c>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	617b      	str	r3, [r7, #20]
}
 80074d0:	bf00      	nop
 80074d2:	e7fe      	b.n	80074d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d06e      	beq.n	80075b8 <pvPortMalloc+0x150>
 80074da:	4b45      	ldr	r3, [pc, #276]	; (80075f0 <pvPortMalloc+0x188>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d869      	bhi.n	80075b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80074e4:	4b43      	ldr	r3, [pc, #268]	; (80075f4 <pvPortMalloc+0x18c>)
 80074e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80074e8:	4b42      	ldr	r3, [pc, #264]	; (80075f4 <pvPortMalloc+0x18c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074ee:	e004      	b.n	80074fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	429a      	cmp	r2, r3
 8007502:	d903      	bls.n	800750c <pvPortMalloc+0xa4>
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1f1      	bne.n	80074f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800750c:	4b36      	ldr	r3, [pc, #216]	; (80075e8 <pvPortMalloc+0x180>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007512:	429a      	cmp	r2, r3
 8007514:	d050      	beq.n	80075b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2208      	movs	r2, #8
 800751c:	4413      	add	r3, r2
 800751e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	1ad2      	subs	r2, r2, r3
 8007530:	2308      	movs	r3, #8
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	429a      	cmp	r2, r3
 8007536:	d91f      	bls.n	8007578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	f003 0307 	and.w	r3, r3, #7
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <pvPortMalloc+0xf8>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	613b      	str	r3, [r7, #16]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	1ad2      	subs	r2, r2, r3
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007572:	69b8      	ldr	r0, [r7, #24]
 8007574:	f000 f908 	bl	8007788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007578:	4b1d      	ldr	r3, [pc, #116]	; (80075f0 <pvPortMalloc+0x188>)
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	4a1b      	ldr	r2, [pc, #108]	; (80075f0 <pvPortMalloc+0x188>)
 8007584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007586:	4b1a      	ldr	r3, [pc, #104]	; (80075f0 <pvPortMalloc+0x188>)
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	4b1b      	ldr	r3, [pc, #108]	; (80075f8 <pvPortMalloc+0x190>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d203      	bcs.n	800759a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007592:	4b17      	ldr	r3, [pc, #92]	; (80075f0 <pvPortMalloc+0x188>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a18      	ldr	r2, [pc, #96]	; (80075f8 <pvPortMalloc+0x190>)
 8007598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	4b13      	ldr	r3, [pc, #76]	; (80075ec <pvPortMalloc+0x184>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	2200      	movs	r2, #0
 80075ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80075ae:	4b13      	ldr	r3, [pc, #76]	; (80075fc <pvPortMalloc+0x194>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3301      	adds	r3, #1
 80075b4:	4a11      	ldr	r2, [pc, #68]	; (80075fc <pvPortMalloc+0x194>)
 80075b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075b8:	f7fe fbf6 	bl	8005da8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00a      	beq.n	80075dc <pvPortMalloc+0x174>
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	60fb      	str	r3, [r7, #12]
}
 80075d8:	bf00      	nop
 80075da:	e7fe      	b.n	80075da <pvPortMalloc+0x172>
	return pvReturn;
 80075dc:	69fb      	ldr	r3, [r7, #28]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3728      	adds	r7, #40	; 0x28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	20006fc8 	.word	0x20006fc8
 80075ec:	20006fdc 	.word	0x20006fdc
 80075f0:	20006fcc 	.word	0x20006fcc
 80075f4:	20006fc0 	.word	0x20006fc0
 80075f8:	20006fd0 	.word	0x20006fd0
 80075fc:	20006fd4 	.word	0x20006fd4

08007600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d04d      	beq.n	80076ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007612:	2308      	movs	r3, #8
 8007614:	425b      	negs	r3, r3
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4413      	add	r3, r2
 800761a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	4b24      	ldr	r3, [pc, #144]	; (80076b8 <vPortFree+0xb8>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4013      	ands	r3, r2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10a      	bne.n	8007644 <vPortFree+0x44>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	60fb      	str	r3, [r7, #12]
}
 8007640:	bf00      	nop
 8007642:	e7fe      	b.n	8007642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <vPortFree+0x62>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	60bb      	str	r3, [r7, #8]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <vPortFree+0xb8>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4013      	ands	r3, r2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01e      	beq.n	80076ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d11a      	bne.n	80076ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <vPortFree+0xb8>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	43db      	mvns	r3, r3
 8007682:	401a      	ands	r2, r3
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007688:	f7fe fb80 	bl	8005d8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <vPortFree+0xbc>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4413      	add	r3, r2
 8007696:	4a09      	ldr	r2, [pc, #36]	; (80076bc <vPortFree+0xbc>)
 8007698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800769a:	6938      	ldr	r0, [r7, #16]
 800769c:	f000 f874 	bl	8007788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80076a0:	4b07      	ldr	r3, [pc, #28]	; (80076c0 <vPortFree+0xc0>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3301      	adds	r3, #1
 80076a6:	4a06      	ldr	r2, [pc, #24]	; (80076c0 <vPortFree+0xc0>)
 80076a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80076aa:	f7fe fb7d 	bl	8005da8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076ae:	bf00      	nop
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20006fdc 	.word	0x20006fdc
 80076bc:	20006fcc 	.word	0x20006fcc
 80076c0:	20006fd8 	.word	0x20006fd8

080076c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076ca:	f645 13d8 	movw	r3, #23000	; 0x59d8
 80076ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076d0:	4b27      	ldr	r3, [pc, #156]	; (8007770 <prvHeapInit+0xac>)
 80076d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00c      	beq.n	80076f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3307      	adds	r3, #7
 80076e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 0307 	bic.w	r3, r3, #7
 80076ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	4a1f      	ldr	r2, [pc, #124]	; (8007770 <prvHeapInit+0xac>)
 80076f4:	4413      	add	r3, r2
 80076f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076fc:	4a1d      	ldr	r2, [pc, #116]	; (8007774 <prvHeapInit+0xb0>)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007702:	4b1c      	ldr	r3, [pc, #112]	; (8007774 <prvHeapInit+0xb0>)
 8007704:	2200      	movs	r2, #0
 8007706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	4413      	add	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007710:	2208      	movs	r2, #8
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	1a9b      	subs	r3, r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 0307 	bic.w	r3, r3, #7
 800771e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4a15      	ldr	r2, [pc, #84]	; (8007778 <prvHeapInit+0xb4>)
 8007724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007726:	4b14      	ldr	r3, [pc, #80]	; (8007778 <prvHeapInit+0xb4>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2200      	movs	r2, #0
 800772c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800772e:	4b12      	ldr	r3, [pc, #72]	; (8007778 <prvHeapInit+0xb4>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	1ad2      	subs	r2, r2, r3
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007744:	4b0c      	ldr	r3, [pc, #48]	; (8007778 <prvHeapInit+0xb4>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	4a0a      	ldr	r2, [pc, #40]	; (800777c <prvHeapInit+0xb8>)
 8007752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	4a09      	ldr	r2, [pc, #36]	; (8007780 <prvHeapInit+0xbc>)
 800775a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800775c:	4b09      	ldr	r3, [pc, #36]	; (8007784 <prvHeapInit+0xc0>)
 800775e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007762:	601a      	str	r2, [r3, #0]
}
 8007764:	bf00      	nop
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	200015e8 	.word	0x200015e8
 8007774:	20006fc0 	.word	0x20006fc0
 8007778:	20006fc8 	.word	0x20006fc8
 800777c:	20006fd0 	.word	0x20006fd0
 8007780:	20006fcc 	.word	0x20006fcc
 8007784:	20006fdc 	.word	0x20006fdc

08007788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007790:	4b28      	ldr	r3, [pc, #160]	; (8007834 <prvInsertBlockIntoFreeList+0xac>)
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	e002      	b.n	800779c <prvInsertBlockIntoFreeList+0x14>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d8f7      	bhi.n	8007796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	4413      	add	r3, r2
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d108      	bne.n	80077ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	441a      	add	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	441a      	add	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d118      	bne.n	8007810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	4b15      	ldr	r3, [pc, #84]	; (8007838 <prvInsertBlockIntoFreeList+0xb0>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d00d      	beq.n	8007806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	441a      	add	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	e008      	b.n	8007818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007806:	4b0c      	ldr	r3, [pc, #48]	; (8007838 <prvInsertBlockIntoFreeList+0xb0>)
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	e003      	b.n	8007818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	429a      	cmp	r2, r3
 800781e:	d002      	beq.n	8007826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007826:	bf00      	nop
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	20006fc0 	.word	0x20006fc0
 8007838:	20006fc8 	.word	0x20006fc8

0800783c <memset>:
 800783c:	4402      	add	r2, r0
 800783e:	4603      	mov	r3, r0
 8007840:	4293      	cmp	r3, r2
 8007842:	d100      	bne.n	8007846 <memset+0xa>
 8007844:	4770      	bx	lr
 8007846:	f803 1b01 	strb.w	r1, [r3], #1
 800784a:	e7f9      	b.n	8007840 <memset+0x4>

0800784c <__libc_init_array>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	4d0d      	ldr	r5, [pc, #52]	; (8007884 <__libc_init_array+0x38>)
 8007850:	4c0d      	ldr	r4, [pc, #52]	; (8007888 <__libc_init_array+0x3c>)
 8007852:	1b64      	subs	r4, r4, r5
 8007854:	10a4      	asrs	r4, r4, #2
 8007856:	2600      	movs	r6, #0
 8007858:	42a6      	cmp	r6, r4
 800785a:	d109      	bne.n	8007870 <__libc_init_array+0x24>
 800785c:	4d0b      	ldr	r5, [pc, #44]	; (800788c <__libc_init_array+0x40>)
 800785e:	4c0c      	ldr	r4, [pc, #48]	; (8007890 <__libc_init_array+0x44>)
 8007860:	f000 f826 	bl	80078b0 <_init>
 8007864:	1b64      	subs	r4, r4, r5
 8007866:	10a4      	asrs	r4, r4, #2
 8007868:	2600      	movs	r6, #0
 800786a:	42a6      	cmp	r6, r4
 800786c:	d105      	bne.n	800787a <__libc_init_array+0x2e>
 800786e:	bd70      	pop	{r4, r5, r6, pc}
 8007870:	f855 3b04 	ldr.w	r3, [r5], #4
 8007874:	4798      	blx	r3
 8007876:	3601      	adds	r6, #1
 8007878:	e7ee      	b.n	8007858 <__libc_init_array+0xc>
 800787a:	f855 3b04 	ldr.w	r3, [r5], #4
 800787e:	4798      	blx	r3
 8007880:	3601      	adds	r6, #1
 8007882:	e7f2      	b.n	800786a <__libc_init_array+0x1e>
 8007884:	08007a28 	.word	0x08007a28
 8007888:	08007a28 	.word	0x08007a28
 800788c:	08007a28 	.word	0x08007a28
 8007890:	08007a2c 	.word	0x08007a2c

08007894 <memcpy>:
 8007894:	440a      	add	r2, r1
 8007896:	4291      	cmp	r1, r2
 8007898:	f100 33ff 	add.w	r3, r0, #4294967295
 800789c:	d100      	bne.n	80078a0 <memcpy+0xc>
 800789e:	4770      	bx	lr
 80078a0:	b510      	push	{r4, lr}
 80078a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078aa:	4291      	cmp	r1, r2
 80078ac:	d1f9      	bne.n	80078a2 <memcpy+0xe>
 80078ae:	bd10      	pop	{r4, pc}

080078b0 <_init>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	bf00      	nop
 80078b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b6:	bc08      	pop	{r3}
 80078b8:	469e      	mov	lr, r3
 80078ba:	4770      	bx	lr

080078bc <_fini>:
 80078bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078be:	bf00      	nop
 80078c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c2:	bc08      	pop	{r3}
 80078c4:	469e      	mov	lr, r3
 80078c6:	4770      	bx	lr
