
Project3-Bank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800983c  0800983c  0001983c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a34  08009a34  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009a34  08009a34  00019a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a3c  08009a3c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a3c  08009a3c  00019a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a40  08009a40  00019a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000071e8  20000078  08009abc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007260  08009abc  00027260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001af0e  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bcf  00000000  00000000  0003aff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  0003ebc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001278  00000000  00000000  000403a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004a19  00000000  00000000  00041618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b7f4  00000000  00000000  00046031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd987  00000000  00000000  00061825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068f4  00000000  00000000  0015f1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00165aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009824 	.word	0x08009824

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08009824 	.word	0x08009824

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <init_breaker>:
uint32_t* random2;
uint32_t* random3;



void init_breaker(void){
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b09d      	sub	sp, #116	; 0x74
 8000580:	af04      	add	r7, sp, #16

	//What time the variable for going on break will be assigned
	breaker.start_break[0] = 0;
 8000582:	4bbc      	ldr	r3, [pc, #752]	; (8000874 <init_breaker+0x2f8>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
	breaker.start_break[1] = 0;
 8000588:	4bba      	ldr	r3, [pc, #744]	; (8000874 <init_breaker+0x2f8>)
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random1);
 800058e:	4bba      	ldr	r3, [pc, #744]	; (8000878 <init_breaker+0x2fc>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4619      	mov	r1, r3
 8000594:	48b9      	ldr	r0, [pc, #740]	; (800087c <init_breaker+0x300>)
 8000596:	f004 f940 	bl	800481a <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock1 = { .hour = 9, .minute = (30 + (*random1 - 30) % 31), .second = (*random1 % 60)};
 800059a:	2309      	movs	r3, #9
 800059c:	657b      	str	r3, [r7, #84]	; 0x54
 800059e:	4bb6      	ldr	r3, [pc, #728]	; (8000878 <init_breaker+0x2fc>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f1a3 011e 	sub.w	r1, r3, #30
 80005a8:	4bb5      	ldr	r3, [pc, #724]	; (8000880 <init_breaker+0x304>)
 80005aa:	fba3 2301 	umull	r2, r3, r3, r1
 80005ae:	1aca      	subs	r2, r1, r3
 80005b0:	0852      	lsrs	r2, r2, #1
 80005b2:	4413      	add	r3, r2
 80005b4:	091a      	lsrs	r2, r3, #4
 80005b6:	4613      	mov	r3, r2
 80005b8:	015b      	lsls	r3, r3, #5
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	1aca      	subs	r2, r1, r3
 80005be:	f102 031e 	add.w	r3, r2, #30
 80005c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80005c4:	4bac      	ldr	r3, [pc, #688]	; (8000878 <init_breaker+0x2fc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6819      	ldr	r1, [r3, #0]
 80005ca:	4bae      	ldr	r3, [pc, #696]	; (8000884 <init_breaker+0x308>)
 80005cc:	fba3 2301 	umull	r2, r3, r3, r1
 80005d0:	095a      	lsrs	r2, r3, #5
 80005d2:	4613      	mov	r3, r2
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	1a9b      	subs	r3, r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	1aca      	subs	r2, r1, r3
 80005dc:	4613      	mov	r3, r2
 80005de:	65fb      	str	r3, [r7, #92]	; 0x5c
	WallClock temp_clock11 = { .hour = 0, .minute = (*random1 % 5), .second = (*random1 % 60)};
 80005e0:	2300      	movs	r3, #0
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80005e4:	4ba4      	ldr	r3, [pc, #656]	; (8000878 <init_breaker+0x2fc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	6819      	ldr	r1, [r3, #0]
 80005ea:	4ba7      	ldr	r3, [pc, #668]	; (8000888 <init_breaker+0x30c>)
 80005ec:	fba3 2301 	umull	r2, r3, r3, r1
 80005f0:	089a      	lsrs	r2, r3, #2
 80005f2:	4613      	mov	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	1aca      	subs	r2, r1, r3
 80005fa:	4613      	mov	r3, r2
 80005fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005fe:	4b9e      	ldr	r3, [pc, #632]	; (8000878 <init_breaker+0x2fc>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6819      	ldr	r1, [r3, #0]
 8000604:	4b9f      	ldr	r3, [pc, #636]	; (8000884 <init_breaker+0x308>)
 8000606:	fba3 2301 	umull	r2, r3, r3, r1
 800060a:	095a      	lsrs	r2, r3, #5
 800060c:	4613      	mov	r3, r2
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	1aca      	subs	r2, r1, r3
 8000616:	4613      	mov	r3, r2
 8000618:	653b      	str	r3, [r7, #80]	; 0x50
	breaker.break_time1 = add_clocks(breaker.break_time1,temp_clock1);
 800061a:	4e96      	ldr	r6, [pc, #600]	; (8000874 <init_breaker+0x2f8>)
 800061c:	f107 0508 	add.w	r5, r7, #8
 8000620:	4b94      	ldr	r3, [pc, #592]	; (8000874 <init_breaker+0x2f8>)
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	466c      	mov	r4, sp
 8000626:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800062a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800062e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	330c      	adds	r3, #12
 8000636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000638:	4628      	mov	r0, r5
 800063a:	f000 fbe1 	bl	8000e00 <add_clocks>
 800063e:	f106 030c 	add.w	r3, r6, #12
 8000642:	f107 0208 	add.w	r2, r7, #8
 8000646:	ca07      	ldmia	r2, {r0, r1, r2}
 8000648:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration1 = add_clocks(breaker.break_duration1,temp_clock11);
 800064c:	4e89      	ldr	r6, [pc, #548]	; (8000874 <init_breaker+0x2f8>)
 800064e:	f107 0508 	add.w	r5, r7, #8
 8000652:	4b88      	ldr	r3, [pc, #544]	; (8000874 <init_breaker+0x2f8>)
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	466c      	mov	r4, sp
 8000658:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800065c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3318      	adds	r3, #24
 8000668:	cb0e      	ldmia	r3, {r1, r2, r3}
 800066a:	4628      	mov	r0, r5
 800066c:	f000 fbc8 	bl	8000e00 <add_clocks>
 8000670:	f106 0318 	add.w	r3, r6, #24
 8000674:	f107 0208 	add.w	r2, r7, #8
 8000678:	ca07      	ldmia	r2, {r0, r1, r2}
 800067a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//What time the variable for going on break will be assigned
	breaker.start_break[2] = 0;
 800067e:	4b7d      	ldr	r3, [pc, #500]	; (8000874 <init_breaker+0x2f8>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random2);
 8000684:	4b81      	ldr	r3, [pc, #516]	; (800088c <init_breaker+0x310>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4619      	mov	r1, r3
 800068a:	487c      	ldr	r0, [pc, #496]	; (800087c <init_breaker+0x300>)
 800068c:	f004 f8c5 	bl	800481a <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock2 = { .hour = 9, .minute = (30 + (*random2 - 30) % 31), .second = (*random2 % 60)};
 8000690:	2309      	movs	r3, #9
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000694:	4b7d      	ldr	r3, [pc, #500]	; (800088c <init_breaker+0x310>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f1a3 011e 	sub.w	r1, r3, #30
 800069e:	4b78      	ldr	r3, [pc, #480]	; (8000880 <init_breaker+0x304>)
 80006a0:	fba3 2301 	umull	r2, r3, r3, r1
 80006a4:	1aca      	subs	r2, r1, r3
 80006a6:	0852      	lsrs	r2, r2, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	091a      	lsrs	r2, r3, #4
 80006ac:	4613      	mov	r3, r2
 80006ae:	015b      	lsls	r3, r3, #5
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	1aca      	subs	r2, r1, r3
 80006b4:	f102 031e 	add.w	r3, r2, #30
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
 80006ba:	4b74      	ldr	r3, [pc, #464]	; (800088c <init_breaker+0x310>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	6819      	ldr	r1, [r3, #0]
 80006c0:	4b70      	ldr	r3, [pc, #448]	; (8000884 <init_breaker+0x308>)
 80006c2:	fba3 2301 	umull	r2, r3, r3, r1
 80006c6:	095a      	lsrs	r2, r3, #5
 80006c8:	4613      	mov	r3, r2
 80006ca:	011b      	lsls	r3, r3, #4
 80006cc:	1a9b      	subs	r3, r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	1aca      	subs	r2, r1, r3
 80006d2:	4613      	mov	r3, r2
 80006d4:	647b      	str	r3, [r7, #68]	; 0x44
	WallClock temp_clock22 = { .hour = 0, .minute = (*random2 % 5), .second = (*random2 % 60)};
 80006d6:	2300      	movs	r3, #0
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <init_breaker+0x310>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6819      	ldr	r1, [r3, #0]
 80006e0:	4b69      	ldr	r3, [pc, #420]	; (8000888 <init_breaker+0x30c>)
 80006e2:	fba3 2301 	umull	r2, r3, r3, r1
 80006e6:	089a      	lsrs	r2, r3, #2
 80006e8:	4613      	mov	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4413      	add	r3, r2
 80006ee:	1aca      	subs	r2, r1, r3
 80006f0:	4613      	mov	r3, r2
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
 80006f4:	4b65      	ldr	r3, [pc, #404]	; (800088c <init_breaker+0x310>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6819      	ldr	r1, [r3, #0]
 80006fa:	4b62      	ldr	r3, [pc, #392]	; (8000884 <init_breaker+0x308>)
 80006fc:	fba3 2301 	umull	r2, r3, r3, r1
 8000700:	095a      	lsrs	r2, r3, #5
 8000702:	4613      	mov	r3, r2
 8000704:	011b      	lsls	r3, r3, #4
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	1aca      	subs	r2, r1, r3
 800070c:	4613      	mov	r3, r2
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
	breaker.break_time2 = add_clocks(breaker.break_time2,temp_clock2);
 8000710:	4e58      	ldr	r6, [pc, #352]	; (8000874 <init_breaker+0x2f8>)
 8000712:	f107 0508 	add.w	r5, r7, #8
 8000716:	4b57      	ldr	r3, [pc, #348]	; (8000874 <init_breaker+0x2f8>)
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	466c      	mov	r4, sp
 800071c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000720:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3324      	adds	r3, #36	; 0x24
 800072c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800072e:	4628      	mov	r0, r5
 8000730:	f000 fb66 	bl	8000e00 <add_clocks>
 8000734:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000738:	f107 0208 	add.w	r2, r7, #8
 800073c:	ca07      	ldmia	r2, {r0, r1, r2}
 800073e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration2 = add_clocks(breaker.break_duration2,temp_clock22);
 8000742:	4e4c      	ldr	r6, [pc, #304]	; (8000874 <init_breaker+0x2f8>)
 8000744:	f107 0508 	add.w	r5, r7, #8
 8000748:	4b4a      	ldr	r3, [pc, #296]	; (8000874 <init_breaker+0x2f8>)
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	466c      	mov	r4, sp
 800074e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000752:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	3330      	adds	r3, #48	; 0x30
 800075e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000760:	4628      	mov	r0, r5
 8000762:	f000 fb4d 	bl	8000e00 <add_clocks>
 8000766:	f106 0330 	add.w	r3, r6, #48	; 0x30
 800076a:	f107 0208 	add.w	r2, r7, #8
 800076e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000770:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//What time the variable for going on break will be assigned
	breaker.start_break[3] = 0;
 8000774:	4b3f      	ldr	r3, [pc, #252]	; (8000874 <init_breaker+0x2f8>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random3);
 800077a:	4b45      	ldr	r3, [pc, #276]	; (8000890 <init_breaker+0x314>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	483e      	ldr	r0, [pc, #248]	; (800087c <init_breaker+0x300>)
 8000782:	f004 f84a 	bl	800481a <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock3 = { .hour = 9, .minute = (30 + (*random3 - 30) % 31), .second = (*random3 % 60)};
 8000786:	2309      	movs	r3, #9
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
 800078a:	4b41      	ldr	r3, [pc, #260]	; (8000890 <init_breaker+0x314>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f1a3 011e 	sub.w	r1, r3, #30
 8000794:	4b3a      	ldr	r3, [pc, #232]	; (8000880 <init_breaker+0x304>)
 8000796:	fba3 2301 	umull	r2, r3, r3, r1
 800079a:	1aca      	subs	r2, r1, r3
 800079c:	0852      	lsrs	r2, r2, #1
 800079e:	4413      	add	r3, r2
 80007a0:	091a      	lsrs	r2, r3, #4
 80007a2:	4613      	mov	r3, r2
 80007a4:	015b      	lsls	r3, r3, #5
 80007a6:	1a9b      	subs	r3, r3, r2
 80007a8:	1aca      	subs	r2, r1, r3
 80007aa:	f102 031e 	add.w	r3, r2, #30
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80007b0:	4b37      	ldr	r3, [pc, #220]	; (8000890 <init_breaker+0x314>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6819      	ldr	r1, [r3, #0]
 80007b6:	4b33      	ldr	r3, [pc, #204]	; (8000884 <init_breaker+0x308>)
 80007b8:	fba3 2301 	umull	r2, r3, r3, r1
 80007bc:	095a      	lsrs	r2, r3, #5
 80007be:	4613      	mov	r3, r2
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	1a9b      	subs	r3, r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	1aca      	subs	r2, r1, r3
 80007c8:	4613      	mov	r3, r2
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	WallClock temp_clock33 = { .hour = 0, .minute = (*random3 % 5), .second = (*random3 % 60)};
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <init_breaker+0x314>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6819      	ldr	r1, [r3, #0]
 80007d6:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <init_breaker+0x30c>)
 80007d8:	fba3 2301 	umull	r2, r3, r3, r1
 80007dc:	089a      	lsrs	r2, r3, #2
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	1aca      	subs	r2, r1, r3
 80007e6:	4613      	mov	r3, r2
 80007e8:	61fb      	str	r3, [r7, #28]
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <init_breaker+0x314>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	4b24      	ldr	r3, [pc, #144]	; (8000884 <init_breaker+0x308>)
 80007f2:	fba3 2301 	umull	r2, r3, r3, r1
 80007f6:	095a      	lsrs	r2, r3, #5
 80007f8:	4613      	mov	r3, r2
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	1a9b      	subs	r3, r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	1aca      	subs	r2, r1, r3
 8000802:	4613      	mov	r3, r2
 8000804:	623b      	str	r3, [r7, #32]
	breaker.break_time3 = add_clocks(breaker.break_time3,temp_clock3);
 8000806:	4e1b      	ldr	r6, [pc, #108]	; (8000874 <init_breaker+0x2f8>)
 8000808:	f107 0508 	add.w	r5, r7, #8
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <init_breaker+0x2f8>)
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	466c      	mov	r4, sp
 8000812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000816:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800081a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	333c      	adds	r3, #60	; 0x3c
 8000822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000824:	4628      	mov	r0, r5
 8000826:	f000 faeb 	bl	8000e00 <add_clocks>
 800082a:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 800082e:	f107 0208 	add.w	r2, r7, #8
 8000832:	ca07      	ldmia	r2, {r0, r1, r2}
 8000834:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration3 =  add_clocks(breaker.break_duration3,temp_clock33);
 8000838:	4e0e      	ldr	r6, [pc, #56]	; (8000874 <init_breaker+0x2f8>)
 800083a:	f107 0508 	add.w	r5, r7, #8
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <init_breaker+0x2f8>)
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	466c      	mov	r4, sp
 8000844:	f107 0318 	add.w	r3, r7, #24
 8000848:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800084c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3348      	adds	r3, #72	; 0x48
 8000854:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000856:	4628      	mov	r0, r5
 8000858:	f000 fad2 	bl	8000e00 <add_clocks>
 800085c:	f106 0348 	add.w	r3, r6, #72	; 0x48
 8000860:	f107 0208 	add.w	r2, r7, #8
 8000864:	ca07      	ldmia	r2, {r0, r1, r2}
 8000866:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800086a:	bf00      	nop
 800086c:	3764      	adds	r7, #100	; 0x64
 800086e:	46bd      	mov	sp, r7
 8000870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000872:	bf00      	nop
 8000874:	20000094 	.word	0x20000094
 8000878:	200000e8 	.word	0x200000e8
 800087c:	200002b8 	.word	0x200002b8
 8000880:	08421085 	.word	0x08421085
 8000884:	88888889 	.word	0x88888889
 8000888:	cccccccd 	.word	0xcccccccd
 800088c:	200000ec 	.word	0x200000ec
 8000890:	200000f0 	.word	0x200000f0

08000894 <run_breaker>:

void run_breaker(){
 8000894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000896:	b09d      	sub	sp, #116	; 0x74
 8000898:	af04      	add	r7, sp, #16
	if(breaker.break_time1.hour == 0){
 800089a:	4bbd      	ldr	r3, [pc, #756]	; (8000b90 <run_breaker+0x2fc>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d102      	bne.n	80008a8 <run_breaker+0x14>
		breaker.break_time1.hour = 9;
 80008a2:	4bbb      	ldr	r3, [pc, #748]	; (8000b90 <run_breaker+0x2fc>)
 80008a4:	2209      	movs	r2, #9
 80008a6:	60da      	str	r2, [r3, #12]
	}
	if((!HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)) == 1 ){
 80008a8:	2102      	movs	r1, #2
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ae:	f002 fc0d 	bl	80030cc <HAL_GPIO_ReadPin>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d103      	bne.n	80008c0 <run_breaker+0x2c>
			  tellers[1].take_break = 1;
 80008b8:	4bb6      	ldr	r3, [pc, #728]	; (8000b94 <run_breaker+0x300>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	}
	if((!HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin)) == 1 ){
 80008c0:	2110      	movs	r1, #16
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f002 fc01 	bl	80030cc <HAL_GPIO_ReadPin>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d103      	bne.n	80008d8 <run_breaker+0x44>
			  tellers[2].take_break = 2;
 80008d0:	4bb0      	ldr	r3, [pc, #704]	; (8000b94 <run_breaker+0x300>)
 80008d2:	2202      	movs	r2, #2
 80008d4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	}
	if((!HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch2_Pin)) == 1 ){
 80008d8:	2110      	movs	r1, #16
 80008da:	48af      	ldr	r0, [pc, #700]	; (8000b98 <run_breaker+0x304>)
 80008dc:	f002 fbf6 	bl	80030cc <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d103      	bne.n	80008ee <run_breaker+0x5a>
			  tellers[3].take_break = 3;
 80008e6:	4bab      	ldr	r3, [pc, #684]	; (8000b94 <run_breaker+0x300>)
 80008e8:	2203      	movs	r2, #3
 80008ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	}
	if(clock_compare(Clock, breaker.break_time1) == 1){
 80008ee:	4ba8      	ldr	r3, [pc, #672]	; (8000b90 <run_breaker+0x2fc>)
 80008f0:	4aaa      	ldr	r2, [pc, #680]	; (8000b9c <run_breaker+0x308>)
 80008f2:	466c      	mov	r4, sp
 80008f4:	f103 0110 	add.w	r1, r3, #16
 80008f8:	c903      	ldmia	r1, {r0, r1}
 80008fa:	e884 0003 	stmia.w	r4, {r0, r1}
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	ca07      	ldmia	r2, {r0, r1, r2}
 8000902:	f000 fab7 	bl	8000e74 <clock_compare>
 8000906:	4603      	mov	r3, r0
 8000908:	2b01      	cmp	r3, #1
 800090a:	d103      	bne.n	8000914 <run_breaker+0x80>
		tellers[1].take_break = 1;
 800090c:	4ba1      	ldr	r3, [pc, #644]	; (8000b94 <run_breaker+0x300>)
 800090e:	2201      	movs	r2, #1
 8000910:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	}
	if(clock_compare(Clock, breaker.break_time2) == 1){
 8000914:	4b9e      	ldr	r3, [pc, #632]	; (8000b90 <run_breaker+0x2fc>)
 8000916:	4aa1      	ldr	r2, [pc, #644]	; (8000b9c <run_breaker+0x308>)
 8000918:	466c      	mov	r4, sp
 800091a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800091e:	c903      	ldmia	r1, {r0, r1}
 8000920:	e884 0003 	stmia.w	r4, {r0, r1}
 8000924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000926:	ca07      	ldmia	r2, {r0, r1, r2}
 8000928:	f000 faa4 	bl	8000e74 <clock_compare>
 800092c:	4603      	mov	r3, r0
 800092e:	2b01      	cmp	r3, #1
 8000930:	d103      	bne.n	800093a <run_breaker+0xa6>
		tellers[2].take_break = 1;
 8000932:	4b98      	ldr	r3, [pc, #608]	; (8000b94 <run_breaker+0x300>)
 8000934:	2201      	movs	r2, #1
 8000936:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	}
	if(clock_compare(Clock, breaker.break_time3) == 1){
 800093a:	4b95      	ldr	r3, [pc, #596]	; (8000b90 <run_breaker+0x2fc>)
 800093c:	4a97      	ldr	r2, [pc, #604]	; (8000b9c <run_breaker+0x308>)
 800093e:	466c      	mov	r4, sp
 8000940:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000944:	c903      	ldmia	r1, {r0, r1}
 8000946:	e884 0003 	stmia.w	r4, {r0, r1}
 800094a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800094c:	ca07      	ldmia	r2, {r0, r1, r2}
 800094e:	f000 fa91 	bl	8000e74 <clock_compare>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	d103      	bne.n	8000960 <run_breaker+0xcc>
		tellers[3].take_break = 1;
 8000958:	4b8e      	ldr	r3, [pc, #568]	; (8000b94 <run_breaker+0x300>)
 800095a:	2201      	movs	r2, #1
 800095c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	}
	if(breaker.start_break[1] == 1){
 8000960:	4b8b      	ldr	r3, [pc, #556]	; (8000b90 <run_breaker+0x2fc>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2b01      	cmp	r3, #1
 8000966:	f040 8094 	bne.w	8000a92 <run_breaker+0x1fe>
		breaker.start_break[1] = 0;
 800096a:	4b89      	ldr	r3, [pc, #548]	; (8000b90 <run_breaker+0x2fc>)
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
		HAL_RNG_Init(&hrng);
 8000970:	488b      	ldr	r0, [pc, #556]	; (8000ba0 <run_breaker+0x30c>)
 8000972:	f003 fefb 	bl	800476c <HAL_RNG_Init>
		HAL_RNG_GenerateRandomNumber(&hrng,random1);
 8000976:	4b8b      	ldr	r3, [pc, #556]	; (8000ba4 <run_breaker+0x310>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	4888      	ldr	r0, [pc, #544]	; (8000ba0 <run_breaker+0x30c>)
 800097e:	f003 ff4c 	bl	800481a <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock1 = { .hour = 0, .minute = (30 + (*random1 - 30) % 31), .second = (*random1 % 60)};
 8000982:	2300      	movs	r3, #0
 8000984:	657b      	str	r3, [r7, #84]	; 0x54
 8000986:	4b87      	ldr	r3, [pc, #540]	; (8000ba4 <run_breaker+0x310>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f1a3 011e 	sub.w	r1, r3, #30
 8000990:	4b85      	ldr	r3, [pc, #532]	; (8000ba8 <run_breaker+0x314>)
 8000992:	fba3 2301 	umull	r2, r3, r3, r1
 8000996:	1aca      	subs	r2, r1, r3
 8000998:	0852      	lsrs	r2, r2, #1
 800099a:	4413      	add	r3, r2
 800099c:	091a      	lsrs	r2, r3, #4
 800099e:	4613      	mov	r3, r2
 80009a0:	015b      	lsls	r3, r3, #5
 80009a2:	1a9b      	subs	r3, r3, r2
 80009a4:	1aca      	subs	r2, r1, r3
 80009a6:	f102 031e 	add.w	r3, r2, #30
 80009aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80009ac:	4b7d      	ldr	r3, [pc, #500]	; (8000ba4 <run_breaker+0x310>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	4b7e      	ldr	r3, [pc, #504]	; (8000bac <run_breaker+0x318>)
 80009b4:	fba3 2301 	umull	r2, r3, r3, r1
 80009b8:	095a      	lsrs	r2, r3, #5
 80009ba:	4613      	mov	r3, r2
 80009bc:	011b      	lsls	r3, r3, #4
 80009be:	1a9b      	subs	r3, r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	1aca      	subs	r2, r1, r3
 80009c4:	4613      	mov	r3, r2
 80009c6:	65fb      	str	r3, [r7, #92]	; 0x5c
		WallClock temp_clock11 = { .hour = 0, .minute = (*random1 % 5), .second = (*random1 % 60)};
 80009c8:	2300      	movs	r3, #0
 80009ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80009cc:	4b75      	ldr	r3, [pc, #468]	; (8000ba4 <run_breaker+0x310>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6819      	ldr	r1, [r3, #0]
 80009d2:	4b77      	ldr	r3, [pc, #476]	; (8000bb0 <run_breaker+0x31c>)
 80009d4:	fba3 2301 	umull	r2, r3, r3, r1
 80009d8:	089a      	lsrs	r2, r3, #2
 80009da:	4613      	mov	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	1aca      	subs	r2, r1, r3
 80009e2:	4613      	mov	r3, r2
 80009e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009e6:	4b6f      	ldr	r3, [pc, #444]	; (8000ba4 <run_breaker+0x310>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6819      	ldr	r1, [r3, #0]
 80009ec:	4b6f      	ldr	r3, [pc, #444]	; (8000bac <run_breaker+0x318>)
 80009ee:	fba3 2301 	umull	r2, r3, r3, r1
 80009f2:	095a      	lsrs	r2, r3, #5
 80009f4:	4613      	mov	r3, r2
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	1a9b      	subs	r3, r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	1aca      	subs	r2, r1, r3
 80009fe:	4613      	mov	r3, r2
 8000a00:	653b      	str	r3, [r7, #80]	; 0x50
		breaker.break_time1 = add_clocks(breaker.break_time1,Clock);
 8000a02:	4d63      	ldr	r5, [pc, #396]	; (8000b90 <run_breaker+0x2fc>)
 8000a04:	f107 0408 	add.w	r4, r7, #8
 8000a08:	4e61      	ldr	r6, [pc, #388]	; (8000b90 <run_breaker+0x2fc>)
 8000a0a:	4a64      	ldr	r2, [pc, #400]	; (8000b9c <run_breaker+0x308>)
 8000a0c:	466b      	mov	r3, sp
 8000a0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000a14:	f106 030c 	add.w	r3, r6, #12
 8000a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f000 f9f0 	bl	8000e00 <add_clocks>
 8000a20:	f105 030c 	add.w	r3, r5, #12
 8000a24:	f107 0208 	add.w	r2, r7, #8
 8000a28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time1 = add_clocks(breaker.break_time1,temp_clock1);
 8000a2e:	4e58      	ldr	r6, [pc, #352]	; (8000b90 <run_breaker+0x2fc>)
 8000a30:	f107 0508 	add.w	r5, r7, #8
 8000a34:	4b56      	ldr	r3, [pc, #344]	; (8000b90 <run_breaker+0x2fc>)
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	466c      	mov	r4, sp
 8000a3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	330c      	adds	r3, #12
 8000a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	f000 f9d7 	bl	8000e00 <add_clocks>
 8000a52:	f106 030c 	add.w	r3, r6, #12
 8000a56:	f107 0208 	add.w	r2, r7, #8
 8000a5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration1 = add_clocks(breaker.break_duration1,temp_clock11);
 8000a60:	4e4b      	ldr	r6, [pc, #300]	; (8000b90 <run_breaker+0x2fc>)
 8000a62:	f107 0508 	add.w	r5, r7, #8
 8000a66:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <run_breaker+0x2fc>)
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	466c      	mov	r4, sp
 8000a6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a7e:	4628      	mov	r0, r5
 8000a80:	f000 f9be 	bl	8000e00 <add_clocks>
 8000a84:	f106 0318 	add.w	r3, r6, #24
 8000a88:	f107 0208 	add.w	r2, r7, #8
 8000a8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
	if(breaker.start_break[2] == 1){
 8000a92:	4b3f      	ldr	r3, [pc, #252]	; (8000b90 <run_breaker+0x2fc>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	f040 80aa 	bne.w	8000bf0 <run_breaker+0x35c>
		breaker.start_break[2] = 0;
 8000a9c:	4b3c      	ldr	r3, [pc, #240]	; (8000b90 <run_breaker+0x2fc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
		HAL_RNG_Init(&hrng);
 8000aa2:	483f      	ldr	r0, [pc, #252]	; (8000ba0 <run_breaker+0x30c>)
 8000aa4:	f003 fe62 	bl	800476c <HAL_RNG_Init>
		HAL_RNG_GenerateRandomNumber(&hrng,random2);
 8000aa8:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <run_breaker+0x320>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	483c      	ldr	r0, [pc, #240]	; (8000ba0 <run_breaker+0x30c>)
 8000ab0:	f003 feb3 	bl	800481a <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock2 = { .hour = 0, .minute = (30 + (*random2 - 30) % 31), .second = (*random2 % 60)};
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ab8:	4b3e      	ldr	r3, [pc, #248]	; (8000bb4 <run_breaker+0x320>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f1a3 011e 	sub.w	r1, r3, #30
 8000ac2:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <run_breaker+0x314>)
 8000ac4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ac8:	1aca      	subs	r2, r1, r3
 8000aca:	0852      	lsrs	r2, r2, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	091a      	lsrs	r2, r3, #4
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	015b      	lsls	r3, r3, #5
 8000ad4:	1a9b      	subs	r3, r3, r2
 8000ad6:	1aca      	subs	r2, r1, r3
 8000ad8:	f102 031e 	add.w	r3, r2, #30
 8000adc:	643b      	str	r3, [r7, #64]	; 0x40
 8000ade:	4b35      	ldr	r3, [pc, #212]	; (8000bb4 <run_breaker+0x320>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6819      	ldr	r1, [r3, #0]
 8000ae4:	4b31      	ldr	r3, [pc, #196]	; (8000bac <run_breaker+0x318>)
 8000ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8000aea:	095a      	lsrs	r2, r3, #5
 8000aec:	4613      	mov	r3, r2
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	1a9b      	subs	r3, r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	1aca      	subs	r2, r1, r3
 8000af6:	4613      	mov	r3, r2
 8000af8:	647b      	str	r3, [r7, #68]	; 0x44
		WallClock temp_clock22 = { .hour = 0, .minute = (*random2 % 5), .second = (*random2 % 60)};
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <run_breaker+0x320>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	6819      	ldr	r1, [r3, #0]
 8000b04:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <run_breaker+0x31c>)
 8000b06:	fba3 2301 	umull	r2, r3, r3, r1
 8000b0a:	089a      	lsrs	r2, r3, #2
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	1aca      	subs	r2, r1, r3
 8000b14:	4613      	mov	r3, r2
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <run_breaker+0x320>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	4b23      	ldr	r3, [pc, #140]	; (8000bac <run_breaker+0x318>)
 8000b20:	fba3 2301 	umull	r2, r3, r3, r1
 8000b24:	095a      	lsrs	r2, r3, #5
 8000b26:	4613      	mov	r3, r2
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	1a9b      	subs	r3, r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	1aca      	subs	r2, r1, r3
 8000b30:	4613      	mov	r3, r2
 8000b32:	63bb      	str	r3, [r7, #56]	; 0x38
		breaker.break_time2 = add_clocks(breaker.break_time2,Clock);
 8000b34:	4d16      	ldr	r5, [pc, #88]	; (8000b90 <run_breaker+0x2fc>)
 8000b36:	f107 0408 	add.w	r4, r7, #8
 8000b3a:	4e15      	ldr	r6, [pc, #84]	; (8000b90 <run_breaker+0x2fc>)
 8000b3c:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <run_breaker+0x308>)
 8000b3e:	466b      	mov	r3, sp
 8000b40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000b46:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000b4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	f000 f957 	bl	8000e00 <add_clocks>
 8000b52:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8000b56:	f107 0208 	add.w	r2, r7, #8
 8000b5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time2 = add_clocks(breaker.break_time2,temp_clock2);
 8000b60:	4e0b      	ldr	r6, [pc, #44]	; (8000b90 <run_breaker+0x2fc>)
 8000b62:	f107 0508 	add.w	r5, r7, #8
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <run_breaker+0x2fc>)
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	466c      	mov	r4, sp
 8000b6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3324      	adds	r3, #36	; 0x24
 8000b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b7e:	4628      	mov	r0, r5
 8000b80:	f000 f93e 	bl	8000e00 <add_clocks>
 8000b84:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000b88:	f107 0208 	add.w	r2, r7, #8
 8000b8c:	e014      	b.n	8000bb8 <run_breaker+0x324>
 8000b8e:	bf00      	nop
 8000b90:	20000094 	.word	0x20000094
 8000b94:	200003bc 	.word	0x200003bc
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	200002b8 	.word	0x200002b8
 8000ba4:	200000e8 	.word	0x200000e8
 8000ba8:	08421085 	.word	0x08421085
 8000bac:	88888889 	.word	0x88888889
 8000bb0:	cccccccd 	.word	0xcccccccd
 8000bb4:	200000ec 	.word	0x200000ec
 8000bb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration2 = add_clocks(breaker.break_duration2,temp_clock22);
 8000bbe:	4e5b      	ldr	r6, [pc, #364]	; (8000d2c <run_breaker+0x498>)
 8000bc0:	f107 0508 	add.w	r5, r7, #8
 8000bc4:	4b59      	ldr	r3, [pc, #356]	; (8000d2c <run_breaker+0x498>)
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	466c      	mov	r4, sp
 8000bca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3330      	adds	r3, #48	; 0x30
 8000bda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f000 f90f 	bl	8000e00 <add_clocks>
 8000be2:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8000be6:	f107 0208 	add.w	r2, r7, #8
 8000bea:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
	if(breaker.start_break[3] == 1){
 8000bf0:	4b4e      	ldr	r3, [pc, #312]	; (8000d2c <run_breaker+0x498>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	f040 8094 	bne.w	8000d22 <run_breaker+0x48e>
		breaker.start_break[3] = 0;
 8000bfa:	4b4c      	ldr	r3, [pc, #304]	; (8000d2c <run_breaker+0x498>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
		HAL_RNG_Init(&hrng);
 8000c00:	484b      	ldr	r0, [pc, #300]	; (8000d30 <run_breaker+0x49c>)
 8000c02:	f003 fdb3 	bl	800476c <HAL_RNG_Init>
		HAL_RNG_GenerateRandomNumber(&hrng,random3);
 8000c06:	4b4b      	ldr	r3, [pc, #300]	; (8000d34 <run_breaker+0x4a0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4848      	ldr	r0, [pc, #288]	; (8000d30 <run_breaker+0x49c>)
 8000c0e:	f003 fe04 	bl	800481a <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock3 = { .hour = 0, .minute = (30 + (*random3 - 30) % 31), .second = (*random3 % 60)};
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
 8000c16:	4b47      	ldr	r3, [pc, #284]	; (8000d34 <run_breaker+0x4a0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f1a3 011e 	sub.w	r1, r3, #30
 8000c20:	4b45      	ldr	r3, [pc, #276]	; (8000d38 <run_breaker+0x4a4>)
 8000c22:	fba3 2301 	umull	r2, r3, r3, r1
 8000c26:	1aca      	subs	r2, r1, r3
 8000c28:	0852      	lsrs	r2, r2, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	091a      	lsrs	r2, r3, #4
 8000c2e:	4613      	mov	r3, r2
 8000c30:	015b      	lsls	r3, r3, #5
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	1aca      	subs	r2, r1, r3
 8000c36:	f102 031e 	add.w	r3, r2, #30
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c3c:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <run_breaker+0x4a0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	6819      	ldr	r1, [r3, #0]
 8000c42:	4b3e      	ldr	r3, [pc, #248]	; (8000d3c <run_breaker+0x4a8>)
 8000c44:	fba3 2301 	umull	r2, r3, r3, r1
 8000c48:	095a      	lsrs	r2, r3, #5
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	1aca      	subs	r2, r1, r3
 8000c54:	4613      	mov	r3, r2
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
		WallClock temp_clock33 = { .hour = 0, .minute = (*random3 % 5), .second = (*random3 % 60)};
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	4b35      	ldr	r3, [pc, #212]	; (8000d34 <run_breaker+0x4a0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6819      	ldr	r1, [r3, #0]
 8000c62:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <run_breaker+0x4ac>)
 8000c64:	fba3 2301 	umull	r2, r3, r3, r1
 8000c68:	089a      	lsrs	r2, r3, #2
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	1aca      	subs	r2, r1, r3
 8000c72:	4613      	mov	r3, r2
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <run_breaker+0x4a0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6819      	ldr	r1, [r3, #0]
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <run_breaker+0x4a8>)
 8000c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8000c82:	095a      	lsrs	r2, r3, #5
 8000c84:	4613      	mov	r3, r2
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	1a9b      	subs	r3, r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	1aca      	subs	r2, r1, r3
 8000c8e:	4613      	mov	r3, r2
 8000c90:	623b      	str	r3, [r7, #32]
		breaker.break_time3 = add_clocks(breaker.break_time3,Clock);
 8000c92:	4d26      	ldr	r5, [pc, #152]	; (8000d2c <run_breaker+0x498>)
 8000c94:	f107 0408 	add.w	r4, r7, #8
 8000c98:	4e24      	ldr	r6, [pc, #144]	; (8000d2c <run_breaker+0x498>)
 8000c9a:	4a2a      	ldr	r2, [pc, #168]	; (8000d44 <run_breaker+0x4b0>)
 8000c9c:	466b      	mov	r3, sp
 8000c9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ca0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ca4:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 8000ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000caa:	4620      	mov	r0, r4
 8000cac:	f000 f8a8 	bl	8000e00 <add_clocks>
 8000cb0:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8000cb4:	f107 0208 	add.w	r2, r7, #8
 8000cb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time3 = add_clocks(breaker.break_time3,temp_clock3);
 8000cbe:	4e1b      	ldr	r6, [pc, #108]	; (8000d2c <run_breaker+0x498>)
 8000cc0:	f107 0508 	add.w	r5, r7, #8
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <run_breaker+0x498>)
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	466c      	mov	r4, sp
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	333c      	adds	r3, #60	; 0x3c
 8000cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cdc:	4628      	mov	r0, r5
 8000cde:	f000 f88f 	bl	8000e00 <add_clocks>
 8000ce2:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 8000ce6:	f107 0208 	add.w	r2, r7, #8
 8000cea:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration3 =  add_clocks(breaker.break_duration3,temp_clock33);
 8000cf0:	4e0e      	ldr	r6, [pc, #56]	; (8000d2c <run_breaker+0x498>)
 8000cf2:	f107 0508 	add.w	r5, r7, #8
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <run_breaker+0x498>)
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	466c      	mov	r4, sp
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3348      	adds	r3, #72	; 0x48
 8000d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d0e:	4628      	mov	r0, r5
 8000d10:	f000 f876 	bl	8000e00 <add_clocks>
 8000d14:	f106 0348 	add.w	r3, r6, #72	; 0x48
 8000d18:	f107 0208 	add.w	r2, r7, #8
 8000d1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}

}
 8000d22:	bf00      	nop
 8000d24:	3764      	adds	r7, #100	; 0x64
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000094 	.word	0x20000094
 8000d30:	200002b8 	.word	0x200002b8
 8000d34:	200000f0 	.word	0x200000f0
 8000d38:	08421085 	.word	0x08421085
 8000d3c:	88888889 	.word	0x88888889
 8000d40:	cccccccd 	.word	0xcccccccd
 8000d44:	20000000 	.word	0x20000000

08000d48 <clock_init>:
//The main clock to be checked by the program
//Declare extern within the header file
WallClock Clock = {.hour = 9, .minute = 0, .second = 0};


WallClock clock_init(WallClock the_clock) {
 8000d48:	b490      	push	{r4, r7}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	4638      	mov	r0, r7
 8000d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Initialize the main clock
	the_clock.hour = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
	the_clock.minute = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
	the_clock.second = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]

	return the_clock;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	461c      	mov	r4, r3
 8000d66:	463b      	mov	r3, r7
 8000d68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000d70:	68f8      	ldr	r0, [r7, #12]
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc90      	pop	{r4, r7}
 8000d78:	4770      	bx	lr

08000d7a <day_init>:

WallClock day_init(WallClock the_clock) {
 8000d7a:	b490      	push	{r4, r7}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	4638      	mov	r0, r7
 8000d84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Initialize the main clock
	the_clock.hour = 9;
 8000d88:	2309      	movs	r3, #9
 8000d8a:	603b      	str	r3, [r7, #0]
	the_clock.minute = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
	the_clock.second = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]

	return the_clock;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	461c      	mov	r4, r3
 8000d98:	463b      	mov	r3, r7
 8000d9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc90      	pop	{r4, r7}
 8000daa:	4770      	bx	lr

08000dac <clock_increment>:

WallClock clock_increment(WallClock the_clock){
 8000dac:	b490      	push	{r4, r7}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	4638      	mov	r0, r7
 8000db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Check if second is full, if so then increment
	//minute count and reset second count to 0
	//if minute count full increment hour count and reset minutes to 0
	if(the_clock.second >= 59){
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	2b3a      	cmp	r3, #58	; 0x3a
 8000dbe:	dd10      	ble.n	8000de2 <clock_increment+0x36>
		the_clock.second -= 59;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	3b3b      	subs	r3, #59	; 0x3b
 8000dc4:	60bb      	str	r3, [r7, #8]
		if(the_clock.minute >= 59){
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b3a      	cmp	r3, #58	; 0x3a
 8000dca:	dd06      	ble.n	8000dda <clock_increment+0x2e>
			the_clock.minute -= 59;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b3b      	subs	r3, #59	; 0x3b
 8000dd0:	607b      	str	r3, [r7, #4]
			the_clock.hour += 1;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	e006      	b.n	8000de8 <clock_increment+0x3c>
		}
		else{
			the_clock.minute += 1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	e002      	b.n	8000de8 <clock_increment+0x3c>
		}
	}
	else{
		the_clock.second += 1;
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
	}
	return the_clock;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	461c      	mov	r4, r3
 8000dec:	463b      	mov	r3, r7
 8000dee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000df2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc90      	pop	{r4, r7}
 8000dfe:	4770      	bx	lr

08000e00 <add_clocks>:

WallClock add_clocks(WallClock Clock1, WallClock Clock2){
 8000e00:	b490      	push	{r4, r7}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	4638      	mov	r0, r7
 8000e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Adds seconds then minutes then hours, accounting for overflows as needed
	//Add seconds and account overflow
	Clock1.second += Clock2.second;
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	6a3b      	ldr	r3, [r7, #32]
 8000e12:	4413      	add	r3, r2
 8000e14:	60bb      	str	r3, [r7, #8]
	if(Clock1.second >= 60){
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	2b3b      	cmp	r3, #59	; 0x3b
 8000e1a:	dd0e      	ble.n	8000e3a <add_clocks+0x3a>
		Clock1.minute += 1;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
		Clock1.second -= 60;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	3b3c      	subs	r3, #60	; 0x3c
 8000e26:	60bb      	str	r3, [r7, #8]
		if(Clock1.minute >= 60){
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b3b      	cmp	r3, #59	; 0x3b
 8000e2c:	dd05      	ble.n	8000e3a <add_clocks+0x3a>
			Clock1.hour += 1;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	603b      	str	r3, [r7, #0]
			Clock1.minute -= 60;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b3c      	subs	r3, #60	; 0x3c
 8000e38:	607b      	str	r3, [r7, #4]
		}
	}
	//Add minutes and account overflow
	Clock1.minute += Clock2.minute;
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	4413      	add	r3, r2
 8000e40:	607b      	str	r3, [r7, #4]
	if(Clock1.minute >= 60){
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b3b      	cmp	r3, #59	; 0x3b
 8000e46:	dd05      	ble.n	8000e54 <add_clocks+0x54>
		Clock1.hour += 1;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	603b      	str	r3, [r7, #0]
		Clock1.minute -= 60;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3b3c      	subs	r3, #60	; 0x3c
 8000e52:	607b      	str	r3, [r7, #4]
	}
	//Add hours, don't account overflow as impossible
	Clock1.hour += Clock2.hour;
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4413      	add	r3, r2
 8000e5a:	603b      	str	r3, [r7, #0]

	return Clock1;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	461c      	mov	r4, r3
 8000e60:	463b      	mov	r3, r7
 8000e62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc90      	pop	{r4, r7}
 8000e72:	4770      	bx	lr

08000e74 <clock_compare>:

//if clock 1 is greater than clock 2(later) then return 0
//if clock 1 is less than clock 2(earlier) then return 2
int clock_compare(WallClock Clock1, WallClock Clock2){
 8000e74:	b082      	sub	sp, #8
 8000e76:	b490      	push	{r4, r7}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	1d3c      	adds	r4, r7, #4
 8000e7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e82:	61fb      	str	r3, [r7, #28]
	if(Clock1.hour == Clock2.hour){
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d121      	bne.n	8000ed0 <clock_compare+0x5c>
		if(Clock1.minute == Clock2.minute){
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d111      	bne.n	8000eb8 <clock_compare+0x44>
			if(Clock1.second == Clock2.second){
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d101      	bne.n	8000ea0 <clock_compare+0x2c>
				return 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e024      	b.n	8000eea <clock_compare+0x76>
			}
			else if(Clock1.second > Clock2.second){
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dd01      	ble.n	8000eac <clock_compare+0x38>
				return 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e01e      	b.n	8000eea <clock_compare+0x76>
			}
			else if(Clock1.second < Clock2.second){
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	da19      	bge.n	8000ee8 <clock_compare+0x74>
				return 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e018      	b.n	8000eea <clock_compare+0x76>
			}
		}
		else if(Clock1.minute > Clock2.minute){
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	6a3b      	ldr	r3, [r7, #32]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dd01      	ble.n	8000ec4 <clock_compare+0x50>
			return 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e012      	b.n	8000eea <clock_compare+0x76>
		}
		else if(Clock1.minute < Clock2.minute){
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	6a3b      	ldr	r3, [r7, #32]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	da0d      	bge.n	8000ee8 <clock_compare+0x74>
			return 2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e00c      	b.n	8000eea <clock_compare+0x76>
		}
	}
	else if(Clock1.hour > Clock2.hour){
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dd01      	ble.n	8000edc <clock_compare+0x68>
		return 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e006      	b.n	8000eea <clock_compare+0x76>
	}
	else if(Clock1.hour < Clock2.hour){
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	da01      	bge.n	8000ee8 <clock_compare+0x74>
		return 2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e000      	b.n	8000eea <clock_compare+0x76>
	}
	return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc90      	pop	{r4, r7}
 8000ef2:	b002      	add	sp, #8
 8000ef4:	4770      	bx	lr
	...

08000ef8 <subtract_Clocks>:

WallClock subtract_Clocks(WallClock clock1, WallClock clock2) {
 8000ef8:	b490      	push	{r4, r7}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	4638      	mov	r0, r7
 8000f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    WallClock result;

    // Convert both clocks to total seconds
    int totalSeconds1 = clock1.hour * 3600 + clock1.minute * 60 + clock1.second;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f0c:	fb02 f103 	mul.w	r1, r2, r3
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	1a9b      	subs	r3, r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	18ca      	adds	r2, r1, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4413      	add	r3, r2
 8000f20:	623b      	str	r3, [r7, #32]
    int totalSeconds2 = clock2.hour * 3600 + clock2.minute * 60 + clock2.second;
 8000f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f24:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f28:	fb02 f103 	mul.w	r1, r2, r3
 8000f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f2e:	4613      	mov	r3, r2
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	1a9b      	subs	r3, r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	18ca      	adds	r2, r1, r3
 8000f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f3a:	4413      	add	r3, r2
 8000f3c:	61fb      	str	r3, [r7, #28]

    // Calculate the difference in total seconds
    int diffSeconds = totalSeconds1 - totalSeconds2;
 8000f3e:	6a3a      	ldr	r2, [r7, #32]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24

    // Handle negative differences
    if (diffSeconds < 0) {
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da05      	bge.n	8000f58 <subtract_Clocks+0x60>
        diffSeconds += 24 * 3600; // Assuming clocks are within a 24-hour period
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8000f52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Convert difference back to clock format
    result.hour = diffSeconds / 3600;
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	4a1d      	ldr	r2, [pc, #116]	; (8000fd0 <subtract_Clocks+0xd8>)
 8000f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f60:	441a      	add	r2, r3
 8000f62:	12d2      	asrs	r2, r2, #11
 8000f64:	17db      	asrs	r3, r3, #31
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	613b      	str	r3, [r7, #16]
    diffSeconds %= 3600;
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <subtract_Clocks+0xd8>)
 8000f6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f72:	441a      	add	r2, r3
 8000f74:	12d1      	asrs	r1, r2, #11
 8000f76:	17da      	asrs	r2, r3, #31
 8000f78:	1a8a      	subs	r2, r1, r2
 8000f7a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000f7e:	fb01 f202 	mul.w	r2, r1, r2
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    result.minute = diffSeconds / 60;
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <subtract_Clocks+0xdc>)
 8000f8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f8e:	441a      	add	r2, r3
 8000f90:	1152      	asrs	r2, r2, #5
 8000f92:	17db      	asrs	r3, r3, #31
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	617b      	str	r3, [r7, #20]
    result.second = diffSeconds % 60;
 8000f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <subtract_Clocks+0xdc>)
 8000f9c:	fb83 1302 	smull	r1, r3, r3, r2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	1159      	asrs	r1, r3, #5
 8000fa4:	17d3      	asrs	r3, r2, #31
 8000fa6:	1ac9      	subs	r1, r1, r3
 8000fa8:	460b      	mov	r3, r1
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	1a5b      	subs	r3, r3, r1
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	1ad1      	subs	r1, r2, r3
 8000fb2:	61b9      	str	r1, [r7, #24]

    return result;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	461c      	mov	r4, r3
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc90      	pop	{r4, r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	91a2b3c5 	.word	0x91a2b3c5
 8000fd4:	88888889 	.word	0x88888889

08000fd8 <init_customer>:
WallClock total_customer_wait;
WallClock max_customer_wait;
int total_customers;
WallClock fiveOclockSomewhere = {.hour = 17, .minute = 0, .second = 0};

void init_customer(){
 8000fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af04      	add	r7, sp, #16
	total_customers = 0;
 8000fde:	4b2f      	ldr	r3, [pc, #188]	; (800109c <init_customer+0xc4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
	total_customer_wait = clock_init(total_customer_wait);
 8000fe4:	4c2e      	ldr	r4, [pc, #184]	; (80010a0 <init_customer+0xc8>)
 8000fe6:	4638      	mov	r0, r7
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <init_customer+0xc8>)
 8000fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fec:	f7ff feac 	bl	8000d48 <clock_init>
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	max_customer_waiting = 0;
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <init_customer+0xcc>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
	max_customer_wait = clock_init(max_customer_wait);
 8001000:	4c29      	ldr	r4, [pc, #164]	; (80010a8 <init_customer+0xd0>)
 8001002:	4638      	mov	r0, r7
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <init_customer+0xd0>)
 8001006:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001008:	f7ff fe9e 	bl	8000d48 <clock_init>
 800100c:	463b      	mov	r3, r7
 800100e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001012:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	waiting_customers = 0;
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <init_customer+0xd4>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
	HAL_RNG_GenerateRandomNumber(&hrng, random_new_customer);
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <init_customer+0xd8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	4824      	ldr	r0, [pc, #144]	; (80010b4 <init_customer+0xdc>)
 8001024:	f003 fbf9 	bl	800481a <HAL_RNG_GenerateRandomNumber>
	new_customer_time->hour = 0;
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <init_customer+0xe0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
	new_customer_time->minute = (*random_new_customer % 5);
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <init_customer+0xd8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6819      	ldr	r1, [r3, #0]
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <init_customer+0xe4>)
 8001038:	fba3 2301 	umull	r2, r3, r3, r1
 800103c:	089a      	lsrs	r2, r3, #2
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	1aca      	subs	r2, r1, r3
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <init_customer+0xe0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
	new_customer_time->second = (*random_new_customer % 60);
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <init_customer+0xd8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6819      	ldr	r1, [r3, #0]
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <init_customer+0xe8>)
 8001054:	fba3 2301 	umull	r2, r3, r3, r1
 8001058:	095a      	lsrs	r2, r3, #5
 800105a:	4613      	mov	r3, r2
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	1a9b      	subs	r3, r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	1aca      	subs	r2, r1, r3
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <init_customer+0xe0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	609a      	str	r2, [r3, #8]
	*new_customer_time = add_clocks(*new_customer_time, Clock);
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <init_customer+0xe0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <init_customer+0xe0>)
 8001070:	6816      	ldr	r6, [r2, #0]
 8001072:	463d      	mov	r5, r7
 8001074:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <init_customer+0xec>)
 8001076:	466c      	mov	r4, sp
 8001078:	ca07      	ldmia	r2, {r0, r1, r2}
 800107a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800107e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001080:	4628      	mov	r0, r5
 8001082:	f7ff febd 	bl	8000e00 <add_clocks>
 8001086:	4634      	mov	r4, r6
 8001088:	463b      	mov	r3, r7
 800108a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800108e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800109a:	bf00      	nop
 800109c:	200002b4 	.word	0x200002b4
 80010a0:	2000029c 	.word	0x2000029c
 80010a4:	200000f4 	.word	0x200000f4
 80010a8:	200002a8 	.word	0x200002a8
 80010ac:	200000f8 	.word	0x200000f8
 80010b0:	20000294 	.word	0x20000294
 80010b4:	200002b8 	.word	0x200002b8
 80010b8:	2000028c 	.word	0x2000028c
 80010bc:	cccccccd 	.word	0xcccccccd
 80010c0:	88888889 	.word	0x88888889
 80010c4:	20000000 	.word	0x20000000

080010c8 <run_customer>:


void run_customer(){
 80010c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ca:	b091      	sub	sp, #68	; 0x44
 80010cc:	af04      	add	r7, sp, #16
	// shift customers if first customers want to
	if((waiting[0] == NULL) && waiting[1] != NULL){
 80010ce:	4b7e      	ldr	r3, [pc, #504]	; (80012c8 <run_customer+0x200>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d11c      	bne.n	8001110 <run_customer+0x48>
 80010d6:	4b7c      	ldr	r3, [pc, #496]	; (80012c8 <run_customer+0x200>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d018      	beq.n	8001110 <run_customer+0x48>
		for (int i = 0; i < waiting_customers; i++){
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010e2:	e00b      	b.n	80010fc <run_customer+0x34>
			waiting[i] = waiting[i+1];
 80010e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e6:	3301      	adds	r3, #1
 80010e8:	4a77      	ldr	r2, [pc, #476]	; (80012c8 <run_customer+0x200>)
 80010ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010ee:	4976      	ldr	r1, [pc, #472]	; (80012c8 <run_customer+0x200>)
 80010f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < waiting_customers; i++){
 80010f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f8:	3301      	adds	r3, #1
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010fc:	4b73      	ldr	r3, [pc, #460]	; (80012cc <run_customer+0x204>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001102:	429a      	cmp	r2, r3
 8001104:	dbee      	blt.n	80010e4 <run_customer+0x1c>
		}
		waiting_customers--;
 8001106:	4b71      	ldr	r3, [pc, #452]	; (80012cc <run_customer+0x204>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3b01      	subs	r3, #1
 800110c:	4a6f      	ldr	r2, [pc, #444]	; (80012cc <run_customer+0x204>)
 800110e:	6013      	str	r3, [r2, #0]
	}

	for (int i = 0; i < waiting_customers; i++){
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
 8001114:	e015      	b.n	8001142 <run_customer+0x7a>
		waiting[i]->total_queue_time = clock_increment(waiting[i]->total_queue_time);
 8001116:	4a6c      	ldr	r2, [pc, #432]	; (80012c8 <run_customer+0x200>)
 8001118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111e:	496a      	ldr	r1, [pc, #424]	; (80012c8 <run_customer+0x200>)
 8001120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001122:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8001126:	4638      	mov	r0, r7
 8001128:	3328      	adds	r3, #40	; 0x28
 800112a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800112c:	f7ff fe3e 	bl	8000dac <clock_increment>
 8001130:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8001134:	463a      	mov	r2, r7
 8001136:	ca07      	ldmia	r2, {r0, r1, r2}
 8001138:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < waiting_customers; i++){
 800113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113e:	3301      	adds	r3, #1
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
 8001142:	4b62      	ldr	r3, [pc, #392]	; (80012cc <run_customer+0x204>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001148:	429a      	cmp	r2, r3
 800114a:	dbe4      	blt.n	8001116 <run_customer+0x4e>
	}

	// add new customer if enough time has passed
	if (clock_compare(Clock, *new_customer_time) == 1 && clock_compare(Clock, fiveOclockSomewhere) == 2){
 800114c:	4b60      	ldr	r3, [pc, #384]	; (80012d0 <run_customer+0x208>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a60      	ldr	r2, [pc, #384]	; (80012d4 <run_customer+0x20c>)
 8001152:	466c      	mov	r4, sp
 8001154:	1d19      	adds	r1, r3, #4
 8001156:	c903      	ldmia	r1, {r0, r1}
 8001158:	e884 0003 	stmia.w	r4, {r0, r1}
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001160:	f7ff fe88 	bl	8000e74 <clock_compare>
 8001164:	4603      	mov	r3, r0
 8001166:	2b01      	cmp	r3, #1
 8001168:	f040 8093 	bne.w	8001292 <run_customer+0x1ca>
 800116c:	4b5a      	ldr	r3, [pc, #360]	; (80012d8 <run_customer+0x210>)
 800116e:	4a59      	ldr	r2, [pc, #356]	; (80012d4 <run_customer+0x20c>)
 8001170:	466c      	mov	r4, sp
 8001172:	1d19      	adds	r1, r3, #4
 8001174:	c903      	ldmia	r1, {r0, r1}
 8001176:	e884 0003 	stmia.w	r4, {r0, r1}
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	ca07      	ldmia	r2, {r0, r1, r2}
 800117e:	f7ff fe79 	bl	8000e74 <clock_compare>
 8001182:	4603      	mov	r3, r0
 8001184:	2b02      	cmp	r3, #2
 8001186:	f040 8084 	bne.w	8001292 <run_customer+0x1ca>
		HAL_RNG_GenerateRandomNumber(&hrng, random_service_time);
 800118a:	4b54      	ldr	r3, [pc, #336]	; (80012dc <run_customer+0x214>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	4853      	ldr	r0, [pc, #332]	; (80012e0 <run_customer+0x218>)
 8001192:	f003 fb42 	bl	800481a <HAL_RNG_GenerateRandomNumber>
		WallClock service_time = { .hour = 0, .minute = (*random_service_time % 7), .second = (*random_service_time % 60)};
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	4b50      	ldr	r3, [pc, #320]	; (80012dc <run_customer+0x214>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b50      	ldr	r3, [pc, #320]	; (80012e4 <run_customer+0x21c>)
 80011a2:	fba3 1302 	umull	r1, r3, r3, r2
 80011a6:	1ad1      	subs	r1, r2, r3
 80011a8:	0849      	lsrs	r1, r1, #1
 80011aa:	440b      	add	r3, r1
 80011ac:	0899      	lsrs	r1, r3, #2
 80011ae:	460b      	mov	r3, r1
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	1a5b      	subs	r3, r3, r1
 80011b4:	1ad1      	subs	r1, r2, r3
 80011b6:	460b      	mov	r3, r1
 80011b8:	623b      	str	r3, [r7, #32]
 80011ba:	4b48      	ldr	r3, [pc, #288]	; (80012dc <run_customer+0x214>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6819      	ldr	r1, [r3, #0]
 80011c0:	4b49      	ldr	r3, [pc, #292]	; (80012e8 <run_customer+0x220>)
 80011c2:	fba3 2301 	umull	r2, r3, r3, r1
 80011c6:	095a      	lsrs	r2, r3, #5
 80011c8:	4613      	mov	r3, r2
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	1a9b      	subs	r3, r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	1aca      	subs	r2, r1, r3
 80011d2:	4613      	mov	r3, r2
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
		c->service_time = service_time;
 80011d6:	4b45      	ldr	r3, [pc, #276]	; (80012ec <run_customer+0x224>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3304      	adds	r3, #4
 80011dc:	f107 021c 	add.w	r2, r7, #28
 80011e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		c->entered_queue_time = Clock;
 80011e6:	4b41      	ldr	r3, [pc, #260]	; (80012ec <run_customer+0x224>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a3a      	ldr	r2, [pc, #232]	; (80012d4 <run_customer+0x20c>)
 80011ec:	3310      	adds	r3, #16
 80011ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		c->total_queue_time = (WallClock) {.hour = 0, .minute = 0, .second = 0};
 80011f4:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <run_customer+0x224>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2200      	movs	r2, #0
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
 80011fc:	2200      	movs	r2, #0
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001200:	2200      	movs	r2, #0
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
		waiting[waiting_customers] = c;
 8001204:	4b31      	ldr	r3, [pc, #196]	; (80012cc <run_customer+0x204>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a38      	ldr	r2, [pc, #224]	; (80012ec <run_customer+0x224>)
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	492e      	ldr	r1, [pc, #184]	; (80012c8 <run_customer+0x200>)
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_RNG_GenerateRandomNumber(&hrng, random_new_customer);
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <run_customer+0x228>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	4831      	ldr	r0, [pc, #196]	; (80012e0 <run_customer+0x218>)
 800121a:	f003 fafe 	bl	800481a <HAL_RNG_GenerateRandomNumber>
		new_customer_time->hour = 0;
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <run_customer+0x208>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
		new_customer_time->minute = (*random_new_customer % 5);
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <run_customer+0x228>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6819      	ldr	r1, [r3, #0]
 800122c:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <run_customer+0x22c>)
 800122e:	fba3 2301 	umull	r2, r3, r3, r1
 8001232:	089a      	lsrs	r2, r3, #2
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	1aca      	subs	r2, r1, r3
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <run_customer+0x208>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
		new_customer_time->second = (*random_new_customer % 60);
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <run_customer+0x228>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6819      	ldr	r1, [r3, #0]
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <run_customer+0x220>)
 800124a:	fba3 2301 	umull	r2, r3, r3, r1
 800124e:	095a      	lsrs	r2, r3, #5
 8001250:	4613      	mov	r3, r2
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	1a9b      	subs	r3, r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	1aca      	subs	r2, r1, r3
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <run_customer+0x208>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	609a      	str	r2, [r3, #8]
		*new_customer_time = add_clocks(*new_customer_time, Clock);
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <run_customer+0x208>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <run_customer+0x208>)
 8001266:	6816      	ldr	r6, [r2, #0]
 8001268:	463d      	mov	r5, r7
 800126a:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <run_customer+0x20c>)
 800126c:	466c      	mov	r4, sp
 800126e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001274:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001276:	4628      	mov	r0, r5
 8001278:	f7ff fdc2 	bl	8000e00 <add_clocks>
 800127c:	4634      	mov	r4, r6
 800127e:	463b      	mov	r3, r7
 8001280:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001284:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		total_customers += 1;
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <run_customer+0x230>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <run_customer+0x230>)
 8001290:	6013      	str	r3, [r2, #0]
	}

	// update max customers waiting
	if (max_customer_waiting < waiting_customers){
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <run_customer+0x234>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <run_customer+0x204>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	da03      	bge.n	80012a6 <run_customer+0x1de>
		max_customer_waiting = waiting_customers;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <run_customer+0x204>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a16      	ldr	r2, [pc, #88]	; (80012fc <run_customer+0x234>)
 80012a4:	6013      	str	r3, [r2, #0]
	}

	  shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, waiting_customers);
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <run_customer+0x204>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012bc:	f000 f820 	bl	8001300 <shiftOut>

}
 80012c0:	bf00      	nop
 80012c2:	3734      	adds	r7, #52	; 0x34
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c8:	200000fc 	.word	0x200000fc
 80012cc:	200000f8 	.word	0x200000f8
 80012d0:	2000028c 	.word	0x2000028c
 80012d4:	20000000 	.word	0x20000000
 80012d8:	2000000c 	.word	0x2000000c
 80012dc:	20000290 	.word	0x20000290
 80012e0:	200002b8 	.word	0x200002b8
 80012e4:	24924925 	.word	0x24924925
 80012e8:	88888889 	.word	0x88888889
 80012ec:	20000298 	.word	0x20000298
 80012f0:	20000294 	.word	0x20000294
 80012f4:	cccccccd 	.word	0xcccccccd
 80012f8:	200002b4 	.word	0x200002b4
 80012fc:	200000f4 	.word	0x200000f4

08001300 <shiftOut>:


void shiftOut(GPIO_TypeDef* data_port, uint16_t data_pin, GPIO_TypeDef* clock_port, uint16_t clock_pin, uint8_t value) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	461a      	mov	r2, r3
 800130c:	460b      	mov	r3, r1
 800130e:	817b      	strh	r3, [r7, #10]
 8001310:	4613      	mov	r3, r2
 8001312:	813b      	strh	r3, [r7, #8]
	for(int ii=0x80; ii; ii>>=1) {
 8001314:	2380      	movs	r3, #128	; 0x80
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e01d      	b.n	8001356 <shiftOut+0x56>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_RESET);
 800131a:	893b      	ldrh	r3, [r7, #8]
 800131c:	2200      	movs	r2, #0
 800131e:	4619      	mov	r1, r3
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f001 feeb 	bl	80030fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pin, (value&ii)!=0);
 8001326:	f897 2020 	ldrb.w	r2, [r7, #32]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	bf14      	ite	ne
 8001332:	2301      	movne	r3, #1
 8001334:	2300      	moveq	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	897b      	ldrh	r3, [r7, #10]
 800133c:	4619      	mov	r1, r3
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f001 fedc 	bl	80030fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_SET);
 8001344:	893b      	ldrh	r3, [r7, #8]
 8001346:	2201      	movs	r2, #1
 8001348:	4619      	mov	r1, r3
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f001 fed6 	bl	80030fc <HAL_GPIO_WritePin>
	for(int ii=0x80; ii; ii>>=1) {
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	105b      	asrs	r3, r3, #1
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1de      	bne.n	800131a <shiftOut+0x1a>
	}
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136c:	f001 fb76 	bl	8002a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001370:	f000 f862 	bl	8001438 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001374:	f000 f92c 	bl	80015d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001378:	f000 f8fa 	bl	8001570 <MX_USART2_UART_Init>
  MX_RNG_Init();
 800137c:	f000 f8ae 	bl	80014dc <MX_RNG_Init>
  MX_TIM6_Init();
 8001380:	f000 f8c0 	bl	8001504 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001384:	481a      	ldr	r0, [pc, #104]	; (80013f0 <main+0x88>)
 8001386:	f003 fb75 	bl	8004a74 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800138a:	f004 fc27 	bl	8005bdc <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 800138e:	4819      	ldr	r0, [pc, #100]	; (80013f4 <main+0x8c>)
 8001390:	f004 fd1b 	bl	8005dca <osMutexNew>
 8001394:	4603      	mov	r3, r0
 8001396:	4a18      	ldr	r2, [pc, #96]	; (80013f8 <main+0x90>)
 8001398:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tellers */
  TellersHandle = osThreadNew(StartTellers, NULL, &Tellers_attributes);
 800139a:	4a18      	ldr	r2, [pc, #96]	; (80013fc <main+0x94>)
 800139c:	2100      	movs	r1, #0
 800139e:	4818      	ldr	r0, [pc, #96]	; (8001400 <main+0x98>)
 80013a0:	f004 fc66 	bl	8005c70 <osThreadNew>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <main+0x9c>)
 80013a8:	6013      	str	r3, [r2, #0]

  /* creation of Customers */
  CustomersHandle = osThreadNew(StartCustomers, NULL, &Customers_attributes);
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <main+0xa0>)
 80013ac:	2100      	movs	r1, #0
 80013ae:	4817      	ldr	r0, [pc, #92]	; (800140c <main+0xa4>)
 80013b0:	f004 fc5e 	bl	8005c70 <osThreadNew>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a16      	ldr	r2, [pc, #88]	; (8001410 <main+0xa8>)
 80013b8:	6013      	str	r3, [r2, #0]

  /* creation of Clock */
  ClockHandle = osThreadNew(StartClock, NULL, &Clock_attributes);
 80013ba:	4a16      	ldr	r2, [pc, #88]	; (8001414 <main+0xac>)
 80013bc:	2100      	movs	r1, #0
 80013be:	4816      	ldr	r0, [pc, #88]	; (8001418 <main+0xb0>)
 80013c0:	f004 fc56 	bl	8005c70 <osThreadNew>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a15      	ldr	r2, [pc, #84]	; (800141c <main+0xb4>)
 80013c8:	6013      	str	r3, [r2, #0]

  /* creation of Manager */
  ManagerHandle = osThreadNew(StartManager, NULL, &Manager_attributes);
 80013ca:	4a15      	ldr	r2, [pc, #84]	; (8001420 <main+0xb8>)
 80013cc:	2100      	movs	r1, #0
 80013ce:	4815      	ldr	r0, [pc, #84]	; (8001424 <main+0xbc>)
 80013d0:	f004 fc4e 	bl	8005c70 <osThreadNew>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a14      	ldr	r2, [pc, #80]	; (8001428 <main+0xc0>)
 80013d8:	6013      	str	r3, [r2, #0]

  /* creation of Breaker */
  BreakerHandle = osThreadNew(StartBreaker, NULL, &Breaker_attributes);
 80013da:	4a14      	ldr	r2, [pc, #80]	; (800142c <main+0xc4>)
 80013dc:	2100      	movs	r1, #0
 80013de:	4814      	ldr	r0, [pc, #80]	; (8001430 <main+0xc8>)
 80013e0:	f004 fc46 	bl	8005c70 <osThreadNew>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4a13      	ldr	r2, [pc, #76]	; (8001434 <main+0xcc>)
 80013e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013ea:	f004 fc1b 	bl	8005c24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <main+0x86>
 80013f0:	200002c8 	.word	0x200002c8
 80013f4:	080099a8 	.word	0x080099a8
 80013f8:	200003b0 	.word	0x200003b0
 80013fc:	080098f4 	.word	0x080098f4
 8001400:	08001729 	.word	0x08001729
 8001404:	2000039c 	.word	0x2000039c
 8001408:	08009918 	.word	0x08009918
 800140c:	08001759 	.word	0x08001759
 8001410:	200003a0 	.word	0x200003a0
 8001414:	0800993c 	.word	0x0800993c
 8001418:	08001789 	.word	0x08001789
 800141c:	200003a4 	.word	0x200003a4
 8001420:	08009960 	.word	0x08009960
 8001424:	080018e5 	.word	0x080018e5
 8001428:	200003a8 	.word	0x200003a8
 800142c:	08009984 	.word	0x08009984
 8001430:	080018f5 	.word	0x080018f5
 8001434:	200003ac 	.word	0x200003ac

08001438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b096      	sub	sp, #88	; 0x58
 800143c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	2244      	movs	r2, #68	; 0x44
 8001444:	2100      	movs	r1, #0
 8001446:	4618      	mov	r0, r3
 8001448:	f007 fd68 	bl	8008f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800145a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800145e:	f001 fe73 	bl	8003148 <HAL_PWREx_ControlVoltageScaling>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001468:	f000 fa5c 	bl	8001924 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800146c:	2302      	movs	r3, #2
 800146e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001474:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001476:	2310      	movs	r3, #16
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147a:	2302      	movs	r3, #2
 800147c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800147e:	2302      	movs	r3, #2
 8001480:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001482:	2301      	movs	r3, #1
 8001484:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001486:	230a      	movs	r3, #10
 8001488:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800148a:	2307      	movs	r3, #7
 800148c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800148e:	2302      	movs	r3, #2
 8001490:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001492:	2302      	movs	r3, #2
 8001494:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4618      	mov	r0, r3
 800149c:	f001 feaa 	bl	80031f4 <HAL_RCC_OscConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80014a6:	f000 fa3d 	bl	8001924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014aa:	230f      	movs	r3, #15
 80014ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ae:	2303      	movs	r3, #3
 80014b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014be:	463b      	mov	r3, r7
 80014c0:	2104      	movs	r1, #4
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fa72 	bl	80039ac <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014ce:	f000 fa29 	bl	8001924 <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3758      	adds	r7, #88	; 0x58
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_RNG_Init+0x20>)
 80014e2:	4a07      	ldr	r2, [pc, #28]	; (8001500 <MX_RNG_Init+0x24>)
 80014e4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_RNG_Init+0x20>)
 80014e8:	f003 f940 	bl	800476c <HAL_RNG_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80014f2:	f000 fa17 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200002b8 	.word	0x200002b8
 8001500:	50060800 	.word	0x50060800

08001504 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_TIM6_Init+0x64>)
 8001516:	4a15      	ldr	r2, [pc, #84]	; (800156c <MX_TIM6_Init+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 125;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <MX_TIM6_Init+0x64>)
 800151c:	227d      	movs	r2, #125	; 0x7d
 800151e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_TIM6_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_TIM6_Init+0x64>)
 8001528:	2264      	movs	r2, #100	; 0x64
 800152a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_TIM6_Init+0x64>)
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_TIM6_Init+0x64>)
 8001534:	f003 fa46 	bl	80049c4 <HAL_TIM_Base_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800153e:	f000 f9f1 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4806      	ldr	r0, [pc, #24]	; (8001568 <MX_TIM6_Init+0x64>)
 8001550:	f003 fcc4 	bl	8004edc <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800155a:	f000 f9e3 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200002c8 	.word	0x200002c8
 800156c:	40001000 	.word	0x40001000

08001570 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 8001576:	4a15      	ldr	r2, [pc, #84]	; (80015cc <MX_USART2_UART_Init+0x5c>)
 8001578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USART2_UART_Init+0x58>)
 80015b4:	f003 fd38 	bl	8005028 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015be:	f000 f9b1 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000314 	.word	0x20000314
 80015cc:	40004400 	.word	0x40004400

080015d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	4b45      	ldr	r3, [pc, #276]	; (80016fc <MX_GPIO_Init+0x12c>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	4a44      	ldr	r2, [pc, #272]	; (80016fc <MX_GPIO_Init+0x12c>)
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f2:	4b42      	ldr	r3, [pc, #264]	; (80016fc <MX_GPIO_Init+0x12c>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fe:	4b3f      	ldr	r3, [pc, #252]	; (80016fc <MX_GPIO_Init+0x12c>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	4a3e      	ldr	r2, [pc, #248]	; (80016fc <MX_GPIO_Init+0x12c>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160a:	4b3c      	ldr	r3, [pc, #240]	; (80016fc <MX_GPIO_Init+0x12c>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b39      	ldr	r3, [pc, #228]	; (80016fc <MX_GPIO_Init+0x12c>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	4a38      	ldr	r2, [pc, #224]	; (80016fc <MX_GPIO_Init+0x12c>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001622:	4b36      	ldr	r3, [pc, #216]	; (80016fc <MX_GPIO_Init+0x12c>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b33      	ldr	r3, [pc, #204]	; (80016fc <MX_GPIO_Init+0x12c>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	4a32      	ldr	r2, [pc, #200]	; (80016fc <MX_GPIO_Init+0x12c>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163a:	4b30      	ldr	r3, [pc, #192]	; (80016fc <MX_GPIO_Init+0x12c>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2120      	movs	r1, #32
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f001 fd55 	bl	80030fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001658:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800165c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4825      	ldr	r0, [pc, #148]	; (8001700 <MX_GPIO_Init+0x130>)
 800166a:	f001 fb85 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800166e:	2303      	movs	r3, #3
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001672:	2303      	movs	r3, #3
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	481f      	ldr	r0, [pc, #124]	; (8001700 <MX_GPIO_Init+0x130>)
 8001682:	f001 fb79 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 Switch1_Pin Switch2_Pin PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Switch1_Pin|Switch2_Pin|GPIO_PIN_10;
 8001686:	f240 4313 	movw	r3, #1043	; 0x413
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169e:	f001 fb6b 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016a2:	2320      	movs	r3, #32
 80016a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016bc:	f001 fb5c 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch3_Pin PB10 PB4 */
  GPIO_InitStruct.Pin = Switch3_Pin|GPIO_PIN_10|GPIO_PIN_4;
 80016c0:	f240 4311 	movw	r3, #1041	; 0x411
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	480b      	ldr	r0, [pc, #44]	; (8001704 <MX_GPIO_Init+0x134>)
 80016d6:	f001 fb4f 	bl	8002d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_GPIO_Init+0x130>)
 80016ee:	f001 fb43 	bl	8002d78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f2:	bf00      	nop
 80016f4:	3728      	adds	r7, #40	; 0x28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	48000800 	.word	0x48000800
 8001704:	48000400 	.word	0x48000400

08001708 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	update_flag = 1;
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	200003b4 	.word	0x200003b4

08001728 <StartTellers>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTellers */
void StartTellers(void *argument)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Initialize 3 tellers
  /* Infinite loop */
	initialize_tellers();
 8001730:	f000 fa74 	bl	8001c1c <initialize_tellers>
  for(;;)
  {
    osMutexAcquire(MUTEXHandle, osWaitForever);
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <StartTellers+0x2c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800173c:	4618      	mov	r0, r3
 800173e:	f004 fbca 	bl	8005ed6 <osMutexAcquire>
    manage_tellers();
 8001742:	f000 fbf1 	bl	8001f28 <manage_tellers>
    osMutexRelease(MUTEXHandle);
 8001746:	4b03      	ldr	r3, [pc, #12]	; (8001754 <StartTellers+0x2c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f004 fc0e 	bl	8005f6c <osMutexRelease>
    osMutexAcquire(MUTEXHandle, osWaitForever);
 8001750:	e7f0      	b.n	8001734 <StartTellers+0xc>
 8001752:	bf00      	nop
 8001754:	200003b0 	.word	0x200003b0

08001758 <StartCustomers>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCustomers */
void StartCustomers(void *argument)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCustomers */
  /* Infinite loop */
  init_customer();
 8001760:	f7ff fc3a 	bl	8000fd8 <init_customer>
  for(;;)
  {

	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <StartCustomers+0x2c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800176c:	4618      	mov	r0, r3
 800176e:	f004 fbb2 	bl	8005ed6 <osMutexAcquire>
	run_customer();
 8001772:	f7ff fca9 	bl	80010c8 <run_customer>
	osMutexRelease(MUTEXHandle);
 8001776:	4b03      	ldr	r3, [pc, #12]	; (8001784 <StartCustomers+0x2c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f004 fbf6 	bl	8005f6c <osMutexRelease>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001780:	e7f0      	b.n	8001764 <StartCustomers+0xc>
 8001782:	bf00      	nop
 8001784:	200003b0 	.word	0x200003b0

08001788 <StartClock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClock */
void StartClock(void *argument)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b0c9      	sub	sp, #292	; 0x124
 800178c:	af02      	add	r7, sp, #8
 800178e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001796:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartClock */
  /* Infinite loop */
	Clock = day_init(Clock);
 8001798:	4c48      	ldr	r4, [pc, #288]	; (80018bc <StartClock+0x134>)
 800179a:	4638      	mov	r0, r7
 800179c:	4b47      	ldr	r3, [pc, #284]	; (80018bc <StartClock+0x134>)
 800179e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017a0:	f7ff faeb 	bl	8000d7a <day_init>
 80017a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017a8:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 80017ac:	4623      	mov	r3, r4
 80017ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80017b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for(;;)
  {
	if(update_flag == 1){
 80017b4:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <StartClock+0x138>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d17b      	bne.n	80018b4 <StartClock+0x12c>
	char buffer[256];
	osMutexAcquire(MUTEXHandle, osWaitForever);
 80017bc:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <StartClock+0x13c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017c4:	4618      	mov	r0, r3
 80017c6:	f004 fb86 	bl	8005ed6 <osMutexAcquire>
    Clock = clock_increment(Clock);
 80017ca:	4c3c      	ldr	r4, [pc, #240]	; (80018bc <StartClock+0x134>)
 80017cc:	4638      	mov	r0, r7
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <StartClock+0x134>)
 80017d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017d2:	f7ff faeb 	bl	8000dac <clock_increment>
 80017d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017da:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 80017de:	4623      	mov	r3, r4
 80017e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80017e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    osMutexRelease(MUTEXHandle);
 80017e6:	4b37      	ldr	r3, [pc, #220]	; (80018c4 <StartClock+0x13c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f004 fbbe 	bl	8005f6c <osMutexRelease>
	if((Clock.minute  % 2) == 0 && (Clock.second % 60) == 30){
 80017f0:	4b32      	ldr	r3, [pc, #200]	; (80018bc <StartClock+0x134>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d15b      	bne.n	80018b4 <StartClock+0x12c>
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <StartClock+0x134>)
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <StartClock+0x140>)
 8001802:	fb83 1302 	smull	r1, r3, r3, r2
 8001806:	4413      	add	r3, r2
 8001808:	1159      	asrs	r1, r3, #5
 800180a:	17d3      	asrs	r3, r2, #31
 800180c:	1ac9      	subs	r1, r1, r3
 800180e:	460b      	mov	r3, r1
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	1a5b      	subs	r3, r3, r1
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	1ad1      	subs	r1, r2, r3
 8001818:	291e      	cmp	r1, #30
 800181a:	d14b      	bne.n	80018b4 <StartClock+0x12c>
		sprintf(buffer, "Current time: %d:%d:%d \r\n", Clock.hour, Clock.minute, Clock.second);
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <StartClock+0x134>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b26      	ldr	r3, [pc, #152]	; (80018bc <StartClock+0x134>)
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	4b25      	ldr	r3, [pc, #148]	; (80018bc <StartClock+0x134>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f107 0018 	add.w	r0, r7, #24
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	460b      	mov	r3, r1
 8001830:	4926      	ldr	r1, [pc, #152]	; (80018cc <StartClock+0x144>)
 8001832:	f007 fb53 	bl	8008edc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001836:	f107 0318 	add.w	r3, r7, #24
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fcc8 	bl	80001d0 <strlen>
 8001840:	4603      	mov	r3, r0
 8001842:	b29a      	uxth	r2, r3
 8001844:	f107 0118 	add.w	r1, r7, #24
 8001848:	2364      	movs	r3, #100	; 0x64
 800184a:	4821      	ldr	r0, [pc, #132]	; (80018d0 <StartClock+0x148>)
 800184c:	f003 fc3a 	bl	80050c4 <HAL_UART_Transmit>
		sprintf(buffer,"Customers waiting in Queue: %d \r\n", waiting_customers );
 8001850:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <StartClock+0x14c>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	f107 0318 	add.w	r3, r7, #24
 8001858:	491f      	ldr	r1, [pc, #124]	; (80018d8 <StartClock+0x150>)
 800185a:	4618      	mov	r0, r3
 800185c:	f007 fb3e 	bl	8008edc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001860:	f107 0318 	add.w	r3, r7, #24
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fcb3 	bl	80001d0 <strlen>
 800186a:	4603      	mov	r3, r0
 800186c:	b29a      	uxth	r2, r3
 800186e:	f107 0118 	add.w	r1, r7, #24
 8001872:	2364      	movs	r3, #100	; 0x64
 8001874:	4816      	ldr	r0, [pc, #88]	; (80018d0 <StartClock+0x148>)
 8001876:	f003 fc25 	bl	80050c4 <HAL_UART_Transmit>
		sprintf(buffer,"Teller 1: %d Teller 2: %d Teller 3: %d \r\n", tellers[1].status,tellers[2].status,tellers[3].status);
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <StartClock+0x154>)
 800187c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <StartClock+0x154>)
 8001882:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <StartClock+0x154>)
 8001888:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800188c:	f107 0018 	add.w	r0, r7, #24
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	460b      	mov	r3, r1
 8001894:	4912      	ldr	r1, [pc, #72]	; (80018e0 <StartClock+0x158>)
 8001896:	f007 fb21 	bl	8008edc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 800189a:	f107 0318 	add.w	r3, r7, #24
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fc96 	bl	80001d0 <strlen>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	f107 0118 	add.w	r1, r7, #24
 80018ac:	2364      	movs	r3, #100	; 0x64
 80018ae:	4808      	ldr	r0, [pc, #32]	; (80018d0 <StartClock+0x148>)
 80018b0:	f003 fc08 	bl	80050c4 <HAL_UART_Transmit>
	}
	}
    update_flag = 0;
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <StartClock+0x138>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
	if(update_flag == 1){
 80018ba:	e77b      	b.n	80017b4 <StartClock+0x2c>
 80018bc:	20000000 	.word	0x20000000
 80018c0:	200003b4 	.word	0x200003b4
 80018c4:	200003b0 	.word	0x200003b0
 80018c8:	88888889 	.word	0x88888889
 80018cc:	08009870 	.word	0x08009870
 80018d0:	20000314 	.word	0x20000314
 80018d4:	200000f8 	.word	0x200000f8
 80018d8:	0800988c 	.word	0x0800988c
 80018dc:	200003bc 	.word	0x200003bc
 80018e0:	080098b0 	.word	0x080098b0

080018e4 <StartManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManager */
void StartManager(void *argument)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManager */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f004 fa51 	bl	8005d94 <osDelay>
 80018f2:	e7fb      	b.n	80018ec <StartManager+0x8>

080018f4 <StartBreaker>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBreaker */
void StartBreaker(void *argument)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBreaker */
  /* Infinite loop */
	init_breaker();
 80018fc:	f7fe fe3e 	bl	800057c <init_breaker>
  for(;;)
  {
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <StartBreaker+0x2c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001908:	4618      	mov	r0, r3
 800190a:	f004 fae4 	bl	8005ed6 <osMutexAcquire>
	run_breaker();
 800190e:	f7fe ffc1 	bl	8000894 <run_breaker>
	osMutexRelease(MUTEXHandle);
 8001912:	4b03      	ldr	r3, [pc, #12]	; (8001920 <StartBreaker+0x2c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f004 fb28 	bl	8005f6c <osMutexRelease>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 800191c:	e7f0      	b.n	8001900 <StartBreaker+0xc>
 800191e:	bf00      	nop
 8001920:	200003b0 	.word	0x200003b0

08001924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001928:	b672      	cpsid	i
}
 800192a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800192c:	e7fe      	b.n	800192c <Error_Handler+0x8>
	...

08001930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_MspInit+0x4c>)
 8001938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193a:	4a10      	ldr	r2, [pc, #64]	; (800197c <HAL_MspInit+0x4c>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6613      	str	r3, [r2, #96]	; 0x60
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_MspInit+0x4c>)
 8001944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_MspInit+0x4c>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_MspInit+0x4c>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	6593      	str	r3, [r2, #88]	; 0x58
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_MspInit+0x4c>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	210f      	movs	r1, #15
 800196a:	f06f 0001 	mvn.w	r0, #1
 800196e:	f001 f9cc 	bl	8002d0a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000

08001980 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0a6      	sub	sp, #152	; 0x98
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	2288      	movs	r2, #136	; 0x88
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f007 fac3 	bl	8008f1c <memset>
  if(hrng->Instance==RNG)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <HAL_RNG_MspInit+0x90>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d133      	bne.n	8001a08 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80019a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80019a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80019ae:	2302      	movs	r3, #2
 80019b0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019b2:	2301      	movs	r3, #1
 80019b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80019b6:	2308      	movs	r3, #8
 80019b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019ba:	2307      	movs	r3, #7
 80019bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80019be:	2304      	movs	r3, #4
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019c2:	2302      	movs	r3, #2
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80019c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 fa0f 	bl	8003df4 <HAL_RCCEx_PeriphCLKConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 80019dc:	f7ff ffa2 	bl	8001924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_RNG_MspInit+0x94>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e4:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <HAL_RNG_MspInit+0x94>)
 80019e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_RNG_MspInit+0x94>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 5, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2105      	movs	r1, #5
 80019fc:	2050      	movs	r0, #80	; 0x50
 80019fe:	f001 f984 	bl	8002d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8001a02:	2050      	movs	r0, #80	; 0x50
 8001a04:	f001 f99d 	bl	8002d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001a08:	bf00      	nop
 8001a0a:	3798      	adds	r7, #152	; 0x98
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	50060800 	.word	0x50060800
 8001a14:	40021000 	.word	0x40021000

08001a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_TIM_Base_MspInit+0x44>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d113      	bne.n	8001a52 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <HAL_TIM_Base_MspInit+0x48>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	4a0c      	ldr	r2, [pc, #48]	; (8001a60 <HAL_TIM_Base_MspInit+0x48>)
 8001a30:	f043 0310 	orr.w	r3, r3, #16
 8001a34:	6593      	str	r3, [r2, #88]	; 0x58
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_TIM_Base_MspInit+0x48>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2105      	movs	r1, #5
 8001a46:	2036      	movs	r0, #54	; 0x36
 8001a48:	f001 f95f 	bl	8002d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a4c:	2036      	movs	r0, #54	; 0x36
 8001a4e:	f001 f978 	bl	8002d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40001000 	.word	0x40001000
 8001a60:	40021000 	.word	0x40021000

08001a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0ac      	sub	sp, #176	; 0xb0
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2288      	movs	r2, #136	; 0x88
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f007 fa49 	bl	8008f1c <memset>
  if(huart->Instance==USART2)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a21      	ldr	r2, [pc, #132]	; (8001b14 <HAL_UART_MspInit+0xb0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d13b      	bne.n	8001b0c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a94:	2302      	movs	r3, #2
 8001a96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 f9a7 	bl	8003df4 <HAL_RCCEx_PeriphCLKConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001aac:	f7ff ff3a 	bl	8001924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_UART_MspInit+0xb4>)
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <HAL_UART_MspInit+0xb4>)
 8001ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aba:	6593      	str	r3, [r2, #88]	; 0x58
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <HAL_UART_MspInit+0xb4>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <HAL_UART_MspInit+0xb4>)
 8001aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001acc:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <HAL_UART_MspInit+0xb4>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_UART_MspInit+0xb4>)
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001af8:	2307      	movs	r3, #7
 8001afa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b02:	4619      	mov	r1, r3
 8001b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b08:	f001 f936 	bl	8002d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b0c:	bf00      	nop
 8001b0e:	37b0      	adds	r7, #176	; 0xb0
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40004400 	.word	0x40004400
 8001b18:	40021000 	.word	0x40021000

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b20:	e7fe      	b.n	8001b20 <NMI_Handler+0x4>

08001b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <HardFault_Handler+0x4>

08001b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <MemManage_Handler+0x4>

08001b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <BusFault_Handler+0x4>

08001b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <UsageFault_Handler+0x4>

08001b3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4c:	f000 ffe2 	bl	8002b14 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b50:	f006 f860 	bl	8007c14 <xTaskGetSchedulerState>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d001      	beq.n	8001b5e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b5a:	f006 ff45 	bl	80089e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <TIM6_DAC_IRQHandler+0x10>)
 8001b6a:	f002 fff3 	bl	8004b54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200002c8 	.word	0x200002c8

08001b78 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <RNG_IRQHandler+0x10>)
 8001b7e:	f002 fea2 	bl	80048c6 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200002b8 	.word	0x200002b8

08001b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b94:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <_sbrk+0x5c>)
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <_sbrk+0x60>)
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <_sbrk+0x64>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <_sbrk+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d207      	bcs.n	8001bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bbc:	f007 f9b6 	bl	8008f2c <__errno>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bca:	e009      	b.n	8001be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <_sbrk+0x64>)
 8001bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20018000 	.word	0x20018000
 8001bec:	00000400 	.word	0x00000400
 8001bf0:	200003b8 	.word	0x200003b8
 8001bf4:	20007260 	.word	0x20007260

08001bf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <SystemInit+0x20>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c02:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <SystemInit+0x20>)
 8001c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <initialize_tellers>:

Teller VOID_TELLER;
//fix this
Teller teller_wait[4];

void initialize_tellers(void) {
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
    for (int i = 1; i < 4; i++) {
 8001c22:	2301      	movs	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e168      	b.n	8001efa <initialize_tellers+0x2de>
    	//Initialize ID
        tellers[i].id = i;
 8001c28:	4abc      	ldr	r2, [pc, #752]	; (8001f1c <initialize_tellers+0x300>)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	21b0      	movs	r1, #176	; 0xb0
 8001c2e:	fb01 f303 	mul.w	r3, r1, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	601a      	str	r2, [r3, #0]
        // Initialize statuses
        tellers[i].status = 0;
 8001c38:	4ab8      	ldr	r2, [pc, #736]	; (8001f1c <initialize_tellers+0x300>)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	21b0      	movs	r1, #176	; 0xb0
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	3304      	adds	r3, #4
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
        tellers[i].take_break = 0;
 8001c4a:	4ab4      	ldr	r2, [pc, #720]	; (8001f1c <initialize_tellers+0x300>)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	21b0      	movs	r1, #176	; 0xb0
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	3308      	adds	r3, #8
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
        //service function
        tellers[i].service_end_time = clock_init(tellers[i].service_end_time);
 8001c5c:	4aaf      	ldr	r2, [pc, #700]	; (8001f1c <initialize_tellers+0x300>)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	21b0      	movs	r1, #176	; 0xb0
 8001c62:	fb01 f303 	mul.w	r3, r1, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	f103 0408 	add.w	r4, r3, #8
 8001c6c:	4638      	mov	r0, r7
 8001c6e:	4aab      	ldr	r2, [pc, #684]	; (8001f1c <initialize_tellers+0x300>)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	21b0      	movs	r1, #176	; 0xb0
 8001c74:	fb01 f303 	mul.w	r3, r1, r3
 8001c78:	4413      	add	r3, r2
 8001c7a:	3308      	adds	r3, #8
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c80:	f7ff f862 	bl	8000d48 <clock_init>
 8001c84:	1d23      	adds	r3, r4, #4
 8001c86:	463a      	mov	r2, r7
 8001c88:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize metrics
        tellers[i].customers_served = 0;
 8001c8e:	4aa3      	ldr	r2, [pc, #652]	; (8001f1c <initialize_tellers+0x300>)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	21b0      	movs	r1, #176	; 0xb0
 8001c94:	fb01 f303 	mul.w	r3, r1, r3
 8001c98:	4413      	add	r3, r2
 8001c9a:	3318      	adds	r3, #24
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
        tellers[i].total_time_working = clock_init(tellers[i].total_time_working);
 8001ca0:	4a9e      	ldr	r2, [pc, #632]	; (8001f1c <initialize_tellers+0x300>)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	21b0      	movs	r1, #176	; 0xb0
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	f103 0418 	add.w	r4, r3, #24
 8001cb0:	4638      	mov	r0, r7
 8001cb2:	4a9a      	ldr	r2, [pc, #616]	; (8001f1c <initialize_tellers+0x300>)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	21b0      	movs	r1, #176	; 0xb0
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3318      	adds	r3, #24
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc4:	f7ff f840 	bl	8000d48 <clock_init>
 8001cc8:	1d23      	adds	r3, r4, #4
 8001cca:	463a      	mov	r2, r7
 8001ccc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].total_time_waiting = clock_init(tellers[i].total_time_waiting);
 8001cd2:	4a92      	ldr	r2, [pc, #584]	; (8001f1c <initialize_tellers+0x300>)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	21b0      	movs	r1, #176	; 0xb0
 8001cd8:	fb01 f303 	mul.w	r3, r1, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001ce2:	4638      	mov	r0, r7
 8001ce4:	4a8d      	ldr	r2, [pc, #564]	; (8001f1c <initialize_tellers+0x300>)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	21b0      	movs	r1, #176	; 0xb0
 8001cea:	fb01 f303 	mul.w	r3, r1, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	3328      	adds	r3, #40	; 0x28
 8001cf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf4:	f7ff f828 	bl	8000d48 <clock_init>
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].current_time_working = clock_init(tellers[i].current_time_working);
 8001d02:	4a86      	ldr	r2, [pc, #536]	; (8001f1c <initialize_tellers+0x300>)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	21b0      	movs	r1, #176	; 0xb0
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001d12:	4638      	mov	r0, r7
 8001d14:	4a81      	ldr	r2, [pc, #516]	; (8001f1c <initialize_tellers+0x300>)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	21b0      	movs	r1, #176	; 0xb0
 8001d1a:	fb01 f303 	mul.w	r3, r1, r3
 8001d1e:	4413      	add	r3, r2
 8001d20:	3330      	adds	r3, #48	; 0x30
 8001d22:	3304      	adds	r3, #4
 8001d24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d26:	f7ff f80f 	bl	8000d48 <clock_init>
 8001d2a:	1d23      	adds	r3, r4, #4
 8001d2c:	463a      	mov	r2, r7
 8001d2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 8001d34:	4a79      	ldr	r2, [pc, #484]	; (8001f1c <initialize_tellers+0x300>)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	21b0      	movs	r1, #176	; 0xb0
 8001d3a:	fb01 f303 	mul.w	r3, r1, r3
 8001d3e:	4413      	add	r3, r2
 8001d40:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001d44:	4638      	mov	r0, r7
 8001d46:	4a75      	ldr	r2, [pc, #468]	; (8001f1c <initialize_tellers+0x300>)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	21b0      	movs	r1, #176	; 0xb0
 8001d4c:	fb01 f303 	mul.w	r3, r1, r3
 8001d50:	4413      	add	r3, r2
 8001d52:	3340      	adds	r3, #64	; 0x40
 8001d54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d56:	f7fe fff7 	bl	8000d48 <clock_init>
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].max_time_working = clock_init(tellers[i].max_time_working);
 8001d64:	4a6d      	ldr	r2, [pc, #436]	; (8001f1c <initialize_tellers+0x300>)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	21b0      	movs	r1, #176	; 0xb0
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001d74:	4638      	mov	r0, r7
 8001d76:	4a69      	ldr	r2, [pc, #420]	; (8001f1c <initialize_tellers+0x300>)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	21b0      	movs	r1, #176	; 0xb0
 8001d7c:	fb01 f303 	mul.w	r3, r1, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	3348      	adds	r3, #72	; 0x48
 8001d84:	3304      	adds	r3, #4
 8001d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d88:	f7fe ffde 	bl	8000d48 <clock_init>
 8001d8c:	1d23      	adds	r3, r4, #4
 8001d8e:	463a      	mov	r2, r7
 8001d90:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].max_time_working = clock_init(tellers[i].max_time_working);
 8001d96:	4a61      	ldr	r2, [pc, #388]	; (8001f1c <initialize_tellers+0x300>)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	21b0      	movs	r1, #176	; 0xb0
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001da6:	4638      	mov	r0, r7
 8001da8:	4a5c      	ldr	r2, [pc, #368]	; (8001f1c <initialize_tellers+0x300>)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	21b0      	movs	r1, #176	; 0xb0
 8001dae:	fb01 f303 	mul.w	r3, r1, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	3348      	adds	r3, #72	; 0x48
 8001db6:	3304      	adds	r3, #4
 8001db8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dba:	f7fe ffc5 	bl	8000d48 <clock_init>
 8001dbe:	1d23      	adds	r3, r4, #4
 8001dc0:	463a      	mov	r2, r7
 8001dc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize break taking
        tellers[i].break_end = clock_init(tellers[i].break_end);
 8001dc8:	4a54      	ldr	r2, [pc, #336]	; (8001f1c <initialize_tellers+0x300>)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	21b0      	movs	r1, #176	; 0xb0
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001dd8:	4638      	mov	r0, r7
 8001dda:	4a50      	ldr	r2, [pc, #320]	; (8001f1c <initialize_tellers+0x300>)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	21b0      	movs	r1, #176	; 0xb0
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	3370      	adds	r3, #112	; 0x70
 8001de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dea:	f7fe ffad 	bl	8000d48 <clock_init>
 8001dee:	463b      	mov	r3, r7
 8001df0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001df4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].current_break = clock_init(tellers[i].current_break);
 8001df8:	4a48      	ldr	r2, [pc, #288]	; (8001f1c <initialize_tellers+0x300>)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	21b0      	movs	r1, #176	; 0xb0
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8001e08:	4638      	mov	r0, r7
 8001e0a:	4a44      	ldr	r2, [pc, #272]	; (8001f1c <initialize_tellers+0x300>)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	21b0      	movs	r1, #176	; 0xb0
 8001e10:	fb01 f303 	mul.w	r3, r1, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	3378      	adds	r3, #120	; 0x78
 8001e18:	3304      	adds	r3, #4
 8001e1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1c:	f7fe ff94 	bl	8000d48 <clock_init>
 8001e20:	1d23      	adds	r3, r4, #4
 8001e22:	463a      	mov	r2, r7
 8001e24:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize break metrics
        tellers[i].num_breaks = 0;
 8001e2a:	4a3c      	ldr	r2, [pc, #240]	; (8001f1c <initialize_tellers+0x300>)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	21b0      	movs	r1, #176	; 0xb0
 8001e30:	fb01 f303 	mul.w	r3, r1, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	3388      	adds	r3, #136	; 0x88
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
        tellers[i].max_break = clock_init(tellers[i].max_break);
 8001e3c:	4a37      	ldr	r2, [pc, #220]	; (8001f1c <initialize_tellers+0x300>)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	21b0      	movs	r1, #176	; 0xb0
 8001e42:	fb01 f303 	mul.w	r3, r1, r3
 8001e46:	4413      	add	r3, r2
 8001e48:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8001e4c:	4638      	mov	r0, r7
 8001e4e:	4a33      	ldr	r2, [pc, #204]	; (8001f1c <initialize_tellers+0x300>)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	21b0      	movs	r1, #176	; 0xb0
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	3388      	adds	r3, #136	; 0x88
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e60:	f7fe ff72 	bl	8000d48 <clock_init>
 8001e64:	1d23      	adds	r3, r4, #4
 8001e66:	463a      	mov	r2, r7
 8001e68:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].min_break = clock_init(tellers[i].min_break);
 8001e6e:	4a2b      	ldr	r2, [pc, #172]	; (8001f1c <initialize_tellers+0x300>)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	21b0      	movs	r1, #176	; 0xb0
 8001e74:	fb01 f303 	mul.w	r3, r1, r3
 8001e78:	4413      	add	r3, r2
 8001e7a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8001e7e:	4638      	mov	r0, r7
 8001e80:	4a26      	ldr	r2, [pc, #152]	; (8001f1c <initialize_tellers+0x300>)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	21b0      	movs	r1, #176	; 0xb0
 8001e86:	fb01 f303 	mul.w	r3, r1, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3398      	adds	r3, #152	; 0x98
 8001e8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e90:	f7fe ff5a 	bl	8000d48 <clock_init>
 8001e94:	463b      	mov	r3, r7
 8001e96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].total_break = clock_init(tellers[i].total_break);
 8001e9e:	4a1f      	ldr	r2, [pc, #124]	; (8001f1c <initialize_tellers+0x300>)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	21b0      	movs	r1, #176	; 0xb0
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8001eae:	4638      	mov	r0, r7
 8001eb0:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <initialize_tellers+0x300>)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	21b0      	movs	r1, #176	; 0xb0
 8001eb6:	fb01 f303 	mul.w	r3, r1, r3
 8001eba:	4413      	add	r3, r2
 8001ebc:	33a0      	adds	r3, #160	; 0xa0
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec2:	f7fe ff41 	bl	8000d48 <clock_init>
 8001ec6:	1d23      	adds	r3, r4, #4
 8001ec8:	463a      	mov	r2, r7
 8001eca:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ecc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        //initialize tellers in Queue
        teller_wait[i-1] = tellers[i];
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <initialize_tellers+0x304>)
 8001ed6:	21b0      	movs	r1, #176	; 0xb0
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	18d0      	adds	r0, r2, r3
 8001ede:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <initialize_tellers+0x300>)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	21b0      	movs	r1, #176	; 0xb0
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	23b0      	movs	r3, #176	; 0xb0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f007 f848 	bl	8008f84 <memcpy>
    for (int i = 1; i < 4; i++) {
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	f77f ae93 	ble.w	8001c28 <initialize_tellers+0xc>

    }
    	teller_wait[0] = VOID_TELLER;
 8001f02:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <initialize_tellers+0x304>)
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <initialize_tellers+0x308>)
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	23b0      	movs	r3, #176	; 0xb0
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f007 f839 	bl	8008f84 <memcpy>
}
 8001f12:	bf00      	nop
 8001f14:	371c      	adds	r7, #28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd90      	pop	{r4, r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200003bc 	.word	0x200003bc
 8001f20:	2000072c 	.word	0x2000072c
 8001f24:	2000067c 	.word	0x2000067c

08001f28 <manage_tellers>:

//Maybe Put entire thing inside a case statement if at all possible,
//Would Simplify logic and speed it up
void manage_tellers(void){
 8001f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f2c:	b098      	sub	sp, #96	; 0x60
 8001f2e:	af04      	add	r7, sp, #16
	int i;
	for (i = 1; i < 4; i++) {
 8001f30:	2301      	movs	r3, #1
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f34:	bf00      	nop
 8001f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	f300 8557 	bgt.w	80029ec <manage_tellers+0xac4>
		switch (tellers[i].status){
 8001f3e:	4aa3      	ldr	r2, [pc, #652]	; (80021cc <manage_tellers+0x2a4>)
 8001f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f42:	21b0      	movs	r1, #176	; 0xb0
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d00a      	beq.n	8001f68 <manage_tellers+0x40>
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	f300 854c 	bgt.w	80029f0 <manage_tellers+0xac8>
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 813d 	beq.w	80021d8 <manage_tellers+0x2b0>
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	f000 840a 	beq.w	8002778 <manage_tellers+0x850>
				}
				break;
			}
		}
			//Case Break
			break;
 8001f64:	f000 bd44 	b.w	80029f0 <manage_tellers+0xac8>
			if(clock_compare(Clock,tellers[i].break_end) != 1){
 8001f68:	4a98      	ldr	r2, [pc, #608]	; (80021cc <manage_tellers+0x2a4>)
 8001f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f6c:	21b0      	movs	r1, #176	; 0xb0
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	3370      	adds	r3, #112	; 0x70
 8001f76:	4a96      	ldr	r2, [pc, #600]	; (80021d0 <manage_tellers+0x2a8>)
 8001f78:	466c      	mov	r4, sp
 8001f7a:	1d19      	adds	r1, r3, #4
 8001f7c:	c903      	ldmia	r1, {r0, r1}
 8001f7e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f86:	f7fe ff75 	bl	8000e74 <clock_compare>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	f040 851f 	bne.w	80029d0 <manage_tellers+0xaa8>
			if(clock_compare(Clock,tellers[i].break_end) == 1){
 8001f92:	4a8e      	ldr	r2, [pc, #568]	; (80021cc <manage_tellers+0x2a4>)
 8001f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f96:	21b0      	movs	r1, #176	; 0xb0
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3370      	adds	r3, #112	; 0x70
 8001fa0:	4a8b      	ldr	r2, [pc, #556]	; (80021d0 <manage_tellers+0x2a8>)
 8001fa2:	466c      	mov	r4, sp
 8001fa4:	1d19      	adds	r1, r3, #4
 8001fa6:	c903      	ldmia	r1, {r0, r1}
 8001fa8:	e884 0003 	stmia.w	r4, {r0, r1}
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fb0:	f7fe ff60 	bl	8000e74 <clock_compare>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	f040 850c 	bne.w	80029d4 <manage_tellers+0xaac>
				if(clock_compare(tellers[i].current_break,tellers[i].max_break) == 0){
 8001fbc:	4a83      	ldr	r2, [pc, #524]	; (80021cc <manage_tellers+0x2a4>)
 8001fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc0:	21b0      	movs	r1, #176	; 0xb0
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3388      	adds	r3, #136	; 0x88
 8001fca:	4980      	ldr	r1, [pc, #512]	; (80021cc <manage_tellers+0x2a4>)
 8001fcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fce:	20b0      	movs	r0, #176	; 0xb0
 8001fd0:	fb00 f202 	mul.w	r2, r0, r2
 8001fd4:	440a      	add	r2, r1
 8001fd6:	3278      	adds	r2, #120	; 0x78
 8001fd8:	466c      	mov	r4, sp
 8001fda:	f103 0108 	add.w	r1, r3, #8
 8001fde:	c903      	ldmia	r1, {r0, r1}
 8001fe0:	e884 0003 	stmia.w	r4, {r0, r1}
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	3204      	adds	r2, #4
 8001fe8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fea:	f7fe ff43 	bl	8000e74 <clock_compare>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d112      	bne.n	800201a <manage_tellers+0xf2>
					tellers[i].max_break = tellers[i].current_break;
 8001ff4:	4a75      	ldr	r2, [pc, #468]	; (80021cc <manage_tellers+0x2a4>)
 8001ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff8:	21b0      	movs	r1, #176	; 0xb0
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	3388      	adds	r3, #136	; 0x88
 8002002:	4972      	ldr	r1, [pc, #456]	; (80021cc <manage_tellers+0x2a4>)
 8002004:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002006:	20b0      	movs	r0, #176	; 0xb0
 8002008:	fb00 f202 	mul.w	r2, r0, r2
 800200c:	440a      	add	r2, r1
 800200e:	3278      	adds	r2, #120	; 0x78
 8002010:	3304      	adds	r3, #4
 8002012:	3204      	adds	r2, #4
 8002014:	ca07      	ldmia	r2, {r0, r1, r2}
 8002016:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				if(clock_compare(tellers[i].current_break,tellers[i].min_break) == 2){
 800201a:	4a6c      	ldr	r2, [pc, #432]	; (80021cc <manage_tellers+0x2a4>)
 800201c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800201e:	21b0      	movs	r1, #176	; 0xb0
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	4413      	add	r3, r2
 8002026:	3398      	adds	r3, #152	; 0x98
 8002028:	4968      	ldr	r1, [pc, #416]	; (80021cc <manage_tellers+0x2a4>)
 800202a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800202c:	20b0      	movs	r0, #176	; 0xb0
 800202e:	fb00 f202 	mul.w	r2, r0, r2
 8002032:	440a      	add	r2, r1
 8002034:	3278      	adds	r2, #120	; 0x78
 8002036:	466c      	mov	r4, sp
 8002038:	1d19      	adds	r1, r3, #4
 800203a:	c903      	ldmia	r1, {r0, r1}
 800203c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3204      	adds	r2, #4
 8002044:	ca07      	ldmia	r2, {r0, r1, r2}
 8002046:	f7fe ff15 	bl	8000e74 <clock_compare>
 800204a:	4603      	mov	r3, r0
 800204c:	2b02      	cmp	r3, #2
 800204e:	d114      	bne.n	800207a <manage_tellers+0x152>
					tellers[i].min_break = tellers[i].current_break;
 8002050:	4a5e      	ldr	r2, [pc, #376]	; (80021cc <manage_tellers+0x2a4>)
 8002052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002054:	21b0      	movs	r1, #176	; 0xb0
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8002060:	4a5a      	ldr	r2, [pc, #360]	; (80021cc <manage_tellers+0x2a4>)
 8002062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002064:	21b0      	movs	r1, #176	; 0xb0
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	3378      	adds	r3, #120	; 0x78
 800206e:	4604      	mov	r4, r0
 8002070:	3304      	adds	r3, #4
 8002072:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002076:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				tellers[i].total_break = add_clocks(tellers[i].total_break, tellers[i].current_break);
 800207a:	4a54      	ldr	r2, [pc, #336]	; (80021cc <manage_tellers+0x2a4>)
 800207c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800207e:	21b0      	movs	r1, #176	; 0xb0
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
 800208a:	f107 0c08 	add.w	ip, r7, #8
 800208e:	4a4f      	ldr	r2, [pc, #316]	; (80021cc <manage_tellers+0x2a4>)
 8002090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002092:	21b0      	movs	r1, #176	; 0xb0
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	f103 06a0 	add.w	r6, r3, #160	; 0xa0
 800209e:	4a4b      	ldr	r2, [pc, #300]	; (80021cc <manage_tellers+0x2a4>)
 80020a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a2:	21b0      	movs	r1, #176	; 0xb0
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	3378      	adds	r3, #120	; 0x78
 80020ac:	466c      	mov	r4, sp
 80020ae:	3304      	adds	r3, #4
 80020b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020b8:	1d33      	adds	r3, r6, #4
 80020ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020bc:	4660      	mov	r0, ip
 80020be:	f7fe fe9f 	bl	8000e00 <add_clocks>
 80020c2:	1d2b      	adds	r3, r5, #4
 80020c4:	f107 0208 	add.w	r2, r7, #8
 80020c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].current_break = clock_init(tellers[i].current_break);
 80020ce:	4a3f      	ldr	r2, [pc, #252]	; (80021cc <manage_tellers+0x2a4>)
 80020d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020d2:	21b0      	movs	r1, #176	; 0xb0
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80020de:	f107 0008 	add.w	r0, r7, #8
 80020e2:	4a3a      	ldr	r2, [pc, #232]	; (80021cc <manage_tellers+0x2a4>)
 80020e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e6:	21b0      	movs	r1, #176	; 0xb0
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	3378      	adds	r3, #120	; 0x78
 80020f0:	3304      	adds	r3, #4
 80020f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f4:	f7fe fe28 	bl	8000d48 <clock_init>
 80020f8:	1d23      	adds	r3, r4, #4
 80020fa:	f107 0208 	add.w	r2, r7, #8
 80020fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002100:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].status = 0;
 8002104:	4a31      	ldr	r2, [pc, #196]	; (80021cc <manage_tellers+0x2a4>)
 8002106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002108:	21b0      	movs	r1, #176	; 0xb0
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	3304      	adds	r3, #4
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
				if(!((teller_wait[0].id == i) && (teller_wait[1].id == i) && (teller_wait[2].id == i))){
 8002116:	4b2f      	ldr	r3, [pc, #188]	; (80021d4 <manage_tellers+0x2ac>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800211c:	429a      	cmp	r2, r3
 800211e:	d10b      	bne.n	8002138 <manage_tellers+0x210>
 8002120:	4b2c      	ldr	r3, [pc, #176]	; (80021d4 <manage_tellers+0x2ac>)
 8002122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002126:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002128:	429a      	cmp	r2, r3
 800212a:	d105      	bne.n	8002138 <manage_tellers+0x210>
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <manage_tellers+0x2ac>)
 800212e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002132:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002134:	429a      	cmp	r2, r3
 8002136:	d03a      	beq.n	80021ae <manage_tellers+0x286>
					if(teller_wait[0].id == 0){
 8002138:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <manage_tellers+0x2ac>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10d      	bne.n	800215c <manage_tellers+0x234>
						teller_wait[0] = tellers[i];
 8002140:	4824      	ldr	r0, [pc, #144]	; (80021d4 <manage_tellers+0x2ac>)
 8002142:	4a22      	ldr	r2, [pc, #136]	; (80021cc <manage_tellers+0x2a4>)
 8002144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002146:	21b0      	movs	r1, #176	; 0xb0
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4413      	add	r3, r2
 800214e:	4619      	mov	r1, r3
 8002150:	23b0      	movs	r3, #176	; 0xb0
 8002152:	461a      	mov	r2, r3
 8002154:	f006 ff16 	bl	8008f84 <memcpy>
					break;
 8002158:	f000 bc3e 	b.w	80029d8 <manage_tellers+0xab0>
					else if(teller_wait[1].id == 0){
 800215c:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <manage_tellers+0x2ac>)
 800215e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10e      	bne.n	8002184 <manage_tellers+0x25c>
						teller_wait[1] = tellers[i];
 8002166:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <manage_tellers+0x2ac>)
 8002168:	4918      	ldr	r1, [pc, #96]	; (80021cc <manage_tellers+0x2a4>)
 800216a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800216c:	20b0      	movs	r0, #176	; 0xb0
 800216e:	fb00 f303 	mul.w	r3, r0, r3
 8002172:	4419      	add	r1, r3
 8002174:	f102 03b0 	add.w	r3, r2, #176	; 0xb0
 8002178:	22b0      	movs	r2, #176	; 0xb0
 800217a:	4618      	mov	r0, r3
 800217c:	f006 ff02 	bl	8008f84 <memcpy>
					break;
 8002180:	f000 bc2a 	b.w	80029d8 <manage_tellers+0xab0>
					else if(teller_wait[2].id == 0){
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <manage_tellers+0x2ac>)
 8002186:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800218a:	2b00      	cmp	r3, #0
 800218c:	f040 8424 	bne.w	80029d8 <manage_tellers+0xab0>
						teller_wait[2] = tellers[i];
 8002190:	4a10      	ldr	r2, [pc, #64]	; (80021d4 <manage_tellers+0x2ac>)
 8002192:	490e      	ldr	r1, [pc, #56]	; (80021cc <manage_tellers+0x2a4>)
 8002194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002196:	20b0      	movs	r0, #176	; 0xb0
 8002198:	fb00 f303 	mul.w	r3, r0, r3
 800219c:	4419      	add	r1, r3
 800219e:	f502 73b0 	add.w	r3, r2, #352	; 0x160
 80021a2:	22b0      	movs	r2, #176	; 0xb0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f006 feed 	bl	8008f84 <memcpy>
					break;
 80021aa:	f000 bc15 	b.w	80029d8 <manage_tellers+0xab0>
				tellers[i].teller_start_wait = Clock;
 80021ae:	4a07      	ldr	r2, [pc, #28]	; (80021cc <manage_tellers+0x2a4>)
 80021b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b2:	21b0      	movs	r1, #176	; 0xb0
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	3360      	adds	r3, #96	; 0x60
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <manage_tellers+0x2a8>)
 80021be:	3304      	adds	r3, #4
 80021c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80021c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			break;
 80021c6:	f000 bc05 	b.w	80029d4 <manage_tellers+0xaac>
 80021ca:	bf00      	nop
 80021cc:	200003bc 	.word	0x200003bc
 80021d0:	20000000 	.word	0x20000000
 80021d4:	2000072c 	.word	0x2000072c
			if(tellers[i].take_break == 0){
 80021d8:	4abf      	ldr	r2, [pc, #764]	; (80024d8 <manage_tellers+0x5b0>)
 80021da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021dc:	21b0      	movs	r1, #176	; 0xb0
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	3308      	adds	r3, #8
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f040 80ee 	bne.w	80023ca <manage_tellers+0x4a2>
				  if((waiting[0] != NULL) && (tellers[i].id == teller_wait[0].id)){
 80021ee:	4bbb      	ldr	r3, [pc, #748]	; (80024dc <manage_tellers+0x5b4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 83f2 	beq.w	80029dc <manage_tellers+0xab4>
 80021f8:	4ab7      	ldr	r2, [pc, #732]	; (80024d8 <manage_tellers+0x5b0>)
 80021fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021fc:	21b0      	movs	r1, #176	; 0xb0
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4bb6      	ldr	r3, [pc, #728]	; (80024e0 <manage_tellers+0x5b8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	f040 83e6 	bne.w	80029dc <manage_tellers+0xab4>
					tellers[i].current_time_waiting = subtract_Clocks(Clock,tellers[i].teller_start_wait);
 8002210:	4ab1      	ldr	r2, [pc, #708]	; (80024d8 <manage_tellers+0x5b0>)
 8002212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002214:	21b0      	movs	r1, #176	; 0xb0
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	f103 0840 	add.w	r8, r3, #64	; 0x40
 8002220:	f107 0608 	add.w	r6, r7, #8
 8002224:	4daf      	ldr	r5, [pc, #700]	; (80024e4 <manage_tellers+0x5bc>)
 8002226:	4aac      	ldr	r2, [pc, #688]	; (80024d8 <manage_tellers+0x5b0>)
 8002228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800222a:	21b0      	movs	r1, #176	; 0xb0
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	3360      	adds	r3, #96	; 0x60
 8002234:	466c      	mov	r4, sp
 8002236:	3304      	adds	r3, #4
 8002238:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800223c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002240:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002244:	4630      	mov	r0, r6
 8002246:	f7fe fe57 	bl	8000ef8 <subtract_Clocks>
 800224a:	4644      	mov	r4, r8
 800224c:	f107 0308 	add.w	r3, r7, #8
 8002250:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002254:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Customer customer = *waiting[0];
 8002258:	4ba0      	ldr	r3, [pc, #640]	; (80024dc <manage_tellers+0x5b4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f107 0418 	add.w	r4, r7, #24
 8002260:	461d      	mov	r5, r3
 8002262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800226c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226e:	682b      	ldr	r3, [r5, #0]
 8002270:	6023      	str	r3, [r4, #0]
					waiting[0] = NULL;
 8002272:	4b9a      	ldr	r3, [pc, #616]	; (80024dc <manage_tellers+0x5b4>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
				  	tellers[i].service_end_time = customer.service_time;
 8002278:	4a97      	ldr	r2, [pc, #604]	; (80024d8 <manage_tellers+0x5b0>)
 800227a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800227c:	21b0      	movs	r1, #176	; 0xb0
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	4413      	add	r3, r2
 8002284:	3308      	adds	r3, #8
 8002286:	3304      	adds	r3, #4
 8002288:	f107 021c 	add.w	r2, r7, #28
 800228c:	ca07      	ldmia	r2, {r0, r1, r2}
 800228e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  	total_customer_wait = add_clocks(total_customer_wait, customer.total_queue_time);
 8002292:	4b95      	ldr	r3, [pc, #596]	; (80024e8 <manage_tellers+0x5c0>)
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	f107 0608 	add.w	r6, r7, #8
 800229a:	4d93      	ldr	r5, [pc, #588]	; (80024e8 <manage_tellers+0x5c0>)
 800229c:	466c      	mov	r4, sp
 800229e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022aa:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80022ae:	4630      	mov	r0, r6
 80022b0:	f7fe fda6 	bl	8000e00 <add_clocks>
 80022b4:	687c      	ldr	r4, [r7, #4]
 80022b6:	f107 0308 	add.w	r3, r7, #8
 80022ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				  	if(clock_compare(customer.total_queue_time,max_customer_wait) == 0){
 80022c2:	4b8a      	ldr	r3, [pc, #552]	; (80024ec <manage_tellers+0x5c4>)
 80022c4:	466c      	mov	r4, sp
 80022c6:	1d1a      	adds	r2, r3, #4
 80022c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80022d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80022d8:	f7fe fdcc 	bl	8000e74 <clock_compare>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d107      	bne.n	80022f2 <manage_tellers+0x3ca>
				  		max_customer_wait = customer.total_queue_time;
 80022e2:	4b82      	ldr	r3, [pc, #520]	; (80024ec <manage_tellers+0x5c4>)
 80022e4:	461c      	mov	r4, r3
 80022e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				  	tellers[i].status = 1;
 80022f2:	4a79      	ldr	r2, [pc, #484]	; (80024d8 <manage_tellers+0x5b0>)
 80022f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f6:	21b0      	movs	r1, #176	; 0xb0
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	3304      	adds	r3, #4
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]
				  	if(clock_compare(tellers[i].current_time_waiting,tellers[i].max_time_waiting) == 0){
 8002304:	4a74      	ldr	r2, [pc, #464]	; (80024d8 <manage_tellers+0x5b0>)
 8002306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002308:	21b0      	movs	r1, #176	; 0xb0
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	3358      	adds	r3, #88	; 0x58
 8002312:	4971      	ldr	r1, [pc, #452]	; (80024d8 <manage_tellers+0x5b0>)
 8002314:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002316:	20b0      	movs	r0, #176	; 0xb0
 8002318:	fb00 f202 	mul.w	r2, r0, r2
 800231c:	440a      	add	r2, r1
 800231e:	3240      	adds	r2, #64	; 0x40
 8002320:	466c      	mov	r4, sp
 8002322:	1d19      	adds	r1, r3, #4
 8002324:	c903      	ldmia	r1, {r0, r1}
 8002326:	e884 0003 	stmia.w	r4, {r0, r1}
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	ca07      	ldmia	r2, {r0, r1, r2}
 800232e:	f7fe fda1 	bl	8000e74 <clock_compare>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d12d      	bne.n	8002394 <manage_tellers+0x46c>
				 	tellers[i].max_time_waiting = tellers[i].current_time_waiting;
 8002338:	4a67      	ldr	r2, [pc, #412]	; (80024d8 <manage_tellers+0x5b0>)
 800233a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800233c:	21b0      	movs	r1, #176	; 0xb0
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8002348:	4a63      	ldr	r2, [pc, #396]	; (80024d8 <manage_tellers+0x5b0>)
 800234a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800234c:	21b0      	movs	r1, #176	; 0xb0
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002358:	4603      	mov	r3, r0
 800235a:	ca07      	ldmia	r2, {r0, r1, r2}
 800235c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				 	teller_wait[0] = teller_wait[1];
 8002360:	4a5f      	ldr	r2, [pc, #380]	; (80024e0 <manage_tellers+0x5b8>)
 8002362:	4b5f      	ldr	r3, [pc, #380]	; (80024e0 <manage_tellers+0x5b8>)
 8002364:	4610      	mov	r0, r2
 8002366:	33b0      	adds	r3, #176	; 0xb0
 8002368:	22b0      	movs	r2, #176	; 0xb0
 800236a:	4619      	mov	r1, r3
 800236c:	f006 fe0a 	bl	8008f84 <memcpy>
				 	teller_wait[1] = teller_wait[2];
 8002370:	4b5b      	ldr	r3, [pc, #364]	; (80024e0 <manage_tellers+0x5b8>)
 8002372:	4a5b      	ldr	r2, [pc, #364]	; (80024e0 <manage_tellers+0x5b8>)
 8002374:	33b0      	adds	r3, #176	; 0xb0
 8002376:	f502 71b0 	add.w	r1, r2, #352	; 0x160
 800237a:	22b0      	movs	r2, #176	; 0xb0
 800237c:	4618      	mov	r0, r3
 800237e:	f006 fe01 	bl	8008f84 <memcpy>
				 	teller_wait[4] = VOID_TELLER;
 8002382:	4b57      	ldr	r3, [pc, #348]	; (80024e0 <manage_tellers+0x5b8>)
 8002384:	4a5a      	ldr	r2, [pc, #360]	; (80024f0 <manage_tellers+0x5c8>)
 8002386:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800238a:	4611      	mov	r1, r2
 800238c:	22b0      	movs	r2, #176	; 0xb0
 800238e:	4618      	mov	r0, r3
 8002390:	f006 fdf8 	bl	8008f84 <memcpy>
				  	tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 8002394:	4a50      	ldr	r2, [pc, #320]	; (80024d8 <manage_tellers+0x5b0>)
 8002396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002398:	21b0      	movs	r1, #176	; 0xb0
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80023a4:	f107 0008 	add.w	r0, r7, #8
 80023a8:	4a4b      	ldr	r2, [pc, #300]	; (80024d8 <manage_tellers+0x5b0>)
 80023aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ac:	21b0      	movs	r1, #176	; 0xb0
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3340      	adds	r3, #64	; 0x40
 80023b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b8:	f7fe fcc6 	bl	8000d48 <clock_init>
 80023bc:	f107 0308 	add.w	r3, r7, #8
 80023c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				break;
 80023c8:	e308      	b.n	80029dc <manage_tellers+0xab4>
			if(tellers[i].take_break == 1){
 80023ca:	4a43      	ldr	r2, [pc, #268]	; (80024d8 <manage_tellers+0x5b0>)
 80023cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ce:	21b0      	movs	r1, #176	; 0xb0
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	3308      	adds	r3, #8
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	f040 8300 	bne.w	80029e0 <manage_tellers+0xab8>
				tellers[i].status = 2;
 80023e0:	4a3d      	ldr	r2, [pc, #244]	; (80024d8 <manage_tellers+0x5b0>)
 80023e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e4:	21b0      	movs	r1, #176	; 0xb0
 80023e6:	fb01 f303 	mul.w	r3, r1, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	3304      	adds	r3, #4
 80023ee:	2202      	movs	r2, #2
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	f000 80e2 	beq.w	80025be <manage_tellers+0x696>
 80023fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	f300 8141 	bgt.w	8002684 <manage_tellers+0x75c>
 8002402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002404:	2b01      	cmp	r3, #1
 8002406:	d003      	beq.n	8002410 <manage_tellers+0x4e8>
 8002408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800240a:	2b02      	cmp	r3, #2
 800240c:	d074      	beq.n	80024f8 <manage_tellers+0x5d0>
					break;
 800240e:	e139      	b.n	8002684 <manage_tellers+0x75c>
					breaker.start_break[i] = 1;
 8002410:	4a38      	ldr	r2, [pc, #224]	; (80024f4 <manage_tellers+0x5cc>)
 8002412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002414:	2101      	movs	r1, #1
 8002416:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration1;
 800241a:	4a2f      	ldr	r2, [pc, #188]	; (80024d8 <manage_tellers+0x5b0>)
 800241c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241e:	21b0      	movs	r1, #176	; 0xb0
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800242a:	4b32      	ldr	r3, [pc, #200]	; (80024f4 <manage_tellers+0x5cc>)
 800242c:	4614      	mov	r4, r2
 800242e:	3318      	adds	r3, #24
 8002430:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002434:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					tellers[i].current_break = breaker.break_duration1;
 8002438:	4a27      	ldr	r2, [pc, #156]	; (80024d8 <manage_tellers+0x5b0>)
 800243a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800243c:	21b0      	movs	r1, #176	; 0xb0
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	3378      	adds	r3, #120	; 0x78
 8002446:	4a2b      	ldr	r2, [pc, #172]	; (80024f4 <manage_tellers+0x5cc>)
 8002448:	3304      	adds	r3, #4
 800244a:	3218      	adds	r2, #24
 800244c:	ca07      	ldmia	r2, {r0, r1, r2}
 800244e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_duration1 = clock_init(breaker.break_duration1);
 8002452:	4c28      	ldr	r4, [pc, #160]	; (80024f4 <manage_tellers+0x5cc>)
 8002454:	f107 0008 	add.w	r0, r7, #8
 8002458:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <manage_tellers+0x5cc>)
 800245a:	3318      	adds	r3, #24
 800245c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800245e:	f7fe fc73 	bl	8000d48 <clock_init>
 8002462:	f104 0318 	add.w	r3, r4, #24
 8002466:	f107 0208 	add.w	r2, r7, #8
 800246a:	ca07      	ldmia	r2, {r0, r1, r2}
 800246c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_time1 = clock_init(breaker.break_time1);
 8002470:	4c20      	ldr	r4, [pc, #128]	; (80024f4 <manage_tellers+0x5cc>)
 8002472:	f107 0008 	add.w	r0, r7, #8
 8002476:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <manage_tellers+0x5cc>)
 8002478:	330c      	adds	r3, #12
 800247a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800247c:	f7fe fc64 	bl	8000d48 <clock_init>
 8002480:	f104 030c 	add.w	r3, r4, #12
 8002484:	f107 0208 	add.w	r2, r7, #8
 8002488:	ca07      	ldmia	r2, {r0, r1, r2}
 800248a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					tellers[i].break_end = add_clocks(Clock, tellers[i].break_end);
 800248e:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <manage_tellers+0x5b0>)
 8002490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002492:	21b0      	movs	r1, #176	; 0xb0
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	f103 0670 	add.w	r6, r3, #112	; 0x70
 800249e:	f107 0508 	add.w	r5, r7, #8
 80024a2:	4c10      	ldr	r4, [pc, #64]	; (80024e4 <manage_tellers+0x5bc>)
 80024a4:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <manage_tellers+0x5b0>)
 80024a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a8:	21b0      	movs	r1, #176	; 0xb0
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80024b4:	466b      	mov	r3, sp
 80024b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80024b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80024bc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80024c0:	4628      	mov	r0, r5
 80024c2:	f7fe fc9d 	bl	8000e00 <add_clocks>
 80024c6:	4634      	mov	r4, r6
 80024c8:	f107 0308 	add.w	r3, r7, #8
 80024cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					break;
 80024d4:	e0d7      	b.n	8002686 <manage_tellers+0x75e>
 80024d6:	bf00      	nop
 80024d8:	200003bc 	.word	0x200003bc
 80024dc:	200000fc 	.word	0x200000fc
 80024e0:	2000072c 	.word	0x2000072c
 80024e4:	20000000 	.word	0x20000000
 80024e8:	2000029c 	.word	0x2000029c
 80024ec:	200002a8 	.word	0x200002a8
 80024f0:	2000067c 	.word	0x2000067c
 80024f4:	20000094 	.word	0x20000094
					breaker.start_break[i] = 1;
 80024f8:	4abb      	ldr	r2, [pc, #748]	; (80027e8 <manage_tellers+0x8c0>)
 80024fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fc:	2101      	movs	r1, #1
 80024fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration2;
 8002502:	4aba      	ldr	r2, [pc, #744]	; (80027ec <manage_tellers+0x8c4>)
 8002504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002506:	21b0      	movs	r1, #176	; 0xb0
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002512:	4bb5      	ldr	r3, [pc, #724]	; (80027e8 <manage_tellers+0x8c0>)
 8002514:	4614      	mov	r4, r2
 8002516:	3330      	adds	r3, #48	; 0x30
 8002518:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800251c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					tellers[i].current_break = breaker.break_duration2;
 8002520:	4ab2      	ldr	r2, [pc, #712]	; (80027ec <manage_tellers+0x8c4>)
 8002522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002524:	21b0      	movs	r1, #176	; 0xb0
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	3378      	adds	r3, #120	; 0x78
 800252e:	4aae      	ldr	r2, [pc, #696]	; (80027e8 <manage_tellers+0x8c0>)
 8002530:	3304      	adds	r3, #4
 8002532:	3230      	adds	r2, #48	; 0x30
 8002534:	ca07      	ldmia	r2, {r0, r1, r2}
 8002536:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_duration2 = clock_init(breaker.break_duration2);
 800253a:	4cab      	ldr	r4, [pc, #684]	; (80027e8 <manage_tellers+0x8c0>)
 800253c:	f107 0008 	add.w	r0, r7, #8
 8002540:	4ba9      	ldr	r3, [pc, #676]	; (80027e8 <manage_tellers+0x8c0>)
 8002542:	3330      	adds	r3, #48	; 0x30
 8002544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002546:	f7fe fbff 	bl	8000d48 <clock_init>
 800254a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800254e:	f107 0208 	add.w	r2, r7, #8
 8002552:	ca07      	ldmia	r2, {r0, r1, r2}
 8002554:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_time2 = clock_init(breaker.break_time2);
 8002558:	4ca3      	ldr	r4, [pc, #652]	; (80027e8 <manage_tellers+0x8c0>)
 800255a:	f107 0008 	add.w	r0, r7, #8
 800255e:	4ba2      	ldr	r3, [pc, #648]	; (80027e8 <manage_tellers+0x8c0>)
 8002560:	3324      	adds	r3, #36	; 0x24
 8002562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002564:	f7fe fbf0 	bl	8000d48 <clock_init>
 8002568:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800256c:	f107 0208 	add.w	r2, r7, #8
 8002570:	ca07      	ldmia	r2, {r0, r1, r2}
 8002572:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					tellers[i].break_end = add_clocks(Clock, tellers[i].break_end);
 8002576:	4a9d      	ldr	r2, [pc, #628]	; (80027ec <manage_tellers+0x8c4>)
 8002578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257a:	21b0      	movs	r1, #176	; 0xb0
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4413      	add	r3, r2
 8002582:	f103 0670 	add.w	r6, r3, #112	; 0x70
 8002586:	f107 0508 	add.w	r5, r7, #8
 800258a:	4c99      	ldr	r4, [pc, #612]	; (80027f0 <manage_tellers+0x8c8>)
 800258c:	4a97      	ldr	r2, [pc, #604]	; (80027ec <manage_tellers+0x8c4>)
 800258e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002590:	21b0      	movs	r1, #176	; 0xb0
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800259c:	466b      	mov	r3, sp
 800259e:	ca07      	ldmia	r2, {r0, r1, r2}
 80025a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80025a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80025a8:	4628      	mov	r0, r5
 80025aa:	f7fe fc29 	bl	8000e00 <add_clocks>
 80025ae:	4634      	mov	r4, r6
 80025b0:	f107 0308 	add.w	r3, r7, #8
 80025b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					break;
 80025bc:	e063      	b.n	8002686 <manage_tellers+0x75e>
					breaker.start_break[i] = 1;
 80025be:	4a8a      	ldr	r2, [pc, #552]	; (80027e8 <manage_tellers+0x8c0>)
 80025c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c2:	2101      	movs	r1, #1
 80025c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration3;
 80025c8:	4a88      	ldr	r2, [pc, #544]	; (80027ec <manage_tellers+0x8c4>)
 80025ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025cc:	21b0      	movs	r1, #176	; 0xb0
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80025d8:	4b83      	ldr	r3, [pc, #524]	; (80027e8 <manage_tellers+0x8c0>)
 80025da:	4614      	mov	r4, r2
 80025dc:	3348      	adds	r3, #72	; 0x48
 80025de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					tellers[i].current_break = breaker.break_duration3;
 80025e6:	4a81      	ldr	r2, [pc, #516]	; (80027ec <manage_tellers+0x8c4>)
 80025e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ea:	21b0      	movs	r1, #176	; 0xb0
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3378      	adds	r3, #120	; 0x78
 80025f4:	4a7c      	ldr	r2, [pc, #496]	; (80027e8 <manage_tellers+0x8c0>)
 80025f6:	3304      	adds	r3, #4
 80025f8:	3248      	adds	r2, #72	; 0x48
 80025fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80025fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_duration3 = clock_init(breaker.break_duration3);
 8002600:	4c79      	ldr	r4, [pc, #484]	; (80027e8 <manage_tellers+0x8c0>)
 8002602:	f107 0008 	add.w	r0, r7, #8
 8002606:	4b78      	ldr	r3, [pc, #480]	; (80027e8 <manage_tellers+0x8c0>)
 8002608:	3348      	adds	r3, #72	; 0x48
 800260a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800260c:	f7fe fb9c 	bl	8000d48 <clock_init>
 8002610:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002614:	f107 0208 	add.w	r2, r7, #8
 8002618:	ca07      	ldmia	r2, {r0, r1, r2}
 800261a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_time3 = clock_init(breaker.break_time3);
 800261e:	4c72      	ldr	r4, [pc, #456]	; (80027e8 <manage_tellers+0x8c0>)
 8002620:	f107 0008 	add.w	r0, r7, #8
 8002624:	4b70      	ldr	r3, [pc, #448]	; (80027e8 <manage_tellers+0x8c0>)
 8002626:	333c      	adds	r3, #60	; 0x3c
 8002628:	cb0e      	ldmia	r3, {r1, r2, r3}
 800262a:	f7fe fb8d 	bl	8000d48 <clock_init>
 800262e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8002632:	f107 0208 	add.w	r2, r7, #8
 8002636:	ca07      	ldmia	r2, {r0, r1, r2}
 8002638:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					tellers[i].break_end = add_clocks(Clock, tellers[i].break_end);
 800263c:	4a6b      	ldr	r2, [pc, #428]	; (80027ec <manage_tellers+0x8c4>)
 800263e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002640:	21b0      	movs	r1, #176	; 0xb0
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	f103 0670 	add.w	r6, r3, #112	; 0x70
 800264c:	f107 0508 	add.w	r5, r7, #8
 8002650:	4c67      	ldr	r4, [pc, #412]	; (80027f0 <manage_tellers+0x8c8>)
 8002652:	4a66      	ldr	r2, [pc, #408]	; (80027ec <manage_tellers+0x8c4>)
 8002654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002656:	21b0      	movs	r1, #176	; 0xb0
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002662:	466b      	mov	r3, sp
 8002664:	ca07      	ldmia	r2, {r0, r1, r2}
 8002666:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800266a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800266e:	4628      	mov	r0, r5
 8002670:	f7fe fbc6 	bl	8000e00 <add_clocks>
 8002674:	4634      	mov	r4, r6
 8002676:	f107 0308 	add.w	r3, r7, #8
 800267a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800267e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					break;
 8002682:	e000      	b.n	8002686 <manage_tellers+0x75e>
					break;
 8002684:	bf00      	nop
				tellers[i].take_break = 0;
 8002686:	4a59      	ldr	r2, [pc, #356]	; (80027ec <manage_tellers+0x8c4>)
 8002688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800268a:	21b0      	movs	r1, #176	; 0xb0
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	3308      	adds	r3, #8
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
				if(clock_compare(tellers[i].current_time_waiting,tellers[i].max_time_waiting) == 0){
 8002698:	4a54      	ldr	r2, [pc, #336]	; (80027ec <manage_tellers+0x8c4>)
 800269a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800269c:	21b0      	movs	r1, #176	; 0xb0
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	3358      	adds	r3, #88	; 0x58
 80026a6:	4951      	ldr	r1, [pc, #324]	; (80027ec <manage_tellers+0x8c4>)
 80026a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026aa:	20b0      	movs	r0, #176	; 0xb0
 80026ac:	fb00 f202 	mul.w	r2, r0, r2
 80026b0:	440a      	add	r2, r1
 80026b2:	3240      	adds	r2, #64	; 0x40
 80026b4:	466c      	mov	r4, sp
 80026b6:	1d19      	adds	r1, r3, #4
 80026b8:	c903      	ldmia	r1, {r0, r1}
 80026ba:	e884 0003 	stmia.w	r4, {r0, r1}
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80026c2:	f7fe fbd7 	bl	8000e74 <clock_compare>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d113      	bne.n	80026f4 <manage_tellers+0x7cc>
					tellers[i].max_time_waiting = tellers[i].current_time_waiting;
 80026cc:	4a47      	ldr	r2, [pc, #284]	; (80027ec <manage_tellers+0x8c4>)
 80026ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d0:	21b0      	movs	r1, #176	; 0xb0
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	f103 0058 	add.w	r0, r3, #88	; 0x58
 80026dc:	4a43      	ldr	r2, [pc, #268]	; (80027ec <manage_tellers+0x8c4>)
 80026de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e0:	21b0      	movs	r1, #176	; 0xb0
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80026ec:	4603      	mov	r3, r0
 80026ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80026f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].total_time_waiting = add_clocks(tellers[i].total_time_waiting,tellers[i].current_time_waiting);
 80026f4:	4a3d      	ldr	r2, [pc, #244]	; (80027ec <manage_tellers+0x8c4>)
 80026f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f8:	21b0      	movs	r1, #176	; 0xb0
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8002704:	f107 0508 	add.w	r5, r7, #8
 8002708:	4a38      	ldr	r2, [pc, #224]	; (80027ec <manage_tellers+0x8c4>)
 800270a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800270c:	21b0      	movs	r1, #176	; 0xb0
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	3328      	adds	r3, #40	; 0x28
 8002716:	4935      	ldr	r1, [pc, #212]	; (80027ec <manage_tellers+0x8c4>)
 8002718:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800271a:	20b0      	movs	r0, #176	; 0xb0
 800271c:	fb00 f202 	mul.w	r2, r0, r2
 8002720:	440a      	add	r2, r1
 8002722:	3240      	adds	r2, #64	; 0x40
 8002724:	466c      	mov	r4, sp
 8002726:	ca07      	ldmia	r2, {r0, r1, r2}
 8002728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800272c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800272e:	4628      	mov	r0, r5
 8002730:	f7fe fb66 	bl	8000e00 <add_clocks>
 8002734:	4634      	mov	r4, r6
 8002736:	f107 0308 	add.w	r3, r7, #8
 800273a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800273e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 8002742:	4a2a      	ldr	r2, [pc, #168]	; (80027ec <manage_tellers+0x8c4>)
 8002744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002746:	21b0      	movs	r1, #176	; 0xb0
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002752:	f107 0008 	add.w	r0, r7, #8
 8002756:	4a25      	ldr	r2, [pc, #148]	; (80027ec <manage_tellers+0x8c4>)
 8002758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800275a:	21b0      	movs	r1, #176	; 0xb0
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	3340      	adds	r3, #64	; 0x40
 8002764:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002766:	f7fe faef 	bl	8000d48 <clock_init>
 800276a:	f107 0308 	add.w	r3, r7, #8
 800276e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			break;
 8002776:	e133      	b.n	80029e0 <manage_tellers+0xab8>
			if(clock_compare(tellers[i].current_time_working,tellers[i].service_end_time) == 1){
 8002778:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <manage_tellers+0x8c4>)
 800277a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800277c:	21b0      	movs	r1, #176	; 0xb0
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	3308      	adds	r3, #8
 8002786:	4919      	ldr	r1, [pc, #100]	; (80027ec <manage_tellers+0x8c4>)
 8002788:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800278a:	20b0      	movs	r0, #176	; 0xb0
 800278c:	fb00 f202 	mul.w	r2, r0, r2
 8002790:	440a      	add	r2, r1
 8002792:	3230      	adds	r2, #48	; 0x30
 8002794:	466c      	mov	r4, sp
 8002796:	f103 0108 	add.w	r1, r3, #8
 800279a:	c903      	ldmia	r1, {r0, r1}
 800279c:	e884 0003 	stmia.w	r4, {r0, r1}
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	3204      	adds	r2, #4
 80027a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80027a6:	f7fe fb65 	bl	8000e74 <clock_compare>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d121      	bne.n	80027f4 <manage_tellers+0x8cc>
				tellers[i].current_time_working = clock_increment(tellers[i].current_time_working);
 80027b0:	4a0e      	ldr	r2, [pc, #56]	; (80027ec <manage_tellers+0x8c4>)
 80027b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b4:	21b0      	movs	r1, #176	; 0xb0
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80027c0:	f107 0008 	add.w	r0, r7, #8
 80027c4:	4a09      	ldr	r2, [pc, #36]	; (80027ec <manage_tellers+0x8c4>)
 80027c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c8:	21b0      	movs	r1, #176	; 0xb0
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	3330      	adds	r3, #48	; 0x30
 80027d2:	3304      	adds	r3, #4
 80027d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d6:	f7fe fae9 	bl	8000dac <clock_increment>
 80027da:	1d23      	adds	r3, r4, #4
 80027dc:	f107 0208 	add.w	r2, r7, #8
 80027e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80027e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				break;
 80027e6:	e100      	b.n	80029ea <manage_tellers+0xac2>
 80027e8:	20000094 	.word	0x20000094
 80027ec:	200003bc 	.word	0x200003bc
 80027f0:	20000000 	.word	0x20000000
			if(clock_compare(tellers[i].current_time_working,tellers[i].service_end_time) == 1){
 80027f4:	4a81      	ldr	r2, [pc, #516]	; (80029fc <manage_tellers+0xad4>)
 80027f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f8:	21b0      	movs	r1, #176	; 0xb0
 80027fa:	fb01 f303 	mul.w	r3, r1, r3
 80027fe:	4413      	add	r3, r2
 8002800:	3308      	adds	r3, #8
 8002802:	497e      	ldr	r1, [pc, #504]	; (80029fc <manage_tellers+0xad4>)
 8002804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002806:	20b0      	movs	r0, #176	; 0xb0
 8002808:	fb00 f202 	mul.w	r2, r0, r2
 800280c:	440a      	add	r2, r1
 800280e:	3230      	adds	r2, #48	; 0x30
 8002810:	466c      	mov	r4, sp
 8002812:	f103 0108 	add.w	r1, r3, #8
 8002816:	c903      	ldmia	r1, {r0, r1}
 8002818:	e884 0003 	stmia.w	r4, {r0, r1}
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	3204      	adds	r2, #4
 8002820:	ca07      	ldmia	r2, {r0, r1, r2}
 8002822:	f7fe fb27 	bl	8000e74 <clock_compare>
 8002826:	4603      	mov	r3, r0
 8002828:	2b01      	cmp	r3, #1
 800282a:	f040 80e1 	bne.w	80029f0 <manage_tellers+0xac8>
				if(clock_compare(tellers[i].current_time_working,tellers[i].max_time_working) == 0){
 800282e:	4a73      	ldr	r2, [pc, #460]	; (80029fc <manage_tellers+0xad4>)
 8002830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002832:	21b0      	movs	r1, #176	; 0xb0
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	3348      	adds	r3, #72	; 0x48
 800283c:	496f      	ldr	r1, [pc, #444]	; (80029fc <manage_tellers+0xad4>)
 800283e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002840:	20b0      	movs	r0, #176	; 0xb0
 8002842:	fb00 f202 	mul.w	r2, r0, r2
 8002846:	440a      	add	r2, r1
 8002848:	3230      	adds	r2, #48	; 0x30
 800284a:	466c      	mov	r4, sp
 800284c:	f103 0108 	add.w	r1, r3, #8
 8002850:	c903      	ldmia	r1, {r0, r1}
 8002852:	e884 0003 	stmia.w	r4, {r0, r1}
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	3204      	adds	r2, #4
 800285a:	ca07      	ldmia	r2, {r0, r1, r2}
 800285c:	f7fe fb0a 	bl	8000e74 <clock_compare>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d112      	bne.n	800288c <manage_tellers+0x964>
					tellers[i].max_time_working = tellers[i].current_time_working;
 8002866:	4a65      	ldr	r2, [pc, #404]	; (80029fc <manage_tellers+0xad4>)
 8002868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286a:	21b0      	movs	r1, #176	; 0xb0
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	3348      	adds	r3, #72	; 0x48
 8002874:	4961      	ldr	r1, [pc, #388]	; (80029fc <manage_tellers+0xad4>)
 8002876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002878:	20b0      	movs	r0, #176	; 0xb0
 800287a:	fb00 f202 	mul.w	r2, r0, r2
 800287e:	440a      	add	r2, r1
 8002880:	3230      	adds	r2, #48	; 0x30
 8002882:	3304      	adds	r3, #4
 8002884:	3204      	adds	r2, #4
 8002886:	ca07      	ldmia	r2, {r0, r1, r2}
 8002888:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].total_time_working = add_clocks(tellers[i].total_time_working,tellers[i].current_time_working);
 800288c:	4a5b      	ldr	r2, [pc, #364]	; (80029fc <manage_tellers+0xad4>)
 800288e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002890:	21b0      	movs	r1, #176	; 0xb0
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	f103 0518 	add.w	r5, r3, #24
 800289c:	f107 0c08 	add.w	ip, r7, #8
 80028a0:	4a56      	ldr	r2, [pc, #344]	; (80029fc <manage_tellers+0xad4>)
 80028a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a4:	21b0      	movs	r1, #176	; 0xb0
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	f103 0618 	add.w	r6, r3, #24
 80028b0:	4a52      	ldr	r2, [pc, #328]	; (80029fc <manage_tellers+0xad4>)
 80028b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b4:	21b0      	movs	r1, #176	; 0xb0
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3330      	adds	r3, #48	; 0x30
 80028be:	466c      	mov	r4, sp
 80028c0:	3304      	adds	r3, #4
 80028c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028ca:	1d33      	adds	r3, r6, #4
 80028cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ce:	4660      	mov	r0, ip
 80028d0:	f7fe fa96 	bl	8000e00 <add_clocks>
 80028d4:	1d2b      	adds	r3, r5, #4
 80028d6:	f107 0208 	add.w	r2, r7, #8
 80028da:	ca07      	ldmia	r2, {r0, r1, r2}
 80028dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].current_time_working = clock_init(tellers[i].current_time_working);
 80028e0:	4a46      	ldr	r2, [pc, #280]	; (80029fc <manage_tellers+0xad4>)
 80028e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e4:	21b0      	movs	r1, #176	; 0xb0
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80028f0:	f107 0008 	add.w	r0, r7, #8
 80028f4:	4a41      	ldr	r2, [pc, #260]	; (80029fc <manage_tellers+0xad4>)
 80028f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f8:	21b0      	movs	r1, #176	; 0xb0
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	3330      	adds	r3, #48	; 0x30
 8002902:	3304      	adds	r3, #4
 8002904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002906:	f7fe fa1f 	bl	8000d48 <clock_init>
 800290a:	1d23      	adds	r3, r4, #4
 800290c:	f107 0208 	add.w	r2, r7, #8
 8002910:	ca07      	ldmia	r2, {r0, r1, r2}
 8002912:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].status = 0;
 8002916:	4a39      	ldr	r2, [pc, #228]	; (80029fc <manage_tellers+0xad4>)
 8002918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800291a:	21b0      	movs	r1, #176	; 0xb0
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3304      	adds	r3, #4
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
				tellers[i].teller_start_wait = Clock;
 8002928:	4a34      	ldr	r2, [pc, #208]	; (80029fc <manage_tellers+0xad4>)
 800292a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800292c:	21b0      	movs	r1, #176	; 0xb0
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3360      	adds	r3, #96	; 0x60
 8002936:	4a32      	ldr	r2, [pc, #200]	; (8002a00 <manage_tellers+0xad8>)
 8002938:	3304      	adds	r3, #4
 800293a:	ca07      	ldmia	r2, {r0, r1, r2}
 800293c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				if(!((teller_wait[0].id == i) && (teller_wait[1].id == i) && (teller_wait[2].id == i))){
 8002940:	4b30      	ldr	r3, [pc, #192]	; (8002a04 <manage_tellers+0xadc>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002946:	429a      	cmp	r2, r3
 8002948:	d10b      	bne.n	8002962 <manage_tellers+0xa3a>
 800294a:	4b2e      	ldr	r3, [pc, #184]	; (8002a04 <manage_tellers+0xadc>)
 800294c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002952:	429a      	cmp	r2, r3
 8002954:	d105      	bne.n	8002962 <manage_tellers+0xa3a>
 8002956:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <manage_tellers+0xadc>)
 8002958:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800295c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800295e:	429a      	cmp	r2, r3
 8002960:	d040      	beq.n	80029e4 <manage_tellers+0xabc>
					if(teller_wait[0].id == 0){
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <manage_tellers+0xadc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10c      	bne.n	8002984 <manage_tellers+0xa5c>
						teller_wait[0] = tellers[i];
 800296a:	4826      	ldr	r0, [pc, #152]	; (8002a04 <manage_tellers+0xadc>)
 800296c:	4a23      	ldr	r2, [pc, #140]	; (80029fc <manage_tellers+0xad4>)
 800296e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002970:	21b0      	movs	r1, #176	; 0xb0
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	4619      	mov	r1, r3
 800297a:	23b0      	movs	r3, #176	; 0xb0
 800297c:	461a      	mov	r2, r3
 800297e:	f006 fb01 	bl	8008f84 <memcpy>
					break;
 8002982:	e031      	b.n	80029e8 <manage_tellers+0xac0>
					else if(teller_wait[1].id == 0){
 8002984:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <manage_tellers+0xadc>)
 8002986:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10d      	bne.n	80029aa <manage_tellers+0xa82>
						teller_wait[1] = tellers[i];
 800298e:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <manage_tellers+0xadc>)
 8002990:	491a      	ldr	r1, [pc, #104]	; (80029fc <manage_tellers+0xad4>)
 8002992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002994:	20b0      	movs	r0, #176	; 0xb0
 8002996:	fb00 f303 	mul.w	r3, r0, r3
 800299a:	4419      	add	r1, r3
 800299c:	f102 03b0 	add.w	r3, r2, #176	; 0xb0
 80029a0:	22b0      	movs	r2, #176	; 0xb0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f006 faee 	bl	8008f84 <memcpy>
					break;
 80029a8:	e01e      	b.n	80029e8 <manage_tellers+0xac0>
					else if(teller_wait[2].id == 0){
 80029aa:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <manage_tellers+0xadc>)
 80029ac:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d119      	bne.n	80029e8 <manage_tellers+0xac0>
						teller_wait[2] = tellers[i];
 80029b4:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <manage_tellers+0xadc>)
 80029b6:	4911      	ldr	r1, [pc, #68]	; (80029fc <manage_tellers+0xad4>)
 80029b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ba:	20b0      	movs	r0, #176	; 0xb0
 80029bc:	fb00 f303 	mul.w	r3, r0, r3
 80029c0:	4419      	add	r1, r3
 80029c2:	f502 73b0 	add.w	r3, r2, #352	; 0x160
 80029c6:	22b0      	movs	r2, #176	; 0xb0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f006 fadb 	bl	8008f84 <memcpy>
					break;
 80029ce:	e00b      	b.n	80029e8 <manage_tellers+0xac0>
				break;
 80029d0:	bf00      	nop
 80029d2:	e00d      	b.n	80029f0 <manage_tellers+0xac8>
			break;
 80029d4:	bf00      	nop
 80029d6:	e00b      	b.n	80029f0 <manage_tellers+0xac8>
					break;
 80029d8:	bf00      	nop
 80029da:	e009      	b.n	80029f0 <manage_tellers+0xac8>
				break;
 80029dc:	bf00      	nop
 80029de:	e007      	b.n	80029f0 <manage_tellers+0xac8>
			break;
 80029e0:	bf00      	nop
 80029e2:	e005      	b.n	80029f0 <manage_tellers+0xac8>
				break;
 80029e4:	bf00      	nop
 80029e6:	e003      	b.n	80029f0 <manage_tellers+0xac8>
					break;
 80029e8:	bf00      	nop
			break;
 80029ea:	e001      	b.n	80029f0 <manage_tellers+0xac8>
	}

}
 80029ec:	bf00      	nop
 80029ee:	e000      	b.n	80029f2 <manage_tellers+0xaca>
			break;
 80029f0:	bf00      	nop
}
 80029f2:	bf00      	nop
 80029f4:	3750      	adds	r7, #80	; 0x50
 80029f6:	46bd      	mov	sp, r7
 80029f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029fc:	200003bc 	.word	0x200003bc
 8002a00:	20000000 	.word	0x20000000
 8002a04:	2000072c 	.word	0x2000072c

08002a08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a0c:	f7ff f8f4 	bl	8001bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a10:	480c      	ldr	r0, [pc, #48]	; (8002a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a12:	490d      	ldr	r1, [pc, #52]	; (8002a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a14:	4a0d      	ldr	r2, [pc, #52]	; (8002a4c <LoopForever+0xe>)
  movs r3, #0
 8002a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a18:	e002      	b.n	8002a20 <LoopCopyDataInit>

08002a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a1e:	3304      	adds	r3, #4

08002a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a24:	d3f9      	bcc.n	8002a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a26:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a28:	4c0a      	ldr	r4, [pc, #40]	; (8002a54 <LoopForever+0x16>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a2c:	e001      	b.n	8002a32 <LoopFillZerobss>

08002a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a30:	3204      	adds	r2, #4

08002a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a34:	d3fb      	bcc.n	8002a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a36:	f006 fa7f 	bl	8008f38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a3a:	f7fe fc95 	bl	8001368 <main>

08002a3e <LoopForever>:

LoopForever:
    b LoopForever
 8002a3e:	e7fe      	b.n	8002a3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a48:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002a4c:	08009a44 	.word	0x08009a44
  ldr r2, =_sbss
 8002a50:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002a54:	20007260 	.word	0x20007260

08002a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a58:	e7fe      	b.n	8002a58 <ADC1_2_IRQHandler>
	...

08002a5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <HAL_Init+0x3c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <HAL_Init+0x3c>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a72:	2003      	movs	r0, #3
 8002a74:	f000 f93e 	bl	8002cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a78:	200f      	movs	r0, #15
 8002a7a:	f000 f80f 	bl	8002a9c <HAL_InitTick>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	71fb      	strb	r3, [r7, #7]
 8002a88:	e001      	b.n	8002a8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a8a:	f7fe ff51 	bl	8001930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40022000 	.word	0x40022000

08002a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002aa8:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_InitTick+0x6c>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d023      	beq.n	8002af8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ab0:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <HAL_InitTick+0x70>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <HAL_InitTick+0x6c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f949 	bl	8002d5e <HAL_SYSTICK_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b0f      	cmp	r3, #15
 8002ad6:	d809      	bhi.n	8002aec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ae0:	f000 f913 	bl	8002d0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <HAL_InitTick+0x74>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e007      	b.n	8002afc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
 8002af0:	e004      	b.n	8002afc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]
 8002af6:	e001      	b.n	8002afc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000020 	.word	0x20000020
 8002b0c:	20000018 	.word	0x20000018
 8002b10:	2000001c 	.word	0x2000001c

08002b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_IncTick+0x20>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_IncTick+0x24>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4413      	add	r3, r2
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <HAL_IncTick+0x24>)
 8002b26:	6013      	str	r3, [r2, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20000020 	.word	0x20000020
 8002b38:	200009ec 	.word	0x200009ec

08002b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <HAL_GetTick+0x14>)
 8002b42:	681b      	ldr	r3, [r3, #0]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	200009ec 	.word	0x200009ec

08002b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <__NVIC_SetPriorityGrouping+0x44>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b70:	4013      	ands	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b86:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <__NVIC_SetPriorityGrouping+0x44>)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	60d3      	str	r3, [r2, #12]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	0a1b      	lsrs	r3, r3, #8
 8002ba6:	f003 0307 	and.w	r3, r3, #7
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	db0b      	blt.n	8002be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	f003 021f 	and.w	r2, r3, #31
 8002bd0:	4907      	ldr	r1, [pc, #28]	; (8002bf0 <__NVIC_EnableIRQ+0x38>)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	2001      	movs	r0, #1
 8002bda:	fa00 f202 	lsl.w	r2, r0, r2
 8002bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000e100 	.word	0xe000e100

08002bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	db0a      	blt.n	8002c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	490c      	ldr	r1, [pc, #48]	; (8002c40 <__NVIC_SetPriority+0x4c>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	0112      	lsls	r2, r2, #4
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	440b      	add	r3, r1
 8002c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c1c:	e00a      	b.n	8002c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4908      	ldr	r1, [pc, #32]	; (8002c44 <__NVIC_SetPriority+0x50>)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	3b04      	subs	r3, #4
 8002c2c:	0112      	lsls	r2, r2, #4
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	440b      	add	r3, r1
 8002c32:	761a      	strb	r2, [r3, #24]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000e100 	.word	0xe000e100
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	; 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f1c3 0307 	rsb	r3, r3, #7
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	bf28      	it	cs
 8002c66:	2304      	movcs	r3, #4
 8002c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d902      	bls.n	8002c78 <NVIC_EncodePriority+0x30>
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3b03      	subs	r3, #3
 8002c76:	e000      	b.n	8002c7a <NVIC_EncodePriority+0x32>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43da      	mvns	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	43d9      	mvns	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	4313      	orrs	r3, r2
         );
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3724      	adds	r7, #36	; 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc0:	d301      	bcc.n	8002cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e00f      	b.n	8002ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <SysTick_Config+0x40>)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cce:	210f      	movs	r1, #15
 8002cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cd4:	f7ff ff8e 	bl	8002bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <SysTick_Config+0x40>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cde:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <SysTick_Config+0x40>)
 8002ce0:	2207      	movs	r2, #7
 8002ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	e000e010 	.word	0xe000e010

08002cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff ff29 	bl	8002b54 <__NVIC_SetPriorityGrouping>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b086      	sub	sp, #24
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	4603      	mov	r3, r0
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
 8002d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d1c:	f7ff ff3e 	bl	8002b9c <__NVIC_GetPriorityGrouping>
 8002d20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	6978      	ldr	r0, [r7, #20]
 8002d28:	f7ff ff8e 	bl	8002c48 <NVIC_EncodePriority>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff5d 	bl	8002bf4 <__NVIC_SetPriority>
}
 8002d3a:	bf00      	nop
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	4603      	mov	r3, r0
 8002d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff31 	bl	8002bb8 <__NVIC_EnableIRQ>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff ffa2 	bl	8002cb0 <SysTick_Config>
 8002d6c:	4603      	mov	r3, r0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d86:	e17f      	b.n	8003088 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	fa01 f303 	lsl.w	r3, r1, r3
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 8171 	beq.w	8003082 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d005      	beq.n	8002db8 <HAL_GPIO_Init+0x40>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d130      	bne.n	8002e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dee:	2201      	movs	r2, #1
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 0201 	and.w	r2, r3, #1
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d118      	bne.n	8002e58 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	08db      	lsrs	r3, r3, #3
 8002e42:	f003 0201 	and.w	r2, r3, #1
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d017      	beq.n	8002e94 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	2203      	movs	r2, #3
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d123      	bne.n	8002ee8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	08da      	lsrs	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3208      	adds	r2, #8
 8002ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	220f      	movs	r2, #15
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	08da      	lsrs	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3208      	adds	r2, #8
 8002ee2:	6939      	ldr	r1, [r7, #16]
 8002ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0203 	and.w	r2, r3, #3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80ac 	beq.w	8003082 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2a:	4b5f      	ldr	r3, [pc, #380]	; (80030a8 <HAL_GPIO_Init+0x330>)
 8002f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2e:	4a5e      	ldr	r2, [pc, #376]	; (80030a8 <HAL_GPIO_Init+0x330>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6613      	str	r3, [r2, #96]	; 0x60
 8002f36:	4b5c      	ldr	r3, [pc, #368]	; (80030a8 <HAL_GPIO_Init+0x330>)
 8002f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f42:	4a5a      	ldr	r2, [pc, #360]	; (80030ac <HAL_GPIO_Init+0x334>)
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	3302      	adds	r3, #2
 8002f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	220f      	movs	r2, #15
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f6c:	d025      	beq.n	8002fba <HAL_GPIO_Init+0x242>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4f      	ldr	r2, [pc, #316]	; (80030b0 <HAL_GPIO_Init+0x338>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d01f      	beq.n	8002fb6 <HAL_GPIO_Init+0x23e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a4e      	ldr	r2, [pc, #312]	; (80030b4 <HAL_GPIO_Init+0x33c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d019      	beq.n	8002fb2 <HAL_GPIO_Init+0x23a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4d      	ldr	r2, [pc, #308]	; (80030b8 <HAL_GPIO_Init+0x340>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d013      	beq.n	8002fae <HAL_GPIO_Init+0x236>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4c      	ldr	r2, [pc, #304]	; (80030bc <HAL_GPIO_Init+0x344>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00d      	beq.n	8002faa <HAL_GPIO_Init+0x232>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4b      	ldr	r2, [pc, #300]	; (80030c0 <HAL_GPIO_Init+0x348>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d007      	beq.n	8002fa6 <HAL_GPIO_Init+0x22e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4a      	ldr	r2, [pc, #296]	; (80030c4 <HAL_GPIO_Init+0x34c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d101      	bne.n	8002fa2 <HAL_GPIO_Init+0x22a>
 8002f9e:	2306      	movs	r3, #6
 8002fa0:	e00c      	b.n	8002fbc <HAL_GPIO_Init+0x244>
 8002fa2:	2307      	movs	r3, #7
 8002fa4:	e00a      	b.n	8002fbc <HAL_GPIO_Init+0x244>
 8002fa6:	2305      	movs	r3, #5
 8002fa8:	e008      	b.n	8002fbc <HAL_GPIO_Init+0x244>
 8002faa:	2304      	movs	r3, #4
 8002fac:	e006      	b.n	8002fbc <HAL_GPIO_Init+0x244>
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e004      	b.n	8002fbc <HAL_GPIO_Init+0x244>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e002      	b.n	8002fbc <HAL_GPIO_Init+0x244>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_GPIO_Init+0x244>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	f002 0203 	and.w	r2, r2, #3
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	4093      	lsls	r3, r2
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fcc:	4937      	ldr	r1, [pc, #220]	; (80030ac <HAL_GPIO_Init+0x334>)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fda:	4b3b      	ldr	r3, [pc, #236]	; (80030c8 <HAL_GPIO_Init+0x350>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ffe:	4a32      	ldr	r2, [pc, #200]	; (80030c8 <HAL_GPIO_Init+0x350>)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003004:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <HAL_GPIO_Init+0x350>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	43db      	mvns	r3, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003028:	4a27      	ldr	r2, [pc, #156]	; (80030c8 <HAL_GPIO_Init+0x350>)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800302e:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <HAL_GPIO_Init+0x350>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	43db      	mvns	r3, r3
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4013      	ands	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003052:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <HAL_GPIO_Init+0x350>)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003058:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <HAL_GPIO_Init+0x350>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	43db      	mvns	r3, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800307c:	4a12      	ldr	r2, [pc, #72]	; (80030c8 <HAL_GPIO_Init+0x350>)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	3301      	adds	r3, #1
 8003086:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa22 f303 	lsr.w	r3, r2, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	f47f ae78 	bne.w	8002d88 <HAL_GPIO_Init+0x10>
  }
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40010000 	.word	0x40010000
 80030b0:	48000400 	.word	0x48000400
 80030b4:	48000800 	.word	0x48000800
 80030b8:	48000c00 	.word	0x48000c00
 80030bc:	48001000 	.word	0x48001000
 80030c0:	48001400 	.word	0x48001400
 80030c4:	48001800 	.word	0x48001800
 80030c8:	40010400 	.word	0x40010400

080030cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	887b      	ldrh	r3, [r7, #2]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
 80030e8:	e001      	b.n	80030ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
 8003108:	4613      	mov	r3, r2
 800310a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800310c:	787b      	ldrb	r3, [r7, #1]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003112:	887a      	ldrh	r2, [r7, #2]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003118:	e002      	b.n	8003120 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800311a:	887a      	ldrh	r2, [r7, #2]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <HAL_PWREx_GetVoltageRange+0x18>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40007000 	.word	0x40007000

08003148 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003156:	d130      	bne.n	80031ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003158:	4b23      	ldr	r3, [pc, #140]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003164:	d038      	beq.n	80031d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003166:	4b20      	ldr	r3, [pc, #128]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800316e:	4a1e      	ldr	r2, [pc, #120]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003170:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003174:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003176:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2232      	movs	r2, #50	; 0x32
 800317c:	fb02 f303 	mul.w	r3, r2, r3
 8003180:	4a1b      	ldr	r2, [pc, #108]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	0c9b      	lsrs	r3, r3, #18
 8003188:	3301      	adds	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800318c:	e002      	b.n	8003194 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3b01      	subs	r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003194:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a0:	d102      	bne.n	80031a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1f2      	bne.n	800318e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b4:	d110      	bne.n	80031d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e00f      	b.n	80031da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c6:	d007      	beq.n	80031d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031c8:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031d0:	4a05      	ldr	r2, [pc, #20]	; (80031e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40007000 	.word	0x40007000
 80031ec:	20000018 	.word	0x20000018
 80031f0:	431bde83 	.word	0x431bde83

080031f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e3ca      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003206:	4b97      	ldr	r3, [pc, #604]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003210:	4b94      	ldr	r3, [pc, #592]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 80e4 	beq.w	80033f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <HAL_RCC_OscConfig+0x4a>
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	2b0c      	cmp	r3, #12
 8003232:	f040 808b 	bne.w	800334c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b01      	cmp	r3, #1
 800323a:	f040 8087 	bne.w	800334c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800323e:	4b89      	ldr	r3, [pc, #548]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_RCC_OscConfig+0x62>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e3a2      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1a      	ldr	r2, [r3, #32]
 800325a:	4b82      	ldr	r3, [pc, #520]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d004      	beq.n	8003270 <HAL_RCC_OscConfig+0x7c>
 8003266:	4b7f      	ldr	r3, [pc, #508]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800326e:	e005      	b.n	800327c <HAL_RCC_OscConfig+0x88>
 8003270:	4b7c      	ldr	r3, [pc, #496]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003276:	091b      	lsrs	r3, r3, #4
 8003278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800327c:	4293      	cmp	r3, r2
 800327e:	d223      	bcs.n	80032c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fd55 	bl	8003d34 <RCC_SetFlashLatencyFromMSIRange>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e383      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003294:	4b73      	ldr	r3, [pc, #460]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a72      	ldr	r2, [pc, #456]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800329a:	f043 0308 	orr.w	r3, r3, #8
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b70      	ldr	r3, [pc, #448]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	496d      	ldr	r1, [pc, #436]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b2:	4b6c      	ldr	r3, [pc, #432]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	4968      	ldr	r1, [pc, #416]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	604b      	str	r3, [r1, #4]
 80032c6:	e025      	b.n	8003314 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032c8:	4b66      	ldr	r3, [pc, #408]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a65      	ldr	r2, [pc, #404]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032ce:	f043 0308 	orr.w	r3, r3, #8
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	4b63      	ldr	r3, [pc, #396]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	4960      	ldr	r1, [pc, #384]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032e6:	4b5f      	ldr	r3, [pc, #380]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	495b      	ldr	r1, [pc, #364]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d109      	bne.n	8003314 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fd15 	bl	8003d34 <RCC_SetFlashLatencyFromMSIRange>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e343      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003314:	f000 fc4a 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b52      	ldr	r3, [pc, #328]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	4950      	ldr	r1, [pc, #320]	; (8003468 <HAL_RCC_OscConfig+0x274>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
 8003330:	4a4e      	ldr	r2, [pc, #312]	; (800346c <HAL_RCC_OscConfig+0x278>)
 8003332:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003334:	4b4e      	ldr	r3, [pc, #312]	; (8003470 <HAL_RCC_OscConfig+0x27c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fbaf 	bl	8002a9c <HAL_InitTick>
 800333e:	4603      	mov	r3, r0
 8003340:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d052      	beq.n	80033ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	e327      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d032      	beq.n	80033ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003354:	4b43      	ldr	r3, [pc, #268]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a42      	ldr	r2, [pc, #264]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003360:	f7ff fbec 	bl	8002b3c <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003368:	f7ff fbe8 	bl	8002b3c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e310      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800337a:	4b3a      	ldr	r3, [pc, #232]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003386:	4b37      	ldr	r3, [pc, #220]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a36      	ldr	r2, [pc, #216]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800338c:	f043 0308 	orr.w	r3, r3, #8
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b34      	ldr	r3, [pc, #208]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4931      	ldr	r1, [pc, #196]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a4:	4b2f      	ldr	r3, [pc, #188]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	492c      	ldr	r1, [pc, #176]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]
 80033b8:	e01a      	b.n	80033f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033ba:	4b2a      	ldr	r3, [pc, #168]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a29      	ldr	r2, [pc, #164]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033c6:	f7ff fbb9 	bl	8002b3c <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033ce:	f7ff fbb5 	bl	8002b3c <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e2dd      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033e0:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f0      	bne.n	80033ce <HAL_RCC_OscConfig+0x1da>
 80033ec:	e000      	b.n	80033f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d074      	beq.n	80034e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d005      	beq.n	800340e <HAL_RCC_OscConfig+0x21a>
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b0c      	cmp	r3, #12
 8003406:	d10e      	bne.n	8003426 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b03      	cmp	r3, #3
 800340c:	d10b      	bne.n	8003426 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340e:	4b15      	ldr	r3, [pc, #84]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d064      	beq.n	80034e4 <HAL_RCC_OscConfig+0x2f0>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d160      	bne.n	80034e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e2ba      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x24a>
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a0b      	ldr	r2, [pc, #44]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	e026      	b.n	800348c <HAL_RCC_OscConfig+0x298>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003446:	d115      	bne.n	8003474 <HAL_RCC_OscConfig+0x280>
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a05      	ldr	r2, [pc, #20]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800344e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a02      	ldr	r2, [pc, #8]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800345a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	e014      	b.n	800348c <HAL_RCC_OscConfig+0x298>
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	080099b8 	.word	0x080099b8
 800346c:	20000018 	.word	0x20000018
 8003470:	2000001c 	.word	0x2000001c
 8003474:	4ba0      	ldr	r3, [pc, #640]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a9f      	ldr	r2, [pc, #636]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 800347a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b9d      	ldr	r3, [pc, #628]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a9c      	ldr	r2, [pc, #624]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 8003486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800348a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d013      	beq.n	80034bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7ff fb52 	bl	8002b3c <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800349c:	f7ff fb4e 	bl	8002b3c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e276      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ae:	4b92      	ldr	r3, [pc, #584]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x2a8>
 80034ba:	e014      	b.n	80034e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7ff fb3e 	bl	8002b3c <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c4:	f7ff fb3a 	bl	8002b3c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e262      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034d6:	4b88      	ldr	r3, [pc, #544]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x2d0>
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d060      	beq.n	80035b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_OscConfig+0x310>
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d119      	bne.n	8003532 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d116      	bne.n	8003532 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003504:	4b7c      	ldr	r3, [pc, #496]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_OscConfig+0x328>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e23f      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351c:	4b76      	ldr	r3, [pc, #472]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	061b      	lsls	r3, r3, #24
 800352a:	4973      	ldr	r1, [pc, #460]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003530:	e040      	b.n	80035b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d023      	beq.n	8003582 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800353a:	4b6f      	ldr	r3, [pc, #444]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a6e      	ldr	r2, [pc, #440]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 8003540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003546:	f7ff faf9 	bl	8002b3c <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800354e:	f7ff faf5 	bl	8002b3c <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e21d      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003560:	4b65      	ldr	r3, [pc, #404]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356c:	4b62      	ldr	r3, [pc, #392]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	061b      	lsls	r3, r3, #24
 800357a:	495f      	ldr	r1, [pc, #380]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 800357c:	4313      	orrs	r3, r2
 800357e:	604b      	str	r3, [r1, #4]
 8003580:	e018      	b.n	80035b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003582:	4b5d      	ldr	r3, [pc, #372]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a5c      	ldr	r2, [pc, #368]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 8003588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800358c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358e:	f7ff fad5 	bl	8002b3c <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003596:	f7ff fad1 	bl	8002b3c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e1f9      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035a8:	4b53      	ldr	r3, [pc, #332]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f0      	bne.n	8003596 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d03c      	beq.n	800363a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01c      	beq.n	8003602 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c8:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 80035ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ce:	4a4a      	ldr	r2, [pc, #296]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7ff fab0 	bl	8002b3c <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e0:	f7ff faac 	bl	8002b3c <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e1d4      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035f2:	4b41      	ldr	r3, [pc, #260]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 80035f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0ef      	beq.n	80035e0 <HAL_RCC_OscConfig+0x3ec>
 8003600:	e01b      	b.n	800363a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003602:	4b3d      	ldr	r3, [pc, #244]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 8003604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003608:	4a3b      	ldr	r2, [pc, #236]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 800360a:	f023 0301 	bic.w	r3, r3, #1
 800360e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003612:	f7ff fa93 	bl	8002b3c <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361a:	f7ff fa8f 	bl	8002b3c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e1b7      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800362c:	4b32      	ldr	r3, [pc, #200]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 800362e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1ef      	bne.n	800361a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 80a6 	beq.w	8003794 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003648:	2300      	movs	r3, #0
 800364a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800364c:	4b2a      	ldr	r3, [pc, #168]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 800364e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10d      	bne.n	8003674 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003658:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 800365a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365c:	4a26      	ldr	r2, [pc, #152]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 800365e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003662:	6593      	str	r3, [r2, #88]	; 0x58
 8003664:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003670:	2301      	movs	r3, #1
 8003672:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003674:	4b21      	ldr	r3, [pc, #132]	; (80036fc <HAL_RCC_OscConfig+0x508>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d118      	bne.n	80036b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003680:	4b1e      	ldr	r3, [pc, #120]	; (80036fc <HAL_RCC_OscConfig+0x508>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <HAL_RCC_OscConfig+0x508>)
 8003686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800368c:	f7ff fa56 	bl	8002b3c <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003694:	f7ff fa52 	bl	8002b3c <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e17a      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a6:	4b15      	ldr	r3, [pc, #84]	; (80036fc <HAL_RCC_OscConfig+0x508>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d108      	bne.n	80036cc <HAL_RCC_OscConfig+0x4d8>
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	4a0d      	ldr	r2, [pc, #52]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ca:	e029      	b.n	8003720 <HAL_RCC_OscConfig+0x52c>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b05      	cmp	r3, #5
 80036d2:	d115      	bne.n	8003700 <HAL_RCC_OscConfig+0x50c>
 80036d4:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036da:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 80036dc:	f043 0304 	orr.w	r3, r3, #4
 80036e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	4a03      	ldr	r2, [pc, #12]	; (80036f8 <HAL_RCC_OscConfig+0x504>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036f4:	e014      	b.n	8003720 <HAL_RCC_OscConfig+0x52c>
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40007000 	.word	0x40007000
 8003700:	4b9c      	ldr	r3, [pc, #624]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	4a9b      	ldr	r2, [pc, #620]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003710:	4b98      	ldr	r3, [pc, #608]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003716:	4a97      	ldr	r2, [pc, #604]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 8003718:	f023 0304 	bic.w	r3, r3, #4
 800371c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d016      	beq.n	8003756 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003728:	f7ff fa08 	bl	8002b3c <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800372e:	e00a      	b.n	8003746 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003730:	f7ff fa04 	bl	8002b3c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	; 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e12a      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003746:	4b8b      	ldr	r3, [pc, #556]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ed      	beq.n	8003730 <HAL_RCC_OscConfig+0x53c>
 8003754:	e015      	b.n	8003782 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003756:	f7ff f9f1 	bl	8002b3c <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800375c:	e00a      	b.n	8003774 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7ff f9ed 	bl	8002b3c <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f241 3288 	movw	r2, #5000	; 0x1388
 800376c:	4293      	cmp	r3, r2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e113      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003774:	4b7f      	ldr	r3, [pc, #508]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1ed      	bne.n	800375e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003782:	7ffb      	ldrb	r3, [r7, #31]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d105      	bne.n	8003794 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003788:	4b7a      	ldr	r3, [pc, #488]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	4a79      	ldr	r2, [pc, #484]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 800378e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003792:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80fe 	beq.w	800399a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	f040 80d0 	bne.w	8003948 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037a8:	4b72      	ldr	r3, [pc, #456]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f003 0203 	and.w	r2, r3, #3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d130      	bne.n	800381e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	3b01      	subs	r3, #1
 80037c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d127      	bne.n	800381e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037da:	429a      	cmp	r2, r3
 80037dc:	d11f      	bne.n	800381e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037e8:	2a07      	cmp	r2, #7
 80037ea:	bf14      	ite	ne
 80037ec:	2201      	movne	r2, #1
 80037ee:	2200      	moveq	r2, #0
 80037f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d113      	bne.n	800381e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	3b01      	subs	r3, #1
 8003804:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d109      	bne.n	800381e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	085b      	lsrs	r3, r3, #1
 8003816:	3b01      	subs	r3, #1
 8003818:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d06e      	beq.n	80038fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b0c      	cmp	r3, #12
 8003822:	d069      	beq.n	80038f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003824:	4b53      	ldr	r3, [pc, #332]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003830:	4b50      	ldr	r3, [pc, #320]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0ad      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003840:	4b4c      	ldr	r3, [pc, #304]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a4b      	ldr	r2, [pc, #300]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 8003846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800384a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800384c:	f7ff f976 	bl	8002b3c <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003854:	f7ff f972 	bl	8002b3c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e09a      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003866:	4b43      	ldr	r3, [pc, #268]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003872:	4b40      	ldr	r3, [pc, #256]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	4b40      	ldr	r3, [pc, #256]	; (8003978 <HAL_RCC_OscConfig+0x784>)
 8003878:	4013      	ands	r3, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003882:	3a01      	subs	r2, #1
 8003884:	0112      	lsls	r2, r2, #4
 8003886:	4311      	orrs	r1, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800388c:	0212      	lsls	r2, r2, #8
 800388e:	4311      	orrs	r1, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003894:	0852      	lsrs	r2, r2, #1
 8003896:	3a01      	subs	r2, #1
 8003898:	0552      	lsls	r2, r2, #21
 800389a:	4311      	orrs	r1, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038a0:	0852      	lsrs	r2, r2, #1
 80038a2:	3a01      	subs	r2, #1
 80038a4:	0652      	lsls	r2, r2, #25
 80038a6:	4311      	orrs	r1, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038ac:	0912      	lsrs	r2, r2, #4
 80038ae:	0452      	lsls	r2, r2, #17
 80038b0:	430a      	orrs	r2, r1
 80038b2:	4930      	ldr	r1, [pc, #192]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038b8:	4b2e      	ldr	r3, [pc, #184]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2d      	ldr	r2, [pc, #180]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 80038be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038c4:	4b2b      	ldr	r3, [pc, #172]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4a2a      	ldr	r2, [pc, #168]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 80038ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038d0:	f7ff f934 	bl	8002b3c <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d8:	f7ff f930 	bl	8002b3c <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e058      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ea:	4b22      	ldr	r3, [pc, #136]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038f6:	e050      	b.n	800399a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e04f      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d148      	bne.n	800399a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003908:	4b1a      	ldr	r3, [pc, #104]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a19      	ldr	r2, [pc, #100]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 800390e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003912:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003914:	4b17      	ldr	r3, [pc, #92]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4a16      	ldr	r2, [pc, #88]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 800391a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800391e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003920:	f7ff f90c 	bl	8002b3c <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003928:	f7ff f908 	bl	8002b3c <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e030      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0x734>
 8003946:	e028      	b.n	800399a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	2b0c      	cmp	r3, #12
 800394c:	d023      	beq.n	8003996 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a08      	ldr	r2, [pc, #32]	; (8003974 <HAL_RCC_OscConfig+0x780>)
 8003954:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7ff f8ef 	bl	8002b3c <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003960:	e00c      	b.n	800397c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003962:	f7ff f8eb 	bl	8002b3c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d905      	bls.n	800397c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e013      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
 8003974:	40021000 	.word	0x40021000
 8003978:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800397c:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <HAL_RCC_OscConfig+0x7b0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1ec      	bne.n	8003962 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_RCC_OscConfig+0x7b0>)
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	4905      	ldr	r1, [pc, #20]	; (80039a4 <HAL_RCC_OscConfig+0x7b0>)
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_RCC_OscConfig+0x7b4>)
 8003990:	4013      	ands	r3, r2
 8003992:	60cb      	str	r3, [r1, #12]
 8003994:	e001      	b.n	800399a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3720      	adds	r7, #32
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40021000 	.word	0x40021000
 80039a8:	feeefffc 	.word	0xfeeefffc

080039ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0e7      	b.n	8003b90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c0:	4b75      	ldr	r3, [pc, #468]	; (8003b98 <HAL_RCC_ClockConfig+0x1ec>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d910      	bls.n	80039f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b72      	ldr	r3, [pc, #456]	; (8003b98 <HAL_RCC_ClockConfig+0x1ec>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 0207 	bic.w	r2, r3, #7
 80039d6:	4970      	ldr	r1, [pc, #448]	; (8003b98 <HAL_RCC_ClockConfig+0x1ec>)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	4b6e      	ldr	r3, [pc, #440]	; (8003b98 <HAL_RCC_ClockConfig+0x1ec>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0cf      	b.n	8003b90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d010      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	4b66      	ldr	r3, [pc, #408]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d908      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a0c:	4b63      	ldr	r3, [pc, #396]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4960      	ldr	r1, [pc, #384]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d04c      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d107      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a32:	4b5a      	ldr	r3, [pc, #360]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d121      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e0a6      	b.n	8003b90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a4a:	4b54      	ldr	r3, [pc, #336]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d115      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e09a      	b.n	8003b90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d107      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a62:	4b4e      	ldr	r3, [pc, #312]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e08e      	b.n	8003b90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a72:	4b4a      	ldr	r3, [pc, #296]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e086      	b.n	8003b90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a82:	4b46      	ldr	r3, [pc, #280]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f023 0203 	bic.w	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4943      	ldr	r1, [pc, #268]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a94:	f7ff f852 	bl	8002b3c <HAL_GetTick>
 8003a98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a9c:	f7ff f84e 	bl	8002b3c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e06e      	b.n	8003b90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab2:	4b3a      	ldr	r3, [pc, #232]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 020c 	and.w	r2, r3, #12
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d1eb      	bne.n	8003a9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d010      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	4b31      	ldr	r3, [pc, #196]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d208      	bcs.n	8003af2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae0:	4b2e      	ldr	r3, [pc, #184]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	492b      	ldr	r1, [pc, #172]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af2:	4b29      	ldr	r3, [pc, #164]	; (8003b98 <HAL_RCC_ClockConfig+0x1ec>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d210      	bcs.n	8003b22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b00:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <HAL_RCC_ClockConfig+0x1ec>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f023 0207 	bic.w	r2, r3, #7
 8003b08:	4923      	ldr	r1, [pc, #140]	; (8003b98 <HAL_RCC_ClockConfig+0x1ec>)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b10:	4b21      	ldr	r3, [pc, #132]	; (8003b98 <HAL_RCC_ClockConfig+0x1ec>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d001      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e036      	b.n	8003b90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b2e:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	4918      	ldr	r1, [pc, #96]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b4c:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4910      	ldr	r1, [pc, #64]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b60:	f000 f824 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003b64:	4602      	mov	r2, r0
 8003b66:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <HAL_RCC_ClockConfig+0x1f0>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	490b      	ldr	r1, [pc, #44]	; (8003ba0 <HAL_RCC_ClockConfig+0x1f4>)
 8003b72:	5ccb      	ldrb	r3, [r1, r3]
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7c:	4a09      	ldr	r2, [pc, #36]	; (8003ba4 <HAL_RCC_ClockConfig+0x1f8>)
 8003b7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_ClockConfig+0x1fc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fe ff89 	bl	8002a9c <HAL_InitTick>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b8e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40022000 	.word	0x40022000
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	080099b8 	.word	0x080099b8
 8003ba4:	20000018 	.word	0x20000018
 8003ba8:	2000001c 	.word	0x2000001c

08003bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b089      	sub	sp, #36	; 0x24
 8003bb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bba:	4b3e      	ldr	r3, [pc, #248]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bc4:	4b3b      	ldr	r3, [pc, #236]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	2b0c      	cmp	r3, #12
 8003bd8:	d121      	bne.n	8003c1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d11e      	bne.n	8003c1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003be0:	4b34      	ldr	r3, [pc, #208]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d107      	bne.n	8003bfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bec:	4b31      	ldr	r3, [pc, #196]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	e005      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bfc:	4b2d      	ldr	r3, [pc, #180]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c08:	4a2b      	ldr	r2, [pc, #172]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10d      	bne.n	8003c34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d102      	bne.n	8003c2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c24:	4b25      	ldr	r3, [pc, #148]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x110>)
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	e004      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c30:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b0c      	cmp	r3, #12
 8003c38:	d134      	bne.n	8003ca4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c3a:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d003      	beq.n	8003c52 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d003      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0xac>
 8003c50:	e005      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c52:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x110>)
 8003c54:	617b      	str	r3, [r7, #20]
      break;
 8003c56:	e005      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c58:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c5a:	617b      	str	r3, [r7, #20]
      break;
 8003c5c:	e002      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	617b      	str	r3, [r7, #20]
      break;
 8003c62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	3301      	adds	r3, #1
 8003c70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c72:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	0a1b      	lsrs	r3, r3, #8
 8003c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	fb03 f202 	mul.w	r2, r3, r2
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	0e5b      	lsrs	r3, r3, #25
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	3301      	adds	r3, #1
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ca4:	69bb      	ldr	r3, [r7, #24]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3724      	adds	r7, #36	; 0x24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	080099d0 	.word	0x080099d0
 8003cbc:	00f42400 	.word	0x00f42400
 8003cc0:	007a1200 	.word	0x007a1200

08003cc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc8:	4b03      	ldr	r3, [pc, #12]	; (8003cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cca:	681b      	ldr	r3, [r3, #0]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	20000018 	.word	0x20000018

08003cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ce0:	f7ff fff0 	bl	8003cc4 <HAL_RCC_GetHCLKFreq>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	0a1b      	lsrs	r3, r3, #8
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	4904      	ldr	r1, [pc, #16]	; (8003d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cf2:	5ccb      	ldrb	r3, [r1, r3]
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40021000 	.word	0x40021000
 8003d04:	080099c8 	.word	0x080099c8

08003d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d0c:	f7ff ffda 	bl	8003cc4 <HAL_RCC_GetHCLKFreq>
 8003d10:	4602      	mov	r2, r0
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	0adb      	lsrs	r3, r3, #11
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	4904      	ldr	r1, [pc, #16]	; (8003d30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d1e:	5ccb      	ldrb	r3, [r1, r3]
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	080099c8 	.word	0x080099c8

08003d34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d40:	4b2a      	ldr	r3, [pc, #168]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d4c:	f7ff f9ee 	bl	800312c <HAL_PWREx_GetVoltageRange>
 8003d50:	6178      	str	r0, [r7, #20]
 8003d52:	e014      	b.n	8003d7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d54:	4b25      	ldr	r3, [pc, #148]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	4a24      	ldr	r2, [pc, #144]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d60:	4b22      	ldr	r3, [pc, #136]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d6c:	f7ff f9de 	bl	800312c <HAL_PWREx_GetVoltageRange>
 8003d70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d72:	4b1e      	ldr	r3, [pc, #120]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d76:	4a1d      	ldr	r2, [pc, #116]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d84:	d10b      	bne.n	8003d9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b80      	cmp	r3, #128	; 0x80
 8003d8a:	d919      	bls.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2ba0      	cmp	r3, #160	; 0xa0
 8003d90:	d902      	bls.n	8003d98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d92:	2302      	movs	r3, #2
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	e013      	b.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d98:	2301      	movs	r3, #1
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	e010      	b.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b80      	cmp	r3, #128	; 0x80
 8003da2:	d902      	bls.n	8003daa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003da4:	2303      	movs	r3, #3
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	e00a      	b.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b80      	cmp	r3, #128	; 0x80
 8003dae:	d102      	bne.n	8003db6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003db0:	2302      	movs	r3, #2
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	e004      	b.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b70      	cmp	r3, #112	; 0x70
 8003dba:	d101      	bne.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f023 0207 	bic.w	r2, r3, #7
 8003dc8:	4909      	ldr	r1, [pc, #36]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003dd0:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d001      	beq.n	8003de2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40022000 	.word	0x40022000

08003df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e00:	2300      	movs	r3, #0
 8003e02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d041      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e18:	d02a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e1e:	d824      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e24:	d008      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e2a:	d81e      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e34:	d010      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e36:	e018      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e38:	4b86      	ldr	r3, [pc, #536]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a85      	ldr	r2, [pc, #532]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e44:	e015      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fabb 	bl	80043c8 <RCCEx_PLLSAI1_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e56:	e00c      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3320      	adds	r3, #32
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fba6 	bl	80045b0 <RCCEx_PLLSAI2_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e68:	e003      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	74fb      	strb	r3, [r7, #19]
      break;
 8003e6e:	e000      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e72:	7cfb      	ldrb	r3, [r7, #19]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10b      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e78:	4b76      	ldr	r3, [pc, #472]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e86:	4973      	ldr	r1, [pc, #460]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e8e:	e001      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e90:	7cfb      	ldrb	r3, [r7, #19]
 8003e92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d041      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ea4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ea8:	d02a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003eaa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003eae:	d824      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003eb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eb4:	d008      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003eb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eba:	d81e      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ec4:	d010      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ec6:	e018      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ec8:	4b62      	ldr	r3, [pc, #392]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4a61      	ldr	r2, [pc, #388]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ed4:	e015      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	2100      	movs	r1, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fa73 	bl	80043c8 <RCCEx_PLLSAI1_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ee6:	e00c      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3320      	adds	r3, #32
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fb5e 	bl	80045b0 <RCCEx_PLLSAI2_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ef8:	e003      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	74fb      	strb	r3, [r7, #19]
      break;
 8003efe:	e000      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f02:	7cfb      	ldrb	r3, [r7, #19]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10b      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f08:	4b52      	ldr	r3, [pc, #328]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f16:	494f      	ldr	r1, [pc, #316]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f1e:	e001      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	7cfb      	ldrb	r3, [r7, #19]
 8003f22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80a0 	beq.w	8004072 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f32:	2300      	movs	r3, #0
 8003f34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f36:	4b47      	ldr	r3, [pc, #284]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f46:	2300      	movs	r3, #0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00d      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f4c:	4b41      	ldr	r3, [pc, #260]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	4a40      	ldr	r2, [pc, #256]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f56:	6593      	str	r3, [r2, #88]	; 0x58
 8003f58:	4b3e      	ldr	r3, [pc, #248]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f64:	2301      	movs	r3, #1
 8003f66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f68:	4b3b      	ldr	r3, [pc, #236]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a3a      	ldr	r2, [pc, #232]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f74:	f7fe fde2 	bl	8002b3c <HAL_GetTick>
 8003f78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f7a:	e009      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7c:	f7fe fdde 	bl	8002b3c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d902      	bls.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	74fb      	strb	r3, [r7, #19]
        break;
 8003f8e:	e005      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f90:	4b31      	ldr	r3, [pc, #196]	; (8004058 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0ef      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f9c:	7cfb      	ldrb	r3, [r7, #19]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d15c      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fa2:	4b2c      	ldr	r3, [pc, #176]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01f      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d019      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fc0:	4b24      	ldr	r3, [pc, #144]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fcc:	4b21      	ldr	r3, [pc, #132]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd2:	4a20      	ldr	r2, [pc, #128]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fdc:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe2:	4a1c      	ldr	r2, [pc, #112]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fec:	4a19      	ldr	r2, [pc, #100]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d016      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffe:	f7fe fd9d 	bl	8002b3c <HAL_GetTick>
 8004002:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004004:	e00b      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004006:	f7fe fd99 	bl	8002b3c <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f241 3288 	movw	r2, #5000	; 0x1388
 8004014:	4293      	cmp	r3, r2
 8004016:	d902      	bls.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	74fb      	strb	r3, [r7, #19]
            break;
 800401c:	e006      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800401e:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0ec      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800402c:	7cfb      	ldrb	r3, [r7, #19]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10c      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004042:	4904      	ldr	r1, [pc, #16]	; (8004054 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800404a:	e009      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800404c:	7cfb      	ldrb	r3, [r7, #19]
 800404e:	74bb      	strb	r3, [r7, #18]
 8004050:	e006      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
 8004058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004060:	7c7b      	ldrb	r3, [r7, #17]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d105      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004066:	4b9e      	ldr	r3, [pc, #632]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406a:	4a9d      	ldr	r2, [pc, #628]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004070:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800407e:	4b98      	ldr	r3, [pc, #608]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004084:	f023 0203 	bic.w	r2, r3, #3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	4994      	ldr	r1, [pc, #592]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040a0:	4b8f      	ldr	r3, [pc, #572]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	f023 020c 	bic.w	r2, r3, #12
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ae:	498c      	ldr	r1, [pc, #560]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040c2:	4b87      	ldr	r3, [pc, #540]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	4983      	ldr	r1, [pc, #524]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040e4:	4b7e      	ldr	r3, [pc, #504]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f2:	497b      	ldr	r1, [pc, #492]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0310 	and.w	r3, r3, #16
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004106:	4b76      	ldr	r3, [pc, #472]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004114:	4972      	ldr	r1, [pc, #456]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004128:	4b6d      	ldr	r3, [pc, #436]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004136:	496a      	ldr	r1, [pc, #424]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800414a:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004150:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	4961      	ldr	r1, [pc, #388]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800416c:	4b5c      	ldr	r3, [pc, #368]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004172:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800417a:	4959      	ldr	r1, [pc, #356]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800418e:	4b54      	ldr	r3, [pc, #336]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004194:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419c:	4950      	ldr	r1, [pc, #320]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041b0:	4b4b      	ldr	r3, [pc, #300]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	4948      	ldr	r1, [pc, #288]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041d2:	4b43      	ldr	r3, [pc, #268]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e0:	493f      	ldr	r1, [pc, #252]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d028      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041f4:	4b3a      	ldr	r3, [pc, #232]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004202:	4937      	ldr	r1, [pc, #220]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800420e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004212:	d106      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004214:	4b32      	ldr	r3, [pc, #200]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a31      	ldr	r2, [pc, #196]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800421e:	60d3      	str	r3, [r2, #12]
 8004220:	e011      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004226:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800422a:	d10c      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	2101      	movs	r1, #1
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f8c8 	bl	80043c8 <RCCEx_PLLSAI1_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800423c:	7cfb      	ldrb	r3, [r7, #19]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004242:	7cfb      	ldrb	r3, [r7, #19]
 8004244:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d028      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004252:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004258:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	491f      	ldr	r1, [pc, #124]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004270:	d106      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004272:	4b1b      	ldr	r3, [pc, #108]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004278:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800427c:	60d3      	str	r3, [r2, #12]
 800427e:	e011      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004288:	d10c      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3304      	adds	r3, #4
 800428e:	2101      	movs	r1, #1
 8004290:	4618      	mov	r0, r3
 8004292:	f000 f899 	bl	80043c8 <RCCEx_PLLSAI1_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800429a:	7cfb      	ldrb	r3, [r7, #19]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80042a0:	7cfb      	ldrb	r3, [r7, #19]
 80042a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d02b      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042be:	4908      	ldr	r1, [pc, #32]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ce:	d109      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d0:	4b03      	ldr	r3, [pc, #12]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4a02      	ldr	r2, [pc, #8]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042da:	60d3      	str	r3, [r2, #12]
 80042dc:	e014      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042ec:	d10c      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	2101      	movs	r1, #1
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f867 	bl	80043c8 <RCCEx_PLLSAI1_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042fe:	7cfb      	ldrb	r3, [r7, #19]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d02f      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004314:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004322:	4928      	ldr	r1, [pc, #160]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800432e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004332:	d10d      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	2102      	movs	r1, #2
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f844 	bl	80043c8 <RCCEx_PLLSAI1_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d014      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800434a:	7cfb      	ldrb	r3, [r7, #19]
 800434c:	74bb      	strb	r3, [r7, #18]
 800434e:	e011      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004358:	d10c      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3320      	adds	r3, #32
 800435e:	2102      	movs	r1, #2
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f925 	bl	80045b0 <RCCEx_PLLSAI2_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800436a:	7cfb      	ldrb	r3, [r7, #19]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004380:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800438e:	490d      	ldr	r1, [pc, #52]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00b      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b2:	4904      	ldr	r1, [pc, #16]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40021000 	.word	0x40021000

080043c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043d6:	4b75      	ldr	r3, [pc, #468]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d018      	beq.n	8004414 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043e2:	4b72      	ldr	r3, [pc, #456]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 0203 	and.w	r2, r3, #3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d10d      	bne.n	800440e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
       ||
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d009      	beq.n	800440e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043fa:	4b6c      	ldr	r3, [pc, #432]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	091b      	lsrs	r3, r3, #4
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
       ||
 800440a:	429a      	cmp	r2, r3
 800440c:	d047      	beq.n	800449e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
 8004412:	e044      	b.n	800449e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b03      	cmp	r3, #3
 800441a:	d018      	beq.n	800444e <RCCEx_PLLSAI1_Config+0x86>
 800441c:	2b03      	cmp	r3, #3
 800441e:	d825      	bhi.n	800446c <RCCEx_PLLSAI1_Config+0xa4>
 8004420:	2b01      	cmp	r3, #1
 8004422:	d002      	beq.n	800442a <RCCEx_PLLSAI1_Config+0x62>
 8004424:	2b02      	cmp	r3, #2
 8004426:	d009      	beq.n	800443c <RCCEx_PLLSAI1_Config+0x74>
 8004428:	e020      	b.n	800446c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800442a:	4b60      	ldr	r3, [pc, #384]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d11d      	bne.n	8004472 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800443a:	e01a      	b.n	8004472 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800443c:	4b5b      	ldr	r3, [pc, #364]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004444:	2b00      	cmp	r3, #0
 8004446:	d116      	bne.n	8004476 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800444c:	e013      	b.n	8004476 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800444e:	4b57      	ldr	r3, [pc, #348]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10f      	bne.n	800447a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800445a:	4b54      	ldr	r3, [pc, #336]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800446a:	e006      	b.n	800447a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	73fb      	strb	r3, [r7, #15]
      break;
 8004470:	e004      	b.n	800447c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004472:	bf00      	nop
 8004474:	e002      	b.n	800447c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004476:	bf00      	nop
 8004478:	e000      	b.n	800447c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800447a:	bf00      	nop
    }

    if(status == HAL_OK)
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10d      	bne.n	800449e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004482:	4b4a      	ldr	r3, [pc, #296]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6819      	ldr	r1, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	3b01      	subs	r3, #1
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	430b      	orrs	r3, r1
 8004498:	4944      	ldr	r1, [pc, #272]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d17d      	bne.n	80045a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044a4:	4b41      	ldr	r3, [pc, #260]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a40      	ldr	r2, [pc, #256]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80044aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b0:	f7fe fb44 	bl	8002b3c <HAL_GetTick>
 80044b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044b6:	e009      	b.n	80044cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044b8:	f7fe fb40 	bl	8002b3c <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d902      	bls.n	80044cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	73fb      	strb	r3, [r7, #15]
        break;
 80044ca:	e005      	b.n	80044d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044cc:	4b37      	ldr	r3, [pc, #220]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1ef      	bne.n	80044b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d160      	bne.n	80045a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d111      	bne.n	8004508 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044e4:	4b31      	ldr	r3, [pc, #196]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6892      	ldr	r2, [r2, #8]
 80044f4:	0211      	lsls	r1, r2, #8
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68d2      	ldr	r2, [r2, #12]
 80044fa:	0912      	lsrs	r2, r2, #4
 80044fc:	0452      	lsls	r2, r2, #17
 80044fe:	430a      	orrs	r2, r1
 8004500:	492a      	ldr	r1, [pc, #168]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004502:	4313      	orrs	r3, r2
 8004504:	610b      	str	r3, [r1, #16]
 8004506:	e027      	b.n	8004558 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d112      	bne.n	8004534 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800450e:	4b27      	ldr	r3, [pc, #156]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004516:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6892      	ldr	r2, [r2, #8]
 800451e:	0211      	lsls	r1, r2, #8
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6912      	ldr	r2, [r2, #16]
 8004524:	0852      	lsrs	r2, r2, #1
 8004526:	3a01      	subs	r2, #1
 8004528:	0552      	lsls	r2, r2, #21
 800452a:	430a      	orrs	r2, r1
 800452c:	491f      	ldr	r1, [pc, #124]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800452e:	4313      	orrs	r3, r2
 8004530:	610b      	str	r3, [r1, #16]
 8004532:	e011      	b.n	8004558 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004534:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800453c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6892      	ldr	r2, [r2, #8]
 8004544:	0211      	lsls	r1, r2, #8
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6952      	ldr	r2, [r2, #20]
 800454a:	0852      	lsrs	r2, r2, #1
 800454c:	3a01      	subs	r2, #1
 800454e:	0652      	lsls	r2, r2, #25
 8004550:	430a      	orrs	r2, r1
 8004552:	4916      	ldr	r1, [pc, #88]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004554:	4313      	orrs	r3, r2
 8004556:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004558:	4b14      	ldr	r3, [pc, #80]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a13      	ldr	r2, [pc, #76]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800455e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004562:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fe faea 	bl	8002b3c <HAL_GetTick>
 8004568:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800456a:	e009      	b.n	8004580 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800456c:	f7fe fae6 	bl	8002b3c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d902      	bls.n	8004580 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	73fb      	strb	r3, [r7, #15]
          break;
 800457e:	e005      	b.n	800458c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004580:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ef      	beq.n	800456c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004592:	4b06      	ldr	r3, [pc, #24]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	4904      	ldr	r1, [pc, #16]	; (80045ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800459c:	4313      	orrs	r3, r2
 800459e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40021000 	.word	0x40021000

080045b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045be:	4b6a      	ldr	r3, [pc, #424]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d018      	beq.n	80045fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045ca:	4b67      	ldr	r3, [pc, #412]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f003 0203 	and.w	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d10d      	bne.n	80045f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
       ||
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d009      	beq.n	80045f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80045e2:	4b61      	ldr	r3, [pc, #388]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	091b      	lsrs	r3, r3, #4
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
       ||
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d047      	beq.n	8004686 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
 80045fa:	e044      	b.n	8004686 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b03      	cmp	r3, #3
 8004602:	d018      	beq.n	8004636 <RCCEx_PLLSAI2_Config+0x86>
 8004604:	2b03      	cmp	r3, #3
 8004606:	d825      	bhi.n	8004654 <RCCEx_PLLSAI2_Config+0xa4>
 8004608:	2b01      	cmp	r3, #1
 800460a:	d002      	beq.n	8004612 <RCCEx_PLLSAI2_Config+0x62>
 800460c:	2b02      	cmp	r3, #2
 800460e:	d009      	beq.n	8004624 <RCCEx_PLLSAI2_Config+0x74>
 8004610:	e020      	b.n	8004654 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004612:	4b55      	ldr	r3, [pc, #340]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d11d      	bne.n	800465a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004622:	e01a      	b.n	800465a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004624:	4b50      	ldr	r3, [pc, #320]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462c:	2b00      	cmp	r3, #0
 800462e:	d116      	bne.n	800465e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004634:	e013      	b.n	800465e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004636:	4b4c      	ldr	r3, [pc, #304]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10f      	bne.n	8004662 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004642:	4b49      	ldr	r3, [pc, #292]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d109      	bne.n	8004662 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004652:	e006      	b.n	8004662 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	73fb      	strb	r3, [r7, #15]
      break;
 8004658:	e004      	b.n	8004664 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800465a:	bf00      	nop
 800465c:	e002      	b.n	8004664 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004662:	bf00      	nop
    }

    if(status == HAL_OK)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10d      	bne.n	8004686 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800466a:	4b3f      	ldr	r3, [pc, #252]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6819      	ldr	r1, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	3b01      	subs	r3, #1
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	430b      	orrs	r3, r1
 8004680:	4939      	ldr	r1, [pc, #228]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004682:	4313      	orrs	r3, r2
 8004684:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d167      	bne.n	800475c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800468c:	4b36      	ldr	r3, [pc, #216]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a35      	ldr	r2, [pc, #212]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004698:	f7fe fa50 	bl	8002b3c <HAL_GetTick>
 800469c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800469e:	e009      	b.n	80046b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046a0:	f7fe fa4c 	bl	8002b3c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d902      	bls.n	80046b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	73fb      	strb	r3, [r7, #15]
        break;
 80046b2:	e005      	b.n	80046c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046b4:	4b2c      	ldr	r3, [pc, #176]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1ef      	bne.n	80046a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d14a      	bne.n	800475c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d111      	bne.n	80046f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046cc:	4b26      	ldr	r3, [pc, #152]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6892      	ldr	r2, [r2, #8]
 80046dc:	0211      	lsls	r1, r2, #8
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	68d2      	ldr	r2, [r2, #12]
 80046e2:	0912      	lsrs	r2, r2, #4
 80046e4:	0452      	lsls	r2, r2, #17
 80046e6:	430a      	orrs	r2, r1
 80046e8:	491f      	ldr	r1, [pc, #124]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	614b      	str	r3, [r1, #20]
 80046ee:	e011      	b.n	8004714 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046f0:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6892      	ldr	r2, [r2, #8]
 8004700:	0211      	lsls	r1, r2, #8
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6912      	ldr	r2, [r2, #16]
 8004706:	0852      	lsrs	r2, r2, #1
 8004708:	3a01      	subs	r2, #1
 800470a:	0652      	lsls	r2, r2, #25
 800470c:	430a      	orrs	r2, r1
 800470e:	4916      	ldr	r1, [pc, #88]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004710:	4313      	orrs	r3, r2
 8004712:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a13      	ldr	r2, [pc, #76]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004720:	f7fe fa0c 	bl	8002b3c <HAL_GetTick>
 8004724:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004726:	e009      	b.n	800473c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004728:	f7fe fa08 	bl	8002b3c <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d902      	bls.n	800473c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	73fb      	strb	r3, [r7, #15]
          break;
 800473a:	e005      	b.n	8004748 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800473c:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0ef      	beq.n	8004728 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004748:	7bfb      	ldrb	r3, [r7, #15]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	4904      	ldr	r1, [pc, #16]	; (8004768 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004758:	4313      	orrs	r3, r2
 800475a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800475c:	7bfb      	ldrb	r3, [r7, #15]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000

0800476c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e049      	b.n	8004812 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	795b      	ldrb	r3, [r3, #5]
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fd f8f6 	bl	8001980 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 0204 	orr.w	r2, r2, #4
 80047a8:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d104      	bne.n	80047c2 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2204      	movs	r2, #4
 80047bc:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e027      	b.n	8004812 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80047c2:	f7fe f9bb 	bl	8002b3c <HAL_GetTick>
 80047c6:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80047c8:	e015      	b.n	80047f6 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80047ca:	f7fe f9b7 	bl	8002b3c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d90e      	bls.n	80047f6 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d107      	bne.n	80047f6 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2204      	movs	r2, #4
 80047ea:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e00d      	b.n	8004812 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b04      	cmp	r3, #4
 8004802:	d0e2      	beq.n	80047ca <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	791b      	ldrb	r3, [r3, #4]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004830:	2302      	movs	r3, #2
 8004832:	e044      	b.n	80048be <HAL_RNG_GenerateRandomNumber+0xa4>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	795b      	ldrb	r3, [r3, #5]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d133      	bne.n	80048ac <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800484a:	f7fe f977 	bl	8002b3c <HAL_GetTick>
 800484e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004850:	e018      	b.n	8004884 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004852:	f7fe f973 	bl	8002b3c <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d911      	bls.n	8004884 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b01      	cmp	r3, #1
 800486c:	d00a      	beq.n	8004884 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e01c      	b.n	80048be <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d1df      	bne.n	8004852 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	715a      	strb	r2, [r3, #5]
 80048aa:	e004      	b.n	80048b6 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2204      	movs	r2, #4
 80048b0:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	711a      	strb	r2, [r3, #4]

  return status;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2210      	movs	r2, #16
 80048e8:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80048ea:	2301      	movs	r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	e01f      	b.n	8004930 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01a      	beq.n	8004930 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d108      	bne.n	8004916 <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004912:	605a      	str	r2, [r3, #4]
 8004914:	e00c      	b.n	8004930 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2208      	movs	r2, #8
 800491a:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 800491c:	2301      	movs	r3, #1
 800491e:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0208 	bic.w	r2, r2, #8
 800492e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d10b      	bne.n	800494e <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2204      	movs	r2, #4
 800493a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f837 	bl	80049b0 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800494a:	605a      	str	r2, [r3, #4]

    return;
 800494c:	e022      	b.n	8004994 <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01d      	beq.n	8004994 <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0208 	bic.w	r2, r2, #8
 8004966:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	795b      	ldrb	r3, [r3, #5]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b04      	cmp	r3, #4
 800497a:	d00b      	beq.n	8004994 <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4619      	mov	r1, r3
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f803 	bl	800499a <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e049      	b.n	8004a6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fd f814 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f000 f9d0 	bl	8004da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d001      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e04f      	b.n	8004b2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a23      	ldr	r2, [pc, #140]	; (8004b38 <HAL_TIM_Base_Start_IT+0xc4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d01d      	beq.n	8004aea <HAL_TIM_Base_Start_IT+0x76>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab6:	d018      	beq.n	8004aea <HAL_TIM_Base_Start_IT+0x76>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1f      	ldr	r2, [pc, #124]	; (8004b3c <HAL_TIM_Base_Start_IT+0xc8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d013      	beq.n	8004aea <HAL_TIM_Base_Start_IT+0x76>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1e      	ldr	r2, [pc, #120]	; (8004b40 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00e      	beq.n	8004aea <HAL_TIM_Base_Start_IT+0x76>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d009      	beq.n	8004aea <HAL_TIM_Base_Start_IT+0x76>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1b      	ldr	r2, [pc, #108]	; (8004b48 <HAL_TIM_Base_Start_IT+0xd4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_TIM_Base_Start_IT+0x76>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a19      	ldr	r2, [pc, #100]	; (8004b4c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d115      	bne.n	8004b16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <HAL_TIM_Base_Start_IT+0xdc>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b06      	cmp	r3, #6
 8004afa:	d015      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0xb4>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b02:	d011      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b14:	e008      	b.n	8004b28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0201 	orr.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e000      	b.n	8004b2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40013400 	.word	0x40013400
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	00010007 	.word	0x00010007

08004b54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d020      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01b      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0202 	mvn.w	r2, #2
 8004b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f8e4 	bl	8004d6c <HAL_TIM_IC_CaptureCallback>
 8004ba4:	e005      	b.n	8004bb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f8d6 	bl	8004d58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f8e7 	bl	8004d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d020      	beq.n	8004c04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01b      	beq.n	8004c04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0204 	mvn.w	r2, #4
 8004bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f8be 	bl	8004d6c <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8b0 	bl	8004d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f8c1 	bl	8004d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d020      	beq.n	8004c50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01b      	beq.n	8004c50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0208 	mvn.w	r2, #8
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2204      	movs	r2, #4
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f898 	bl	8004d6c <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e005      	b.n	8004c4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f88a 	bl	8004d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f89b 	bl	8004d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d020      	beq.n	8004c9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01b      	beq.n	8004c9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0210 	mvn.w	r2, #16
 8004c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2208      	movs	r2, #8
 8004c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f872 	bl	8004d6c <HAL_TIM_IC_CaptureCallback>
 8004c88:	e005      	b.n	8004c96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f864 	bl	8004d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f875 	bl	8004d80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00c      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d007      	beq.n	8004cc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0201 	mvn.w	r2, #1
 8004cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fc fd24 	bl	8001708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00c      	beq.n	8004ce4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f98e 	bl	8005000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00c      	beq.n	8004d08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d007      	beq.n	8004d08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f986 	bl	8005014 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00c      	beq.n	8004d2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f834 	bl	8004d94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00c      	beq.n	8004d50 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0220 	mvn.w	r2, #32
 8004d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f94e 	bl	8004fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a40      	ldr	r2, [pc, #256]	; (8004ebc <TIM_Base_SetConfig+0x114>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d013      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc6:	d00f      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a3d      	ldr	r2, [pc, #244]	; (8004ec0 <TIM_Base_SetConfig+0x118>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00b      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a3c      	ldr	r2, [pc, #240]	; (8004ec4 <TIM_Base_SetConfig+0x11c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d007      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a3b      	ldr	r2, [pc, #236]	; (8004ec8 <TIM_Base_SetConfig+0x120>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d003      	beq.n	8004de8 <TIM_Base_SetConfig+0x40>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a3a      	ldr	r2, [pc, #232]	; (8004ecc <TIM_Base_SetConfig+0x124>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d108      	bne.n	8004dfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2f      	ldr	r2, [pc, #188]	; (8004ebc <TIM_Base_SetConfig+0x114>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01f      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e08:	d01b      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2c      	ldr	r2, [pc, #176]	; (8004ec0 <TIM_Base_SetConfig+0x118>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d017      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2b      	ldr	r2, [pc, #172]	; (8004ec4 <TIM_Base_SetConfig+0x11c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2a      	ldr	r2, [pc, #168]	; (8004ec8 <TIM_Base_SetConfig+0x120>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00f      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a29      	ldr	r2, [pc, #164]	; (8004ecc <TIM_Base_SetConfig+0x124>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00b      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a28      	ldr	r2, [pc, #160]	; (8004ed0 <TIM_Base_SetConfig+0x128>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d007      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a27      	ldr	r2, [pc, #156]	; (8004ed4 <TIM_Base_SetConfig+0x12c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d003      	beq.n	8004e42 <TIM_Base_SetConfig+0x9a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a26      	ldr	r2, [pc, #152]	; (8004ed8 <TIM_Base_SetConfig+0x130>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d108      	bne.n	8004e54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a10      	ldr	r2, [pc, #64]	; (8004ebc <TIM_Base_SetConfig+0x114>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00f      	beq.n	8004ea0 <TIM_Base_SetConfig+0xf8>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a12      	ldr	r2, [pc, #72]	; (8004ecc <TIM_Base_SetConfig+0x124>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00b      	beq.n	8004ea0 <TIM_Base_SetConfig+0xf8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a11      	ldr	r2, [pc, #68]	; (8004ed0 <TIM_Base_SetConfig+0x128>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d007      	beq.n	8004ea0 <TIM_Base_SetConfig+0xf8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a10      	ldr	r2, [pc, #64]	; (8004ed4 <TIM_Base_SetConfig+0x12c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d003      	beq.n	8004ea0 <TIM_Base_SetConfig+0xf8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a0f      	ldr	r2, [pc, #60]	; (8004ed8 <TIM_Base_SetConfig+0x130>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d103      	bne.n	8004ea8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	615a      	str	r2, [r3, #20]
}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40012c00 	.word	0x40012c00
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40000800 	.word	0x40000800
 8004ec8:	40000c00 	.word	0x40000c00
 8004ecc:	40013400 	.word	0x40013400
 8004ed0:	40014000 	.word	0x40014000
 8004ed4:	40014400 	.word	0x40014400
 8004ed8:	40014800 	.word	0x40014800

08004edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e068      	b.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2e      	ldr	r2, [pc, #184]	; (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d004      	beq.n	8004f28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a2d      	ldr	r2, [pc, #180]	; (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d108      	bne.n	8004f3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1e      	ldr	r2, [pc, #120]	; (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d01d      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f66:	d018      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1b      	ldr	r2, [pc, #108]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d013      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a1a      	ldr	r2, [pc, #104]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00e      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a18      	ldr	r2, [pc, #96]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d009      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a14      	ldr	r2, [pc, #80]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d10c      	bne.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40013400 	.word	0x40013400
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	40000800 	.word	0x40000800
 8004fe4:	40000c00 	.word	0x40000c00
 8004fe8:	40014000 	.word	0x40014000

08004fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e040      	b.n	80050bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fc fd0a 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2224      	movs	r2, #36	; 0x24
 8005054:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fb6a 	bl	8005748 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f8af 	bl	80051d8 <UART_SetConfig>
 800507a:	4603      	mov	r3, r0
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e01b      	b.n	80050bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005092:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fbe9 	bl	800588c <UART_CheckIdleState>
 80050ba:	4603      	mov	r3, r0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08a      	sub	sp, #40	; 0x28
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	4613      	mov	r3, r2
 80050d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d178      	bne.n	80051ce <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <HAL_UART_Transmit+0x24>
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e071      	b.n	80051d0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2221      	movs	r2, #33	; 0x21
 80050f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050fa:	f7fd fd1f 	bl	8002b3c <HAL_GetTick>
 80050fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	88fa      	ldrh	r2, [r7, #6]
 8005104:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	88fa      	ldrh	r2, [r7, #6]
 800510c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005118:	d108      	bne.n	800512c <HAL_UART_Transmit+0x68>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	e003      	b.n	8005134 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005134:	e030      	b.n	8005198 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2200      	movs	r2, #0
 800513e:	2180      	movs	r1, #128	; 0x80
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 fc4b 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d004      	beq.n	8005156 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2220      	movs	r2, #32
 8005150:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e03c      	b.n	80051d0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10b      	bne.n	8005174 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	881a      	ldrh	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005168:	b292      	uxth	r2, r2
 800516a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	3302      	adds	r3, #2
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	e008      	b.n	8005186 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	781a      	ldrb	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	b292      	uxth	r2, r2
 800517e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	3301      	adds	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1c8      	bne.n	8005136 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2200      	movs	r2, #0
 80051ac:	2140      	movs	r1, #64	; 0x40
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 fc14 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d004      	beq.n	80051c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e005      	b.n	80051d0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2220      	movs	r2, #32
 80051c8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e000      	b.n	80051d0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80051ce:	2302      	movs	r3, #2
  }
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051dc:	b08a      	sub	sp, #40	; 0x28
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	431a      	orrs	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4ba4      	ldr	r3, [pc, #656]	; (8005498 <UART_SetConfig+0x2c0>)
 8005208:	4013      	ands	r3, r2
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	6812      	ldr	r2, [r2, #0]
 800520e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005210:	430b      	orrs	r3, r1
 8005212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a99      	ldr	r2, [pc, #612]	; (800549c <UART_SetConfig+0x2c4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d004      	beq.n	8005244 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005240:	4313      	orrs	r3, r2
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005254:	430a      	orrs	r2, r1
 8005256:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a90      	ldr	r2, [pc, #576]	; (80054a0 <UART_SetConfig+0x2c8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d126      	bne.n	80052b0 <UART_SetConfig+0xd8>
 8005262:	4b90      	ldr	r3, [pc, #576]	; (80054a4 <UART_SetConfig+0x2cc>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	2b03      	cmp	r3, #3
 800526e:	d81b      	bhi.n	80052a8 <UART_SetConfig+0xd0>
 8005270:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <UART_SetConfig+0xa0>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	08005289 	.word	0x08005289
 800527c:	08005299 	.word	0x08005299
 8005280:	08005291 	.word	0x08005291
 8005284:	080052a1 	.word	0x080052a1
 8005288:	2301      	movs	r3, #1
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528e:	e116      	b.n	80054be <UART_SetConfig+0x2e6>
 8005290:	2302      	movs	r3, #2
 8005292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005296:	e112      	b.n	80054be <UART_SetConfig+0x2e6>
 8005298:	2304      	movs	r3, #4
 800529a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529e:	e10e      	b.n	80054be <UART_SetConfig+0x2e6>
 80052a0:	2308      	movs	r3, #8
 80052a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a6:	e10a      	b.n	80054be <UART_SetConfig+0x2e6>
 80052a8:	2310      	movs	r3, #16
 80052aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ae:	e106      	b.n	80054be <UART_SetConfig+0x2e6>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a7c      	ldr	r2, [pc, #496]	; (80054a8 <UART_SetConfig+0x2d0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d138      	bne.n	800532c <UART_SetConfig+0x154>
 80052ba:	4b7a      	ldr	r3, [pc, #488]	; (80054a4 <UART_SetConfig+0x2cc>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c0:	f003 030c 	and.w	r3, r3, #12
 80052c4:	2b0c      	cmp	r3, #12
 80052c6:	d82d      	bhi.n	8005324 <UART_SetConfig+0x14c>
 80052c8:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <UART_SetConfig+0xf8>)
 80052ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ce:	bf00      	nop
 80052d0:	08005305 	.word	0x08005305
 80052d4:	08005325 	.word	0x08005325
 80052d8:	08005325 	.word	0x08005325
 80052dc:	08005325 	.word	0x08005325
 80052e0:	08005315 	.word	0x08005315
 80052e4:	08005325 	.word	0x08005325
 80052e8:	08005325 	.word	0x08005325
 80052ec:	08005325 	.word	0x08005325
 80052f0:	0800530d 	.word	0x0800530d
 80052f4:	08005325 	.word	0x08005325
 80052f8:	08005325 	.word	0x08005325
 80052fc:	08005325 	.word	0x08005325
 8005300:	0800531d 	.word	0x0800531d
 8005304:	2300      	movs	r3, #0
 8005306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530a:	e0d8      	b.n	80054be <UART_SetConfig+0x2e6>
 800530c:	2302      	movs	r3, #2
 800530e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005312:	e0d4      	b.n	80054be <UART_SetConfig+0x2e6>
 8005314:	2304      	movs	r3, #4
 8005316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531a:	e0d0      	b.n	80054be <UART_SetConfig+0x2e6>
 800531c:	2308      	movs	r3, #8
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005322:	e0cc      	b.n	80054be <UART_SetConfig+0x2e6>
 8005324:	2310      	movs	r3, #16
 8005326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532a:	e0c8      	b.n	80054be <UART_SetConfig+0x2e6>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a5e      	ldr	r2, [pc, #376]	; (80054ac <UART_SetConfig+0x2d4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d125      	bne.n	8005382 <UART_SetConfig+0x1aa>
 8005336:	4b5b      	ldr	r3, [pc, #364]	; (80054a4 <UART_SetConfig+0x2cc>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005340:	2b30      	cmp	r3, #48	; 0x30
 8005342:	d016      	beq.n	8005372 <UART_SetConfig+0x19a>
 8005344:	2b30      	cmp	r3, #48	; 0x30
 8005346:	d818      	bhi.n	800537a <UART_SetConfig+0x1a2>
 8005348:	2b20      	cmp	r3, #32
 800534a:	d00a      	beq.n	8005362 <UART_SetConfig+0x18a>
 800534c:	2b20      	cmp	r3, #32
 800534e:	d814      	bhi.n	800537a <UART_SetConfig+0x1a2>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <UART_SetConfig+0x182>
 8005354:	2b10      	cmp	r3, #16
 8005356:	d008      	beq.n	800536a <UART_SetConfig+0x192>
 8005358:	e00f      	b.n	800537a <UART_SetConfig+0x1a2>
 800535a:	2300      	movs	r3, #0
 800535c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005360:	e0ad      	b.n	80054be <UART_SetConfig+0x2e6>
 8005362:	2302      	movs	r3, #2
 8005364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005368:	e0a9      	b.n	80054be <UART_SetConfig+0x2e6>
 800536a:	2304      	movs	r3, #4
 800536c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005370:	e0a5      	b.n	80054be <UART_SetConfig+0x2e6>
 8005372:	2308      	movs	r3, #8
 8005374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005378:	e0a1      	b.n	80054be <UART_SetConfig+0x2e6>
 800537a:	2310      	movs	r3, #16
 800537c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005380:	e09d      	b.n	80054be <UART_SetConfig+0x2e6>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a4a      	ldr	r2, [pc, #296]	; (80054b0 <UART_SetConfig+0x2d8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d125      	bne.n	80053d8 <UART_SetConfig+0x200>
 800538c:	4b45      	ldr	r3, [pc, #276]	; (80054a4 <UART_SetConfig+0x2cc>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005392:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005396:	2bc0      	cmp	r3, #192	; 0xc0
 8005398:	d016      	beq.n	80053c8 <UART_SetConfig+0x1f0>
 800539a:	2bc0      	cmp	r3, #192	; 0xc0
 800539c:	d818      	bhi.n	80053d0 <UART_SetConfig+0x1f8>
 800539e:	2b80      	cmp	r3, #128	; 0x80
 80053a0:	d00a      	beq.n	80053b8 <UART_SetConfig+0x1e0>
 80053a2:	2b80      	cmp	r3, #128	; 0x80
 80053a4:	d814      	bhi.n	80053d0 <UART_SetConfig+0x1f8>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <UART_SetConfig+0x1d8>
 80053aa:	2b40      	cmp	r3, #64	; 0x40
 80053ac:	d008      	beq.n	80053c0 <UART_SetConfig+0x1e8>
 80053ae:	e00f      	b.n	80053d0 <UART_SetConfig+0x1f8>
 80053b0:	2300      	movs	r3, #0
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b6:	e082      	b.n	80054be <UART_SetConfig+0x2e6>
 80053b8:	2302      	movs	r3, #2
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053be:	e07e      	b.n	80054be <UART_SetConfig+0x2e6>
 80053c0:	2304      	movs	r3, #4
 80053c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c6:	e07a      	b.n	80054be <UART_SetConfig+0x2e6>
 80053c8:	2308      	movs	r3, #8
 80053ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ce:	e076      	b.n	80054be <UART_SetConfig+0x2e6>
 80053d0:	2310      	movs	r3, #16
 80053d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d6:	e072      	b.n	80054be <UART_SetConfig+0x2e6>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a35      	ldr	r2, [pc, #212]	; (80054b4 <UART_SetConfig+0x2dc>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d12a      	bne.n	8005438 <UART_SetConfig+0x260>
 80053e2:	4b30      	ldr	r3, [pc, #192]	; (80054a4 <UART_SetConfig+0x2cc>)
 80053e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053f0:	d01a      	beq.n	8005428 <UART_SetConfig+0x250>
 80053f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053f6:	d81b      	bhi.n	8005430 <UART_SetConfig+0x258>
 80053f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053fc:	d00c      	beq.n	8005418 <UART_SetConfig+0x240>
 80053fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005402:	d815      	bhi.n	8005430 <UART_SetConfig+0x258>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <UART_SetConfig+0x238>
 8005408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800540c:	d008      	beq.n	8005420 <UART_SetConfig+0x248>
 800540e:	e00f      	b.n	8005430 <UART_SetConfig+0x258>
 8005410:	2300      	movs	r3, #0
 8005412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005416:	e052      	b.n	80054be <UART_SetConfig+0x2e6>
 8005418:	2302      	movs	r3, #2
 800541a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541e:	e04e      	b.n	80054be <UART_SetConfig+0x2e6>
 8005420:	2304      	movs	r3, #4
 8005422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005426:	e04a      	b.n	80054be <UART_SetConfig+0x2e6>
 8005428:	2308      	movs	r3, #8
 800542a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800542e:	e046      	b.n	80054be <UART_SetConfig+0x2e6>
 8005430:	2310      	movs	r3, #16
 8005432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005436:	e042      	b.n	80054be <UART_SetConfig+0x2e6>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a17      	ldr	r2, [pc, #92]	; (800549c <UART_SetConfig+0x2c4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d13a      	bne.n	80054b8 <UART_SetConfig+0x2e0>
 8005442:	4b18      	ldr	r3, [pc, #96]	; (80054a4 <UART_SetConfig+0x2cc>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800544c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005450:	d01a      	beq.n	8005488 <UART_SetConfig+0x2b0>
 8005452:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005456:	d81b      	bhi.n	8005490 <UART_SetConfig+0x2b8>
 8005458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800545c:	d00c      	beq.n	8005478 <UART_SetConfig+0x2a0>
 800545e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005462:	d815      	bhi.n	8005490 <UART_SetConfig+0x2b8>
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <UART_SetConfig+0x298>
 8005468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800546c:	d008      	beq.n	8005480 <UART_SetConfig+0x2a8>
 800546e:	e00f      	b.n	8005490 <UART_SetConfig+0x2b8>
 8005470:	2300      	movs	r3, #0
 8005472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005476:	e022      	b.n	80054be <UART_SetConfig+0x2e6>
 8005478:	2302      	movs	r3, #2
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547e:	e01e      	b.n	80054be <UART_SetConfig+0x2e6>
 8005480:	2304      	movs	r3, #4
 8005482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005486:	e01a      	b.n	80054be <UART_SetConfig+0x2e6>
 8005488:	2308      	movs	r3, #8
 800548a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548e:	e016      	b.n	80054be <UART_SetConfig+0x2e6>
 8005490:	2310      	movs	r3, #16
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005496:	e012      	b.n	80054be <UART_SetConfig+0x2e6>
 8005498:	efff69f3 	.word	0xefff69f3
 800549c:	40008000 	.word	0x40008000
 80054a0:	40013800 	.word	0x40013800
 80054a4:	40021000 	.word	0x40021000
 80054a8:	40004400 	.word	0x40004400
 80054ac:	40004800 	.word	0x40004800
 80054b0:	40004c00 	.word	0x40004c00
 80054b4:	40005000 	.word	0x40005000
 80054b8:	2310      	movs	r3, #16
 80054ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a9f      	ldr	r2, [pc, #636]	; (8005740 <UART_SetConfig+0x568>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d17a      	bne.n	80055be <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d824      	bhi.n	800551a <UART_SetConfig+0x342>
 80054d0:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <UART_SetConfig+0x300>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	080054fd 	.word	0x080054fd
 80054dc:	0800551b 	.word	0x0800551b
 80054e0:	08005505 	.word	0x08005505
 80054e4:	0800551b 	.word	0x0800551b
 80054e8:	0800550b 	.word	0x0800550b
 80054ec:	0800551b 	.word	0x0800551b
 80054f0:	0800551b 	.word	0x0800551b
 80054f4:	0800551b 	.word	0x0800551b
 80054f8:	08005513 	.word	0x08005513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054fc:	f7fe fbee 	bl	8003cdc <HAL_RCC_GetPCLK1Freq>
 8005500:	61f8      	str	r0, [r7, #28]
        break;
 8005502:	e010      	b.n	8005526 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005504:	4b8f      	ldr	r3, [pc, #572]	; (8005744 <UART_SetConfig+0x56c>)
 8005506:	61fb      	str	r3, [r7, #28]
        break;
 8005508:	e00d      	b.n	8005526 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800550a:	f7fe fb4f 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 800550e:	61f8      	str	r0, [r7, #28]
        break;
 8005510:	e009      	b.n	8005526 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005516:	61fb      	str	r3, [r7, #28]
        break;
 8005518:	e005      	b.n	8005526 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005524:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 80fb 	beq.w	8005724 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	4413      	add	r3, r2
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	429a      	cmp	r2, r3
 800553c:	d305      	bcc.n	800554a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	429a      	cmp	r2, r3
 8005548:	d903      	bls.n	8005552 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005550:	e0e8      	b.n	8005724 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	2200      	movs	r2, #0
 8005556:	461c      	mov	r4, r3
 8005558:	4615      	mov	r5, r2
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	022b      	lsls	r3, r5, #8
 8005564:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005568:	0222      	lsls	r2, r4, #8
 800556a:	68f9      	ldr	r1, [r7, #12]
 800556c:	6849      	ldr	r1, [r1, #4]
 800556e:	0849      	lsrs	r1, r1, #1
 8005570:	2000      	movs	r0, #0
 8005572:	4688      	mov	r8, r1
 8005574:	4681      	mov	r9, r0
 8005576:	eb12 0a08 	adds.w	sl, r2, r8
 800557a:	eb43 0b09 	adc.w	fp, r3, r9
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	603b      	str	r3, [r7, #0]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800558c:	4650      	mov	r0, sl
 800558e:	4659      	mov	r1, fp
 8005590:	f7fa fe76 	bl	8000280 <__aeabi_uldivmod>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	4613      	mov	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055a2:	d308      	bcc.n	80055b6 <UART_SetConfig+0x3de>
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055aa:	d204      	bcs.n	80055b6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	60da      	str	r2, [r3, #12]
 80055b4:	e0b6      	b.n	8005724 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055bc:	e0b2      	b.n	8005724 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c6:	d15e      	bne.n	8005686 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80055c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d828      	bhi.n	8005622 <UART_SetConfig+0x44a>
 80055d0:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <UART_SetConfig+0x400>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	080055fd 	.word	0x080055fd
 80055dc:	08005605 	.word	0x08005605
 80055e0:	0800560d 	.word	0x0800560d
 80055e4:	08005623 	.word	0x08005623
 80055e8:	08005613 	.word	0x08005613
 80055ec:	08005623 	.word	0x08005623
 80055f0:	08005623 	.word	0x08005623
 80055f4:	08005623 	.word	0x08005623
 80055f8:	0800561b 	.word	0x0800561b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055fc:	f7fe fb6e 	bl	8003cdc <HAL_RCC_GetPCLK1Freq>
 8005600:	61f8      	str	r0, [r7, #28]
        break;
 8005602:	e014      	b.n	800562e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005604:	f7fe fb80 	bl	8003d08 <HAL_RCC_GetPCLK2Freq>
 8005608:	61f8      	str	r0, [r7, #28]
        break;
 800560a:	e010      	b.n	800562e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800560c:	4b4d      	ldr	r3, [pc, #308]	; (8005744 <UART_SetConfig+0x56c>)
 800560e:	61fb      	str	r3, [r7, #28]
        break;
 8005610:	e00d      	b.n	800562e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005612:	f7fe facb 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8005616:	61f8      	str	r0, [r7, #28]
        break;
 8005618:	e009      	b.n	800562e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800561e:	61fb      	str	r3, [r7, #28]
        break;
 8005620:	e005      	b.n	800562e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800562c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d077      	beq.n	8005724 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	005a      	lsls	r2, r3, #1
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	441a      	add	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	fbb2 f3f3 	udiv	r3, r2, r3
 8005648:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	2b0f      	cmp	r3, #15
 800564e:	d916      	bls.n	800567e <UART_SetConfig+0x4a6>
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005656:	d212      	bcs.n	800567e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f023 030f 	bic.w	r3, r3, #15
 8005660:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	085b      	lsrs	r3, r3, #1
 8005666:	b29b      	uxth	r3, r3
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	b29a      	uxth	r2, r3
 800566e:	8afb      	ldrh	r3, [r7, #22]
 8005670:	4313      	orrs	r3, r2
 8005672:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	8afa      	ldrh	r2, [r7, #22]
 800567a:	60da      	str	r2, [r3, #12]
 800567c:	e052      	b.n	8005724 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005684:	e04e      	b.n	8005724 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005686:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800568a:	2b08      	cmp	r3, #8
 800568c:	d827      	bhi.n	80056de <UART_SetConfig+0x506>
 800568e:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <UART_SetConfig+0x4bc>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056b9 	.word	0x080056b9
 8005698:	080056c1 	.word	0x080056c1
 800569c:	080056c9 	.word	0x080056c9
 80056a0:	080056df 	.word	0x080056df
 80056a4:	080056cf 	.word	0x080056cf
 80056a8:	080056df 	.word	0x080056df
 80056ac:	080056df 	.word	0x080056df
 80056b0:	080056df 	.word	0x080056df
 80056b4:	080056d7 	.word	0x080056d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b8:	f7fe fb10 	bl	8003cdc <HAL_RCC_GetPCLK1Freq>
 80056bc:	61f8      	str	r0, [r7, #28]
        break;
 80056be:	e014      	b.n	80056ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056c0:	f7fe fb22 	bl	8003d08 <HAL_RCC_GetPCLK2Freq>
 80056c4:	61f8      	str	r0, [r7, #28]
        break;
 80056c6:	e010      	b.n	80056ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c8:	4b1e      	ldr	r3, [pc, #120]	; (8005744 <UART_SetConfig+0x56c>)
 80056ca:	61fb      	str	r3, [r7, #28]
        break;
 80056cc:	e00d      	b.n	80056ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ce:	f7fe fa6d 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 80056d2:	61f8      	str	r0, [r7, #28]
        break;
 80056d4:	e009      	b.n	80056ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056da:	61fb      	str	r3, [r7, #28]
        break;
 80056dc:	e005      	b.n	80056ea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056e8:	bf00      	nop
    }

    if (pclk != 0U)
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d019      	beq.n	8005724 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	085a      	lsrs	r2, r3, #1
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	441a      	add	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005702:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b0f      	cmp	r3, #15
 8005708:	d909      	bls.n	800571e <UART_SetConfig+0x546>
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005710:	d205      	bcs.n	800571e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60da      	str	r2, [r3, #12]
 800571c:	e002      	b.n	8005724 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005730:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005734:	4618      	mov	r0, r3
 8005736:	3728      	adds	r7, #40	; 0x28
 8005738:	46bd      	mov	sp, r7
 800573a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800573e:	bf00      	nop
 8005740:	40008000 	.word	0x40008000
 8005744:	00f42400 	.word	0x00f42400

08005748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00a      	beq.n	80057fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01a      	beq.n	800585e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005846:	d10a      	bne.n	800585e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	605a      	str	r2, [r3, #4]
  }
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b098      	sub	sp, #96	; 0x60
 8005890:	af02      	add	r7, sp, #8
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800589c:	f7fd f94e 	bl	8002b3c <HAL_GetTick>
 80058a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d12e      	bne.n	800590e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058b8:	2200      	movs	r2, #0
 80058ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f88c 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d021      	beq.n	800590e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058de:	653b      	str	r3, [r7, #80]	; 0x50
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	461a      	mov	r2, r3
 80058e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e8:	647b      	str	r3, [r7, #68]	; 0x44
 80058ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e6      	bne.n	80058ca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e062      	b.n	80059d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b04      	cmp	r3, #4
 800591a:	d149      	bne.n	80059b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800591c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005924:	2200      	movs	r2, #0
 8005926:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f856 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d03c      	beq.n	80059b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	e853 3f00 	ldrex	r3, [r3]
 8005942:	623b      	str	r3, [r7, #32]
   return(result);
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800594a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005954:	633b      	str	r3, [r7, #48]	; 0x30
 8005956:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800595a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595c:	e841 2300 	strex	r3, r2, [r1]
 8005960:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e6      	bne.n	8005936 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3308      	adds	r3, #8
 800596e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	e853 3f00 	ldrex	r3, [r3]
 8005976:	60fb      	str	r3, [r7, #12]
   return(result);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0301 	bic.w	r3, r3, #1
 800597e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3308      	adds	r3, #8
 8005986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005988:	61fa      	str	r2, [r7, #28]
 800598a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598c:	69b9      	ldr	r1, [r7, #24]
 800598e:	69fa      	ldr	r2, [r7, #28]
 8005990:	e841 2300 	strex	r3, r2, [r1]
 8005994:	617b      	str	r3, [r7, #20]
   return(result);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1e5      	bne.n	8005968 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e011      	b.n	80059d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3758      	adds	r7, #88	; 0x58
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ec:	e049      	b.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059f4:	d045      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f6:	f7fd f8a1 	bl	8002b3c <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d302      	bcc.n	8005a0c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e048      	b.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d031      	beq.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d110      	bne.n	8005a4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2208      	movs	r2, #8
 8005a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f838 	bl	8005aaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e029      	b.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5c:	d111      	bne.n	8005a82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f81e 	bl	8005aaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e00f      	b.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	bf0c      	ite	eq
 8005a92:	2301      	moveq	r3, #1
 8005a94:	2300      	movne	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	461a      	mov	r2, r3
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d0a6      	beq.n	80059ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b095      	sub	sp, #84	; 0x54
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ad2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ad6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e6      	bne.n	8005ab2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3308      	adds	r3, #8
 8005aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f023 0301 	bic.w	r3, r3, #1
 8005afa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3308      	adds	r3, #8
 8005b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e5      	bne.n	8005ae4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d118      	bne.n	8005b52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f023 0310 	bic.w	r3, r3, #16
 8005b34:	647b      	str	r3, [r7, #68]	; 0x44
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3e:	61bb      	str	r3, [r7, #24]
 8005b40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	6979      	ldr	r1, [r7, #20]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e6      	bne.n	8005b20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b66:	bf00      	nop
 8005b68:	3754      	adds	r7, #84	; 0x54
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
	...

08005b74 <__NVIC_SetPriority>:
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	6039      	str	r1, [r7, #0]
 8005b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	db0a      	blt.n	8005b9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	490c      	ldr	r1, [pc, #48]	; (8005bc0 <__NVIC_SetPriority+0x4c>)
 8005b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b92:	0112      	lsls	r2, r2, #4
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	440b      	add	r3, r1
 8005b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b9c:	e00a      	b.n	8005bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	4908      	ldr	r1, [pc, #32]	; (8005bc4 <__NVIC_SetPriority+0x50>)
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	3b04      	subs	r3, #4
 8005bac:	0112      	lsls	r2, r2, #4
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	761a      	strb	r2, [r3, #24]
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	e000e100 	.word	0xe000e100
 8005bc4:	e000ed00 	.word	0xe000ed00

08005bc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005bcc:	2100      	movs	r1, #0
 8005bce:	f06f 0004 	mvn.w	r0, #4
 8005bd2:	f7ff ffcf 	bl	8005b74 <__NVIC_SetPriority>
#endif
}
 8005bd6:	bf00      	nop
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005be2:	f3ef 8305 	mrs	r3, IPSR
 8005be6:	603b      	str	r3, [r7, #0]
  return(result);
 8005be8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005bee:	f06f 0305 	mvn.w	r3, #5
 8005bf2:	607b      	str	r3, [r7, #4]
 8005bf4:	e00c      	b.n	8005c10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <osKernelInitialize+0x44>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d105      	bne.n	8005c0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005bfe:	4b08      	ldr	r3, [pc, #32]	; (8005c20 <osKernelInitialize+0x44>)
 8005c00:	2201      	movs	r2, #1
 8005c02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	607b      	str	r3, [r7, #4]
 8005c08:	e002      	b.n	8005c10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c10:	687b      	ldr	r3, [r7, #4]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	200009f0 	.word	0x200009f0

08005c24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c2a:	f3ef 8305 	mrs	r3, IPSR
 8005c2e:	603b      	str	r3, [r7, #0]
  return(result);
 8005c30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005c36:	f06f 0305 	mvn.w	r3, #5
 8005c3a:	607b      	str	r3, [r7, #4]
 8005c3c:	e010      	b.n	8005c60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c3e:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <osKernelStart+0x48>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d109      	bne.n	8005c5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c46:	f7ff ffbf 	bl	8005bc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c4a:	4b08      	ldr	r3, [pc, #32]	; (8005c6c <osKernelStart+0x48>)
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c50:	f001 fb88 	bl	8007364 <vTaskStartScheduler>
      stat = osOK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	607b      	str	r3, [r7, #4]
 8005c58:	e002      	b.n	8005c60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c60:	687b      	ldr	r3, [r7, #4]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200009f0 	.word	0x200009f0

08005c70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08e      	sub	sp, #56	; 0x38
 8005c74:	af04      	add	r7, sp, #16
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c80:	f3ef 8305 	mrs	r3, IPSR
 8005c84:	617b      	str	r3, [r7, #20]
  return(result);
 8005c86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d17e      	bne.n	8005d8a <osThreadNew+0x11a>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d07b      	beq.n	8005d8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c92:	2380      	movs	r3, #128	; 0x80
 8005c94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c96:	2318      	movs	r3, #24
 8005c98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ca2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d045      	beq.n	8005d36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <osThreadNew+0x48>
        name = attr->name;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <osThreadNew+0x6e>
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	2b38      	cmp	r3, #56	; 0x38
 8005cd0:	d805      	bhi.n	8005cde <osThreadNew+0x6e>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <osThreadNew+0x72>
        return (NULL);
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e054      	b.n	8005d8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	089b      	lsrs	r3, r3, #2
 8005cf0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00e      	beq.n	8005d18 <osThreadNew+0xa8>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	2b5b      	cmp	r3, #91	; 0x5b
 8005d00:	d90a      	bls.n	8005d18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d006      	beq.n	8005d18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <osThreadNew+0xa8>
        mem = 1;
 8005d12:	2301      	movs	r3, #1
 8005d14:	61bb      	str	r3, [r7, #24]
 8005d16:	e010      	b.n	8005d3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10c      	bne.n	8005d3a <osThreadNew+0xca>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d108      	bne.n	8005d3a <osThreadNew+0xca>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d104      	bne.n	8005d3a <osThreadNew+0xca>
          mem = 0;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	e001      	b.n	8005d3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d110      	bne.n	8005d62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d48:	9202      	str	r2, [sp, #8]
 8005d4a:	9301      	str	r3, [sp, #4]
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	6a3a      	ldr	r2, [r7, #32]
 8005d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f001 f92e 	bl	8006fb8 <xTaskCreateStatic>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	613b      	str	r3, [r7, #16]
 8005d60:	e013      	b.n	8005d8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d110      	bne.n	8005d8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	f107 0310 	add.w	r3, r7, #16
 8005d70:	9301      	str	r3, [sp, #4]
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f001 f979 	bl	8007072 <xTaskCreate>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d001      	beq.n	8005d8a <osThreadNew+0x11a>
            hTask = NULL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d8a:	693b      	ldr	r3, [r7, #16]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3728      	adds	r7, #40	; 0x28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d9c:	f3ef 8305 	mrs	r3, IPSR
 8005da0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005da2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <osDelay+0x1c>
    stat = osErrorISR;
 8005da8:	f06f 0305 	mvn.w	r3, #5
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	e007      	b.n	8005dc0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f001 fa9e 	bl	80072fc <vTaskDelay>
    }
  }

  return (stat);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b088      	sub	sp, #32
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dd6:	f3ef 8305 	mrs	r3, IPSR
 8005dda:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ddc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d174      	bne.n	8005ecc <osMutexNew+0x102>
    if (attr != NULL) {
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	e001      	b.n	8005df4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <osMutexNew+0x3a>
      rmtx = 1U;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	e001      	b.n	8005e08 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d15c      	bne.n	8005ecc <osMutexNew+0x102>
      mem = -1;
 8005e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e16:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d015      	beq.n	8005e4a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d006      	beq.n	8005e34 <osMutexNew+0x6a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	2b4f      	cmp	r3, #79	; 0x4f
 8005e2c:	d902      	bls.n	8005e34 <osMutexNew+0x6a>
          mem = 1;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	e00c      	b.n	8005e4e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d108      	bne.n	8005e4e <osMutexNew+0x84>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d104      	bne.n	8005e4e <osMutexNew+0x84>
            mem = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	613b      	str	r3, [r7, #16]
 8005e48:	e001      	b.n	8005e4e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d112      	bne.n	8005e7a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	2004      	movs	r0, #4
 8005e62:	f000 fb18 	bl	8006496 <xQueueCreateMutexStatic>
 8005e66:	61f8      	str	r0, [r7, #28]
 8005e68:	e016      	b.n	8005e98 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	2001      	movs	r0, #1
 8005e72:	f000 fb10 	bl	8006496 <xQueueCreateMutexStatic>
 8005e76:	61f8      	str	r0, [r7, #28]
 8005e78:	e00e      	b.n	8005e98 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10b      	bne.n	8005e98 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d004      	beq.n	8005e90 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005e86:	2004      	movs	r0, #4
 8005e88:	f000 faed 	bl	8006466 <xQueueCreateMutex>
 8005e8c:	61f8      	str	r0, [r7, #28]
 8005e8e:	e003      	b.n	8005e98 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005e90:	2001      	movs	r0, #1
 8005e92:	f000 fae8 	bl	8006466 <xQueueCreateMutex>
 8005e96:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00c      	beq.n	8005eb8 <osMutexNew+0xee>
        if (attr != NULL) {
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <osMutexNew+0xe2>
          name = attr->name;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	e001      	b.n	8005eb0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005eac:	2300      	movs	r3, #0
 8005eae:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005eb0:	68f9      	ldr	r1, [r7, #12]
 8005eb2:	69f8      	ldr	r0, [r7, #28]
 8005eb4:	f001 f822 	bl	8006efc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d006      	beq.n	8005ecc <osMutexNew+0x102>
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	f043 0301 	orr.w	r3, r3, #1
 8005eca:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005ecc:	69fb      	ldr	r3, [r7, #28]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b086      	sub	sp, #24
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f023 0301 	bic.w	r3, r3, #1
 8005ee6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ef4:	f3ef 8305 	mrs	r3, IPSR
 8005ef8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005efa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005f00:	f06f 0305 	mvn.w	r3, #5
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	e02c      	b.n	8005f62 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d103      	bne.n	8005f16 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005f0e:	f06f 0303 	mvn.w	r3, #3
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	e025      	b.n	8005f62 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d011      	beq.n	8005f40 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005f1c:	6839      	ldr	r1, [r7, #0]
 8005f1e:	6938      	ldr	r0, [r7, #16]
 8005f20:	f000 fb08 	bl	8006534 <xQueueTakeMutexRecursive>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d01b      	beq.n	8005f62 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005f30:	f06f 0301 	mvn.w	r3, #1
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	e014      	b.n	8005f62 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005f38:	f06f 0302 	mvn.w	r3, #2
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	e010      	b.n	8005f62 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6938      	ldr	r0, [r7, #16]
 8005f44:	f000 fda6 	bl	8006a94 <xQueueSemaphoreTake>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d009      	beq.n	8005f62 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005f54:	f06f 0301 	mvn.w	r3, #1
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	e002      	b.n	8005f62 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005f5c:	f06f 0302 	mvn.w	r3, #2
 8005f60:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005f62:	697b      	ldr	r3, [r7, #20]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f023 0301 	bic.w	r3, r3, #1
 8005f7a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f88:	f3ef 8305 	mrs	r3, IPSR
 8005f8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f8e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <osMutexRelease+0x30>
    stat = osErrorISR;
 8005f94:	f06f 0305 	mvn.w	r3, #5
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	e01f      	b.n	8005fdc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d103      	bne.n	8005faa <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005fa2:	f06f 0303 	mvn.w	r3, #3
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	e018      	b.n	8005fdc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d009      	beq.n	8005fc4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005fb0:	6938      	ldr	r0, [r7, #16]
 8005fb2:	f000 fa8b 	bl	80064cc <xQueueGiveMutexRecursive>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d00f      	beq.n	8005fdc <osMutexRelease+0x70>
        stat = osErrorResource;
 8005fbc:	f06f 0302 	mvn.w	r3, #2
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	e00b      	b.n	8005fdc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2100      	movs	r1, #0
 8005fca:	6938      	ldr	r0, [r7, #16]
 8005fcc:	f000 fae8 	bl	80065a0 <xQueueGenericSend>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d002      	beq.n	8005fdc <osMutexRelease+0x70>
        stat = osErrorResource;
 8005fd6:	f06f 0302 	mvn.w	r3, #2
 8005fda:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005fdc:	697b      	ldr	r3, [r7, #20]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4a07      	ldr	r2, [pc, #28]	; (8006014 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ff8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4a06      	ldr	r2, [pc, #24]	; (8006018 <vApplicationGetIdleTaskMemory+0x30>)
 8005ffe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2280      	movs	r2, #128	; 0x80
 8006004:	601a      	str	r2, [r3, #0]
}
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	200009f4 	.word	0x200009f4
 8006018:	20000a50 	.word	0x20000a50

0800601c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4a07      	ldr	r2, [pc, #28]	; (8006048 <vApplicationGetTimerTaskMemory+0x2c>)
 800602c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	4a06      	ldr	r2, [pc, #24]	; (800604c <vApplicationGetTimerTaskMemory+0x30>)
 8006032:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800603a:	601a      	str	r2, [r3, #0]
}
 800603c:	bf00      	nop
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	20000c50 	.word	0x20000c50
 800604c:	20000cac 	.word	0x20000cac

08006050 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f103 0208 	add.w	r2, r3, #8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006068:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f103 0208 	add.w	r2, r3, #8
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f103 0208 	add.w	r2, r3, #8
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060aa:	b480      	push	{r7}
 80060ac:	b085      	sub	sp, #20
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	601a      	str	r2, [r3, #0]
}
 80060e6:	bf00      	nop
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060f2:	b480      	push	{r7}
 80060f4:	b085      	sub	sp, #20
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006108:	d103      	bne.n	8006112 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	e00c      	b.n	800612c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3308      	adds	r3, #8
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	e002      	b.n	8006120 <vListInsert+0x2e>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	429a      	cmp	r2, r3
 800612a:	d2f6      	bcs.n	800611a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	601a      	str	r2, [r3, #0]
}
 8006158:	bf00      	nop
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6892      	ldr	r2, [r2, #8]
 800617a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6852      	ldr	r2, [r2, #4]
 8006184:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	429a      	cmp	r2, r3
 800618e:	d103      	bne.n	8006198 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	1e5a      	subs	r2, r3, #1
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061e2:	f002 fb6f 	bl	80088c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ee:	68f9      	ldr	r1, [r7, #12]
 80061f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061f2:	fb01 f303 	mul.w	r3, r1, r3
 80061f6:	441a      	add	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006212:	3b01      	subs	r3, #1
 8006214:	68f9      	ldr	r1, [r7, #12]
 8006216:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006218:	fb01 f303 	mul.w	r3, r1, r3
 800621c:	441a      	add	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	22ff      	movs	r2, #255	; 0xff
 8006226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	22ff      	movs	r2, #255	; 0xff
 800622e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d114      	bne.n	8006262 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d01a      	beq.n	8006276 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3310      	adds	r3, #16
 8006244:	4618      	mov	r0, r3
 8006246:	f001 fb17 	bl	8007878 <xTaskRemoveFromEventList>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d012      	beq.n	8006276 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006250:	4b0c      	ldr	r3, [pc, #48]	; (8006284 <xQueueGenericReset+0xcc>)
 8006252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	e009      	b.n	8006276 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3310      	adds	r3, #16
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fef2 	bl	8006050 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3324      	adds	r3, #36	; 0x24
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff feed 	bl	8006050 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006276:	f002 fb55 	bl	8008924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800627a:	2301      	movs	r3, #1
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	e000ed04 	.word	0xe000ed04

08006288 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08e      	sub	sp, #56	; 0x38
 800628c:	af02      	add	r7, sp, #8
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062ca:	bf00      	nop
 80062cc:	e7fe      	b.n	80062cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <xQueueGenericCreateStatic+0x52>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <xQueueGenericCreateStatic+0x56>
 80062da:	2301      	movs	r3, #1
 80062dc:	e000      	b.n	80062e0 <xQueueGenericCreateStatic+0x58>
 80062de:	2300      	movs	r3, #0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	623b      	str	r3, [r7, #32]
}
 80062f6:	bf00      	nop
 80062f8:	e7fe      	b.n	80062f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d102      	bne.n	8006306 <xQueueGenericCreateStatic+0x7e>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <xQueueGenericCreateStatic+0x82>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <xQueueGenericCreateStatic+0x84>
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	61fb      	str	r3, [r7, #28]
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006326:	2350      	movs	r3, #80	; 0x50
 8006328:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b50      	cmp	r3, #80	; 0x50
 800632e:	d00a      	beq.n	8006346 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	61bb      	str	r3, [r7, #24]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006346:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00d      	beq.n	800636e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800635a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	4613      	mov	r3, r2
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f83f 	bl	80063ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006370:	4618      	mov	r0, r3
 8006372:	3730      	adds	r7, #48	; 0x30
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	; 0x28
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	4613      	mov	r3, r2
 8006384:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10a      	bne.n	80063a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	613b      	str	r3, [r7, #16]
}
 800639e:	bf00      	nop
 80063a0:	e7fe      	b.n	80063a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	fb02 f303 	mul.w	r3, r2, r3
 80063aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	3350      	adds	r3, #80	; 0x50
 80063b0:	4618      	mov	r0, r3
 80063b2:	f002 fba9 	bl	8008b08 <pvPortMalloc>
 80063b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d011      	beq.n	80063e2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	3350      	adds	r3, #80	; 0x50
 80063c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063d0:	79fa      	ldrb	r2, [r7, #7]
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	4613      	mov	r3, r2
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 f805 	bl	80063ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063e2:	69bb      	ldr	r3, [r7, #24]
	}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3720      	adds	r7, #32
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d103      	bne.n	8006408 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e002      	b.n	800640e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800641a:	2101      	movs	r1, #1
 800641c:	69b8      	ldr	r0, [r7, #24]
 800641e:	f7ff fecb 	bl	80061b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	78fa      	ldrb	r2, [r7, #3]
 8006426:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800642a:	bf00      	nop
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006432:	b580      	push	{r7, lr}
 8006434:	b082      	sub	sp, #8
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00e      	beq.n	800645e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006452:	2300      	movs	r3, #0
 8006454:	2200      	movs	r2, #0
 8006456:	2100      	movs	r1, #0
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f8a1 	bl	80065a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800645e:	bf00      	nop
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006466:	b580      	push	{r7, lr}
 8006468:	b086      	sub	sp, #24
 800646a:	af00      	add	r7, sp, #0
 800646c:	4603      	mov	r3, r0
 800646e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006470:	2301      	movs	r3, #1
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	2300      	movs	r3, #0
 8006476:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006478:	79fb      	ldrb	r3, [r7, #7]
 800647a:	461a      	mov	r2, r3
 800647c:	6939      	ldr	r1, [r7, #16]
 800647e:	6978      	ldr	r0, [r7, #20]
 8006480:	f7ff ff7a 	bl	8006378 <xQueueGenericCreate>
 8006484:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f7ff ffd3 	bl	8006432 <prvInitialiseMutex>

		return xNewQueue;
 800648c:	68fb      	ldr	r3, [r7, #12]
	}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006496:	b580      	push	{r7, lr}
 8006498:	b088      	sub	sp, #32
 800649a:	af02      	add	r7, sp, #8
 800649c:	4603      	mov	r3, r0
 800649e:	6039      	str	r1, [r7, #0]
 80064a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80064a2:	2301      	movs	r3, #1
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	2300      	movs	r3, #0
 80064a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80064aa:	79fb      	ldrb	r3, [r7, #7]
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2200      	movs	r2, #0
 80064b2:	6939      	ldr	r1, [r7, #16]
 80064b4:	6978      	ldr	r0, [r7, #20]
 80064b6:	f7ff fee7 	bl	8006288 <xQueueGenericCreateStatic>
 80064ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff ffb8 	bl	8006432 <prvInitialiseMutex>

		return xNewQueue;
 80064c2:	68fb      	ldr	r3, [r7, #12]
	}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80064cc:	b590      	push	{r4, r7, lr}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10a      	bne.n	80064f4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	60fb      	str	r3, [r7, #12]
}
 80064f0:	bf00      	nop
 80064f2:	e7fe      	b.n	80064f2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	689c      	ldr	r4, [r3, #8]
 80064f8:	f001 fb7c 	bl	8007bf4 <xTaskGetCurrentTaskHandle>
 80064fc:	4603      	mov	r3, r0
 80064fe:	429c      	cmp	r4, r3
 8006500:	d111      	bne.n	8006526 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	1e5a      	subs	r2, r3, #1
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d105      	bne.n	8006520 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006514:	2300      	movs	r3, #0
 8006516:	2200      	movs	r2, #0
 8006518:	2100      	movs	r1, #0
 800651a:	6938      	ldr	r0, [r7, #16]
 800651c:	f000 f840 	bl	80065a0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006520:	2301      	movs	r3, #1
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	e001      	b.n	800652a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800652a:	697b      	ldr	r3, [r7, #20]
	}
 800652c:	4618      	mov	r0, r3
 800652e:	371c      	adds	r7, #28
 8006530:	46bd      	mov	sp, r7
 8006532:	bd90      	pop	{r4, r7, pc}

08006534 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006534:	b590      	push	{r4, r7, lr}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	60fb      	str	r3, [r7, #12]
}
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	689c      	ldr	r4, [r3, #8]
 8006562:	f001 fb47 	bl	8007bf4 <xTaskGetCurrentTaskHandle>
 8006566:	4603      	mov	r3, r0
 8006568:	429c      	cmp	r4, r3
 800656a:	d107      	bne.n	800657c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006576:	2301      	movs	r3, #1
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	e00c      	b.n	8006596 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6938      	ldr	r0, [r7, #16]
 8006580:	f000 fa88 	bl	8006a94 <xQueueSemaphoreTake>
 8006584:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d004      	beq.n	8006596 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006596:	697b      	ldr	r3, [r7, #20]
	}
 8006598:	4618      	mov	r0, r3
 800659a:	371c      	adds	r7, #28
 800659c:	46bd      	mov	sp, r7
 800659e:	bd90      	pop	{r4, r7, pc}

080065a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08e      	sub	sp, #56	; 0x38
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80065ae:	2300      	movs	r3, #0
 80065b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <xQueueGenericSend+0x32>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d103      	bne.n	80065e0 <xQueueGenericSend+0x40>
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <xQueueGenericSend+0x44>
 80065e0:	2301      	movs	r3, #1
 80065e2:	e000      	b.n	80065e6 <xQueueGenericSend+0x46>
 80065e4:	2300      	movs	r3, #0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <xQueueGenericSend+0x60>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065fc:	bf00      	nop
 80065fe:	e7fe      	b.n	80065fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d103      	bne.n	800660e <xQueueGenericSend+0x6e>
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660a:	2b01      	cmp	r3, #1
 800660c:	d101      	bne.n	8006612 <xQueueGenericSend+0x72>
 800660e:	2301      	movs	r3, #1
 8006610:	e000      	b.n	8006614 <xQueueGenericSend+0x74>
 8006612:	2300      	movs	r3, #0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10a      	bne.n	800662e <xQueueGenericSend+0x8e>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	623b      	str	r3, [r7, #32]
}
 800662a:	bf00      	nop
 800662c:	e7fe      	b.n	800662c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800662e:	f001 faf1 	bl	8007c14 <xTaskGetSchedulerState>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d102      	bne.n	800663e <xQueueGenericSend+0x9e>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <xQueueGenericSend+0xa2>
 800663e:	2301      	movs	r3, #1
 8006640:	e000      	b.n	8006644 <xQueueGenericSend+0xa4>
 8006642:	2300      	movs	r3, #0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <xQueueGenericSend+0xbe>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	61fb      	str	r3, [r7, #28]
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800665e:	f002 f931 	bl	80088c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666a:	429a      	cmp	r2, r3
 800666c:	d302      	bcc.n	8006674 <xQueueGenericSend+0xd4>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b02      	cmp	r3, #2
 8006672:	d129      	bne.n	80066c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	68b9      	ldr	r1, [r7, #8]
 8006678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800667a:	f000 fb2f 	bl	8006cdc <prvCopyDataToQueue>
 800667e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	2b00      	cmp	r3, #0
 8006686:	d010      	beq.n	80066aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	3324      	adds	r3, #36	; 0x24
 800668c:	4618      	mov	r0, r3
 800668e:	f001 f8f3 	bl	8007878 <xTaskRemoveFromEventList>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d013      	beq.n	80066c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006698:	4b3f      	ldr	r3, [pc, #252]	; (8006798 <xQueueGenericSend+0x1f8>)
 800669a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	e00a      	b.n	80066c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80066b0:	4b39      	ldr	r3, [pc, #228]	; (8006798 <xQueueGenericSend+0x1f8>)
 80066b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80066c0:	f002 f930 	bl	8008924 <vPortExitCritical>
				return pdPASS;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e063      	b.n	8006790 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d103      	bne.n	80066d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066ce:	f002 f929 	bl	8008924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e05c      	b.n	8006790 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d106      	bne.n	80066ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066dc:	f107 0314 	add.w	r3, r7, #20
 80066e0:	4618      	mov	r0, r3
 80066e2:	f001 f92d 	bl	8007940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066e6:	2301      	movs	r3, #1
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066ea:	f002 f91b 	bl	8008924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066ee:	f000 fe9f 	bl	8007430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066f2:	f002 f8e7 	bl	80088c4 <vPortEnterCritical>
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066fc:	b25b      	sxtb	r3, r3
 80066fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006702:	d103      	bne.n	800670c <xQueueGenericSend+0x16c>
 8006704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006712:	b25b      	sxtb	r3, r3
 8006714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006718:	d103      	bne.n	8006722 <xQueueGenericSend+0x182>
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006722:	f002 f8ff 	bl	8008924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006726:	1d3a      	adds	r2, r7, #4
 8006728:	f107 0314 	add.w	r3, r7, #20
 800672c:	4611      	mov	r1, r2
 800672e:	4618      	mov	r0, r3
 8006730:	f001 f91c 	bl	800796c <xTaskCheckForTimeOut>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d124      	bne.n	8006784 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800673a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800673c:	f000 fbc6 	bl	8006ecc <prvIsQueueFull>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d018      	beq.n	8006778 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	3310      	adds	r3, #16
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	4611      	mov	r1, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f001 f842 	bl	80077d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006756:	f000 fb51 	bl	8006dfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800675a:	f000 fe77 	bl	800744c <xTaskResumeAll>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	f47f af7c 	bne.w	800665e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006766:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <xQueueGenericSend+0x1f8>)
 8006768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	e772      	b.n	800665e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800677a:	f000 fb3f 	bl	8006dfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800677e:	f000 fe65 	bl	800744c <xTaskResumeAll>
 8006782:	e76c      	b.n	800665e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006786:	f000 fb39 	bl	8006dfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800678a:	f000 fe5f 	bl	800744c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800678e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006790:	4618      	mov	r0, r3
 8006792:	3738      	adds	r7, #56	; 0x38
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	e000ed04 	.word	0xe000ed04

0800679c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b090      	sub	sp, #64	; 0x40
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80067ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d103      	bne.n	80067d8 <xQueueGenericSendFromISR+0x3c>
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <xQueueGenericSendFromISR+0x40>
 80067d8:	2301      	movs	r3, #1
 80067da:	e000      	b.n	80067de <xQueueGenericSendFromISR+0x42>
 80067dc:	2300      	movs	r3, #0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067f4:	bf00      	nop
 80067f6:	e7fe      	b.n	80067f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d103      	bne.n	8006806 <xQueueGenericSendFromISR+0x6a>
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <xQueueGenericSendFromISR+0x6e>
 8006806:	2301      	movs	r3, #1
 8006808:	e000      	b.n	800680c <xQueueGenericSendFromISR+0x70>
 800680a:	2300      	movs	r3, #0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	623b      	str	r3, [r7, #32]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006826:	f002 f92f 	bl	8008a88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800682a:	f3ef 8211 	mrs	r2, BASEPRI
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	61fa      	str	r2, [r7, #28]
 8006840:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006842:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006844:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684e:	429a      	cmp	r2, r3
 8006850:	d302      	bcc.n	8006858 <xQueueGenericSendFromISR+0xbc>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b02      	cmp	r3, #2
 8006856:	d12f      	bne.n	80068b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800685e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	68b9      	ldr	r1, [r7, #8]
 800686c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800686e:	f000 fa35 	bl	8006cdc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006872:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800687a:	d112      	bne.n	80068a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	2b00      	cmp	r3, #0
 8006882:	d016      	beq.n	80068b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006886:	3324      	adds	r3, #36	; 0x24
 8006888:	4618      	mov	r0, r3
 800688a:	f000 fff5 	bl	8007878 <xTaskRemoveFromEventList>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00e      	beq.n	80068b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00b      	beq.n	80068b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	e007      	b.n	80068b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80068a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80068a6:	3301      	adds	r3, #1
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	b25a      	sxtb	r2, r3
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80068b2:	2301      	movs	r3, #1
 80068b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80068b6:	e001      	b.n	80068bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80068c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3740      	adds	r7, #64	; 0x40
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08c      	sub	sp, #48	; 0x30
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80068e0:	2300      	movs	r3, #0
 80068e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10a      	bne.n	8006904 <xQueueReceive+0x30>
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	623b      	str	r3, [r7, #32]
}
 8006900:	bf00      	nop
 8006902:	e7fe      	b.n	8006902 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d103      	bne.n	8006912 <xQueueReceive+0x3e>
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <xQueueReceive+0x42>
 8006912:	2301      	movs	r3, #1
 8006914:	e000      	b.n	8006918 <xQueueReceive+0x44>
 8006916:	2300      	movs	r3, #0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <xQueueReceive+0x5e>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	61fb      	str	r3, [r7, #28]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006932:	f001 f96f 	bl	8007c14 <xTaskGetSchedulerState>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d102      	bne.n	8006942 <xQueueReceive+0x6e>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <xQueueReceive+0x72>
 8006942:	2301      	movs	r3, #1
 8006944:	e000      	b.n	8006948 <xQueueReceive+0x74>
 8006946:	2300      	movs	r3, #0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10a      	bne.n	8006962 <xQueueReceive+0x8e>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	61bb      	str	r3, [r7, #24]
}
 800695e:	bf00      	nop
 8006960:	e7fe      	b.n	8006960 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006962:	f001 ffaf 	bl	80088c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01f      	beq.n	80069b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006972:	68b9      	ldr	r1, [r7, #8]
 8006974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006976:	f000 fa1b 	bl	8006db0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	1e5a      	subs	r2, r3, #1
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00f      	beq.n	80069aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	3310      	adds	r3, #16
 800698e:	4618      	mov	r0, r3
 8006990:	f000 ff72 	bl	8007878 <xTaskRemoveFromEventList>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d007      	beq.n	80069aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800699a:	4b3d      	ldr	r3, [pc, #244]	; (8006a90 <xQueueReceive+0x1bc>)
 800699c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80069aa:	f001 ffbb 	bl	8008924 <vPortExitCritical>
				return pdPASS;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e069      	b.n	8006a86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d103      	bne.n	80069c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069b8:	f001 ffb4 	bl	8008924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80069bc:	2300      	movs	r3, #0
 80069be:	e062      	b.n	8006a86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d106      	bne.n	80069d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069c6:	f107 0310 	add.w	r3, r7, #16
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 ffb8 	bl	8007940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069d0:	2301      	movs	r3, #1
 80069d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069d4:	f001 ffa6 	bl	8008924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069d8:	f000 fd2a 	bl	8007430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069dc:	f001 ff72 	bl	80088c4 <vPortEnterCritical>
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069e6:	b25b      	sxtb	r3, r3
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ec:	d103      	bne.n	80069f6 <xQueueReceive+0x122>
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069fc:	b25b      	sxtb	r3, r3
 80069fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a02:	d103      	bne.n	8006a0c <xQueueReceive+0x138>
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a0c:	f001 ff8a 	bl	8008924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a10:	1d3a      	adds	r2, r7, #4
 8006a12:	f107 0310 	add.w	r3, r7, #16
 8006a16:	4611      	mov	r1, r2
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 ffa7 	bl	800796c <xTaskCheckForTimeOut>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d123      	bne.n	8006a6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a26:	f000 fa3b 	bl	8006ea0 <prvIsQueueEmpty>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d017      	beq.n	8006a60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	3324      	adds	r3, #36	; 0x24
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	4611      	mov	r1, r2
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fecd 	bl	80077d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a40:	f000 f9dc 	bl	8006dfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a44:	f000 fd02 	bl	800744c <xTaskResumeAll>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d189      	bne.n	8006962 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006a4e:	4b10      	ldr	r3, [pc, #64]	; (8006a90 <xQueueReceive+0x1bc>)
 8006a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	e780      	b.n	8006962 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a62:	f000 f9cb 	bl	8006dfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a66:	f000 fcf1 	bl	800744c <xTaskResumeAll>
 8006a6a:	e77a      	b.n	8006962 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a6e:	f000 f9c5 	bl	8006dfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a72:	f000 fceb 	bl	800744c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a78:	f000 fa12 	bl	8006ea0 <prvIsQueueEmpty>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f43f af6f 	beq.w	8006962 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3730      	adds	r7, #48	; 0x30
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	e000ed04 	.word	0xe000ed04

08006a94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08e      	sub	sp, #56	; 0x38
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10a      	bne.n	8006ac6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	623b      	str	r3, [r7, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	61fb      	str	r3, [r7, #28]
}
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ae4:	f001 f896 	bl	8007c14 <xTaskGetSchedulerState>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d102      	bne.n	8006af4 <xQueueSemaphoreTake+0x60>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <xQueueSemaphoreTake+0x64>
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <xQueueSemaphoreTake+0x66>
 8006af8:	2300      	movs	r3, #0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10a      	bne.n	8006b14 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	61bb      	str	r3, [r7, #24]
}
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b14:	f001 fed6 	bl	80088c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d024      	beq.n	8006b6e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	1e5a      	subs	r2, r3, #1
 8006b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d104      	bne.n	8006b3e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006b34:	f001 f9e4 	bl	8007f00 <pvTaskIncrementMutexHeldCount>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00f      	beq.n	8006b66 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	3310      	adds	r3, #16
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fe94 	bl	8007878 <xTaskRemoveFromEventList>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d007      	beq.n	8006b66 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b56:	4b54      	ldr	r3, [pc, #336]	; (8006ca8 <xQueueSemaphoreTake+0x214>)
 8006b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b66:	f001 fedd 	bl	8008924 <vPortExitCritical>
				return pdPASS;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e097      	b.n	8006c9e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d111      	bne.n	8006b98 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	617b      	str	r3, [r7, #20]
}
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006b90:	f001 fec8 	bl	8008924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b94:	2300      	movs	r3, #0
 8006b96:	e082      	b.n	8006c9e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b9e:	f107 030c 	add.w	r3, r7, #12
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fecc 	bl	8007940 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bac:	f001 feba 	bl	8008924 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bb0:	f000 fc3e 	bl	8007430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bb4:	f001 fe86 	bl	80088c4 <vPortEnterCritical>
 8006bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bbe:	b25b      	sxtb	r3, r3
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc4:	d103      	bne.n	8006bce <xQueueSemaphoreTake+0x13a>
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bd4:	b25b      	sxtb	r3, r3
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bda:	d103      	bne.n	8006be4 <xQueueSemaphoreTake+0x150>
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006be4:	f001 fe9e 	bl	8008924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006be8:	463a      	mov	r2, r7
 8006bea:	f107 030c 	add.w	r3, r7, #12
 8006bee:	4611      	mov	r1, r2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 febb 	bl	800796c <xTaskCheckForTimeOut>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d132      	bne.n	8006c62 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bfe:	f000 f94f 	bl	8006ea0 <prvIsQueueEmpty>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d026      	beq.n	8006c56 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d109      	bne.n	8006c24 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006c10:	f001 fe58 	bl	80088c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f001 f819 	bl	8007c50 <xTaskPriorityInherit>
 8006c1e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006c20:	f001 fe80 	bl	8008924 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	3324      	adds	r3, #36	; 0x24
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fdd3 	bl	80077d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c34:	f000 f8e2 	bl	8006dfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c38:	f000 fc08 	bl	800744c <xTaskResumeAll>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f47f af68 	bne.w	8006b14 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006c44:	4b18      	ldr	r3, [pc, #96]	; (8006ca8 <xQueueSemaphoreTake+0x214>)
 8006c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	e75e      	b.n	8006b14 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006c56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c58:	f000 f8d0 	bl	8006dfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c5c:	f000 fbf6 	bl	800744c <xTaskResumeAll>
 8006c60:	e758      	b.n	8006b14 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006c62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c64:	f000 f8ca 	bl	8006dfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c68:	f000 fbf0 	bl	800744c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c6e:	f000 f917 	bl	8006ea0 <prvIsQueueEmpty>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f43f af4d 	beq.w	8006b14 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00d      	beq.n	8006c9c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006c80:	f001 fe20 	bl	80088c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006c84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c86:	f000 f811 	bl	8006cac <prvGetDisinheritPriorityAfterTimeout>
 8006c8a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c92:	4618      	mov	r0, r3
 8006c94:	f001 f8b2 	bl	8007dfc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006c98:	f001 fe44 	bl	8008924 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3738      	adds	r7, #56	; 0x38
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	e000ed04 	.word	0xe000ed04

08006cac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d006      	beq.n	8006cca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	e001      	b.n	8006cce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006cce:	68fb      	ldr	r3, [r7, #12]
	}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10d      	bne.n	8006d16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d14d      	bne.n	8006d9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f001 f80a 	bl	8007d20 <xTaskPriorityDisinherit>
 8006d0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	609a      	str	r2, [r3, #8]
 8006d14:	e043      	b.n	8006d9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d119      	bne.n	8006d50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6858      	ldr	r0, [r3, #4]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	461a      	mov	r2, r3
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	f002 f92c 	bl	8008f84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d34:	441a      	add	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d32b      	bcc.n	8006d9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	605a      	str	r2, [r3, #4]
 8006d4e:	e026      	b.n	8006d9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	68d8      	ldr	r0, [r3, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	461a      	mov	r2, r3
 8006d5a:	68b9      	ldr	r1, [r7, #8]
 8006d5c:	f002 f912 	bl	8008f84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	425b      	negs	r3, r3
 8006d6a:	441a      	add	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d207      	bcs.n	8006d8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	425b      	negs	r3, r3
 8006d86:	441a      	add	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d105      	bne.n	8006d9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006da6:	697b      	ldr	r3, [r7, #20]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d018      	beq.n	8006df4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	441a      	add	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d303      	bcc.n	8006de4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68d9      	ldr	r1, [r3, #12]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dec:	461a      	mov	r2, r3
 8006dee:	6838      	ldr	r0, [r7, #0]
 8006df0:	f002 f8c8 	bl	8008f84 <memcpy>
	}
}
 8006df4:	bf00      	nop
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e04:	f001 fd5e 	bl	80088c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e10:	e011      	b.n	8006e36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d012      	beq.n	8006e40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3324      	adds	r3, #36	; 0x24
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 fd2a 	bl	8007878 <xTaskRemoveFromEventList>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e2a:	f000 fe01 	bl	8007a30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	dce9      	bgt.n	8006e12 <prvUnlockQueue+0x16>
 8006e3e:	e000      	b.n	8006e42 <prvUnlockQueue+0x46>
					break;
 8006e40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	22ff      	movs	r2, #255	; 0xff
 8006e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e4a:	f001 fd6b 	bl	8008924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e4e:	f001 fd39 	bl	80088c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e5a:	e011      	b.n	8006e80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d012      	beq.n	8006e8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3310      	adds	r3, #16
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 fd05 	bl	8007878 <xTaskRemoveFromEventList>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e74:	f000 fddc 	bl	8007a30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	dce9      	bgt.n	8006e5c <prvUnlockQueue+0x60>
 8006e88:	e000      	b.n	8006e8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	22ff      	movs	r2, #255	; 0xff
 8006e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e94:	f001 fd46 	bl	8008924 <vPortExitCritical>
}
 8006e98:	bf00      	nop
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ea8:	f001 fd0c 	bl	80088c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d102      	bne.n	8006eba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	e001      	b.n	8006ebe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ebe:	f001 fd31 	bl	8008924 <vPortExitCritical>

	return xReturn;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ed4:	f001 fcf6 	bl	80088c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d102      	bne.n	8006eea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	e001      	b.n	8006eee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006eee:	f001 fd19 	bl	8008924 <vPortExitCritical>

	return xReturn;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	e014      	b.n	8006f36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f0c:	4a0f      	ldr	r2, [pc, #60]	; (8006f4c <vQueueAddToRegistry+0x50>)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10b      	bne.n	8006f30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f18:	490c      	ldr	r1, [pc, #48]	; (8006f4c <vQueueAddToRegistry+0x50>)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f22:	4a0a      	ldr	r2, [pc, #40]	; (8006f4c <vQueueAddToRegistry+0x50>)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	4413      	add	r3, r2
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f2e:	e006      	b.n	8006f3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3301      	adds	r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2b07      	cmp	r3, #7
 8006f3a:	d9e7      	bls.n	8006f0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	200010ac 	.word	0x200010ac

08006f50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f60:	f001 fcb0 	bl	80088c4 <vPortEnterCritical>
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f6a:	b25b      	sxtb	r3, r3
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f70:	d103      	bne.n	8006f7a <vQueueWaitForMessageRestricted+0x2a>
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f80:	b25b      	sxtb	r3, r3
 8006f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f86:	d103      	bne.n	8006f90 <vQueueWaitForMessageRestricted+0x40>
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f90:	f001 fcc8 	bl	8008924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d106      	bne.n	8006faa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	3324      	adds	r3, #36	; 0x24
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 fc3b 	bl	8007820 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006faa:	6978      	ldr	r0, [r7, #20]
 8006fac:	f7ff ff26 	bl	8006dfc <prvUnlockQueue>
	}
 8006fb0:	bf00      	nop
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08e      	sub	sp, #56	; 0x38
 8006fbc:	af04      	add	r7, sp, #16
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10a      	bne.n	8006fe2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	623b      	str	r3, [r7, #32]
}
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10a      	bne.n	8006ffe <xTaskCreateStatic+0x46>
	__asm volatile
 8006fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fec:	f383 8811 	msr	BASEPRI, r3
 8006ff0:	f3bf 8f6f 	isb	sy
 8006ff4:	f3bf 8f4f 	dsb	sy
 8006ff8:	61fb      	str	r3, [r7, #28]
}
 8006ffa:	bf00      	nop
 8006ffc:	e7fe      	b.n	8006ffc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ffe:	235c      	movs	r3, #92	; 0x5c
 8007000:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	2b5c      	cmp	r3, #92	; 0x5c
 8007006:	d00a      	beq.n	800701e <xTaskCreateStatic+0x66>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	61bb      	str	r3, [r7, #24]
}
 800701a:	bf00      	nop
 800701c:	e7fe      	b.n	800701c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800701e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01e      	beq.n	8007064 <xTaskCreateStatic+0xac>
 8007026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01b      	beq.n	8007064 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007034:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	2202      	movs	r2, #2
 800703a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800703e:	2300      	movs	r3, #0
 8007040:	9303      	str	r3, [sp, #12]
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	9302      	str	r3, [sp, #8]
 8007046:	f107 0314 	add.w	r3, r7, #20
 800704a:	9301      	str	r3, [sp, #4]
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	68b9      	ldr	r1, [r7, #8]
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 f850 	bl	80070fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800705c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800705e:	f000 f8dd 	bl	800721c <prvAddNewTaskToReadyList>
 8007062:	e001      	b.n	8007068 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007064:	2300      	movs	r3, #0
 8007066:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007068:	697b      	ldr	r3, [r7, #20]
	}
 800706a:	4618      	mov	r0, r3
 800706c:	3728      	adds	r7, #40	; 0x28
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007072:	b580      	push	{r7, lr}
 8007074:	b08c      	sub	sp, #48	; 0x30
 8007076:	af04      	add	r7, sp, #16
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	60b9      	str	r1, [r7, #8]
 800707c:	603b      	str	r3, [r7, #0]
 800707e:	4613      	mov	r3, r2
 8007080:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4618      	mov	r0, r3
 8007088:	f001 fd3e 	bl	8008b08 <pvPortMalloc>
 800708c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00e      	beq.n	80070b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007094:	205c      	movs	r0, #92	; 0x5c
 8007096:	f001 fd37 	bl	8008b08 <pvPortMalloc>
 800709a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	631a      	str	r2, [r3, #48]	; 0x30
 80070a8:	e005      	b.n	80070b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070aa:	6978      	ldr	r0, [r7, #20]
 80070ac:	f001 fdf8 	bl	8008ca0 <vPortFree>
 80070b0:	e001      	b.n	80070b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d017      	beq.n	80070ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070c4:	88fa      	ldrh	r2, [r7, #6]
 80070c6:	2300      	movs	r3, #0
 80070c8:	9303      	str	r3, [sp, #12]
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	9302      	str	r3, [sp, #8]
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	9301      	str	r3, [sp, #4]
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68b9      	ldr	r1, [r7, #8]
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 f80e 	bl	80070fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070e0:	69f8      	ldr	r0, [r7, #28]
 80070e2:	f000 f89b 	bl	800721c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070e6:	2301      	movs	r3, #1
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	e002      	b.n	80070f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070f2:	69bb      	ldr	r3, [r7, #24]
	}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3720      	adds	r7, #32
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b088      	sub	sp, #32
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	461a      	mov	r2, r3
 8007114:	21a5      	movs	r1, #165	; 0xa5
 8007116:	f001 ff01 	bl	8008f1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007124:	3b01      	subs	r3, #1
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	f023 0307 	bic.w	r3, r3, #7
 8007132:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00a      	beq.n	8007154 <prvInitialiseNewTask+0x58>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	617b      	str	r3, [r7, #20]
}
 8007150:	bf00      	nop
 8007152:	e7fe      	b.n	8007152 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d01f      	beq.n	800719a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800715a:	2300      	movs	r3, #0
 800715c:	61fb      	str	r3, [r7, #28]
 800715e:	e012      	b.n	8007186 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	4413      	add	r3, r2
 8007166:	7819      	ldrb	r1, [r3, #0]
 8007168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	4413      	add	r3, r2
 800716e:	3334      	adds	r3, #52	; 0x34
 8007170:	460a      	mov	r2, r1
 8007172:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	4413      	add	r3, r2
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d006      	beq.n	800718e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	3301      	adds	r3, #1
 8007184:	61fb      	str	r3, [r7, #28]
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	2b0f      	cmp	r3, #15
 800718a:	d9e9      	bls.n	8007160 <prvInitialiseNewTask+0x64>
 800718c:	e000      	b.n	8007190 <prvInitialiseNewTask+0x94>
			{
				break;
 800718e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007198:	e003      	b.n	80071a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	2b37      	cmp	r3, #55	; 0x37
 80071a6:	d901      	bls.n	80071ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071a8:	2337      	movs	r3, #55	; 0x37
 80071aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	2200      	movs	r2, #0
 80071bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c0:	3304      	adds	r3, #4
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe ff64 	bl	8006090 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ca:	3318      	adds	r3, #24
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe ff5f 	bl	8006090 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	2200      	movs	r2, #0
 80071ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	68f9      	ldr	r1, [r7, #12]
 80071fa:	69b8      	ldr	r0, [r7, #24]
 80071fc:	f001 fa36 	bl	800866c <pxPortInitialiseStack>
 8007200:	4602      	mov	r2, r0
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800720c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007210:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007212:	bf00      	nop
 8007214:	3720      	adds	r7, #32
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
	...

0800721c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007224:	f001 fb4e 	bl	80088c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007228:	4b2d      	ldr	r3, [pc, #180]	; (80072e0 <prvAddNewTaskToReadyList+0xc4>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3301      	adds	r3, #1
 800722e:	4a2c      	ldr	r2, [pc, #176]	; (80072e0 <prvAddNewTaskToReadyList+0xc4>)
 8007230:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007232:	4b2c      	ldr	r3, [pc, #176]	; (80072e4 <prvAddNewTaskToReadyList+0xc8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d109      	bne.n	800724e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800723a:	4a2a      	ldr	r2, [pc, #168]	; (80072e4 <prvAddNewTaskToReadyList+0xc8>)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007240:	4b27      	ldr	r3, [pc, #156]	; (80072e0 <prvAddNewTaskToReadyList+0xc4>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d110      	bne.n	800726a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007248:	f000 fc16 	bl	8007a78 <prvInitialiseTaskLists>
 800724c:	e00d      	b.n	800726a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800724e:	4b26      	ldr	r3, [pc, #152]	; (80072e8 <prvAddNewTaskToReadyList+0xcc>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d109      	bne.n	800726a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007256:	4b23      	ldr	r3, [pc, #140]	; (80072e4 <prvAddNewTaskToReadyList+0xc8>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	429a      	cmp	r2, r3
 8007262:	d802      	bhi.n	800726a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007264:	4a1f      	ldr	r2, [pc, #124]	; (80072e4 <prvAddNewTaskToReadyList+0xc8>)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800726a:	4b20      	ldr	r3, [pc, #128]	; (80072ec <prvAddNewTaskToReadyList+0xd0>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3301      	adds	r3, #1
 8007270:	4a1e      	ldr	r2, [pc, #120]	; (80072ec <prvAddNewTaskToReadyList+0xd0>)
 8007272:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007274:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <prvAddNewTaskToReadyList+0xd0>)
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007280:	4b1b      	ldr	r3, [pc, #108]	; (80072f0 <prvAddNewTaskToReadyList+0xd4>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	429a      	cmp	r2, r3
 8007286:	d903      	bls.n	8007290 <prvAddNewTaskToReadyList+0x74>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728c:	4a18      	ldr	r2, [pc, #96]	; (80072f0 <prvAddNewTaskToReadyList+0xd4>)
 800728e:	6013      	str	r3, [r2, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007294:	4613      	mov	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4a15      	ldr	r2, [pc, #84]	; (80072f4 <prvAddNewTaskToReadyList+0xd8>)
 800729e:	441a      	add	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3304      	adds	r3, #4
 80072a4:	4619      	mov	r1, r3
 80072a6:	4610      	mov	r0, r2
 80072a8:	f7fe feff 	bl	80060aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072ac:	f001 fb3a 	bl	8008924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072b0:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <prvAddNewTaskToReadyList+0xcc>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00e      	beq.n	80072d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072b8:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <prvAddNewTaskToReadyList+0xc8>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d207      	bcs.n	80072d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072c6:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <prvAddNewTaskToReadyList+0xdc>)
 80072c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	200015c0 	.word	0x200015c0
 80072e4:	200010ec 	.word	0x200010ec
 80072e8:	200015cc 	.word	0x200015cc
 80072ec:	200015dc 	.word	0x200015dc
 80072f0:	200015c8 	.word	0x200015c8
 80072f4:	200010f0 	.word	0x200010f0
 80072f8:	e000ed04 	.word	0xe000ed04

080072fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007304:	2300      	movs	r3, #0
 8007306:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d017      	beq.n	800733e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800730e:	4b13      	ldr	r3, [pc, #76]	; (800735c <vTaskDelay+0x60>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <vTaskDelay+0x30>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	60bb      	str	r3, [r7, #8]
}
 8007328:	bf00      	nop
 800732a:	e7fe      	b.n	800732a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800732c:	f000 f880 	bl	8007430 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007330:	2100      	movs	r1, #0
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fdf8 	bl	8007f28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007338:	f000 f888 	bl	800744c <xTaskResumeAll>
 800733c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d107      	bne.n	8007354 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007344:	4b06      	ldr	r3, [pc, #24]	; (8007360 <vTaskDelay+0x64>)
 8007346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007354:	bf00      	nop
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	200015e8 	.word	0x200015e8
 8007360:	e000ed04 	.word	0xe000ed04

08007364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	; 0x28
 8007368:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800736a:	2300      	movs	r3, #0
 800736c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800736e:	2300      	movs	r3, #0
 8007370:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007372:	463a      	mov	r2, r7
 8007374:	1d39      	adds	r1, r7, #4
 8007376:	f107 0308 	add.w	r3, r7, #8
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe fe34 	bl	8005fe8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	9202      	str	r2, [sp, #8]
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	2300      	movs	r3, #0
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	2300      	movs	r3, #0
 8007390:	460a      	mov	r2, r1
 8007392:	4921      	ldr	r1, [pc, #132]	; (8007418 <vTaskStartScheduler+0xb4>)
 8007394:	4821      	ldr	r0, [pc, #132]	; (800741c <vTaskStartScheduler+0xb8>)
 8007396:	f7ff fe0f 	bl	8006fb8 <xTaskCreateStatic>
 800739a:	4603      	mov	r3, r0
 800739c:	4a20      	ldr	r2, [pc, #128]	; (8007420 <vTaskStartScheduler+0xbc>)
 800739e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073a0:	4b1f      	ldr	r3, [pc, #124]	; (8007420 <vTaskStartScheduler+0xbc>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073a8:	2301      	movs	r3, #1
 80073aa:	617b      	str	r3, [r7, #20]
 80073ac:	e001      	b.n	80073b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d102      	bne.n	80073be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073b8:	f000 fe0a 	bl	8007fd0 <xTimerCreateTimerTask>
 80073bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d116      	bne.n	80073f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	613b      	str	r3, [r7, #16]
}
 80073d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073d8:	4b12      	ldr	r3, [pc, #72]	; (8007424 <vTaskStartScheduler+0xc0>)
 80073da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073e0:	4b11      	ldr	r3, [pc, #68]	; (8007428 <vTaskStartScheduler+0xc4>)
 80073e2:	2201      	movs	r2, #1
 80073e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073e6:	4b11      	ldr	r3, [pc, #68]	; (800742c <vTaskStartScheduler+0xc8>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073ec:	f001 f9c8 	bl	8008780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073f0:	e00e      	b.n	8007410 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073f8:	d10a      	bne.n	8007410 <vTaskStartScheduler+0xac>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	60fb      	str	r3, [r7, #12]
}
 800740c:	bf00      	nop
 800740e:	e7fe      	b.n	800740e <vTaskStartScheduler+0xaa>
}
 8007410:	bf00      	nop
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	080098dc 	.word	0x080098dc
 800741c:	08007a49 	.word	0x08007a49
 8007420:	200015e4 	.word	0x200015e4
 8007424:	200015e0 	.word	0x200015e0
 8007428:	200015cc 	.word	0x200015cc
 800742c:	200015c4 	.word	0x200015c4

08007430 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007434:	4b04      	ldr	r3, [pc, #16]	; (8007448 <vTaskSuspendAll+0x18>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3301      	adds	r3, #1
 800743a:	4a03      	ldr	r2, [pc, #12]	; (8007448 <vTaskSuspendAll+0x18>)
 800743c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800743e:	bf00      	nop
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	200015e8 	.word	0x200015e8

0800744c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007456:	2300      	movs	r3, #0
 8007458:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800745a:	4b42      	ldr	r3, [pc, #264]	; (8007564 <xTaskResumeAll+0x118>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <xTaskResumeAll+0x2c>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	603b      	str	r3, [r7, #0]
}
 8007474:	bf00      	nop
 8007476:	e7fe      	b.n	8007476 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007478:	f001 fa24 	bl	80088c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800747c:	4b39      	ldr	r3, [pc, #228]	; (8007564 <xTaskResumeAll+0x118>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3b01      	subs	r3, #1
 8007482:	4a38      	ldr	r2, [pc, #224]	; (8007564 <xTaskResumeAll+0x118>)
 8007484:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007486:	4b37      	ldr	r3, [pc, #220]	; (8007564 <xTaskResumeAll+0x118>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d162      	bne.n	8007554 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800748e:	4b36      	ldr	r3, [pc, #216]	; (8007568 <xTaskResumeAll+0x11c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d05e      	beq.n	8007554 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007496:	e02f      	b.n	80074f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007498:	4b34      	ldr	r3, [pc, #208]	; (800756c <xTaskResumeAll+0x120>)
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	3318      	adds	r3, #24
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fe fe5d 	bl	8006164 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3304      	adds	r3, #4
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fe fe58 	bl	8006164 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b8:	4b2d      	ldr	r3, [pc, #180]	; (8007570 <xTaskResumeAll+0x124>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d903      	bls.n	80074c8 <xTaskResumeAll+0x7c>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	4a2a      	ldr	r2, [pc, #168]	; (8007570 <xTaskResumeAll+0x124>)
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4a27      	ldr	r2, [pc, #156]	; (8007574 <xTaskResumeAll+0x128>)
 80074d6:	441a      	add	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3304      	adds	r3, #4
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	f7fe fde3 	bl	80060aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e8:	4b23      	ldr	r3, [pc, #140]	; (8007578 <xTaskResumeAll+0x12c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d302      	bcc.n	80074f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80074f2:	4b22      	ldr	r3, [pc, #136]	; (800757c <xTaskResumeAll+0x130>)
 80074f4:	2201      	movs	r2, #1
 80074f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074f8:	4b1c      	ldr	r3, [pc, #112]	; (800756c <xTaskResumeAll+0x120>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1cb      	bne.n	8007498 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007506:	f000 fb55 	bl	8007bb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800750a:	4b1d      	ldr	r3, [pc, #116]	; (8007580 <xTaskResumeAll+0x134>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d010      	beq.n	8007538 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007516:	f000 f847 	bl	80075a8 <xTaskIncrementTick>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007520:	4b16      	ldr	r3, [pc, #88]	; (800757c <xTaskResumeAll+0x130>)
 8007522:	2201      	movs	r2, #1
 8007524:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3b01      	subs	r3, #1
 800752a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1f1      	bne.n	8007516 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007532:	4b13      	ldr	r3, [pc, #76]	; (8007580 <xTaskResumeAll+0x134>)
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007538:	4b10      	ldr	r3, [pc, #64]	; (800757c <xTaskResumeAll+0x130>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d009      	beq.n	8007554 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007540:	2301      	movs	r3, #1
 8007542:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007544:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <xTaskResumeAll+0x138>)
 8007546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007554:	f001 f9e6 	bl	8008924 <vPortExitCritical>

	return xAlreadyYielded;
 8007558:	68bb      	ldr	r3, [r7, #8]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	200015e8 	.word	0x200015e8
 8007568:	200015c0 	.word	0x200015c0
 800756c:	20001580 	.word	0x20001580
 8007570:	200015c8 	.word	0x200015c8
 8007574:	200010f0 	.word	0x200010f0
 8007578:	200010ec 	.word	0x200010ec
 800757c:	200015d4 	.word	0x200015d4
 8007580:	200015d0 	.word	0x200015d0
 8007584:	e000ed04 	.word	0xe000ed04

08007588 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800758e:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <xTaskGetTickCount+0x1c>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007594:	687b      	ldr	r3, [r7, #4]
}
 8007596:	4618      	mov	r0, r3
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	200015c4 	.word	0x200015c4

080075a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075ae:	2300      	movs	r3, #0
 80075b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075b2:	4b4f      	ldr	r3, [pc, #316]	; (80076f0 <xTaskIncrementTick+0x148>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f040 808f 	bne.w	80076da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075bc:	4b4d      	ldr	r3, [pc, #308]	; (80076f4 <xTaskIncrementTick+0x14c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3301      	adds	r3, #1
 80075c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075c4:	4a4b      	ldr	r2, [pc, #300]	; (80076f4 <xTaskIncrementTick+0x14c>)
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d120      	bne.n	8007612 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80075d0:	4b49      	ldr	r3, [pc, #292]	; (80076f8 <xTaskIncrementTick+0x150>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80075da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	603b      	str	r3, [r7, #0]
}
 80075ec:	bf00      	nop
 80075ee:	e7fe      	b.n	80075ee <xTaskIncrementTick+0x46>
 80075f0:	4b41      	ldr	r3, [pc, #260]	; (80076f8 <xTaskIncrementTick+0x150>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60fb      	str	r3, [r7, #12]
 80075f6:	4b41      	ldr	r3, [pc, #260]	; (80076fc <xTaskIncrementTick+0x154>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a3f      	ldr	r2, [pc, #252]	; (80076f8 <xTaskIncrementTick+0x150>)
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	4a3f      	ldr	r2, [pc, #252]	; (80076fc <xTaskIncrementTick+0x154>)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6013      	str	r3, [r2, #0]
 8007604:	4b3e      	ldr	r3, [pc, #248]	; (8007700 <xTaskIncrementTick+0x158>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3301      	adds	r3, #1
 800760a:	4a3d      	ldr	r2, [pc, #244]	; (8007700 <xTaskIncrementTick+0x158>)
 800760c:	6013      	str	r3, [r2, #0]
 800760e:	f000 fad1 	bl	8007bb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007612:	4b3c      	ldr	r3, [pc, #240]	; (8007704 <xTaskIncrementTick+0x15c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	429a      	cmp	r2, r3
 800761a:	d349      	bcc.n	80076b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800761c:	4b36      	ldr	r3, [pc, #216]	; (80076f8 <xTaskIncrementTick+0x150>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d104      	bne.n	8007630 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007626:	4b37      	ldr	r3, [pc, #220]	; (8007704 <xTaskIncrementTick+0x15c>)
 8007628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800762c:	601a      	str	r2, [r3, #0]
					break;
 800762e:	e03f      	b.n	80076b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007630:	4b31      	ldr	r3, [pc, #196]	; (80076f8 <xTaskIncrementTick+0x150>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	d203      	bcs.n	8007650 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007648:	4a2e      	ldr	r2, [pc, #184]	; (8007704 <xTaskIncrementTick+0x15c>)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800764e:	e02f      	b.n	80076b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	3304      	adds	r3, #4
 8007654:	4618      	mov	r0, r3
 8007656:	f7fe fd85 	bl	8006164 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	3318      	adds	r3, #24
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe fd7c 	bl	8006164 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007670:	4b25      	ldr	r3, [pc, #148]	; (8007708 <xTaskIncrementTick+0x160>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	429a      	cmp	r2, r3
 8007676:	d903      	bls.n	8007680 <xTaskIncrementTick+0xd8>
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	4a22      	ldr	r2, [pc, #136]	; (8007708 <xTaskIncrementTick+0x160>)
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007684:	4613      	mov	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4a1f      	ldr	r2, [pc, #124]	; (800770c <xTaskIncrementTick+0x164>)
 800768e:	441a      	add	r2, r3
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	3304      	adds	r3, #4
 8007694:	4619      	mov	r1, r3
 8007696:	4610      	mov	r0, r2
 8007698:	f7fe fd07 	bl	80060aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a0:	4b1b      	ldr	r3, [pc, #108]	; (8007710 <xTaskIncrementTick+0x168>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d3b8      	bcc.n	800761c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80076aa:	2301      	movs	r3, #1
 80076ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ae:	e7b5      	b.n	800761c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076b0:	4b17      	ldr	r3, [pc, #92]	; (8007710 <xTaskIncrementTick+0x168>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b6:	4915      	ldr	r1, [pc, #84]	; (800770c <xTaskIncrementTick+0x164>)
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	440b      	add	r3, r1
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d901      	bls.n	80076cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80076c8:	2301      	movs	r3, #1
 80076ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80076cc:	4b11      	ldr	r3, [pc, #68]	; (8007714 <xTaskIncrementTick+0x16c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d007      	beq.n	80076e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80076d4:	2301      	movs	r3, #1
 80076d6:	617b      	str	r3, [r7, #20]
 80076d8:	e004      	b.n	80076e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80076da:	4b0f      	ldr	r3, [pc, #60]	; (8007718 <xTaskIncrementTick+0x170>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3301      	adds	r3, #1
 80076e0:	4a0d      	ldr	r2, [pc, #52]	; (8007718 <xTaskIncrementTick+0x170>)
 80076e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80076e4:	697b      	ldr	r3, [r7, #20]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	200015e8 	.word	0x200015e8
 80076f4:	200015c4 	.word	0x200015c4
 80076f8:	20001578 	.word	0x20001578
 80076fc:	2000157c 	.word	0x2000157c
 8007700:	200015d8 	.word	0x200015d8
 8007704:	200015e0 	.word	0x200015e0
 8007708:	200015c8 	.word	0x200015c8
 800770c:	200010f0 	.word	0x200010f0
 8007710:	200010ec 	.word	0x200010ec
 8007714:	200015d4 	.word	0x200015d4
 8007718:	200015d0 	.word	0x200015d0

0800771c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007722:	4b28      	ldr	r3, [pc, #160]	; (80077c4 <vTaskSwitchContext+0xa8>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800772a:	4b27      	ldr	r3, [pc, #156]	; (80077c8 <vTaskSwitchContext+0xac>)
 800772c:	2201      	movs	r2, #1
 800772e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007730:	e041      	b.n	80077b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007732:	4b25      	ldr	r3, [pc, #148]	; (80077c8 <vTaskSwitchContext+0xac>)
 8007734:	2200      	movs	r2, #0
 8007736:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007738:	4b24      	ldr	r3, [pc, #144]	; (80077cc <vTaskSwitchContext+0xb0>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60fb      	str	r3, [r7, #12]
 800773e:	e010      	b.n	8007762 <vTaskSwitchContext+0x46>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <vTaskSwitchContext+0x40>
	__asm volatile
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	607b      	str	r3, [r7, #4]
}
 8007758:	bf00      	nop
 800775a:	e7fe      	b.n	800775a <vTaskSwitchContext+0x3e>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3b01      	subs	r3, #1
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	491b      	ldr	r1, [pc, #108]	; (80077d0 <vTaskSwitchContext+0xb4>)
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	4613      	mov	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	440b      	add	r3, r1
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0e4      	beq.n	8007740 <vTaskSwitchContext+0x24>
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4a13      	ldr	r2, [pc, #76]	; (80077d0 <vTaskSwitchContext+0xb4>)
 8007782:	4413      	add	r3, r2
 8007784:	60bb      	str	r3, [r7, #8]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	605a      	str	r2, [r3, #4]
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	3308      	adds	r3, #8
 8007798:	429a      	cmp	r2, r3
 800779a:	d104      	bne.n	80077a6 <vTaskSwitchContext+0x8a>
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	605a      	str	r2, [r3, #4]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	4a09      	ldr	r2, [pc, #36]	; (80077d4 <vTaskSwitchContext+0xb8>)
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	4a06      	ldr	r2, [pc, #24]	; (80077cc <vTaskSwitchContext+0xb0>)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6013      	str	r3, [r2, #0]
}
 80077b6:	bf00      	nop
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	200015e8 	.word	0x200015e8
 80077c8:	200015d4 	.word	0x200015d4
 80077cc:	200015c8 	.word	0x200015c8
 80077d0:	200010f0 	.word	0x200010f0
 80077d4:	200010ec 	.word	0x200010ec

080077d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	60fb      	str	r3, [r7, #12]
}
 80077fa:	bf00      	nop
 80077fc:	e7fe      	b.n	80077fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077fe:	4b07      	ldr	r3, [pc, #28]	; (800781c <vTaskPlaceOnEventList+0x44>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3318      	adds	r3, #24
 8007804:	4619      	mov	r1, r3
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7fe fc73 	bl	80060f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800780c:	2101      	movs	r1, #1
 800780e:	6838      	ldr	r0, [r7, #0]
 8007810:	f000 fb8a 	bl	8007f28 <prvAddCurrentTaskToDelayedList>
}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	200010ec 	.word	0x200010ec

08007820 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10a      	bne.n	8007848 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	617b      	str	r3, [r7, #20]
}
 8007844:	bf00      	nop
 8007846:	e7fe      	b.n	8007846 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007848:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <vTaskPlaceOnEventListRestricted+0x54>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3318      	adds	r3, #24
 800784e:	4619      	mov	r1, r3
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7fe fc2a 	bl	80060aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800785c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007860:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007862:	6879      	ldr	r1, [r7, #4]
 8007864:	68b8      	ldr	r0, [r7, #8]
 8007866:	f000 fb5f 	bl	8007f28 <prvAddCurrentTaskToDelayedList>
	}
 800786a:	bf00      	nop
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	200010ec 	.word	0x200010ec

08007878 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10a      	bne.n	80078a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	60fb      	str	r3, [r7, #12]
}
 80078a0:	bf00      	nop
 80078a2:	e7fe      	b.n	80078a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	3318      	adds	r3, #24
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fe fc5b 	bl	8006164 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ae:	4b1e      	ldr	r3, [pc, #120]	; (8007928 <xTaskRemoveFromEventList+0xb0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d11d      	bne.n	80078f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	3304      	adds	r3, #4
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe fc52 	bl	8006164 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c4:	4b19      	ldr	r3, [pc, #100]	; (800792c <xTaskRemoveFromEventList+0xb4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d903      	bls.n	80078d4 <xTaskRemoveFromEventList+0x5c>
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d0:	4a16      	ldr	r2, [pc, #88]	; (800792c <xTaskRemoveFromEventList+0xb4>)
 80078d2:	6013      	str	r3, [r2, #0]
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d8:	4613      	mov	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4413      	add	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4a13      	ldr	r2, [pc, #76]	; (8007930 <xTaskRemoveFromEventList+0xb8>)
 80078e2:	441a      	add	r2, r3
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	3304      	adds	r3, #4
 80078e8:	4619      	mov	r1, r3
 80078ea:	4610      	mov	r0, r2
 80078ec:	f7fe fbdd 	bl	80060aa <vListInsertEnd>
 80078f0:	e005      	b.n	80078fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	3318      	adds	r3, #24
 80078f6:	4619      	mov	r1, r3
 80078f8:	480e      	ldr	r0, [pc, #56]	; (8007934 <xTaskRemoveFromEventList+0xbc>)
 80078fa:	f7fe fbd6 	bl	80060aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007902:	4b0d      	ldr	r3, [pc, #52]	; (8007938 <xTaskRemoveFromEventList+0xc0>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007908:	429a      	cmp	r2, r3
 800790a:	d905      	bls.n	8007918 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800790c:	2301      	movs	r3, #1
 800790e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007910:	4b0a      	ldr	r3, [pc, #40]	; (800793c <xTaskRemoveFromEventList+0xc4>)
 8007912:	2201      	movs	r2, #1
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	e001      	b.n	800791c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007918:	2300      	movs	r3, #0
 800791a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800791c:	697b      	ldr	r3, [r7, #20]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	200015e8 	.word	0x200015e8
 800792c:	200015c8 	.word	0x200015c8
 8007930:	200010f0 	.word	0x200010f0
 8007934:	20001580 	.word	0x20001580
 8007938:	200010ec 	.word	0x200010ec
 800793c:	200015d4 	.word	0x200015d4

08007940 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007948:	4b06      	ldr	r3, [pc, #24]	; (8007964 <vTaskInternalSetTimeOutState+0x24>)
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007950:	4b05      	ldr	r3, [pc, #20]	; (8007968 <vTaskInternalSetTimeOutState+0x28>)
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	605a      	str	r2, [r3, #4]
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	200015d8 	.word	0x200015d8
 8007968:	200015c4 	.word	0x200015c4

0800796c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b088      	sub	sp, #32
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	613b      	str	r3, [r7, #16]
}
 800798e:	bf00      	nop
 8007990:	e7fe      	b.n	8007990 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10a      	bne.n	80079ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	60fb      	str	r3, [r7, #12]
}
 80079aa:	bf00      	nop
 80079ac:	e7fe      	b.n	80079ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80079ae:	f000 ff89 	bl	80088c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079b2:	4b1d      	ldr	r3, [pc, #116]	; (8007a28 <xTaskCheckForTimeOut+0xbc>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079ca:	d102      	bne.n	80079d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	61fb      	str	r3, [r7, #28]
 80079d0:	e023      	b.n	8007a1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	4b15      	ldr	r3, [pc, #84]	; (8007a2c <xTaskCheckForTimeOut+0xc0>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d007      	beq.n	80079ee <xTaskCheckForTimeOut+0x82>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d302      	bcc.n	80079ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079e8:	2301      	movs	r3, #1
 80079ea:	61fb      	str	r3, [r7, #28]
 80079ec:	e015      	b.n	8007a1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d20b      	bcs.n	8007a10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	1ad2      	subs	r2, r2, r3
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff ff9b 	bl	8007940 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	61fb      	str	r3, [r7, #28]
 8007a0e:	e004      	b.n	8007a1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2200      	movs	r2, #0
 8007a14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a16:	2301      	movs	r3, #1
 8007a18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a1a:	f000 ff83 	bl	8008924 <vPortExitCritical>

	return xReturn;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3720      	adds	r7, #32
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	200015c4 	.word	0x200015c4
 8007a2c:	200015d8 	.word	0x200015d8

08007a30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a34:	4b03      	ldr	r3, [pc, #12]	; (8007a44 <vTaskMissedYield+0x14>)
 8007a36:	2201      	movs	r2, #1
 8007a38:	601a      	str	r2, [r3, #0]
}
 8007a3a:	bf00      	nop
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	200015d4 	.word	0x200015d4

08007a48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a50:	f000 f852 	bl	8007af8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a54:	4b06      	ldr	r3, [pc, #24]	; (8007a70 <prvIdleTask+0x28>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d9f9      	bls.n	8007a50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a5c:	4b05      	ldr	r3, [pc, #20]	; (8007a74 <prvIdleTask+0x2c>)
 8007a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a6c:	e7f0      	b.n	8007a50 <prvIdleTask+0x8>
 8007a6e:	bf00      	nop
 8007a70:	200010f0 	.word	0x200010f0
 8007a74:	e000ed04 	.word	0xe000ed04

08007a78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a7e:	2300      	movs	r3, #0
 8007a80:	607b      	str	r3, [r7, #4]
 8007a82:	e00c      	b.n	8007a9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	4613      	mov	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4a12      	ldr	r2, [pc, #72]	; (8007ad8 <prvInitialiseTaskLists+0x60>)
 8007a90:	4413      	add	r3, r2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fe fadc 	bl	8006050 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	607b      	str	r3, [r7, #4]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b37      	cmp	r3, #55	; 0x37
 8007aa2:	d9ef      	bls.n	8007a84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007aa4:	480d      	ldr	r0, [pc, #52]	; (8007adc <prvInitialiseTaskLists+0x64>)
 8007aa6:	f7fe fad3 	bl	8006050 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007aaa:	480d      	ldr	r0, [pc, #52]	; (8007ae0 <prvInitialiseTaskLists+0x68>)
 8007aac:	f7fe fad0 	bl	8006050 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ab0:	480c      	ldr	r0, [pc, #48]	; (8007ae4 <prvInitialiseTaskLists+0x6c>)
 8007ab2:	f7fe facd 	bl	8006050 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ab6:	480c      	ldr	r0, [pc, #48]	; (8007ae8 <prvInitialiseTaskLists+0x70>)
 8007ab8:	f7fe faca 	bl	8006050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007abc:	480b      	ldr	r0, [pc, #44]	; (8007aec <prvInitialiseTaskLists+0x74>)
 8007abe:	f7fe fac7 	bl	8006050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ac2:	4b0b      	ldr	r3, [pc, #44]	; (8007af0 <prvInitialiseTaskLists+0x78>)
 8007ac4:	4a05      	ldr	r2, [pc, #20]	; (8007adc <prvInitialiseTaskLists+0x64>)
 8007ac6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ac8:	4b0a      	ldr	r3, [pc, #40]	; (8007af4 <prvInitialiseTaskLists+0x7c>)
 8007aca:	4a05      	ldr	r2, [pc, #20]	; (8007ae0 <prvInitialiseTaskLists+0x68>)
 8007acc:	601a      	str	r2, [r3, #0]
}
 8007ace:	bf00      	nop
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	200010f0 	.word	0x200010f0
 8007adc:	20001550 	.word	0x20001550
 8007ae0:	20001564 	.word	0x20001564
 8007ae4:	20001580 	.word	0x20001580
 8007ae8:	20001594 	.word	0x20001594
 8007aec:	200015ac 	.word	0x200015ac
 8007af0:	20001578 	.word	0x20001578
 8007af4:	2000157c 	.word	0x2000157c

08007af8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007afe:	e019      	b.n	8007b34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b00:	f000 fee0 	bl	80088c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b04:	4b10      	ldr	r3, [pc, #64]	; (8007b48 <prvCheckTasksWaitingTermination+0x50>)
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fe fb27 	bl	8006164 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b16:	4b0d      	ldr	r3, [pc, #52]	; (8007b4c <prvCheckTasksWaitingTermination+0x54>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	4a0b      	ldr	r2, [pc, #44]	; (8007b4c <prvCheckTasksWaitingTermination+0x54>)
 8007b1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <prvCheckTasksWaitingTermination+0x58>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3b01      	subs	r3, #1
 8007b26:	4a0a      	ldr	r2, [pc, #40]	; (8007b50 <prvCheckTasksWaitingTermination+0x58>)
 8007b28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b2a:	f000 fefb 	bl	8008924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f810 	bl	8007b54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b34:	4b06      	ldr	r3, [pc, #24]	; (8007b50 <prvCheckTasksWaitingTermination+0x58>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e1      	bne.n	8007b00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b3c:	bf00      	nop
 8007b3e:	bf00      	nop
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20001594 	.word	0x20001594
 8007b4c:	200015c0 	.word	0x200015c0
 8007b50:	200015a8 	.word	0x200015a8

08007b54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d108      	bne.n	8007b78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f001 f898 	bl	8008ca0 <vPortFree>
				vPortFree( pxTCB );
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 f895 	bl	8008ca0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b76:	e018      	b.n	8007baa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d103      	bne.n	8007b8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 f88c 	bl	8008ca0 <vPortFree>
	}
 8007b88:	e00f      	b.n	8007baa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d00a      	beq.n	8007baa <prvDeleteTCB+0x56>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	60fb      	str	r3, [r7, #12]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <prvDeleteTCB+0x54>
	}
 8007baa:	bf00      	nop
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bba:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <prvResetNextTaskUnblockTime+0x38>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d104      	bne.n	8007bce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bc4:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8007bc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bcc:	e008      	b.n	8007be0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bce:	4b07      	ldr	r3, [pc, #28]	; (8007bec <prvResetNextTaskUnblockTime+0x38>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	4a04      	ldr	r2, [pc, #16]	; (8007bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8007bde:	6013      	str	r3, [r2, #0]
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	20001578 	.word	0x20001578
 8007bf0:	200015e0 	.word	0x200015e0

08007bf4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007bfa:	4b05      	ldr	r3, [pc, #20]	; (8007c10 <xTaskGetCurrentTaskHandle+0x1c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007c00:	687b      	ldr	r3, [r7, #4]
	}
 8007c02:	4618      	mov	r0, r3
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	200010ec 	.word	0x200010ec

08007c14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c1a:	4b0b      	ldr	r3, [pc, #44]	; (8007c48 <xTaskGetSchedulerState+0x34>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d102      	bne.n	8007c28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c22:	2301      	movs	r3, #1
 8007c24:	607b      	str	r3, [r7, #4]
 8007c26:	e008      	b.n	8007c3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c28:	4b08      	ldr	r3, [pc, #32]	; (8007c4c <xTaskGetSchedulerState+0x38>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d102      	bne.n	8007c36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c30:	2302      	movs	r3, #2
 8007c32:	607b      	str	r3, [r7, #4]
 8007c34:	e001      	b.n	8007c3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c36:	2300      	movs	r3, #0
 8007c38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c3a:	687b      	ldr	r3, [r7, #4]
	}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	200015cc 	.word	0x200015cc
 8007c4c:	200015e8 	.word	0x200015e8

08007c50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d051      	beq.n	8007d0a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6a:	4b2a      	ldr	r3, [pc, #168]	; (8007d14 <xTaskPriorityInherit+0xc4>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d241      	bcs.n	8007cf8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	db06      	blt.n	8007c8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c7c:	4b25      	ldr	r3, [pc, #148]	; (8007d14 <xTaskPriorityInherit+0xc4>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	6959      	ldr	r1, [r3, #20]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c92:	4613      	mov	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4a1f      	ldr	r2, [pc, #124]	; (8007d18 <xTaskPriorityInherit+0xc8>)
 8007c9c:	4413      	add	r3, r2
 8007c9e:	4299      	cmp	r1, r3
 8007ca0:	d122      	bne.n	8007ce8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe fa5c 	bl	8006164 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cac:	4b19      	ldr	r3, [pc, #100]	; (8007d14 <xTaskPriorityInherit+0xc4>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cba:	4b18      	ldr	r3, [pc, #96]	; (8007d1c <xTaskPriorityInherit+0xcc>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d903      	bls.n	8007cca <xTaskPriorityInherit+0x7a>
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc6:	4a15      	ldr	r2, [pc, #84]	; (8007d1c <xTaskPriorityInherit+0xcc>)
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cce:	4613      	mov	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4a10      	ldr	r2, [pc, #64]	; (8007d18 <xTaskPriorityInherit+0xc8>)
 8007cd8:	441a      	add	r2, r3
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	f7fe f9e2 	bl	80060aa <vListInsertEnd>
 8007ce6:	e004      	b.n	8007cf2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ce8:	4b0a      	ldr	r3, [pc, #40]	; (8007d14 <xTaskPriorityInherit+0xc4>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	e008      	b.n	8007d0a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <xTaskPriorityInherit+0xc4>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d201      	bcs.n	8007d0a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d06:	2301      	movs	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
	}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	200010ec 	.word	0x200010ec
 8007d18:	200010f0 	.word	0x200010f0
 8007d1c:	200015c8 	.word	0x200015c8

08007d20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d056      	beq.n	8007de4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d36:	4b2e      	ldr	r3, [pc, #184]	; (8007df0 <xTaskPriorityDisinherit+0xd0>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d00a      	beq.n	8007d56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	60fb      	str	r3, [r7, #12]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	60bb      	str	r3, [r7, #8]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d78:	1e5a      	subs	r2, r3, #1
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d02c      	beq.n	8007de4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d128      	bne.n	8007de4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	3304      	adds	r3, #4
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe f9e4 	bl	8006164 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db4:	4b0f      	ldr	r3, [pc, #60]	; (8007df4 <xTaskPriorityDisinherit+0xd4>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d903      	bls.n	8007dc4 <xTaskPriorityDisinherit+0xa4>
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	4a0c      	ldr	r2, [pc, #48]	; (8007df4 <xTaskPriorityDisinherit+0xd4>)
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4a09      	ldr	r2, [pc, #36]	; (8007df8 <xTaskPriorityDisinherit+0xd8>)
 8007dd2:	441a      	add	r2, r3
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	f7fe f965 	bl	80060aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007de0:	2301      	movs	r3, #1
 8007de2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007de4:	697b      	ldr	r3, [r7, #20]
	}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	200010ec 	.word	0x200010ec
 8007df4:	200015c8 	.word	0x200015c8
 8007df8:	200010f0 	.word	0x200010f0

08007dfc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d06a      	beq.n	8007eea <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	60fb      	str	r3, [r7, #12]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d902      	bls.n	8007e42 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	61fb      	str	r3, [r7, #28]
 8007e40:	e002      	b.n	8007e48 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e46:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	69fa      	ldr	r2, [r7, #28]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d04b      	beq.n	8007eea <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d146      	bne.n	8007eea <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e5c:	4b25      	ldr	r3, [pc, #148]	; (8007ef4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d10a      	bne.n	8007e7c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	60bb      	str	r3, [r7, #8]
}
 8007e78:	bf00      	nop
 8007e7a:	e7fe      	b.n	8007e7a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e80:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	69fa      	ldr	r2, [r7, #28]
 8007e86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	db04      	blt.n	8007e9a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	6959      	ldr	r1, [r3, #20]
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4a13      	ldr	r2, [pc, #76]	; (8007ef8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007eaa:	4413      	add	r3, r2
 8007eac:	4299      	cmp	r1, r3
 8007eae:	d11c      	bne.n	8007eea <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fe f955 	bl	8006164 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ebe:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d903      	bls.n	8007ece <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	4a0c      	ldr	r2, [pc, #48]	; (8007efc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ecc:	6013      	str	r3, [r2, #0]
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4a07      	ldr	r2, [pc, #28]	; (8007ef8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007edc:	441a      	add	r2, r3
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	f7fe f8e0 	bl	80060aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007eea:	bf00      	nop
 8007eec:	3720      	adds	r7, #32
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	200010ec 	.word	0x200010ec
 8007ef8:	200010f0 	.word	0x200010f0
 8007efc:	200015c8 	.word	0x200015c8

08007f00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007f04:	4b07      	ldr	r3, [pc, #28]	; (8007f24 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007f0c:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f12:	3201      	adds	r2, #1
 8007f14:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007f16:	4b03      	ldr	r3, [pc, #12]	; (8007f24 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f18:	681b      	ldr	r3, [r3, #0]
	}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	200010ec 	.word	0x200010ec

08007f28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f32:	4b21      	ldr	r3, [pc, #132]	; (8007fb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f38:	4b20      	ldr	r3, [pc, #128]	; (8007fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe f910 	bl	8006164 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f4a:	d10a      	bne.n	8007f62 <prvAddCurrentTaskToDelayedList+0x3a>
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d007      	beq.n	8007f62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f52:	4b1a      	ldr	r3, [pc, #104]	; (8007fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4819      	ldr	r0, [pc, #100]	; (8007fc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f5c:	f7fe f8a5 	bl	80060aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f60:	e026      	b.n	8007fb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4413      	add	r3, r2
 8007f68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f6a:	4b14      	ldr	r3, [pc, #80]	; (8007fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d209      	bcs.n	8007f8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f7a:	4b12      	ldr	r3, [pc, #72]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	4b0f      	ldr	r3, [pc, #60]	; (8007fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3304      	adds	r3, #4
 8007f84:	4619      	mov	r1, r3
 8007f86:	4610      	mov	r0, r2
 8007f88:	f7fe f8b3 	bl	80060f2 <vListInsert>
}
 8007f8c:	e010      	b.n	8007fb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f8e:	4b0e      	ldr	r3, [pc, #56]	; (8007fc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	4b0a      	ldr	r3, [pc, #40]	; (8007fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	f7fe f8a9 	bl	80060f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007fa0:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d202      	bcs.n	8007fb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007faa:	4a08      	ldr	r2, [pc, #32]	; (8007fcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	6013      	str	r3, [r2, #0]
}
 8007fb0:	bf00      	nop
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	200015c4 	.word	0x200015c4
 8007fbc:	200010ec 	.word	0x200010ec
 8007fc0:	200015ac 	.word	0x200015ac
 8007fc4:	2000157c 	.word	0x2000157c
 8007fc8:	20001578 	.word	0x20001578
 8007fcc:	200015e0 	.word	0x200015e0

08007fd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08a      	sub	sp, #40	; 0x28
 8007fd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007fda:	f000 fb07 	bl	80085ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007fde:	4b1c      	ldr	r3, [pc, #112]	; (8008050 <xTimerCreateTimerTask+0x80>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d021      	beq.n	800802a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007fee:	1d3a      	adds	r2, r7, #4
 8007ff0:	f107 0108 	add.w	r1, r7, #8
 8007ff4:	f107 030c 	add.w	r3, r7, #12
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe f80f 	bl	800601c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	9202      	str	r2, [sp, #8]
 8008006:	9301      	str	r3, [sp, #4]
 8008008:	2302      	movs	r3, #2
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	2300      	movs	r3, #0
 800800e:	460a      	mov	r2, r1
 8008010:	4910      	ldr	r1, [pc, #64]	; (8008054 <xTimerCreateTimerTask+0x84>)
 8008012:	4811      	ldr	r0, [pc, #68]	; (8008058 <xTimerCreateTimerTask+0x88>)
 8008014:	f7fe ffd0 	bl	8006fb8 <xTaskCreateStatic>
 8008018:	4603      	mov	r3, r0
 800801a:	4a10      	ldr	r2, [pc, #64]	; (800805c <xTimerCreateTimerTask+0x8c>)
 800801c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800801e:	4b0f      	ldr	r3, [pc, #60]	; (800805c <xTimerCreateTimerTask+0x8c>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008026:	2301      	movs	r3, #1
 8008028:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10a      	bne.n	8008046 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	613b      	str	r3, [r7, #16]
}
 8008042:	bf00      	nop
 8008044:	e7fe      	b.n	8008044 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008046:	697b      	ldr	r3, [r7, #20]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	2000161c 	.word	0x2000161c
 8008054:	080098e4 	.word	0x080098e4
 8008058:	08008195 	.word	0x08008195
 800805c:	20001620 	.word	0x20001620

08008060 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08a      	sub	sp, #40	; 0x28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800806e:	2300      	movs	r3, #0
 8008070:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	623b      	str	r3, [r7, #32]
}
 800808a:	bf00      	nop
 800808c:	e7fe      	b.n	800808c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800808e:	4b1a      	ldr	r3, [pc, #104]	; (80080f8 <xTimerGenericCommand+0x98>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d02a      	beq.n	80080ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b05      	cmp	r3, #5
 80080a6:	dc18      	bgt.n	80080da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080a8:	f7ff fdb4 	bl	8007c14 <xTaskGetSchedulerState>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d109      	bne.n	80080c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80080b2:	4b11      	ldr	r3, [pc, #68]	; (80080f8 <xTimerGenericCommand+0x98>)
 80080b4:	6818      	ldr	r0, [r3, #0]
 80080b6:	f107 0110 	add.w	r1, r7, #16
 80080ba:	2300      	movs	r3, #0
 80080bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080be:	f7fe fa6f 	bl	80065a0 <xQueueGenericSend>
 80080c2:	6278      	str	r0, [r7, #36]	; 0x24
 80080c4:	e012      	b.n	80080ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080c6:	4b0c      	ldr	r3, [pc, #48]	; (80080f8 <xTimerGenericCommand+0x98>)
 80080c8:	6818      	ldr	r0, [r3, #0]
 80080ca:	f107 0110 	add.w	r1, r7, #16
 80080ce:	2300      	movs	r3, #0
 80080d0:	2200      	movs	r2, #0
 80080d2:	f7fe fa65 	bl	80065a0 <xQueueGenericSend>
 80080d6:	6278      	str	r0, [r7, #36]	; 0x24
 80080d8:	e008      	b.n	80080ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080da:	4b07      	ldr	r3, [pc, #28]	; (80080f8 <xTimerGenericCommand+0x98>)
 80080dc:	6818      	ldr	r0, [r3, #0]
 80080de:	f107 0110 	add.w	r1, r7, #16
 80080e2:	2300      	movs	r3, #0
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	f7fe fb59 	bl	800679c <xQueueGenericSendFromISR>
 80080ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3728      	adds	r7, #40	; 0x28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	2000161c 	.word	0x2000161c

080080fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af02      	add	r7, sp, #8
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008106:	4b22      	ldr	r3, [pc, #136]	; (8008190 <prvProcessExpiredTimer+0x94>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	3304      	adds	r3, #4
 8008114:	4618      	mov	r0, r3
 8008116:	f7fe f825 	bl	8006164 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b00      	cmp	r3, #0
 8008126:	d022      	beq.n	800816e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	699a      	ldr	r2, [r3, #24]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	18d1      	adds	r1, r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	6978      	ldr	r0, [r7, #20]
 8008136:	f000 f8d1 	bl	80082dc <prvInsertTimerInActiveList>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d01f      	beq.n	8008180 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008140:	2300      	movs	r3, #0
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	2300      	movs	r3, #0
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	2100      	movs	r1, #0
 800814a:	6978      	ldr	r0, [r7, #20]
 800814c:	f7ff ff88 	bl	8008060 <xTimerGenericCommand>
 8008150:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d113      	bne.n	8008180 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	60fb      	str	r3, [r7, #12]
}
 800816a:	bf00      	nop
 800816c:	e7fe      	b.n	800816c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008174:	f023 0301 	bic.w	r3, r3, #1
 8008178:	b2da      	uxtb	r2, r3
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	6a1b      	ldr	r3, [r3, #32]
 8008184:	6978      	ldr	r0, [r7, #20]
 8008186:	4798      	blx	r3
}
 8008188:	bf00      	nop
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20001614 	.word	0x20001614

08008194 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800819c:	f107 0308 	add.w	r3, r7, #8
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 f857 	bl	8008254 <prvGetNextExpireTime>
 80081a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	4619      	mov	r1, r3
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f000 f803 	bl	80081b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80081b2:	f000 f8d5 	bl	8008360 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081b6:	e7f1      	b.n	800819c <prvTimerTask+0x8>

080081b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80081c2:	f7ff f935 	bl	8007430 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081c6:	f107 0308 	add.w	r3, r7, #8
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 f866 	bl	800829c <prvSampleTimeNow>
 80081d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d130      	bne.n	800823a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10a      	bne.n	80081f4 <prvProcessTimerOrBlockTask+0x3c>
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d806      	bhi.n	80081f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80081e6:	f7ff f931 	bl	800744c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80081ea:	68f9      	ldr	r1, [r7, #12]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7ff ff85 	bl	80080fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081f2:	e024      	b.n	800823e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d008      	beq.n	800820c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081fa:	4b13      	ldr	r3, [pc, #76]	; (8008248 <prvProcessTimerOrBlockTask+0x90>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <prvProcessTimerOrBlockTask+0x50>
 8008204:	2301      	movs	r3, #1
 8008206:	e000      	b.n	800820a <prvProcessTimerOrBlockTask+0x52>
 8008208:	2300      	movs	r3, #0
 800820a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800820c:	4b0f      	ldr	r3, [pc, #60]	; (800824c <prvProcessTimerOrBlockTask+0x94>)
 800820e:	6818      	ldr	r0, [r3, #0]
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	4619      	mov	r1, r3
 800821a:	f7fe fe99 	bl	8006f50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800821e:	f7ff f915 	bl	800744c <xTaskResumeAll>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10a      	bne.n	800823e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008228:	4b09      	ldr	r3, [pc, #36]	; (8008250 <prvProcessTimerOrBlockTask+0x98>)
 800822a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	f3bf 8f6f 	isb	sy
}
 8008238:	e001      	b.n	800823e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800823a:	f7ff f907 	bl	800744c <xTaskResumeAll>
}
 800823e:	bf00      	nop
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	20001618 	.word	0x20001618
 800824c:	2000161c 	.word	0x2000161c
 8008250:	e000ed04 	.word	0xe000ed04

08008254 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800825c:	4b0e      	ldr	r3, [pc, #56]	; (8008298 <prvGetNextExpireTime+0x44>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <prvGetNextExpireTime+0x16>
 8008266:	2201      	movs	r2, #1
 8008268:	e000      	b.n	800826c <prvGetNextExpireTime+0x18>
 800826a:	2200      	movs	r2, #0
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d105      	bne.n	8008284 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008278:	4b07      	ldr	r3, [pc, #28]	; (8008298 <prvGetNextExpireTime+0x44>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	60fb      	str	r3, [r7, #12]
 8008282:	e001      	b.n	8008288 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008284:	2300      	movs	r3, #0
 8008286:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008288:	68fb      	ldr	r3, [r7, #12]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	20001614 	.word	0x20001614

0800829c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80082a4:	f7ff f970 	bl	8007588 <xTaskGetTickCount>
 80082a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80082aa:	4b0b      	ldr	r3, [pc, #44]	; (80082d8 <prvSampleTimeNow+0x3c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d205      	bcs.n	80082c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80082b4:	f000 f936 	bl	8008524 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	e002      	b.n	80082c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80082c6:	4a04      	ldr	r2, [pc, #16]	; (80082d8 <prvSampleTimeNow+0x3c>)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80082cc:	68fb      	ldr	r3, [r7, #12]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20001624 	.word	0x20001624

080082dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80082ea:	2300      	movs	r3, #0
 80082ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d812      	bhi.n	8008328 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	1ad2      	subs	r2, r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	429a      	cmp	r2, r3
 800830e:	d302      	bcc.n	8008316 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008310:	2301      	movs	r3, #1
 8008312:	617b      	str	r3, [r7, #20]
 8008314:	e01b      	b.n	800834e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008316:	4b10      	ldr	r3, [pc, #64]	; (8008358 <prvInsertTimerInActiveList+0x7c>)
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3304      	adds	r3, #4
 800831e:	4619      	mov	r1, r3
 8008320:	4610      	mov	r0, r2
 8008322:	f7fd fee6 	bl	80060f2 <vListInsert>
 8008326:	e012      	b.n	800834e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	429a      	cmp	r2, r3
 800832e:	d206      	bcs.n	800833e <prvInsertTimerInActiveList+0x62>
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d302      	bcc.n	800833e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008338:	2301      	movs	r3, #1
 800833a:	617b      	str	r3, [r7, #20]
 800833c:	e007      	b.n	800834e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800833e:	4b07      	ldr	r3, [pc, #28]	; (800835c <prvInsertTimerInActiveList+0x80>)
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3304      	adds	r3, #4
 8008346:	4619      	mov	r1, r3
 8008348:	4610      	mov	r0, r2
 800834a:	f7fd fed2 	bl	80060f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800834e:	697b      	ldr	r3, [r7, #20]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	20001618 	.word	0x20001618
 800835c:	20001614 	.word	0x20001614

08008360 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b08e      	sub	sp, #56	; 0x38
 8008364:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008366:	e0ca      	b.n	80084fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	da18      	bge.n	80083a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800836e:	1d3b      	adds	r3, r7, #4
 8008370:	3304      	adds	r3, #4
 8008372:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10a      	bne.n	8008390 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	61fb      	str	r3, [r7, #28]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008396:	6850      	ldr	r0, [r2, #4]
 8008398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800839a:	6892      	ldr	r2, [r2, #8]
 800839c:	4611      	mov	r1, r2
 800839e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f2c0 80ab 	blt.w	80084fe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80083ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d004      	beq.n	80083be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	3304      	adds	r3, #4
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fd fed3 	bl	8006164 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083be:	463b      	mov	r3, r7
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff ff6b 	bl	800829c <prvSampleTimeNow>
 80083c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b09      	cmp	r3, #9
 80083cc:	f200 8096 	bhi.w	80084fc <prvProcessReceivedCommands+0x19c>
 80083d0:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <prvProcessReceivedCommands+0x78>)
 80083d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d6:	bf00      	nop
 80083d8:	08008401 	.word	0x08008401
 80083dc:	08008401 	.word	0x08008401
 80083e0:	08008401 	.word	0x08008401
 80083e4:	08008475 	.word	0x08008475
 80083e8:	08008489 	.word	0x08008489
 80083ec:	080084d3 	.word	0x080084d3
 80083f0:	08008401 	.word	0x08008401
 80083f4:	08008401 	.word	0x08008401
 80083f8:	08008475 	.word	0x08008475
 80083fc:	08008489 	.word	0x08008489
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008406:	f043 0301 	orr.w	r3, r3, #1
 800840a:	b2da      	uxtb	r2, r3
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	18d1      	adds	r1, r2, r3
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008420:	f7ff ff5c 	bl	80082dc <prvInsertTimerInActiveList>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d069      	beq.n	80084fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008430:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008434:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008438:	f003 0304 	and.w	r3, r3, #4
 800843c:	2b00      	cmp	r3, #0
 800843e:	d05e      	beq.n	80084fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	441a      	add	r2, r3
 8008448:	2300      	movs	r3, #0
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	2300      	movs	r3, #0
 800844e:	2100      	movs	r1, #0
 8008450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008452:	f7ff fe05 	bl	8008060 <xTimerGenericCommand>
 8008456:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d14f      	bne.n	80084fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	61bb      	str	r3, [r7, #24]
}
 8008470:	bf00      	nop
 8008472:	e7fe      	b.n	8008472 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800847a:	f023 0301 	bic.w	r3, r3, #1
 800847e:	b2da      	uxtb	r2, r3
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008486:	e03a      	b.n	80084fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800848e:	f043 0301 	orr.w	r3, r3, #1
 8008492:	b2da      	uxtb	r2, r3
 8008494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80084a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10a      	bne.n	80084be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	617b      	str	r3, [r7, #20]
}
 80084ba:	bf00      	nop
 80084bc:	e7fe      	b.n	80084bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80084be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c0:	699a      	ldr	r2, [r3, #24]
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	18d1      	adds	r1, r2, r3
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084cc:	f7ff ff06 	bl	80082dc <prvInsertTimerInActiveList>
					break;
 80084d0:	e015      	b.n	80084fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084d8:	f003 0302 	and.w	r3, r3, #2
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d103      	bne.n	80084e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80084e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e2:	f000 fbdd 	bl	8008ca0 <vPortFree>
 80084e6:	e00a      	b.n	80084fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084ee:	f023 0301 	bic.w	r3, r3, #1
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084fa:	e000      	b.n	80084fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80084fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084fe:	4b08      	ldr	r3, [pc, #32]	; (8008520 <prvProcessReceivedCommands+0x1c0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	1d39      	adds	r1, r7, #4
 8008504:	2200      	movs	r2, #0
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe f9e4 	bl	80068d4 <xQueueReceive>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	f47f af2a 	bne.w	8008368 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop
 8008518:	3730      	adds	r7, #48	; 0x30
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	2000161c 	.word	0x2000161c

08008524 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800852a:	e048      	b.n	80085be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800852c:	4b2d      	ldr	r3, [pc, #180]	; (80085e4 <prvSwitchTimerLists+0xc0>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008536:	4b2b      	ldr	r3, [pc, #172]	; (80085e4 <prvSwitchTimerLists+0xc0>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3304      	adds	r3, #4
 8008544:	4618      	mov	r0, r3
 8008546:	f7fd fe0d 	bl	8006164 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008558:	f003 0304 	and.w	r3, r3, #4
 800855c:	2b00      	cmp	r3, #0
 800855e:	d02e      	beq.n	80085be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	4413      	add	r3, r2
 8008568:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	429a      	cmp	r2, r3
 8008570:	d90e      	bls.n	8008590 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800857e:	4b19      	ldr	r3, [pc, #100]	; (80085e4 <prvSwitchTimerLists+0xc0>)
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3304      	adds	r3, #4
 8008586:	4619      	mov	r1, r3
 8008588:	4610      	mov	r0, r2
 800858a:	f7fd fdb2 	bl	80060f2 <vListInsert>
 800858e:	e016      	b.n	80085be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008590:	2300      	movs	r3, #0
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	2300      	movs	r3, #0
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	2100      	movs	r1, #0
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f7ff fd60 	bl	8008060 <xTimerGenericCommand>
 80085a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10a      	bne.n	80085be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	603b      	str	r3, [r7, #0]
}
 80085ba:	bf00      	nop
 80085bc:	e7fe      	b.n	80085bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085be:	4b09      	ldr	r3, [pc, #36]	; (80085e4 <prvSwitchTimerLists+0xc0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1b1      	bne.n	800852c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80085c8:	4b06      	ldr	r3, [pc, #24]	; (80085e4 <prvSwitchTimerLists+0xc0>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80085ce:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <prvSwitchTimerLists+0xc4>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a04      	ldr	r2, [pc, #16]	; (80085e4 <prvSwitchTimerLists+0xc0>)
 80085d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80085d6:	4a04      	ldr	r2, [pc, #16]	; (80085e8 <prvSwitchTimerLists+0xc4>)
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	6013      	str	r3, [r2, #0]
}
 80085dc:	bf00      	nop
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20001614 	.word	0x20001614
 80085e8:	20001618 	.word	0x20001618

080085ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085f2:	f000 f967 	bl	80088c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085f6:	4b15      	ldr	r3, [pc, #84]	; (800864c <prvCheckForValidListAndQueue+0x60>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d120      	bne.n	8008640 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80085fe:	4814      	ldr	r0, [pc, #80]	; (8008650 <prvCheckForValidListAndQueue+0x64>)
 8008600:	f7fd fd26 	bl	8006050 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008604:	4813      	ldr	r0, [pc, #76]	; (8008654 <prvCheckForValidListAndQueue+0x68>)
 8008606:	f7fd fd23 	bl	8006050 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800860a:	4b13      	ldr	r3, [pc, #76]	; (8008658 <prvCheckForValidListAndQueue+0x6c>)
 800860c:	4a10      	ldr	r2, [pc, #64]	; (8008650 <prvCheckForValidListAndQueue+0x64>)
 800860e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008610:	4b12      	ldr	r3, [pc, #72]	; (800865c <prvCheckForValidListAndQueue+0x70>)
 8008612:	4a10      	ldr	r2, [pc, #64]	; (8008654 <prvCheckForValidListAndQueue+0x68>)
 8008614:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008616:	2300      	movs	r3, #0
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	4b11      	ldr	r3, [pc, #68]	; (8008660 <prvCheckForValidListAndQueue+0x74>)
 800861c:	4a11      	ldr	r2, [pc, #68]	; (8008664 <prvCheckForValidListAndQueue+0x78>)
 800861e:	2110      	movs	r1, #16
 8008620:	200a      	movs	r0, #10
 8008622:	f7fd fe31 	bl	8006288 <xQueueGenericCreateStatic>
 8008626:	4603      	mov	r3, r0
 8008628:	4a08      	ldr	r2, [pc, #32]	; (800864c <prvCheckForValidListAndQueue+0x60>)
 800862a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800862c:	4b07      	ldr	r3, [pc, #28]	; (800864c <prvCheckForValidListAndQueue+0x60>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d005      	beq.n	8008640 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008634:	4b05      	ldr	r3, [pc, #20]	; (800864c <prvCheckForValidListAndQueue+0x60>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	490b      	ldr	r1, [pc, #44]	; (8008668 <prvCheckForValidListAndQueue+0x7c>)
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fc5e 	bl	8006efc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008640:	f000 f970 	bl	8008924 <vPortExitCritical>
}
 8008644:	bf00      	nop
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	2000161c 	.word	0x2000161c
 8008650:	200015ec 	.word	0x200015ec
 8008654:	20001600 	.word	0x20001600
 8008658:	20001614 	.word	0x20001614
 800865c:	20001618 	.word	0x20001618
 8008660:	200016c8 	.word	0x200016c8
 8008664:	20001628 	.word	0x20001628
 8008668:	080098ec 	.word	0x080098ec

0800866c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	3b04      	subs	r3, #4
 800867c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	3b04      	subs	r3, #4
 800868a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	f023 0201 	bic.w	r2, r3, #1
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3b04      	subs	r3, #4
 800869a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800869c:	4a0c      	ldr	r2, [pc, #48]	; (80086d0 <pxPortInitialiseStack+0x64>)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3b14      	subs	r3, #20
 80086a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3b04      	subs	r3, #4
 80086b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f06f 0202 	mvn.w	r2, #2
 80086ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3b20      	subs	r3, #32
 80086c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086c2:	68fb      	ldr	r3, [r7, #12]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	080086d5 	.word	0x080086d5

080086d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086da:	2300      	movs	r3, #0
 80086dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086de:	4b12      	ldr	r3, [pc, #72]	; (8008728 <prvTaskExitError+0x54>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086e6:	d00a      	beq.n	80086fe <prvTaskExitError+0x2a>
	__asm volatile
 80086e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	60fb      	str	r3, [r7, #12]
}
 80086fa:	bf00      	nop
 80086fc:	e7fe      	b.n	80086fc <prvTaskExitError+0x28>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	60bb      	str	r3, [r7, #8]
}
 8008710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008712:	bf00      	nop
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d0fc      	beq.n	8008714 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800871a:	bf00      	nop
 800871c:	bf00      	nop
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	20000024 	.word	0x20000024
 800872c:	00000000 	.word	0x00000000

08008730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008730:	4b07      	ldr	r3, [pc, #28]	; (8008750 <pxCurrentTCBConst2>)
 8008732:	6819      	ldr	r1, [r3, #0]
 8008734:	6808      	ldr	r0, [r1, #0]
 8008736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873a:	f380 8809 	msr	PSP, r0
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f04f 0000 	mov.w	r0, #0
 8008746:	f380 8811 	msr	BASEPRI, r0
 800874a:	4770      	bx	lr
 800874c:	f3af 8000 	nop.w

08008750 <pxCurrentTCBConst2>:
 8008750:	200010ec 	.word	0x200010ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop

08008758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008758:	4808      	ldr	r0, [pc, #32]	; (800877c <prvPortStartFirstTask+0x24>)
 800875a:	6800      	ldr	r0, [r0, #0]
 800875c:	6800      	ldr	r0, [r0, #0]
 800875e:	f380 8808 	msr	MSP, r0
 8008762:	f04f 0000 	mov.w	r0, #0
 8008766:	f380 8814 	msr	CONTROL, r0
 800876a:	b662      	cpsie	i
 800876c:	b661      	cpsie	f
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	df00      	svc	0
 8008778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800877a:	bf00      	nop
 800877c:	e000ed08 	.word	0xe000ed08

08008780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008786:	4b46      	ldr	r3, [pc, #280]	; (80088a0 <xPortStartScheduler+0x120>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a46      	ldr	r2, [pc, #280]	; (80088a4 <xPortStartScheduler+0x124>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d10a      	bne.n	80087a6 <xPortStartScheduler+0x26>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	613b      	str	r3, [r7, #16]
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087a6:	4b3e      	ldr	r3, [pc, #248]	; (80088a0 <xPortStartScheduler+0x120>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a3f      	ldr	r2, [pc, #252]	; (80088a8 <xPortStartScheduler+0x128>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d10a      	bne.n	80087c6 <xPortStartScheduler+0x46>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	60fb      	str	r3, [r7, #12]
}
 80087c2:	bf00      	nop
 80087c4:	e7fe      	b.n	80087c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087c6:	4b39      	ldr	r3, [pc, #228]	; (80088ac <xPortStartScheduler+0x12c>)
 80087c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	22ff      	movs	r2, #255	; 0xff
 80087d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087e0:	78fb      	ldrb	r3, [r7, #3]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	4b31      	ldr	r3, [pc, #196]	; (80088b0 <xPortStartScheduler+0x130>)
 80087ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087ee:	4b31      	ldr	r3, [pc, #196]	; (80088b4 <xPortStartScheduler+0x134>)
 80087f0:	2207      	movs	r2, #7
 80087f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087f4:	e009      	b.n	800880a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80087f6:	4b2f      	ldr	r3, [pc, #188]	; (80088b4 <xPortStartScheduler+0x134>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	4a2d      	ldr	r2, [pc, #180]	; (80088b4 <xPortStartScheduler+0x134>)
 80087fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	b2db      	uxtb	r3, r3
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	b2db      	uxtb	r3, r3
 8008808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800880a:	78fb      	ldrb	r3, [r7, #3]
 800880c:	b2db      	uxtb	r3, r3
 800880e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008812:	2b80      	cmp	r3, #128	; 0x80
 8008814:	d0ef      	beq.n	80087f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008816:	4b27      	ldr	r3, [pc, #156]	; (80088b4 <xPortStartScheduler+0x134>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f1c3 0307 	rsb	r3, r3, #7
 800881e:	2b04      	cmp	r3, #4
 8008820:	d00a      	beq.n	8008838 <xPortStartScheduler+0xb8>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	60bb      	str	r3, [r7, #8]
}
 8008834:	bf00      	nop
 8008836:	e7fe      	b.n	8008836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008838:	4b1e      	ldr	r3, [pc, #120]	; (80088b4 <xPortStartScheduler+0x134>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	021b      	lsls	r3, r3, #8
 800883e:	4a1d      	ldr	r2, [pc, #116]	; (80088b4 <xPortStartScheduler+0x134>)
 8008840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008842:	4b1c      	ldr	r3, [pc, #112]	; (80088b4 <xPortStartScheduler+0x134>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800884a:	4a1a      	ldr	r2, [pc, #104]	; (80088b4 <xPortStartScheduler+0x134>)
 800884c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	b2da      	uxtb	r2, r3
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008856:	4b18      	ldr	r3, [pc, #96]	; (80088b8 <xPortStartScheduler+0x138>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a17      	ldr	r2, [pc, #92]	; (80088b8 <xPortStartScheduler+0x138>)
 800885c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008862:	4b15      	ldr	r3, [pc, #84]	; (80088b8 <xPortStartScheduler+0x138>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a14      	ldr	r2, [pc, #80]	; (80088b8 <xPortStartScheduler+0x138>)
 8008868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800886c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800886e:	f000 f8dd 	bl	8008a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008872:	4b12      	ldr	r3, [pc, #72]	; (80088bc <xPortStartScheduler+0x13c>)
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008878:	f000 f8fc 	bl	8008a74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800887c:	4b10      	ldr	r3, [pc, #64]	; (80088c0 <xPortStartScheduler+0x140>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a0f      	ldr	r2, [pc, #60]	; (80088c0 <xPortStartScheduler+0x140>)
 8008882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008888:	f7ff ff66 	bl	8008758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800888c:	f7fe ff46 	bl	800771c <vTaskSwitchContext>
	prvTaskExitError();
 8008890:	f7ff ff20 	bl	80086d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	e000ed00 	.word	0xe000ed00
 80088a4:	410fc271 	.word	0x410fc271
 80088a8:	410fc270 	.word	0x410fc270
 80088ac:	e000e400 	.word	0xe000e400
 80088b0:	20001718 	.word	0x20001718
 80088b4:	2000171c 	.word	0x2000171c
 80088b8:	e000ed20 	.word	0xe000ed20
 80088bc:	20000024 	.word	0x20000024
 80088c0:	e000ef34 	.word	0xe000ef34

080088c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	607b      	str	r3, [r7, #4]
}
 80088dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088de:	4b0f      	ldr	r3, [pc, #60]	; (800891c <vPortEnterCritical+0x58>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3301      	adds	r3, #1
 80088e4:	4a0d      	ldr	r2, [pc, #52]	; (800891c <vPortEnterCritical+0x58>)
 80088e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088e8:	4b0c      	ldr	r3, [pc, #48]	; (800891c <vPortEnterCritical+0x58>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d10f      	bne.n	8008910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088f0:	4b0b      	ldr	r3, [pc, #44]	; (8008920 <vPortEnterCritical+0x5c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <vPortEnterCritical+0x4c>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	603b      	str	r3, [r7, #0]
}
 800890c:	bf00      	nop
 800890e:	e7fe      	b.n	800890e <vPortEnterCritical+0x4a>
	}
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	20000024 	.word	0x20000024
 8008920:	e000ed04 	.word	0xe000ed04

08008924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800892a:	4b12      	ldr	r3, [pc, #72]	; (8008974 <vPortExitCritical+0x50>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <vPortExitCritical+0x24>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	607b      	str	r3, [r7, #4]
}
 8008944:	bf00      	nop
 8008946:	e7fe      	b.n	8008946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008948:	4b0a      	ldr	r3, [pc, #40]	; (8008974 <vPortExitCritical+0x50>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3b01      	subs	r3, #1
 800894e:	4a09      	ldr	r2, [pc, #36]	; (8008974 <vPortExitCritical+0x50>)
 8008950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008952:	4b08      	ldr	r3, [pc, #32]	; (8008974 <vPortExitCritical+0x50>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d105      	bne.n	8008966 <vPortExitCritical+0x42>
 800895a:	2300      	movs	r3, #0
 800895c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	f383 8811 	msr	BASEPRI, r3
}
 8008964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	20000024 	.word	0x20000024
	...

08008980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008980:	f3ef 8009 	mrs	r0, PSP
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	4b15      	ldr	r3, [pc, #84]	; (80089e0 <pxCurrentTCBConst>)
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	f01e 0f10 	tst.w	lr, #16
 8008990:	bf08      	it	eq
 8008992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899a:	6010      	str	r0, [r2, #0]
 800899c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80089a4:	f380 8811 	msr	BASEPRI, r0
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f7fe feb4 	bl	800771c <vTaskSwitchContext>
 80089b4:	f04f 0000 	mov.w	r0, #0
 80089b8:	f380 8811 	msr	BASEPRI, r0
 80089bc:	bc09      	pop	{r0, r3}
 80089be:	6819      	ldr	r1, [r3, #0]
 80089c0:	6808      	ldr	r0, [r1, #0]
 80089c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c6:	f01e 0f10 	tst.w	lr, #16
 80089ca:	bf08      	it	eq
 80089cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089d0:	f380 8809 	msr	PSP, r0
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	f3af 8000 	nop.w

080089e0 <pxCurrentTCBConst>:
 80089e0:	200010ec 	.word	0x200010ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop

080089e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	607b      	str	r3, [r7, #4]
}
 8008a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a02:	f7fe fdd1 	bl	80075a8 <xTaskIncrementTick>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a0c:	4b06      	ldr	r3, [pc, #24]	; (8008a28 <xPortSysTickHandler+0x40>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	2300      	movs	r3, #0
 8008a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	f383 8811 	msr	BASEPRI, r3
}
 8008a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	e000ed04 	.word	0xe000ed04

08008a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a30:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <vPortSetupTimerInterrupt+0x34>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a36:	4b0b      	ldr	r3, [pc, #44]	; (8008a64 <vPortSetupTimerInterrupt+0x38>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <vPortSetupTimerInterrupt+0x3c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a0a      	ldr	r2, [pc, #40]	; (8008a6c <vPortSetupTimerInterrupt+0x40>)
 8008a42:	fba2 2303 	umull	r2, r3, r2, r3
 8008a46:	099b      	lsrs	r3, r3, #6
 8008a48:	4a09      	ldr	r2, [pc, #36]	; (8008a70 <vPortSetupTimerInterrupt+0x44>)
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a4e:	4b04      	ldr	r3, [pc, #16]	; (8008a60 <vPortSetupTimerInterrupt+0x34>)
 8008a50:	2207      	movs	r2, #7
 8008a52:	601a      	str	r2, [r3, #0]
}
 8008a54:	bf00      	nop
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	e000e010 	.word	0xe000e010
 8008a64:	e000e018 	.word	0xe000e018
 8008a68:	20000018 	.word	0x20000018
 8008a6c:	10624dd3 	.word	0x10624dd3
 8008a70:	e000e014 	.word	0xe000e014

08008a74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a84 <vPortEnableVFP+0x10>
 8008a78:	6801      	ldr	r1, [r0, #0]
 8008a7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a7e:	6001      	str	r1, [r0, #0]
 8008a80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a82:	bf00      	nop
 8008a84:	e000ed88 	.word	0xe000ed88

08008a88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a8e:	f3ef 8305 	mrs	r3, IPSR
 8008a92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b0f      	cmp	r3, #15
 8008a98:	d914      	bls.n	8008ac4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a9a:	4a17      	ldr	r2, [pc, #92]	; (8008af8 <vPortValidateInterruptPriority+0x70>)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008aa4:	4b15      	ldr	r3, [pc, #84]	; (8008afc <vPortValidateInterruptPriority+0x74>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	7afa      	ldrb	r2, [r7, #11]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d20a      	bcs.n	8008ac4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	607b      	str	r3, [r7, #4]
}
 8008ac0:	bf00      	nop
 8008ac2:	e7fe      	b.n	8008ac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ac4:	4b0e      	ldr	r3, [pc, #56]	; (8008b00 <vPortValidateInterruptPriority+0x78>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008acc:	4b0d      	ldr	r3, [pc, #52]	; (8008b04 <vPortValidateInterruptPriority+0x7c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d90a      	bls.n	8008aea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	603b      	str	r3, [r7, #0]
}
 8008ae6:	bf00      	nop
 8008ae8:	e7fe      	b.n	8008ae8 <vPortValidateInterruptPriority+0x60>
	}
 8008aea:	bf00      	nop
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	e000e3f0 	.word	0xe000e3f0
 8008afc:	20001718 	.word	0x20001718
 8008b00:	e000ed0c 	.word	0xe000ed0c
 8008b04:	2000171c 	.word	0x2000171c

08008b08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08a      	sub	sp, #40	; 0x28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b10:	2300      	movs	r3, #0
 8008b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b14:	f7fe fc8c 	bl	8007430 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b18:	4b5b      	ldr	r3, [pc, #364]	; (8008c88 <pvPortMalloc+0x180>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b20:	f000 f920 	bl	8008d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b24:	4b59      	ldr	r3, [pc, #356]	; (8008c8c <pvPortMalloc+0x184>)
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f040 8093 	bne.w	8008c58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d01d      	beq.n	8008b74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008b38:	2208      	movs	r2, #8
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d014      	beq.n	8008b74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f023 0307 	bic.w	r3, r3, #7
 8008b50:	3308      	adds	r3, #8
 8008b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00a      	beq.n	8008b74 <pvPortMalloc+0x6c>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	617b      	str	r3, [r7, #20]
}
 8008b70:	bf00      	nop
 8008b72:	e7fe      	b.n	8008b72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d06e      	beq.n	8008c58 <pvPortMalloc+0x150>
 8008b7a:	4b45      	ldr	r3, [pc, #276]	; (8008c90 <pvPortMalloc+0x188>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d869      	bhi.n	8008c58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b84:	4b43      	ldr	r3, [pc, #268]	; (8008c94 <pvPortMalloc+0x18c>)
 8008b86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b88:	4b42      	ldr	r3, [pc, #264]	; (8008c94 <pvPortMalloc+0x18c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b8e:	e004      	b.n	8008b9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d903      	bls.n	8008bac <pvPortMalloc+0xa4>
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1f1      	bne.n	8008b90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008bac:	4b36      	ldr	r3, [pc, #216]	; (8008c88 <pvPortMalloc+0x180>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d050      	beq.n	8008c58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2208      	movs	r2, #8
 8008bbc:	4413      	add	r3, r2
 8008bbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	1ad2      	subs	r2, r2, r3
 8008bd0:	2308      	movs	r3, #8
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d91f      	bls.n	8008c18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4413      	add	r3, r2
 8008bde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <pvPortMalloc+0xf8>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	613b      	str	r3, [r7, #16]
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	1ad2      	subs	r2, r2, r3
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c12:	69b8      	ldr	r0, [r7, #24]
 8008c14:	f000 f908 	bl	8008e28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c18:	4b1d      	ldr	r3, [pc, #116]	; (8008c90 <pvPortMalloc+0x188>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	4a1b      	ldr	r2, [pc, #108]	; (8008c90 <pvPortMalloc+0x188>)
 8008c24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c26:	4b1a      	ldr	r3, [pc, #104]	; (8008c90 <pvPortMalloc+0x188>)
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	4b1b      	ldr	r3, [pc, #108]	; (8008c98 <pvPortMalloc+0x190>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d203      	bcs.n	8008c3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c32:	4b17      	ldr	r3, [pc, #92]	; (8008c90 <pvPortMalloc+0x188>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a18      	ldr	r2, [pc, #96]	; (8008c98 <pvPortMalloc+0x190>)
 8008c38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	4b13      	ldr	r3, [pc, #76]	; (8008c8c <pvPortMalloc+0x184>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	431a      	orrs	r2, r3
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c4e:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <pvPortMalloc+0x194>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3301      	adds	r3, #1
 8008c54:	4a11      	ldr	r2, [pc, #68]	; (8008c9c <pvPortMalloc+0x194>)
 8008c56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c58:	f7fe fbf8 	bl	800744c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	f003 0307 	and.w	r3, r3, #7
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <pvPortMalloc+0x174>
	__asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	60fb      	str	r3, [r7, #12]
}
 8008c78:	bf00      	nop
 8008c7a:	e7fe      	b.n	8008c7a <pvPortMalloc+0x172>
	return pvReturn;
 8008c7c:	69fb      	ldr	r3, [r7, #28]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3728      	adds	r7, #40	; 0x28
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20007100 	.word	0x20007100
 8008c8c:	20007114 	.word	0x20007114
 8008c90:	20007104 	.word	0x20007104
 8008c94:	200070f8 	.word	0x200070f8
 8008c98:	20007108 	.word	0x20007108
 8008c9c:	2000710c 	.word	0x2000710c

08008ca0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d04d      	beq.n	8008d4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cb2:	2308      	movs	r3, #8
 8008cb4:	425b      	negs	r3, r3
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	4413      	add	r3, r2
 8008cba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	4b24      	ldr	r3, [pc, #144]	; (8008d58 <vPortFree+0xb8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4013      	ands	r3, r2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10a      	bne.n	8008ce4 <vPortFree+0x44>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	60fb      	str	r3, [r7, #12]
}
 8008ce0:	bf00      	nop
 8008ce2:	e7fe      	b.n	8008ce2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00a      	beq.n	8008d02 <vPortFree+0x62>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	60bb      	str	r3, [r7, #8]
}
 8008cfe:	bf00      	nop
 8008d00:	e7fe      	b.n	8008d00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <vPortFree+0xb8>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d01e      	beq.n	8008d4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d11a      	bne.n	8008d4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	4b0e      	ldr	r3, [pc, #56]	; (8008d58 <vPortFree+0xb8>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	43db      	mvns	r3, r3
 8008d22:	401a      	ands	r2, r3
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d28:	f7fe fb82 	bl	8007430 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	4b0a      	ldr	r3, [pc, #40]	; (8008d5c <vPortFree+0xbc>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4413      	add	r3, r2
 8008d36:	4a09      	ldr	r2, [pc, #36]	; (8008d5c <vPortFree+0xbc>)
 8008d38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d3a:	6938      	ldr	r0, [r7, #16]
 8008d3c:	f000 f874 	bl	8008e28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d40:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <vPortFree+0xc0>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	3301      	adds	r3, #1
 8008d46:	4a06      	ldr	r2, [pc, #24]	; (8008d60 <vPortFree+0xc0>)
 8008d48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d4a:	f7fe fb7f 	bl	800744c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d4e:	bf00      	nop
 8008d50:	3718      	adds	r7, #24
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20007114 	.word	0x20007114
 8008d5c:	20007104 	.word	0x20007104
 8008d60:	20007110 	.word	0x20007110

08008d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d6a:	f645 13d8 	movw	r3, #23000	; 0x59d8
 8008d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d70:	4b27      	ldr	r3, [pc, #156]	; (8008e10 <prvHeapInit+0xac>)
 8008d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00c      	beq.n	8008d98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3307      	adds	r3, #7
 8008d82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 0307 	bic.w	r3, r3, #7
 8008d8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	4a1f      	ldr	r2, [pc, #124]	; (8008e10 <prvHeapInit+0xac>)
 8008d94:	4413      	add	r3, r2
 8008d96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d9c:	4a1d      	ldr	r2, [pc, #116]	; (8008e14 <prvHeapInit+0xb0>)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008da2:	4b1c      	ldr	r3, [pc, #112]	; (8008e14 <prvHeapInit+0xb0>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	4413      	add	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008db0:	2208      	movs	r2, #8
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	1a9b      	subs	r3, r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0307 	bic.w	r3, r3, #7
 8008dbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4a15      	ldr	r2, [pc, #84]	; (8008e18 <prvHeapInit+0xb4>)
 8008dc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008dc6:	4b14      	ldr	r3, [pc, #80]	; (8008e18 <prvHeapInit+0xb4>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dce:	4b12      	ldr	r3, [pc, #72]	; (8008e18 <prvHeapInit+0xb4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	1ad2      	subs	r2, r2, r3
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008de4:	4b0c      	ldr	r3, [pc, #48]	; (8008e18 <prvHeapInit+0xb4>)
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	4a0a      	ldr	r2, [pc, #40]	; (8008e1c <prvHeapInit+0xb8>)
 8008df2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <prvHeapInit+0xbc>)
 8008dfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008dfc:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <prvHeapInit+0xc0>)
 8008dfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e02:	601a      	str	r2, [r3, #0]
}
 8008e04:	bf00      	nop
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	20001720 	.word	0x20001720
 8008e14:	200070f8 	.word	0x200070f8
 8008e18:	20007100 	.word	0x20007100
 8008e1c:	20007108 	.word	0x20007108
 8008e20:	20007104 	.word	0x20007104
 8008e24:	20007114 	.word	0x20007114

08008e28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e30:	4b28      	ldr	r3, [pc, #160]	; (8008ed4 <prvInsertBlockIntoFreeList+0xac>)
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	e002      	b.n	8008e3c <prvInsertBlockIntoFreeList+0x14>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d8f7      	bhi.n	8008e36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	4413      	add	r3, r2
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d108      	bne.n	8008e6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	441a      	add	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	441a      	add	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d118      	bne.n	8008eb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	4b15      	ldr	r3, [pc, #84]	; (8008ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d00d      	beq.n	8008ea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	441a      	add	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	e008      	b.n	8008eb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ea6:	4b0c      	ldr	r3, [pc, #48]	; (8008ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	e003      	b.n	8008eb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d002      	beq.n	8008ec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ec6:	bf00      	nop
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	200070f8 	.word	0x200070f8
 8008ed8:	20007100 	.word	0x20007100

08008edc <siprintf>:
 8008edc:	b40e      	push	{r1, r2, r3}
 8008ede:	b500      	push	{lr}
 8008ee0:	b09c      	sub	sp, #112	; 0x70
 8008ee2:	ab1d      	add	r3, sp, #116	; 0x74
 8008ee4:	9002      	str	r0, [sp, #8]
 8008ee6:	9006      	str	r0, [sp, #24]
 8008ee8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008eec:	4809      	ldr	r0, [pc, #36]	; (8008f14 <siprintf+0x38>)
 8008eee:	9107      	str	r1, [sp, #28]
 8008ef0:	9104      	str	r1, [sp, #16]
 8008ef2:	4909      	ldr	r1, [pc, #36]	; (8008f18 <siprintf+0x3c>)
 8008ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef8:	9105      	str	r1, [sp, #20]
 8008efa:	6800      	ldr	r0, [r0, #0]
 8008efc:	9301      	str	r3, [sp, #4]
 8008efe:	a902      	add	r1, sp, #8
 8008f00:	f000 f8a8 	bl	8009054 <_svfiprintf_r>
 8008f04:	9b02      	ldr	r3, [sp, #8]
 8008f06:	2200      	movs	r2, #0
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	b01c      	add	sp, #112	; 0x70
 8008f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f10:	b003      	add	sp, #12
 8008f12:	4770      	bx	lr
 8008f14:	20000074 	.word	0x20000074
 8008f18:	ffff0208 	.word	0xffff0208

08008f1c <memset>:
 8008f1c:	4402      	add	r2, r0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d100      	bne.n	8008f26 <memset+0xa>
 8008f24:	4770      	bx	lr
 8008f26:	f803 1b01 	strb.w	r1, [r3], #1
 8008f2a:	e7f9      	b.n	8008f20 <memset+0x4>

08008f2c <__errno>:
 8008f2c:	4b01      	ldr	r3, [pc, #4]	; (8008f34 <__errno+0x8>)
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20000074 	.word	0x20000074

08008f38 <__libc_init_array>:
 8008f38:	b570      	push	{r4, r5, r6, lr}
 8008f3a:	4d0d      	ldr	r5, [pc, #52]	; (8008f70 <__libc_init_array+0x38>)
 8008f3c:	4c0d      	ldr	r4, [pc, #52]	; (8008f74 <__libc_init_array+0x3c>)
 8008f3e:	1b64      	subs	r4, r4, r5
 8008f40:	10a4      	asrs	r4, r4, #2
 8008f42:	2600      	movs	r6, #0
 8008f44:	42a6      	cmp	r6, r4
 8008f46:	d109      	bne.n	8008f5c <__libc_init_array+0x24>
 8008f48:	4d0b      	ldr	r5, [pc, #44]	; (8008f78 <__libc_init_array+0x40>)
 8008f4a:	4c0c      	ldr	r4, [pc, #48]	; (8008f7c <__libc_init_array+0x44>)
 8008f4c:	f000 fc6a 	bl	8009824 <_init>
 8008f50:	1b64      	subs	r4, r4, r5
 8008f52:	10a4      	asrs	r4, r4, #2
 8008f54:	2600      	movs	r6, #0
 8008f56:	42a6      	cmp	r6, r4
 8008f58:	d105      	bne.n	8008f66 <__libc_init_array+0x2e>
 8008f5a:	bd70      	pop	{r4, r5, r6, pc}
 8008f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f60:	4798      	blx	r3
 8008f62:	3601      	adds	r6, #1
 8008f64:	e7ee      	b.n	8008f44 <__libc_init_array+0xc>
 8008f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f6a:	4798      	blx	r3
 8008f6c:	3601      	adds	r6, #1
 8008f6e:	e7f2      	b.n	8008f56 <__libc_init_array+0x1e>
 8008f70:	08009a3c 	.word	0x08009a3c
 8008f74:	08009a3c 	.word	0x08009a3c
 8008f78:	08009a3c 	.word	0x08009a3c
 8008f7c:	08009a40 	.word	0x08009a40

08008f80 <__retarget_lock_acquire_recursive>:
 8008f80:	4770      	bx	lr

08008f82 <__retarget_lock_release_recursive>:
 8008f82:	4770      	bx	lr

08008f84 <memcpy>:
 8008f84:	440a      	add	r2, r1
 8008f86:	4291      	cmp	r1, r2
 8008f88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f8c:	d100      	bne.n	8008f90 <memcpy+0xc>
 8008f8e:	4770      	bx	lr
 8008f90:	b510      	push	{r4, lr}
 8008f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f9a:	4291      	cmp	r1, r2
 8008f9c:	d1f9      	bne.n	8008f92 <memcpy+0xe>
 8008f9e:	bd10      	pop	{r4, pc}

08008fa0 <__ssputs_r>:
 8008fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa4:	688e      	ldr	r6, [r1, #8]
 8008fa6:	461f      	mov	r7, r3
 8008fa8:	42be      	cmp	r6, r7
 8008faa:	680b      	ldr	r3, [r1, #0]
 8008fac:	4682      	mov	sl, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	4690      	mov	r8, r2
 8008fb2:	d82c      	bhi.n	800900e <__ssputs_r+0x6e>
 8008fb4:	898a      	ldrh	r2, [r1, #12]
 8008fb6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fba:	d026      	beq.n	800900a <__ssputs_r+0x6a>
 8008fbc:	6965      	ldr	r5, [r4, #20]
 8008fbe:	6909      	ldr	r1, [r1, #16]
 8008fc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fc4:	eba3 0901 	sub.w	r9, r3, r1
 8008fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fcc:	1c7b      	adds	r3, r7, #1
 8008fce:	444b      	add	r3, r9
 8008fd0:	106d      	asrs	r5, r5, #1
 8008fd2:	429d      	cmp	r5, r3
 8008fd4:	bf38      	it	cc
 8008fd6:	461d      	movcc	r5, r3
 8008fd8:	0553      	lsls	r3, r2, #21
 8008fda:	d527      	bpl.n	800902c <__ssputs_r+0x8c>
 8008fdc:	4629      	mov	r1, r5
 8008fde:	f000 f957 	bl	8009290 <_malloc_r>
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	b360      	cbz	r0, 8009040 <__ssputs_r+0xa0>
 8008fe6:	6921      	ldr	r1, [r4, #16]
 8008fe8:	464a      	mov	r2, r9
 8008fea:	f7ff ffcb 	bl	8008f84 <memcpy>
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff8:	81a3      	strh	r3, [r4, #12]
 8008ffa:	6126      	str	r6, [r4, #16]
 8008ffc:	6165      	str	r5, [r4, #20]
 8008ffe:	444e      	add	r6, r9
 8009000:	eba5 0509 	sub.w	r5, r5, r9
 8009004:	6026      	str	r6, [r4, #0]
 8009006:	60a5      	str	r5, [r4, #8]
 8009008:	463e      	mov	r6, r7
 800900a:	42be      	cmp	r6, r7
 800900c:	d900      	bls.n	8009010 <__ssputs_r+0x70>
 800900e:	463e      	mov	r6, r7
 8009010:	6820      	ldr	r0, [r4, #0]
 8009012:	4632      	mov	r2, r6
 8009014:	4641      	mov	r1, r8
 8009016:	f000 fb86 	bl	8009726 <memmove>
 800901a:	68a3      	ldr	r3, [r4, #8]
 800901c:	1b9b      	subs	r3, r3, r6
 800901e:	60a3      	str	r3, [r4, #8]
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	4433      	add	r3, r6
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	2000      	movs	r0, #0
 8009028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902c:	462a      	mov	r2, r5
 800902e:	f000 fb4b 	bl	80096c8 <_realloc_r>
 8009032:	4606      	mov	r6, r0
 8009034:	2800      	cmp	r0, #0
 8009036:	d1e0      	bne.n	8008ffa <__ssputs_r+0x5a>
 8009038:	6921      	ldr	r1, [r4, #16]
 800903a:	4650      	mov	r0, sl
 800903c:	f000 fb9e 	bl	800977c <_free_r>
 8009040:	230c      	movs	r3, #12
 8009042:	f8ca 3000 	str.w	r3, [sl]
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800904c:	81a3      	strh	r3, [r4, #12]
 800904e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009052:	e7e9      	b.n	8009028 <__ssputs_r+0x88>

08009054 <_svfiprintf_r>:
 8009054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009058:	4698      	mov	r8, r3
 800905a:	898b      	ldrh	r3, [r1, #12]
 800905c:	061b      	lsls	r3, r3, #24
 800905e:	b09d      	sub	sp, #116	; 0x74
 8009060:	4607      	mov	r7, r0
 8009062:	460d      	mov	r5, r1
 8009064:	4614      	mov	r4, r2
 8009066:	d50e      	bpl.n	8009086 <_svfiprintf_r+0x32>
 8009068:	690b      	ldr	r3, [r1, #16]
 800906a:	b963      	cbnz	r3, 8009086 <_svfiprintf_r+0x32>
 800906c:	2140      	movs	r1, #64	; 0x40
 800906e:	f000 f90f 	bl	8009290 <_malloc_r>
 8009072:	6028      	str	r0, [r5, #0]
 8009074:	6128      	str	r0, [r5, #16]
 8009076:	b920      	cbnz	r0, 8009082 <_svfiprintf_r+0x2e>
 8009078:	230c      	movs	r3, #12
 800907a:	603b      	str	r3, [r7, #0]
 800907c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009080:	e0d0      	b.n	8009224 <_svfiprintf_r+0x1d0>
 8009082:	2340      	movs	r3, #64	; 0x40
 8009084:	616b      	str	r3, [r5, #20]
 8009086:	2300      	movs	r3, #0
 8009088:	9309      	str	r3, [sp, #36]	; 0x24
 800908a:	2320      	movs	r3, #32
 800908c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009090:	f8cd 800c 	str.w	r8, [sp, #12]
 8009094:	2330      	movs	r3, #48	; 0x30
 8009096:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800923c <_svfiprintf_r+0x1e8>
 800909a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800909e:	f04f 0901 	mov.w	r9, #1
 80090a2:	4623      	mov	r3, r4
 80090a4:	469a      	mov	sl, r3
 80090a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090aa:	b10a      	cbz	r2, 80090b0 <_svfiprintf_r+0x5c>
 80090ac:	2a25      	cmp	r2, #37	; 0x25
 80090ae:	d1f9      	bne.n	80090a4 <_svfiprintf_r+0x50>
 80090b0:	ebba 0b04 	subs.w	fp, sl, r4
 80090b4:	d00b      	beq.n	80090ce <_svfiprintf_r+0x7a>
 80090b6:	465b      	mov	r3, fp
 80090b8:	4622      	mov	r2, r4
 80090ba:	4629      	mov	r1, r5
 80090bc:	4638      	mov	r0, r7
 80090be:	f7ff ff6f 	bl	8008fa0 <__ssputs_r>
 80090c2:	3001      	adds	r0, #1
 80090c4:	f000 80a9 	beq.w	800921a <_svfiprintf_r+0x1c6>
 80090c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ca:	445a      	add	r2, fp
 80090cc:	9209      	str	r2, [sp, #36]	; 0x24
 80090ce:	f89a 3000 	ldrb.w	r3, [sl]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f000 80a1 	beq.w	800921a <_svfiprintf_r+0x1c6>
 80090d8:	2300      	movs	r3, #0
 80090da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090e2:	f10a 0a01 	add.w	sl, sl, #1
 80090e6:	9304      	str	r3, [sp, #16]
 80090e8:	9307      	str	r3, [sp, #28]
 80090ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090ee:	931a      	str	r3, [sp, #104]	; 0x68
 80090f0:	4654      	mov	r4, sl
 80090f2:	2205      	movs	r2, #5
 80090f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f8:	4850      	ldr	r0, [pc, #320]	; (800923c <_svfiprintf_r+0x1e8>)
 80090fa:	f7f7 f871 	bl	80001e0 <memchr>
 80090fe:	9a04      	ldr	r2, [sp, #16]
 8009100:	b9d8      	cbnz	r0, 800913a <_svfiprintf_r+0xe6>
 8009102:	06d0      	lsls	r0, r2, #27
 8009104:	bf44      	itt	mi
 8009106:	2320      	movmi	r3, #32
 8009108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800910c:	0711      	lsls	r1, r2, #28
 800910e:	bf44      	itt	mi
 8009110:	232b      	movmi	r3, #43	; 0x2b
 8009112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009116:	f89a 3000 	ldrb.w	r3, [sl]
 800911a:	2b2a      	cmp	r3, #42	; 0x2a
 800911c:	d015      	beq.n	800914a <_svfiprintf_r+0xf6>
 800911e:	9a07      	ldr	r2, [sp, #28]
 8009120:	4654      	mov	r4, sl
 8009122:	2000      	movs	r0, #0
 8009124:	f04f 0c0a 	mov.w	ip, #10
 8009128:	4621      	mov	r1, r4
 800912a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800912e:	3b30      	subs	r3, #48	; 0x30
 8009130:	2b09      	cmp	r3, #9
 8009132:	d94d      	bls.n	80091d0 <_svfiprintf_r+0x17c>
 8009134:	b1b0      	cbz	r0, 8009164 <_svfiprintf_r+0x110>
 8009136:	9207      	str	r2, [sp, #28]
 8009138:	e014      	b.n	8009164 <_svfiprintf_r+0x110>
 800913a:	eba0 0308 	sub.w	r3, r0, r8
 800913e:	fa09 f303 	lsl.w	r3, r9, r3
 8009142:	4313      	orrs	r3, r2
 8009144:	9304      	str	r3, [sp, #16]
 8009146:	46a2      	mov	sl, r4
 8009148:	e7d2      	b.n	80090f0 <_svfiprintf_r+0x9c>
 800914a:	9b03      	ldr	r3, [sp, #12]
 800914c:	1d19      	adds	r1, r3, #4
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	9103      	str	r1, [sp, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	bfbb      	ittet	lt
 8009156:	425b      	neglt	r3, r3
 8009158:	f042 0202 	orrlt.w	r2, r2, #2
 800915c:	9307      	strge	r3, [sp, #28]
 800915e:	9307      	strlt	r3, [sp, #28]
 8009160:	bfb8      	it	lt
 8009162:	9204      	strlt	r2, [sp, #16]
 8009164:	7823      	ldrb	r3, [r4, #0]
 8009166:	2b2e      	cmp	r3, #46	; 0x2e
 8009168:	d10c      	bne.n	8009184 <_svfiprintf_r+0x130>
 800916a:	7863      	ldrb	r3, [r4, #1]
 800916c:	2b2a      	cmp	r3, #42	; 0x2a
 800916e:	d134      	bne.n	80091da <_svfiprintf_r+0x186>
 8009170:	9b03      	ldr	r3, [sp, #12]
 8009172:	1d1a      	adds	r2, r3, #4
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	9203      	str	r2, [sp, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	bfb8      	it	lt
 800917c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009180:	3402      	adds	r4, #2
 8009182:	9305      	str	r3, [sp, #20]
 8009184:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800924c <_svfiprintf_r+0x1f8>
 8009188:	7821      	ldrb	r1, [r4, #0]
 800918a:	2203      	movs	r2, #3
 800918c:	4650      	mov	r0, sl
 800918e:	f7f7 f827 	bl	80001e0 <memchr>
 8009192:	b138      	cbz	r0, 80091a4 <_svfiprintf_r+0x150>
 8009194:	9b04      	ldr	r3, [sp, #16]
 8009196:	eba0 000a 	sub.w	r0, r0, sl
 800919a:	2240      	movs	r2, #64	; 0x40
 800919c:	4082      	lsls	r2, r0
 800919e:	4313      	orrs	r3, r2
 80091a0:	3401      	adds	r4, #1
 80091a2:	9304      	str	r3, [sp, #16]
 80091a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a8:	4825      	ldr	r0, [pc, #148]	; (8009240 <_svfiprintf_r+0x1ec>)
 80091aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091ae:	2206      	movs	r2, #6
 80091b0:	f7f7 f816 	bl	80001e0 <memchr>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d038      	beq.n	800922a <_svfiprintf_r+0x1d6>
 80091b8:	4b22      	ldr	r3, [pc, #136]	; (8009244 <_svfiprintf_r+0x1f0>)
 80091ba:	bb1b      	cbnz	r3, 8009204 <_svfiprintf_r+0x1b0>
 80091bc:	9b03      	ldr	r3, [sp, #12]
 80091be:	3307      	adds	r3, #7
 80091c0:	f023 0307 	bic.w	r3, r3, #7
 80091c4:	3308      	adds	r3, #8
 80091c6:	9303      	str	r3, [sp, #12]
 80091c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ca:	4433      	add	r3, r6
 80091cc:	9309      	str	r3, [sp, #36]	; 0x24
 80091ce:	e768      	b.n	80090a2 <_svfiprintf_r+0x4e>
 80091d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80091d4:	460c      	mov	r4, r1
 80091d6:	2001      	movs	r0, #1
 80091d8:	e7a6      	b.n	8009128 <_svfiprintf_r+0xd4>
 80091da:	2300      	movs	r3, #0
 80091dc:	3401      	adds	r4, #1
 80091de:	9305      	str	r3, [sp, #20]
 80091e0:	4619      	mov	r1, r3
 80091e2:	f04f 0c0a 	mov.w	ip, #10
 80091e6:	4620      	mov	r0, r4
 80091e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ec:	3a30      	subs	r2, #48	; 0x30
 80091ee:	2a09      	cmp	r2, #9
 80091f0:	d903      	bls.n	80091fa <_svfiprintf_r+0x1a6>
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0c6      	beq.n	8009184 <_svfiprintf_r+0x130>
 80091f6:	9105      	str	r1, [sp, #20]
 80091f8:	e7c4      	b.n	8009184 <_svfiprintf_r+0x130>
 80091fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80091fe:	4604      	mov	r4, r0
 8009200:	2301      	movs	r3, #1
 8009202:	e7f0      	b.n	80091e6 <_svfiprintf_r+0x192>
 8009204:	ab03      	add	r3, sp, #12
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	462a      	mov	r2, r5
 800920a:	4b0f      	ldr	r3, [pc, #60]	; (8009248 <_svfiprintf_r+0x1f4>)
 800920c:	a904      	add	r1, sp, #16
 800920e:	4638      	mov	r0, r7
 8009210:	f3af 8000 	nop.w
 8009214:	1c42      	adds	r2, r0, #1
 8009216:	4606      	mov	r6, r0
 8009218:	d1d6      	bne.n	80091c8 <_svfiprintf_r+0x174>
 800921a:	89ab      	ldrh	r3, [r5, #12]
 800921c:	065b      	lsls	r3, r3, #25
 800921e:	f53f af2d 	bmi.w	800907c <_svfiprintf_r+0x28>
 8009222:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009224:	b01d      	add	sp, #116	; 0x74
 8009226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800922a:	ab03      	add	r3, sp, #12
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	462a      	mov	r2, r5
 8009230:	4b05      	ldr	r3, [pc, #20]	; (8009248 <_svfiprintf_r+0x1f4>)
 8009232:	a904      	add	r1, sp, #16
 8009234:	4638      	mov	r0, r7
 8009236:	f000 f919 	bl	800946c <_printf_i>
 800923a:	e7eb      	b.n	8009214 <_svfiprintf_r+0x1c0>
 800923c:	08009a00 	.word	0x08009a00
 8009240:	08009a0a 	.word	0x08009a0a
 8009244:	00000000 	.word	0x00000000
 8009248:	08008fa1 	.word	0x08008fa1
 800924c:	08009a06 	.word	0x08009a06

08009250 <sbrk_aligned>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	4e0e      	ldr	r6, [pc, #56]	; (800928c <sbrk_aligned+0x3c>)
 8009254:	460c      	mov	r4, r1
 8009256:	6831      	ldr	r1, [r6, #0]
 8009258:	4605      	mov	r5, r0
 800925a:	b911      	cbnz	r1, 8009262 <sbrk_aligned+0x12>
 800925c:	f000 fa7e 	bl	800975c <_sbrk_r>
 8009260:	6030      	str	r0, [r6, #0]
 8009262:	4621      	mov	r1, r4
 8009264:	4628      	mov	r0, r5
 8009266:	f000 fa79 	bl	800975c <_sbrk_r>
 800926a:	1c43      	adds	r3, r0, #1
 800926c:	d00a      	beq.n	8009284 <sbrk_aligned+0x34>
 800926e:	1cc4      	adds	r4, r0, #3
 8009270:	f024 0403 	bic.w	r4, r4, #3
 8009274:	42a0      	cmp	r0, r4
 8009276:	d007      	beq.n	8009288 <sbrk_aligned+0x38>
 8009278:	1a21      	subs	r1, r4, r0
 800927a:	4628      	mov	r0, r5
 800927c:	f000 fa6e 	bl	800975c <_sbrk_r>
 8009280:	3001      	adds	r0, #1
 8009282:	d101      	bne.n	8009288 <sbrk_aligned+0x38>
 8009284:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009288:	4620      	mov	r0, r4
 800928a:	bd70      	pop	{r4, r5, r6, pc}
 800928c:	20007258 	.word	0x20007258

08009290 <_malloc_r>:
 8009290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009294:	1ccd      	adds	r5, r1, #3
 8009296:	f025 0503 	bic.w	r5, r5, #3
 800929a:	3508      	adds	r5, #8
 800929c:	2d0c      	cmp	r5, #12
 800929e:	bf38      	it	cc
 80092a0:	250c      	movcc	r5, #12
 80092a2:	2d00      	cmp	r5, #0
 80092a4:	4607      	mov	r7, r0
 80092a6:	db01      	blt.n	80092ac <_malloc_r+0x1c>
 80092a8:	42a9      	cmp	r1, r5
 80092aa:	d905      	bls.n	80092b8 <_malloc_r+0x28>
 80092ac:	230c      	movs	r3, #12
 80092ae:	603b      	str	r3, [r7, #0]
 80092b0:	2600      	movs	r6, #0
 80092b2:	4630      	mov	r0, r6
 80092b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800938c <_malloc_r+0xfc>
 80092bc:	f000 f9f8 	bl	80096b0 <__malloc_lock>
 80092c0:	f8d8 3000 	ldr.w	r3, [r8]
 80092c4:	461c      	mov	r4, r3
 80092c6:	bb5c      	cbnz	r4, 8009320 <_malloc_r+0x90>
 80092c8:	4629      	mov	r1, r5
 80092ca:	4638      	mov	r0, r7
 80092cc:	f7ff ffc0 	bl	8009250 <sbrk_aligned>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	4604      	mov	r4, r0
 80092d4:	d155      	bne.n	8009382 <_malloc_r+0xf2>
 80092d6:	f8d8 4000 	ldr.w	r4, [r8]
 80092da:	4626      	mov	r6, r4
 80092dc:	2e00      	cmp	r6, #0
 80092de:	d145      	bne.n	800936c <_malloc_r+0xdc>
 80092e0:	2c00      	cmp	r4, #0
 80092e2:	d048      	beq.n	8009376 <_malloc_r+0xe6>
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	4631      	mov	r1, r6
 80092e8:	4638      	mov	r0, r7
 80092ea:	eb04 0903 	add.w	r9, r4, r3
 80092ee:	f000 fa35 	bl	800975c <_sbrk_r>
 80092f2:	4581      	cmp	r9, r0
 80092f4:	d13f      	bne.n	8009376 <_malloc_r+0xe6>
 80092f6:	6821      	ldr	r1, [r4, #0]
 80092f8:	1a6d      	subs	r5, r5, r1
 80092fa:	4629      	mov	r1, r5
 80092fc:	4638      	mov	r0, r7
 80092fe:	f7ff ffa7 	bl	8009250 <sbrk_aligned>
 8009302:	3001      	adds	r0, #1
 8009304:	d037      	beq.n	8009376 <_malloc_r+0xe6>
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	442b      	add	r3, r5
 800930a:	6023      	str	r3, [r4, #0]
 800930c:	f8d8 3000 	ldr.w	r3, [r8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d038      	beq.n	8009386 <_malloc_r+0xf6>
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	42a2      	cmp	r2, r4
 8009318:	d12b      	bne.n	8009372 <_malloc_r+0xe2>
 800931a:	2200      	movs	r2, #0
 800931c:	605a      	str	r2, [r3, #4]
 800931e:	e00f      	b.n	8009340 <_malloc_r+0xb0>
 8009320:	6822      	ldr	r2, [r4, #0]
 8009322:	1b52      	subs	r2, r2, r5
 8009324:	d41f      	bmi.n	8009366 <_malloc_r+0xd6>
 8009326:	2a0b      	cmp	r2, #11
 8009328:	d917      	bls.n	800935a <_malloc_r+0xca>
 800932a:	1961      	adds	r1, r4, r5
 800932c:	42a3      	cmp	r3, r4
 800932e:	6025      	str	r5, [r4, #0]
 8009330:	bf18      	it	ne
 8009332:	6059      	strne	r1, [r3, #4]
 8009334:	6863      	ldr	r3, [r4, #4]
 8009336:	bf08      	it	eq
 8009338:	f8c8 1000 	streq.w	r1, [r8]
 800933c:	5162      	str	r2, [r4, r5]
 800933e:	604b      	str	r3, [r1, #4]
 8009340:	4638      	mov	r0, r7
 8009342:	f104 060b 	add.w	r6, r4, #11
 8009346:	f000 f9b9 	bl	80096bc <__malloc_unlock>
 800934a:	f026 0607 	bic.w	r6, r6, #7
 800934e:	1d23      	adds	r3, r4, #4
 8009350:	1af2      	subs	r2, r6, r3
 8009352:	d0ae      	beq.n	80092b2 <_malloc_r+0x22>
 8009354:	1b9b      	subs	r3, r3, r6
 8009356:	50a3      	str	r3, [r4, r2]
 8009358:	e7ab      	b.n	80092b2 <_malloc_r+0x22>
 800935a:	42a3      	cmp	r3, r4
 800935c:	6862      	ldr	r2, [r4, #4]
 800935e:	d1dd      	bne.n	800931c <_malloc_r+0x8c>
 8009360:	f8c8 2000 	str.w	r2, [r8]
 8009364:	e7ec      	b.n	8009340 <_malloc_r+0xb0>
 8009366:	4623      	mov	r3, r4
 8009368:	6864      	ldr	r4, [r4, #4]
 800936a:	e7ac      	b.n	80092c6 <_malloc_r+0x36>
 800936c:	4634      	mov	r4, r6
 800936e:	6876      	ldr	r6, [r6, #4]
 8009370:	e7b4      	b.n	80092dc <_malloc_r+0x4c>
 8009372:	4613      	mov	r3, r2
 8009374:	e7cc      	b.n	8009310 <_malloc_r+0x80>
 8009376:	230c      	movs	r3, #12
 8009378:	603b      	str	r3, [r7, #0]
 800937a:	4638      	mov	r0, r7
 800937c:	f000 f99e 	bl	80096bc <__malloc_unlock>
 8009380:	e797      	b.n	80092b2 <_malloc_r+0x22>
 8009382:	6025      	str	r5, [r4, #0]
 8009384:	e7dc      	b.n	8009340 <_malloc_r+0xb0>
 8009386:	605b      	str	r3, [r3, #4]
 8009388:	deff      	udf	#255	; 0xff
 800938a:	bf00      	nop
 800938c:	20007254 	.word	0x20007254

08009390 <_printf_common>:
 8009390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009394:	4616      	mov	r6, r2
 8009396:	4699      	mov	r9, r3
 8009398:	688a      	ldr	r2, [r1, #8]
 800939a:	690b      	ldr	r3, [r1, #16]
 800939c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093a0:	4293      	cmp	r3, r2
 80093a2:	bfb8      	it	lt
 80093a4:	4613      	movlt	r3, r2
 80093a6:	6033      	str	r3, [r6, #0]
 80093a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093ac:	4607      	mov	r7, r0
 80093ae:	460c      	mov	r4, r1
 80093b0:	b10a      	cbz	r2, 80093b6 <_printf_common+0x26>
 80093b2:	3301      	adds	r3, #1
 80093b4:	6033      	str	r3, [r6, #0]
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	0699      	lsls	r1, r3, #26
 80093ba:	bf42      	ittt	mi
 80093bc:	6833      	ldrmi	r3, [r6, #0]
 80093be:	3302      	addmi	r3, #2
 80093c0:	6033      	strmi	r3, [r6, #0]
 80093c2:	6825      	ldr	r5, [r4, #0]
 80093c4:	f015 0506 	ands.w	r5, r5, #6
 80093c8:	d106      	bne.n	80093d8 <_printf_common+0x48>
 80093ca:	f104 0a19 	add.w	sl, r4, #25
 80093ce:	68e3      	ldr	r3, [r4, #12]
 80093d0:	6832      	ldr	r2, [r6, #0]
 80093d2:	1a9b      	subs	r3, r3, r2
 80093d4:	42ab      	cmp	r3, r5
 80093d6:	dc26      	bgt.n	8009426 <_printf_common+0x96>
 80093d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093dc:	1e13      	subs	r3, r2, #0
 80093de:	6822      	ldr	r2, [r4, #0]
 80093e0:	bf18      	it	ne
 80093e2:	2301      	movne	r3, #1
 80093e4:	0692      	lsls	r2, r2, #26
 80093e6:	d42b      	bmi.n	8009440 <_printf_common+0xb0>
 80093e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093ec:	4649      	mov	r1, r9
 80093ee:	4638      	mov	r0, r7
 80093f0:	47c0      	blx	r8
 80093f2:	3001      	adds	r0, #1
 80093f4:	d01e      	beq.n	8009434 <_printf_common+0xa4>
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	6922      	ldr	r2, [r4, #16]
 80093fa:	f003 0306 	and.w	r3, r3, #6
 80093fe:	2b04      	cmp	r3, #4
 8009400:	bf02      	ittt	eq
 8009402:	68e5      	ldreq	r5, [r4, #12]
 8009404:	6833      	ldreq	r3, [r6, #0]
 8009406:	1aed      	subeq	r5, r5, r3
 8009408:	68a3      	ldr	r3, [r4, #8]
 800940a:	bf0c      	ite	eq
 800940c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009410:	2500      	movne	r5, #0
 8009412:	4293      	cmp	r3, r2
 8009414:	bfc4      	itt	gt
 8009416:	1a9b      	subgt	r3, r3, r2
 8009418:	18ed      	addgt	r5, r5, r3
 800941a:	2600      	movs	r6, #0
 800941c:	341a      	adds	r4, #26
 800941e:	42b5      	cmp	r5, r6
 8009420:	d11a      	bne.n	8009458 <_printf_common+0xc8>
 8009422:	2000      	movs	r0, #0
 8009424:	e008      	b.n	8009438 <_printf_common+0xa8>
 8009426:	2301      	movs	r3, #1
 8009428:	4652      	mov	r2, sl
 800942a:	4649      	mov	r1, r9
 800942c:	4638      	mov	r0, r7
 800942e:	47c0      	blx	r8
 8009430:	3001      	adds	r0, #1
 8009432:	d103      	bne.n	800943c <_printf_common+0xac>
 8009434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943c:	3501      	adds	r5, #1
 800943e:	e7c6      	b.n	80093ce <_printf_common+0x3e>
 8009440:	18e1      	adds	r1, r4, r3
 8009442:	1c5a      	adds	r2, r3, #1
 8009444:	2030      	movs	r0, #48	; 0x30
 8009446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800944a:	4422      	add	r2, r4
 800944c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009454:	3302      	adds	r3, #2
 8009456:	e7c7      	b.n	80093e8 <_printf_common+0x58>
 8009458:	2301      	movs	r3, #1
 800945a:	4622      	mov	r2, r4
 800945c:	4649      	mov	r1, r9
 800945e:	4638      	mov	r0, r7
 8009460:	47c0      	blx	r8
 8009462:	3001      	adds	r0, #1
 8009464:	d0e6      	beq.n	8009434 <_printf_common+0xa4>
 8009466:	3601      	adds	r6, #1
 8009468:	e7d9      	b.n	800941e <_printf_common+0x8e>
	...

0800946c <_printf_i>:
 800946c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009470:	7e0f      	ldrb	r7, [r1, #24]
 8009472:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009474:	2f78      	cmp	r7, #120	; 0x78
 8009476:	4691      	mov	r9, r2
 8009478:	4680      	mov	r8, r0
 800947a:	460c      	mov	r4, r1
 800947c:	469a      	mov	sl, r3
 800947e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009482:	d807      	bhi.n	8009494 <_printf_i+0x28>
 8009484:	2f62      	cmp	r7, #98	; 0x62
 8009486:	d80a      	bhi.n	800949e <_printf_i+0x32>
 8009488:	2f00      	cmp	r7, #0
 800948a:	f000 80d4 	beq.w	8009636 <_printf_i+0x1ca>
 800948e:	2f58      	cmp	r7, #88	; 0x58
 8009490:	f000 80c0 	beq.w	8009614 <_printf_i+0x1a8>
 8009494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800949c:	e03a      	b.n	8009514 <_printf_i+0xa8>
 800949e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094a2:	2b15      	cmp	r3, #21
 80094a4:	d8f6      	bhi.n	8009494 <_printf_i+0x28>
 80094a6:	a101      	add	r1, pc, #4	; (adr r1, 80094ac <_printf_i+0x40>)
 80094a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094ac:	08009505 	.word	0x08009505
 80094b0:	08009519 	.word	0x08009519
 80094b4:	08009495 	.word	0x08009495
 80094b8:	08009495 	.word	0x08009495
 80094bc:	08009495 	.word	0x08009495
 80094c0:	08009495 	.word	0x08009495
 80094c4:	08009519 	.word	0x08009519
 80094c8:	08009495 	.word	0x08009495
 80094cc:	08009495 	.word	0x08009495
 80094d0:	08009495 	.word	0x08009495
 80094d4:	08009495 	.word	0x08009495
 80094d8:	0800961d 	.word	0x0800961d
 80094dc:	08009545 	.word	0x08009545
 80094e0:	080095d7 	.word	0x080095d7
 80094e4:	08009495 	.word	0x08009495
 80094e8:	08009495 	.word	0x08009495
 80094ec:	0800963f 	.word	0x0800963f
 80094f0:	08009495 	.word	0x08009495
 80094f4:	08009545 	.word	0x08009545
 80094f8:	08009495 	.word	0x08009495
 80094fc:	08009495 	.word	0x08009495
 8009500:	080095df 	.word	0x080095df
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	1d1a      	adds	r2, r3, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	602a      	str	r2, [r5, #0]
 800950c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009514:	2301      	movs	r3, #1
 8009516:	e09f      	b.n	8009658 <_printf_i+0x1ec>
 8009518:	6820      	ldr	r0, [r4, #0]
 800951a:	682b      	ldr	r3, [r5, #0]
 800951c:	0607      	lsls	r7, r0, #24
 800951e:	f103 0104 	add.w	r1, r3, #4
 8009522:	6029      	str	r1, [r5, #0]
 8009524:	d501      	bpl.n	800952a <_printf_i+0xbe>
 8009526:	681e      	ldr	r6, [r3, #0]
 8009528:	e003      	b.n	8009532 <_printf_i+0xc6>
 800952a:	0646      	lsls	r6, r0, #25
 800952c:	d5fb      	bpl.n	8009526 <_printf_i+0xba>
 800952e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009532:	2e00      	cmp	r6, #0
 8009534:	da03      	bge.n	800953e <_printf_i+0xd2>
 8009536:	232d      	movs	r3, #45	; 0x2d
 8009538:	4276      	negs	r6, r6
 800953a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800953e:	485a      	ldr	r0, [pc, #360]	; (80096a8 <_printf_i+0x23c>)
 8009540:	230a      	movs	r3, #10
 8009542:	e012      	b.n	800956a <_printf_i+0xfe>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	6820      	ldr	r0, [r4, #0]
 8009548:	1d19      	adds	r1, r3, #4
 800954a:	6029      	str	r1, [r5, #0]
 800954c:	0605      	lsls	r5, r0, #24
 800954e:	d501      	bpl.n	8009554 <_printf_i+0xe8>
 8009550:	681e      	ldr	r6, [r3, #0]
 8009552:	e002      	b.n	800955a <_printf_i+0xee>
 8009554:	0641      	lsls	r1, r0, #25
 8009556:	d5fb      	bpl.n	8009550 <_printf_i+0xe4>
 8009558:	881e      	ldrh	r6, [r3, #0]
 800955a:	4853      	ldr	r0, [pc, #332]	; (80096a8 <_printf_i+0x23c>)
 800955c:	2f6f      	cmp	r7, #111	; 0x6f
 800955e:	bf0c      	ite	eq
 8009560:	2308      	moveq	r3, #8
 8009562:	230a      	movne	r3, #10
 8009564:	2100      	movs	r1, #0
 8009566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800956a:	6865      	ldr	r5, [r4, #4]
 800956c:	60a5      	str	r5, [r4, #8]
 800956e:	2d00      	cmp	r5, #0
 8009570:	bfa2      	ittt	ge
 8009572:	6821      	ldrge	r1, [r4, #0]
 8009574:	f021 0104 	bicge.w	r1, r1, #4
 8009578:	6021      	strge	r1, [r4, #0]
 800957a:	b90e      	cbnz	r6, 8009580 <_printf_i+0x114>
 800957c:	2d00      	cmp	r5, #0
 800957e:	d04b      	beq.n	8009618 <_printf_i+0x1ac>
 8009580:	4615      	mov	r5, r2
 8009582:	fbb6 f1f3 	udiv	r1, r6, r3
 8009586:	fb03 6711 	mls	r7, r3, r1, r6
 800958a:	5dc7      	ldrb	r7, [r0, r7]
 800958c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009590:	4637      	mov	r7, r6
 8009592:	42bb      	cmp	r3, r7
 8009594:	460e      	mov	r6, r1
 8009596:	d9f4      	bls.n	8009582 <_printf_i+0x116>
 8009598:	2b08      	cmp	r3, #8
 800959a:	d10b      	bne.n	80095b4 <_printf_i+0x148>
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	07de      	lsls	r6, r3, #31
 80095a0:	d508      	bpl.n	80095b4 <_printf_i+0x148>
 80095a2:	6923      	ldr	r3, [r4, #16]
 80095a4:	6861      	ldr	r1, [r4, #4]
 80095a6:	4299      	cmp	r1, r3
 80095a8:	bfde      	ittt	le
 80095aa:	2330      	movle	r3, #48	; 0x30
 80095ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80095b4:	1b52      	subs	r2, r2, r5
 80095b6:	6122      	str	r2, [r4, #16]
 80095b8:	f8cd a000 	str.w	sl, [sp]
 80095bc:	464b      	mov	r3, r9
 80095be:	aa03      	add	r2, sp, #12
 80095c0:	4621      	mov	r1, r4
 80095c2:	4640      	mov	r0, r8
 80095c4:	f7ff fee4 	bl	8009390 <_printf_common>
 80095c8:	3001      	adds	r0, #1
 80095ca:	d14a      	bne.n	8009662 <_printf_i+0x1f6>
 80095cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095d0:	b004      	add	sp, #16
 80095d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	f043 0320 	orr.w	r3, r3, #32
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	4833      	ldr	r0, [pc, #204]	; (80096ac <_printf_i+0x240>)
 80095e0:	2778      	movs	r7, #120	; 0x78
 80095e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	6829      	ldr	r1, [r5, #0]
 80095ea:	061f      	lsls	r7, r3, #24
 80095ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80095f0:	d402      	bmi.n	80095f8 <_printf_i+0x18c>
 80095f2:	065f      	lsls	r7, r3, #25
 80095f4:	bf48      	it	mi
 80095f6:	b2b6      	uxthmi	r6, r6
 80095f8:	07df      	lsls	r7, r3, #31
 80095fa:	bf48      	it	mi
 80095fc:	f043 0320 	orrmi.w	r3, r3, #32
 8009600:	6029      	str	r1, [r5, #0]
 8009602:	bf48      	it	mi
 8009604:	6023      	strmi	r3, [r4, #0]
 8009606:	b91e      	cbnz	r6, 8009610 <_printf_i+0x1a4>
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	f023 0320 	bic.w	r3, r3, #32
 800960e:	6023      	str	r3, [r4, #0]
 8009610:	2310      	movs	r3, #16
 8009612:	e7a7      	b.n	8009564 <_printf_i+0xf8>
 8009614:	4824      	ldr	r0, [pc, #144]	; (80096a8 <_printf_i+0x23c>)
 8009616:	e7e4      	b.n	80095e2 <_printf_i+0x176>
 8009618:	4615      	mov	r5, r2
 800961a:	e7bd      	b.n	8009598 <_printf_i+0x12c>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	6826      	ldr	r6, [r4, #0]
 8009620:	6961      	ldr	r1, [r4, #20]
 8009622:	1d18      	adds	r0, r3, #4
 8009624:	6028      	str	r0, [r5, #0]
 8009626:	0635      	lsls	r5, r6, #24
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	d501      	bpl.n	8009630 <_printf_i+0x1c4>
 800962c:	6019      	str	r1, [r3, #0]
 800962e:	e002      	b.n	8009636 <_printf_i+0x1ca>
 8009630:	0670      	lsls	r0, r6, #25
 8009632:	d5fb      	bpl.n	800962c <_printf_i+0x1c0>
 8009634:	8019      	strh	r1, [r3, #0]
 8009636:	2300      	movs	r3, #0
 8009638:	6123      	str	r3, [r4, #16]
 800963a:	4615      	mov	r5, r2
 800963c:	e7bc      	b.n	80095b8 <_printf_i+0x14c>
 800963e:	682b      	ldr	r3, [r5, #0]
 8009640:	1d1a      	adds	r2, r3, #4
 8009642:	602a      	str	r2, [r5, #0]
 8009644:	681d      	ldr	r5, [r3, #0]
 8009646:	6862      	ldr	r2, [r4, #4]
 8009648:	2100      	movs	r1, #0
 800964a:	4628      	mov	r0, r5
 800964c:	f7f6 fdc8 	bl	80001e0 <memchr>
 8009650:	b108      	cbz	r0, 8009656 <_printf_i+0x1ea>
 8009652:	1b40      	subs	r0, r0, r5
 8009654:	6060      	str	r0, [r4, #4]
 8009656:	6863      	ldr	r3, [r4, #4]
 8009658:	6123      	str	r3, [r4, #16]
 800965a:	2300      	movs	r3, #0
 800965c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009660:	e7aa      	b.n	80095b8 <_printf_i+0x14c>
 8009662:	6923      	ldr	r3, [r4, #16]
 8009664:	462a      	mov	r2, r5
 8009666:	4649      	mov	r1, r9
 8009668:	4640      	mov	r0, r8
 800966a:	47d0      	blx	sl
 800966c:	3001      	adds	r0, #1
 800966e:	d0ad      	beq.n	80095cc <_printf_i+0x160>
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	079b      	lsls	r3, r3, #30
 8009674:	d413      	bmi.n	800969e <_printf_i+0x232>
 8009676:	68e0      	ldr	r0, [r4, #12]
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	4298      	cmp	r0, r3
 800967c:	bfb8      	it	lt
 800967e:	4618      	movlt	r0, r3
 8009680:	e7a6      	b.n	80095d0 <_printf_i+0x164>
 8009682:	2301      	movs	r3, #1
 8009684:	4632      	mov	r2, r6
 8009686:	4649      	mov	r1, r9
 8009688:	4640      	mov	r0, r8
 800968a:	47d0      	blx	sl
 800968c:	3001      	adds	r0, #1
 800968e:	d09d      	beq.n	80095cc <_printf_i+0x160>
 8009690:	3501      	adds	r5, #1
 8009692:	68e3      	ldr	r3, [r4, #12]
 8009694:	9903      	ldr	r1, [sp, #12]
 8009696:	1a5b      	subs	r3, r3, r1
 8009698:	42ab      	cmp	r3, r5
 800969a:	dcf2      	bgt.n	8009682 <_printf_i+0x216>
 800969c:	e7eb      	b.n	8009676 <_printf_i+0x20a>
 800969e:	2500      	movs	r5, #0
 80096a0:	f104 0619 	add.w	r6, r4, #25
 80096a4:	e7f5      	b.n	8009692 <_printf_i+0x226>
 80096a6:	bf00      	nop
 80096a8:	08009a11 	.word	0x08009a11
 80096ac:	08009a22 	.word	0x08009a22

080096b0 <__malloc_lock>:
 80096b0:	4801      	ldr	r0, [pc, #4]	; (80096b8 <__malloc_lock+0x8>)
 80096b2:	f7ff bc65 	b.w	8008f80 <__retarget_lock_acquire_recursive>
 80096b6:	bf00      	nop
 80096b8:	20007250 	.word	0x20007250

080096bc <__malloc_unlock>:
 80096bc:	4801      	ldr	r0, [pc, #4]	; (80096c4 <__malloc_unlock+0x8>)
 80096be:	f7ff bc60 	b.w	8008f82 <__retarget_lock_release_recursive>
 80096c2:	bf00      	nop
 80096c4:	20007250 	.word	0x20007250

080096c8 <_realloc_r>:
 80096c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096cc:	4680      	mov	r8, r0
 80096ce:	4614      	mov	r4, r2
 80096d0:	460e      	mov	r6, r1
 80096d2:	b921      	cbnz	r1, 80096de <_realloc_r+0x16>
 80096d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096d8:	4611      	mov	r1, r2
 80096da:	f7ff bdd9 	b.w	8009290 <_malloc_r>
 80096de:	b92a      	cbnz	r2, 80096ec <_realloc_r+0x24>
 80096e0:	f000 f84c 	bl	800977c <_free_r>
 80096e4:	4625      	mov	r5, r4
 80096e6:	4628      	mov	r0, r5
 80096e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ec:	f000 f892 	bl	8009814 <_malloc_usable_size_r>
 80096f0:	4284      	cmp	r4, r0
 80096f2:	4607      	mov	r7, r0
 80096f4:	d802      	bhi.n	80096fc <_realloc_r+0x34>
 80096f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096fa:	d812      	bhi.n	8009722 <_realloc_r+0x5a>
 80096fc:	4621      	mov	r1, r4
 80096fe:	4640      	mov	r0, r8
 8009700:	f7ff fdc6 	bl	8009290 <_malloc_r>
 8009704:	4605      	mov	r5, r0
 8009706:	2800      	cmp	r0, #0
 8009708:	d0ed      	beq.n	80096e6 <_realloc_r+0x1e>
 800970a:	42bc      	cmp	r4, r7
 800970c:	4622      	mov	r2, r4
 800970e:	4631      	mov	r1, r6
 8009710:	bf28      	it	cs
 8009712:	463a      	movcs	r2, r7
 8009714:	f7ff fc36 	bl	8008f84 <memcpy>
 8009718:	4631      	mov	r1, r6
 800971a:	4640      	mov	r0, r8
 800971c:	f000 f82e 	bl	800977c <_free_r>
 8009720:	e7e1      	b.n	80096e6 <_realloc_r+0x1e>
 8009722:	4635      	mov	r5, r6
 8009724:	e7df      	b.n	80096e6 <_realloc_r+0x1e>

08009726 <memmove>:
 8009726:	4288      	cmp	r0, r1
 8009728:	b510      	push	{r4, lr}
 800972a:	eb01 0402 	add.w	r4, r1, r2
 800972e:	d902      	bls.n	8009736 <memmove+0x10>
 8009730:	4284      	cmp	r4, r0
 8009732:	4623      	mov	r3, r4
 8009734:	d807      	bhi.n	8009746 <memmove+0x20>
 8009736:	1e43      	subs	r3, r0, #1
 8009738:	42a1      	cmp	r1, r4
 800973a:	d008      	beq.n	800974e <memmove+0x28>
 800973c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009740:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009744:	e7f8      	b.n	8009738 <memmove+0x12>
 8009746:	4402      	add	r2, r0
 8009748:	4601      	mov	r1, r0
 800974a:	428a      	cmp	r2, r1
 800974c:	d100      	bne.n	8009750 <memmove+0x2a>
 800974e:	bd10      	pop	{r4, pc}
 8009750:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009754:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009758:	e7f7      	b.n	800974a <memmove+0x24>
	...

0800975c <_sbrk_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4d06      	ldr	r5, [pc, #24]	; (8009778 <_sbrk_r+0x1c>)
 8009760:	2300      	movs	r3, #0
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	602b      	str	r3, [r5, #0]
 8009768:	f7f8 fa10 	bl	8001b8c <_sbrk>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_sbrk_r+0x1a>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_sbrk_r+0x1a>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	2000725c 	.word	0x2000725c

0800977c <_free_r>:
 800977c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800977e:	2900      	cmp	r1, #0
 8009780:	d044      	beq.n	800980c <_free_r+0x90>
 8009782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009786:	9001      	str	r0, [sp, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	f1a1 0404 	sub.w	r4, r1, #4
 800978e:	bfb8      	it	lt
 8009790:	18e4      	addlt	r4, r4, r3
 8009792:	f7ff ff8d 	bl	80096b0 <__malloc_lock>
 8009796:	4a1e      	ldr	r2, [pc, #120]	; (8009810 <_free_r+0x94>)
 8009798:	9801      	ldr	r0, [sp, #4]
 800979a:	6813      	ldr	r3, [r2, #0]
 800979c:	b933      	cbnz	r3, 80097ac <_free_r+0x30>
 800979e:	6063      	str	r3, [r4, #4]
 80097a0:	6014      	str	r4, [r2, #0]
 80097a2:	b003      	add	sp, #12
 80097a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097a8:	f7ff bf88 	b.w	80096bc <__malloc_unlock>
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	d908      	bls.n	80097c2 <_free_r+0x46>
 80097b0:	6825      	ldr	r5, [r4, #0]
 80097b2:	1961      	adds	r1, r4, r5
 80097b4:	428b      	cmp	r3, r1
 80097b6:	bf01      	itttt	eq
 80097b8:	6819      	ldreq	r1, [r3, #0]
 80097ba:	685b      	ldreq	r3, [r3, #4]
 80097bc:	1949      	addeq	r1, r1, r5
 80097be:	6021      	streq	r1, [r4, #0]
 80097c0:	e7ed      	b.n	800979e <_free_r+0x22>
 80097c2:	461a      	mov	r2, r3
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	b10b      	cbz	r3, 80097cc <_free_r+0x50>
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	d9fa      	bls.n	80097c2 <_free_r+0x46>
 80097cc:	6811      	ldr	r1, [r2, #0]
 80097ce:	1855      	adds	r5, r2, r1
 80097d0:	42a5      	cmp	r5, r4
 80097d2:	d10b      	bne.n	80097ec <_free_r+0x70>
 80097d4:	6824      	ldr	r4, [r4, #0]
 80097d6:	4421      	add	r1, r4
 80097d8:	1854      	adds	r4, r2, r1
 80097da:	42a3      	cmp	r3, r4
 80097dc:	6011      	str	r1, [r2, #0]
 80097de:	d1e0      	bne.n	80097a2 <_free_r+0x26>
 80097e0:	681c      	ldr	r4, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	6053      	str	r3, [r2, #4]
 80097e6:	440c      	add	r4, r1
 80097e8:	6014      	str	r4, [r2, #0]
 80097ea:	e7da      	b.n	80097a2 <_free_r+0x26>
 80097ec:	d902      	bls.n	80097f4 <_free_r+0x78>
 80097ee:	230c      	movs	r3, #12
 80097f0:	6003      	str	r3, [r0, #0]
 80097f2:	e7d6      	b.n	80097a2 <_free_r+0x26>
 80097f4:	6825      	ldr	r5, [r4, #0]
 80097f6:	1961      	adds	r1, r4, r5
 80097f8:	428b      	cmp	r3, r1
 80097fa:	bf04      	itt	eq
 80097fc:	6819      	ldreq	r1, [r3, #0]
 80097fe:	685b      	ldreq	r3, [r3, #4]
 8009800:	6063      	str	r3, [r4, #4]
 8009802:	bf04      	itt	eq
 8009804:	1949      	addeq	r1, r1, r5
 8009806:	6021      	streq	r1, [r4, #0]
 8009808:	6054      	str	r4, [r2, #4]
 800980a:	e7ca      	b.n	80097a2 <_free_r+0x26>
 800980c:	b003      	add	sp, #12
 800980e:	bd30      	pop	{r4, r5, pc}
 8009810:	20007254 	.word	0x20007254

08009814 <_malloc_usable_size_r>:
 8009814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009818:	1f18      	subs	r0, r3, #4
 800981a:	2b00      	cmp	r3, #0
 800981c:	bfbc      	itt	lt
 800981e:	580b      	ldrlt	r3, [r1, r0]
 8009820:	18c0      	addlt	r0, r0, r3
 8009822:	4770      	bx	lr

08009824 <_init>:
 8009824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009826:	bf00      	nop
 8009828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800982a:	bc08      	pop	{r3}
 800982c:	469e      	mov	lr, r3
 800982e:	4770      	bx	lr

08009830 <_fini>:
 8009830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009832:	bf00      	nop
 8009834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009836:	bc08      	pop	{r3}
 8009838:	469e      	mov	lr, r3
 800983a:	4770      	bx	lr
