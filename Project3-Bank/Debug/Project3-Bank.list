
Project3-Bank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000936c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080094fc  080094fc  000194fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096f4  080096f4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080096f4  080096f4  000196f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096fc  080096fc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096fc  080096fc  000196fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009700  08009700  00019700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000718c  20000060  08009764  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200071ec  08009764  000271ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b153  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bf6  00000000  00000000  0003b226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c8  00000000  00000000  0003ee20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000126a  00000000  00000000  000405e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003f85  00000000  00000000  00041852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bfd1  00000000  00000000  000457d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd7ff  00000000  00000000  000617a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006898  00000000  00000000  0015efa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00165840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094e4 	.word	0x080094e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080094e4 	.word	0x080094e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <init_breaker>:
uint32_t* random2;
uint32_t* random3;



void init_breaker(void){
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b095      	sub	sp, #84	; 0x54
 8000580:	af04      	add	r7, sp, #16
	//What time the variable for going on break will be assigned
	breaker.start_break[0] = 0;
 8000582:	4bb9      	ldr	r3, [pc, #740]	; (8000868 <init_breaker+0x2ec>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
	breaker.start_break[1] = 0;
 8000588:	4bb7      	ldr	r3, [pc, #732]	; (8000868 <init_breaker+0x2ec>)
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random1);
 800058e:	4bb7      	ldr	r3, [pc, #732]	; (800086c <init_breaker+0x2f0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4619      	mov	r1, r3
 8000594:	48b6      	ldr	r0, [pc, #728]	; (8000870 <init_breaker+0x2f4>)
 8000596:	f003 ffa2 	bl	80044de <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock1 = { .hour = 0, .minute = (30 + (*random1 - 30) % 31), .second = (*random1 % 60)};
 800059a:	2300      	movs	r3, #0
 800059c:	637b      	str	r3, [r7, #52]	; 0x34
 800059e:	4bb3      	ldr	r3, [pc, #716]	; (800086c <init_breaker+0x2f0>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f1a3 011e 	sub.w	r1, r3, #30
 80005a8:	4bb2      	ldr	r3, [pc, #712]	; (8000874 <init_breaker+0x2f8>)
 80005aa:	fba3 2301 	umull	r2, r3, r3, r1
 80005ae:	1aca      	subs	r2, r1, r3
 80005b0:	0852      	lsrs	r2, r2, #1
 80005b2:	4413      	add	r3, r2
 80005b4:	091a      	lsrs	r2, r3, #4
 80005b6:	4613      	mov	r3, r2
 80005b8:	015b      	lsls	r3, r3, #5
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	1aca      	subs	r2, r1, r3
 80005be:	f102 031e 	add.w	r3, r2, #30
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80005c4:	4ba9      	ldr	r3, [pc, #676]	; (800086c <init_breaker+0x2f0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6819      	ldr	r1, [r3, #0]
 80005ca:	4bab      	ldr	r3, [pc, #684]	; (8000878 <init_breaker+0x2fc>)
 80005cc:	fba3 2301 	umull	r2, r3, r3, r1
 80005d0:	095a      	lsrs	r2, r3, #5
 80005d2:	4613      	mov	r3, r2
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	1a9b      	subs	r3, r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	1aca      	subs	r2, r1, r3
 80005dc:	4613      	mov	r3, r2
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
	breaker.break_time1 = add_clocks(breaker.break_time1,Clock);
 80005e0:	4da1      	ldr	r5, [pc, #644]	; (8000868 <init_breaker+0x2ec>)
 80005e2:	f107 0408 	add.w	r4, r7, #8
 80005e6:	4ea0      	ldr	r6, [pc, #640]	; (8000868 <init_breaker+0x2ec>)
 80005e8:	4aa4      	ldr	r2, [pc, #656]	; (800087c <init_breaker+0x300>)
 80005ea:	466b      	mov	r3, sp
 80005ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80005f2:	f106 030c 	add.w	r3, r6, #12
 80005f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005f8:	4620      	mov	r0, r4
 80005fa:	f000 fba3 	bl	8000d44 <add_clocks>
 80005fe:	f105 030c 	add.w	r3, r5, #12
 8000602:	f107 0208 	add.w	r2, r7, #8
 8000606:	ca07      	ldmia	r2, {r0, r1, r2}
 8000608:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_time1 = add_clocks(breaker.break_time1,temp_clock1);
 800060c:	4e96      	ldr	r6, [pc, #600]	; (8000868 <init_breaker+0x2ec>)
 800060e:	f107 0508 	add.w	r5, r7, #8
 8000612:	4b95      	ldr	r3, [pc, #596]	; (8000868 <init_breaker+0x2ec>)
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	466c      	mov	r4, sp
 8000618:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800061c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	330c      	adds	r3, #12
 8000628:	cb0e      	ldmia	r3, {r1, r2, r3}
 800062a:	4628      	mov	r0, r5
 800062c:	f000 fb8a 	bl	8000d44 <add_clocks>
 8000630:	f106 030c 	add.w	r3, r6, #12
 8000634:	f107 0208 	add.w	r2, r7, #8
 8000638:	ca07      	ldmia	r2, {r0, r1, r2}
 800063a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration1.hour = 0;
 800063e:	4b8a      	ldr	r3, [pc, #552]	; (8000868 <init_breaker+0x2ec>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
	breaker.break_duration1.minute = (*random1 % 5);
 8000644:	4b89      	ldr	r3, [pc, #548]	; (800086c <init_breaker+0x2f0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	6819      	ldr	r1, [r3, #0]
 800064a:	4b8d      	ldr	r3, [pc, #564]	; (8000880 <init_breaker+0x304>)
 800064c:	fba3 2301 	umull	r2, r3, r3, r1
 8000650:	089a      	lsrs	r2, r3, #2
 8000652:	4613      	mov	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	1aca      	subs	r2, r1, r3
 800065a:	4b83      	ldr	r3, [pc, #524]	; (8000868 <init_breaker+0x2ec>)
 800065c:	61da      	str	r2, [r3, #28]
	breaker.break_duration1.second = (*random1 % 60);
 800065e:	4b83      	ldr	r3, [pc, #524]	; (800086c <init_breaker+0x2f0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	6819      	ldr	r1, [r3, #0]
 8000664:	4b84      	ldr	r3, [pc, #528]	; (8000878 <init_breaker+0x2fc>)
 8000666:	fba3 2301 	umull	r2, r3, r3, r1
 800066a:	095a      	lsrs	r2, r3, #5
 800066c:	4613      	mov	r3, r2
 800066e:	011b      	lsls	r3, r3, #4
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	1aca      	subs	r2, r1, r3
 8000676:	4b7c      	ldr	r3, [pc, #496]	; (8000868 <init_breaker+0x2ec>)
 8000678:	621a      	str	r2, [r3, #32]

	//What time the variable for going on break will be assigned
	breaker.start_break[2] = 0;
 800067a:	4b7b      	ldr	r3, [pc, #492]	; (8000868 <init_breaker+0x2ec>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random2);
 8000680:	4b80      	ldr	r3, [pc, #512]	; (8000884 <init_breaker+0x308>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	487a      	ldr	r0, [pc, #488]	; (8000870 <init_breaker+0x2f4>)
 8000688:	f003 ff29 	bl	80044de <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock2 = { .hour = 0, .minute = (30 + (*random2 - 30) % 31), .second = (*random2 % 60)};
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000690:	4b7c      	ldr	r3, [pc, #496]	; (8000884 <init_breaker+0x308>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f1a3 011e 	sub.w	r1, r3, #30
 800069a:	4b76      	ldr	r3, [pc, #472]	; (8000874 <init_breaker+0x2f8>)
 800069c:	fba3 2301 	umull	r2, r3, r3, r1
 80006a0:	1aca      	subs	r2, r1, r3
 80006a2:	0852      	lsrs	r2, r2, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	091a      	lsrs	r2, r3, #4
 80006a8:	4613      	mov	r3, r2
 80006aa:	015b      	lsls	r3, r3, #5
 80006ac:	1a9b      	subs	r3, r3, r2
 80006ae:	1aca      	subs	r2, r1, r3
 80006b0:	f102 031e 	add.w	r3, r2, #30
 80006b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006b6:	4b73      	ldr	r3, [pc, #460]	; (8000884 <init_breaker+0x308>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	6819      	ldr	r1, [r3, #0]
 80006bc:	4b6e      	ldr	r3, [pc, #440]	; (8000878 <init_breaker+0x2fc>)
 80006be:	fba3 2301 	umull	r2, r3, r3, r1
 80006c2:	095a      	lsrs	r2, r3, #5
 80006c4:	4613      	mov	r3, r2
 80006c6:	011b      	lsls	r3, r3, #4
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	1aca      	subs	r2, r1, r3
 80006ce:	4613      	mov	r3, r2
 80006d0:	633b      	str	r3, [r7, #48]	; 0x30
	breaker.break_time2 = add_clocks(breaker.break_time2,Clock);
 80006d2:	4d65      	ldr	r5, [pc, #404]	; (8000868 <init_breaker+0x2ec>)
 80006d4:	f107 0408 	add.w	r4, r7, #8
 80006d8:	4e63      	ldr	r6, [pc, #396]	; (8000868 <init_breaker+0x2ec>)
 80006da:	4a68      	ldr	r2, [pc, #416]	; (800087c <init_breaker+0x300>)
 80006dc:	466b      	mov	r3, sp
 80006de:	ca07      	ldmia	r2, {r0, r1, r2}
 80006e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80006e4:	f106 0324 	add.w	r3, r6, #36	; 0x24
 80006e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006ea:	4620      	mov	r0, r4
 80006ec:	f000 fb2a 	bl	8000d44 <add_clocks>
 80006f0:	f105 0324 	add.w	r3, r5, #36	; 0x24
 80006f4:	f107 0208 	add.w	r2, r7, #8
 80006f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_time2 = add_clocks(breaker.break_time2,temp_clock2);
 80006fe:	4e5a      	ldr	r6, [pc, #360]	; (8000868 <init_breaker+0x2ec>)
 8000700:	f107 0508 	add.w	r5, r7, #8
 8000704:	4b58      	ldr	r3, [pc, #352]	; (8000868 <init_breaker+0x2ec>)
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	466c      	mov	r4, sp
 800070a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	3324      	adds	r3, #36	; 0x24
 800071a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800071c:	4628      	mov	r0, r5
 800071e:	f000 fb11 	bl	8000d44 <add_clocks>
 8000722:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000726:	f107 0208 	add.w	r2, r7, #8
 800072a:	ca07      	ldmia	r2, {r0, r1, r2}
 800072c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration2.hour = 0;
 8000730:	4b4d      	ldr	r3, [pc, #308]	; (8000868 <init_breaker+0x2ec>)
 8000732:	2200      	movs	r2, #0
 8000734:	631a      	str	r2, [r3, #48]	; 0x30
	breaker.break_duration2.minute = (*random2 % 5);
 8000736:	4b53      	ldr	r3, [pc, #332]	; (8000884 <init_breaker+0x308>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6819      	ldr	r1, [r3, #0]
 800073c:	4b50      	ldr	r3, [pc, #320]	; (8000880 <init_breaker+0x304>)
 800073e:	fba3 2301 	umull	r2, r3, r3, r1
 8000742:	089a      	lsrs	r2, r3, #2
 8000744:	4613      	mov	r3, r2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	4413      	add	r3, r2
 800074a:	1aca      	subs	r2, r1, r3
 800074c:	4b46      	ldr	r3, [pc, #280]	; (8000868 <init_breaker+0x2ec>)
 800074e:	635a      	str	r2, [r3, #52]	; 0x34
	breaker.break_duration2.second = (*random2 % 60);
 8000750:	4b4c      	ldr	r3, [pc, #304]	; (8000884 <init_breaker+0x308>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6819      	ldr	r1, [r3, #0]
 8000756:	4b48      	ldr	r3, [pc, #288]	; (8000878 <init_breaker+0x2fc>)
 8000758:	fba3 2301 	umull	r2, r3, r3, r1
 800075c:	095a      	lsrs	r2, r3, #5
 800075e:	4613      	mov	r3, r2
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	1aca      	subs	r2, r1, r3
 8000768:	4b3f      	ldr	r3, [pc, #252]	; (8000868 <init_breaker+0x2ec>)
 800076a:	639a      	str	r2, [r3, #56]	; 0x38
	//What time the variable for going on break will be assigned
	breaker.start_break[3] = 0;
 800076c:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <init_breaker+0x2ec>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random3);
 8000772:	4b45      	ldr	r3, [pc, #276]	; (8000888 <init_breaker+0x30c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4619      	mov	r1, r3
 8000778:	483d      	ldr	r0, [pc, #244]	; (8000870 <init_breaker+0x2f4>)
 800077a:	f003 feb0 	bl	80044de <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock3 = { .hour = 0, .minute = (30 + (*random3 - 30) % 31), .second = (*random3 % 60)};
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
 8000782:	4b41      	ldr	r3, [pc, #260]	; (8000888 <init_breaker+0x30c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f1a3 011e 	sub.w	r1, r3, #30
 800078c:	4b39      	ldr	r3, [pc, #228]	; (8000874 <init_breaker+0x2f8>)
 800078e:	fba3 2301 	umull	r2, r3, r3, r1
 8000792:	1aca      	subs	r2, r1, r3
 8000794:	0852      	lsrs	r2, r2, #1
 8000796:	4413      	add	r3, r2
 8000798:	091a      	lsrs	r2, r3, #4
 800079a:	4613      	mov	r3, r2
 800079c:	015b      	lsls	r3, r3, #5
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	1aca      	subs	r2, r1, r3
 80007a2:	f102 031e 	add.w	r3, r2, #30
 80007a6:	623b      	str	r3, [r7, #32]
 80007a8:	4b37      	ldr	r3, [pc, #220]	; (8000888 <init_breaker+0x30c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6819      	ldr	r1, [r3, #0]
 80007ae:	4b32      	ldr	r3, [pc, #200]	; (8000878 <init_breaker+0x2fc>)
 80007b0:	fba3 2301 	umull	r2, r3, r3, r1
 80007b4:	095a      	lsrs	r2, r3, #5
 80007b6:	4613      	mov	r3, r2
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	1a9b      	subs	r3, r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	1aca      	subs	r2, r1, r3
 80007c0:	4613      	mov	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	breaker.break_time3 = add_clocks(breaker.break_time3,Clock);
 80007c4:	4d28      	ldr	r5, [pc, #160]	; (8000868 <init_breaker+0x2ec>)
 80007c6:	f107 0408 	add.w	r4, r7, #8
 80007ca:	4e27      	ldr	r6, [pc, #156]	; (8000868 <init_breaker+0x2ec>)
 80007cc:	4a2b      	ldr	r2, [pc, #172]	; (800087c <init_breaker+0x300>)
 80007ce:	466b      	mov	r3, sp
 80007d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80007d6:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 80007da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007dc:	4620      	mov	r0, r4
 80007de:	f000 fab1 	bl	8000d44 <add_clocks>
 80007e2:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 80007e6:	f107 0208 	add.w	r2, r7, #8
 80007ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_time3 = add_clocks(breaker.break_time3,temp_clock3);
 80007f0:	4e1d      	ldr	r6, [pc, #116]	; (8000868 <init_breaker+0x2ec>)
 80007f2:	f107 0508 	add.w	r5, r7, #8
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <init_breaker+0x2ec>)
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	466c      	mov	r4, sp
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000804:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	333c      	adds	r3, #60	; 0x3c
 800080c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800080e:	4628      	mov	r0, r5
 8000810:	f000 fa98 	bl	8000d44 <add_clocks>
 8000814:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 8000818:	f107 0208 	add.w	r2, r7, #8
 800081c:	ca07      	ldmia	r2, {r0, r1, r2}
 800081e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration3.hour = 0;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <init_breaker+0x2ec>)
 8000824:	2200      	movs	r2, #0
 8000826:	649a      	str	r2, [r3, #72]	; 0x48
	breaker.break_duration3.minute = (*random3 % 5);
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <init_breaker+0x30c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	6819      	ldr	r1, [r3, #0]
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <init_breaker+0x304>)
 8000830:	fba3 2301 	umull	r2, r3, r3, r1
 8000834:	089a      	lsrs	r2, r3, #2
 8000836:	4613      	mov	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	1aca      	subs	r2, r1, r3
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <init_breaker+0x2ec>)
 8000840:	64da      	str	r2, [r3, #76]	; 0x4c
	breaker.break_duration3.second = (*random3 % 60);
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <init_breaker+0x30c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6819      	ldr	r1, [r3, #0]
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <init_breaker+0x2fc>)
 800084a:	fba3 2301 	umull	r2, r3, r3, r1
 800084e:	095a      	lsrs	r2, r3, #5
 8000850:	4613      	mov	r3, r2
 8000852:	011b      	lsls	r3, r3, #4
 8000854:	1a9b      	subs	r3, r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	1aca      	subs	r2, r1, r3
 800085a:	4b03      	ldr	r3, [pc, #12]	; (8000868 <init_breaker+0x2ec>)
 800085c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800085e:	bf00      	nop
 8000860:	3744      	adds	r7, #68	; 0x44
 8000862:	46bd      	mov	sp, r7
 8000864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000866:	bf00      	nop
 8000868:	2000007c 	.word	0x2000007c
 800086c:	200000d0 	.word	0x200000d0
 8000870:	200002ac 	.word	0x200002ac
 8000874:	08421085 	.word	0x08421085
 8000878:	88888889 	.word	0x88888889
 800087c:	200000dc 	.word	0x200000dc
 8000880:	cccccccd 	.word	0xcccccccd
 8000884:	200000d4 	.word	0x200000d4
 8000888:	200000d8 	.word	0x200000d8

0800088c <run_breaker>:

void run_breaker(){
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088e:	b095      	sub	sp, #84	; 0x54
 8000890:	af04      	add	r7, sp, #16
	if((!HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)) == 1 ){
 8000892:	2102      	movs	r1, #2
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f002 fa7a 	bl	8002d90 <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d103      	bne.n	80008aa <run_breaker+0x1e>
			  tellers[1].take_break = 1;
 80008a2:	4bb9      	ldr	r3, [pc, #740]	; (8000b88 <run_breaker+0x2fc>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}
	if((!HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin)) == 1 ){
 80008aa:	2110      	movs	r1, #16
 80008ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b0:	f002 fa6e 	bl	8002d90 <HAL_GPIO_ReadPin>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d103      	bne.n	80008c2 <run_breaker+0x36>
			  tellers[2].take_break = 2;
 80008ba:	4bb3      	ldr	r3, [pc, #716]	; (8000b88 <run_breaker+0x2fc>)
 80008bc:	2202      	movs	r2, #2
 80008be:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	}
	if((!HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch2_Pin)) == 1 ){
 80008c2:	2110      	movs	r1, #16
 80008c4:	48b1      	ldr	r0, [pc, #708]	; (8000b8c <run_breaker+0x300>)
 80008c6:	f002 fa63 	bl	8002d90 <HAL_GPIO_ReadPin>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d103      	bne.n	80008d8 <run_breaker+0x4c>
			  tellers[3].take_break = 3;
 80008d0:	4bad      	ldr	r3, [pc, #692]	; (8000b88 <run_breaker+0x2fc>)
 80008d2:	2203      	movs	r2, #3
 80008d4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	}
	if(clock_compare(Clock, breaker.break_time1) == 1){
 80008d8:	4bad      	ldr	r3, [pc, #692]	; (8000b90 <run_breaker+0x304>)
 80008da:	4aae      	ldr	r2, [pc, #696]	; (8000b94 <run_breaker+0x308>)
 80008dc:	466c      	mov	r4, sp
 80008de:	f103 0110 	add.w	r1, r3, #16
 80008e2:	c903      	ldmia	r1, {r0, r1}
 80008e4:	e884 0003 	stmia.w	r4, {r0, r1}
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80008ec:	f000 fa64 	bl	8000db8 <clock_compare>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d103      	bne.n	80008fe <run_breaker+0x72>
		tellers[1].take_break = 1;
 80008f6:	4ba4      	ldr	r3, [pc, #656]	; (8000b88 <run_breaker+0x2fc>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}
	if(clock_compare(Clock, breaker.break_time2) == 1){
 80008fe:	4ba4      	ldr	r3, [pc, #656]	; (8000b90 <run_breaker+0x304>)
 8000900:	4aa4      	ldr	r2, [pc, #656]	; (8000b94 <run_breaker+0x308>)
 8000902:	466c      	mov	r4, sp
 8000904:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8000908:	c903      	ldmia	r1, {r0, r1}
 800090a:	e884 0003 	stmia.w	r4, {r0, r1}
 800090e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000910:	ca07      	ldmia	r2, {r0, r1, r2}
 8000912:	f000 fa51 	bl	8000db8 <clock_compare>
 8000916:	4603      	mov	r3, r0
 8000918:	2b01      	cmp	r3, #1
 800091a:	d103      	bne.n	8000924 <run_breaker+0x98>
		tellers[2].take_break = 1;
 800091c:	4b9a      	ldr	r3, [pc, #616]	; (8000b88 <run_breaker+0x2fc>)
 800091e:	2201      	movs	r2, #1
 8000920:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	}
	if(clock_compare(Clock, breaker.break_time3) == 1){
 8000924:	4b9a      	ldr	r3, [pc, #616]	; (8000b90 <run_breaker+0x304>)
 8000926:	4a9b      	ldr	r2, [pc, #620]	; (8000b94 <run_breaker+0x308>)
 8000928:	466c      	mov	r4, sp
 800092a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800092e:	c903      	ldmia	r1, {r0, r1}
 8000930:	e884 0003 	stmia.w	r4, {r0, r1}
 8000934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000936:	ca07      	ldmia	r2, {r0, r1, r2}
 8000938:	f000 fa3e 	bl	8000db8 <clock_compare>
 800093c:	4603      	mov	r3, r0
 800093e:	2b01      	cmp	r3, #1
 8000940:	d103      	bne.n	800094a <run_breaker+0xbe>
		tellers[3].take_break = 1;
 8000942:	4b91      	ldr	r3, [pc, #580]	; (8000b88 <run_breaker+0x2fc>)
 8000944:	2201      	movs	r2, #1
 8000946:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	}
	if(breaker.start_break[1] == 1){
 800094a:	4b91      	ldr	r3, [pc, #580]	; (8000b90 <run_breaker+0x304>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d178      	bne.n	8000a44 <run_breaker+0x1b8>
		breaker.start_break[1] = 0;
 8000952:	4b8f      	ldr	r3, [pc, #572]	; (8000b90 <run_breaker+0x304>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
		HAL_RNG_GenerateRandomNumber(&hrng,random1);
 8000958:	4b8f      	ldr	r3, [pc, #572]	; (8000b98 <run_breaker+0x30c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	488f      	ldr	r0, [pc, #572]	; (8000b9c <run_breaker+0x310>)
 8000960:	f003 fdbd 	bl	80044de <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock1 = { .hour = 0, .minute = (30 + (*random1 - 30) % 31), .second = (*random1 % 60)};
 8000964:	2300      	movs	r3, #0
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
 8000968:	4b8b      	ldr	r3, [pc, #556]	; (8000b98 <run_breaker+0x30c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f1a3 011e 	sub.w	r1, r3, #30
 8000972:	4b8b      	ldr	r3, [pc, #556]	; (8000ba0 <run_breaker+0x314>)
 8000974:	fba3 2301 	umull	r2, r3, r3, r1
 8000978:	1aca      	subs	r2, r1, r3
 800097a:	0852      	lsrs	r2, r2, #1
 800097c:	4413      	add	r3, r2
 800097e:	091a      	lsrs	r2, r3, #4
 8000980:	4613      	mov	r3, r2
 8000982:	015b      	lsls	r3, r3, #5
 8000984:	1a9b      	subs	r3, r3, r2
 8000986:	1aca      	subs	r2, r1, r3
 8000988:	f102 031e 	add.w	r3, r2, #30
 800098c:	63bb      	str	r3, [r7, #56]	; 0x38
 800098e:	4b82      	ldr	r3, [pc, #520]	; (8000b98 <run_breaker+0x30c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6819      	ldr	r1, [r3, #0]
 8000994:	4b83      	ldr	r3, [pc, #524]	; (8000ba4 <run_breaker+0x318>)
 8000996:	fba3 2301 	umull	r2, r3, r3, r1
 800099a:	095a      	lsrs	r2, r3, #5
 800099c:	4613      	mov	r3, r2
 800099e:	011b      	lsls	r3, r3, #4
 80009a0:	1a9b      	subs	r3, r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	1aca      	subs	r2, r1, r3
 80009a6:	4613      	mov	r3, r2
 80009a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		breaker.break_time1 = add_clocks(breaker.break_time1,Clock);
 80009aa:	4d79      	ldr	r5, [pc, #484]	; (8000b90 <run_breaker+0x304>)
 80009ac:	f107 0408 	add.w	r4, r7, #8
 80009b0:	4e77      	ldr	r6, [pc, #476]	; (8000b90 <run_breaker+0x304>)
 80009b2:	4a78      	ldr	r2, [pc, #480]	; (8000b94 <run_breaker+0x308>)
 80009b4:	466b      	mov	r3, sp
 80009b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80009b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80009bc:	f106 030c 	add.w	r3, r6, #12
 80009c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009c2:	4620      	mov	r0, r4
 80009c4:	f000 f9be 	bl	8000d44 <add_clocks>
 80009c8:	f105 030c 	add.w	r3, r5, #12
 80009cc:	f107 0208 	add.w	r2, r7, #8
 80009d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80009d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time1 = add_clocks(breaker.break_time1,temp_clock1);
 80009d6:	4e6e      	ldr	r6, [pc, #440]	; (8000b90 <run_breaker+0x304>)
 80009d8:	f107 0508 	add.w	r5, r7, #8
 80009dc:	4b6c      	ldr	r3, [pc, #432]	; (8000b90 <run_breaker+0x304>)
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	466c      	mov	r4, sp
 80009e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	330c      	adds	r3, #12
 80009f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009f4:	4628      	mov	r0, r5
 80009f6:	f000 f9a5 	bl	8000d44 <add_clocks>
 80009fa:	f106 030c 	add.w	r3, r6, #12
 80009fe:	f107 0208 	add.w	r2, r7, #8
 8000a02:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration1.hour = 0;
 8000a08:	4b61      	ldr	r3, [pc, #388]	; (8000b90 <run_breaker+0x304>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
		breaker.break_duration1.minute = (*random1 % 5);
 8000a0e:	4b62      	ldr	r3, [pc, #392]	; (8000b98 <run_breaker+0x30c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6819      	ldr	r1, [r3, #0]
 8000a14:	4b64      	ldr	r3, [pc, #400]	; (8000ba8 <run_breaker+0x31c>)
 8000a16:	fba3 2301 	umull	r2, r3, r3, r1
 8000a1a:	089a      	lsrs	r2, r3, #2
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	1aca      	subs	r2, r1, r3
 8000a24:	4b5a      	ldr	r3, [pc, #360]	; (8000b90 <run_breaker+0x304>)
 8000a26:	61da      	str	r2, [r3, #28]
		breaker.break_duration1.second = (*random1 % 60);
 8000a28:	4b5b      	ldr	r3, [pc, #364]	; (8000b98 <run_breaker+0x30c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	6819      	ldr	r1, [r3, #0]
 8000a2e:	4b5d      	ldr	r3, [pc, #372]	; (8000ba4 <run_breaker+0x318>)
 8000a30:	fba3 2301 	umull	r2, r3, r3, r1
 8000a34:	095a      	lsrs	r2, r3, #5
 8000a36:	4613      	mov	r3, r2
 8000a38:	011b      	lsls	r3, r3, #4
 8000a3a:	1a9b      	subs	r3, r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	1aca      	subs	r2, r1, r3
 8000a40:	4b53      	ldr	r3, [pc, #332]	; (8000b90 <run_breaker+0x304>)
 8000a42:	621a      	str	r2, [r3, #32]
	}
	if(breaker.start_break[2] == 1){
 8000a44:	4b52      	ldr	r3, [pc, #328]	; (8000b90 <run_breaker+0x304>)
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d178      	bne.n	8000b3e <run_breaker+0x2b2>
		breaker.start_break[2] = 0;
 8000a4c:	4b50      	ldr	r3, [pc, #320]	; (8000b90 <run_breaker+0x304>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
		HAL_RNG_GenerateRandomNumber(&hrng,random2);
 8000a52:	4b56      	ldr	r3, [pc, #344]	; (8000bac <run_breaker+0x320>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4619      	mov	r1, r3
 8000a58:	4850      	ldr	r0, [pc, #320]	; (8000b9c <run_breaker+0x310>)
 8000a5a:	f003 fd40 	bl	80044de <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock2 = { .hour = 0, .minute = (30 + (*random2 - 30) % 31), .second = (*random2 % 60)};
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a62:	4b52      	ldr	r3, [pc, #328]	; (8000bac <run_breaker+0x320>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f1a3 011e 	sub.w	r1, r3, #30
 8000a6c:	4b4c      	ldr	r3, [pc, #304]	; (8000ba0 <run_breaker+0x314>)
 8000a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8000a72:	1aca      	subs	r2, r1, r3
 8000a74:	0852      	lsrs	r2, r2, #1
 8000a76:	4413      	add	r3, r2
 8000a78:	091a      	lsrs	r2, r3, #4
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	015b      	lsls	r3, r3, #5
 8000a7e:	1a9b      	subs	r3, r3, r2
 8000a80:	1aca      	subs	r2, r1, r3
 8000a82:	f102 031e 	add.w	r3, r2, #30
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a88:	4b48      	ldr	r3, [pc, #288]	; (8000bac <run_breaker+0x320>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	6819      	ldr	r1, [r3, #0]
 8000a8e:	4b45      	ldr	r3, [pc, #276]	; (8000ba4 <run_breaker+0x318>)
 8000a90:	fba3 2301 	umull	r2, r3, r3, r1
 8000a94:	095a      	lsrs	r2, r3, #5
 8000a96:	4613      	mov	r3, r2
 8000a98:	011b      	lsls	r3, r3, #4
 8000a9a:	1a9b      	subs	r3, r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	1aca      	subs	r2, r1, r3
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
		breaker.break_time2 = add_clocks(breaker.break_time2,Clock);
 8000aa4:	4d3a      	ldr	r5, [pc, #232]	; (8000b90 <run_breaker+0x304>)
 8000aa6:	f107 0408 	add.w	r4, r7, #8
 8000aaa:	4e39      	ldr	r6, [pc, #228]	; (8000b90 <run_breaker+0x304>)
 8000aac:	4a39      	ldr	r2, [pc, #228]	; (8000b94 <run_breaker+0x308>)
 8000aae:	466b      	mov	r3, sp
 8000ab0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ab2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ab6:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000abc:	4620      	mov	r0, r4
 8000abe:	f000 f941 	bl	8000d44 <add_clocks>
 8000ac2:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8000ac6:	f107 0208 	add.w	r2, r7, #8
 8000aca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000acc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time2 = add_clocks(breaker.break_time2,temp_clock2);
 8000ad0:	4e2f      	ldr	r6, [pc, #188]	; (8000b90 <run_breaker+0x304>)
 8000ad2:	f107 0508 	add.w	r5, r7, #8
 8000ad6:	4b2e      	ldr	r3, [pc, #184]	; (8000b90 <run_breaker+0x304>)
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	466c      	mov	r4, sp
 8000adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ae4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3324      	adds	r3, #36	; 0x24
 8000aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aee:	4628      	mov	r0, r5
 8000af0:	f000 f928 	bl	8000d44 <add_clocks>
 8000af4:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000af8:	f107 0208 	add.w	r2, r7, #8
 8000afc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000afe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration2.hour = 0;
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <run_breaker+0x304>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	631a      	str	r2, [r3, #48]	; 0x30
		breaker.break_duration2.minute = (*random2 % 5);
 8000b08:	4b28      	ldr	r3, [pc, #160]	; (8000bac <run_breaker+0x320>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6819      	ldr	r1, [r3, #0]
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <run_breaker+0x31c>)
 8000b10:	fba3 2301 	umull	r2, r3, r3, r1
 8000b14:	089a      	lsrs	r2, r3, #2
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	1aca      	subs	r2, r1, r3
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <run_breaker+0x304>)
 8000b20:	635a      	str	r2, [r3, #52]	; 0x34
		breaker.break_duration2.second = (*random2 % 60);
 8000b22:	4b22      	ldr	r3, [pc, #136]	; (8000bac <run_breaker+0x320>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6819      	ldr	r1, [r3, #0]
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <run_breaker+0x318>)
 8000b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8000b2e:	095a      	lsrs	r2, r3, #5
 8000b30:	4613      	mov	r3, r2
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	1a9b      	subs	r3, r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	1aca      	subs	r2, r1, r3
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <run_breaker+0x304>)
 8000b3c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(breaker.start_break[3] == 1){
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <run_breaker+0x304>)
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	f040 8091 	bne.w	8000c6a <run_breaker+0x3de>
		breaker.start_break[3] = 0;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <run_breaker+0x304>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
		HAL_RNG_GenerateRandomNumber(&hrng,random3);
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <run_breaker+0x324>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4619      	mov	r1, r3
 8000b54:	4811      	ldr	r0, [pc, #68]	; (8000b9c <run_breaker+0x310>)
 8000b56:	f003 fcc2 	bl	80044de <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock2 = { .hour = 0, .minute = (30 + (*random3 - 30) % 31), .second = (*random3 % 60)};
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <run_breaker+0x324>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f1a3 011e 	sub.w	r1, r3, #30
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <run_breaker+0x314>)
 8000b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8000b6e:	1aca      	subs	r2, r1, r3
 8000b70:	0852      	lsrs	r2, r2, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	091a      	lsrs	r2, r3, #4
 8000b76:	4613      	mov	r3, r2
 8000b78:	015b      	lsls	r3, r3, #5
 8000b7a:	1a9b      	subs	r3, r3, r2
 8000b7c:	1aca      	subs	r2, r1, r3
 8000b7e:	f102 031e 	add.w	r3, r2, #30
 8000b82:	623b      	str	r3, [r7, #32]
 8000b84:	e016      	b.n	8000bb4 <run_breaker+0x328>
 8000b86:	bf00      	nop
 8000b88:	200003b4 	.word	0x200003b4
 8000b8c:	48000400 	.word	0x48000400
 8000b90:	2000007c 	.word	0x2000007c
 8000b94:	200000dc 	.word	0x200000dc
 8000b98:	200000d0 	.word	0x200000d0
 8000b9c:	200002ac 	.word	0x200002ac
 8000ba0:	08421085 	.word	0x08421085
 8000ba4:	88888889 	.word	0x88888889
 8000ba8:	cccccccd 	.word	0xcccccccd
 8000bac:	200000d4 	.word	0x200000d4
 8000bb0:	200000d8 	.word	0x200000d8
 8000bb4:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <run_breaker+0x3e8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	6819      	ldr	r1, [r3, #0]
 8000bba:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <run_breaker+0x3ec>)
 8000bbc:	fba3 2301 	umull	r2, r3, r3, r1
 8000bc0:	095a      	lsrs	r2, r3, #5
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	011b      	lsls	r3, r3, #4
 8000bc6:	1a9b      	subs	r3, r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	1aca      	subs	r2, r1, r3
 8000bcc:	4613      	mov	r3, r2
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
		breaker.break_time3 = add_clocks(breaker.break_time3,Clock);
 8000bd0:	4d2a      	ldr	r5, [pc, #168]	; (8000c7c <run_breaker+0x3f0>)
 8000bd2:	f107 0408 	add.w	r4, r7, #8
 8000bd6:	4e29      	ldr	r6, [pc, #164]	; (8000c7c <run_breaker+0x3f0>)
 8000bd8:	4a29      	ldr	r2, [pc, #164]	; (8000c80 <run_breaker+0x3f4>)
 8000bda:	466b      	mov	r3, sp
 8000bdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000be2:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 8000be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000be8:	4620      	mov	r0, r4
 8000bea:	f000 f8ab 	bl	8000d44 <add_clocks>
 8000bee:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8000bf2:	f107 0208 	add.w	r2, r7, #8
 8000bf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bf8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time3 = add_clocks(breaker.break_time3,temp_clock2);
 8000bfc:	4e1f      	ldr	r6, [pc, #124]	; (8000c7c <run_breaker+0x3f0>)
 8000bfe:	f107 0508 	add.w	r5, r7, #8
 8000c02:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <run_breaker+0x3f0>)
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	466c      	mov	r4, sp
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	333c      	adds	r3, #60	; 0x3c
 8000c18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c1a:	4628      	mov	r0, r5
 8000c1c:	f000 f892 	bl	8000d44 <add_clocks>
 8000c20:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 8000c24:	f107 0208 	add.w	r2, r7, #8
 8000c28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration3.hour = 0;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <run_breaker+0x3f0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	649a      	str	r2, [r3, #72]	; 0x48
		breaker.break_duration3.minute = (*random2 % 5);
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <run_breaker+0x3f8>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	6819      	ldr	r1, [r3, #0]
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <run_breaker+0x3fc>)
 8000c3c:	fba3 2301 	umull	r2, r3, r3, r1
 8000c40:	089a      	lsrs	r2, r3, #2
 8000c42:	4613      	mov	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	1aca      	subs	r2, r1, r3
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <run_breaker+0x3f0>)
 8000c4c:	64da      	str	r2, [r3, #76]	; 0x4c
		breaker.break_duration3.second = (*random2 % 60);
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <run_breaker+0x3f8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6819      	ldr	r1, [r3, #0]
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <run_breaker+0x3ec>)
 8000c56:	fba3 2301 	umull	r2, r3, r3, r1
 8000c5a:	095a      	lsrs	r2, r3, #5
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	1a9b      	subs	r3, r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	1aca      	subs	r2, r1, r3
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <run_breaker+0x3f0>)
 8000c68:	651a      	str	r2, [r3, #80]	; 0x50
	}

}
 8000c6a:	bf00      	nop
 8000c6c:	3744      	adds	r7, #68	; 0x44
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000d8 	.word	0x200000d8
 8000c78:	88888889 	.word	0x88888889
 8000c7c:	2000007c 	.word	0x2000007c
 8000c80:	200000dc 	.word	0x200000dc
 8000c84:	200000d4 	.word	0x200000d4
 8000c88:	cccccccd 	.word	0xcccccccd

08000c8c <clock_init>:
//The main clock to be checked by the program
//Declare extern within the header file
WallClock Clock;


WallClock clock_init(WallClock the_clock) {
 8000c8c:	b490      	push	{r4, r7}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	4638      	mov	r0, r7
 8000c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Initialize the main clock
	the_clock.hour = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
	the_clock.minute = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
	the_clock.second = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]

	return the_clock;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	461c      	mov	r4, r3
 8000caa:	463b      	mov	r3, r7
 8000cac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc90      	pop	{r4, r7}
 8000cbc:	4770      	bx	lr

08000cbe <day_init>:

WallClock day_init(WallClock the_clock) {
 8000cbe:	b490      	push	{r4, r7}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Initialize the main clock
	the_clock.hour = 9;
 8000ccc:	2309      	movs	r3, #9
 8000cce:	603b      	str	r3, [r7, #0]
	the_clock.minute = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
	the_clock.second = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]

	return the_clock;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	461c      	mov	r4, r3
 8000cdc:	463b      	mov	r3, r7
 8000cde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ce2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc90      	pop	{r4, r7}
 8000cee:	4770      	bx	lr

08000cf0 <clock_increment>:

WallClock clock_increment(WallClock the_clock){
 8000cf0:	b490      	push	{r4, r7}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Check if second is full, if so then increment
	//minute count and reset second count to 0
	//if minute count full increment hour count and reset minutes to 0
	if(the_clock.second >= 59){
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	2b3a      	cmp	r3, #58	; 0x3a
 8000d02:	dd10      	ble.n	8000d26 <clock_increment+0x36>
		the_clock.second -= 59;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	3b3b      	subs	r3, #59	; 0x3b
 8000d08:	60bb      	str	r3, [r7, #8]
		if(the_clock.minute >= 59){
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b3a      	cmp	r3, #58	; 0x3a
 8000d0e:	dd06      	ble.n	8000d1e <clock_increment+0x2e>
			the_clock.minute -= 59;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b3b      	subs	r3, #59	; 0x3b
 8000d14:	607b      	str	r3, [r7, #4]
			the_clock.hour += 1;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	e006      	b.n	8000d2c <clock_increment+0x3c>
		}
		else{
			the_clock.minute += 1;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3301      	adds	r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	e002      	b.n	8000d2c <clock_increment+0x3c>
		}
	}
	else{
		the_clock.second += 1;
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
	}
	return the_clock;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	461c      	mov	r4, r3
 8000d30:	463b      	mov	r3, r7
 8000d32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc90      	pop	{r4, r7}
 8000d42:	4770      	bx	lr

08000d44 <add_clocks>:

WallClock add_clocks(WallClock Clock1, WallClock Clock2){
 8000d44:	b490      	push	{r4, r7}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	4638      	mov	r0, r7
 8000d4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Adds seconds then minutes then hours, accounting for overflows as needed
	//Add seconds and account overflow
	Clock1.second += Clock2.second;
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	4413      	add	r3, r2
 8000d58:	60bb      	str	r3, [r7, #8]
	if(Clock1.second >= 60){
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	2b3b      	cmp	r3, #59	; 0x3b
 8000d5e:	dd0e      	ble.n	8000d7e <add_clocks+0x3a>
		Clock1.minute += 1;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3301      	adds	r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
		Clock1.second -= 60;
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	3b3c      	subs	r3, #60	; 0x3c
 8000d6a:	60bb      	str	r3, [r7, #8]
		if(Clock1.minute >= 60){
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b3b      	cmp	r3, #59	; 0x3b
 8000d70:	dd05      	ble.n	8000d7e <add_clocks+0x3a>
			Clock1.hour += 1;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	603b      	str	r3, [r7, #0]
			Clock1.minute -= 60;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b3c      	subs	r3, #60	; 0x3c
 8000d7c:	607b      	str	r3, [r7, #4]
		}
	}
	//Add minutes and account overflow
	Clock1.minute += Clock2.minute;
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	4413      	add	r3, r2
 8000d84:	607b      	str	r3, [r7, #4]
	if(Clock1.minute >= 60){
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b3b      	cmp	r3, #59	; 0x3b
 8000d8a:	dd05      	ble.n	8000d98 <add_clocks+0x54>
		Clock1.hour += 1;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	603b      	str	r3, [r7, #0]
		Clock1.minute -= 60;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3b3c      	subs	r3, #60	; 0x3c
 8000d96:	607b      	str	r3, [r7, #4]
	}
	//Add hours, don't account overflow as impossible
	Clock1.hour += Clock2.hour;
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	603b      	str	r3, [r7, #0]

	return Clock1;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	461c      	mov	r4, r3
 8000da4:	463b      	mov	r3, r7
 8000da6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000daa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc90      	pop	{r4, r7}
 8000db6:	4770      	bx	lr

08000db8 <clock_compare>:

//if clock 1 is greater than clock 2(later) then return 0
//if clock 1 is less than clock 2(earlier) then return 2
int clock_compare(WallClock Clock1, WallClock Clock2){
 8000db8:	b082      	sub	sp, #8
 8000dba:	b490      	push	{r4, r7}
 8000dbc:	b084      	sub	sp, #16
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	1d3c      	adds	r4, r7, #4
 8000dc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000dc6:	61fb      	str	r3, [r7, #28]
	if(Clock1.hour == Clock2.hour){
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d121      	bne.n	8000e14 <clock_compare+0x5c>
		if(Clock1.minute == Clock2.minute){
 8000dd0:	68ba      	ldr	r2, [r7, #8]
 8000dd2:	6a3b      	ldr	r3, [r7, #32]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d111      	bne.n	8000dfc <clock_compare+0x44>
			if(Clock1.second == Clock2.second){
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d101      	bne.n	8000de4 <clock_compare+0x2c>
				return 1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e024      	b.n	8000e2e <clock_compare+0x76>
			}
			else if(Clock1.second > Clock2.second){
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dd01      	ble.n	8000df0 <clock_compare+0x38>
				return 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e01e      	b.n	8000e2e <clock_compare+0x76>
			}
			else if(Clock1.second < Clock2.second){
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	429a      	cmp	r2, r3
 8000df6:	da19      	bge.n	8000e2c <clock_compare+0x74>
				return 2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	e018      	b.n	8000e2e <clock_compare+0x76>
			}
		}
		else if(Clock1.minute > Clock2.minute){
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	6a3b      	ldr	r3, [r7, #32]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dd01      	ble.n	8000e08 <clock_compare+0x50>
			return 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	e012      	b.n	8000e2e <clock_compare+0x76>
		}
		else if(Clock1.minute < Clock2.minute){
 8000e08:	68ba      	ldr	r2, [r7, #8]
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	da0d      	bge.n	8000e2c <clock_compare+0x74>
			return 2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	e00c      	b.n	8000e2e <clock_compare+0x76>
		}
	}
	else if(Clock1.hour > Clock2.hour){
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dd01      	ble.n	8000e20 <clock_compare+0x68>
		return 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	e006      	b.n	8000e2e <clock_compare+0x76>
	}
	else if(Clock1.hour < Clock2.hour){
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	da01      	bge.n	8000e2c <clock_compare+0x74>
		return 2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	e000      	b.n	8000e2e <clock_compare+0x76>
	}
	return 0;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc90      	pop	{r4, r7}
 8000e36:	b002      	add	sp, #8
 8000e38:	4770      	bx	lr
	...

08000e3c <init_customer>:
Customer* c;
WallClock total_customer_wait;
WallClock max_customer_wait;
int total_customers;

void init_customer(){
 8000e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af04      	add	r7, sp, #16
	total_customers = 0;
 8000e42:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <init_customer+0xd0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
	total_customer_wait = clock_init(total_customer_wait);
 8000e48:	4c31      	ldr	r4, [pc, #196]	; (8000f10 <init_customer+0xd4>)
 8000e4a:	4638      	mov	r0, r7
 8000e4c:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <init_customer+0xd4>)
 8000e4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e50:	f7ff ff1c 	bl	8000c8c <clock_init>
 8000e54:	463b      	mov	r3, r7
 8000e56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	max_customer_waiting = 0;
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <init_customer+0xd8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
	max_customer_wait = clock_init(max_customer_wait);
 8000e64:	4c2c      	ldr	r4, [pc, #176]	; (8000f18 <init_customer+0xdc>)
 8000e66:	4638      	mov	r0, r7
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <init_customer+0xdc>)
 8000e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e6c:	f7ff ff0e 	bl	8000c8c <clock_init>
 8000e70:	463b      	mov	r3, r7
 8000e72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	waiting_customers = 0;
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <init_customer+0xe0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
	HAL_RNG_GenerateRandomNumber(&hrng, random_new_customer);
 8000e80:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <init_customer+0xe4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	4827      	ldr	r0, [pc, #156]	; (8000f24 <init_customer+0xe8>)
 8000e88:	f003 fb29 	bl	80044de <HAL_RNG_GenerateRandomNumber>
	new_customer_time->hour = 0;
 8000e8c:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <init_customer+0xec>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
	new_customer_time->minute = (30 + (*random_new_customer - 30) % 31);
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <init_customer+0xe4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f1a3 011e 	sub.w	r1, r3, #30
 8000e9e:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <init_customer+0xf0>)
 8000ea0:	fba3 2301 	umull	r2, r3, r3, r1
 8000ea4:	1aca      	subs	r2, r1, r3
 8000ea6:	0852      	lsrs	r2, r2, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	091a      	lsrs	r2, r3, #4
 8000eac:	4613      	mov	r3, r2
 8000eae:	015b      	lsls	r3, r3, #5
 8000eb0:	1a9b      	subs	r3, r3, r2
 8000eb2:	1aca      	subs	r2, r1, r3
 8000eb4:	321e      	adds	r2, #30
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <init_customer+0xec>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
	new_customer_time->second = (*random_new_customer % 60);
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <init_customer+0xe4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6819      	ldr	r1, [r3, #0]
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <init_customer+0xf4>)
 8000ec4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ec8:	095a      	lsrs	r2, r3, #5
 8000eca:	4613      	mov	r3, r2
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	1a9b      	subs	r3, r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	1aca      	subs	r2, r1, r3
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <init_customer+0xec>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	609a      	str	r2, [r3, #8]
	*new_customer_time = add_clocks(*new_customer_time, Clock);
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <init_customer+0xec>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <init_customer+0xec>)
 8000ee0:	6816      	ldr	r6, [r2, #0]
 8000ee2:	463d      	mov	r5, r7
 8000ee4:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <init_customer+0xf8>)
 8000ee6:	466c      	mov	r4, sp
 8000ee8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000eee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	f7ff ff27 	bl	8000d44 <add_clocks>
 8000ef6:	4634      	mov	r4, r6
 8000ef8:	463b      	mov	r3, r7
 8000efa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000efe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200002a8 	.word	0x200002a8
 8000f10:	20000290 	.word	0x20000290
 8000f14:	200000e8 	.word	0x200000e8
 8000f18:	2000029c 	.word	0x2000029c
 8000f1c:	200000ec 	.word	0x200000ec
 8000f20:	20000288 	.word	0x20000288
 8000f24:	200002ac 	.word	0x200002ac
 8000f28:	20000280 	.word	0x20000280
 8000f2c:	08421085 	.word	0x08421085
 8000f30:	88888889 	.word	0x88888889
 8000f34:	200000dc 	.word	0x200000dc

08000f38 <run_customer>:


void run_customer(){
 8000f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3a:	b08d      	sub	sp, #52	; 0x34
 8000f3c:	af04      	add	r7, sp, #16
	// shift customers if first customers want to
	if (waiting[0] == NULL){
 8000f3e:	4b60      	ldr	r3, [pc, #384]	; (80010c0 <run_customer+0x188>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d118      	bne.n	8000f78 <run_customer+0x40>
		for (int i = 0; i < waiting_customers; i++){
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e00b      	b.n	8000f64 <run_customer+0x2c>
			waiting[i] = waiting[i+1];
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	4a5b      	ldr	r2, [pc, #364]	; (80010c0 <run_customer+0x188>)
 8000f52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f56:	495a      	ldr	r1, [pc, #360]	; (80010c0 <run_customer+0x188>)
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < waiting_customers; i++){
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3301      	adds	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	4b57      	ldr	r3, [pc, #348]	; (80010c4 <run_customer+0x18c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	69fa      	ldr	r2, [r7, #28]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	dbee      	blt.n	8000f4c <run_customer+0x14>
		}
		waiting_customers--;
 8000f6e:	4b55      	ldr	r3, [pc, #340]	; (80010c4 <run_customer+0x18c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	4a53      	ldr	r2, [pc, #332]	; (80010c4 <run_customer+0x18c>)
 8000f76:	6013      	str	r3, [r2, #0]
	}

	// add new customer if enough time has passed
	if (clock_compare(Clock, *new_customer_time) == 1){
 8000f78:	4b53      	ldr	r3, [pc, #332]	; (80010c8 <run_customer+0x190>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a53      	ldr	r2, [pc, #332]	; (80010cc <run_customer+0x194>)
 8000f7e:	466c      	mov	r4, sp
 8000f80:	1d19      	adds	r1, r3, #4
 8000f82:	c903      	ldmia	r1, {r0, r1}
 8000f84:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f8c:	f7ff ff14 	bl	8000db8 <clock_compare>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	f040 8085 	bne.w	80010a2 <run_customer+0x16a>
		HAL_RNG_GenerateRandomNumber(&hrng, random_service_time);
 8000f98:	4b4d      	ldr	r3, [pc, #308]	; (80010d0 <run_customer+0x198>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	484d      	ldr	r0, [pc, #308]	; (80010d4 <run_customer+0x19c>)
 8000fa0:	f003 fa9d 	bl	80044de <HAL_RNG_GenerateRandomNumber>
		WallClock service_time = { .hour = 0, .minute = (30 + (*random_service_time - 30) % 31), .second = (*random_service_time % 60)};
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	4b49      	ldr	r3, [pc, #292]	; (80010d0 <run_customer+0x198>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f1a3 011e 	sub.w	r1, r3, #30
 8000fb2:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <run_customer+0x1a0>)
 8000fb4:	fba3 2301 	umull	r2, r3, r3, r1
 8000fb8:	1aca      	subs	r2, r1, r3
 8000fba:	0852      	lsrs	r2, r2, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	091a      	lsrs	r2, r3, #4
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	015b      	lsls	r3, r3, #5
 8000fc4:	1a9b      	subs	r3, r3, r2
 8000fc6:	1aca      	subs	r2, r1, r3
 8000fc8:	f102 031e 	add.w	r3, r2, #30
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	4b40      	ldr	r3, [pc, #256]	; (80010d0 <run_customer+0x198>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6819      	ldr	r1, [r3, #0]
 8000fd4:	4b41      	ldr	r3, [pc, #260]	; (80010dc <run_customer+0x1a4>)
 8000fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8000fda:	095a      	lsrs	r2, r3, #5
 8000fdc:	4613      	mov	r3, r2
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	1a9b      	subs	r3, r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	1aca      	subs	r2, r1, r3
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
		c->service_time = service_time;
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <run_customer+0x1a8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3304      	adds	r3, #4
 8000ff0:	f107 0210 	add.w	r2, r7, #16
 8000ff4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ff6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		c->entered_queue_time = Clock;
 8000ffa:	4b39      	ldr	r3, [pc, #228]	; (80010e0 <run_customer+0x1a8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a33      	ldr	r2, [pc, #204]	; (80010cc <run_customer+0x194>)
 8001000:	3310      	adds	r3, #16
 8001002:	ca07      	ldmia	r2, {r0, r1, r2}
 8001004:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		waiting[waiting_customers] = c;
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <run_customer+0x18c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a34      	ldr	r2, [pc, #208]	; (80010e0 <run_customer+0x1a8>)
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	492b      	ldr	r1, [pc, #172]	; (80010c0 <run_customer+0x188>)
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_RNG_GenerateRandomNumber(&hrng, random_new_customer);
 8001016:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <run_customer+0x1ac>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	482d      	ldr	r0, [pc, #180]	; (80010d4 <run_customer+0x19c>)
 800101e:	f003 fa5e 	bl	80044de <HAL_RNG_GenerateRandomNumber>
		new_customer_time->hour = 0;
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <run_customer+0x190>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
		new_customer_time->minute = (30 + (*random_new_customer - 30) % 31);
 800102a:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <run_customer+0x1ac>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f1a3 011e 	sub.w	r1, r3, #30
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <run_customer+0x1a0>)
 8001036:	fba3 2301 	umull	r2, r3, r3, r1
 800103a:	1aca      	subs	r2, r1, r3
 800103c:	0852      	lsrs	r2, r2, #1
 800103e:	4413      	add	r3, r2
 8001040:	091a      	lsrs	r2, r3, #4
 8001042:	4613      	mov	r3, r2
 8001044:	015b      	lsls	r3, r3, #5
 8001046:	1a9b      	subs	r3, r3, r2
 8001048:	1aca      	subs	r2, r1, r3
 800104a:	321e      	adds	r2, #30
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <run_customer+0x190>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
		new_customer_time->second = (*random_new_customer % 60);
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <run_customer+0x1ac>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6819      	ldr	r1, [r3, #0]
 8001058:	4b20      	ldr	r3, [pc, #128]	; (80010dc <run_customer+0x1a4>)
 800105a:	fba3 2301 	umull	r2, r3, r3, r1
 800105e:	095a      	lsrs	r2, r3, #5
 8001060:	4613      	mov	r3, r2
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	1aca      	subs	r2, r1, r3
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <run_customer+0x190>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	609a      	str	r2, [r3, #8]
		*new_customer_time = add_clocks(*new_customer_time, Clock);
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <run_customer+0x190>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <run_customer+0x190>)
 8001076:	6816      	ldr	r6, [r2, #0]
 8001078:	463d      	mov	r5, r7
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <run_customer+0x194>)
 800107c:	466c      	mov	r4, sp
 800107e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001080:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001084:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001086:	4628      	mov	r0, r5
 8001088:	f7ff fe5c 	bl	8000d44 <add_clocks>
 800108c:	4634      	mov	r4, r6
 800108e:	463b      	mov	r3, r7
 8001090:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001094:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		total_customers += 1;
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <run_customer+0x1b0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <run_customer+0x1b0>)
 80010a0:	6013      	str	r3, [r2, #0]
	}

	// update max customers waiting
	if (max_customer_waiting < waiting_customers){
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <run_customer+0x1b4>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <run_customer+0x18c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	da03      	bge.n	80010b6 <run_customer+0x17e>
		max_customer_waiting = waiting_customers;
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <run_customer+0x18c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <run_customer+0x1b4>)
 80010b4:	6013      	str	r3, [r2, #0]
	}
}
 80010b6:	bf00      	nop
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010be:	bf00      	nop
 80010c0:	200000f0 	.word	0x200000f0
 80010c4:	200000ec 	.word	0x200000ec
 80010c8:	20000280 	.word	0x20000280
 80010cc:	200000dc 	.word	0x200000dc
 80010d0:	20000284 	.word	0x20000284
 80010d4:	200002ac 	.word	0x200002ac
 80010d8:	08421085 	.word	0x08421085
 80010dc:	88888889 	.word	0x88888889
 80010e0:	2000028c 	.word	0x2000028c
 80010e4:	20000288 	.word	0x20000288
 80010e8:	200002a8 	.word	0x200002a8
 80010ec:	200000e8 	.word	0x200000e8

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f001 fb14 	bl	8002720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f862 	bl	80011c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fc:	f000 f92c 	bl	8001358 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001100:	f000 f8fa 	bl	80012f8 <MX_USART2_UART_Init>
  MX_RNG_Init();
 8001104:	f000 f8ae 	bl	8001264 <MX_RNG_Init>
  MX_TIM6_Init();
 8001108:	f000 f8c0 	bl	800128c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800110c:	481a      	ldr	r0, [pc, #104]	; (8001178 <main+0x88>)
 800110e:	f003 fb13 	bl	8004738 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001112:	f004 fbc5 	bl	80058a0 <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 8001116:	4819      	ldr	r0, [pc, #100]	; (800117c <main+0x8c>)
 8001118:	f004 fcb9 	bl	8005a8e <osMutexNew>
 800111c:	4603      	mov	r3, r0
 800111e:	4a18      	ldr	r2, [pc, #96]	; (8001180 <main+0x90>)
 8001120:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tellers */
  TellersHandle = osThreadNew(StartTellers, NULL, &Tellers_attributes);
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <main+0x94>)
 8001124:	2100      	movs	r1, #0
 8001126:	4818      	ldr	r0, [pc, #96]	; (8001188 <main+0x98>)
 8001128:	f004 fc04 	bl	8005934 <osThreadNew>
 800112c:	4603      	mov	r3, r0
 800112e:	4a17      	ldr	r2, [pc, #92]	; (800118c <main+0x9c>)
 8001130:	6013      	str	r3, [r2, #0]

  /* creation of Customers */
  CustomersHandle = osThreadNew(StartCustomers, NULL, &Customers_attributes);
 8001132:	4a17      	ldr	r2, [pc, #92]	; (8001190 <main+0xa0>)
 8001134:	2100      	movs	r1, #0
 8001136:	4817      	ldr	r0, [pc, #92]	; (8001194 <main+0xa4>)
 8001138:	f004 fbfc 	bl	8005934 <osThreadNew>
 800113c:	4603      	mov	r3, r0
 800113e:	4a16      	ldr	r2, [pc, #88]	; (8001198 <main+0xa8>)
 8001140:	6013      	str	r3, [r2, #0]

  /* creation of Clock */
  ClockHandle = osThreadNew(StartClock, NULL, &Clock_attributes);
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <main+0xac>)
 8001144:	2100      	movs	r1, #0
 8001146:	4816      	ldr	r0, [pc, #88]	; (80011a0 <main+0xb0>)
 8001148:	f004 fbf4 	bl	8005934 <osThreadNew>
 800114c:	4603      	mov	r3, r0
 800114e:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <main+0xb4>)
 8001150:	6013      	str	r3, [r2, #0]

  /* creation of Manager */
  ManagerHandle = osThreadNew(StartManager, NULL, &Manager_attributes);
 8001152:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <main+0xb8>)
 8001154:	2100      	movs	r1, #0
 8001156:	4815      	ldr	r0, [pc, #84]	; (80011ac <main+0xbc>)
 8001158:	f004 fbec 	bl	8005934 <osThreadNew>
 800115c:	4603      	mov	r3, r0
 800115e:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <main+0xc0>)
 8001160:	6013      	str	r3, [r2, #0]

  /* creation of Breaker */
  BreakerHandle = osThreadNew(StartBreaker, NULL, &Breaker_attributes);
 8001162:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <main+0xc4>)
 8001164:	2100      	movs	r1, #0
 8001166:	4814      	ldr	r0, [pc, #80]	; (80011b8 <main+0xc8>)
 8001168:	f004 fbe4 	bl	8005934 <osThreadNew>
 800116c:	4603      	mov	r3, r0
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <main+0xcc>)
 8001170:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001172:	f004 fbb9 	bl	80058e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001176:	e7fe      	b.n	8001176 <main+0x86>
 8001178:	200002bc 	.word	0x200002bc
 800117c:	08009668 	.word	0x08009668
 8001180:	200003a4 	.word	0x200003a4
 8001184:	080095b4 	.word	0x080095b4
 8001188:	080014b1 	.word	0x080014b1
 800118c:	20000390 	.word	0x20000390
 8001190:	080095d8 	.word	0x080095d8
 8001194:	080014f9 	.word	0x080014f9
 8001198:	20000394 	.word	0x20000394
 800119c:	080095fc 	.word	0x080095fc
 80011a0:	08001541 	.word	0x08001541
 80011a4:	20000398 	.word	0x20000398
 80011a8:	08009620 	.word	0x08009620
 80011ac:	080015b9 	.word	0x080015b9
 80011b0:	2000039c 	.word	0x2000039c
 80011b4:	08009644 	.word	0x08009644
 80011b8:	080015c9 	.word	0x080015c9
 80011bc:	200003a0 	.word	0x200003a0

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b096      	sub	sp, #88	; 0x58
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	2244      	movs	r2, #68	; 0x44
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 fd04 	bl	8008bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011e6:	f001 fe11 	bl	8002e0c <HAL_PWREx_ControlVoltageScaling>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011f0:	f000 fa0e 	bl	8001610 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f4:	2302      	movs	r3, #2
 80011f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fe:	2310      	movs	r3, #16
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001202:	2302      	movs	r3, #2
 8001204:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001206:	2302      	movs	r3, #2
 8001208:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800120a:	2301      	movs	r3, #1
 800120c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800120e:	230a      	movs	r3, #10
 8001210:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001212:	2307      	movs	r3, #7
 8001214:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001216:	2302      	movs	r3, #2
 8001218:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800121a:	2302      	movs	r3, #2
 800121c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4618      	mov	r0, r3
 8001224:	f001 fe48 	bl	8002eb8 <HAL_RCC_OscConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800122e:	f000 f9ef 	bl	8001610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001232:	230f      	movs	r3, #15
 8001234:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001236:	2303      	movs	r3, #3
 8001238:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001246:	463b      	mov	r3, r7
 8001248:	2104      	movs	r1, #4
 800124a:	4618      	mov	r0, r3
 800124c:	f002 fa10 	bl	8003670 <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001256:	f000 f9db 	bl	8001610 <Error_Handler>
  }
}
 800125a:	bf00      	nop
 800125c:	3758      	adds	r7, #88	; 0x58
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_RNG_Init+0x20>)
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <MX_RNG_Init+0x24>)
 800126c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_RNG_Init+0x20>)
 8001270:	f003 f8de 	bl	8004430 <HAL_RNG_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800127a:	f000 f9c9 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200002ac 	.word	0x200002ac
 8001288:	50060800 	.word	0x50060800

0800128c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_TIM6_Init+0x64>)
 800129e:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <MX_TIM6_Init+0x68>)
 80012a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 666;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_TIM6_Init+0x64>)
 80012a4:	f240 229a 	movw	r2, #666	; 0x29a
 80012a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_TIM6_Init+0x64>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 222;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_TIM6_Init+0x64>)
 80012b2:	22de      	movs	r2, #222	; 0xde
 80012b4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_TIM6_Init+0x64>)
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <MX_TIM6_Init+0x64>)
 80012be:	f003 f9e3 	bl	8004688 <HAL_TIM_Base_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012c8:	f000 f9a2 	bl	8001610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_TIM6_Init+0x64>)
 80012da:	f003 fc61 	bl	8004ba0 <HAL_TIMEx_MasterConfigSynchronization>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80012e4:	f000 f994 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200002bc 	.word	0x200002bc
 80012f4:	40001000 	.word	0x40001000

080012f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_USART2_UART_Init+0x58>)
 80012fe:	4a15      	ldr	r2, [pc, #84]	; (8001354 <MX_USART2_UART_Init+0x5c>)
 8001300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART2_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART2_UART_Init+0x58>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART2_UART_Init+0x58>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART2_UART_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_USART2_UART_Init+0x58>)
 800133c:	f003 fcd6 	bl	8004cec <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001346:	f000 f963 	bl	8001610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000308 	.word	0x20000308
 8001354:	40004400 	.word	0x40004400

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	4b45      	ldr	r3, [pc, #276]	; (8001484 <MX_GPIO_Init+0x12c>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a44      	ldr	r2, [pc, #272]	; (8001484 <MX_GPIO_Init+0x12c>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b42      	ldr	r3, [pc, #264]	; (8001484 <MX_GPIO_Init+0x12c>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001386:	4b3f      	ldr	r3, [pc, #252]	; (8001484 <MX_GPIO_Init+0x12c>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a3e      	ldr	r2, [pc, #248]	; (8001484 <MX_GPIO_Init+0x12c>)
 800138c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <MX_GPIO_Init+0x12c>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b39      	ldr	r3, [pc, #228]	; (8001484 <MX_GPIO_Init+0x12c>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a38      	ldr	r2, [pc, #224]	; (8001484 <MX_GPIO_Init+0x12c>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b36      	ldr	r3, [pc, #216]	; (8001484 <MX_GPIO_Init+0x12c>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	4b33      	ldr	r3, [pc, #204]	; (8001484 <MX_GPIO_Init+0x12c>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4a32      	ldr	r2, [pc, #200]	; (8001484 <MX_GPIO_Init+0x12c>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <MX_GPIO_Init+0x12c>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2120      	movs	r1, #32
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d6:	f001 fcf3 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4825      	ldr	r0, [pc, #148]	; (8001488 <MX_GPIO_Init+0x130>)
 80013f2:	f001 fb23 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013f6:	2303      	movs	r3, #3
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fa:	2303      	movs	r3, #3
 80013fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	481f      	ldr	r0, [pc, #124]	; (8001488 <MX_GPIO_Init+0x130>)
 800140a:	f001 fb17 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 Switch1_Pin Switch2_Pin PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Switch1_Pin|Switch2_Pin|GPIO_PIN_10;
 800140e:	f240 4313 	movw	r3, #1043	; 0x413
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f001 fb09 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800142a:	2320      	movs	r3, #32
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001444:	f001 fafa 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch3_Pin PB10 PB4 */
  GPIO_InitStruct.Pin = Switch3_Pin|GPIO_PIN_10|GPIO_PIN_4;
 8001448:	f240 4311 	movw	r3, #1041	; 0x411
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	480b      	ldr	r0, [pc, #44]	; (800148c <MX_GPIO_Init+0x134>)
 800145e:	f001 faed 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <MX_GPIO_Init+0x130>)
 8001476:	f001 fae1 	bl	8002a3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	48000800 	.word	0x48000800
 800148c:	48000400 	.word	0x48000400

08001490 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	update_flag = 1;
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	200003a8 	.word	0x200003a8

080014b0 <StartTellers>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTellers */
void StartTellers(void *argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Initialize 3 tellers
  /* Infinite loop */
	initialize_tellers();
 80014b8:	f000 fa26 	bl	8001908 <initialize_tellers>
  for(;;)
  {
	if(update_flag == 1){
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <StartTellers+0x3c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d1fb      	bne.n	80014bc <StartTellers+0xc>
    osMutexAcquire(MUTEXHandle, osWaitForever);
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <StartTellers+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	4618      	mov	r0, r3
 80014ce:	f004 fb64 	bl	8005b9a <osMutexAcquire>
    manage_tellers();
 80014d2:	f000 fb9f 	bl	8001c14 <manage_tellers>
    osMutexRelease(MUTEXHandle);
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <StartTellers+0x40>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 fba8 	bl	8005c30 <osMutexRelease>
    threads_ran += 1;
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <StartTellers+0x44>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	4a03      	ldr	r2, [pc, #12]	; (80014f4 <StartTellers+0x44>)
 80014e8:	6013      	str	r3, [r2, #0]
	if(update_flag == 1){
 80014ea:	e7e7      	b.n	80014bc <StartTellers+0xc>
 80014ec:	200003a8 	.word	0x200003a8
 80014f0:	200003a4 	.word	0x200003a4
 80014f4:	200003ac 	.word	0x200003ac

080014f8 <StartCustomers>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCustomers */
void StartCustomers(void *argument)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCustomers */
  /* Infinite loop */
  init_customer();
 8001500:	f7ff fc9c 	bl	8000e3c <init_customer>
  for(;;)
  {
    if(update_flag == 1){
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <StartCustomers+0x3c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d1fb      	bne.n	8001504 <StartCustomers+0xc>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <StartCustomers+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	4618      	mov	r0, r3
 8001516:	f004 fb40 	bl	8005b9a <osMutexAcquire>
	run_customer();
 800151a:	f7ff fd0d 	bl	8000f38 <run_customer>
	osMutexRelease(MUTEXHandle);
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <StartCustomers+0x40>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f004 fb84 	bl	8005c30 <osMutexRelease>
	threads_ran += 1;
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <StartCustomers+0x44>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	4a03      	ldr	r2, [pc, #12]	; (800153c <StartCustomers+0x44>)
 8001530:	6013      	str	r3, [r2, #0]
    if(update_flag == 1){
 8001532:	e7e7      	b.n	8001504 <StartCustomers+0xc>
 8001534:	200003a8 	.word	0x200003a8
 8001538:	200003a4 	.word	0x200003a4
 800153c:	200003ac 	.word	0x200003ac

08001540 <StartClock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClock */
void StartClock(void *argument)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b087      	sub	sp, #28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartClock */
  /* Infinite loop */
	Clock = day_init(Clock);
 8001548:	4c17      	ldr	r4, [pc, #92]	; (80015a8 <StartClock+0x68>)
 800154a:	4638      	mov	r0, r7
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <StartClock+0x68>)
 800154e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001550:	f7ff fbb5 	bl	8000cbe <day_init>
 8001554:	463b      	mov	r3, r7
 8001556:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800155a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  for(;;)
  {
	if(update_flag == 1){
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <StartClock+0x6c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d11b      	bne.n	800159e <StartClock+0x5e>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <StartClock+0x70>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f04f 31ff 	mov.w	r1, #4294967295
 800156e:	4618      	mov	r0, r3
 8001570:	f004 fb13 	bl	8005b9a <osMutexAcquire>
    Clock = clock_increment(Clock);
 8001574:	4c0c      	ldr	r4, [pc, #48]	; (80015a8 <StartClock+0x68>)
 8001576:	4638      	mov	r0, r7
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <StartClock+0x68>)
 800157a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800157c:	f7ff fbb8 	bl	8000cf0 <clock_increment>
 8001580:	463b      	mov	r3, r7
 8001582:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osMutexRelease(MUTEXHandle);
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <StartClock+0x70>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f004 fb4e 	bl	8005c30 <osMutexRelease>
    threads_ran += 1;
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <StartClock+0x74>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <StartClock+0x74>)
 800159c:	6013      	str	r3, [r2, #0]
	}
//	if(threads_ran == 4){
		update_flag = 0;
 800159e:	4b03      	ldr	r3, [pc, #12]	; (80015ac <StartClock+0x6c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
	if(update_flag == 1){
 80015a4:	e7db      	b.n	800155e <StartClock+0x1e>
 80015a6:	bf00      	nop
 80015a8:	200000dc 	.word	0x200000dc
 80015ac:	200003a8 	.word	0x200003a8
 80015b0:	200003a4 	.word	0x200003a4
 80015b4:	200003ac 	.word	0x200003ac

080015b8 <StartManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManager */
void StartManager(void *argument)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManager */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f004 fa49 	bl	8005a58 <osDelay>
 80015c6:	e7fb      	b.n	80015c0 <StartManager+0x8>

080015c8 <StartBreaker>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBreaker */
void StartBreaker(void *argument)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBreaker */
  /* Infinite loop */
	init_breaker();
 80015d0:	f7fe ffd4 	bl	800057c <init_breaker>
  for(;;)
  {
	    if(update_flag == 1){
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <StartBreaker+0x3c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d1fb      	bne.n	80015d4 <StartBreaker+0xc>
	    osMutexAcquire(MUTEXHandle, osWaitForever);
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <StartBreaker+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	4618      	mov	r0, r3
 80015e6:	f004 fad8 	bl	8005b9a <osMutexAcquire>
	    run_breaker();
 80015ea:	f7ff f94f 	bl	800088c <run_breaker>
	    osMutexRelease(MUTEXHandle);
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <StartBreaker+0x40>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 fb1c 	bl	8005c30 <osMutexRelease>
	    threads_ran += 1;
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <StartBreaker+0x44>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	4a03      	ldr	r2, [pc, #12]	; (800160c <StartBreaker+0x44>)
 8001600:	6013      	str	r3, [r2, #0]
	    if(update_flag == 1){
 8001602:	e7e7      	b.n	80015d4 <StartBreaker+0xc>
 8001604:	200003a8 	.word	0x200003a8
 8001608:	200003a4 	.word	0x200003a4
 800160c:	200003ac 	.word	0x200003ac

08001610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
}
 8001616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001618:	e7fe      	b.n	8001618 <Error_Handler+0x8>
	...

0800161c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_MspInit+0x4c>)
 8001624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001626:	4a10      	ldr	r2, [pc, #64]	; (8001668 <HAL_MspInit+0x4c>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6613      	str	r3, [r2, #96]	; 0x60
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_MspInit+0x4c>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_MspInit+0x4c>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_MspInit+0x4c>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6593      	str	r3, [r2, #88]	; 0x58
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_MspInit+0x4c>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	210f      	movs	r1, #15
 8001656:	f06f 0001 	mvn.w	r0, #1
 800165a:	f001 f9b8 	bl	80029ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000

0800166c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b0a6      	sub	sp, #152	; 0x98
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	2288      	movs	r2, #136	; 0x88
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f007 faad 	bl	8008bdc <memset>
  if(hrng->Instance==RNG)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1d      	ldr	r2, [pc, #116]	; (80016fc <HAL_RNG_MspInit+0x90>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d133      	bne.n	80016f4 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800168c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001690:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001692:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001696:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800169a:	2302      	movs	r3, #2
 800169c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800169e:	2301      	movs	r3, #1
 80016a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80016a2:	2308      	movs	r3, #8
 80016a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016a6:	2307      	movs	r3, #7
 80016a8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80016aa:	2304      	movs	r3, #4
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80016b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	4618      	mov	r0, r3
 80016be:	f002 f9fb 	bl	8003ab8 <HAL_RCCEx_PeriphCLKConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 80016c8:	f7ff ffa2 	bl	8001610 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_RNG_MspInit+0x94>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <HAL_RNG_MspInit+0x94>)
 80016d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_RNG_MspInit+0x94>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 5, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2105      	movs	r1, #5
 80016e8:	2050      	movs	r0, #80	; 0x50
 80016ea:	f001 f970 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 80016ee:	2050      	movs	r0, #80	; 0x50
 80016f0:	f001 f989 	bl	8002a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	3798      	adds	r7, #152	; 0x98
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	50060800 	.word	0x50060800
 8001700:	40021000 	.word	0x40021000

08001704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <HAL_TIM_Base_MspInit+0x44>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d113      	bne.n	800173e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_TIM_Base_MspInit+0x48>)
 8001718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171a:	4a0c      	ldr	r2, [pc, #48]	; (800174c <HAL_TIM_Base_MspInit+0x48>)
 800171c:	f043 0310 	orr.w	r3, r3, #16
 8001720:	6593      	str	r3, [r2, #88]	; 0x58
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_TIM_Base_MspInit+0x48>)
 8001724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2105      	movs	r1, #5
 8001732:	2036      	movs	r0, #54	; 0x36
 8001734:	f001 f94b 	bl	80029ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001738:	2036      	movs	r0, #54	; 0x36
 800173a:	f001 f964 	bl	8002a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40001000 	.word	0x40001000
 800174c:	40021000 	.word	0x40021000

08001750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0ac      	sub	sp, #176	; 0xb0
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2288      	movs	r2, #136	; 0x88
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f007 fa33 	bl	8008bdc <memset>
  if(huart->Instance==USART2)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a21      	ldr	r2, [pc, #132]	; (8001800 <HAL_UART_MspInit+0xb0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d13b      	bne.n	80017f8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001780:	2302      	movs	r3, #2
 8001782:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001784:	2300      	movs	r3, #0
 8001786:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4618      	mov	r0, r3
 800178e:	f002 f993 	bl	8003ab8 <HAL_RCCEx_PeriphCLKConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001798:	f7ff ff3a 	bl	8001610 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_UART_MspInit+0xb4>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a6:	6593      	str	r3, [r2, #88]	; 0x58
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_UART_MspInit+0xb4>)
 80017c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017cc:	230c      	movs	r3, #12
 80017ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017e4:	2307      	movs	r3, #7
 80017e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f4:	f001 f922 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017f8:	bf00      	nop
 80017fa:	37b0      	adds	r7, #176	; 0xb0
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40004400 	.word	0x40004400
 8001804:	40021000 	.word	0x40021000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001838:	f000 ffce 	bl	80027d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800183c:	f006 f84c 	bl	80078d8 <xTaskGetSchedulerState>
 8001840:	4603      	mov	r3, r0
 8001842:	2b01      	cmp	r3, #1
 8001844:	d001      	beq.n	800184a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001846:	f006 ff2f 	bl	80086a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <TIM6_DAC_IRQHandler+0x10>)
 8001856:	f002 ffdf 	bl	8004818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200002bc 	.word	0x200002bc

08001864 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <RNG_IRQHandler+0x10>)
 800186a:	f002 fe8e 	bl	800458a <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200002ac 	.word	0x200002ac

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f007 f9a0 	bl	8008bec <__errno>
 80018ac:	4603      	mov	r3, r0
 80018ae:	220c      	movs	r2, #12
 80018b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20018000 	.word	0x20018000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	200003b0 	.word	0x200003b0
 80018e0:	200071f0 	.word	0x200071f0

080018e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <SystemInit+0x20>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <SystemInit+0x20>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <initialize_tellers>:

Teller VOID_TELLER;
//fix this
Teller teller_wait[4];

void initialize_tellers(void) {
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
    for (int i = 1; i < 4; i++) {
 800190e:	2301      	movs	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e167      	b.n	8001be4 <initialize_tellers+0x2dc>
    	//Initialize ID
        tellers[i].id = i;
 8001914:	4abc      	ldr	r2, [pc, #752]	; (8001c08 <initialize_tellers+0x300>)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	21a4      	movs	r1, #164	; 0xa4
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4413      	add	r3, r2
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	601a      	str	r2, [r3, #0]
        // Initialize statuses
        tellers[i].status = 0;
 8001924:	4ab8      	ldr	r2, [pc, #736]	; (8001c08 <initialize_tellers+0x300>)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	21a4      	movs	r1, #164	; 0xa4
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	4413      	add	r3, r2
 8001930:	3304      	adds	r3, #4
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
        tellers[i].take_break = 0;
 8001936:	4ab4      	ldr	r2, [pc, #720]	; (8001c08 <initialize_tellers+0x300>)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	21a4      	movs	r1, #164	; 0xa4
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	4413      	add	r3, r2
 8001942:	3308      	adds	r3, #8
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
        //service function
        tellers[i].service_end_time = clock_init(tellers[i].service_end_time);
 8001948:	4aaf      	ldr	r2, [pc, #700]	; (8001c08 <initialize_tellers+0x300>)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	21a4      	movs	r1, #164	; 0xa4
 800194e:	fb01 f303 	mul.w	r3, r1, r3
 8001952:	4413      	add	r3, r2
 8001954:	f103 0408 	add.w	r4, r3, #8
 8001958:	4638      	mov	r0, r7
 800195a:	4aab      	ldr	r2, [pc, #684]	; (8001c08 <initialize_tellers+0x300>)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	21a4      	movs	r1, #164	; 0xa4
 8001960:	fb01 f303 	mul.w	r3, r1, r3
 8001964:	4413      	add	r3, r2
 8001966:	3308      	adds	r3, #8
 8001968:	3304      	adds	r3, #4
 800196a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800196c:	f7ff f98e 	bl	8000c8c <clock_init>
 8001970:	1d23      	adds	r3, r4, #4
 8001972:	463a      	mov	r2, r7
 8001974:	ca07      	ldmia	r2, {r0, r1, r2}
 8001976:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize metrics
        tellers[i].customers_served = 0;
 800197a:	4aa3      	ldr	r2, [pc, #652]	; (8001c08 <initialize_tellers+0x300>)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	21a4      	movs	r1, #164	; 0xa4
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3318      	adds	r3, #24
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
        tellers[i].total_time_working = clock_init(tellers[i].total_time_working);
 800198c:	4a9e      	ldr	r2, [pc, #632]	; (8001c08 <initialize_tellers+0x300>)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	21a4      	movs	r1, #164	; 0xa4
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	f103 0418 	add.w	r4, r3, #24
 800199c:	4638      	mov	r0, r7
 800199e:	4a9a      	ldr	r2, [pc, #616]	; (8001c08 <initialize_tellers+0x300>)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	21a4      	movs	r1, #164	; 0xa4
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	3318      	adds	r3, #24
 80019ac:	3304      	adds	r3, #4
 80019ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019b0:	f7ff f96c 	bl	8000c8c <clock_init>
 80019b4:	1d23      	adds	r3, r4, #4
 80019b6:	463a      	mov	r2, r7
 80019b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].total_time_waiting = clock_init(tellers[i].total_time_waiting);
 80019be:	4a92      	ldr	r2, [pc, #584]	; (8001c08 <initialize_tellers+0x300>)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	21a4      	movs	r1, #164	; 0xa4
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80019ce:	4638      	mov	r0, r7
 80019d0:	4a8d      	ldr	r2, [pc, #564]	; (8001c08 <initialize_tellers+0x300>)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	21a4      	movs	r1, #164	; 0xa4
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	3328      	adds	r3, #40	; 0x28
 80019de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e0:	f7ff f954 	bl	8000c8c <clock_init>
 80019e4:	463b      	mov	r3, r7
 80019e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].current_time_working = clock_init(tellers[i].current_time_working);
 80019ee:	4a86      	ldr	r2, [pc, #536]	; (8001c08 <initialize_tellers+0x300>)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	21a4      	movs	r1, #164	; 0xa4
 80019f4:	fb01 f303 	mul.w	r3, r1, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80019fe:	4638      	mov	r0, r7
 8001a00:	4a81      	ldr	r2, [pc, #516]	; (8001c08 <initialize_tellers+0x300>)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	21a4      	movs	r1, #164	; 0xa4
 8001a06:	fb01 f303 	mul.w	r3, r1, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3330      	adds	r3, #48	; 0x30
 8001a0e:	3304      	adds	r3, #4
 8001a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a12:	f7ff f93b 	bl	8000c8c <clock_init>
 8001a16:	1d23      	adds	r3, r4, #4
 8001a18:	463a      	mov	r2, r7
 8001a1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 8001a20:	4a79      	ldr	r2, [pc, #484]	; (8001c08 <initialize_tellers+0x300>)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	21a4      	movs	r1, #164	; 0xa4
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001a30:	4638      	mov	r0, r7
 8001a32:	4a75      	ldr	r2, [pc, #468]	; (8001c08 <initialize_tellers+0x300>)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	21a4      	movs	r1, #164	; 0xa4
 8001a38:	fb01 f303 	mul.w	r3, r1, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3340      	adds	r3, #64	; 0x40
 8001a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a42:	f7ff f923 	bl	8000c8c <clock_init>
 8001a46:	463b      	mov	r3, r7
 8001a48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].max_time_working = clock_init(tellers[i].max_time_working);
 8001a50:	4a6d      	ldr	r2, [pc, #436]	; (8001c08 <initialize_tellers+0x300>)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	21a4      	movs	r1, #164	; 0xa4
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001a60:	4638      	mov	r0, r7
 8001a62:	4a69      	ldr	r2, [pc, #420]	; (8001c08 <initialize_tellers+0x300>)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	21a4      	movs	r1, #164	; 0xa4
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3348      	adds	r3, #72	; 0x48
 8001a70:	3304      	adds	r3, #4
 8001a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a74:	f7ff f90a 	bl	8000c8c <clock_init>
 8001a78:	1d23      	adds	r3, r4, #4
 8001a7a:	463a      	mov	r2, r7
 8001a7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].max_time_working = clock_init(tellers[i].max_time_working);
 8001a82:	4a61      	ldr	r2, [pc, #388]	; (8001c08 <initialize_tellers+0x300>)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	21a4      	movs	r1, #164	; 0xa4
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001a92:	4638      	mov	r0, r7
 8001a94:	4a5c      	ldr	r2, [pc, #368]	; (8001c08 <initialize_tellers+0x300>)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	21a4      	movs	r1, #164	; 0xa4
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3348      	adds	r3, #72	; 0x48
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aa6:	f7ff f8f1 	bl	8000c8c <clock_init>
 8001aaa:	1d23      	adds	r3, r4, #4
 8001aac:	463a      	mov	r2, r7
 8001aae:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ab0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize break taking
        tellers[i].break_end = clock_init(tellers[i].break_end);
 8001ab4:	4a54      	ldr	r2, [pc, #336]	; (8001c08 <initialize_tellers+0x300>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	21a4      	movs	r1, #164	; 0xa4
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001ac4:	4638      	mov	r0, r7
 8001ac6:	4a50      	ldr	r2, [pc, #320]	; (8001c08 <initialize_tellers+0x300>)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	21a4      	movs	r1, #164	; 0xa4
 8001acc:	fb01 f303 	mul.w	r3, r1, r3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3360      	adds	r3, #96	; 0x60
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ad8:	f7ff f8d8 	bl	8000c8c <clock_init>
 8001adc:	1d23      	adds	r3, r4, #4
 8001ade:	463a      	mov	r2, r7
 8001ae0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ae2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].current_break = clock_init(tellers[i].current_break);
 8001ae6:	4a48      	ldr	r2, [pc, #288]	; (8001c08 <initialize_tellers+0x300>)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	21a4      	movs	r1, #164	; 0xa4
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001af6:	4638      	mov	r0, r7
 8001af8:	4a43      	ldr	r2, [pc, #268]	; (8001c08 <initialize_tellers+0x300>)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	21a4      	movs	r1, #164	; 0xa4
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	3370      	adds	r3, #112	; 0x70
 8001b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b08:	f7ff f8c0 	bl	8000c8c <clock_init>
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        //Initialize break metrics
        tellers[i].num_breaks = 0;
 8001b16:	4a3c      	ldr	r2, [pc, #240]	; (8001c08 <initialize_tellers+0x300>)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	21a4      	movs	r1, #164	; 0xa4
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	4413      	add	r3, r2
 8001b22:	337c      	adds	r3, #124	; 0x7c
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
        tellers[i].max_break = clock_init(tellers[i].max_break);
 8001b28:	4a37      	ldr	r2, [pc, #220]	; (8001c08 <initialize_tellers+0x300>)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	21a4      	movs	r1, #164	; 0xa4
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001b38:	4638      	mov	r0, r7
 8001b3a:	4a33      	ldr	r2, [pc, #204]	; (8001c08 <initialize_tellers+0x300>)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	21a4      	movs	r1, #164	; 0xa4
 8001b40:	fb01 f303 	mul.w	r3, r1, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	3380      	adds	r3, #128	; 0x80
 8001b48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b4a:	f7ff f89f 	bl	8000c8c <clock_init>
 8001b4e:	463b      	mov	r3, r7
 8001b50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].min_break = clock_init(tellers[i].min_break);
 8001b58:	4a2b      	ldr	r2, [pc, #172]	; (8001c08 <initialize_tellers+0x300>)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	21a4      	movs	r1, #164	; 0xa4
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8001b68:	4638      	mov	r0, r7
 8001b6a:	4a27      	ldr	r2, [pc, #156]	; (8001c08 <initialize_tellers+0x300>)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	21a4      	movs	r1, #164	; 0xa4
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	3388      	adds	r3, #136	; 0x88
 8001b78:	3304      	adds	r3, #4
 8001b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b7c:	f7ff f886 	bl	8000c8c <clock_init>
 8001b80:	1d23      	adds	r3, r4, #4
 8001b82:	463a      	mov	r2, r7
 8001b84:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].total_break = clock_init(tellers[i].total_break);
 8001b8a:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <initialize_tellers+0x300>)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	21a4      	movs	r1, #164	; 0xa4
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8001b9a:	4638      	mov	r0, r7
 8001b9c:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <initialize_tellers+0x300>)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	21a4      	movs	r1, #164	; 0xa4
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3398      	adds	r3, #152	; 0x98
 8001baa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bac:	f7ff f86e 	bl	8000c8c <clock_init>
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001bb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        //initialize tellers in Queue
        teller_wait[i-1] = tellers[i];
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <initialize_tellers+0x304>)
 8001bc0:	21a4      	movs	r1, #164	; 0xa4
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	18d0      	adds	r0, r2, r3
 8001bc8:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <initialize_tellers+0x300>)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	21a4      	movs	r1, #164	; 0xa4
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	23a4      	movs	r3, #164	; 0xa4
 8001bd8:	461a      	mov	r2, r3
 8001bda:	f007 f833 	bl	8008c44 <memcpy>
    for (int i = 1; i < 4; i++) {
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	f77f ae94 	ble.w	8001914 <initialize_tellers+0xc>

    }
    	teller_wait[3] = VOID_TELLER;
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <initialize_tellers+0x304>)
 8001bee:	4a08      	ldr	r2, [pc, #32]	; (8001c10 <initialize_tellers+0x308>)
 8001bf0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	22a4      	movs	r2, #164	; 0xa4
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f007 f823 	bl	8008c44 <memcpy>
}
 8001bfe:	bf00      	nop
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd90      	pop	{r4, r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200003b4 	.word	0x200003b4
 8001c0c:	200006e8 	.word	0x200006e8
 8001c10:	20000644 	.word	0x20000644

08001c14 <manage_tellers>:

//Maybe Put entire thing inside a case statement if at all possible,
//Would Simplify logic and speed it up
void manage_tellers(void){
 8001c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c16:	b0d9      	sub	sp, #356	; 0x164
 8001c18:	af04      	add	r7, sp, #16
	int i;
	for (i = 1; i < 4; i++) {
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c20:	bf00      	nop
 8001c22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	f300 84cc 	bgt.w	80025c4 <manage_tellers+0x9b0>
		switch (tellers[i].status){
 8001c2c:	4abb      	ldr	r2, [pc, #748]	; (8001f1c <manage_tellers+0x308>)
 8001c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001c32:	21a4      	movs	r1, #164	; 0xa4
 8001c34:	fb01 f303 	mul.w	r3, r1, r3
 8001c38:	4413      	add	r3, r2
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d00a      	beq.n	8001c58 <manage_tellers+0x44>
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	f300 84bd 	bgt.w	80025c2 <manage_tellers+0x9ae>
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 816b 	beq.w	8001f24 <manage_tellers+0x310>
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	f000 8371 	beq.w	8002336 <manage_tellers+0x722>
				}
				break;
			}
		}
			//Case Break
			break;
 8001c54:	f000 bcb5 	b.w	80025c2 <manage_tellers+0x9ae>
			if(clock_compare(tellers[i].current_break,tellers[i].break_end) != 1){
 8001c58:	4ab0      	ldr	r2, [pc, #704]	; (8001f1c <manage_tellers+0x308>)
 8001c5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001c5e:	21a4      	movs	r1, #164	; 0xa4
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	3360      	adds	r3, #96	; 0x60
 8001c68:	49ac      	ldr	r1, [pc, #688]	; (8001f1c <manage_tellers+0x308>)
 8001c6a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001c6e:	20a4      	movs	r0, #164	; 0xa4
 8001c70:	fb00 f202 	mul.w	r2, r0, r2
 8001c74:	440a      	add	r2, r1
 8001c76:	3270      	adds	r2, #112	; 0x70
 8001c78:	466c      	mov	r4, sp
 8001c7a:	f103 0108 	add.w	r1, r3, #8
 8001c7e:	c903      	ldmia	r1, {r0, r1}
 8001c80:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c88:	f7ff f896 	bl	8000db8 <clock_compare>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d01f      	beq.n	8001cd2 <manage_tellers+0xbe>
				tellers[i].current_break = clock_increment(tellers[i].current_break);
 8001c92:	4aa2      	ldr	r2, [pc, #648]	; (8001f1c <manage_tellers+0x308>)
 8001c94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001c98:	21a4      	movs	r1, #164	; 0xa4
 8001c9a:	fb01 f303 	mul.w	r3, r1, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001ca4:	f107 0008 	add.w	r0, r7, #8
 8001ca8:	4a9c      	ldr	r2, [pc, #624]	; (8001f1c <manage_tellers+0x308>)
 8001caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001cae:	21a4      	movs	r1, #164	; 0xa4
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3370      	adds	r3, #112	; 0x70
 8001cb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cba:	f7ff f819 	bl	8000cf0 <clock_increment>
 8001cbe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001cc2:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001cc6:	4623      	mov	r3, r4
 8001cc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				break;
 8001cce:	f000 bc78 	b.w	80025c2 <manage_tellers+0x9ae>
			if(clock_compare(tellers[i].current_break,tellers[i].break_end) == 1){
 8001cd2:	4a92      	ldr	r2, [pc, #584]	; (8001f1c <manage_tellers+0x308>)
 8001cd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001cd8:	21a4      	movs	r1, #164	; 0xa4
 8001cda:	fb01 f303 	mul.w	r3, r1, r3
 8001cde:	4413      	add	r3, r2
 8001ce0:	3360      	adds	r3, #96	; 0x60
 8001ce2:	498e      	ldr	r1, [pc, #568]	; (8001f1c <manage_tellers+0x308>)
 8001ce4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001ce8:	20a4      	movs	r0, #164	; 0xa4
 8001cea:	fb00 f202 	mul.w	r2, r0, r2
 8001cee:	440a      	add	r2, r1
 8001cf0:	3270      	adds	r2, #112	; 0x70
 8001cf2:	466c      	mov	r4, sp
 8001cf4:	f103 0108 	add.w	r1, r3, #8
 8001cf8:	c903      	ldmia	r1, {r0, r1}
 8001cfa:	e884 0003 	stmia.w	r4, {r0, r1}
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d02:	f7ff f859 	bl	8000db8 <clock_compare>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	f040 844f 	bne.w	80025ac <manage_tellers+0x998>
				if(clock_compare(tellers[i].current_break,tellers[i].max_break) == 0){
 8001d0e:	4a83      	ldr	r2, [pc, #524]	; (8001f1c <manage_tellers+0x308>)
 8001d10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001d14:	21a4      	movs	r1, #164	; 0xa4
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3380      	adds	r3, #128	; 0x80
 8001d1e:	497f      	ldr	r1, [pc, #508]	; (8001f1c <manage_tellers+0x308>)
 8001d20:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001d24:	20a4      	movs	r0, #164	; 0xa4
 8001d26:	fb00 f202 	mul.w	r2, r0, r2
 8001d2a:	440a      	add	r2, r1
 8001d2c:	3270      	adds	r2, #112	; 0x70
 8001d2e:	466c      	mov	r4, sp
 8001d30:	1d19      	adds	r1, r3, #4
 8001d32:	c903      	ldmia	r1, {r0, r1}
 8001d34:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d3c:	f7ff f83c 	bl	8000db8 <clock_compare>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d115      	bne.n	8001d72 <manage_tellers+0x15e>
					tellers[i].max_break = tellers[i].current_break;
 8001d46:	4a75      	ldr	r2, [pc, #468]	; (8001f1c <manage_tellers+0x308>)
 8001d48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001d4c:	21a4      	movs	r1, #164	; 0xa4
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8001d58:	4a70      	ldr	r2, [pc, #448]	; (8001f1c <manage_tellers+0x308>)
 8001d5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001d5e:	21a4      	movs	r1, #164	; 0xa4
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	4413      	add	r3, r2
 8001d66:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				if(clock_compare(tellers[i].current_break,tellers[i].min_break) == 2){
 8001d72:	4a6a      	ldr	r2, [pc, #424]	; (8001f1c <manage_tellers+0x308>)
 8001d74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001d78:	21a4      	movs	r1, #164	; 0xa4
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	3388      	adds	r3, #136	; 0x88
 8001d82:	4966      	ldr	r1, [pc, #408]	; (8001f1c <manage_tellers+0x308>)
 8001d84:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001d88:	20a4      	movs	r0, #164	; 0xa4
 8001d8a:	fb00 f202 	mul.w	r2, r0, r2
 8001d8e:	440a      	add	r2, r1
 8001d90:	3270      	adds	r2, #112	; 0x70
 8001d92:	466c      	mov	r4, sp
 8001d94:	f103 0108 	add.w	r1, r3, #8
 8001d98:	c903      	ldmia	r1, {r0, r1}
 8001d9a:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001da2:	f7ff f809 	bl	8000db8 <clock_compare>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d113      	bne.n	8001dd4 <manage_tellers+0x1c0>
					tellers[i].min_break = tellers[i].current_break;
 8001dac:	4a5b      	ldr	r2, [pc, #364]	; (8001f1c <manage_tellers+0x308>)
 8001dae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001db2:	21a4      	movs	r1, #164	; 0xa4
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	3388      	adds	r3, #136	; 0x88
 8001dbc:	4957      	ldr	r1, [pc, #348]	; (8001f1c <manage_tellers+0x308>)
 8001dbe:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001dc2:	20a4      	movs	r0, #164	; 0xa4
 8001dc4:	fb00 f202 	mul.w	r2, r0, r2
 8001dc8:	440a      	add	r2, r1
 8001dca:	3270      	adds	r2, #112	; 0x70
 8001dcc:	3304      	adds	r3, #4
 8001dce:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].total_break = add_clocks(tellers[i].total_break, tellers[i].current_break);
 8001dd4:	4a51      	ldr	r2, [pc, #324]	; (8001f1c <manage_tellers+0x308>)
 8001dd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001dda:	21a4      	movs	r1, #164	; 0xa4
 8001ddc:	fb01 f303 	mul.w	r3, r1, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	f103 0698 	add.w	r6, r3, #152	; 0x98
 8001de6:	f107 0508 	add.w	r5, r7, #8
 8001dea:	4a4c      	ldr	r2, [pc, #304]	; (8001f1c <manage_tellers+0x308>)
 8001dec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001df0:	21a4      	movs	r1, #164	; 0xa4
 8001df2:	fb01 f303 	mul.w	r3, r1, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	3398      	adds	r3, #152	; 0x98
 8001dfa:	4948      	ldr	r1, [pc, #288]	; (8001f1c <manage_tellers+0x308>)
 8001dfc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001e00:	20a4      	movs	r0, #164	; 0xa4
 8001e02:	fb00 f202 	mul.w	r2, r0, r2
 8001e06:	440a      	add	r2, r1
 8001e08:	3270      	adds	r2, #112	; 0x70
 8001e0a:	466c      	mov	r4, sp
 8001e0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e14:	4628      	mov	r0, r5
 8001e16:	f7fe ff95 	bl	8000d44 <add_clocks>
 8001e1a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e1e:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001e22:	4633      	mov	r3, r6
 8001e24:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].current_break = clock_init(tellers[i].current_break);
 8001e2a:	4a3c      	ldr	r2, [pc, #240]	; (8001f1c <manage_tellers+0x308>)
 8001e2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001e30:	21a4      	movs	r1, #164	; 0xa4
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001e3c:	f107 0008 	add.w	r0, r7, #8
 8001e40:	4a36      	ldr	r2, [pc, #216]	; (8001f1c <manage_tellers+0x308>)
 8001e42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001e46:	21a4      	movs	r1, #164	; 0xa4
 8001e48:	fb01 f303 	mul.w	r3, r1, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3370      	adds	r3, #112	; 0x70
 8001e50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e52:	f7fe ff1b 	bl	8000c8c <clock_init>
 8001e56:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001e5a:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001e5e:	4623      	mov	r3, r4
 8001e60:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].status = 0;
 8001e66:	4a2d      	ldr	r2, [pc, #180]	; (8001f1c <manage_tellers+0x308>)
 8001e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001e6c:	21a4      	movs	r1, #164	; 0xa4
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	3304      	adds	r3, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
				if(!((teller_wait[0].id == i) && (teller_wait[1].id == i) && (teller_wait[2].id == i))){
 8001e7a:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <manage_tellers+0x30c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d10e      	bne.n	8001ea4 <manage_tellers+0x290>
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <manage_tellers+0x30c>)
 8001e88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e8c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d107      	bne.n	8001ea4 <manage_tellers+0x290>
 8001e94:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <manage_tellers+0x30c>)
 8001e96:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001e9a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	f000 8384 	beq.w	80025ac <manage_tellers+0x998>
					if(teller_wait[0].id == 0){
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <manage_tellers+0x30c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10d      	bne.n	8001ec8 <manage_tellers+0x2b4>
						teller_wait[0] = tellers[i];
 8001eac:	481c      	ldr	r0, [pc, #112]	; (8001f20 <manage_tellers+0x30c>)
 8001eae:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <manage_tellers+0x308>)
 8001eb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001eb4:	21a4      	movs	r1, #164	; 0xa4
 8001eb6:	fb01 f303 	mul.w	r3, r1, r3
 8001eba:	4413      	add	r3, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	23a4      	movs	r3, #164	; 0xa4
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f006 febf 	bl	8008c44 <memcpy>
					break;
 8001ec6:	e373      	b.n	80025b0 <manage_tellers+0x99c>
					else if(teller_wait[1].id == 0){
 8001ec8:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <manage_tellers+0x30c>)
 8001eca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10e      	bne.n	8001ef0 <manage_tellers+0x2dc>
						teller_wait[1] = tellers[i];
 8001ed2:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <manage_tellers+0x30c>)
 8001ed4:	4911      	ldr	r1, [pc, #68]	; (8001f1c <manage_tellers+0x308>)
 8001ed6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001eda:	20a4      	movs	r0, #164	; 0xa4
 8001edc:	fb00 f303 	mul.w	r3, r0, r3
 8001ee0:	4419      	add	r1, r3
 8001ee2:	f102 03a4 	add.w	r3, r2, #164	; 0xa4
 8001ee6:	22a4      	movs	r2, #164	; 0xa4
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f006 feab 	bl	8008c44 <memcpy>
					break;
 8001eee:	e35f      	b.n	80025b0 <manage_tellers+0x99c>
					else if(teller_wait[2].id == 0){
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <manage_tellers+0x30c>)
 8001ef2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 835a 	bne.w	80025b0 <manage_tellers+0x99c>
						teller_wait[2] = tellers[i];
 8001efc:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <manage_tellers+0x30c>)
 8001efe:	4907      	ldr	r1, [pc, #28]	; (8001f1c <manage_tellers+0x308>)
 8001f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f04:	20a4      	movs	r0, #164	; 0xa4
 8001f06:	fb00 f303 	mul.w	r3, r0, r3
 8001f0a:	4419      	add	r1, r3
 8001f0c:	f502 73a4 	add.w	r3, r2, #328	; 0x148
 8001f10:	22a4      	movs	r2, #164	; 0xa4
 8001f12:	4618      	mov	r0, r3
 8001f14:	f006 fe96 	bl	8008c44 <memcpy>
					break;
 8001f18:	e34a      	b.n	80025b0 <manage_tellers+0x99c>
 8001f1a:	bf00      	nop
 8001f1c:	200003b4 	.word	0x200003b4
 8001f20:	200006e8 	.word	0x200006e8
			if(tellers[i].take_break == 0){
 8001f24:	4ab9      	ldr	r2, [pc, #740]	; (800220c <manage_tellers+0x5f8>)
 8001f26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f2a:	21a4      	movs	r1, #164	; 0xa4
 8001f2c:	fb01 f303 	mul.w	r3, r1, r3
 8001f30:	4413      	add	r3, r2
 8001f32:	3308      	adds	r3, #8
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 8102 	bne.w	8002140 <manage_tellers+0x52c>
				tellers[i].current_time_waiting = clock_increment(tellers[i].current_time_waiting);
 8001f3c:	4ab3      	ldr	r2, [pc, #716]	; (800220c <manage_tellers+0x5f8>)
 8001f3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f42:	21a4      	movs	r1, #164	; 0xa4
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001f4e:	f107 0008 	add.w	r0, r7, #8
 8001f52:	4aae      	ldr	r2, [pc, #696]	; (800220c <manage_tellers+0x5f8>)
 8001f54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f58:	21a4      	movs	r1, #164	; 0xa4
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	3340      	adds	r3, #64	; 0x40
 8001f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f64:	f7fe fec4 	bl	8000cf0 <clock_increment>
 8001f68:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001f6c:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001f70:	4623      	mov	r3, r4
 8001f72:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  if((waiting[0] != NULL) && (tellers[i].id == teller_wait[0].id)){
 8001f78:	4ba5      	ldr	r3, [pc, #660]	; (8002210 <manage_tellers+0x5fc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 8319 	beq.w	80025b4 <manage_tellers+0x9a0>
 8001f82:	4aa2      	ldr	r2, [pc, #648]	; (800220c <manage_tellers+0x5f8>)
 8001f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f88:	21a4      	movs	r1, #164	; 0xa4
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	4ba0      	ldr	r3, [pc, #640]	; (8002214 <manage_tellers+0x600>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	f040 830c 	bne.w	80025b4 <manage_tellers+0x9a0>
					Customer customer = *waiting[0];
 8001f9c:	4b9c      	ldr	r3, [pc, #624]	; (8002210 <manage_tellers+0x5fc>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001fa4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001fa8:	461c      	mov	r4, r3
 8001faa:	4615      	mov	r5, r2
 8001fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb8:	682b      	ldr	r3, [r5, #0]
 8001fba:	6023      	str	r3, [r4, #0]
					waiting[0] = NULL;
 8001fbc:	4b94      	ldr	r3, [pc, #592]	; (8002210 <manage_tellers+0x5fc>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
				  	tellers[i].service_end_time = customer.service_time;
 8001fc2:	4a92      	ldr	r2, [pc, #584]	; (800220c <manage_tellers+0x5f8>)
 8001fc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001fc8:	21a4      	movs	r1, #164	; 0xa4
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	3308      	adds	r3, #8
 8001fd2:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001fd6:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8001fda:	3304      	adds	r3, #4
 8001fdc:	3204      	adds	r2, #4
 8001fde:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fe0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  	total_customer_wait = add_clocks(total_customer_wait, customer.total_queue_time);
 8001fe4:	4b8c      	ldr	r3, [pc, #560]	; (8002218 <manage_tellers+0x604>)
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	f107 0608 	add.w	r6, r7, #8
 8001fec:	4d8a      	ldr	r5, [pc, #552]	; (8002218 <manage_tellers+0x604>)
 8001fee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001ff2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ff6:	466c      	mov	r4, sp
 8001ff8:	3328      	adds	r3, #40	; 0x28
 8001ffa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ffe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002002:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002006:	4630      	mov	r0, r6
 8002008:	f7fe fe9c 	bl	8000d44 <add_clocks>
 800200c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002010:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	ca07      	ldmia	r2, {r0, r1, r2}
 8002018:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  	if(clock_compare(customer.total_queue_time,max_customer_wait) == 0){
 800201c:	4b7f      	ldr	r3, [pc, #508]	; (800221c <manage_tellers+0x608>)
 800201e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8002022:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8002026:	466c      	mov	r4, sp
 8002028:	1d19      	adds	r1, r3, #4
 800202a:	c903      	ldmia	r1, {r0, r1}
 800202c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	3228      	adds	r2, #40	; 0x28
 8002034:	ca07      	ldmia	r2, {r0, r1, r2}
 8002036:	f7fe febf 	bl	8000db8 <clock_compare>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10a      	bne.n	8002056 <manage_tellers+0x442>
				  		max_customer_wait = customer.total_queue_time;
 8002040:	4a76      	ldr	r2, [pc, #472]	; (800221c <manage_tellers+0x608>)
 8002042:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002046:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800204a:	4614      	mov	r4, r2
 800204c:	3328      	adds	r3, #40	; 0x28
 800204e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002052:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				  	tellers[i].status = 1;
 8002056:	4a6d      	ldr	r2, [pc, #436]	; (800220c <manage_tellers+0x5f8>)
 8002058:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800205c:	21a4      	movs	r1, #164	; 0xa4
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	3304      	adds	r3, #4
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]
				  	if(clock_compare(tellers[i].current_time_waiting,tellers[i].max_time_waiting) == 0){
 800206a:	4a68      	ldr	r2, [pc, #416]	; (800220c <manage_tellers+0x5f8>)
 800206c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002070:	21a4      	movs	r1, #164	; 0xa4
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	3358      	adds	r3, #88	; 0x58
 800207a:	4964      	ldr	r1, [pc, #400]	; (800220c <manage_tellers+0x5f8>)
 800207c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002080:	20a4      	movs	r0, #164	; 0xa4
 8002082:	fb00 f202 	mul.w	r2, r0, r2
 8002086:	440a      	add	r2, r1
 8002088:	3240      	adds	r2, #64	; 0x40
 800208a:	466c      	mov	r4, sp
 800208c:	1d19      	adds	r1, r3, #4
 800208e:	c903      	ldmia	r1, {r0, r1}
 8002090:	e884 0003 	stmia.w	r4, {r0, r1}
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	ca07      	ldmia	r2, {r0, r1, r2}
 8002098:	f7fe fe8e 	bl	8000db8 <clock_compare>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d12f      	bne.n	8002102 <manage_tellers+0x4ee>
				 	tellers[i].max_time_waiting = tellers[i].current_time_waiting;
 80020a2:	4a5a      	ldr	r2, [pc, #360]	; (800220c <manage_tellers+0x5f8>)
 80020a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020a8:	21a4      	movs	r1, #164	; 0xa4
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	f103 0058 	add.w	r0, r3, #88	; 0x58
 80020b4:	4a55      	ldr	r2, [pc, #340]	; (800220c <manage_tellers+0x5f8>)
 80020b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020ba:	21a4      	movs	r1, #164	; 0xa4
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80020c6:	4603      	mov	r3, r0
 80020c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				 	teller_wait[0] = teller_wait[1];
 80020ce:	4a51      	ldr	r2, [pc, #324]	; (8002214 <manage_tellers+0x600>)
 80020d0:	4b50      	ldr	r3, [pc, #320]	; (8002214 <manage_tellers+0x600>)
 80020d2:	4610      	mov	r0, r2
 80020d4:	33a4      	adds	r3, #164	; 0xa4
 80020d6:	22a4      	movs	r2, #164	; 0xa4
 80020d8:	4619      	mov	r1, r3
 80020da:	f006 fdb3 	bl	8008c44 <memcpy>
				 	teller_wait[1] = teller_wait[2];
 80020de:	4b4d      	ldr	r3, [pc, #308]	; (8002214 <manage_tellers+0x600>)
 80020e0:	4a4c      	ldr	r2, [pc, #304]	; (8002214 <manage_tellers+0x600>)
 80020e2:	33a4      	adds	r3, #164	; 0xa4
 80020e4:	f502 71a4 	add.w	r1, r2, #328	; 0x148
 80020e8:	22a4      	movs	r2, #164	; 0xa4
 80020ea:	4618      	mov	r0, r3
 80020ec:	f006 fdaa 	bl	8008c44 <memcpy>
				 	teller_wait[4] = VOID_TELLER;
 80020f0:	4b48      	ldr	r3, [pc, #288]	; (8002214 <manage_tellers+0x600>)
 80020f2:	4a4b      	ldr	r2, [pc, #300]	; (8002220 <manage_tellers+0x60c>)
 80020f4:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80020f8:	4611      	mov	r1, r2
 80020fa:	22a4      	movs	r2, #164	; 0xa4
 80020fc:	4618      	mov	r0, r3
 80020fe:	f006 fda1 	bl	8008c44 <memcpy>
				  	tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 8002102:	4a42      	ldr	r2, [pc, #264]	; (800220c <manage_tellers+0x5f8>)
 8002104:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002108:	21a4      	movs	r1, #164	; 0xa4
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002114:	f107 0008 	add.w	r0, r7, #8
 8002118:	4a3c      	ldr	r2, [pc, #240]	; (800220c <manage_tellers+0x5f8>)
 800211a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800211e:	21a4      	movs	r1, #164	; 0xa4
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3340      	adds	r3, #64	; 0x40
 8002128:	cb0e      	ldmia	r3, {r1, r2, r3}
 800212a:	f7fe fdaf 	bl	8000c8c <clock_init>
 800212e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002132:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8002136:	4623      	mov	r3, r4
 8002138:	ca07      	ldmia	r2, {r0, r1, r2}
 800213a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				break;
 800213e:	e239      	b.n	80025b4 <manage_tellers+0x9a0>
			if(tellers[i].take_break == 1){
 8002140:	4a32      	ldr	r2, [pc, #200]	; (800220c <manage_tellers+0x5f8>)
 8002142:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002146:	21a4      	movs	r1, #164	; 0xa4
 8002148:	fb01 f303 	mul.w	r3, r1, r3
 800214c:	4413      	add	r3, r2
 800214e:	3308      	adds	r3, #8
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b01      	cmp	r3, #1
 8002154:	f040 8230 	bne.w	80025b8 <manage_tellers+0x9a4>
				tellers[i].status = 2;
 8002158:	4a2c      	ldr	r2, [pc, #176]	; (800220c <manage_tellers+0x5f8>)
 800215a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800215e:	21a4      	movs	r1, #164	; 0xa4
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	4413      	add	r3, r2
 8002166:	3304      	adds	r3, #4
 8002168:	2202      	movs	r2, #2
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002170:	2b03      	cmp	r3, #3
 8002172:	d036      	beq.n	80021e2 <manage_tellers+0x5ce>
 8002174:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002178:	2b03      	cmp	r3, #3
 800217a:	dc55      	bgt.n	8002228 <manage_tellers+0x614>
 800217c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002180:	2b01      	cmp	r3, #1
 8002182:	d004      	beq.n	800218e <manage_tellers+0x57a>
 8002184:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002188:	2b02      	cmp	r3, #2
 800218a:	d015      	beq.n	80021b8 <manage_tellers+0x5a4>
					break;
 800218c:	e04c      	b.n	8002228 <manage_tellers+0x614>
					breaker.start_break[i] = 1;
 800218e:	4a25      	ldr	r2, [pc, #148]	; (8002224 <manage_tellers+0x610>)
 8002190:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002194:	2101      	movs	r1, #1
 8002196:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration1;
 800219a:	4a1c      	ldr	r2, [pc, #112]	; (800220c <manage_tellers+0x5f8>)
 800219c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021a0:	21a4      	movs	r1, #164	; 0xa4
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	3360      	adds	r3, #96	; 0x60
 80021aa:	4a1e      	ldr	r2, [pc, #120]	; (8002224 <manage_tellers+0x610>)
 80021ac:	3304      	adds	r3, #4
 80021ae:	3218      	adds	r2, #24
 80021b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80021b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					break;
 80021b6:	e038      	b.n	800222a <manage_tellers+0x616>
					breaker.start_break[i] = 1;
 80021b8:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <manage_tellers+0x610>)
 80021ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021be:	2101      	movs	r1, #1
 80021c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration2;
 80021c4:	4a11      	ldr	r2, [pc, #68]	; (800220c <manage_tellers+0x5f8>)
 80021c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021ca:	21a4      	movs	r1, #164	; 0xa4
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	3360      	adds	r3, #96	; 0x60
 80021d4:	4a13      	ldr	r2, [pc, #76]	; (8002224 <manage_tellers+0x610>)
 80021d6:	3304      	adds	r3, #4
 80021d8:	3230      	adds	r2, #48	; 0x30
 80021da:	ca07      	ldmia	r2, {r0, r1, r2}
 80021dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					break;
 80021e0:	e023      	b.n	800222a <manage_tellers+0x616>
					breaker.start_break[i] = 1;
 80021e2:	4a10      	ldr	r2, [pc, #64]	; (8002224 <manage_tellers+0x610>)
 80021e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021e8:	2101      	movs	r1, #1
 80021ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration3;
 80021ee:	4a07      	ldr	r2, [pc, #28]	; (800220c <manage_tellers+0x5f8>)
 80021f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021f4:	21a4      	movs	r1, #164	; 0xa4
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	3360      	adds	r3, #96	; 0x60
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <manage_tellers+0x610>)
 8002200:	3304      	adds	r3, #4
 8002202:	3248      	adds	r2, #72	; 0x48
 8002204:	ca07      	ldmia	r2, {r0, r1, r2}
 8002206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					break;
 800220a:	e00e      	b.n	800222a <manage_tellers+0x616>
 800220c:	200003b4 	.word	0x200003b4
 8002210:	200000f0 	.word	0x200000f0
 8002214:	200006e8 	.word	0x200006e8
 8002218:	20000290 	.word	0x20000290
 800221c:	2000029c 	.word	0x2000029c
 8002220:	20000644 	.word	0x20000644
 8002224:	2000007c 	.word	0x2000007c
					break;
 8002228:	bf00      	nop
				tellers[i].take_break = 0;
 800222a:	4aca      	ldr	r2, [pc, #808]	; (8002554 <manage_tellers+0x940>)
 800222c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002230:	21a4      	movs	r1, #164	; 0xa4
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	3308      	adds	r3, #8
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
				if(clock_compare(tellers[i].current_time_waiting,tellers[i].max_time_waiting) == 0){
 800223e:	4ac5      	ldr	r2, [pc, #788]	; (8002554 <manage_tellers+0x940>)
 8002240:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002244:	21a4      	movs	r1, #164	; 0xa4
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	3358      	adds	r3, #88	; 0x58
 800224e:	49c1      	ldr	r1, [pc, #772]	; (8002554 <manage_tellers+0x940>)
 8002250:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002254:	20a4      	movs	r0, #164	; 0xa4
 8002256:	fb00 f202 	mul.w	r2, r0, r2
 800225a:	440a      	add	r2, r1
 800225c:	3240      	adds	r2, #64	; 0x40
 800225e:	466c      	mov	r4, sp
 8002260:	1d19      	adds	r1, r3, #4
 8002262:	c903      	ldmia	r1, {r0, r1}
 8002264:	e884 0003 	stmia.w	r4, {r0, r1}
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	ca07      	ldmia	r2, {r0, r1, r2}
 800226c:	f7fe fda4 	bl	8000db8 <clock_compare>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d115      	bne.n	80022a2 <manage_tellers+0x68e>
					tellers[i].max_time_waiting = tellers[i].current_time_waiting;
 8002276:	4ab7      	ldr	r2, [pc, #732]	; (8002554 <manage_tellers+0x940>)
 8002278:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800227c:	21a4      	movs	r1, #164	; 0xa4
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	4413      	add	r3, r2
 8002284:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8002288:	4ab2      	ldr	r2, [pc, #712]	; (8002554 <manage_tellers+0x940>)
 800228a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800228e:	21a4      	movs	r1, #164	; 0xa4
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800229a:	4603      	mov	r3, r0
 800229c:	ca07      	ldmia	r2, {r0, r1, r2}
 800229e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].total_time_waiting = add_clocks(tellers[i].total_time_waiting,tellers[i].current_time_waiting);
 80022a2:	4aac      	ldr	r2, [pc, #688]	; (8002554 <manage_tellers+0x940>)
 80022a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80022a8:	21a4      	movs	r1, #164	; 0xa4
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	f103 0628 	add.w	r6, r3, #40	; 0x28
 80022b4:	f107 0508 	add.w	r5, r7, #8
 80022b8:	4aa6      	ldr	r2, [pc, #664]	; (8002554 <manage_tellers+0x940>)
 80022ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80022be:	21a4      	movs	r1, #164	; 0xa4
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3328      	adds	r3, #40	; 0x28
 80022c8:	49a2      	ldr	r1, [pc, #648]	; (8002554 <manage_tellers+0x940>)
 80022ca:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80022ce:	20a4      	movs	r0, #164	; 0xa4
 80022d0:	fb00 f202 	mul.w	r2, r0, r2
 80022d4:	440a      	add	r2, r1
 80022d6:	3240      	adds	r2, #64	; 0x40
 80022d8:	466c      	mov	r4, sp
 80022da:	ca07      	ldmia	r2, {r0, r1, r2}
 80022dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e2:	4628      	mov	r0, r5
 80022e4:	f7fe fd2e 	bl	8000d44 <add_clocks>
 80022e8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80022ec:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 80022f0:	4633      	mov	r3, r6
 80022f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80022f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 80022f8:	4a96      	ldr	r2, [pc, #600]	; (8002554 <manage_tellers+0x940>)
 80022fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80022fe:	21a4      	movs	r1, #164	; 0xa4
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800230a:	f107 0008 	add.w	r0, r7, #8
 800230e:	4a91      	ldr	r2, [pc, #580]	; (8002554 <manage_tellers+0x940>)
 8002310:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002314:	21a4      	movs	r1, #164	; 0xa4
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	3340      	adds	r3, #64	; 0x40
 800231e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002320:	f7fe fcb4 	bl	8000c8c <clock_init>
 8002324:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002328:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 800232c:	4623      	mov	r3, r4
 800232e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002330:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			break;
 8002334:	e140      	b.n	80025b8 <manage_tellers+0x9a4>
			if(clock_compare(tellers[i].current_time_working,tellers[i].service_end_time) == 1){
 8002336:	4a87      	ldr	r2, [pc, #540]	; (8002554 <manage_tellers+0x940>)
 8002338:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800233c:	21a4      	movs	r1, #164	; 0xa4
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	3308      	adds	r3, #8
 8002346:	4983      	ldr	r1, [pc, #524]	; (8002554 <manage_tellers+0x940>)
 8002348:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800234c:	20a4      	movs	r0, #164	; 0xa4
 800234e:	fb00 f202 	mul.w	r2, r0, r2
 8002352:	440a      	add	r2, r1
 8002354:	3230      	adds	r2, #48	; 0x30
 8002356:	466c      	mov	r4, sp
 8002358:	f103 0108 	add.w	r1, r3, #8
 800235c:	c903      	ldmia	r1, {r0, r1}
 800235e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	3204      	adds	r2, #4
 8002366:	ca07      	ldmia	r2, {r0, r1, r2}
 8002368:	f7fe fd26 	bl	8000db8 <clock_compare>
 800236c:	4603      	mov	r3, r0
 800236e:	2b01      	cmp	r3, #1
 8002370:	d11f      	bne.n	80023b2 <manage_tellers+0x79e>
				tellers[i].current_time_working = clock_increment(tellers[i].current_time_working);
 8002372:	4a78      	ldr	r2, [pc, #480]	; (8002554 <manage_tellers+0x940>)
 8002374:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002378:	21a4      	movs	r1, #164	; 0xa4
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002384:	f107 0008 	add.w	r0, r7, #8
 8002388:	4a72      	ldr	r2, [pc, #456]	; (8002554 <manage_tellers+0x940>)
 800238a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800238e:	21a4      	movs	r1, #164	; 0xa4
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	4413      	add	r3, r2
 8002396:	3330      	adds	r3, #48	; 0x30
 8002398:	3304      	adds	r3, #4
 800239a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800239c:	f7fe fca8 	bl	8000cf0 <clock_increment>
 80023a0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80023a4:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 80023a8:	1d23      	adds	r3, r4, #4
 80023aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80023ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				break;
 80023b0:	e107      	b.n	80025c2 <manage_tellers+0x9ae>
			if(clock_compare(tellers[i].current_time_working,tellers[i].service_end_time) == 1){
 80023b2:	4a68      	ldr	r2, [pc, #416]	; (8002554 <manage_tellers+0x940>)
 80023b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023b8:	21a4      	movs	r1, #164	; 0xa4
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	3308      	adds	r3, #8
 80023c2:	4964      	ldr	r1, [pc, #400]	; (8002554 <manage_tellers+0x940>)
 80023c4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80023c8:	20a4      	movs	r0, #164	; 0xa4
 80023ca:	fb00 f202 	mul.w	r2, r0, r2
 80023ce:	440a      	add	r2, r1
 80023d0:	3230      	adds	r2, #48	; 0x30
 80023d2:	466c      	mov	r4, sp
 80023d4:	f103 0108 	add.w	r1, r3, #8
 80023d8:	c903      	ldmia	r1, {r0, r1}
 80023da:	e884 0003 	stmia.w	r4, {r0, r1}
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	3204      	adds	r2, #4
 80023e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80023e4:	f7fe fce8 	bl	8000db8 <clock_compare>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	f040 80e9 	bne.w	80025c2 <manage_tellers+0x9ae>
				if(clock_compare(tellers[i].current_time_working,tellers[i].max_time_working) == 0){
 80023f0:	4a58      	ldr	r2, [pc, #352]	; (8002554 <manage_tellers+0x940>)
 80023f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023f6:	21a4      	movs	r1, #164	; 0xa4
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	3348      	adds	r3, #72	; 0x48
 8002400:	4954      	ldr	r1, [pc, #336]	; (8002554 <manage_tellers+0x940>)
 8002402:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002406:	20a4      	movs	r0, #164	; 0xa4
 8002408:	fb00 f202 	mul.w	r2, r0, r2
 800240c:	440a      	add	r2, r1
 800240e:	3230      	adds	r2, #48	; 0x30
 8002410:	466c      	mov	r4, sp
 8002412:	f103 0108 	add.w	r1, r3, #8
 8002416:	c903      	ldmia	r1, {r0, r1}
 8002418:	e884 0003 	stmia.w	r4, {r0, r1}
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	3204      	adds	r2, #4
 8002420:	ca07      	ldmia	r2, {r0, r1, r2}
 8002422:	f7fe fcc9 	bl	8000db8 <clock_compare>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d114      	bne.n	8002456 <manage_tellers+0x842>
					tellers[i].max_time_working = tellers[i].current_time_working;
 800242c:	4a49      	ldr	r2, [pc, #292]	; (8002554 <manage_tellers+0x940>)
 800242e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002432:	21a4      	movs	r1, #164	; 0xa4
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	3348      	adds	r3, #72	; 0x48
 800243c:	4945      	ldr	r1, [pc, #276]	; (8002554 <manage_tellers+0x940>)
 800243e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002442:	20a4      	movs	r0, #164	; 0xa4
 8002444:	fb00 f202 	mul.w	r2, r0, r2
 8002448:	440a      	add	r2, r1
 800244a:	3230      	adds	r2, #48	; 0x30
 800244c:	3304      	adds	r3, #4
 800244e:	3204      	adds	r2, #4
 8002450:	ca07      	ldmia	r2, {r0, r1, r2}
 8002452:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].total_time_working = add_clocks(tellers[i].total_time_working,tellers[i].current_time_working);
 8002456:	4a3f      	ldr	r2, [pc, #252]	; (8002554 <manage_tellers+0x940>)
 8002458:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800245c:	21a4      	movs	r1, #164	; 0xa4
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	f103 0518 	add.w	r5, r3, #24
 8002468:	f107 0c08 	add.w	ip, r7, #8
 800246c:	4a39      	ldr	r2, [pc, #228]	; (8002554 <manage_tellers+0x940>)
 800246e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002472:	21a4      	movs	r1, #164	; 0xa4
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	4413      	add	r3, r2
 800247a:	f103 0618 	add.w	r6, r3, #24
 800247e:	4a35      	ldr	r2, [pc, #212]	; (8002554 <manage_tellers+0x940>)
 8002480:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002484:	21a4      	movs	r1, #164	; 0xa4
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3330      	adds	r3, #48	; 0x30
 800248e:	466c      	mov	r4, sp
 8002490:	3304      	adds	r3, #4
 8002492:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002496:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800249a:	1d33      	adds	r3, r6, #4
 800249c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800249e:	4660      	mov	r0, ip
 80024a0:	f7fe fc50 	bl	8000d44 <add_clocks>
 80024a4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80024a8:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 80024ac:	1d2b      	adds	r3, r5, #4
 80024ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80024b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].current_time_working = clock_init(tellers[i].current_time_working);
 80024b4:	4a27      	ldr	r2, [pc, #156]	; (8002554 <manage_tellers+0x940>)
 80024b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024ba:	21a4      	movs	r1, #164	; 0xa4
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80024c6:	f107 0008 	add.w	r0, r7, #8
 80024ca:	4a22      	ldr	r2, [pc, #136]	; (8002554 <manage_tellers+0x940>)
 80024cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024d0:	21a4      	movs	r1, #164	; 0xa4
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	3330      	adds	r3, #48	; 0x30
 80024da:	3304      	adds	r3, #4
 80024dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024de:	f7fe fbd5 	bl	8000c8c <clock_init>
 80024e2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80024e6:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 80024ea:	1d23      	adds	r3, r4, #4
 80024ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80024ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].status = 0;
 80024f2:	4a18      	ldr	r2, [pc, #96]	; (8002554 <manage_tellers+0x940>)
 80024f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024f8:	21a4      	movs	r1, #164	; 0xa4
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3304      	adds	r3, #4
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
				if(!((teller_wait[0].id == i) && (teller_wait[1].id == i) && (teller_wait[2].id == i))){
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <manage_tellers+0x944>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800250e:	429a      	cmp	r2, r3
 8002510:	d10d      	bne.n	800252e <manage_tellers+0x91a>
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <manage_tellers+0x944>)
 8002514:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002518:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800251c:	429a      	cmp	r2, r3
 800251e:	d106      	bne.n	800252e <manage_tellers+0x91a>
 8002520:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <manage_tellers+0x944>)
 8002522:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002526:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800252a:	429a      	cmp	r2, r3
 800252c:	d046      	beq.n	80025bc <manage_tellers+0x9a8>
					if(teller_wait[0].id == 0){
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <manage_tellers+0x944>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d112      	bne.n	800255c <manage_tellers+0x948>
						teller_wait[0] = tellers[i];
 8002536:	4808      	ldr	r0, [pc, #32]	; (8002558 <manage_tellers+0x944>)
 8002538:	4a06      	ldr	r2, [pc, #24]	; (8002554 <manage_tellers+0x940>)
 800253a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800253e:	21a4      	movs	r1, #164	; 0xa4
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	4619      	mov	r1, r3
 8002548:	23a4      	movs	r3, #164	; 0xa4
 800254a:	461a      	mov	r2, r3
 800254c:	f006 fb7a 	bl	8008c44 <memcpy>
					break;
 8002550:	e036      	b.n	80025c0 <manage_tellers+0x9ac>
 8002552:	bf00      	nop
 8002554:	200003b4 	.word	0x200003b4
 8002558:	200006e8 	.word	0x200006e8
					else if(teller_wait[1].id == 0){
 800255c:	4b52      	ldr	r3, [pc, #328]	; (80026a8 <manage_tellers+0xa94>)
 800255e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10e      	bne.n	8002584 <manage_tellers+0x970>
						teller_wait[1] = tellers[i];
 8002566:	4a50      	ldr	r2, [pc, #320]	; (80026a8 <manage_tellers+0xa94>)
 8002568:	4950      	ldr	r1, [pc, #320]	; (80026ac <manage_tellers+0xa98>)
 800256a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800256e:	20a4      	movs	r0, #164	; 0xa4
 8002570:	fb00 f303 	mul.w	r3, r0, r3
 8002574:	4419      	add	r1, r3
 8002576:	f102 03a4 	add.w	r3, r2, #164	; 0xa4
 800257a:	22a4      	movs	r2, #164	; 0xa4
 800257c:	4618      	mov	r0, r3
 800257e:	f006 fb61 	bl	8008c44 <memcpy>
					break;
 8002582:	e01d      	b.n	80025c0 <manage_tellers+0x9ac>
					else if(teller_wait[2].id == 0){
 8002584:	4b48      	ldr	r3, [pc, #288]	; (80026a8 <manage_tellers+0xa94>)
 8002586:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800258a:	2b00      	cmp	r3, #0
 800258c:	d118      	bne.n	80025c0 <manage_tellers+0x9ac>
						teller_wait[2] = tellers[i];
 800258e:	4a46      	ldr	r2, [pc, #280]	; (80026a8 <manage_tellers+0xa94>)
 8002590:	4946      	ldr	r1, [pc, #280]	; (80026ac <manage_tellers+0xa98>)
 8002592:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002596:	20a4      	movs	r0, #164	; 0xa4
 8002598:	fb00 f303 	mul.w	r3, r0, r3
 800259c:	4419      	add	r1, r3
 800259e:	f502 73a4 	add.w	r3, r2, #328	; 0x148
 80025a2:	22a4      	movs	r2, #164	; 0xa4
 80025a4:	4618      	mov	r0, r3
 80025a6:	f006 fb4d 	bl	8008c44 <memcpy>
					break;
 80025aa:	e009      	b.n	80025c0 <manage_tellers+0x9ac>
			break;
 80025ac:	bf00      	nop
 80025ae:	e008      	b.n	80025c2 <manage_tellers+0x9ae>
					break;
 80025b0:	bf00      	nop
 80025b2:	e006      	b.n	80025c2 <manage_tellers+0x9ae>
				break;
 80025b4:	bf00      	nop
 80025b6:	e004      	b.n	80025c2 <manage_tellers+0x9ae>
			break;
 80025b8:	bf00      	nop
 80025ba:	e002      	b.n	80025c2 <manage_tellers+0x9ae>
				break;
 80025bc:	bf00      	nop
 80025be:	e000      	b.n	80025c2 <manage_tellers+0x9ae>
					break;
 80025c0:	bf00      	nop
			break;
 80025c2:	bf00      	nop
	}
	char buffer[256];
	if((Clock.minute  % 30) == 0 && (Clock.second % 60) == 30){
 80025c4:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <manage_tellers+0xa9c>)
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4b3a      	ldr	r3, [pc, #232]	; (80026b4 <manage_tellers+0xaa0>)
 80025ca:	fb83 1302 	smull	r1, r3, r3, r2
 80025ce:	4413      	add	r3, r2
 80025d0:	1119      	asrs	r1, r3, #4
 80025d2:	17d3      	asrs	r3, r2, #31
 80025d4:	1ac9      	subs	r1, r1, r3
 80025d6:	460b      	mov	r3, r1
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a5b      	subs	r3, r3, r1
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	1ad1      	subs	r1, r2, r3
 80025e0:	2900      	cmp	r1, #0
 80025e2:	d15b      	bne.n	800269c <manage_tellers+0xa88>
 80025e4:	4b32      	ldr	r3, [pc, #200]	; (80026b0 <manage_tellers+0xa9c>)
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	4b32      	ldr	r3, [pc, #200]	; (80026b4 <manage_tellers+0xaa0>)
 80025ea:	fb83 1302 	smull	r1, r3, r3, r2
 80025ee:	4413      	add	r3, r2
 80025f0:	1159      	asrs	r1, r3, #5
 80025f2:	17d3      	asrs	r3, r2, #31
 80025f4:	1ac9      	subs	r1, r1, r3
 80025f6:	460b      	mov	r3, r1
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	1a5b      	subs	r3, r3, r1
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	1ad1      	subs	r1, r2, r3
 8002600:	291e      	cmp	r1, #30
 8002602:	d14b      	bne.n	800269c <manage_tellers+0xa88>
		sprintf(buffer, "Current time: %d:%d:%d \r\n", Clock.hour, Clock.minute, Clock.second);
 8002604:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <manage_tellers+0xa9c>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <manage_tellers+0xa9c>)
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <manage_tellers+0xa9c>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	460b      	mov	r3, r1
 8002618:	4927      	ldr	r1, [pc, #156]	; (80026b8 <manage_tellers+0xaa4>)
 800261a:	f006 fabf 	bl	8008b9c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 800261e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd fdd4 	bl	80001d0 <strlen>
 8002628:	4603      	mov	r3, r0
 800262a:	b29a      	uxth	r2, r3
 800262c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002630:	2364      	movs	r3, #100	; 0x64
 8002632:	4822      	ldr	r0, [pc, #136]	; (80026bc <manage_tellers+0xaa8>)
 8002634:	f002 fba8 	bl	8004d88 <HAL_UART_Transmit>
		sprintf(buffer,"Customers waiting in Queue: %d \r\n", waiting_customers );
 8002638:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <manage_tellers+0xaac>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002640:	4920      	ldr	r1, [pc, #128]	; (80026c4 <manage_tellers+0xab0>)
 8002642:	4618      	mov	r0, r3
 8002644:	f006 faaa 	bl	8008b9c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8002648:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd fdbf 	bl	80001d0 <strlen>
 8002652:	4603      	mov	r3, r0
 8002654:	b29a      	uxth	r2, r3
 8002656:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800265a:	2364      	movs	r3, #100	; 0x64
 800265c:	4817      	ldr	r0, [pc, #92]	; (80026bc <manage_tellers+0xaa8>)
 800265e:	f002 fb93 	bl	8004d88 <HAL_UART_Transmit>
		sprintf(buffer,"Teller 1: %d Teller 2: %d Teller 3: %d \r\n", tellers[1].status,tellers[2].status,tellers[3].status);
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <manage_tellers+0xa98>)
 8002664:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <manage_tellers+0xa98>)
 800266a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <manage_tellers+0xa98>)
 8002670:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8002674:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	460b      	mov	r3, r1
 800267c:	4912      	ldr	r1, [pc, #72]	; (80026c8 <manage_tellers+0xab4>)
 800267e:	f006 fa8d 	bl	8008b9c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8002682:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd fda2 	bl	80001d0 <strlen>
 800268c:	4603      	mov	r3, r0
 800268e:	b29a      	uxth	r2, r3
 8002690:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002694:	2364      	movs	r3, #100	; 0x64
 8002696:	4809      	ldr	r0, [pc, #36]	; (80026bc <manage_tellers+0xaa8>)
 8002698:	f002 fb76 	bl	8004d88 <HAL_UART_Transmit>
	}
}
 800269c:	bf00      	nop
 800269e:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a6:	bf00      	nop
 80026a8:	200006e8 	.word	0x200006e8
 80026ac:	200003b4 	.word	0x200003b4
 80026b0:	200000dc 	.word	0x200000dc
 80026b4:	88888889 	.word	0x88888889
 80026b8:	08009530 	.word	0x08009530
 80026bc:	20000308 	.word	0x20000308
 80026c0:	200000ec 	.word	0x200000ec
 80026c4:	0800954c 	.word	0x0800954c
 80026c8:	08009570 	.word	0x08009570

080026cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002704 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026d0:	f7ff f908 	bl	80018e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026d4:	480c      	ldr	r0, [pc, #48]	; (8002708 <LoopForever+0x6>)
  ldr r1, =_edata
 80026d6:	490d      	ldr	r1, [pc, #52]	; (800270c <LoopForever+0xa>)
  ldr r2, =_sidata
 80026d8:	4a0d      	ldr	r2, [pc, #52]	; (8002710 <LoopForever+0xe>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026dc:	e002      	b.n	80026e4 <LoopCopyDataInit>

080026de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e2:	3304      	adds	r3, #4

080026e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e8:	d3f9      	bcc.n	80026de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026ec:	4c0a      	ldr	r4, [pc, #40]	; (8002718 <LoopForever+0x16>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f0:	e001      	b.n	80026f6 <LoopFillZerobss>

080026f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f4:	3204      	adds	r2, #4

080026f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f8:	d3fb      	bcc.n	80026f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026fa:	f006 fa7d 	bl	8008bf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026fe:	f7fe fcf7 	bl	80010f0 <main>

08002702 <LoopForever>:

LoopForever:
    b LoopForever
 8002702:	e7fe      	b.n	8002702 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002704:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800270c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002710:	08009704 	.word	0x08009704
  ldr r2, =_sbss
 8002714:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002718:	200071ec 	.word	0x200071ec

0800271c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800271c:	e7fe      	b.n	800271c <ADC1_2_IRQHandler>
	...

08002720 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_Init+0x3c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a0b      	ldr	r2, [pc, #44]	; (800275c <HAL_Init+0x3c>)
 8002730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002734:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002736:	2003      	movs	r0, #3
 8002738:	f000 f93e 	bl	80029b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800273c:	200f      	movs	r0, #15
 800273e:	f000 f80f 	bl	8002760 <HAL_InitTick>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	71fb      	strb	r3, [r7, #7]
 800274c:	e001      	b.n	8002752 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800274e:	f7fe ff65 	bl	800161c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002752:	79fb      	ldrb	r3, [r7, #7]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40022000 	.word	0x40022000

08002760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_InitTick+0x6c>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d023      	beq.n	80027bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002774:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <HAL_InitTick+0x70>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_InitTick+0x6c>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002782:	fbb3 f3f1 	udiv	r3, r3, r1
 8002786:	fbb2 f3f3 	udiv	r3, r2, r3
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f949 	bl	8002a22 <HAL_SYSTICK_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b0f      	cmp	r3, #15
 800279a:	d809      	bhi.n	80027b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800279c:	2200      	movs	r2, #0
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	f000 f913 	bl	80029ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027a8:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <HAL_InitTick+0x74>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e007      	b.n	80027c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	e004      	b.n	80027c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	e001      	b.n	80027c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000008 	.word	0x20000008
 80027d0:	20000000 	.word	0x20000000
 80027d4:	20000004 	.word	0x20000004

080027d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_IncTick+0x24>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_IncTick+0x24>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000008 	.word	0x20000008
 80027fc:	20000978 	.word	0x20000978

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20000978 	.word	0x20000978

08002818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002834:	4013      	ands	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284a:	4a04      	ldr	r2, [pc, #16]	; (800285c <__NVIC_SetPriorityGrouping+0x44>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	60d3      	str	r3, [r2, #12]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <__NVIC_GetPriorityGrouping+0x18>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	f003 0307 	and.w	r3, r3, #7
}
 800286e:	4618      	mov	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	2b00      	cmp	r3, #0
 800288c:	db0b      	blt.n	80028a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	f003 021f 	and.w	r2, r3, #31
 8002894:	4907      	ldr	r1, [pc, #28]	; (80028b4 <__NVIC_EnableIRQ+0x38>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2001      	movs	r0, #1
 800289e:	fa00 f202 	lsl.w	r2, r0, r2
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000e100 	.word	0xe000e100

080028b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	db0a      	blt.n	80028e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	490c      	ldr	r1, [pc, #48]	; (8002904 <__NVIC_SetPriority+0x4c>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	440b      	add	r3, r1
 80028dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e0:	e00a      	b.n	80028f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <__NVIC_SetPriority+0x50>)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3b04      	subs	r3, #4
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	761a      	strb	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000e100 	.word	0xe000e100
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f1c3 0307 	rsb	r3, r3, #7
 8002926:	2b04      	cmp	r3, #4
 8002928:	bf28      	it	cs
 800292a:	2304      	movcs	r3, #4
 800292c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3304      	adds	r3, #4
 8002932:	2b06      	cmp	r3, #6
 8002934:	d902      	bls.n	800293c <NVIC_EncodePriority+0x30>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3b03      	subs	r3, #3
 800293a:	e000      	b.n	800293e <NVIC_EncodePriority+0x32>
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 32ff 	mov.w	r2, #4294967295
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	401a      	ands	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43d9      	mvns	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	4313      	orrs	r3, r2
         );
}
 8002966:	4618      	mov	r0, r3
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002984:	d301      	bcc.n	800298a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002986:	2301      	movs	r3, #1
 8002988:	e00f      	b.n	80029aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <SysTick_Config+0x40>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002992:	210f      	movs	r1, #15
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	f7ff ff8e 	bl	80028b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <SysTick_Config+0x40>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <SysTick_Config+0x40>)
 80029a4:	2207      	movs	r2, #7
 80029a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff29 	bl	8002818 <__NVIC_SetPriorityGrouping>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029e0:	f7ff ff3e 	bl	8002860 <__NVIC_GetPriorityGrouping>
 80029e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	6978      	ldr	r0, [r7, #20]
 80029ec:	f7ff ff8e 	bl	800290c <NVIC_EncodePriority>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff5d 	bl	80028b8 <__NVIC_SetPriority>
}
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff31 	bl	800287c <__NVIC_EnableIRQ>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ffa2 	bl	8002974 <SysTick_Config>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4a:	e17f      	b.n	8002d4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	2101      	movs	r1, #1
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8171 	beq.w	8002d46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d005      	beq.n	8002a7c <HAL_GPIO_Init+0x40>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d130      	bne.n	8002ade <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	f003 0201 	and.w	r2, r3, #1
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d118      	bne.n	8002b1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002af0:	2201      	movs	r2, #1
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	08db      	lsrs	r3, r3, #3
 8002b06:	f003 0201 	and.w	r2, r3, #1
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d017      	beq.n	8002b58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d123      	bne.n	8002bac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	08da      	lsrs	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3208      	adds	r2, #8
 8002b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	220f      	movs	r2, #15
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	08da      	lsrs	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3208      	adds	r2, #8
 8002ba6:	6939      	ldr	r1, [r7, #16]
 8002ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 0203 	and.w	r2, r3, #3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80ac 	beq.w	8002d46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bee:	4b5f      	ldr	r3, [pc, #380]	; (8002d6c <HAL_GPIO_Init+0x330>)
 8002bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf2:	4a5e      	ldr	r2, [pc, #376]	; (8002d6c <HAL_GPIO_Init+0x330>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6613      	str	r3, [r2, #96]	; 0x60
 8002bfa:	4b5c      	ldr	r3, [pc, #368]	; (8002d6c <HAL_GPIO_Init+0x330>)
 8002bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c06:	4a5a      	ldr	r2, [pc, #360]	; (8002d70 <HAL_GPIO_Init+0x334>)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	220f      	movs	r2, #15
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c30:	d025      	beq.n	8002c7e <HAL_GPIO_Init+0x242>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4f      	ldr	r2, [pc, #316]	; (8002d74 <HAL_GPIO_Init+0x338>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01f      	beq.n	8002c7a <HAL_GPIO_Init+0x23e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a4e      	ldr	r2, [pc, #312]	; (8002d78 <HAL_GPIO_Init+0x33c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d019      	beq.n	8002c76 <HAL_GPIO_Init+0x23a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a4d      	ldr	r2, [pc, #308]	; (8002d7c <HAL_GPIO_Init+0x340>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_GPIO_Init+0x236>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4c      	ldr	r2, [pc, #304]	; (8002d80 <HAL_GPIO_Init+0x344>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00d      	beq.n	8002c6e <HAL_GPIO_Init+0x232>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4b      	ldr	r2, [pc, #300]	; (8002d84 <HAL_GPIO_Init+0x348>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d007      	beq.n	8002c6a <HAL_GPIO_Init+0x22e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4a      	ldr	r2, [pc, #296]	; (8002d88 <HAL_GPIO_Init+0x34c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <HAL_GPIO_Init+0x22a>
 8002c62:	2306      	movs	r3, #6
 8002c64:	e00c      	b.n	8002c80 <HAL_GPIO_Init+0x244>
 8002c66:	2307      	movs	r3, #7
 8002c68:	e00a      	b.n	8002c80 <HAL_GPIO_Init+0x244>
 8002c6a:	2305      	movs	r3, #5
 8002c6c:	e008      	b.n	8002c80 <HAL_GPIO_Init+0x244>
 8002c6e:	2304      	movs	r3, #4
 8002c70:	e006      	b.n	8002c80 <HAL_GPIO_Init+0x244>
 8002c72:	2303      	movs	r3, #3
 8002c74:	e004      	b.n	8002c80 <HAL_GPIO_Init+0x244>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e002      	b.n	8002c80 <HAL_GPIO_Init+0x244>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <HAL_GPIO_Init+0x244>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	f002 0203 	and.w	r2, r2, #3
 8002c86:	0092      	lsls	r2, r2, #2
 8002c88:	4093      	lsls	r3, r2
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c90:	4937      	ldr	r1, [pc, #220]	; (8002d70 <HAL_GPIO_Init+0x334>)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	089b      	lsrs	r3, r3, #2
 8002c96:	3302      	adds	r3, #2
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c9e:	4b3b      	ldr	r3, [pc, #236]	; (8002d8c <HAL_GPIO_Init+0x350>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cc2:	4a32      	ldr	r2, [pc, #200]	; (8002d8c <HAL_GPIO_Init+0x350>)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cc8:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <HAL_GPIO_Init+0x350>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cec:	4a27      	ldr	r2, [pc, #156]	; (8002d8c <HAL_GPIO_Init+0x350>)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cf2:	4b26      	ldr	r3, [pc, #152]	; (8002d8c <HAL_GPIO_Init+0x350>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d16:	4a1d      	ldr	r2, [pc, #116]	; (8002d8c <HAL_GPIO_Init+0x350>)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_GPIO_Init+0x350>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d40:	4a12      	ldr	r2, [pc, #72]	; (8002d8c <HAL_GPIO_Init+0x350>)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	fa22 f303 	lsr.w	r3, r2, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f47f ae78 	bne.w	8002a4c <HAL_GPIO_Init+0x10>
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40010000 	.word	0x40010000
 8002d74:	48000400 	.word	0x48000400
 8002d78:	48000800 	.word	0x48000800
 8002d7c:	48000c00 	.word	0x48000c00
 8002d80:	48001000 	.word	0x48001000
 8002d84:	48001400 	.word	0x48001400
 8002d88:	48001800 	.word	0x48001800
 8002d8c:	40010400 	.word	0x40010400

08002d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	e001      	b.n	8002db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dae:	2300      	movs	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd0:	787b      	ldrb	r3, [r7, #1]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ddc:	e002      	b.n	8002de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <HAL_PWREx_GetVoltageRange+0x18>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40007000 	.word	0x40007000

08002e0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e1a:	d130      	bne.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e1c:	4b23      	ldr	r3, [pc, #140]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e28:	d038      	beq.n	8002e9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e2a:	4b20      	ldr	r3, [pc, #128]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e32:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2232      	movs	r2, #50	; 0x32
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	4a1b      	ldr	r2, [pc, #108]	; (8002eb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0c9b      	lsrs	r3, r3, #18
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e50:	e002      	b.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e58:	4b14      	ldr	r3, [pc, #80]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e64:	d102      	bne.n	8002e6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f2      	bne.n	8002e52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e78:	d110      	bne.n	8002e9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e00f      	b.n	8002e9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8a:	d007      	beq.n	8002e9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e8c:	4b07      	ldr	r3, [pc, #28]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e94:	4a05      	ldr	r2, [pc, #20]	; (8002eac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	431bde83 	.word	0x431bde83

08002eb8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e3ca      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eca:	4b97      	ldr	r3, [pc, #604]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ed4:	4b94      	ldr	r3, [pc, #592]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80e4 	beq.w	80030b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d007      	beq.n	8002f02 <HAL_RCC_OscConfig+0x4a>
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	f040 808b 	bne.w	8003010 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	f040 8087 	bne.w	8003010 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f02:	4b89      	ldr	r3, [pc, #548]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_RCC_OscConfig+0x62>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e3a2      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1a      	ldr	r2, [r3, #32]
 8002f1e:	4b82      	ldr	r3, [pc, #520]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <HAL_RCC_OscConfig+0x7c>
 8002f2a:	4b7f      	ldr	r3, [pc, #508]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f32:	e005      	b.n	8002f40 <HAL_RCC_OscConfig+0x88>
 8002f34:	4b7c      	ldr	r3, [pc, #496]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d223      	bcs.n	8002f8c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fd55 	bl	80039f8 <RCC_SetFlashLatencyFromMSIRange>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e383      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f58:	4b73      	ldr	r3, [pc, #460]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a72      	ldr	r2, [pc, #456]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002f5e:	f043 0308 	orr.w	r3, r3, #8
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b70      	ldr	r3, [pc, #448]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	496d      	ldr	r1, [pc, #436]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f76:	4b6c      	ldr	r3, [pc, #432]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	4968      	ldr	r1, [pc, #416]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
 8002f8a:	e025      	b.n	8002fd8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f8c:	4b66      	ldr	r3, [pc, #408]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a65      	ldr	r2, [pc, #404]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002f92:	f043 0308 	orr.w	r3, r3, #8
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b63      	ldr	r3, [pc, #396]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4960      	ldr	r1, [pc, #384]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002faa:	4b5f      	ldr	r3, [pc, #380]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	495b      	ldr	r1, [pc, #364]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d109      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fd15 	bl	80039f8 <RCC_SetFlashLatencyFromMSIRange>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e343      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fd8:	f000 fc4a 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b52      	ldr	r3, [pc, #328]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	4950      	ldr	r1, [pc, #320]	; (800312c <HAL_RCC_OscConfig+0x274>)
 8002fea:	5ccb      	ldrb	r3, [r1, r3]
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff4:	4a4e      	ldr	r2, [pc, #312]	; (8003130 <HAL_RCC_OscConfig+0x278>)
 8002ff6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ff8:	4b4e      	ldr	r3, [pc, #312]	; (8003134 <HAL_RCC_OscConfig+0x27c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fbaf 	bl	8002760 <HAL_InitTick>
 8003002:	4603      	mov	r3, r0
 8003004:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d052      	beq.n	80030b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	e327      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d032      	beq.n	800307e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003018:	4b43      	ldr	r3, [pc, #268]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a42      	ldr	r2, [pc, #264]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003024:	f7ff fbec 	bl	8002800 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800302c:	f7ff fbe8 	bl	8002800 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e310      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800303e:	4b3a      	ldr	r3, [pc, #232]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800304a:	4b37      	ldr	r3, [pc, #220]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a36      	ldr	r2, [pc, #216]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8003050:	f043 0308 	orr.w	r3, r3, #8
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	4b34      	ldr	r3, [pc, #208]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4931      	ldr	r1, [pc, #196]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003068:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	492c      	ldr	r1, [pc, #176]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
 800307c:	e01a      	b.n	80030b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800307e:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a29      	ldr	r2, [pc, #164]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800308a:	f7ff fbb9 	bl	8002800 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003092:	f7ff fbb5 	bl	8002800 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e2dd      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030a4:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f0      	bne.n	8003092 <HAL_RCC_OscConfig+0x1da>
 80030b0:	e000      	b.n	80030b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d074      	beq.n	80031aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d005      	beq.n	80030d2 <HAL_RCC_OscConfig+0x21a>
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	d10e      	bne.n	80030ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d10b      	bne.n	80030ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d064      	beq.n	80031a8 <HAL_RCC_OscConfig+0x2f0>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d160      	bne.n	80031a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e2ba      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f2:	d106      	bne.n	8003102 <HAL_RCC_OscConfig+0x24a>
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a0b      	ldr	r2, [pc, #44]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 80030fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	e026      	b.n	8003150 <HAL_RCC_OscConfig+0x298>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800310a:	d115      	bne.n	8003138 <HAL_RCC_OscConfig+0x280>
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a05      	ldr	r2, [pc, #20]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 8003112:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a02      	ldr	r2, [pc, #8]	; (8003128 <HAL_RCC_OscConfig+0x270>)
 800311e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	e014      	b.n	8003150 <HAL_RCC_OscConfig+0x298>
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	08009678 	.word	0x08009678
 8003130:	20000000 	.word	0x20000000
 8003134:	20000004 	.word	0x20000004
 8003138:	4ba0      	ldr	r3, [pc, #640]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a9f      	ldr	r2, [pc, #636]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 800313e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b9d      	ldr	r3, [pc, #628]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a9c      	ldr	r2, [pc, #624]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 800314a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7ff fb52 	bl	8002800 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7ff fb4e 	bl	8002800 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e276      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003172:	4b92      	ldr	r3, [pc, #584]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x2a8>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7ff fb3e 	bl	8002800 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003188:	f7ff fb3a 	bl	8002800 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e262      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800319a:	4b88      	ldr	r3, [pc, #544]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x2d0>
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d060      	beq.n	8003278 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_OscConfig+0x310>
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d119      	bne.n	80031f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d116      	bne.n	80031f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c8:	4b7c      	ldr	r3, [pc, #496]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_RCC_OscConfig+0x328>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e23f      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e0:	4b76      	ldr	r3, [pc, #472]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	4973      	ldr	r1, [pc, #460]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031f4:	e040      	b.n	8003278 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d023      	beq.n	8003246 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031fe:	4b6f      	ldr	r3, [pc, #444]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a6e      	ldr	r2, [pc, #440]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7ff faf9 	bl	8002800 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003212:	f7ff faf5 	bl	8002800 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e21d      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003224:	4b65      	ldr	r3, [pc, #404]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003230:	4b62      	ldr	r3, [pc, #392]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	061b      	lsls	r3, r3, #24
 800323e:	495f      	ldr	r1, [pc, #380]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
 8003244:	e018      	b.n	8003278 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003246:	4b5d      	ldr	r3, [pc, #372]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a5c      	ldr	r2, [pc, #368]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 800324c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003252:	f7ff fad5 	bl	8002800 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800325a:	f7ff fad1 	bl	8002800 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e1f9      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800326c:	4b53      	ldr	r3, [pc, #332]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f0      	bne.n	800325a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d03c      	beq.n	80032fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01c      	beq.n	80032c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328c:	4b4b      	ldr	r3, [pc, #300]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 800328e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003292:	4a4a      	ldr	r2, [pc, #296]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7ff fab0 	bl	8002800 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a4:	f7ff faac 	bl	8002800 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e1d4      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032b6:	4b41      	ldr	r3, [pc, #260]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 80032b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0ef      	beq.n	80032a4 <HAL_RCC_OscConfig+0x3ec>
 80032c4:	e01b      	b.n	80032fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c6:	4b3d      	ldr	r3, [pc, #244]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 80032c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032cc:	4a3b      	ldr	r2, [pc, #236]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d6:	f7ff fa93 	bl	8002800 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032de:	f7ff fa8f 	bl	8002800 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e1b7      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032f0:	4b32      	ldr	r3, [pc, #200]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 80032f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1ef      	bne.n	80032de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80a6 	beq.w	8003458 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330c:	2300      	movs	r3, #0
 800330e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003310:	4b2a      	ldr	r3, [pc, #168]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10d      	bne.n	8003338 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331c:	4b27      	ldr	r3, [pc, #156]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	4a26      	ldr	r2, [pc, #152]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 8003322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003326:	6593      	str	r3, [r2, #88]	; 0x58
 8003328:	4b24      	ldr	r3, [pc, #144]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003334:	2301      	movs	r3, #1
 8003336:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003338:	4b21      	ldr	r3, [pc, #132]	; (80033c0 <HAL_RCC_OscConfig+0x508>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d118      	bne.n	8003376 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003344:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <HAL_RCC_OscConfig+0x508>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <HAL_RCC_OscConfig+0x508>)
 800334a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003350:	f7ff fa56 	bl	8002800 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003358:	f7ff fa52 	bl	8002800 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e17a      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800336a:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <HAL_RCC_OscConfig+0x508>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d108      	bne.n	8003390 <HAL_RCC_OscConfig+0x4d8>
 800337e:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 8003380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003384:	4a0d      	ldr	r2, [pc, #52]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800338e:	e029      	b.n	80033e4 <HAL_RCC_OscConfig+0x52c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b05      	cmp	r3, #5
 8003396:	d115      	bne.n	80033c4 <HAL_RCC_OscConfig+0x50c>
 8003398:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339e:	4a07      	ldr	r2, [pc, #28]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 80033a0:	f043 0304 	orr.w	r3, r3, #4
 80033a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033a8:	4b04      	ldr	r3, [pc, #16]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	4a03      	ldr	r2, [pc, #12]	; (80033bc <HAL_RCC_OscConfig+0x504>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033b8:	e014      	b.n	80033e4 <HAL_RCC_OscConfig+0x52c>
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40007000 	.word	0x40007000
 80033c4:	4b9c      	ldr	r3, [pc, #624]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	4a9b      	ldr	r2, [pc, #620]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033d4:	4b98      	ldr	r3, [pc, #608]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	4a97      	ldr	r2, [pc, #604]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 80033dc:	f023 0304 	bic.w	r3, r3, #4
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d016      	beq.n	800341a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ec:	f7ff fa08 	bl	8002800 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f2:	e00a      	b.n	800340a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f4:	f7ff fa04 	bl	8002800 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e12a      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340a:	4b8b      	ldr	r3, [pc, #556]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0ed      	beq.n	80033f4 <HAL_RCC_OscConfig+0x53c>
 8003418:	e015      	b.n	8003446 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341a:	f7ff f9f1 	bl	8002800 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003420:	e00a      	b.n	8003438 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003422:	f7ff f9ed 	bl	8002800 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003430:	4293      	cmp	r3, r2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e113      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003438:	4b7f      	ldr	r3, [pc, #508]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1ed      	bne.n	8003422 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003446:	7ffb      	ldrb	r3, [r7, #31]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d105      	bne.n	8003458 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344c:	4b7a      	ldr	r3, [pc, #488]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 800344e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003450:	4a79      	ldr	r2, [pc, #484]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 8003452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003456:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80fe 	beq.w	800365e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	2b02      	cmp	r3, #2
 8003468:	f040 80d0 	bne.w	800360c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800346c:	4b72      	ldr	r3, [pc, #456]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f003 0203 	and.w	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	429a      	cmp	r2, r3
 800347e:	d130      	bne.n	80034e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	3b01      	subs	r3, #1
 800348c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d127      	bne.n	80034e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800349e:	429a      	cmp	r2, r3
 80034a0:	d11f      	bne.n	80034e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034ac:	2a07      	cmp	r2, #7
 80034ae:	bf14      	ite	ne
 80034b0:	2201      	movne	r2, #1
 80034b2:	2200      	moveq	r2, #0
 80034b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d113      	bne.n	80034e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	3b01      	subs	r3, #1
 80034c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d109      	bne.n	80034e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	085b      	lsrs	r3, r3, #1
 80034da:	3b01      	subs	r3, #1
 80034dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d06e      	beq.n	80035c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b0c      	cmp	r3, #12
 80034e6:	d069      	beq.n	80035bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034e8:	4b53      	ldr	r3, [pc, #332]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034f4:	4b50      	ldr	r3, [pc, #320]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0ad      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003504:	4b4c      	ldr	r3, [pc, #304]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a4b      	ldr	r2, [pc, #300]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 800350a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800350e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003510:	f7ff f976 	bl	8002800 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003518:	f7ff f972 	bl	8002800 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e09a      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352a:	4b43      	ldr	r3, [pc, #268]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003536:	4b40      	ldr	r3, [pc, #256]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	4b40      	ldr	r3, [pc, #256]	; (800363c <HAL_RCC_OscConfig+0x784>)
 800353c:	4013      	ands	r3, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003546:	3a01      	subs	r2, #1
 8003548:	0112      	lsls	r2, r2, #4
 800354a:	4311      	orrs	r1, r2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003550:	0212      	lsls	r2, r2, #8
 8003552:	4311      	orrs	r1, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003558:	0852      	lsrs	r2, r2, #1
 800355a:	3a01      	subs	r2, #1
 800355c:	0552      	lsls	r2, r2, #21
 800355e:	4311      	orrs	r1, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003564:	0852      	lsrs	r2, r2, #1
 8003566:	3a01      	subs	r2, #1
 8003568:	0652      	lsls	r2, r2, #25
 800356a:	4311      	orrs	r1, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003570:	0912      	lsrs	r2, r2, #4
 8003572:	0452      	lsls	r2, r2, #17
 8003574:	430a      	orrs	r2, r1
 8003576:	4930      	ldr	r1, [pc, #192]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 8003578:	4313      	orrs	r3, r2
 800357a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800357c:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a2d      	ldr	r2, [pc, #180]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 8003582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003586:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003588:	4b2b      	ldr	r3, [pc, #172]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a2a      	ldr	r2, [pc, #168]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 800358e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003592:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003594:	f7ff f934 	bl	8002800 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359c:	f7ff f930 	bl	8002800 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e058      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ae:	4b22      	ldr	r3, [pc, #136]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035ba:	e050      	b.n	800365e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e04f      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d148      	bne.n	800365e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035cc:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 80035d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035d8:	4b17      	ldr	r3, [pc, #92]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4a16      	ldr	r2, [pc, #88]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 80035de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035e4:	f7ff f90c 	bl	8002800 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ec:	f7ff f908 	bl	8002800 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e030      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fe:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x734>
 800360a:	e028      	b.n	800365e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b0c      	cmp	r3, #12
 8003610:	d023      	beq.n	800365a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a08      	ldr	r2, [pc, #32]	; (8003638 <HAL_RCC_OscConfig+0x780>)
 8003618:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800361c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361e:	f7ff f8ef 	bl	8002800 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003624:	e00c      	b.n	8003640 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003626:	f7ff f8eb 	bl	8002800 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d905      	bls.n	8003640 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e013      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
 8003638:	40021000 	.word	0x40021000
 800363c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003640:	4b09      	ldr	r3, [pc, #36]	; (8003668 <HAL_RCC_OscConfig+0x7b0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ec      	bne.n	8003626 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <HAL_RCC_OscConfig+0x7b0>)
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	4905      	ldr	r1, [pc, #20]	; (8003668 <HAL_RCC_OscConfig+0x7b0>)
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_RCC_OscConfig+0x7b4>)
 8003654:	4013      	ands	r3, r2
 8003656:	60cb      	str	r3, [r1, #12]
 8003658:	e001      	b.n	800365e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3720      	adds	r7, #32
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	feeefffc 	.word	0xfeeefffc

08003670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0e7      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003684:	4b75      	ldr	r3, [pc, #468]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d910      	bls.n	80036b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b72      	ldr	r3, [pc, #456]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 0207 	bic.w	r2, r3, #7
 800369a:	4970      	ldr	r1, [pc, #448]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b6e      	ldr	r3, [pc, #440]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0cf      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d010      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	4b66      	ldr	r3, [pc, #408]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d908      	bls.n	80036e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d0:	4b63      	ldr	r3, [pc, #396]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4960      	ldr	r1, [pc, #384]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d04c      	beq.n	8003788 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f6:	4b5a      	ldr	r3, [pc, #360]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d121      	bne.n	8003746 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0a6      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d107      	bne.n	800371e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800370e:	4b54      	ldr	r3, [pc, #336]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d115      	bne.n	8003746 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e09a      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d107      	bne.n	8003736 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003726:	4b4e      	ldr	r3, [pc, #312]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e08e      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003736:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e086      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003746:	4b46      	ldr	r3, [pc, #280]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f023 0203 	bic.w	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4943      	ldr	r1, [pc, #268]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003754:	4313      	orrs	r3, r2
 8003756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003758:	f7ff f852 	bl	8002800 <HAL_GetTick>
 800375c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375e:	e00a      	b.n	8003776 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003760:	f7ff f84e 	bl	8002800 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e06e      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	4b3a      	ldr	r3, [pc, #232]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 020c 	and.w	r2, r3, #12
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	429a      	cmp	r2, r3
 8003786:	d1eb      	bne.n	8003760 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d010      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	4b31      	ldr	r3, [pc, #196]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d208      	bcs.n	80037b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a4:	4b2e      	ldr	r3, [pc, #184]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	492b      	ldr	r1, [pc, #172]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037b6:	4b29      	ldr	r3, [pc, #164]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d210      	bcs.n	80037e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c4:	4b25      	ldr	r3, [pc, #148]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f023 0207 	bic.w	r2, r3, #7
 80037cc:	4923      	ldr	r1, [pc, #140]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d4:	4b21      	ldr	r3, [pc, #132]	; (800385c <HAL_RCC_ClockConfig+0x1ec>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d001      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e036      	b.n	8003854 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d008      	beq.n	8003804 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f2:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	4918      	ldr	r1, [pc, #96]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003800:	4313      	orrs	r3, r2
 8003802:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d009      	beq.n	8003824 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003810:	4b13      	ldr	r3, [pc, #76]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4910      	ldr	r1, [pc, #64]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 8003820:	4313      	orrs	r3, r2
 8003822:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003824:	f000 f824 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	490b      	ldr	r1, [pc, #44]	; (8003864 <HAL_RCC_ClockConfig+0x1f4>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
 8003840:	4a09      	ldr	r2, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x1f8>)
 8003842:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_ClockConfig+0x1fc>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fe ff89 	bl	8002760 <HAL_InitTick>
 800384e:	4603      	mov	r3, r0
 8003850:	72fb      	strb	r3, [r7, #11]

  return status;
 8003852:	7afb      	ldrb	r3, [r7, #11]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40022000 	.word	0x40022000
 8003860:	40021000 	.word	0x40021000
 8003864:	08009678 	.word	0x08009678
 8003868:	20000000 	.word	0x20000000
 800386c:	20000004 	.word	0x20000004

08003870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800387e:	4b3e      	ldr	r3, [pc, #248]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003888:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x34>
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d121      	bne.n	80038e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d11e      	bne.n	80038e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038a4:	4b34      	ldr	r3, [pc, #208]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038b0:	4b31      	ldr	r3, [pc, #196]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	e005      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038c0:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80038cc:	4a2b      	ldr	r2, [pc, #172]	; (800397c <HAL_RCC_GetSysClockFreq+0x10c>)
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10d      	bne.n	80038f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038e0:	e00a      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d102      	bne.n	80038ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038e8:	4b25      	ldr	r3, [pc, #148]	; (8003980 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ea:	61bb      	str	r3, [r7, #24]
 80038ec:	e004      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038f4:	4b23      	ldr	r3, [pc, #140]	; (8003984 <HAL_RCC_GetSysClockFreq+0x114>)
 80038f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d134      	bne.n	8003968 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038fe:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d003      	beq.n	8003916 <HAL_RCC_GetSysClockFreq+0xa6>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d003      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0xac>
 8003914:	e005      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003916:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <HAL_RCC_GetSysClockFreq+0x110>)
 8003918:	617b      	str	r3, [r7, #20]
      break;
 800391a:	e005      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_RCC_GetSysClockFreq+0x114>)
 800391e:	617b      	str	r3, [r7, #20]
      break;
 8003920:	e002      	b.n	8003928 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	617b      	str	r3, [r7, #20]
      break;
 8003926:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003928:	4b13      	ldr	r3, [pc, #76]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	3301      	adds	r3, #1
 8003934:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	0a1b      	lsrs	r3, r3, #8
 800393c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	fb03 f202 	mul.w	r2, r3, r2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	fbb2 f3f3 	udiv	r3, r2, r3
 800394c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800394e:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_RCC_GetSysClockFreq+0x108>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	0e5b      	lsrs	r3, r3, #25
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	3301      	adds	r3, #1
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	fbb2 f3f3 	udiv	r3, r2, r3
 8003966:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003968:	69bb      	ldr	r3, [r7, #24]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3724      	adds	r7, #36	; 0x24
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
 800397c:	08009690 	.word	0x08009690
 8003980:	00f42400 	.word	0x00f42400
 8003984:	007a1200 	.word	0x007a1200

08003988 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <HAL_RCC_GetHCLKFreq+0x14>)
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000000 	.word	0x20000000

080039a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039a4:	f7ff fff0 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	4904      	ldr	r1, [pc, #16]	; (80039c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000
 80039c8:	08009688 	.word	0x08009688

080039cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039d0:	f7ff ffda 	bl	8003988 <HAL_RCC_GetHCLKFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	0adb      	lsrs	r3, r3, #11
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	4904      	ldr	r1, [pc, #16]	; (80039f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40021000 	.word	0x40021000
 80039f4:	08009688 	.word	0x08009688

080039f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a04:	4b2a      	ldr	r3, [pc, #168]	; (8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a10:	f7ff f9ee 	bl	8002df0 <HAL_PWREx_GetVoltageRange>
 8003a14:	6178      	str	r0, [r7, #20]
 8003a16:	e014      	b.n	8003a42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a18:	4b25      	ldr	r3, [pc, #148]	; (8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	4a24      	ldr	r2, [pc, #144]	; (8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a22:	6593      	str	r3, [r2, #88]	; 0x58
 8003a24:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a30:	f7ff f9de 	bl	8002df0 <HAL_PWREx_GetVoltageRange>
 8003a34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a36:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a48:	d10b      	bne.n	8003a62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b80      	cmp	r3, #128	; 0x80
 8003a4e:	d919      	bls.n	8003a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2ba0      	cmp	r3, #160	; 0xa0
 8003a54:	d902      	bls.n	8003a5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a56:	2302      	movs	r3, #2
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	e013      	b.n	8003a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	e010      	b.n	8003a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b80      	cmp	r3, #128	; 0x80
 8003a66:	d902      	bls.n	8003a6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a68:	2303      	movs	r3, #3
 8003a6a:	613b      	str	r3, [r7, #16]
 8003a6c:	e00a      	b.n	8003a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b80      	cmp	r3, #128	; 0x80
 8003a72:	d102      	bne.n	8003a7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a74:	2302      	movs	r3, #2
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	e004      	b.n	8003a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b70      	cmp	r3, #112	; 0x70
 8003a7e:	d101      	bne.n	8003a84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a80:	2301      	movs	r3, #1
 8003a82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f023 0207 	bic.w	r2, r3, #7
 8003a8c:	4909      	ldr	r1, [pc, #36]	; (8003ab4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a94:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d001      	beq.n	8003aa6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40022000 	.word	0x40022000

08003ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d041      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003adc:	d02a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ade:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ae2:	d824      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ae4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ae8:	d008      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003aea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aee:	d81e      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003af4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af8:	d010      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003afa:	e018      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003afc:	4b86      	ldr	r3, [pc, #536]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a85      	ldr	r2, [pc, #532]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b08:	e015      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fabb 	bl	800408c <RCCEx_PLLSAI1_Config>
 8003b16:	4603      	mov	r3, r0
 8003b18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b1a:	e00c      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3320      	adds	r3, #32
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fba6 	bl	8004274 <RCCEx_PLLSAI2_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b2c:	e003      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	74fb      	strb	r3, [r7, #19]
      break;
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b36:	7cfb      	ldrb	r3, [r7, #19]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10b      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b3c:	4b76      	ldr	r3, [pc, #472]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b4a:	4973      	ldr	r1, [pc, #460]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b52:	e001      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d041      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b6c:	d02a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b72:	d824      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b78:	d008      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b7e:	d81e      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b88:	d010      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b8a:	e018      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b8c:	4b62      	ldr	r3, [pc, #392]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4a61      	ldr	r2, [pc, #388]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b98:	e015      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fa73 	bl	800408c <RCCEx_PLLSAI1_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003baa:	e00c      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3320      	adds	r3, #32
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fb5e 	bl	8004274 <RCCEx_PLLSAI2_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bbc:	e003      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	74fb      	strb	r3, [r7, #19]
      break;
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc6:	7cfb      	ldrb	r3, [r7, #19]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10b      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bcc:	4b52      	ldr	r3, [pc, #328]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bda:	494f      	ldr	r1, [pc, #316]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003be2:	e001      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be4:	7cfb      	ldrb	r3, [r7, #19]
 8003be6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80a0 	beq.w	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bfa:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00d      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c10:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c14:	4a40      	ldr	r2, [pc, #256]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c1c:	4b3e      	ldr	r3, [pc, #248]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c2c:	4b3b      	ldr	r3, [pc, #236]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a3a      	ldr	r2, [pc, #232]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c38:	f7fe fde2 	bl	8002800 <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c3e:	e009      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c40:	f7fe fdde 	bl	8002800 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d902      	bls.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	74fb      	strb	r3, [r7, #19]
        break;
 8003c52:	e005      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c54:	4b31      	ldr	r3, [pc, #196]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ef      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d15c      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c66:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01f      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d019      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c84:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c90:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	4a20      	ldr	r2, [pc, #128]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca6:	4a1c      	ldr	r2, [pc, #112]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cb0:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d016      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc2:	f7fe fd9d 	bl	8002800 <HAL_GetTick>
 8003cc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc8:	e00b      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cca:	f7fe fd99 	bl	8002800 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d902      	bls.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	74fb      	strb	r3, [r7, #19]
            break;
 8003ce0:	e006      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0ec      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003cf0:	7cfb      	ldrb	r3, [r7, #19]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf6:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d06:	4904      	ldr	r1, [pc, #16]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d0e:	e009      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d10:	7cfb      	ldrb	r3, [r7, #19]
 8003d12:	74bb      	strb	r3, [r7, #18]
 8003d14:	e006      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d20:	7cfb      	ldrb	r3, [r7, #19]
 8003d22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d24:	7c7b      	ldrb	r3, [r7, #17]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d105      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2a:	4b9e      	ldr	r3, [pc, #632]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	4a9d      	ldr	r2, [pc, #628]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d42:	4b98      	ldr	r3, [pc, #608]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	f023 0203 	bic.w	r2, r3, #3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	4994      	ldr	r1, [pc, #592]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d64:	4b8f      	ldr	r3, [pc, #572]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	f023 020c 	bic.w	r2, r3, #12
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d72:	498c      	ldr	r1, [pc, #560]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d86:	4b87      	ldr	r3, [pc, #540]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	4983      	ldr	r1, [pc, #524]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003da8:	4b7e      	ldr	r3, [pc, #504]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	497b      	ldr	r1, [pc, #492]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dca:	4b76      	ldr	r3, [pc, #472]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd8:	4972      	ldr	r1, [pc, #456]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dec:	4b6d      	ldr	r3, [pc, #436]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfa:	496a      	ldr	r1, [pc, #424]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e0e:	4b65      	ldr	r3, [pc, #404]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1c:	4961      	ldr	r1, [pc, #388]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e30:	4b5c      	ldr	r3, [pc, #368]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3e:	4959      	ldr	r1, [pc, #356]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e52:	4b54      	ldr	r3, [pc, #336]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e60:	4950      	ldr	r1, [pc, #320]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e74:	4b4b      	ldr	r3, [pc, #300]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e82:	4948      	ldr	r1, [pc, #288]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e96:	4b43      	ldr	r3, [pc, #268]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea4:	493f      	ldr	r1, [pc, #252]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d028      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eb8:	4b3a      	ldr	r3, [pc, #232]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec6:	4937      	ldr	r1, [pc, #220]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed6:	d106      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed8:	4b32      	ldr	r3, [pc, #200]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4a31      	ldr	r2, [pc, #196]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ee2:	60d3      	str	r3, [r2, #12]
 8003ee4:	e011      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eee:	d10c      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f8c8 	bl	800408c <RCCEx_PLLSAI1_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d028      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f16:	4b23      	ldr	r3, [pc, #140]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	491f      	ldr	r1, [pc, #124]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f34:	d106      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f36:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	4a1a      	ldr	r2, [pc, #104]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f40:	60d3      	str	r3, [r2, #12]
 8003f42:	e011      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3304      	adds	r3, #4
 8003f52:	2101      	movs	r1, #1
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 f899 	bl	800408c <RCCEx_PLLSAI1_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f5e:	7cfb      	ldrb	r3, [r7, #19]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f64:	7cfb      	ldrb	r3, [r7, #19]
 8003f66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d02b      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f82:	4908      	ldr	r1, [pc, #32]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f92:	d109      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a02      	ldr	r2, [pc, #8]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f9e:	60d3      	str	r3, [r2, #12]
 8003fa0:	e014      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 f867 	bl	800408c <RCCEx_PLLSAI1_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d02f      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fd8:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe6:	4928      	ldr	r1, [pc, #160]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ff6:	d10d      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	2102      	movs	r1, #2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f844 	bl	800408c <RCCEx_PLLSAI1_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004008:	7cfb      	ldrb	r3, [r7, #19]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d014      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800400e:	7cfb      	ldrb	r3, [r7, #19]
 8004010:	74bb      	strb	r3, [r7, #18]
 8004012:	e011      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800401c:	d10c      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3320      	adds	r3, #32
 8004022:	2102      	movs	r1, #2
 8004024:	4618      	mov	r0, r3
 8004026:	f000 f925 	bl	8004274 <RCCEx_PLLSAI2_Config>
 800402a:	4603      	mov	r3, r0
 800402c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800402e:	7cfb      	ldrb	r3, [r7, #19]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004044:	4b10      	ldr	r3, [pc, #64]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004052:	490d      	ldr	r1, [pc, #52]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004076:	4904      	ldr	r1, [pc, #16]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800407e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40021000 	.word	0x40021000

0800408c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800409a:	4b75      	ldr	r3, [pc, #468]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d018      	beq.n	80040d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040a6:	4b72      	ldr	r3, [pc, #456]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 0203 	and.w	r2, r3, #3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d10d      	bne.n	80040d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
       ||
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040be:	4b6c      	ldr	r3, [pc, #432]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	091b      	lsrs	r3, r3, #4
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
       ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d047      	beq.n	8004162 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	73fb      	strb	r3, [r7, #15]
 80040d6:	e044      	b.n	8004162 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d018      	beq.n	8004112 <RCCEx_PLLSAI1_Config+0x86>
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d825      	bhi.n	8004130 <RCCEx_PLLSAI1_Config+0xa4>
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d002      	beq.n	80040ee <RCCEx_PLLSAI1_Config+0x62>
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d009      	beq.n	8004100 <RCCEx_PLLSAI1_Config+0x74>
 80040ec:	e020      	b.n	8004130 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040ee:	4b60      	ldr	r3, [pc, #384]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d11d      	bne.n	8004136 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040fe:	e01a      	b.n	8004136 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004100:	4b5b      	ldr	r3, [pc, #364]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004108:	2b00      	cmp	r3, #0
 800410a:	d116      	bne.n	800413a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004110:	e013      	b.n	800413a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004112:	4b57      	ldr	r3, [pc, #348]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10f      	bne.n	800413e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800411e:	4b54      	ldr	r3, [pc, #336]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800412e:	e006      	b.n	800413e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
      break;
 8004134:	e004      	b.n	8004140 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004136:	bf00      	nop
 8004138:	e002      	b.n	8004140 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800413a:	bf00      	nop
 800413c:	e000      	b.n	8004140 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800413e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10d      	bne.n	8004162 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004146:	4b4a      	ldr	r3, [pc, #296]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6819      	ldr	r1, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	3b01      	subs	r3, #1
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	430b      	orrs	r3, r1
 800415c:	4944      	ldr	r1, [pc, #272]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 800415e:	4313      	orrs	r3, r2
 8004160:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d17d      	bne.n	8004264 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004168:	4b41      	ldr	r3, [pc, #260]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a40      	ldr	r2, [pc, #256]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 800416e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004174:	f7fe fb44 	bl	8002800 <HAL_GetTick>
 8004178:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800417a:	e009      	b.n	8004190 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800417c:	f7fe fb40 	bl	8002800 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d902      	bls.n	8004190 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	73fb      	strb	r3, [r7, #15]
        break;
 800418e:	e005      	b.n	800419c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004190:	4b37      	ldr	r3, [pc, #220]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1ef      	bne.n	800417c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d160      	bne.n	8004264 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d111      	bne.n	80041cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041a8:	4b31      	ldr	r3, [pc, #196]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80041b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6892      	ldr	r2, [r2, #8]
 80041b8:	0211      	lsls	r1, r2, #8
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68d2      	ldr	r2, [r2, #12]
 80041be:	0912      	lsrs	r2, r2, #4
 80041c0:	0452      	lsls	r2, r2, #17
 80041c2:	430a      	orrs	r2, r1
 80041c4:	492a      	ldr	r1, [pc, #168]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	610b      	str	r3, [r1, #16]
 80041ca:	e027      	b.n	800421c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d112      	bne.n	80041f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041d2:	4b27      	ldr	r3, [pc, #156]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80041da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6892      	ldr	r2, [r2, #8]
 80041e2:	0211      	lsls	r1, r2, #8
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6912      	ldr	r2, [r2, #16]
 80041e8:	0852      	lsrs	r2, r2, #1
 80041ea:	3a01      	subs	r2, #1
 80041ec:	0552      	lsls	r2, r2, #21
 80041ee:	430a      	orrs	r2, r1
 80041f0:	491f      	ldr	r1, [pc, #124]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	610b      	str	r3, [r1, #16]
 80041f6:	e011      	b.n	800421c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041f8:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004200:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6892      	ldr	r2, [r2, #8]
 8004208:	0211      	lsls	r1, r2, #8
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6952      	ldr	r2, [r2, #20]
 800420e:	0852      	lsrs	r2, r2, #1
 8004210:	3a01      	subs	r2, #1
 8004212:	0652      	lsls	r2, r2, #25
 8004214:	430a      	orrs	r2, r1
 8004216:	4916      	ldr	r1, [pc, #88]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004218:	4313      	orrs	r3, r2
 800421a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800421c:	4b14      	ldr	r3, [pc, #80]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a13      	ldr	r2, [pc, #76]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004222:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004226:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fe faea 	bl	8002800 <HAL_GetTick>
 800422c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800422e:	e009      	b.n	8004244 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004230:	f7fe fae6 	bl	8002800 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d902      	bls.n	8004244 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	73fb      	strb	r3, [r7, #15]
          break;
 8004242:	e005      	b.n	8004250 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004244:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0ef      	beq.n	8004230 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	4904      	ldr	r1, [pc, #16]	; (8004270 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004260:	4313      	orrs	r3, r2
 8004262:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004264:	7bfb      	ldrb	r3, [r7, #15]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40021000 	.word	0x40021000

08004274 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004282:	4b6a      	ldr	r3, [pc, #424]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d018      	beq.n	80042c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800428e:	4b67      	ldr	r3, [pc, #412]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f003 0203 	and.w	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d10d      	bne.n	80042ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
       ||
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80042a6:	4b61      	ldr	r3, [pc, #388]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	091b      	lsrs	r3, r3, #4
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
       ||
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d047      	beq.n	800434a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
 80042be:	e044      	b.n	800434a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d018      	beq.n	80042fa <RCCEx_PLLSAI2_Config+0x86>
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d825      	bhi.n	8004318 <RCCEx_PLLSAI2_Config+0xa4>
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d002      	beq.n	80042d6 <RCCEx_PLLSAI2_Config+0x62>
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d009      	beq.n	80042e8 <RCCEx_PLLSAI2_Config+0x74>
 80042d4:	e020      	b.n	8004318 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042d6:	4b55      	ldr	r3, [pc, #340]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d11d      	bne.n	800431e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042e6:	e01a      	b.n	800431e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042e8:	4b50      	ldr	r3, [pc, #320]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d116      	bne.n	8004322 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042f8:	e013      	b.n	8004322 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042fa:	4b4c      	ldr	r3, [pc, #304]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10f      	bne.n	8004326 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004306:	4b49      	ldr	r3, [pc, #292]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004316:	e006      	b.n	8004326 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
      break;
 800431c:	e004      	b.n	8004328 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800431e:	bf00      	nop
 8004320:	e002      	b.n	8004328 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004326:	bf00      	nop
    }

    if(status == HAL_OK)
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10d      	bne.n	800434a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800432e:	4b3f      	ldr	r3, [pc, #252]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6819      	ldr	r1, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	3b01      	subs	r3, #1
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	430b      	orrs	r3, r1
 8004344:	4939      	ldr	r1, [pc, #228]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004346:	4313      	orrs	r3, r2
 8004348:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d167      	bne.n	8004420 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004350:	4b36      	ldr	r3, [pc, #216]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a35      	ldr	r2, [pc, #212]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800435a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800435c:	f7fe fa50 	bl	8002800 <HAL_GetTick>
 8004360:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004362:	e009      	b.n	8004378 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004364:	f7fe fa4c 	bl	8002800 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d902      	bls.n	8004378 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	73fb      	strb	r3, [r7, #15]
        break;
 8004376:	e005      	b.n	8004384 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004378:	4b2c      	ldr	r3, [pc, #176]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1ef      	bne.n	8004364 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d14a      	bne.n	8004420 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d111      	bne.n	80043b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004390:	4b26      	ldr	r3, [pc, #152]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6892      	ldr	r2, [r2, #8]
 80043a0:	0211      	lsls	r1, r2, #8
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68d2      	ldr	r2, [r2, #12]
 80043a6:	0912      	lsrs	r2, r2, #4
 80043a8:	0452      	lsls	r2, r2, #17
 80043aa:	430a      	orrs	r2, r1
 80043ac:	491f      	ldr	r1, [pc, #124]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	614b      	str	r3, [r1, #20]
 80043b2:	e011      	b.n	80043d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043b4:	4b1d      	ldr	r3, [pc, #116]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6892      	ldr	r2, [r2, #8]
 80043c4:	0211      	lsls	r1, r2, #8
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6912      	ldr	r2, [r2, #16]
 80043ca:	0852      	lsrs	r2, r2, #1
 80043cc:	3a01      	subs	r2, #1
 80043ce:	0652      	lsls	r2, r2, #25
 80043d0:	430a      	orrs	r2, r1
 80043d2:	4916      	ldr	r1, [pc, #88]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80043d8:	4b14      	ldr	r3, [pc, #80]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a13      	ldr	r2, [pc, #76]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 80043de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e4:	f7fe fa0c 	bl	8002800 <HAL_GetTick>
 80043e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043ea:	e009      	b.n	8004400 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043ec:	f7fe fa08 	bl	8002800 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d902      	bls.n	8004400 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	73fb      	strb	r3, [r7, #15]
          break;
 80043fe:	e005      	b.n	800440c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0ef      	beq.n	80043ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004412:	4b06      	ldr	r3, [pc, #24]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	4904      	ldr	r1, [pc, #16]	; (800442c <RCCEx_PLLSAI2_Config+0x1b8>)
 800441c:	4313      	orrs	r3, r2
 800441e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000

08004430 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e049      	b.n	80044d6 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	795b      	ldrb	r3, [r3, #5]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d105      	bne.n	8004458 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fd f90a 	bl	800166c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0204 	orr.w	r2, r2, #4
 800446c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d104      	bne.n	8004486 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2204      	movs	r2, #4
 8004480:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e027      	b.n	80044d6 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004486:	f7fe f9bb 	bl	8002800 <HAL_GetTick>
 800448a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800448c:	e015      	b.n	80044ba <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800448e:	f7fe f9b7 	bl	8002800 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d90e      	bls.n	80044ba <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d107      	bne.n	80044ba <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2204      	movs	r2, #4
 80044ae:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e00d      	b.n	80044d6 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d0e2      	beq.n	800448e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	791b      	ldrb	r3, [r3, #4]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_RNG_GenerateRandomNumber+0x1a>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e044      	b.n	8004582 <HAL_RNG_GenerateRandomNumber+0xa4>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	795b      	ldrb	r3, [r3, #5]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d133      	bne.n	8004570 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800450e:	f7fe f977 	bl	8002800 <HAL_GetTick>
 8004512:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004514:	e018      	b.n	8004548 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004516:	f7fe f973 	bl	8002800 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d911      	bls.n	8004548 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b01      	cmp	r3, #1
 8004530:	d00a      	beq.n	8004548 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e01c      	b.n	8004582 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d1df      	bne.n	8004516 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	715a      	strb	r2, [r3, #5]
 800456e:	e004      	b.n	800457a <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2204      	movs	r2, #4
 8004574:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	711a      	strb	r2, [r3, #4]

  return status;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f003 0320 	and.w	r3, r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2210      	movs	r2, #16
 80045ac:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80045ae:	2301      	movs	r3, #1
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	e01f      	b.n	80045f4 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d01a      	beq.n	80045f4 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d108      	bne.n	80045da <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	e00c      	b.n	80045f4 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2208      	movs	r2, #8
 80045de:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 80045e0:	2301      	movs	r3, #1
 80045e2:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0208 	bic.w	r2, r2, #8
 80045f2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d10b      	bne.n	8004612 <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2204      	movs	r2, #4
 80045fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f837 	bl	8004674 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800460e:	605a      	str	r2, [r3, #4]

    return;
 8004610:	e022      	b.n	8004658 <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01d      	beq.n	8004658 <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0208 	bic.w	r2, r2, #8
 800462a:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	795b      	ldrb	r3, [r3, #5]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b04      	cmp	r3, #4
 800463e:	d00b      	beq.n	8004658 <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4619      	mov	r1, r3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f803 	bl	800465e <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e049      	b.n	800472e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fd f828 	bl	8001704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f000 f9d0 	bl	8004a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d001      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e04f      	b.n	80047f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a23      	ldr	r2, [pc, #140]	; (80047fc <HAL_TIM_Base_Start_IT+0xc4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d01d      	beq.n	80047ae <HAL_TIM_Base_Start_IT+0x76>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477a:	d018      	beq.n	80047ae <HAL_TIM_Base_Start_IT+0x76>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1f      	ldr	r2, [pc, #124]	; (8004800 <HAL_TIM_Base_Start_IT+0xc8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d013      	beq.n	80047ae <HAL_TIM_Base_Start_IT+0x76>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1e      	ldr	r2, [pc, #120]	; (8004804 <HAL_TIM_Base_Start_IT+0xcc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00e      	beq.n	80047ae <HAL_TIM_Base_Start_IT+0x76>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <HAL_TIM_Base_Start_IT+0xd0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d009      	beq.n	80047ae <HAL_TIM_Base_Start_IT+0x76>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1b      	ldr	r2, [pc, #108]	; (800480c <HAL_TIM_Base_Start_IT+0xd4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d004      	beq.n	80047ae <HAL_TIM_Base_Start_IT+0x76>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a19      	ldr	r2, [pc, #100]	; (8004810 <HAL_TIM_Base_Start_IT+0xd8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d115      	bne.n	80047da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	4b17      	ldr	r3, [pc, #92]	; (8004814 <HAL_TIM_Base_Start_IT+0xdc>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b06      	cmp	r3, #6
 80047be:	d015      	beq.n	80047ec <HAL_TIM_Base_Start_IT+0xb4>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c6:	d011      	beq.n	80047ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d8:	e008      	b.n	80047ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e000      	b.n	80047ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40000c00 	.word	0x40000c00
 800480c:	40013400 	.word	0x40013400
 8004810:	40014000 	.word	0x40014000
 8004814:	00010007 	.word	0x00010007

08004818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d020      	beq.n	800487c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01b      	beq.n	800487c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0202 	mvn.w	r2, #2
 800484c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f8e4 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 8004868:	e005      	b.n	8004876 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f8d6 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f8e7 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	d020      	beq.n	80048c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01b      	beq.n	80048c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0204 	mvn.w	r2, #4
 8004898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2202      	movs	r2, #2
 800489e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f8be 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 80048b4:	e005      	b.n	80048c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8b0 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f8c1 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d020      	beq.n	8004914 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01b      	beq.n	8004914 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0208 	mvn.w	r2, #8
 80048e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2204      	movs	r2, #4
 80048ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f898 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 8004900:	e005      	b.n	800490e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f88a 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f89b 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b00      	cmp	r3, #0
 800491c:	d020      	beq.n	8004960 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01b      	beq.n	8004960 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0210 	mvn.w	r2, #16
 8004930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2208      	movs	r2, #8
 8004936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f872 	bl	8004a30 <HAL_TIM_IC_CaptureCallback>
 800494c:	e005      	b.n	800495a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f864 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f875 	bl	8004a44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00c      	beq.n	8004984 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d007      	beq.n	8004984 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0201 	mvn.w	r2, #1
 800497c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fc fd86 	bl	8001490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00c      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f98e 	bl	8004cc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00c      	beq.n	80049cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d007      	beq.n	80049cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f986 	bl	8004cd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00c      	beq.n	80049f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d007      	beq.n	80049f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f834 	bl	8004a58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00c      	beq.n	8004a14 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0220 	mvn.w	r2, #32
 8004a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f94e 	bl	8004cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a14:	bf00      	nop
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a40      	ldr	r2, [pc, #256]	; (8004b80 <TIM_Base_SetConfig+0x114>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d013      	beq.n	8004aac <TIM_Base_SetConfig+0x40>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d00f      	beq.n	8004aac <TIM_Base_SetConfig+0x40>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a3d      	ldr	r2, [pc, #244]	; (8004b84 <TIM_Base_SetConfig+0x118>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00b      	beq.n	8004aac <TIM_Base_SetConfig+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a3c      	ldr	r2, [pc, #240]	; (8004b88 <TIM_Base_SetConfig+0x11c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d007      	beq.n	8004aac <TIM_Base_SetConfig+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a3b      	ldr	r2, [pc, #236]	; (8004b8c <TIM_Base_SetConfig+0x120>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d003      	beq.n	8004aac <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a3a      	ldr	r2, [pc, #232]	; (8004b90 <TIM_Base_SetConfig+0x124>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d108      	bne.n	8004abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a2f      	ldr	r2, [pc, #188]	; (8004b80 <TIM_Base_SetConfig+0x114>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d01f      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004acc:	d01b      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a2c      	ldr	r2, [pc, #176]	; (8004b84 <TIM_Base_SetConfig+0x118>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d017      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a2b      	ldr	r2, [pc, #172]	; (8004b88 <TIM_Base_SetConfig+0x11c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d013      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a2a      	ldr	r2, [pc, #168]	; (8004b8c <TIM_Base_SetConfig+0x120>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00f      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a29      	ldr	r2, [pc, #164]	; (8004b90 <TIM_Base_SetConfig+0x124>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00b      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a28      	ldr	r2, [pc, #160]	; (8004b94 <TIM_Base_SetConfig+0x128>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d007      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a27      	ldr	r2, [pc, #156]	; (8004b98 <TIM_Base_SetConfig+0x12c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d003      	beq.n	8004b06 <TIM_Base_SetConfig+0x9a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a26      	ldr	r2, [pc, #152]	; (8004b9c <TIM_Base_SetConfig+0x130>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d108      	bne.n	8004b18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a10      	ldr	r2, [pc, #64]	; (8004b80 <TIM_Base_SetConfig+0x114>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00f      	beq.n	8004b64 <TIM_Base_SetConfig+0xf8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a12      	ldr	r2, [pc, #72]	; (8004b90 <TIM_Base_SetConfig+0x124>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00b      	beq.n	8004b64 <TIM_Base_SetConfig+0xf8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a11      	ldr	r2, [pc, #68]	; (8004b94 <TIM_Base_SetConfig+0x128>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d007      	beq.n	8004b64 <TIM_Base_SetConfig+0xf8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a10      	ldr	r2, [pc, #64]	; (8004b98 <TIM_Base_SetConfig+0x12c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d003      	beq.n	8004b64 <TIM_Base_SetConfig+0xf8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a0f      	ldr	r2, [pc, #60]	; (8004b9c <TIM_Base_SetConfig+0x130>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d103      	bne.n	8004b6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	615a      	str	r2, [r3, #20]
}
 8004b72:	bf00      	nop
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40012c00 	.word	0x40012c00
 8004b84:	40000400 	.word	0x40000400
 8004b88:	40000800 	.word	0x40000800
 8004b8c:	40000c00 	.word	0x40000c00
 8004b90:	40013400 	.word	0x40013400
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800

08004ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e068      	b.n	8004c8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2e      	ldr	r2, [pc, #184]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2d      	ldr	r2, [pc, #180]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d108      	bne.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a1e      	ldr	r2, [pc, #120]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01d      	beq.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2a:	d018      	beq.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1b      	ldr	r2, [pc, #108]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00e      	beq.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a18      	ldr	r2, [pc, #96]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d009      	beq.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a13      	ldr	r2, [pc, #76]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d004      	beq.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a14      	ldr	r2, [pc, #80]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d10c      	bne.n	8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40013400 	.word	0x40013400
 8004ca0:	40000400 	.word	0x40000400
 8004ca4:	40000800 	.word	0x40000800
 8004ca8:	40000c00 	.word	0x40000c00
 8004cac:	40014000 	.word	0x40014000

08004cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e040      	b.n	8004d80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7fc fd1e 	bl	8001750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2224      	movs	r2, #36	; 0x24
 8004d18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0201 	bic.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fb6a 	bl	800540c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f8af 	bl	8004e9c <UART_SetConfig>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e01b      	b.n	8004d80 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fbe9 	bl	8005550 <UART_CheckIdleState>
 8004d7e:	4603      	mov	r3, r0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	; 0x28
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d178      	bne.n	8004e92 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_UART_Transmit+0x24>
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e071      	b.n	8004e94 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2221      	movs	r2, #33	; 0x21
 8004dbc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dbe:	f7fd fd1f 	bl	8002800 <HAL_GetTick>
 8004dc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	88fa      	ldrh	r2, [r7, #6]
 8004dc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	88fa      	ldrh	r2, [r7, #6]
 8004dd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ddc:	d108      	bne.n	8004df0 <HAL_UART_Transmit+0x68>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	61bb      	str	r3, [r7, #24]
 8004dee:	e003      	b.n	8004df8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004df8:	e030      	b.n	8004e5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2200      	movs	r2, #0
 8004e02:	2180      	movs	r1, #128	; 0x80
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 fc4b 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e03c      	b.n	8004e94 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10b      	bne.n	8004e38 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	881a      	ldrh	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e2c:	b292      	uxth	r2, r2
 8004e2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	3302      	adds	r3, #2
 8004e34:	61bb      	str	r3, [r7, #24]
 8004e36:	e008      	b.n	8004e4a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	781a      	ldrb	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	b292      	uxth	r2, r2
 8004e42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	3301      	adds	r3, #1
 8004e48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1c8      	bne.n	8004dfa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2140      	movs	r1, #64	; 0x40
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 fc14 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d004      	beq.n	8004e88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e005      	b.n	8004e94 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	e000      	b.n	8004e94 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004e92:	2302      	movs	r3, #2
  }
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3720      	adds	r7, #32
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea0:	b08a      	sub	sp, #40	; 0x28
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4ba4      	ldr	r3, [pc, #656]	; (800515c <UART_SetConfig+0x2c0>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	6812      	ldr	r2, [r2, #0]
 8004ed2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a99      	ldr	r2, [pc, #612]	; (8005160 <UART_SetConfig+0x2c4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d004      	beq.n	8004f08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f04:	4313      	orrs	r3, r2
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a90      	ldr	r2, [pc, #576]	; (8005164 <UART_SetConfig+0x2c8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d126      	bne.n	8004f74 <UART_SetConfig+0xd8>
 8004f26:	4b90      	ldr	r3, [pc, #576]	; (8005168 <UART_SetConfig+0x2cc>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d81b      	bhi.n	8004f6c <UART_SetConfig+0xd0>
 8004f34:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <UART_SetConfig+0xa0>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f5d 	.word	0x08004f5d
 8004f44:	08004f55 	.word	0x08004f55
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f52:	e116      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f54:	2302      	movs	r3, #2
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f5a:	e112      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f62:	e10e      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f64:	2308      	movs	r3, #8
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f6a:	e10a      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f6c:	2310      	movs	r3, #16
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f72:	e106      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a7c      	ldr	r2, [pc, #496]	; (800516c <UART_SetConfig+0x2d0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d138      	bne.n	8004ff0 <UART_SetConfig+0x154>
 8004f7e:	4b7a      	ldr	r3, [pc, #488]	; (8005168 <UART_SetConfig+0x2cc>)
 8004f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	2b0c      	cmp	r3, #12
 8004f8a:	d82d      	bhi.n	8004fe8 <UART_SetConfig+0x14c>
 8004f8c:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <UART_SetConfig+0xf8>)
 8004f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f92:	bf00      	nop
 8004f94:	08004fc9 	.word	0x08004fc9
 8004f98:	08004fe9 	.word	0x08004fe9
 8004f9c:	08004fe9 	.word	0x08004fe9
 8004fa0:	08004fe9 	.word	0x08004fe9
 8004fa4:	08004fd9 	.word	0x08004fd9
 8004fa8:	08004fe9 	.word	0x08004fe9
 8004fac:	08004fe9 	.word	0x08004fe9
 8004fb0:	08004fe9 	.word	0x08004fe9
 8004fb4:	08004fd1 	.word	0x08004fd1
 8004fb8:	08004fe9 	.word	0x08004fe9
 8004fbc:	08004fe9 	.word	0x08004fe9
 8004fc0:	08004fe9 	.word	0x08004fe9
 8004fc4:	08004fe1 	.word	0x08004fe1
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fce:	e0d8      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fd6:	e0d4      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fde:	e0d0      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe6:	e0cc      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fee:	e0c8      	b.n	8005182 <UART_SetConfig+0x2e6>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a5e      	ldr	r2, [pc, #376]	; (8005170 <UART_SetConfig+0x2d4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d125      	bne.n	8005046 <UART_SetConfig+0x1aa>
 8004ffa:	4b5b      	ldr	r3, [pc, #364]	; (8005168 <UART_SetConfig+0x2cc>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005000:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005004:	2b30      	cmp	r3, #48	; 0x30
 8005006:	d016      	beq.n	8005036 <UART_SetConfig+0x19a>
 8005008:	2b30      	cmp	r3, #48	; 0x30
 800500a:	d818      	bhi.n	800503e <UART_SetConfig+0x1a2>
 800500c:	2b20      	cmp	r3, #32
 800500e:	d00a      	beq.n	8005026 <UART_SetConfig+0x18a>
 8005010:	2b20      	cmp	r3, #32
 8005012:	d814      	bhi.n	800503e <UART_SetConfig+0x1a2>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <UART_SetConfig+0x182>
 8005018:	2b10      	cmp	r3, #16
 800501a:	d008      	beq.n	800502e <UART_SetConfig+0x192>
 800501c:	e00f      	b.n	800503e <UART_SetConfig+0x1a2>
 800501e:	2300      	movs	r3, #0
 8005020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005024:	e0ad      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005026:	2302      	movs	r3, #2
 8005028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502c:	e0a9      	b.n	8005182 <UART_SetConfig+0x2e6>
 800502e:	2304      	movs	r3, #4
 8005030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005034:	e0a5      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005036:	2308      	movs	r3, #8
 8005038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503c:	e0a1      	b.n	8005182 <UART_SetConfig+0x2e6>
 800503e:	2310      	movs	r3, #16
 8005040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005044:	e09d      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a4a      	ldr	r2, [pc, #296]	; (8005174 <UART_SetConfig+0x2d8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d125      	bne.n	800509c <UART_SetConfig+0x200>
 8005050:	4b45      	ldr	r3, [pc, #276]	; (8005168 <UART_SetConfig+0x2cc>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800505a:	2bc0      	cmp	r3, #192	; 0xc0
 800505c:	d016      	beq.n	800508c <UART_SetConfig+0x1f0>
 800505e:	2bc0      	cmp	r3, #192	; 0xc0
 8005060:	d818      	bhi.n	8005094 <UART_SetConfig+0x1f8>
 8005062:	2b80      	cmp	r3, #128	; 0x80
 8005064:	d00a      	beq.n	800507c <UART_SetConfig+0x1e0>
 8005066:	2b80      	cmp	r3, #128	; 0x80
 8005068:	d814      	bhi.n	8005094 <UART_SetConfig+0x1f8>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <UART_SetConfig+0x1d8>
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d008      	beq.n	8005084 <UART_SetConfig+0x1e8>
 8005072:	e00f      	b.n	8005094 <UART_SetConfig+0x1f8>
 8005074:	2300      	movs	r3, #0
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800507a:	e082      	b.n	8005182 <UART_SetConfig+0x2e6>
 800507c:	2302      	movs	r3, #2
 800507e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005082:	e07e      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005084:	2304      	movs	r3, #4
 8005086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800508a:	e07a      	b.n	8005182 <UART_SetConfig+0x2e6>
 800508c:	2308      	movs	r3, #8
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005092:	e076      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005094:	2310      	movs	r3, #16
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800509a:	e072      	b.n	8005182 <UART_SetConfig+0x2e6>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a35      	ldr	r2, [pc, #212]	; (8005178 <UART_SetConfig+0x2dc>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d12a      	bne.n	80050fc <UART_SetConfig+0x260>
 80050a6:	4b30      	ldr	r3, [pc, #192]	; (8005168 <UART_SetConfig+0x2cc>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b4:	d01a      	beq.n	80050ec <UART_SetConfig+0x250>
 80050b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ba:	d81b      	bhi.n	80050f4 <UART_SetConfig+0x258>
 80050bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c0:	d00c      	beq.n	80050dc <UART_SetConfig+0x240>
 80050c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c6:	d815      	bhi.n	80050f4 <UART_SetConfig+0x258>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <UART_SetConfig+0x238>
 80050cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d0:	d008      	beq.n	80050e4 <UART_SetConfig+0x248>
 80050d2:	e00f      	b.n	80050f4 <UART_SetConfig+0x258>
 80050d4:	2300      	movs	r3, #0
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050da:	e052      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050dc:	2302      	movs	r3, #2
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e2:	e04e      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050e4:	2304      	movs	r3, #4
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ea:	e04a      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050ec:	2308      	movs	r3, #8
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f2:	e046      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050f4:	2310      	movs	r3, #16
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fa:	e042      	b.n	8005182 <UART_SetConfig+0x2e6>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a17      	ldr	r2, [pc, #92]	; (8005160 <UART_SetConfig+0x2c4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d13a      	bne.n	800517c <UART_SetConfig+0x2e0>
 8005106:	4b18      	ldr	r3, [pc, #96]	; (8005168 <UART_SetConfig+0x2cc>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005110:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005114:	d01a      	beq.n	800514c <UART_SetConfig+0x2b0>
 8005116:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800511a:	d81b      	bhi.n	8005154 <UART_SetConfig+0x2b8>
 800511c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005120:	d00c      	beq.n	800513c <UART_SetConfig+0x2a0>
 8005122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005126:	d815      	bhi.n	8005154 <UART_SetConfig+0x2b8>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <UART_SetConfig+0x298>
 800512c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005130:	d008      	beq.n	8005144 <UART_SetConfig+0x2a8>
 8005132:	e00f      	b.n	8005154 <UART_SetConfig+0x2b8>
 8005134:	2300      	movs	r3, #0
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513a:	e022      	b.n	8005182 <UART_SetConfig+0x2e6>
 800513c:	2302      	movs	r3, #2
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005142:	e01e      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005144:	2304      	movs	r3, #4
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514a:	e01a      	b.n	8005182 <UART_SetConfig+0x2e6>
 800514c:	2308      	movs	r3, #8
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005152:	e016      	b.n	8005182 <UART_SetConfig+0x2e6>
 8005154:	2310      	movs	r3, #16
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515a:	e012      	b.n	8005182 <UART_SetConfig+0x2e6>
 800515c:	efff69f3 	.word	0xefff69f3
 8005160:	40008000 	.word	0x40008000
 8005164:	40013800 	.word	0x40013800
 8005168:	40021000 	.word	0x40021000
 800516c:	40004400 	.word	0x40004400
 8005170:	40004800 	.word	0x40004800
 8005174:	40004c00 	.word	0x40004c00
 8005178:	40005000 	.word	0x40005000
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a9f      	ldr	r2, [pc, #636]	; (8005404 <UART_SetConfig+0x568>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d17a      	bne.n	8005282 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800518c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005190:	2b08      	cmp	r3, #8
 8005192:	d824      	bhi.n	80051de <UART_SetConfig+0x342>
 8005194:	a201      	add	r2, pc, #4	; (adr r2, 800519c <UART_SetConfig+0x300>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051df 	.word	0x080051df
 80051a4:	080051c9 	.word	0x080051c9
 80051a8:	080051df 	.word	0x080051df
 80051ac:	080051cf 	.word	0x080051cf
 80051b0:	080051df 	.word	0x080051df
 80051b4:	080051df 	.word	0x080051df
 80051b8:	080051df 	.word	0x080051df
 80051bc:	080051d7 	.word	0x080051d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c0:	f7fe fbee 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 80051c4:	61f8      	str	r0, [r7, #28]
        break;
 80051c6:	e010      	b.n	80051ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051c8:	4b8f      	ldr	r3, [pc, #572]	; (8005408 <UART_SetConfig+0x56c>)
 80051ca:	61fb      	str	r3, [r7, #28]
        break;
 80051cc:	e00d      	b.n	80051ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ce:	f7fe fb4f 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 80051d2:	61f8      	str	r0, [r7, #28]
        break;
 80051d4:	e009      	b.n	80051ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051da:	61fb      	str	r3, [r7, #28]
        break;
 80051dc:	e005      	b.n	80051ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80051e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80fb 	beq.w	80053e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	4413      	add	r3, r2
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d305      	bcc.n	800520e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	429a      	cmp	r2, r3
 800520c:	d903      	bls.n	8005216 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005214:	e0e8      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	2200      	movs	r2, #0
 800521a:	461c      	mov	r4, r3
 800521c:	4615      	mov	r5, r2
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	022b      	lsls	r3, r5, #8
 8005228:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800522c:	0222      	lsls	r2, r4, #8
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	6849      	ldr	r1, [r1, #4]
 8005232:	0849      	lsrs	r1, r1, #1
 8005234:	2000      	movs	r0, #0
 8005236:	4688      	mov	r8, r1
 8005238:	4681      	mov	r9, r0
 800523a:	eb12 0a08 	adds.w	sl, r2, r8
 800523e:	eb43 0b09 	adc.w	fp, r3, r9
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005250:	4650      	mov	r0, sl
 8005252:	4659      	mov	r1, fp
 8005254:	f7fb f814 	bl	8000280 <__aeabi_uldivmod>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4613      	mov	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005266:	d308      	bcc.n	800527a <UART_SetConfig+0x3de>
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800526e:	d204      	bcs.n	800527a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	60da      	str	r2, [r3, #12]
 8005278:	e0b6      	b.n	80053e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005280:	e0b2      	b.n	80053e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800528a:	d15e      	bne.n	800534a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800528c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005290:	2b08      	cmp	r3, #8
 8005292:	d828      	bhi.n	80052e6 <UART_SetConfig+0x44a>
 8005294:	a201      	add	r2, pc, #4	; (adr r2, 800529c <UART_SetConfig+0x400>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	080052c9 	.word	0x080052c9
 80052a4:	080052d1 	.word	0x080052d1
 80052a8:	080052e7 	.word	0x080052e7
 80052ac:	080052d7 	.word	0x080052d7
 80052b0:	080052e7 	.word	0x080052e7
 80052b4:	080052e7 	.word	0x080052e7
 80052b8:	080052e7 	.word	0x080052e7
 80052bc:	080052df 	.word	0x080052df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c0:	f7fe fb6e 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 80052c4:	61f8      	str	r0, [r7, #28]
        break;
 80052c6:	e014      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c8:	f7fe fb80 	bl	80039cc <HAL_RCC_GetPCLK2Freq>
 80052cc:	61f8      	str	r0, [r7, #28]
        break;
 80052ce:	e010      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d0:	4b4d      	ldr	r3, [pc, #308]	; (8005408 <UART_SetConfig+0x56c>)
 80052d2:	61fb      	str	r3, [r7, #28]
        break;
 80052d4:	e00d      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d6:	f7fe facb 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 80052da:	61f8      	str	r0, [r7, #28]
        break;
 80052dc:	e009      	b.n	80052f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052e2:	61fb      	str	r3, [r7, #28]
        break;
 80052e4:	e005      	b.n	80052f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d077      	beq.n	80053e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	005a      	lsls	r2, r3, #1
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	085b      	lsrs	r3, r3, #1
 8005302:	441a      	add	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	fbb2 f3f3 	udiv	r3, r2, r3
 800530c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b0f      	cmp	r3, #15
 8005312:	d916      	bls.n	8005342 <UART_SetConfig+0x4a6>
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800531a:	d212      	bcs.n	8005342 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	b29b      	uxth	r3, r3
 8005320:	f023 030f 	bic.w	r3, r3, #15
 8005324:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	b29b      	uxth	r3, r3
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	b29a      	uxth	r2, r3
 8005332:	8afb      	ldrh	r3, [r7, #22]
 8005334:	4313      	orrs	r3, r2
 8005336:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	8afa      	ldrh	r2, [r7, #22]
 800533e:	60da      	str	r2, [r3, #12]
 8005340:	e052      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005348:	e04e      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800534a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800534e:	2b08      	cmp	r3, #8
 8005350:	d827      	bhi.n	80053a2 <UART_SetConfig+0x506>
 8005352:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <UART_SetConfig+0x4bc>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	0800537d 	.word	0x0800537d
 800535c:	08005385 	.word	0x08005385
 8005360:	0800538d 	.word	0x0800538d
 8005364:	080053a3 	.word	0x080053a3
 8005368:	08005393 	.word	0x08005393
 800536c:	080053a3 	.word	0x080053a3
 8005370:	080053a3 	.word	0x080053a3
 8005374:	080053a3 	.word	0x080053a3
 8005378:	0800539b 	.word	0x0800539b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800537c:	f7fe fb10 	bl	80039a0 <HAL_RCC_GetPCLK1Freq>
 8005380:	61f8      	str	r0, [r7, #28]
        break;
 8005382:	e014      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005384:	f7fe fb22 	bl	80039cc <HAL_RCC_GetPCLK2Freq>
 8005388:	61f8      	str	r0, [r7, #28]
        break;
 800538a:	e010      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800538c:	4b1e      	ldr	r3, [pc, #120]	; (8005408 <UART_SetConfig+0x56c>)
 800538e:	61fb      	str	r3, [r7, #28]
        break;
 8005390:	e00d      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005392:	f7fe fa6d 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 8005396:	61f8      	str	r0, [r7, #28]
        break;
 8005398:	e009      	b.n	80053ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800539a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800539e:	61fb      	str	r3, [r7, #28]
        break;
 80053a0:	e005      	b.n	80053ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053ac:	bf00      	nop
    }

    if (pclk != 0U)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d019      	beq.n	80053e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	085a      	lsrs	r2, r3, #1
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	441a      	add	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b0f      	cmp	r3, #15
 80053cc:	d909      	bls.n	80053e2 <UART_SetConfig+0x546>
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d4:	d205      	bcs.n	80053e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60da      	str	r2, [r3, #12]
 80053e0:	e002      	b.n	80053e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80053f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3728      	adds	r7, #40	; 0x28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005402:	bf00      	nop
 8005404:	40008000 	.word	0x40008000
 8005408:	00f42400 	.word	0x00f42400

0800540c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01a      	beq.n	8005522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800550a:	d10a      	bne.n	8005522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	605a      	str	r2, [r3, #4]
  }
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b098      	sub	sp, #96	; 0x60
 8005554:	af02      	add	r7, sp, #8
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005560:	f7fd f94e 	bl	8002800 <HAL_GetTick>
 8005564:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b08      	cmp	r3, #8
 8005572:	d12e      	bne.n	80055d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557c:	2200      	movs	r2, #0
 800557e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f88c 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d021      	beq.n	80055d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a2:	653b      	str	r3, [r7, #80]	; 0x50
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ac:	647b      	str	r3, [r7, #68]	; 0x44
 80055ae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e6      	bne.n	800558e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e062      	b.n	8005698 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d149      	bne.n	8005674 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e8:	2200      	movs	r2, #0
 80055ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f856 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d03c      	beq.n	8005674 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	623b      	str	r3, [r7, #32]
   return(result);
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800560e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005618:	633b      	str	r3, [r7, #48]	; 0x30
 800561a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800561e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e6      	bne.n	80055fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3308      	adds	r3, #8
 8005632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	60fb      	str	r3, [r7, #12]
   return(result);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0301 	bic.w	r3, r3, #1
 8005642:	64bb      	str	r3, [r7, #72]	; 0x48
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3308      	adds	r3, #8
 800564a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800564c:	61fa      	str	r2, [r7, #28]
 800564e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	69b9      	ldr	r1, [r7, #24]
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	617b      	str	r3, [r7, #20]
   return(result);
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e5      	bne.n	800562c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e011      	b.n	8005698 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3758      	adds	r7, #88	; 0x58
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	4613      	mov	r3, r2
 80056ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b0:	e049      	b.n	8005746 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b8:	d045      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ba:	f7fd f8a1 	bl	8002800 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d302      	bcc.n	80056d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e048      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d031      	beq.n	8005746 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d110      	bne.n	8005712 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2208      	movs	r2, #8
 80056f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f838 	bl	800576e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2208      	movs	r2, #8
 8005702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e029      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800571c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005720:	d111      	bne.n	8005746 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800572a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f81e 	bl	800576e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e00f      	b.n	8005766 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4013      	ands	r3, r2
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	429a      	cmp	r2, r3
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	79fb      	ldrb	r3, [r7, #7]
 8005760:	429a      	cmp	r2, r3
 8005762:	d0a6      	beq.n	80056b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800576e:	b480      	push	{r7}
 8005770:	b095      	sub	sp, #84	; 0x54
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800578a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005794:	643b      	str	r3, [r7, #64]	; 0x40
 8005796:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800579a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e6      	bne.n	8005776 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3308      	adds	r3, #8
 80057ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	64bb      	str	r3, [r7, #72]	; 0x48
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3308      	adds	r3, #8
 80057c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e5      	bne.n	80057a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d118      	bne.n	8005816 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f023 0310 	bic.w	r3, r3, #16
 80057f8:	647b      	str	r3, [r7, #68]	; 0x44
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	6979      	ldr	r1, [r7, #20]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	613b      	str	r3, [r7, #16]
   return(result);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e6      	bne.n	80057e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	669a      	str	r2, [r3, #104]	; 0x68
}
 800582a:	bf00      	nop
 800582c:	3754      	adds	r7, #84	; 0x54
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <__NVIC_SetPriority>:
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	6039      	str	r1, [r7, #0]
 8005842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005848:	2b00      	cmp	r3, #0
 800584a:	db0a      	blt.n	8005862 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	b2da      	uxtb	r2, r3
 8005850:	490c      	ldr	r1, [pc, #48]	; (8005884 <__NVIC_SetPriority+0x4c>)
 8005852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005856:	0112      	lsls	r2, r2, #4
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	440b      	add	r3, r1
 800585c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005860:	e00a      	b.n	8005878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	b2da      	uxtb	r2, r3
 8005866:	4908      	ldr	r1, [pc, #32]	; (8005888 <__NVIC_SetPriority+0x50>)
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	3b04      	subs	r3, #4
 8005870:	0112      	lsls	r2, r2, #4
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	440b      	add	r3, r1
 8005876:	761a      	strb	r2, [r3, #24]
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	e000e100 	.word	0xe000e100
 8005888:	e000ed00 	.word	0xe000ed00

0800588c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005890:	2100      	movs	r1, #0
 8005892:	f06f 0004 	mvn.w	r0, #4
 8005896:	f7ff ffcf 	bl	8005838 <__NVIC_SetPriority>
#endif
}
 800589a:	bf00      	nop
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058a6:	f3ef 8305 	mrs	r3, IPSR
 80058aa:	603b      	str	r3, [r7, #0]
  return(result);
 80058ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80058b2:	f06f 0305 	mvn.w	r3, #5
 80058b6:	607b      	str	r3, [r7, #4]
 80058b8:	e00c      	b.n	80058d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80058ba:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <osKernelInitialize+0x44>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d105      	bne.n	80058ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80058c2:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <osKernelInitialize+0x44>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	607b      	str	r3, [r7, #4]
 80058cc:	e002      	b.n	80058d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80058ce:	f04f 33ff 	mov.w	r3, #4294967295
 80058d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058d4:	687b      	ldr	r3, [r7, #4]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	2000097c 	.word	0x2000097c

080058e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ee:	f3ef 8305 	mrs	r3, IPSR
 80058f2:	603b      	str	r3, [r7, #0]
  return(result);
 80058f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <osKernelStart+0x1a>
    stat = osErrorISR;
 80058fa:	f06f 0305 	mvn.w	r3, #5
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	e010      	b.n	8005924 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005902:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <osKernelStart+0x48>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d109      	bne.n	800591e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800590a:	f7ff ffbf 	bl	800588c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800590e:	4b08      	ldr	r3, [pc, #32]	; (8005930 <osKernelStart+0x48>)
 8005910:	2202      	movs	r2, #2
 8005912:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005914:	f001 fb88 	bl	8007028 <vTaskStartScheduler>
      stat = osOK;
 8005918:	2300      	movs	r3, #0
 800591a:	607b      	str	r3, [r7, #4]
 800591c:	e002      	b.n	8005924 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005924:	687b      	ldr	r3, [r7, #4]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	2000097c 	.word	0x2000097c

08005934 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005934:	b580      	push	{r7, lr}
 8005936:	b08e      	sub	sp, #56	; 0x38
 8005938:	af04      	add	r7, sp, #16
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005940:	2300      	movs	r3, #0
 8005942:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005944:	f3ef 8305 	mrs	r3, IPSR
 8005948:	617b      	str	r3, [r7, #20]
  return(result);
 800594a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800594c:	2b00      	cmp	r3, #0
 800594e:	d17e      	bne.n	8005a4e <osThreadNew+0x11a>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d07b      	beq.n	8005a4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005956:	2380      	movs	r3, #128	; 0x80
 8005958:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800595a:	2318      	movs	r3, #24
 800595c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800595e:	2300      	movs	r3, #0
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005962:	f04f 33ff 	mov.w	r3, #4294967295
 8005966:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d045      	beq.n	80059fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <osThreadNew+0x48>
        name = attr->name;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <osThreadNew+0x6e>
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	2b38      	cmp	r3, #56	; 0x38
 8005994:	d805      	bhi.n	80059a2 <osThreadNew+0x6e>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <osThreadNew+0x72>
        return (NULL);
 80059a2:	2300      	movs	r3, #0
 80059a4:	e054      	b.n	8005a50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	089b      	lsrs	r3, r3, #2
 80059b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00e      	beq.n	80059dc <osThreadNew+0xa8>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	2b5b      	cmp	r3, #91	; 0x5b
 80059c4:	d90a      	bls.n	80059dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d006      	beq.n	80059dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <osThreadNew+0xa8>
        mem = 1;
 80059d6:	2301      	movs	r3, #1
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	e010      	b.n	80059fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10c      	bne.n	80059fe <osThreadNew+0xca>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d108      	bne.n	80059fe <osThreadNew+0xca>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <osThreadNew+0xca>
          mem = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61bb      	str	r3, [r7, #24]
 80059f8:	e001      	b.n	80059fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d110      	bne.n	8005a26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a0c:	9202      	str	r2, [sp, #8]
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	6a3a      	ldr	r2, [r7, #32]
 8005a18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f001 f92e 	bl	8006c7c <xTaskCreateStatic>
 8005a20:	4603      	mov	r3, r0
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	e013      	b.n	8005a4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d110      	bne.n	8005a4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	f107 0310 	add.w	r3, r7, #16
 8005a34:	9301      	str	r3, [sp, #4]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f001 f979 	bl	8006d36 <xTaskCreate>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d001      	beq.n	8005a4e <osThreadNew+0x11a>
            hTask = NULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a4e:	693b      	ldr	r3, [r7, #16]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3728      	adds	r7, #40	; 0x28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a60:	f3ef 8305 	mrs	r3, IPSR
 8005a64:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <osDelay+0x1c>
    stat = osErrorISR;
 8005a6c:	f06f 0305 	mvn.w	r3, #5
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	e007      	b.n	8005a84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 fa9e 	bl	8006fc0 <vTaskDelay>
    }
  }

  return (stat);
 8005a84:	68fb      	ldr	r3, [r7, #12]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b088      	sub	sp, #32
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a9a:	f3ef 8305 	mrs	r3, IPSR
 8005a9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aa0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d174      	bne.n	8005b90 <osMutexNew+0x102>
    if (attr != NULL) {
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	e001      	b.n	8005ab8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <osMutexNew+0x3a>
      rmtx = 1U;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	e001      	b.n	8005acc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d15c      	bne.n	8005b90 <osMutexNew+0x102>
      mem = -1;
 8005ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8005ada:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d015      	beq.n	8005b0e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d006      	beq.n	8005af8 <osMutexNew+0x6a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2b4f      	cmp	r3, #79	; 0x4f
 8005af0:	d902      	bls.n	8005af8 <osMutexNew+0x6a>
          mem = 1;
 8005af2:	2301      	movs	r3, #1
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	e00c      	b.n	8005b12 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d108      	bne.n	8005b12 <osMutexNew+0x84>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d104      	bne.n	8005b12 <osMutexNew+0x84>
            mem = 0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	613b      	str	r3, [r7, #16]
 8005b0c:	e001      	b.n	8005b12 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d112      	bne.n	8005b3e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d007      	beq.n	8005b2e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	4619      	mov	r1, r3
 8005b24:	2004      	movs	r0, #4
 8005b26:	f000 fb18 	bl	800615a <xQueueCreateMutexStatic>
 8005b2a:	61f8      	str	r0, [r7, #28]
 8005b2c:	e016      	b.n	8005b5c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	4619      	mov	r1, r3
 8005b34:	2001      	movs	r0, #1
 8005b36:	f000 fb10 	bl	800615a <xQueueCreateMutexStatic>
 8005b3a:	61f8      	str	r0, [r7, #28]
 8005b3c:	e00e      	b.n	8005b5c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10b      	bne.n	8005b5c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d004      	beq.n	8005b54 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005b4a:	2004      	movs	r0, #4
 8005b4c:	f000 faed 	bl	800612a <xQueueCreateMutex>
 8005b50:	61f8      	str	r0, [r7, #28]
 8005b52:	e003      	b.n	8005b5c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005b54:	2001      	movs	r0, #1
 8005b56:	f000 fae8 	bl	800612a <xQueueCreateMutex>
 8005b5a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00c      	beq.n	8005b7c <osMutexNew+0xee>
        if (attr != NULL) {
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <osMutexNew+0xe2>
          name = attr->name;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	e001      	b.n	8005b74 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005b74:	68f9      	ldr	r1, [r7, #12]
 8005b76:	69f8      	ldr	r0, [r7, #28]
 8005b78:	f001 f822 	bl	8006bc0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d006      	beq.n	8005b90 <osMutexNew+0x102>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005b90:	69fb      	ldr	r3, [r7, #28]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3720      	adds	r7, #32
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b086      	sub	sp, #24
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f023 0301 	bic.w	r3, r3, #1
 8005baa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bb8:	f3ef 8305 	mrs	r3, IPSR
 8005bbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bbe:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005bc4:	f06f 0305 	mvn.w	r3, #5
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	e02c      	b.n	8005c26 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d103      	bne.n	8005bda <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005bd2:	f06f 0303 	mvn.w	r3, #3
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	e025      	b.n	8005c26 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d011      	beq.n	8005c04 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6938      	ldr	r0, [r7, #16]
 8005be4:	f000 fb08 	bl	80061f8 <xQueueTakeMutexRecursive>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d01b      	beq.n	8005c26 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005bf4:	f06f 0301 	mvn.w	r3, #1
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	e014      	b.n	8005c26 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005bfc:	f06f 0302 	mvn.w	r3, #2
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	e010      	b.n	8005c26 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	6938      	ldr	r0, [r7, #16]
 8005c08:	f000 fda6 	bl	8006758 <xQueueSemaphoreTake>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d009      	beq.n	8005c26 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005c18:	f06f 0301 	mvn.w	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	e002      	b.n	8005c26 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005c20:	f06f 0302 	mvn.w	r3, #2
 8005c24:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005c26:	697b      	ldr	r3, [r7, #20]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f023 0301 	bic.w	r3, r3, #1
 8005c3e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c4c:	f3ef 8305 	mrs	r3, IPSR
 8005c50:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c52:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005c58:	f06f 0305 	mvn.w	r3, #5
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	e01f      	b.n	8005ca0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d103      	bne.n	8005c6e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005c66:	f06f 0303 	mvn.w	r3, #3
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	e018      	b.n	8005ca0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d009      	beq.n	8005c88 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005c74:	6938      	ldr	r0, [r7, #16]
 8005c76:	f000 fa8b 	bl	8006190 <xQueueGiveMutexRecursive>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d00f      	beq.n	8005ca0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005c80:	f06f 0302 	mvn.w	r3, #2
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	e00b      	b.n	8005ca0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	6938      	ldr	r0, [r7, #16]
 8005c90:	f000 fae8 	bl	8006264 <xQueueGenericSend>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d002      	beq.n	8005ca0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005c9a:	f06f 0302 	mvn.w	r3, #2
 8005c9e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005ca0:	697b      	ldr	r3, [r7, #20]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4a07      	ldr	r2, [pc, #28]	; (8005cd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005cbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	4a06      	ldr	r2, [pc, #24]	; (8005cdc <vApplicationGetIdleTaskMemory+0x30>)
 8005cc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2280      	movs	r2, #128	; 0x80
 8005cc8:	601a      	str	r2, [r3, #0]
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	20000980 	.word	0x20000980
 8005cdc:	200009dc 	.word	0x200009dc

08005ce0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4a07      	ldr	r2, [pc, #28]	; (8005d0c <vApplicationGetTimerTaskMemory+0x2c>)
 8005cf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	4a06      	ldr	r2, [pc, #24]	; (8005d10 <vApplicationGetTimerTaskMemory+0x30>)
 8005cf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cfe:	601a      	str	r2, [r3, #0]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	20000bdc 	.word	0x20000bdc
 8005d10:	20000c38 	.word	0x20000c38

08005d14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f103 0208 	add.w	r2, r3, #8
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f103 0208 	add.w	r2, r3, #8
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f103 0208 	add.w	r2, r3, #8
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b085      	sub	sp, #20
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	601a      	str	r2, [r3, #0]
}
 8005daa:	bf00      	nop
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005db6:	b480      	push	{r7}
 8005db8:	b085      	sub	sp, #20
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d103      	bne.n	8005dd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	e00c      	b.n	8005df0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e002      	b.n	8005de4 <vListInsert+0x2e>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d2f6      	bcs.n	8005dde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	601a      	str	r2, [r3, #0]
}
 8005e1c:	bf00      	nop
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6892      	ldr	r2, [r2, #8]
 8005e3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6852      	ldr	r2, [r2, #4]
 8005e48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d103      	bne.n	8005e5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	1e5a      	subs	r2, r3, #1
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ea6:	f002 fb6d 	bl	8008584 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb2:	68f9      	ldr	r1, [r7, #12]
 8005eb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005eb6:	fb01 f303 	mul.w	r3, r1, r3
 8005eba:	441a      	add	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	68f9      	ldr	r1, [r7, #12]
 8005eda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005edc:	fb01 f303 	mul.w	r3, r1, r3
 8005ee0:	441a      	add	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	22ff      	movs	r2, #255	; 0xff
 8005eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	22ff      	movs	r2, #255	; 0xff
 8005ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d114      	bne.n	8005f26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01a      	beq.n	8005f3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3310      	adds	r3, #16
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f001 fb17 	bl	800753c <xTaskRemoveFromEventList>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d012      	beq.n	8005f3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f14:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <xQueueGenericReset+0xcc>)
 8005f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	e009      	b.n	8005f3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3310      	adds	r3, #16
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff fef2 	bl	8005d14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3324      	adds	r3, #36	; 0x24
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff feed 	bl	8005d14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f3a:	f002 fb53 	bl	80085e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f3e:	2301      	movs	r3, #1
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08e      	sub	sp, #56	; 0x38
 8005f50:	af02      	add	r7, sp, #8
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10a      	bne.n	8005f76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f72:	bf00      	nop
 8005f74:	e7fe      	b.n	8005f74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f8e:	bf00      	nop
 8005f90:	e7fe      	b.n	8005f90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <xQueueGenericCreateStatic+0x52>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <xQueueGenericCreateStatic+0x56>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <xQueueGenericCreateStatic+0x58>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	623b      	str	r3, [r7, #32]
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <xQueueGenericCreateStatic+0x7e>
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <xQueueGenericCreateStatic+0x82>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e000      	b.n	8005fd0 <xQueueGenericCreateStatic+0x84>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10a      	bne.n	8005fea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	61fb      	str	r3, [r7, #28]
}
 8005fe6:	bf00      	nop
 8005fe8:	e7fe      	b.n	8005fe8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fea:	2350      	movs	r3, #80	; 0x50
 8005fec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b50      	cmp	r3, #80	; 0x50
 8005ff2:	d00a      	beq.n	800600a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	61bb      	str	r3, [r7, #24]
}
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800600a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00d      	beq.n	8006032 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800601e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	4613      	mov	r3, r2
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f83f 	bl	80060b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006034:	4618      	mov	r0, r3
 8006036:	3730      	adds	r7, #48	; 0x30
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08a      	sub	sp, #40	; 0x28
 8006040:	af02      	add	r7, sp, #8
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	4613      	mov	r3, r2
 8006048:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10a      	bne.n	8006066 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	613b      	str	r3, [r7, #16]
}
 8006062:	bf00      	nop
 8006064:	e7fe      	b.n	8006064 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	fb02 f303 	mul.w	r3, r2, r3
 800606e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	3350      	adds	r3, #80	; 0x50
 8006074:	4618      	mov	r0, r3
 8006076:	f002 fba7 	bl	80087c8 <pvPortMalloc>
 800607a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d011      	beq.n	80060a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	3350      	adds	r3, #80	; 0x50
 800608a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006094:	79fa      	ldrb	r2, [r7, #7]
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	4613      	mov	r3, r2
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	68b9      	ldr	r1, [r7, #8]
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 f805 	bl	80060b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060a6:	69bb      	ldr	r3, [r7, #24]
	}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3720      	adds	r7, #32
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d103      	bne.n	80060cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	e002      	b.n	80060d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060de:	2101      	movs	r1, #1
 80060e0:	69b8      	ldr	r0, [r7, #24]
 80060e2:	f7ff fecb 	bl	8005e7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	78fa      	ldrb	r2, [r7, #3]
 80060ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060ee:	bf00      	nop
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b082      	sub	sp, #8
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00e      	beq.n	8006122 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006116:	2300      	movs	r3, #0
 8006118:	2200      	movs	r2, #0
 800611a:	2100      	movs	r1, #0
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f8a1 	bl	8006264 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006122:	bf00      	nop
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800612a:	b580      	push	{r7, lr}
 800612c:	b086      	sub	sp, #24
 800612e:	af00      	add	r7, sp, #0
 8006130:	4603      	mov	r3, r0
 8006132:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006134:	2301      	movs	r3, #1
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	2300      	movs	r3, #0
 800613a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800613c:	79fb      	ldrb	r3, [r7, #7]
 800613e:	461a      	mov	r2, r3
 8006140:	6939      	ldr	r1, [r7, #16]
 8006142:	6978      	ldr	r0, [r7, #20]
 8006144:	f7ff ff7a 	bl	800603c <xQueueGenericCreate>
 8006148:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f7ff ffd3 	bl	80060f6 <prvInitialiseMutex>

		return xNewQueue;
 8006150:	68fb      	ldr	r3, [r7, #12]
	}
 8006152:	4618      	mov	r0, r3
 8006154:	3718      	adds	r7, #24
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800615a:	b580      	push	{r7, lr}
 800615c:	b088      	sub	sp, #32
 800615e:	af02      	add	r7, sp, #8
 8006160:	4603      	mov	r3, r0
 8006162:	6039      	str	r1, [r7, #0]
 8006164:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006166:	2301      	movs	r3, #1
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	2300      	movs	r3, #0
 800616c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2200      	movs	r2, #0
 8006176:	6939      	ldr	r1, [r7, #16]
 8006178:	6978      	ldr	r0, [r7, #20]
 800617a:	f7ff fee7 	bl	8005f4c <xQueueGenericCreateStatic>
 800617e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f7ff ffb8 	bl	80060f6 <prvInitialiseMutex>

		return xNewQueue;
 8006186:	68fb      	ldr	r3, [r7, #12]
	}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006190:	b590      	push	{r4, r7, lr}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10a      	bne.n	80061b8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	60fb      	str	r3, [r7, #12]
}
 80061b4:	bf00      	nop
 80061b6:	e7fe      	b.n	80061b6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	689c      	ldr	r4, [r3, #8]
 80061bc:	f001 fb7c 	bl	80078b8 <xTaskGetCurrentTaskHandle>
 80061c0:	4603      	mov	r3, r0
 80061c2:	429c      	cmp	r4, r3
 80061c4:	d111      	bne.n	80061ea <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	1e5a      	subs	r2, r3, #1
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80061d8:	2300      	movs	r3, #0
 80061da:	2200      	movs	r2, #0
 80061dc:	2100      	movs	r1, #0
 80061de:	6938      	ldr	r0, [r7, #16]
 80061e0:	f000 f840 	bl	8006264 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80061e4:	2301      	movs	r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	e001      	b.n	80061ee <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80061ee:	697b      	ldr	r3, [r7, #20]
	}
 80061f0:	4618      	mov	r0, r3
 80061f2:	371c      	adds	r7, #28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd90      	pop	{r4, r7, pc}

080061f8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80061f8:	b590      	push	{r4, r7, lr}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	60fb      	str	r3, [r7, #12]
}
 800621e:	bf00      	nop
 8006220:	e7fe      	b.n	8006220 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	689c      	ldr	r4, [r3, #8]
 8006226:	f001 fb47 	bl	80078b8 <xTaskGetCurrentTaskHandle>
 800622a:	4603      	mov	r3, r0
 800622c:	429c      	cmp	r4, r3
 800622e:	d107      	bne.n	8006240 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800623a:	2301      	movs	r3, #1
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	e00c      	b.n	800625a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6938      	ldr	r0, [r7, #16]
 8006244:	f000 fa88 	bl	8006758 <xQueueSemaphoreTake>
 8006248:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800625a:	697b      	ldr	r3, [r7, #20]
	}
 800625c:	4618      	mov	r0, r3
 800625e:	371c      	adds	r7, #28
 8006260:	46bd      	mov	sp, r7
 8006262:	bd90      	pop	{r4, r7, pc}

08006264 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08e      	sub	sp, #56	; 0x38
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006272:	2300      	movs	r3, #0
 8006274:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10a      	bne.n	8006296 <xQueueGenericSend+0x32>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d103      	bne.n	80062a4 <xQueueGenericSend+0x40>
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <xQueueGenericSend+0x44>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e000      	b.n	80062aa <xQueueGenericSend+0x46>
 80062a8:	2300      	movs	r3, #0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <xQueueGenericSend+0x60>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d103      	bne.n	80062d2 <xQueueGenericSend+0x6e>
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d101      	bne.n	80062d6 <xQueueGenericSend+0x72>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <xQueueGenericSend+0x74>
 80062d6:	2300      	movs	r3, #0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10a      	bne.n	80062f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	623b      	str	r3, [r7, #32]
}
 80062ee:	bf00      	nop
 80062f0:	e7fe      	b.n	80062f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062f2:	f001 faf1 	bl	80078d8 <xTaskGetSchedulerState>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d102      	bne.n	8006302 <xQueueGenericSend+0x9e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <xQueueGenericSend+0xa2>
 8006302:	2301      	movs	r3, #1
 8006304:	e000      	b.n	8006308 <xQueueGenericSend+0xa4>
 8006306:	2300      	movs	r3, #0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <xQueueGenericSend+0xbe>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	61fb      	str	r3, [r7, #28]
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006322:	f002 f92f 	bl	8008584 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632e:	429a      	cmp	r2, r3
 8006330:	d302      	bcc.n	8006338 <xQueueGenericSend+0xd4>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d129      	bne.n	800638c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800633e:	f000 fb2f 	bl	80069a0 <prvCopyDataToQueue>
 8006342:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	2b00      	cmp	r3, #0
 800634a:	d010      	beq.n	800636e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	3324      	adds	r3, #36	; 0x24
 8006350:	4618      	mov	r0, r3
 8006352:	f001 f8f3 	bl	800753c <xTaskRemoveFromEventList>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d013      	beq.n	8006384 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800635c:	4b3f      	ldr	r3, [pc, #252]	; (800645c <xQueueGenericSend+0x1f8>)
 800635e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	e00a      	b.n	8006384 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006370:	2b00      	cmp	r3, #0
 8006372:	d007      	beq.n	8006384 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006374:	4b39      	ldr	r3, [pc, #228]	; (800645c <xQueueGenericSend+0x1f8>)
 8006376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006384:	f002 f92e 	bl	80085e4 <vPortExitCritical>
				return pdPASS;
 8006388:	2301      	movs	r3, #1
 800638a:	e063      	b.n	8006454 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d103      	bne.n	800639a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006392:	f002 f927 	bl	80085e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006396:	2300      	movs	r3, #0
 8006398:	e05c      	b.n	8006454 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800639a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639c:	2b00      	cmp	r3, #0
 800639e:	d106      	bne.n	80063ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063a0:	f107 0314 	add.w	r3, r7, #20
 80063a4:	4618      	mov	r0, r3
 80063a6:	f001 f92d 	bl	8007604 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063aa:	2301      	movs	r3, #1
 80063ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063ae:	f002 f919 	bl	80085e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063b2:	f000 fe9f 	bl	80070f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063b6:	f002 f8e5 	bl	8008584 <vPortEnterCritical>
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063c0:	b25b      	sxtb	r3, r3
 80063c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c6:	d103      	bne.n	80063d0 <xQueueGenericSend+0x16c>
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d6:	b25b      	sxtb	r3, r3
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063dc:	d103      	bne.n	80063e6 <xQueueGenericSend+0x182>
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063e6:	f002 f8fd 	bl	80085e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063ea:	1d3a      	adds	r2, r7, #4
 80063ec:	f107 0314 	add.w	r3, r7, #20
 80063f0:	4611      	mov	r1, r2
 80063f2:	4618      	mov	r0, r3
 80063f4:	f001 f91c 	bl	8007630 <xTaskCheckForTimeOut>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d124      	bne.n	8006448 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006400:	f000 fbc6 	bl	8006b90 <prvIsQueueFull>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d018      	beq.n	800643c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	3310      	adds	r3, #16
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	4611      	mov	r1, r2
 8006412:	4618      	mov	r0, r3
 8006414:	f001 f842 	bl	800749c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800641a:	f000 fb51 	bl	8006ac0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800641e:	f000 fe77 	bl	8007110 <xTaskResumeAll>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	f47f af7c 	bne.w	8006322 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800642a:	4b0c      	ldr	r3, [pc, #48]	; (800645c <xQueueGenericSend+0x1f8>)
 800642c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	e772      	b.n	8006322 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800643c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800643e:	f000 fb3f 	bl	8006ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006442:	f000 fe65 	bl	8007110 <xTaskResumeAll>
 8006446:	e76c      	b.n	8006322 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800644a:	f000 fb39 	bl	8006ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800644e:	f000 fe5f 	bl	8007110 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006452:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006454:	4618      	mov	r0, r3
 8006456:	3738      	adds	r7, #56	; 0x38
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	e000ed04 	.word	0xe000ed04

08006460 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b090      	sub	sp, #64	; 0x40
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10a      	bne.n	800648e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800648a:	bf00      	nop
 800648c:	e7fe      	b.n	800648c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d103      	bne.n	800649c <xQueueGenericSendFromISR+0x3c>
 8006494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <xQueueGenericSendFromISR+0x40>
 800649c:	2301      	movs	r3, #1
 800649e:	e000      	b.n	80064a2 <xQueueGenericSendFromISR+0x42>
 80064a0:	2300      	movs	r3, #0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10a      	bne.n	80064bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d103      	bne.n	80064ca <xQueueGenericSendFromISR+0x6a>
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d101      	bne.n	80064ce <xQueueGenericSendFromISR+0x6e>
 80064ca:	2301      	movs	r3, #1
 80064cc:	e000      	b.n	80064d0 <xQueueGenericSendFromISR+0x70>
 80064ce:	2300      	movs	r3, #0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	623b      	str	r3, [r7, #32]
}
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064ea:	f002 f92d 	bl	8008748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064ee:	f3ef 8211 	mrs	r2, BASEPRI
 80064f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	61fa      	str	r2, [r7, #28]
 8006504:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006506:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006508:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006512:	429a      	cmp	r2, r3
 8006514:	d302      	bcc.n	800651c <xQueueGenericSendFromISR+0xbc>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b02      	cmp	r3, #2
 800651a:	d12f      	bne.n	800657c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	68b9      	ldr	r1, [r7, #8]
 8006530:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006532:	f000 fa35 	bl	80069a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006536:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800653a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653e:	d112      	bne.n	8006566 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	d016      	beq.n	8006576 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654a:	3324      	adds	r3, #36	; 0x24
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fff5 	bl	800753c <xTaskRemoveFromEventList>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00e      	beq.n	8006576 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00b      	beq.n	8006576 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	e007      	b.n	8006576 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006566:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800656a:	3301      	adds	r3, #1
 800656c:	b2db      	uxtb	r3, r3
 800656e:	b25a      	sxtb	r2, r3
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006576:	2301      	movs	r3, #1
 8006578:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800657a:	e001      	b.n	8006580 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800657c:	2300      	movs	r3, #0
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006582:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800658a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800658c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800658e:	4618      	mov	r0, r3
 8006590:	3740      	adds	r7, #64	; 0x40
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08c      	sub	sp, #48	; 0x30
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065a4:	2300      	movs	r3, #0
 80065a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10a      	bne.n	80065c8 <xQueueReceive+0x30>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	623b      	str	r3, [r7, #32]
}
 80065c4:	bf00      	nop
 80065c6:	e7fe      	b.n	80065c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <xQueueReceive+0x3e>
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <xQueueReceive+0x42>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <xQueueReceive+0x44>
 80065da:	2300      	movs	r3, #0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <xQueueReceive+0x5e>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	61fb      	str	r3, [r7, #28]
}
 80065f2:	bf00      	nop
 80065f4:	e7fe      	b.n	80065f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065f6:	f001 f96f 	bl	80078d8 <xTaskGetSchedulerState>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d102      	bne.n	8006606 <xQueueReceive+0x6e>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <xQueueReceive+0x72>
 8006606:	2301      	movs	r3, #1
 8006608:	e000      	b.n	800660c <xQueueReceive+0x74>
 800660a:	2300      	movs	r3, #0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10a      	bne.n	8006626 <xQueueReceive+0x8e>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	61bb      	str	r3, [r7, #24]
}
 8006622:	bf00      	nop
 8006624:	e7fe      	b.n	8006624 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006626:	f001 ffad 	bl	8008584 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01f      	beq.n	8006676 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006636:	68b9      	ldr	r1, [r7, #8]
 8006638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663a:	f000 fa1b 	bl	8006a74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	1e5a      	subs	r2, r3, #1
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00f      	beq.n	800666e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	3310      	adds	r3, #16
 8006652:	4618      	mov	r0, r3
 8006654:	f000 ff72 	bl	800753c <xTaskRemoveFromEventList>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d007      	beq.n	800666e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800665e:	4b3d      	ldr	r3, [pc, #244]	; (8006754 <xQueueReceive+0x1bc>)
 8006660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800666e:	f001 ffb9 	bl	80085e4 <vPortExitCritical>
				return pdPASS;
 8006672:	2301      	movs	r3, #1
 8006674:	e069      	b.n	800674a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d103      	bne.n	8006684 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800667c:	f001 ffb2 	bl	80085e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006680:	2300      	movs	r3, #0
 8006682:	e062      	b.n	800674a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800668a:	f107 0310 	add.w	r3, r7, #16
 800668e:	4618      	mov	r0, r3
 8006690:	f000 ffb8 	bl	8007604 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006694:	2301      	movs	r3, #1
 8006696:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006698:	f001 ffa4 	bl	80085e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800669c:	f000 fd2a 	bl	80070f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066a0:	f001 ff70 	bl	8008584 <vPortEnterCritical>
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066aa:	b25b      	sxtb	r3, r3
 80066ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b0:	d103      	bne.n	80066ba <xQueueReceive+0x122>
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066c0:	b25b      	sxtb	r3, r3
 80066c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c6:	d103      	bne.n	80066d0 <xQueueReceive+0x138>
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066d0:	f001 ff88 	bl	80085e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066d4:	1d3a      	adds	r2, r7, #4
 80066d6:	f107 0310 	add.w	r3, r7, #16
 80066da:	4611      	mov	r1, r2
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 ffa7 	bl	8007630 <xTaskCheckForTimeOut>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d123      	bne.n	8006730 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ea:	f000 fa3b 	bl	8006b64 <prvIsQueueEmpty>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d017      	beq.n	8006724 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	3324      	adds	r3, #36	; 0x24
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	4611      	mov	r1, r2
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 fecd 	bl	800749c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006704:	f000 f9dc 	bl	8006ac0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006708:	f000 fd02 	bl	8007110 <xTaskResumeAll>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d189      	bne.n	8006626 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006712:	4b10      	ldr	r3, [pc, #64]	; (8006754 <xQueueReceive+0x1bc>)
 8006714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	e780      	b.n	8006626 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006726:	f000 f9cb 	bl	8006ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800672a:	f000 fcf1 	bl	8007110 <xTaskResumeAll>
 800672e:	e77a      	b.n	8006626 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006732:	f000 f9c5 	bl	8006ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006736:	f000 fceb 	bl	8007110 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800673a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800673c:	f000 fa12 	bl	8006b64 <prvIsQueueEmpty>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	f43f af6f 	beq.w	8006626 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006748:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800674a:	4618      	mov	r0, r3
 800674c:	3730      	adds	r7, #48	; 0x30
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	e000ed04 	.word	0xe000ed04

08006758 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08e      	sub	sp, #56	; 0x38
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006762:	2300      	movs	r3, #0
 8006764:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800676a:	2300      	movs	r3, #0
 800676c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10a      	bne.n	800678a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	623b      	str	r3, [r7, #32]
}
 8006786:	bf00      	nop
 8006788:	e7fe      	b.n	8006788 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	61fb      	str	r3, [r7, #28]
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067a8:	f001 f896 	bl	80078d8 <xTaskGetSchedulerState>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d102      	bne.n	80067b8 <xQueueSemaphoreTake+0x60>
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <xQueueSemaphoreTake+0x64>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <xQueueSemaphoreTake+0x66>
 80067bc:	2300      	movs	r3, #0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	61bb      	str	r3, [r7, #24]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067d8:	f001 fed4 	bl	8008584 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80067dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80067e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d024      	beq.n	8006832 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	1e5a      	subs	r2, r3, #1
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d104      	bne.n	8006802 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80067f8:	f001 f9e4 	bl	8007bc4 <pvTaskIncrementMutexHeldCount>
 80067fc:	4602      	mov	r2, r0
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00f      	beq.n	800682a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	3310      	adds	r3, #16
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fe94 	bl	800753c <xTaskRemoveFromEventList>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d007      	beq.n	800682a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800681a:	4b54      	ldr	r3, [pc, #336]	; (800696c <xQueueSemaphoreTake+0x214>)
 800681c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800682a:	f001 fedb 	bl	80085e4 <vPortExitCritical>
				return pdPASS;
 800682e:	2301      	movs	r3, #1
 8006830:	e097      	b.n	8006962 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d111      	bne.n	800685c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	617b      	str	r3, [r7, #20]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006854:	f001 fec6 	bl	80085e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006858:	2300      	movs	r3, #0
 800685a:	e082      	b.n	8006962 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800685c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685e:	2b00      	cmp	r3, #0
 8006860:	d106      	bne.n	8006870 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006862:	f107 030c 	add.w	r3, r7, #12
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fecc 	bl	8007604 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800686c:	2301      	movs	r3, #1
 800686e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006870:	f001 feb8 	bl	80085e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006874:	f000 fc3e 	bl	80070f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006878:	f001 fe84 	bl	8008584 <vPortEnterCritical>
 800687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006882:	b25b      	sxtb	r3, r3
 8006884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006888:	d103      	bne.n	8006892 <xQueueSemaphoreTake+0x13a>
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006898:	b25b      	sxtb	r3, r3
 800689a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689e:	d103      	bne.n	80068a8 <xQueueSemaphoreTake+0x150>
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068a8:	f001 fe9c 	bl	80085e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068ac:	463a      	mov	r2, r7
 80068ae:	f107 030c 	add.w	r3, r7, #12
 80068b2:	4611      	mov	r1, r2
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 febb 	bl	8007630 <xTaskCheckForTimeOut>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d132      	bne.n	8006926 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068c2:	f000 f94f 	bl	8006b64 <prvIsQueueEmpty>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d026      	beq.n	800691a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d109      	bne.n	80068e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80068d4:	f001 fe56 	bl	8008584 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	4618      	mov	r0, r3
 80068de:	f001 f819 	bl	8007914 <xTaskPriorityInherit>
 80068e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80068e4:	f001 fe7e 	bl	80085e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	3324      	adds	r3, #36	; 0x24
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	4611      	mov	r1, r2
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fdd3 	bl	800749c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068f8:	f000 f8e2 	bl	8006ac0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068fc:	f000 fc08 	bl	8007110 <xTaskResumeAll>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	f47f af68 	bne.w	80067d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006908:	4b18      	ldr	r3, [pc, #96]	; (800696c <xQueueSemaphoreTake+0x214>)
 800690a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	e75e      	b.n	80067d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800691a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800691c:	f000 f8d0 	bl	8006ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006920:	f000 fbf6 	bl	8007110 <xTaskResumeAll>
 8006924:	e758      	b.n	80067d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006928:	f000 f8ca 	bl	8006ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800692c:	f000 fbf0 	bl	8007110 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006930:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006932:	f000 f917 	bl	8006b64 <prvIsQueueEmpty>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	f43f af4d 	beq.w	80067d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00d      	beq.n	8006960 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006944:	f001 fe1e 	bl	8008584 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006948:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800694a:	f000 f811 	bl	8006970 <prvGetDisinheritPriorityAfterTimeout>
 800694e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006956:	4618      	mov	r0, r3
 8006958:	f001 f8b2 	bl	8007ac0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800695c:	f001 fe42 	bl	80085e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006960:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006962:	4618      	mov	r0, r3
 8006964:	3738      	adds	r7, #56	; 0x38
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	d006      	beq.n	800698e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	e001      	b.n	8006992 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800698e:	2300      	movs	r3, #0
 8006990:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006992:	68fb      	ldr	r3, [r7, #12]
	}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069ac:	2300      	movs	r3, #0
 80069ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10d      	bne.n	80069da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d14d      	bne.n	8006a62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f001 f80a 	bl	80079e4 <xTaskPriorityDisinherit>
 80069d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	609a      	str	r2, [r3, #8]
 80069d8:	e043      	b.n	8006a62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d119      	bne.n	8006a14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6858      	ldr	r0, [r3, #4]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	461a      	mov	r2, r3
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	f002 f92a 	bl	8008c44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f8:	441a      	add	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d32b      	bcc.n	8006a62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	605a      	str	r2, [r3, #4]
 8006a12:	e026      	b.n	8006a62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	68d8      	ldr	r0, [r3, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	68b9      	ldr	r1, [r7, #8]
 8006a20:	f002 f910 	bl	8008c44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	425b      	negs	r3, r3
 8006a2e:	441a      	add	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d207      	bcs.n	8006a50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	425b      	negs	r3, r3
 8006a4a:	441a      	add	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d105      	bne.n	8006a62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a6a:	697b      	ldr	r3, [r7, #20]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d018      	beq.n	8006ab8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	441a      	add	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d303      	bcc.n	8006aa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68d9      	ldr	r1, [r3, #12]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6838      	ldr	r0, [r7, #0]
 8006ab4:	f002 f8c6 	bl	8008c44 <memcpy>
	}
}
 8006ab8:	bf00      	nop
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ac8:	f001 fd5c 	bl	8008584 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ad2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ad4:	e011      	b.n	8006afa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d012      	beq.n	8006b04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	3324      	adds	r3, #36	; 0x24
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fd2a 	bl	800753c <xTaskRemoveFromEventList>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006aee:	f000 fe01 	bl	80076f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	dce9      	bgt.n	8006ad6 <prvUnlockQueue+0x16>
 8006b02:	e000      	b.n	8006b06 <prvUnlockQueue+0x46>
					break;
 8006b04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	22ff      	movs	r2, #255	; 0xff
 8006b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b0e:	f001 fd69 	bl	80085e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b12:	f001 fd37 	bl	8008584 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b1e:	e011      	b.n	8006b44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d012      	beq.n	8006b4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3310      	adds	r3, #16
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 fd05 	bl	800753c <xTaskRemoveFromEventList>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b38:	f000 fddc 	bl	80076f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b3c:	7bbb      	ldrb	r3, [r7, #14]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	dce9      	bgt.n	8006b20 <prvUnlockQueue+0x60>
 8006b4c:	e000      	b.n	8006b50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	22ff      	movs	r2, #255	; 0xff
 8006b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006b58:	f001 fd44 	bl	80085e4 <vPortExitCritical>
}
 8006b5c:	bf00      	nop
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b6c:	f001 fd0a 	bl	8008584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d102      	bne.n	8006b7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	e001      	b.n	8006b82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b82:	f001 fd2f 	bl	80085e4 <vPortExitCritical>

	return xReturn;
 8006b86:	68fb      	ldr	r3, [r7, #12]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b98:	f001 fcf4 	bl	8008584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d102      	bne.n	8006bae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e001      	b.n	8006bb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bb2:	f001 fd17 	bl	80085e4 <vPortExitCritical>

	return xReturn;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60fb      	str	r3, [r7, #12]
 8006bce:	e014      	b.n	8006bfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006bd0:	4a0f      	ldr	r2, [pc, #60]	; (8006c10 <vQueueAddToRegistry+0x50>)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10b      	bne.n	8006bf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006bdc:	490c      	ldr	r1, [pc, #48]	; (8006c10 <vQueueAddToRegistry+0x50>)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006be6:	4a0a      	ldr	r2, [pc, #40]	; (8006c10 <vQueueAddToRegistry+0x50>)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	4413      	add	r3, r2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006bf2:	e006      	b.n	8006c02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b07      	cmp	r3, #7
 8006bfe:	d9e7      	bls.n	8006bd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	20001038 	.word	0x20001038

08006c14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006c24:	f001 fcae 	bl	8008584 <vPortEnterCritical>
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c2e:	b25b      	sxtb	r3, r3
 8006c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c34:	d103      	bne.n	8006c3e <vQueueWaitForMessageRestricted+0x2a>
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c44:	b25b      	sxtb	r3, r3
 8006c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4a:	d103      	bne.n	8006c54 <vQueueWaitForMessageRestricted+0x40>
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c54:	f001 fcc6 	bl	80085e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d106      	bne.n	8006c6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	3324      	adds	r3, #36	; 0x24
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 fc3b 	bl	80074e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006c6e:	6978      	ldr	r0, [r7, #20]
 8006c70:	f7ff ff26 	bl	8006ac0 <prvUnlockQueue>
	}
 8006c74:	bf00      	nop
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08e      	sub	sp, #56	; 0x38
 8006c80:	af04      	add	r7, sp, #16
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10a      	bne.n	8006ca6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	623b      	str	r3, [r7, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	61fb      	str	r3, [r7, #28]
}
 8006cbe:	bf00      	nop
 8006cc0:	e7fe      	b.n	8006cc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006cc2:	235c      	movs	r3, #92	; 0x5c
 8006cc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	2b5c      	cmp	r3, #92	; 0x5c
 8006cca:	d00a      	beq.n	8006ce2 <xTaskCreateStatic+0x66>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	61bb      	str	r3, [r7, #24]
}
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ce2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d01e      	beq.n	8006d28 <xTaskCreateStatic+0xac>
 8006cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01b      	beq.n	8006d28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d02:	2300      	movs	r3, #0
 8006d04:	9303      	str	r3, [sp, #12]
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	9302      	str	r3, [sp, #8]
 8006d0a:	f107 0314 	add.w	r3, r7, #20
 8006d0e:	9301      	str	r3, [sp, #4]
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	68b9      	ldr	r1, [r7, #8]
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f850 	bl	8006dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d22:	f000 f8dd 	bl	8006ee0 <prvAddNewTaskToReadyList>
 8006d26:	e001      	b.n	8006d2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d2c:	697b      	ldr	r3, [r7, #20]
	}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3728      	adds	r7, #40	; 0x28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b08c      	sub	sp, #48	; 0x30
 8006d3a:	af04      	add	r7, sp, #16
 8006d3c:	60f8      	str	r0, [r7, #12]
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	603b      	str	r3, [r7, #0]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 fd3c 	bl	80087c8 <pvPortMalloc>
 8006d50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00e      	beq.n	8006d76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d58:	205c      	movs	r0, #92	; 0x5c
 8006d5a:	f001 fd35 	bl	80087c8 <pvPortMalloc>
 8006d5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d6c:	e005      	b.n	8006d7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d6e:	6978      	ldr	r0, [r7, #20]
 8006d70:	f001 fdf6 	bl	8008960 <vPortFree>
 8006d74:	e001      	b.n	8006d7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d017      	beq.n	8006db0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d88:	88fa      	ldrh	r2, [r7, #6]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	9303      	str	r3, [sp, #12]
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	9302      	str	r3, [sp, #8]
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	9301      	str	r3, [sp, #4]
 8006d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68b9      	ldr	r1, [r7, #8]
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 f80e 	bl	8006dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006da4:	69f8      	ldr	r0, [r7, #28]
 8006da6:	f000 f89b 	bl	8006ee0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006daa:	2301      	movs	r3, #1
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	e002      	b.n	8006db6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006db0:	f04f 33ff 	mov.w	r3, #4294967295
 8006db4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006db6:	69bb      	ldr	r3, [r7, #24]
	}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	21a5      	movs	r1, #165	; 0xa5
 8006dda:	f001 feff 	bl	8008bdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006de8:	3b01      	subs	r3, #1
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	f023 0307 	bic.w	r3, r3, #7
 8006df6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	617b      	str	r3, [r7, #20]
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d01f      	beq.n	8006e5e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e1e:	2300      	movs	r3, #0
 8006e20:	61fb      	str	r3, [r7, #28]
 8006e22:	e012      	b.n	8006e4a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	4413      	add	r3, r2
 8006e2a:	7819      	ldrb	r1, [r3, #0]
 8006e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	3334      	adds	r3, #52	; 0x34
 8006e34:	460a      	mov	r2, r1
 8006e36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d006      	beq.n	8006e52 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	3301      	adds	r3, #1
 8006e48:	61fb      	str	r3, [r7, #28]
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	2b0f      	cmp	r3, #15
 8006e4e:	d9e9      	bls.n	8006e24 <prvInitialiseNewTask+0x64>
 8006e50:	e000      	b.n	8006e54 <prvInitialiseNewTask+0x94>
			{
				break;
 8006e52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e5c:	e003      	b.n	8006e66 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	2b37      	cmp	r3, #55	; 0x37
 8006e6a:	d901      	bls.n	8006e70 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e6c:	2337      	movs	r3, #55	; 0x37
 8006e6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7e:	2200      	movs	r2, #0
 8006e80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e84:	3304      	adds	r3, #4
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fe ff64 	bl	8005d54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	3318      	adds	r3, #24
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fe ff5f 	bl	8005d54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eaa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	2200      	movs	r2, #0
 8006eb0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	68f9      	ldr	r1, [r7, #12]
 8006ebe:	69b8      	ldr	r0, [r7, #24]
 8006ec0:	f001 fa36 	bl	8008330 <pxPortInitialiseStack>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ed6:	bf00      	nop
 8006ed8:	3720      	adds	r7, #32
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ee8:	f001 fb4c 	bl	8008584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006eec:	4b2d      	ldr	r3, [pc, #180]	; (8006fa4 <prvAddNewTaskToReadyList+0xc4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	4a2c      	ldr	r2, [pc, #176]	; (8006fa4 <prvAddNewTaskToReadyList+0xc4>)
 8006ef4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ef6:	4b2c      	ldr	r3, [pc, #176]	; (8006fa8 <prvAddNewTaskToReadyList+0xc8>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d109      	bne.n	8006f12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006efe:	4a2a      	ldr	r2, [pc, #168]	; (8006fa8 <prvAddNewTaskToReadyList+0xc8>)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f04:	4b27      	ldr	r3, [pc, #156]	; (8006fa4 <prvAddNewTaskToReadyList+0xc4>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d110      	bne.n	8006f2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f0c:	f000 fc16 	bl	800773c <prvInitialiseTaskLists>
 8006f10:	e00d      	b.n	8006f2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f12:	4b26      	ldr	r3, [pc, #152]	; (8006fac <prvAddNewTaskToReadyList+0xcc>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d109      	bne.n	8006f2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f1a:	4b23      	ldr	r3, [pc, #140]	; (8006fa8 <prvAddNewTaskToReadyList+0xc8>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d802      	bhi.n	8006f2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f28:	4a1f      	ldr	r2, [pc, #124]	; (8006fa8 <prvAddNewTaskToReadyList+0xc8>)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f2e:	4b20      	ldr	r3, [pc, #128]	; (8006fb0 <prvAddNewTaskToReadyList+0xd0>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3301      	adds	r3, #1
 8006f34:	4a1e      	ldr	r2, [pc, #120]	; (8006fb0 <prvAddNewTaskToReadyList+0xd0>)
 8006f36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006f38:	4b1d      	ldr	r3, [pc, #116]	; (8006fb0 <prvAddNewTaskToReadyList+0xd0>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	4b1b      	ldr	r3, [pc, #108]	; (8006fb4 <prvAddNewTaskToReadyList+0xd4>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d903      	bls.n	8006f54 <prvAddNewTaskToReadyList+0x74>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	4a18      	ldr	r2, [pc, #96]	; (8006fb4 <prvAddNewTaskToReadyList+0xd4>)
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f58:	4613      	mov	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4a15      	ldr	r2, [pc, #84]	; (8006fb8 <prvAddNewTaskToReadyList+0xd8>)
 8006f62:	441a      	add	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3304      	adds	r3, #4
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	f7fe feff 	bl	8005d6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f70:	f001 fb38 	bl	80085e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f74:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <prvAddNewTaskToReadyList+0xcc>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00e      	beq.n	8006f9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <prvAddNewTaskToReadyList+0xc8>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d207      	bcs.n	8006f9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f8a:	4b0c      	ldr	r3, [pc, #48]	; (8006fbc <prvAddNewTaskToReadyList+0xdc>)
 8006f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f9a:	bf00      	nop
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	2000154c 	.word	0x2000154c
 8006fa8:	20001078 	.word	0x20001078
 8006fac:	20001558 	.word	0x20001558
 8006fb0:	20001568 	.word	0x20001568
 8006fb4:	20001554 	.word	0x20001554
 8006fb8:	2000107c 	.word	0x2000107c
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d017      	beq.n	8007002 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006fd2:	4b13      	ldr	r3, [pc, #76]	; (8007020 <vTaskDelay+0x60>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <vTaskDelay+0x30>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	60bb      	str	r3, [r7, #8]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ff0:	f000 f880 	bl	80070f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fdf8 	bl	8007bec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ffc:	f000 f888 	bl	8007110 <xTaskResumeAll>
 8007000:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d107      	bne.n	8007018 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007008:	4b06      	ldr	r3, [pc, #24]	; (8007024 <vTaskDelay+0x64>)
 800700a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007018:	bf00      	nop
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	20001574 	.word	0x20001574
 8007024:	e000ed04 	.word	0xe000ed04

08007028 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	; 0x28
 800702c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800702e:	2300      	movs	r3, #0
 8007030:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007032:	2300      	movs	r3, #0
 8007034:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007036:	463a      	mov	r2, r7
 8007038:	1d39      	adds	r1, r7, #4
 800703a:	f107 0308 	add.w	r3, r7, #8
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe fe34 	bl	8005cac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	9202      	str	r2, [sp, #8]
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	2300      	movs	r3, #0
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	2300      	movs	r3, #0
 8007054:	460a      	mov	r2, r1
 8007056:	4921      	ldr	r1, [pc, #132]	; (80070dc <vTaskStartScheduler+0xb4>)
 8007058:	4821      	ldr	r0, [pc, #132]	; (80070e0 <vTaskStartScheduler+0xb8>)
 800705a:	f7ff fe0f 	bl	8006c7c <xTaskCreateStatic>
 800705e:	4603      	mov	r3, r0
 8007060:	4a20      	ldr	r2, [pc, #128]	; (80070e4 <vTaskStartScheduler+0xbc>)
 8007062:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007064:	4b1f      	ldr	r3, [pc, #124]	; (80070e4 <vTaskStartScheduler+0xbc>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800706c:	2301      	movs	r3, #1
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	e001      	b.n	8007076 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007072:	2300      	movs	r3, #0
 8007074:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d102      	bne.n	8007082 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800707c:	f000 fe0a 	bl	8007c94 <xTimerCreateTimerTask>
 8007080:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d116      	bne.n	80070b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	613b      	str	r3, [r7, #16]
}
 800709a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800709c:	4b12      	ldr	r3, [pc, #72]	; (80070e8 <vTaskStartScheduler+0xc0>)
 800709e:	f04f 32ff 	mov.w	r2, #4294967295
 80070a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070a4:	4b11      	ldr	r3, [pc, #68]	; (80070ec <vTaskStartScheduler+0xc4>)
 80070a6:	2201      	movs	r2, #1
 80070a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070aa:	4b11      	ldr	r3, [pc, #68]	; (80070f0 <vTaskStartScheduler+0xc8>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070b0:	f001 f9c6 	bl	8008440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070b4:	e00e      	b.n	80070d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070bc:	d10a      	bne.n	80070d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	60fb      	str	r3, [r7, #12]
}
 80070d0:	bf00      	nop
 80070d2:	e7fe      	b.n	80070d2 <vTaskStartScheduler+0xaa>
}
 80070d4:	bf00      	nop
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	0800959c 	.word	0x0800959c
 80070e0:	0800770d 	.word	0x0800770d
 80070e4:	20001570 	.word	0x20001570
 80070e8:	2000156c 	.word	0x2000156c
 80070ec:	20001558 	.word	0x20001558
 80070f0:	20001550 	.word	0x20001550

080070f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80070f8:	4b04      	ldr	r3, [pc, #16]	; (800710c <vTaskSuspendAll+0x18>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3301      	adds	r3, #1
 80070fe:	4a03      	ldr	r2, [pc, #12]	; (800710c <vTaskSuspendAll+0x18>)
 8007100:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007102:	bf00      	nop
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	20001574 	.word	0x20001574

08007110 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800711a:	2300      	movs	r3, #0
 800711c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800711e:	4b42      	ldr	r3, [pc, #264]	; (8007228 <xTaskResumeAll+0x118>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10a      	bne.n	800713c <xTaskResumeAll+0x2c>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	603b      	str	r3, [r7, #0]
}
 8007138:	bf00      	nop
 800713a:	e7fe      	b.n	800713a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800713c:	f001 fa22 	bl	8008584 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007140:	4b39      	ldr	r3, [pc, #228]	; (8007228 <xTaskResumeAll+0x118>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3b01      	subs	r3, #1
 8007146:	4a38      	ldr	r2, [pc, #224]	; (8007228 <xTaskResumeAll+0x118>)
 8007148:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800714a:	4b37      	ldr	r3, [pc, #220]	; (8007228 <xTaskResumeAll+0x118>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d162      	bne.n	8007218 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007152:	4b36      	ldr	r3, [pc, #216]	; (800722c <xTaskResumeAll+0x11c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d05e      	beq.n	8007218 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800715a:	e02f      	b.n	80071bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800715c:	4b34      	ldr	r3, [pc, #208]	; (8007230 <xTaskResumeAll+0x120>)
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	3318      	adds	r3, #24
 8007168:	4618      	mov	r0, r3
 800716a:	f7fe fe5d 	bl	8005e28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3304      	adds	r3, #4
 8007172:	4618      	mov	r0, r3
 8007174:	f7fe fe58 	bl	8005e28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717c:	4b2d      	ldr	r3, [pc, #180]	; (8007234 <xTaskResumeAll+0x124>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	429a      	cmp	r2, r3
 8007182:	d903      	bls.n	800718c <xTaskResumeAll+0x7c>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	4a2a      	ldr	r2, [pc, #168]	; (8007234 <xTaskResumeAll+0x124>)
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007190:	4613      	mov	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4a27      	ldr	r2, [pc, #156]	; (8007238 <xTaskResumeAll+0x128>)
 800719a:	441a      	add	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3304      	adds	r3, #4
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f7fe fde3 	bl	8005d6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ac:	4b23      	ldr	r3, [pc, #140]	; (800723c <xTaskResumeAll+0x12c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d302      	bcc.n	80071bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80071b6:	4b22      	ldr	r3, [pc, #136]	; (8007240 <xTaskResumeAll+0x130>)
 80071b8:	2201      	movs	r2, #1
 80071ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071bc:	4b1c      	ldr	r3, [pc, #112]	; (8007230 <xTaskResumeAll+0x120>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1cb      	bne.n	800715c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80071ca:	f000 fb55 	bl	8007878 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80071ce:	4b1d      	ldr	r3, [pc, #116]	; (8007244 <xTaskResumeAll+0x134>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d010      	beq.n	80071fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80071da:	f000 f847 	bl	800726c <xTaskIncrementTick>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80071e4:	4b16      	ldr	r3, [pc, #88]	; (8007240 <xTaskResumeAll+0x130>)
 80071e6:	2201      	movs	r2, #1
 80071e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	3b01      	subs	r3, #1
 80071ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1f1      	bne.n	80071da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80071f6:	4b13      	ldr	r3, [pc, #76]	; (8007244 <xTaskResumeAll+0x134>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80071fc:	4b10      	ldr	r3, [pc, #64]	; (8007240 <xTaskResumeAll+0x130>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d009      	beq.n	8007218 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007204:	2301      	movs	r3, #1
 8007206:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007208:	4b0f      	ldr	r3, [pc, #60]	; (8007248 <xTaskResumeAll+0x138>)
 800720a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007218:	f001 f9e4 	bl	80085e4 <vPortExitCritical>

	return xAlreadyYielded;
 800721c:	68bb      	ldr	r3, [r7, #8]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20001574 	.word	0x20001574
 800722c:	2000154c 	.word	0x2000154c
 8007230:	2000150c 	.word	0x2000150c
 8007234:	20001554 	.word	0x20001554
 8007238:	2000107c 	.word	0x2000107c
 800723c:	20001078 	.word	0x20001078
 8007240:	20001560 	.word	0x20001560
 8007244:	2000155c 	.word	0x2000155c
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007252:	4b05      	ldr	r3, [pc, #20]	; (8007268 <xTaskGetTickCount+0x1c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007258:	687b      	ldr	r3, [r7, #4]
}
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20001550 	.word	0x20001550

0800726c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007272:	2300      	movs	r3, #0
 8007274:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007276:	4b4f      	ldr	r3, [pc, #316]	; (80073b4 <xTaskIncrementTick+0x148>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	f040 808f 	bne.w	800739e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007280:	4b4d      	ldr	r3, [pc, #308]	; (80073b8 <xTaskIncrementTick+0x14c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3301      	adds	r3, #1
 8007286:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007288:	4a4b      	ldr	r2, [pc, #300]	; (80073b8 <xTaskIncrementTick+0x14c>)
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d120      	bne.n	80072d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007294:	4b49      	ldr	r3, [pc, #292]	; (80073bc <xTaskIncrementTick+0x150>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	603b      	str	r3, [r7, #0]
}
 80072b0:	bf00      	nop
 80072b2:	e7fe      	b.n	80072b2 <xTaskIncrementTick+0x46>
 80072b4:	4b41      	ldr	r3, [pc, #260]	; (80073bc <xTaskIncrementTick+0x150>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	4b41      	ldr	r3, [pc, #260]	; (80073c0 <xTaskIncrementTick+0x154>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a3f      	ldr	r2, [pc, #252]	; (80073bc <xTaskIncrementTick+0x150>)
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	4a3f      	ldr	r2, [pc, #252]	; (80073c0 <xTaskIncrementTick+0x154>)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	4b3e      	ldr	r3, [pc, #248]	; (80073c4 <xTaskIncrementTick+0x158>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3301      	adds	r3, #1
 80072ce:	4a3d      	ldr	r2, [pc, #244]	; (80073c4 <xTaskIncrementTick+0x158>)
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	f000 fad1 	bl	8007878 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072d6:	4b3c      	ldr	r3, [pc, #240]	; (80073c8 <xTaskIncrementTick+0x15c>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d349      	bcc.n	8007374 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072e0:	4b36      	ldr	r3, [pc, #216]	; (80073bc <xTaskIncrementTick+0x150>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d104      	bne.n	80072f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ea:	4b37      	ldr	r3, [pc, #220]	; (80073c8 <xTaskIncrementTick+0x15c>)
 80072ec:	f04f 32ff 	mov.w	r2, #4294967295
 80072f0:	601a      	str	r2, [r3, #0]
					break;
 80072f2:	e03f      	b.n	8007374 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f4:	4b31      	ldr	r3, [pc, #196]	; (80073bc <xTaskIncrementTick+0x150>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	429a      	cmp	r2, r3
 800730a:	d203      	bcs.n	8007314 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800730c:	4a2e      	ldr	r2, [pc, #184]	; (80073c8 <xTaskIncrementTick+0x15c>)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007312:	e02f      	b.n	8007374 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	3304      	adds	r3, #4
 8007318:	4618      	mov	r0, r3
 800731a:	f7fe fd85 	bl	8005e28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007322:	2b00      	cmp	r3, #0
 8007324:	d004      	beq.n	8007330 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	3318      	adds	r3, #24
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe fd7c 	bl	8005e28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007334:	4b25      	ldr	r3, [pc, #148]	; (80073cc <xTaskIncrementTick+0x160>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	429a      	cmp	r2, r3
 800733a:	d903      	bls.n	8007344 <xTaskIncrementTick+0xd8>
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	4a22      	ldr	r2, [pc, #136]	; (80073cc <xTaskIncrementTick+0x160>)
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4a1f      	ldr	r2, [pc, #124]	; (80073d0 <xTaskIncrementTick+0x164>)
 8007352:	441a      	add	r2, r3
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	3304      	adds	r3, #4
 8007358:	4619      	mov	r1, r3
 800735a:	4610      	mov	r0, r2
 800735c:	f7fe fd07 	bl	8005d6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007364:	4b1b      	ldr	r3, [pc, #108]	; (80073d4 <xTaskIncrementTick+0x168>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736a:	429a      	cmp	r2, r3
 800736c:	d3b8      	bcc.n	80072e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800736e:	2301      	movs	r3, #1
 8007370:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007372:	e7b5      	b.n	80072e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007374:	4b17      	ldr	r3, [pc, #92]	; (80073d4 <xTaskIncrementTick+0x168>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737a:	4915      	ldr	r1, [pc, #84]	; (80073d0 <xTaskIncrementTick+0x164>)
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	440b      	add	r3, r1
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d901      	bls.n	8007390 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800738c:	2301      	movs	r3, #1
 800738e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007390:	4b11      	ldr	r3, [pc, #68]	; (80073d8 <xTaskIncrementTick+0x16c>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d007      	beq.n	80073a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007398:	2301      	movs	r3, #1
 800739a:	617b      	str	r3, [r7, #20]
 800739c:	e004      	b.n	80073a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800739e:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <xTaskIncrementTick+0x170>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3301      	adds	r3, #1
 80073a4:	4a0d      	ldr	r2, [pc, #52]	; (80073dc <xTaskIncrementTick+0x170>)
 80073a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80073a8:	697b      	ldr	r3, [r7, #20]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20001574 	.word	0x20001574
 80073b8:	20001550 	.word	0x20001550
 80073bc:	20001504 	.word	0x20001504
 80073c0:	20001508 	.word	0x20001508
 80073c4:	20001564 	.word	0x20001564
 80073c8:	2000156c 	.word	0x2000156c
 80073cc:	20001554 	.word	0x20001554
 80073d0:	2000107c 	.word	0x2000107c
 80073d4:	20001078 	.word	0x20001078
 80073d8:	20001560 	.word	0x20001560
 80073dc:	2000155c 	.word	0x2000155c

080073e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073e6:	4b28      	ldr	r3, [pc, #160]	; (8007488 <vTaskSwitchContext+0xa8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073ee:	4b27      	ldr	r3, [pc, #156]	; (800748c <vTaskSwitchContext+0xac>)
 80073f0:	2201      	movs	r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073f4:	e041      	b.n	800747a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80073f6:	4b25      	ldr	r3, [pc, #148]	; (800748c <vTaskSwitchContext+0xac>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073fc:	4b24      	ldr	r3, [pc, #144]	; (8007490 <vTaskSwitchContext+0xb0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	e010      	b.n	8007426 <vTaskSwitchContext+0x46>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <vTaskSwitchContext+0x40>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	607b      	str	r3, [r7, #4]
}
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <vTaskSwitchContext+0x3e>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3b01      	subs	r3, #1
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	491b      	ldr	r1, [pc, #108]	; (8007494 <vTaskSwitchContext+0xb4>)
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4613      	mov	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	440b      	add	r3, r1
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0e4      	beq.n	8007404 <vTaskSwitchContext+0x24>
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	4613      	mov	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4a13      	ldr	r2, [pc, #76]	; (8007494 <vTaskSwitchContext+0xb4>)
 8007446:	4413      	add	r3, r2
 8007448:	60bb      	str	r3, [r7, #8]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	605a      	str	r2, [r3, #4]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	3308      	adds	r3, #8
 800745c:	429a      	cmp	r2, r3
 800745e:	d104      	bne.n	800746a <vTaskSwitchContext+0x8a>
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	605a      	str	r2, [r3, #4]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	4a09      	ldr	r2, [pc, #36]	; (8007498 <vTaskSwitchContext+0xb8>)
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	4a06      	ldr	r2, [pc, #24]	; (8007490 <vTaskSwitchContext+0xb0>)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6013      	str	r3, [r2, #0]
}
 800747a:	bf00      	nop
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	20001574 	.word	0x20001574
 800748c:	20001560 	.word	0x20001560
 8007490:	20001554 	.word	0x20001554
 8007494:	2000107c 	.word	0x2000107c
 8007498:	20001078 	.word	0x20001078

0800749c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10a      	bne.n	80074c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	60fb      	str	r3, [r7, #12]
}
 80074be:	bf00      	nop
 80074c0:	e7fe      	b.n	80074c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074c2:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <vTaskPlaceOnEventList+0x44>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3318      	adds	r3, #24
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7fe fc73 	bl	8005db6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074d0:	2101      	movs	r1, #1
 80074d2:	6838      	ldr	r0, [r7, #0]
 80074d4:	f000 fb8a 	bl	8007bec <prvAddCurrentTaskToDelayedList>
}
 80074d8:	bf00      	nop
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20001078 	.word	0x20001078

080074e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10a      	bne.n	800750c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	617b      	str	r3, [r7, #20]
}
 8007508:	bf00      	nop
 800750a:	e7fe      	b.n	800750a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <vTaskPlaceOnEventListRestricted+0x54>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3318      	adds	r3, #24
 8007512:	4619      	mov	r1, r3
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f7fe fc2a 	bl	8005d6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007520:	f04f 33ff 	mov.w	r3, #4294967295
 8007524:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	68b8      	ldr	r0, [r7, #8]
 800752a:	f000 fb5f 	bl	8007bec <prvAddCurrentTaskToDelayedList>
	}
 800752e:	bf00      	nop
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20001078 	.word	0x20001078

0800753c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	60fb      	str	r3, [r7, #12]
}
 8007564:	bf00      	nop
 8007566:	e7fe      	b.n	8007566 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	3318      	adds	r3, #24
 800756c:	4618      	mov	r0, r3
 800756e:	f7fe fc5b 	bl	8005e28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007572:	4b1e      	ldr	r3, [pc, #120]	; (80075ec <xTaskRemoveFromEventList+0xb0>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d11d      	bne.n	80075b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	3304      	adds	r3, #4
 800757e:	4618      	mov	r0, r3
 8007580:	f7fe fc52 	bl	8005e28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007588:	4b19      	ldr	r3, [pc, #100]	; (80075f0 <xTaskRemoveFromEventList+0xb4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	429a      	cmp	r2, r3
 800758e:	d903      	bls.n	8007598 <xTaskRemoveFromEventList+0x5c>
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	4a16      	ldr	r2, [pc, #88]	; (80075f0 <xTaskRemoveFromEventList+0xb4>)
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759c:	4613      	mov	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4a13      	ldr	r2, [pc, #76]	; (80075f4 <xTaskRemoveFromEventList+0xb8>)
 80075a6:	441a      	add	r2, r3
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	3304      	adds	r3, #4
 80075ac:	4619      	mov	r1, r3
 80075ae:	4610      	mov	r0, r2
 80075b0:	f7fe fbdd 	bl	8005d6e <vListInsertEnd>
 80075b4:	e005      	b.n	80075c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	3318      	adds	r3, #24
 80075ba:	4619      	mov	r1, r3
 80075bc:	480e      	ldr	r0, [pc, #56]	; (80075f8 <xTaskRemoveFromEventList+0xbc>)
 80075be:	f7fe fbd6 	bl	8005d6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c6:	4b0d      	ldr	r3, [pc, #52]	; (80075fc <xTaskRemoveFromEventList+0xc0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d905      	bls.n	80075dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075d0:	2301      	movs	r3, #1
 80075d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075d4:	4b0a      	ldr	r3, [pc, #40]	; (8007600 <xTaskRemoveFromEventList+0xc4>)
 80075d6:	2201      	movs	r2, #1
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	e001      	b.n	80075e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80075e0:	697b      	ldr	r3, [r7, #20]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20001574 	.word	0x20001574
 80075f0:	20001554 	.word	0x20001554
 80075f4:	2000107c 	.word	0x2000107c
 80075f8:	2000150c 	.word	0x2000150c
 80075fc:	20001078 	.word	0x20001078
 8007600:	20001560 	.word	0x20001560

08007604 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800760c:	4b06      	ldr	r3, [pc, #24]	; (8007628 <vTaskInternalSetTimeOutState+0x24>)
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <vTaskInternalSetTimeOutState+0x28>)
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	605a      	str	r2, [r3, #4]
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	20001564 	.word	0x20001564
 800762c:	20001550 	.word	0x20001550

08007630 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10a      	bne.n	8007656 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	613b      	str	r3, [r7, #16]
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	60fb      	str	r3, [r7, #12]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007672:	f000 ff87 	bl	8008584 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007676:	4b1d      	ldr	r3, [pc, #116]	; (80076ec <xTaskCheckForTimeOut+0xbc>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768e:	d102      	bne.n	8007696 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007690:	2300      	movs	r3, #0
 8007692:	61fb      	str	r3, [r7, #28]
 8007694:	e023      	b.n	80076de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	4b15      	ldr	r3, [pc, #84]	; (80076f0 <xTaskCheckForTimeOut+0xc0>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d007      	beq.n	80076b2 <xTaskCheckForTimeOut+0x82>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d302      	bcc.n	80076b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076ac:	2301      	movs	r3, #1
 80076ae:	61fb      	str	r3, [r7, #28]
 80076b0:	e015      	b.n	80076de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d20b      	bcs.n	80076d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	1ad2      	subs	r2, r2, r3
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff ff9b 	bl	8007604 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076ce:	2300      	movs	r3, #0
 80076d0:	61fb      	str	r3, [r7, #28]
 80076d2:	e004      	b.n	80076de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076da:	2301      	movs	r3, #1
 80076dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076de:	f000 ff81 	bl	80085e4 <vPortExitCritical>

	return xReturn;
 80076e2:	69fb      	ldr	r3, [r7, #28]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3720      	adds	r7, #32
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20001550 	.word	0x20001550
 80076f0:	20001564 	.word	0x20001564

080076f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076f4:	b480      	push	{r7}
 80076f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076f8:	4b03      	ldr	r3, [pc, #12]	; (8007708 <vTaskMissedYield+0x14>)
 80076fa:	2201      	movs	r2, #1
 80076fc:	601a      	str	r2, [r3, #0]
}
 80076fe:	bf00      	nop
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	20001560 	.word	0x20001560

0800770c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007714:	f000 f852 	bl	80077bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007718:	4b06      	ldr	r3, [pc, #24]	; (8007734 <prvIdleTask+0x28>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d9f9      	bls.n	8007714 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007720:	4b05      	ldr	r3, [pc, #20]	; (8007738 <prvIdleTask+0x2c>)
 8007722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007730:	e7f0      	b.n	8007714 <prvIdleTask+0x8>
 8007732:	bf00      	nop
 8007734:	2000107c 	.word	0x2000107c
 8007738:	e000ed04 	.word	0xe000ed04

0800773c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007742:	2300      	movs	r3, #0
 8007744:	607b      	str	r3, [r7, #4]
 8007746:	e00c      	b.n	8007762 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4a12      	ldr	r2, [pc, #72]	; (800779c <prvInitialiseTaskLists+0x60>)
 8007754:	4413      	add	r3, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f7fe fadc 	bl	8005d14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3301      	adds	r3, #1
 8007760:	607b      	str	r3, [r7, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b37      	cmp	r3, #55	; 0x37
 8007766:	d9ef      	bls.n	8007748 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007768:	480d      	ldr	r0, [pc, #52]	; (80077a0 <prvInitialiseTaskLists+0x64>)
 800776a:	f7fe fad3 	bl	8005d14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800776e:	480d      	ldr	r0, [pc, #52]	; (80077a4 <prvInitialiseTaskLists+0x68>)
 8007770:	f7fe fad0 	bl	8005d14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007774:	480c      	ldr	r0, [pc, #48]	; (80077a8 <prvInitialiseTaskLists+0x6c>)
 8007776:	f7fe facd 	bl	8005d14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800777a:	480c      	ldr	r0, [pc, #48]	; (80077ac <prvInitialiseTaskLists+0x70>)
 800777c:	f7fe faca 	bl	8005d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007780:	480b      	ldr	r0, [pc, #44]	; (80077b0 <prvInitialiseTaskLists+0x74>)
 8007782:	f7fe fac7 	bl	8005d14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007786:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <prvInitialiseTaskLists+0x78>)
 8007788:	4a05      	ldr	r2, [pc, #20]	; (80077a0 <prvInitialiseTaskLists+0x64>)
 800778a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800778c:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <prvInitialiseTaskLists+0x7c>)
 800778e:	4a05      	ldr	r2, [pc, #20]	; (80077a4 <prvInitialiseTaskLists+0x68>)
 8007790:	601a      	str	r2, [r3, #0]
}
 8007792:	bf00      	nop
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	2000107c 	.word	0x2000107c
 80077a0:	200014dc 	.word	0x200014dc
 80077a4:	200014f0 	.word	0x200014f0
 80077a8:	2000150c 	.word	0x2000150c
 80077ac:	20001520 	.word	0x20001520
 80077b0:	20001538 	.word	0x20001538
 80077b4:	20001504 	.word	0x20001504
 80077b8:	20001508 	.word	0x20001508

080077bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077c2:	e019      	b.n	80077f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077c4:	f000 fede 	bl	8008584 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077c8:	4b10      	ldr	r3, [pc, #64]	; (800780c <prvCheckTasksWaitingTermination+0x50>)
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fe fb27 	bl	8005e28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077da:	4b0d      	ldr	r3, [pc, #52]	; (8007810 <prvCheckTasksWaitingTermination+0x54>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3b01      	subs	r3, #1
 80077e0:	4a0b      	ldr	r2, [pc, #44]	; (8007810 <prvCheckTasksWaitingTermination+0x54>)
 80077e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077e4:	4b0b      	ldr	r3, [pc, #44]	; (8007814 <prvCheckTasksWaitingTermination+0x58>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	4a0a      	ldr	r2, [pc, #40]	; (8007814 <prvCheckTasksWaitingTermination+0x58>)
 80077ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077ee:	f000 fef9 	bl	80085e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f810 	bl	8007818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077f8:	4b06      	ldr	r3, [pc, #24]	; (8007814 <prvCheckTasksWaitingTermination+0x58>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e1      	bne.n	80077c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007800:	bf00      	nop
 8007802:	bf00      	nop
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20001520 	.word	0x20001520
 8007810:	2000154c 	.word	0x2000154c
 8007814:	20001534 	.word	0x20001534

08007818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007826:	2b00      	cmp	r3, #0
 8007828:	d108      	bne.n	800783c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782e:	4618      	mov	r0, r3
 8007830:	f001 f896 	bl	8008960 <vPortFree>
				vPortFree( pxTCB );
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f001 f893 	bl	8008960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800783a:	e018      	b.n	800786e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007842:	2b01      	cmp	r3, #1
 8007844:	d103      	bne.n	800784e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f001 f88a 	bl	8008960 <vPortFree>
	}
 800784c:	e00f      	b.n	800786e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007854:	2b02      	cmp	r3, #2
 8007856:	d00a      	beq.n	800786e <prvDeleteTCB+0x56>
	__asm volatile
 8007858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	60fb      	str	r3, [r7, #12]
}
 800786a:	bf00      	nop
 800786c:	e7fe      	b.n	800786c <prvDeleteTCB+0x54>
	}
 800786e:	bf00      	nop
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800787e:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <prvResetNextTaskUnblockTime+0x38>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d104      	bne.n	8007892 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007888:	4b0a      	ldr	r3, [pc, #40]	; (80078b4 <prvResetNextTaskUnblockTime+0x3c>)
 800788a:	f04f 32ff 	mov.w	r2, #4294967295
 800788e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007890:	e008      	b.n	80078a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007892:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <prvResetNextTaskUnblockTime+0x38>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	4a04      	ldr	r2, [pc, #16]	; (80078b4 <prvResetNextTaskUnblockTime+0x3c>)
 80078a2:	6013      	str	r3, [r2, #0]
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	20001504 	.word	0x20001504
 80078b4:	2000156c 	.word	0x2000156c

080078b8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80078be:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <xTaskGetCurrentTaskHandle+0x1c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80078c4:	687b      	ldr	r3, [r7, #4]
	}
 80078c6:	4618      	mov	r0, r3
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	20001078 	.word	0x20001078

080078d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078de:	4b0b      	ldr	r3, [pc, #44]	; (800790c <xTaskGetSchedulerState+0x34>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d102      	bne.n	80078ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078e6:	2301      	movs	r3, #1
 80078e8:	607b      	str	r3, [r7, #4]
 80078ea:	e008      	b.n	80078fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ec:	4b08      	ldr	r3, [pc, #32]	; (8007910 <xTaskGetSchedulerState+0x38>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d102      	bne.n	80078fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80078f4:	2302      	movs	r3, #2
 80078f6:	607b      	str	r3, [r7, #4]
 80078f8:	e001      	b.n	80078fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80078fa:	2300      	movs	r3, #0
 80078fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80078fe:	687b      	ldr	r3, [r7, #4]
	}
 8007900:	4618      	mov	r0, r3
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	20001558 	.word	0x20001558
 8007910:	20001574 	.word	0x20001574

08007914 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007920:	2300      	movs	r3, #0
 8007922:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d051      	beq.n	80079ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792e:	4b2a      	ldr	r3, [pc, #168]	; (80079d8 <xTaskPriorityInherit+0xc4>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	429a      	cmp	r2, r3
 8007936:	d241      	bcs.n	80079bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	2b00      	cmp	r3, #0
 800793e:	db06      	blt.n	800794e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007940:	4b25      	ldr	r3, [pc, #148]	; (80079d8 <xTaskPriorityInherit+0xc4>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007946:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	6959      	ldr	r1, [r3, #20]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4a1f      	ldr	r2, [pc, #124]	; (80079dc <xTaskPriorityInherit+0xc8>)
 8007960:	4413      	add	r3, r2
 8007962:	4299      	cmp	r1, r3
 8007964:	d122      	bne.n	80079ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	3304      	adds	r3, #4
 800796a:	4618      	mov	r0, r3
 800796c:	f7fe fa5c 	bl	8005e28 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007970:	4b19      	ldr	r3, [pc, #100]	; (80079d8 <xTaskPriorityInherit+0xc4>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797e:	4b18      	ldr	r3, [pc, #96]	; (80079e0 <xTaskPriorityInherit+0xcc>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	429a      	cmp	r2, r3
 8007984:	d903      	bls.n	800798e <xTaskPriorityInherit+0x7a>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	4a15      	ldr	r2, [pc, #84]	; (80079e0 <xTaskPriorityInherit+0xcc>)
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4a10      	ldr	r2, [pc, #64]	; (80079dc <xTaskPriorityInherit+0xc8>)
 800799c:	441a      	add	r2, r3
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	3304      	adds	r3, #4
 80079a2:	4619      	mov	r1, r3
 80079a4:	4610      	mov	r0, r2
 80079a6:	f7fe f9e2 	bl	8005d6e <vListInsertEnd>
 80079aa:	e004      	b.n	80079b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079ac:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <xTaskPriorityInherit+0xc4>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80079b6:	2301      	movs	r3, #1
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	e008      	b.n	80079ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079c0:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <xTaskPriorityInherit+0xc4>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d201      	bcs.n	80079ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80079ca:	2301      	movs	r3, #1
 80079cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079ce:	68fb      	ldr	r3, [r7, #12]
	}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	20001078 	.word	0x20001078
 80079dc:	2000107c 	.word	0x2000107c
 80079e0:	20001554 	.word	0x20001554

080079e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079f0:	2300      	movs	r3, #0
 80079f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d056      	beq.n	8007aa8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079fa:	4b2e      	ldr	r3, [pc, #184]	; (8007ab4 <xTaskPriorityDisinherit+0xd0>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d00a      	beq.n	8007a1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	60fb      	str	r3, [r7, #12]
}
 8007a16:	bf00      	nop
 8007a18:	e7fe      	b.n	8007a18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10a      	bne.n	8007a38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	60bb      	str	r3, [r7, #8]
}
 8007a34:	bf00      	nop
 8007a36:	e7fe      	b.n	8007a36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a3c:	1e5a      	subs	r2, r3, #1
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d02c      	beq.n	8007aa8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d128      	bne.n	8007aa8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe f9e4 	bl	8005e28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a78:	4b0f      	ldr	r3, [pc, #60]	; (8007ab8 <xTaskPriorityDisinherit+0xd4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d903      	bls.n	8007a88 <xTaskPriorityDisinherit+0xa4>
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a84:	4a0c      	ldr	r2, [pc, #48]	; (8007ab8 <xTaskPriorityDisinherit+0xd4>)
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4a09      	ldr	r2, [pc, #36]	; (8007abc <xTaskPriorityDisinherit+0xd8>)
 8007a96:	441a      	add	r2, r3
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	4610      	mov	r0, r2
 8007aa0:	f7fe f965 	bl	8005d6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007aa8:	697b      	ldr	r3, [r7, #20]
	}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20001078 	.word	0x20001078
 8007ab8:	20001554 	.word	0x20001554
 8007abc:	2000107c 	.word	0x2000107c

08007ac0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d06a      	beq.n	8007bae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10a      	bne.n	8007af6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	60fb      	str	r3, [r7, #12]
}
 8007af2:	bf00      	nop
 8007af4:	e7fe      	b.n	8007af4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d902      	bls.n	8007b06 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	61fb      	str	r3, [r7, #28]
 8007b04:	e002      	b.n	8007b0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b0a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	69fa      	ldr	r2, [r7, #28]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d04b      	beq.n	8007bae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d146      	bne.n	8007bae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b20:	4b25      	ldr	r3, [pc, #148]	; (8007bb8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d10a      	bne.n	8007b40 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	60bb      	str	r3, [r7, #8]
}
 8007b3c:	bf00      	nop
 8007b3e:	e7fe      	b.n	8007b3e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	69fa      	ldr	r2, [r7, #28]
 8007b4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	db04      	blt.n	8007b5e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	6959      	ldr	r1, [r3, #20]
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	4613      	mov	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4a13      	ldr	r2, [pc, #76]	; (8007bbc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007b6e:	4413      	add	r3, r2
 8007b70:	4299      	cmp	r1, r3
 8007b72:	d11c      	bne.n	8007bae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	3304      	adds	r3, #4
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fe f955 	bl	8005e28 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b82:	4b0f      	ldr	r3, [pc, #60]	; (8007bc0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d903      	bls.n	8007b92 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8e:	4a0c      	ldr	r2, [pc, #48]	; (8007bc0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4a07      	ldr	r2, [pc, #28]	; (8007bbc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007ba0:	441a      	add	r2, r3
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4610      	mov	r0, r2
 8007baa:	f7fe f8e0 	bl	8005d6e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bae:	bf00      	nop
 8007bb0:	3720      	adds	r7, #32
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20001078 	.word	0x20001078
 8007bbc:	2000107c 	.word	0x2000107c
 8007bc0:	20001554 	.word	0x20001554

08007bc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007bc4:	b480      	push	{r7}
 8007bc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007bc8:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d004      	beq.n	8007bda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007bd0:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bd6:	3201      	adds	r2, #1
 8007bd8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007bda:	4b03      	ldr	r3, [pc, #12]	; (8007be8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
	}
 8007bde:	4618      	mov	r0, r3
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	20001078 	.word	0x20001078

08007bec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007bf6:	4b21      	ldr	r3, [pc, #132]	; (8007c7c <prvAddCurrentTaskToDelayedList+0x90>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bfc:	4b20      	ldr	r3, [pc, #128]	; (8007c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3304      	adds	r3, #4
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe f910 	bl	8005e28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0e:	d10a      	bne.n	8007c26 <prvAddCurrentTaskToDelayedList+0x3a>
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d007      	beq.n	8007c26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c16:	4b1a      	ldr	r3, [pc, #104]	; (8007c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4819      	ldr	r0, [pc, #100]	; (8007c84 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c20:	f7fe f8a5 	bl	8005d6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c24:	e026      	b.n	8007c74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c2e:	4b14      	ldr	r3, [pc, #80]	; (8007c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d209      	bcs.n	8007c52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c3e:	4b12      	ldr	r3, [pc, #72]	; (8007c88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	4b0f      	ldr	r3, [pc, #60]	; (8007c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3304      	adds	r3, #4
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	f7fe f8b3 	bl	8005db6 <vListInsert>
}
 8007c50:	e010      	b.n	8007c74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c52:	4b0e      	ldr	r3, [pc, #56]	; (8007c8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	4b0a      	ldr	r3, [pc, #40]	; (8007c80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	f7fe f8a9 	bl	8005db6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c64:	4b0a      	ldr	r3, [pc, #40]	; (8007c90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d202      	bcs.n	8007c74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007c6e:	4a08      	ldr	r2, [pc, #32]	; (8007c90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	6013      	str	r3, [r2, #0]
}
 8007c74:	bf00      	nop
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20001550 	.word	0x20001550
 8007c80:	20001078 	.word	0x20001078
 8007c84:	20001538 	.word	0x20001538
 8007c88:	20001508 	.word	0x20001508
 8007c8c:	20001504 	.word	0x20001504
 8007c90:	2000156c 	.word	0x2000156c

08007c94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08a      	sub	sp, #40	; 0x28
 8007c98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c9e:	f000 fb07 	bl	80082b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007ca2:	4b1c      	ldr	r3, [pc, #112]	; (8007d14 <xTimerCreateTimerTask+0x80>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d021      	beq.n	8007cee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007cb2:	1d3a      	adds	r2, r7, #4
 8007cb4:	f107 0108 	add.w	r1, r7, #8
 8007cb8:	f107 030c 	add.w	r3, r7, #12
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fe f80f 	bl	8005ce0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	9202      	str	r2, [sp, #8]
 8007cca:	9301      	str	r3, [sp, #4]
 8007ccc:	2302      	movs	r3, #2
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	460a      	mov	r2, r1
 8007cd4:	4910      	ldr	r1, [pc, #64]	; (8007d18 <xTimerCreateTimerTask+0x84>)
 8007cd6:	4811      	ldr	r0, [pc, #68]	; (8007d1c <xTimerCreateTimerTask+0x88>)
 8007cd8:	f7fe ffd0 	bl	8006c7c <xTaskCreateStatic>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	4a10      	ldr	r2, [pc, #64]	; (8007d20 <xTimerCreateTimerTask+0x8c>)
 8007ce0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ce2:	4b0f      	ldr	r3, [pc, #60]	; (8007d20 <xTimerCreateTimerTask+0x8c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007cea:	2301      	movs	r3, #1
 8007cec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10a      	bne.n	8007d0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	613b      	str	r3, [r7, #16]
}
 8007d06:	bf00      	nop
 8007d08:	e7fe      	b.n	8007d08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007d0a:	697b      	ldr	r3, [r7, #20]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	200015a8 	.word	0x200015a8
 8007d18:	080095a4 	.word	0x080095a4
 8007d1c:	08007e59 	.word	0x08007e59
 8007d20:	200015ac 	.word	0x200015ac

08007d24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	; 0x28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
 8007d30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10a      	bne.n	8007d52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	623b      	str	r3, [r7, #32]
}
 8007d4e:	bf00      	nop
 8007d50:	e7fe      	b.n	8007d50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d52:	4b1a      	ldr	r3, [pc, #104]	; (8007dbc <xTimerGenericCommand+0x98>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d02a      	beq.n	8007db0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2b05      	cmp	r3, #5
 8007d6a:	dc18      	bgt.n	8007d9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d6c:	f7ff fdb4 	bl	80078d8 <xTaskGetSchedulerState>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d109      	bne.n	8007d8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d76:	4b11      	ldr	r3, [pc, #68]	; (8007dbc <xTimerGenericCommand+0x98>)
 8007d78:	6818      	ldr	r0, [r3, #0]
 8007d7a:	f107 0110 	add.w	r1, r7, #16
 8007d7e:	2300      	movs	r3, #0
 8007d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d82:	f7fe fa6f 	bl	8006264 <xQueueGenericSend>
 8007d86:	6278      	str	r0, [r7, #36]	; 0x24
 8007d88:	e012      	b.n	8007db0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d8a:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <xTimerGenericCommand+0x98>)
 8007d8c:	6818      	ldr	r0, [r3, #0]
 8007d8e:	f107 0110 	add.w	r1, r7, #16
 8007d92:	2300      	movs	r3, #0
 8007d94:	2200      	movs	r2, #0
 8007d96:	f7fe fa65 	bl	8006264 <xQueueGenericSend>
 8007d9a:	6278      	str	r0, [r7, #36]	; 0x24
 8007d9c:	e008      	b.n	8007db0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d9e:	4b07      	ldr	r3, [pc, #28]	; (8007dbc <xTimerGenericCommand+0x98>)
 8007da0:	6818      	ldr	r0, [r3, #0]
 8007da2:	f107 0110 	add.w	r1, r7, #16
 8007da6:	2300      	movs	r3, #0
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	f7fe fb59 	bl	8006460 <xQueueGenericSendFromISR>
 8007dae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3728      	adds	r7, #40	; 0x28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	200015a8 	.word	0x200015a8

08007dc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b088      	sub	sp, #32
 8007dc4:	af02      	add	r7, sp, #8
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dca:	4b22      	ldr	r3, [pc, #136]	; (8007e54 <prvProcessExpiredTimer+0x94>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe f825 	bl	8005e28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007de4:	f003 0304 	and.w	r3, r3, #4
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d022      	beq.n	8007e32 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	699a      	ldr	r2, [r3, #24]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	18d1      	adds	r1, r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	6978      	ldr	r0, [r7, #20]
 8007dfa:	f000 f8d1 	bl	8007fa0 <prvInsertTimerInActiveList>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d01f      	beq.n	8007e44 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e04:	2300      	movs	r3, #0
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	6978      	ldr	r0, [r7, #20]
 8007e10:	f7ff ff88 	bl	8007d24 <xTimerGenericCommand>
 8007e14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d113      	bne.n	8007e44 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	60fb      	str	r3, [r7, #12]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e38:	f023 0301 	bic.w	r3, r3, #1
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	6978      	ldr	r0, [r7, #20]
 8007e4a:	4798      	blx	r3
}
 8007e4c:	bf00      	nop
 8007e4e:	3718      	adds	r7, #24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	200015a0 	.word	0x200015a0

08007e58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e60:	f107 0308 	add.w	r3, r7, #8
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 f857 	bl	8007f18 <prvGetNextExpireTime>
 8007e6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 f803 	bl	8007e7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e76:	f000 f8d5 	bl	8008024 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e7a:	e7f1      	b.n	8007e60 <prvTimerTask+0x8>

08007e7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e86:	f7ff f935 	bl	80070f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e8a:	f107 0308 	add.w	r3, r7, #8
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 f866 	bl	8007f60 <prvSampleTimeNow>
 8007e94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d130      	bne.n	8007efe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10a      	bne.n	8007eb8 <prvProcessTimerOrBlockTask+0x3c>
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d806      	bhi.n	8007eb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007eaa:	f7ff f931 	bl	8007110 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007eae:	68f9      	ldr	r1, [r7, #12]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7ff ff85 	bl	8007dc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007eb6:	e024      	b.n	8007f02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d008      	beq.n	8007ed0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ebe:	4b13      	ldr	r3, [pc, #76]	; (8007f0c <prvProcessTimerOrBlockTask+0x90>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <prvProcessTimerOrBlockTask+0x50>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e000      	b.n	8007ece <prvProcessTimerOrBlockTask+0x52>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ed0:	4b0f      	ldr	r3, [pc, #60]	; (8007f10 <prvProcessTimerOrBlockTask+0x94>)
 8007ed2:	6818      	ldr	r0, [r3, #0]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	4619      	mov	r1, r3
 8007ede:	f7fe fe99 	bl	8006c14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ee2:	f7ff f915 	bl	8007110 <xTaskResumeAll>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10a      	bne.n	8007f02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007eec:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <prvProcessTimerOrBlockTask+0x98>)
 8007eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	f3bf 8f6f 	isb	sy
}
 8007efc:	e001      	b.n	8007f02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007efe:	f7ff f907 	bl	8007110 <xTaskResumeAll>
}
 8007f02:	bf00      	nop
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	200015a4 	.word	0x200015a4
 8007f10:	200015a8 	.word	0x200015a8
 8007f14:	e000ed04 	.word	0xe000ed04

08007f18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f20:	4b0e      	ldr	r3, [pc, #56]	; (8007f5c <prvGetNextExpireTime+0x44>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <prvGetNextExpireTime+0x16>
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	e000      	b.n	8007f30 <prvGetNextExpireTime+0x18>
 8007f2e:	2200      	movs	r2, #0
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d105      	bne.n	8007f48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f3c:	4b07      	ldr	r3, [pc, #28]	; (8007f5c <prvGetNextExpireTime+0x44>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	e001      	b.n	8007f4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	200015a0 	.word	0x200015a0

08007f60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f68:	f7ff f970 	bl	800724c <xTaskGetTickCount>
 8007f6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f6e:	4b0b      	ldr	r3, [pc, #44]	; (8007f9c <prvSampleTimeNow+0x3c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d205      	bcs.n	8007f84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f78:	f000 f936 	bl	80081e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	e002      	b.n	8007f8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f8a:	4a04      	ldr	r2, [pc, #16]	; (8007f9c <prvSampleTimeNow+0x3c>)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f90:	68fb      	ldr	r3, [r7, #12]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	200015b0 	.word	0x200015b0

08007fa0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d812      	bhi.n	8007fec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	1ad2      	subs	r2, r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d302      	bcc.n	8007fda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	617b      	str	r3, [r7, #20]
 8007fd8:	e01b      	b.n	8008012 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007fda:	4b10      	ldr	r3, [pc, #64]	; (800801c <prvInsertTimerInActiveList+0x7c>)
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	f7fd fee6 	bl	8005db6 <vListInsert>
 8007fea:	e012      	b.n	8008012 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d206      	bcs.n	8008002 <prvInsertTimerInActiveList+0x62>
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d302      	bcc.n	8008002 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	617b      	str	r3, [r7, #20]
 8008000:	e007      	b.n	8008012 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008002:	4b07      	ldr	r3, [pc, #28]	; (8008020 <prvInsertTimerInActiveList+0x80>)
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3304      	adds	r3, #4
 800800a:	4619      	mov	r1, r3
 800800c:	4610      	mov	r0, r2
 800800e:	f7fd fed2 	bl	8005db6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008012:	697b      	ldr	r3, [r7, #20]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	200015a4 	.word	0x200015a4
 8008020:	200015a0 	.word	0x200015a0

08008024 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b08e      	sub	sp, #56	; 0x38
 8008028:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800802a:	e0ca      	b.n	80081c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	da18      	bge.n	8008064 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008032:	1d3b      	adds	r3, r7, #4
 8008034:	3304      	adds	r3, #4
 8008036:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10a      	bne.n	8008054 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	61fb      	str	r3, [r7, #28]
}
 8008050:	bf00      	nop
 8008052:	e7fe      	b.n	8008052 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800805a:	6850      	ldr	r0, [r2, #4]
 800805c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800805e:	6892      	ldr	r2, [r2, #8]
 8008060:	4611      	mov	r1, r2
 8008062:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f2c0 80ab 	blt.w	80081c2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d004      	beq.n	8008082 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	3304      	adds	r3, #4
 800807c:	4618      	mov	r0, r3
 800807e:	f7fd fed3 	bl	8005e28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008082:	463b      	mov	r3, r7
 8008084:	4618      	mov	r0, r3
 8008086:	f7ff ff6b 	bl	8007f60 <prvSampleTimeNow>
 800808a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b09      	cmp	r3, #9
 8008090:	f200 8096 	bhi.w	80081c0 <prvProcessReceivedCommands+0x19c>
 8008094:	a201      	add	r2, pc, #4	; (adr r2, 800809c <prvProcessReceivedCommands+0x78>)
 8008096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809a:	bf00      	nop
 800809c:	080080c5 	.word	0x080080c5
 80080a0:	080080c5 	.word	0x080080c5
 80080a4:	080080c5 	.word	0x080080c5
 80080a8:	08008139 	.word	0x08008139
 80080ac:	0800814d 	.word	0x0800814d
 80080b0:	08008197 	.word	0x08008197
 80080b4:	080080c5 	.word	0x080080c5
 80080b8:	080080c5 	.word	0x080080c5
 80080bc:	08008139 	.word	0x08008139
 80080c0:	0800814d 	.word	0x0800814d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080ca:	f043 0301 	orr.w	r3, r3, #1
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	18d1      	adds	r1, r2, r3
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080e4:	f7ff ff5c 	bl	8007fa0 <prvInsertTimerInActiveList>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d069      	beq.n	80081c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b00      	cmp	r3, #0
 8008102:	d05e      	beq.n	80081c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	441a      	add	r2, r3
 800810c:	2300      	movs	r3, #0
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	2300      	movs	r3, #0
 8008112:	2100      	movs	r1, #0
 8008114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008116:	f7ff fe05 	bl	8007d24 <xTimerGenericCommand>
 800811a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d14f      	bne.n	80081c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	61bb      	str	r3, [r7, #24]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800813e:	f023 0301 	bic.w	r3, r3, #1
 8008142:	b2da      	uxtb	r2, r3
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800814a:	e03a      	b.n	80081c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008152:	f043 0301 	orr.w	r3, r3, #1
 8008156:	b2da      	uxtb	r2, r3
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008162:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10a      	bne.n	8008182 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	617b      	str	r3, [r7, #20]
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008184:	699a      	ldr	r2, [r3, #24]
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	18d1      	adds	r1, r2, r3
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800818e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008190:	f7ff ff06 	bl	8007fa0 <prvInsertTimerInActiveList>
					break;
 8008194:	e015      	b.n	80081c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d103      	bne.n	80081ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80081a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081a6:	f000 fbdb 	bl	8008960 <vPortFree>
 80081aa:	e00a      	b.n	80081c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081b2:	f023 0301 	bic.w	r3, r3, #1
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081be:	e000      	b.n	80081c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80081c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081c2:	4b08      	ldr	r3, [pc, #32]	; (80081e4 <prvProcessReceivedCommands+0x1c0>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	1d39      	adds	r1, r7, #4
 80081c8:	2200      	movs	r2, #0
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe f9e4 	bl	8006598 <xQueueReceive>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f47f af2a 	bne.w	800802c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80081d8:	bf00      	nop
 80081da:	bf00      	nop
 80081dc:	3730      	adds	r7, #48	; 0x30
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	200015a8 	.word	0x200015a8

080081e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081ee:	e048      	b.n	8008282 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081f0:	4b2d      	ldr	r3, [pc, #180]	; (80082a8 <prvSwitchTimerLists+0xc0>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081fa:	4b2b      	ldr	r3, [pc, #172]	; (80082a8 <prvSwitchTimerLists+0xc0>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	3304      	adds	r3, #4
 8008208:	4618      	mov	r0, r3
 800820a:	f7fd fe0d 	bl	8005e28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800821c:	f003 0304 	and.w	r3, r3, #4
 8008220:	2b00      	cmp	r3, #0
 8008222:	d02e      	beq.n	8008282 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	4413      	add	r3, r2
 800822c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	429a      	cmp	r2, r3
 8008234:	d90e      	bls.n	8008254 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008242:	4b19      	ldr	r3, [pc, #100]	; (80082a8 <prvSwitchTimerLists+0xc0>)
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3304      	adds	r3, #4
 800824a:	4619      	mov	r1, r3
 800824c:	4610      	mov	r0, r2
 800824e:	f7fd fdb2 	bl	8005db6 <vListInsert>
 8008252:	e016      	b.n	8008282 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008254:	2300      	movs	r3, #0
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	2300      	movs	r3, #0
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	2100      	movs	r1, #0
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7ff fd60 	bl	8007d24 <xTimerGenericCommand>
 8008264:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10a      	bne.n	8008282 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	603b      	str	r3, [r7, #0]
}
 800827e:	bf00      	nop
 8008280:	e7fe      	b.n	8008280 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008282:	4b09      	ldr	r3, [pc, #36]	; (80082a8 <prvSwitchTimerLists+0xc0>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1b1      	bne.n	80081f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800828c:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <prvSwitchTimerLists+0xc0>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008292:	4b06      	ldr	r3, [pc, #24]	; (80082ac <prvSwitchTimerLists+0xc4>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a04      	ldr	r2, [pc, #16]	; (80082a8 <prvSwitchTimerLists+0xc0>)
 8008298:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800829a:	4a04      	ldr	r2, [pc, #16]	; (80082ac <prvSwitchTimerLists+0xc4>)
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	6013      	str	r3, [r2, #0]
}
 80082a0:	bf00      	nop
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	200015a0 	.word	0x200015a0
 80082ac:	200015a4 	.word	0x200015a4

080082b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80082b6:	f000 f965 	bl	8008584 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80082ba:	4b15      	ldr	r3, [pc, #84]	; (8008310 <prvCheckForValidListAndQueue+0x60>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d120      	bne.n	8008304 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80082c2:	4814      	ldr	r0, [pc, #80]	; (8008314 <prvCheckForValidListAndQueue+0x64>)
 80082c4:	f7fd fd26 	bl	8005d14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80082c8:	4813      	ldr	r0, [pc, #76]	; (8008318 <prvCheckForValidListAndQueue+0x68>)
 80082ca:	f7fd fd23 	bl	8005d14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80082ce:	4b13      	ldr	r3, [pc, #76]	; (800831c <prvCheckForValidListAndQueue+0x6c>)
 80082d0:	4a10      	ldr	r2, [pc, #64]	; (8008314 <prvCheckForValidListAndQueue+0x64>)
 80082d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80082d4:	4b12      	ldr	r3, [pc, #72]	; (8008320 <prvCheckForValidListAndQueue+0x70>)
 80082d6:	4a10      	ldr	r2, [pc, #64]	; (8008318 <prvCheckForValidListAndQueue+0x68>)
 80082d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80082da:	2300      	movs	r3, #0
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	4b11      	ldr	r3, [pc, #68]	; (8008324 <prvCheckForValidListAndQueue+0x74>)
 80082e0:	4a11      	ldr	r2, [pc, #68]	; (8008328 <prvCheckForValidListAndQueue+0x78>)
 80082e2:	2110      	movs	r1, #16
 80082e4:	200a      	movs	r0, #10
 80082e6:	f7fd fe31 	bl	8005f4c <xQueueGenericCreateStatic>
 80082ea:	4603      	mov	r3, r0
 80082ec:	4a08      	ldr	r2, [pc, #32]	; (8008310 <prvCheckForValidListAndQueue+0x60>)
 80082ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80082f0:	4b07      	ldr	r3, [pc, #28]	; (8008310 <prvCheckForValidListAndQueue+0x60>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80082f8:	4b05      	ldr	r3, [pc, #20]	; (8008310 <prvCheckForValidListAndQueue+0x60>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	490b      	ldr	r1, [pc, #44]	; (800832c <prvCheckForValidListAndQueue+0x7c>)
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe fc5e 	bl	8006bc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008304:	f000 f96e 	bl	80085e4 <vPortExitCritical>
}
 8008308:	bf00      	nop
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	200015a8 	.word	0x200015a8
 8008314:	20001578 	.word	0x20001578
 8008318:	2000158c 	.word	0x2000158c
 800831c:	200015a0 	.word	0x200015a0
 8008320:	200015a4 	.word	0x200015a4
 8008324:	20001654 	.word	0x20001654
 8008328:	200015b4 	.word	0x200015b4
 800832c:	080095ac 	.word	0x080095ac

08008330 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3b04      	subs	r3, #4
 8008340:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3b04      	subs	r3, #4
 800834e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f023 0201 	bic.w	r2, r3, #1
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3b04      	subs	r3, #4
 800835e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008360:	4a0c      	ldr	r2, [pc, #48]	; (8008394 <pxPortInitialiseStack+0x64>)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	3b14      	subs	r3, #20
 800836a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	3b04      	subs	r3, #4
 8008376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f06f 0202 	mvn.w	r2, #2
 800837e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3b20      	subs	r3, #32
 8008384:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008386:	68fb      	ldr	r3, [r7, #12]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	08008399 	.word	0x08008399

08008398 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083a2:	4b12      	ldr	r3, [pc, #72]	; (80083ec <prvTaskExitError+0x54>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083aa:	d00a      	beq.n	80083c2 <prvTaskExitError+0x2a>
	__asm volatile
 80083ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	60fb      	str	r3, [r7, #12]
}
 80083be:	bf00      	nop
 80083c0:	e7fe      	b.n	80083c0 <prvTaskExitError+0x28>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	60bb      	str	r3, [r7, #8]
}
 80083d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083d6:	bf00      	nop
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0fc      	beq.n	80083d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083de:	bf00      	nop
 80083e0:	bf00      	nop
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	2000000c 	.word	0x2000000c

080083f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083f0:	4b07      	ldr	r3, [pc, #28]	; (8008410 <pxCurrentTCBConst2>)
 80083f2:	6819      	ldr	r1, [r3, #0]
 80083f4:	6808      	ldr	r0, [r1, #0]
 80083f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fa:	f380 8809 	msr	PSP, r0
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f04f 0000 	mov.w	r0, #0
 8008406:	f380 8811 	msr	BASEPRI, r0
 800840a:	4770      	bx	lr
 800840c:	f3af 8000 	nop.w

08008410 <pxCurrentTCBConst2>:
 8008410:	20001078 	.word	0x20001078
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop

08008418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008418:	4808      	ldr	r0, [pc, #32]	; (800843c <prvPortStartFirstTask+0x24>)
 800841a:	6800      	ldr	r0, [r0, #0]
 800841c:	6800      	ldr	r0, [r0, #0]
 800841e:	f380 8808 	msr	MSP, r0
 8008422:	f04f 0000 	mov.w	r0, #0
 8008426:	f380 8814 	msr	CONTROL, r0
 800842a:	b662      	cpsie	i
 800842c:	b661      	cpsie	f
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	df00      	svc	0
 8008438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800843a:	bf00      	nop
 800843c:	e000ed08 	.word	0xe000ed08

08008440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008446:	4b46      	ldr	r3, [pc, #280]	; (8008560 <xPortStartScheduler+0x120>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a46      	ldr	r2, [pc, #280]	; (8008564 <xPortStartScheduler+0x124>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d10a      	bne.n	8008466 <xPortStartScheduler+0x26>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	613b      	str	r3, [r7, #16]
}
 8008462:	bf00      	nop
 8008464:	e7fe      	b.n	8008464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008466:	4b3e      	ldr	r3, [pc, #248]	; (8008560 <xPortStartScheduler+0x120>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a3f      	ldr	r2, [pc, #252]	; (8008568 <xPortStartScheduler+0x128>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d10a      	bne.n	8008486 <xPortStartScheduler+0x46>
	__asm volatile
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	60fb      	str	r3, [r7, #12]
}
 8008482:	bf00      	nop
 8008484:	e7fe      	b.n	8008484 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008486:	4b39      	ldr	r3, [pc, #228]	; (800856c <xPortStartScheduler+0x12c>)
 8008488:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	b2db      	uxtb	r3, r3
 8008490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	22ff      	movs	r2, #255	; 0xff
 8008496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084a0:	78fb      	ldrb	r3, [r7, #3]
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	4b31      	ldr	r3, [pc, #196]	; (8008570 <xPortStartScheduler+0x130>)
 80084ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084ae:	4b31      	ldr	r3, [pc, #196]	; (8008574 <xPortStartScheduler+0x134>)
 80084b0:	2207      	movs	r2, #7
 80084b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084b4:	e009      	b.n	80084ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80084b6:	4b2f      	ldr	r3, [pc, #188]	; (8008574 <xPortStartScheduler+0x134>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	4a2d      	ldr	r2, [pc, #180]	; (8008574 <xPortStartScheduler+0x134>)
 80084be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084ca:	78fb      	ldrb	r3, [r7, #3]
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d2:	2b80      	cmp	r3, #128	; 0x80
 80084d4:	d0ef      	beq.n	80084b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084d6:	4b27      	ldr	r3, [pc, #156]	; (8008574 <xPortStartScheduler+0x134>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f1c3 0307 	rsb	r3, r3, #7
 80084de:	2b04      	cmp	r3, #4
 80084e0:	d00a      	beq.n	80084f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	60bb      	str	r3, [r7, #8]
}
 80084f4:	bf00      	nop
 80084f6:	e7fe      	b.n	80084f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084f8:	4b1e      	ldr	r3, [pc, #120]	; (8008574 <xPortStartScheduler+0x134>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	021b      	lsls	r3, r3, #8
 80084fe:	4a1d      	ldr	r2, [pc, #116]	; (8008574 <xPortStartScheduler+0x134>)
 8008500:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008502:	4b1c      	ldr	r3, [pc, #112]	; (8008574 <xPortStartScheduler+0x134>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800850a:	4a1a      	ldr	r2, [pc, #104]	; (8008574 <xPortStartScheduler+0x134>)
 800850c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	b2da      	uxtb	r2, r3
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008516:	4b18      	ldr	r3, [pc, #96]	; (8008578 <xPortStartScheduler+0x138>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a17      	ldr	r2, [pc, #92]	; (8008578 <xPortStartScheduler+0x138>)
 800851c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008522:	4b15      	ldr	r3, [pc, #84]	; (8008578 <xPortStartScheduler+0x138>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a14      	ldr	r2, [pc, #80]	; (8008578 <xPortStartScheduler+0x138>)
 8008528:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800852c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800852e:	f000 f8dd 	bl	80086ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008532:	4b12      	ldr	r3, [pc, #72]	; (800857c <xPortStartScheduler+0x13c>)
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008538:	f000 f8fc 	bl	8008734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800853c:	4b10      	ldr	r3, [pc, #64]	; (8008580 <xPortStartScheduler+0x140>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a0f      	ldr	r2, [pc, #60]	; (8008580 <xPortStartScheduler+0x140>)
 8008542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008546:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008548:	f7ff ff66 	bl	8008418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800854c:	f7fe ff48 	bl	80073e0 <vTaskSwitchContext>
	prvTaskExitError();
 8008550:	f7ff ff22 	bl	8008398 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	e000ed00 	.word	0xe000ed00
 8008564:	410fc271 	.word	0x410fc271
 8008568:	410fc270 	.word	0x410fc270
 800856c:	e000e400 	.word	0xe000e400
 8008570:	200016a4 	.word	0x200016a4
 8008574:	200016a8 	.word	0x200016a8
 8008578:	e000ed20 	.word	0xe000ed20
 800857c:	2000000c 	.word	0x2000000c
 8008580:	e000ef34 	.word	0xe000ef34

08008584 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	607b      	str	r3, [r7, #4]
}
 800859c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800859e:	4b0f      	ldr	r3, [pc, #60]	; (80085dc <vPortEnterCritical+0x58>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3301      	adds	r3, #1
 80085a4:	4a0d      	ldr	r2, [pc, #52]	; (80085dc <vPortEnterCritical+0x58>)
 80085a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085a8:	4b0c      	ldr	r3, [pc, #48]	; (80085dc <vPortEnterCritical+0x58>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d10f      	bne.n	80085d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085b0:	4b0b      	ldr	r3, [pc, #44]	; (80085e0 <vPortEnterCritical+0x5c>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00a      	beq.n	80085d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	603b      	str	r3, [r7, #0]
}
 80085cc:	bf00      	nop
 80085ce:	e7fe      	b.n	80085ce <vPortEnterCritical+0x4a>
	}
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	2000000c 	.word	0x2000000c
 80085e0:	e000ed04 	.word	0xe000ed04

080085e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085ea:	4b12      	ldr	r3, [pc, #72]	; (8008634 <vPortExitCritical+0x50>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10a      	bne.n	8008608 <vPortExitCritical+0x24>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	607b      	str	r3, [r7, #4]
}
 8008604:	bf00      	nop
 8008606:	e7fe      	b.n	8008606 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008608:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <vPortExitCritical+0x50>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3b01      	subs	r3, #1
 800860e:	4a09      	ldr	r2, [pc, #36]	; (8008634 <vPortExitCritical+0x50>)
 8008610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008612:	4b08      	ldr	r3, [pc, #32]	; (8008634 <vPortExitCritical+0x50>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d105      	bne.n	8008626 <vPortExitCritical+0x42>
 800861a:	2300      	movs	r3, #0
 800861c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	f383 8811 	msr	BASEPRI, r3
}
 8008624:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	2000000c 	.word	0x2000000c
	...

08008640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008640:	f3ef 8009 	mrs	r0, PSP
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	4b15      	ldr	r3, [pc, #84]	; (80086a0 <pxCurrentTCBConst>)
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	f01e 0f10 	tst.w	lr, #16
 8008650:	bf08      	it	eq
 8008652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865a:	6010      	str	r0, [r2, #0]
 800865c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008664:	f380 8811 	msr	BASEPRI, r0
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f7fe feb6 	bl	80073e0 <vTaskSwitchContext>
 8008674:	f04f 0000 	mov.w	r0, #0
 8008678:	f380 8811 	msr	BASEPRI, r0
 800867c:	bc09      	pop	{r0, r3}
 800867e:	6819      	ldr	r1, [r3, #0]
 8008680:	6808      	ldr	r0, [r1, #0]
 8008682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008686:	f01e 0f10 	tst.w	lr, #16
 800868a:	bf08      	it	eq
 800868c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008690:	f380 8809 	msr	PSP, r0
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	f3af 8000 	nop.w

080086a0 <pxCurrentTCBConst>:
 80086a0:	20001078 	.word	0x20001078
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop

080086a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	607b      	str	r3, [r7, #4]
}
 80086c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086c2:	f7fe fdd3 	bl	800726c <xTaskIncrementTick>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086cc:	4b06      	ldr	r3, [pc, #24]	; (80086e8 <xPortSysTickHandler+0x40>)
 80086ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086d2:	601a      	str	r2, [r3, #0]
 80086d4:	2300      	movs	r3, #0
 80086d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	f383 8811 	msr	BASEPRI, r3
}
 80086de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	e000ed04 	.word	0xe000ed04

080086ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086ec:	b480      	push	{r7}
 80086ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086f0:	4b0b      	ldr	r3, [pc, #44]	; (8008720 <vPortSetupTimerInterrupt+0x34>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086f6:	4b0b      	ldr	r3, [pc, #44]	; (8008724 <vPortSetupTimerInterrupt+0x38>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086fc:	4b0a      	ldr	r3, [pc, #40]	; (8008728 <vPortSetupTimerInterrupt+0x3c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a0a      	ldr	r2, [pc, #40]	; (800872c <vPortSetupTimerInterrupt+0x40>)
 8008702:	fba2 2303 	umull	r2, r3, r2, r3
 8008706:	099b      	lsrs	r3, r3, #6
 8008708:	4a09      	ldr	r2, [pc, #36]	; (8008730 <vPortSetupTimerInterrupt+0x44>)
 800870a:	3b01      	subs	r3, #1
 800870c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800870e:	4b04      	ldr	r3, [pc, #16]	; (8008720 <vPortSetupTimerInterrupt+0x34>)
 8008710:	2207      	movs	r2, #7
 8008712:	601a      	str	r2, [r3, #0]
}
 8008714:	bf00      	nop
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	e000e010 	.word	0xe000e010
 8008724:	e000e018 	.word	0xe000e018
 8008728:	20000000 	.word	0x20000000
 800872c:	10624dd3 	.word	0x10624dd3
 8008730:	e000e014 	.word	0xe000e014

08008734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008744 <vPortEnableVFP+0x10>
 8008738:	6801      	ldr	r1, [r0, #0]
 800873a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800873e:	6001      	str	r1, [r0, #0]
 8008740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008742:	bf00      	nop
 8008744:	e000ed88 	.word	0xe000ed88

08008748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800874e:	f3ef 8305 	mrs	r3, IPSR
 8008752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b0f      	cmp	r3, #15
 8008758:	d914      	bls.n	8008784 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800875a:	4a17      	ldr	r2, [pc, #92]	; (80087b8 <vPortValidateInterruptPriority+0x70>)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4413      	add	r3, r2
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008764:	4b15      	ldr	r3, [pc, #84]	; (80087bc <vPortValidateInterruptPriority+0x74>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	7afa      	ldrb	r2, [r7, #11]
 800876a:	429a      	cmp	r2, r3
 800876c:	d20a      	bcs.n	8008784 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	607b      	str	r3, [r7, #4]
}
 8008780:	bf00      	nop
 8008782:	e7fe      	b.n	8008782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008784:	4b0e      	ldr	r3, [pc, #56]	; (80087c0 <vPortValidateInterruptPriority+0x78>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800878c:	4b0d      	ldr	r3, [pc, #52]	; (80087c4 <vPortValidateInterruptPriority+0x7c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	429a      	cmp	r2, r3
 8008792:	d90a      	bls.n	80087aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	603b      	str	r3, [r7, #0]
}
 80087a6:	bf00      	nop
 80087a8:	e7fe      	b.n	80087a8 <vPortValidateInterruptPriority+0x60>
	}
 80087aa:	bf00      	nop
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	e000e3f0 	.word	0xe000e3f0
 80087bc:	200016a4 	.word	0x200016a4
 80087c0:	e000ed0c 	.word	0xe000ed0c
 80087c4:	200016a8 	.word	0x200016a8

080087c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08a      	sub	sp, #40	; 0x28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087d0:	2300      	movs	r3, #0
 80087d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087d4:	f7fe fc8e 	bl	80070f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087d8:	4b5b      	ldr	r3, [pc, #364]	; (8008948 <pvPortMalloc+0x180>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087e0:	f000 f920 	bl	8008a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087e4:	4b59      	ldr	r3, [pc, #356]	; (800894c <pvPortMalloc+0x184>)
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4013      	ands	r3, r2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f040 8093 	bne.w	8008918 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d01d      	beq.n	8008834 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80087f8:	2208      	movs	r2, #8
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4413      	add	r3, r2
 80087fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f003 0307 	and.w	r3, r3, #7
 8008806:	2b00      	cmp	r3, #0
 8008808:	d014      	beq.n	8008834 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f023 0307 	bic.w	r3, r3, #7
 8008810:	3308      	adds	r3, #8
 8008812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00a      	beq.n	8008834 <pvPortMalloc+0x6c>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	617b      	str	r3, [r7, #20]
}
 8008830:	bf00      	nop
 8008832:	e7fe      	b.n	8008832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d06e      	beq.n	8008918 <pvPortMalloc+0x150>
 800883a:	4b45      	ldr	r3, [pc, #276]	; (8008950 <pvPortMalloc+0x188>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	429a      	cmp	r2, r3
 8008842:	d869      	bhi.n	8008918 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008844:	4b43      	ldr	r3, [pc, #268]	; (8008954 <pvPortMalloc+0x18c>)
 8008846:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008848:	4b42      	ldr	r3, [pc, #264]	; (8008954 <pvPortMalloc+0x18c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800884e:	e004      	b.n	800885a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	429a      	cmp	r2, r3
 8008862:	d903      	bls.n	800886c <pvPortMalloc+0xa4>
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1f1      	bne.n	8008850 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800886c:	4b36      	ldr	r3, [pc, #216]	; (8008948 <pvPortMalloc+0x180>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008872:	429a      	cmp	r2, r3
 8008874:	d050      	beq.n	8008918 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008876:	6a3b      	ldr	r3, [r7, #32]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2208      	movs	r2, #8
 800887c:	4413      	add	r3, r2
 800887e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	2308      	movs	r3, #8
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	429a      	cmp	r2, r3
 8008896:	d91f      	bls.n	80088d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4413      	add	r3, r2
 800889e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	f003 0307 	and.w	r3, r3, #7
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00a      	beq.n	80088c0 <pvPortMalloc+0xf8>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	613b      	str	r3, [r7, #16]
}
 80088bc:	bf00      	nop
 80088be:	e7fe      	b.n	80088be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	1ad2      	subs	r2, r2, r3
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088d2:	69b8      	ldr	r0, [r7, #24]
 80088d4:	f000 f908 	bl	8008ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088d8:	4b1d      	ldr	r3, [pc, #116]	; (8008950 <pvPortMalloc+0x188>)
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	4a1b      	ldr	r2, [pc, #108]	; (8008950 <pvPortMalloc+0x188>)
 80088e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088e6:	4b1a      	ldr	r3, [pc, #104]	; (8008950 <pvPortMalloc+0x188>)
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	4b1b      	ldr	r3, [pc, #108]	; (8008958 <pvPortMalloc+0x190>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d203      	bcs.n	80088fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088f2:	4b17      	ldr	r3, [pc, #92]	; (8008950 <pvPortMalloc+0x188>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a18      	ldr	r2, [pc, #96]	; (8008958 <pvPortMalloc+0x190>)
 80088f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	4b13      	ldr	r3, [pc, #76]	; (800894c <pvPortMalloc+0x184>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	431a      	orrs	r2, r3
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	2200      	movs	r2, #0
 800890c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800890e:	4b13      	ldr	r3, [pc, #76]	; (800895c <pvPortMalloc+0x194>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3301      	adds	r3, #1
 8008914:	4a11      	ldr	r2, [pc, #68]	; (800895c <pvPortMalloc+0x194>)
 8008916:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008918:	f7fe fbfa 	bl	8007110 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	f003 0307 	and.w	r3, r3, #7
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <pvPortMalloc+0x174>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	60fb      	str	r3, [r7, #12]
}
 8008938:	bf00      	nop
 800893a:	e7fe      	b.n	800893a <pvPortMalloc+0x172>
	return pvReturn;
 800893c:	69fb      	ldr	r3, [r7, #28]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3728      	adds	r7, #40	; 0x28
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	2000708c 	.word	0x2000708c
 800894c:	200070a0 	.word	0x200070a0
 8008950:	20007090 	.word	0x20007090
 8008954:	20007084 	.word	0x20007084
 8008958:	20007094 	.word	0x20007094
 800895c:	20007098 	.word	0x20007098

08008960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d04d      	beq.n	8008a0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008972:	2308      	movs	r3, #8
 8008974:	425b      	negs	r3, r3
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4413      	add	r3, r2
 800897a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	4b24      	ldr	r3, [pc, #144]	; (8008a18 <vPortFree+0xb8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4013      	ands	r3, r2
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10a      	bne.n	80089a4 <vPortFree+0x44>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	60fb      	str	r3, [r7, #12]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00a      	beq.n	80089c2 <vPortFree+0x62>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	60bb      	str	r3, [r7, #8]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	4b14      	ldr	r3, [pc, #80]	; (8008a18 <vPortFree+0xb8>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4013      	ands	r3, r2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01e      	beq.n	8008a0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d11a      	bne.n	8008a0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	4b0e      	ldr	r3, [pc, #56]	; (8008a18 <vPortFree+0xb8>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	43db      	mvns	r3, r3
 80089e2:	401a      	ands	r2, r3
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80089e8:	f7fe fb84 	bl	80070f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <vPortFree+0xbc>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4413      	add	r3, r2
 80089f6:	4a09      	ldr	r2, [pc, #36]	; (8008a1c <vPortFree+0xbc>)
 80089f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089fa:	6938      	ldr	r0, [r7, #16]
 80089fc:	f000 f874 	bl	8008ae8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a00:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <vPortFree+0xc0>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	3301      	adds	r3, #1
 8008a06:	4a06      	ldr	r2, [pc, #24]	; (8008a20 <vPortFree+0xc0>)
 8008a08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a0a:	f7fe fb81 	bl	8007110 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a0e:	bf00      	nop
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	200070a0 	.word	0x200070a0
 8008a1c:	20007090 	.word	0x20007090
 8008a20:	2000709c 	.word	0x2000709c

08008a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a2a:	f645 13d8 	movw	r3, #23000	; 0x59d8
 8008a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a30:	4b27      	ldr	r3, [pc, #156]	; (8008ad0 <prvHeapInit+0xac>)
 8008a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00c      	beq.n	8008a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3307      	adds	r3, #7
 8008a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f023 0307 	bic.w	r3, r3, #7
 8008a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	4a1f      	ldr	r2, [pc, #124]	; (8008ad0 <prvHeapInit+0xac>)
 8008a54:	4413      	add	r3, r2
 8008a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a5c:	4a1d      	ldr	r2, [pc, #116]	; (8008ad4 <prvHeapInit+0xb0>)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a62:	4b1c      	ldr	r3, [pc, #112]	; (8008ad4 <prvHeapInit+0xb0>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a70:	2208      	movs	r2, #8
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	1a9b      	subs	r3, r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f023 0307 	bic.w	r3, r3, #7
 8008a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	4a15      	ldr	r2, [pc, #84]	; (8008ad8 <prvHeapInit+0xb4>)
 8008a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a86:	4b14      	ldr	r3, [pc, #80]	; (8008ad8 <prvHeapInit+0xb4>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a8e:	4b12      	ldr	r3, [pc, #72]	; (8008ad8 <prvHeapInit+0xb4>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2200      	movs	r2, #0
 8008a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	1ad2      	subs	r2, r2, r3
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008aa4:	4b0c      	ldr	r3, [pc, #48]	; (8008ad8 <prvHeapInit+0xb4>)
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	4a0a      	ldr	r2, [pc, #40]	; (8008adc <prvHeapInit+0xb8>)
 8008ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	4a09      	ldr	r2, [pc, #36]	; (8008ae0 <prvHeapInit+0xbc>)
 8008aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008abc:	4b09      	ldr	r3, [pc, #36]	; (8008ae4 <prvHeapInit+0xc0>)
 8008abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ac2:	601a      	str	r2, [r3, #0]
}
 8008ac4:	bf00      	nop
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	200016ac 	.word	0x200016ac
 8008ad4:	20007084 	.word	0x20007084
 8008ad8:	2000708c 	.word	0x2000708c
 8008adc:	20007094 	.word	0x20007094
 8008ae0:	20007090 	.word	0x20007090
 8008ae4:	200070a0 	.word	0x200070a0

08008ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008af0:	4b28      	ldr	r3, [pc, #160]	; (8008b94 <prvInsertBlockIntoFreeList+0xac>)
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	e002      	b.n	8008afc <prvInsertBlockIntoFreeList+0x14>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d8f7      	bhi.n	8008af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	4413      	add	r3, r2
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d108      	bne.n	8008b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	441a      	add	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	441a      	add	r2, r3
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d118      	bne.n	8008b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	4b15      	ldr	r3, [pc, #84]	; (8008b98 <prvInsertBlockIntoFreeList+0xb0>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d00d      	beq.n	8008b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685a      	ldr	r2, [r3, #4]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	441a      	add	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	e008      	b.n	8008b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b66:	4b0c      	ldr	r3, [pc, #48]	; (8008b98 <prvInsertBlockIntoFreeList+0xb0>)
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	e003      	b.n	8008b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d002      	beq.n	8008b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b86:	bf00      	nop
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	20007084 	.word	0x20007084
 8008b98:	2000708c 	.word	0x2000708c

08008b9c <siprintf>:
 8008b9c:	b40e      	push	{r1, r2, r3}
 8008b9e:	b500      	push	{lr}
 8008ba0:	b09c      	sub	sp, #112	; 0x70
 8008ba2:	ab1d      	add	r3, sp, #116	; 0x74
 8008ba4:	9002      	str	r0, [sp, #8]
 8008ba6:	9006      	str	r0, [sp, #24]
 8008ba8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bac:	4809      	ldr	r0, [pc, #36]	; (8008bd4 <siprintf+0x38>)
 8008bae:	9107      	str	r1, [sp, #28]
 8008bb0:	9104      	str	r1, [sp, #16]
 8008bb2:	4909      	ldr	r1, [pc, #36]	; (8008bd8 <siprintf+0x3c>)
 8008bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bb8:	9105      	str	r1, [sp, #20]
 8008bba:	6800      	ldr	r0, [r0, #0]
 8008bbc:	9301      	str	r3, [sp, #4]
 8008bbe:	a902      	add	r1, sp, #8
 8008bc0:	f000 f9a0 	bl	8008f04 <_svfiprintf_r>
 8008bc4:	9b02      	ldr	r3, [sp, #8]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	701a      	strb	r2, [r3, #0]
 8008bca:	b01c      	add	sp, #112	; 0x70
 8008bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bd0:	b003      	add	sp, #12
 8008bd2:	4770      	bx	lr
 8008bd4:	2000005c 	.word	0x2000005c
 8008bd8:	ffff0208 	.word	0xffff0208

08008bdc <memset>:
 8008bdc:	4402      	add	r2, r0
 8008bde:	4603      	mov	r3, r0
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d100      	bne.n	8008be6 <memset+0xa>
 8008be4:	4770      	bx	lr
 8008be6:	f803 1b01 	strb.w	r1, [r3], #1
 8008bea:	e7f9      	b.n	8008be0 <memset+0x4>

08008bec <__errno>:
 8008bec:	4b01      	ldr	r3, [pc, #4]	; (8008bf4 <__errno+0x8>)
 8008bee:	6818      	ldr	r0, [r3, #0]
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	2000005c 	.word	0x2000005c

08008bf8 <__libc_init_array>:
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	4d0d      	ldr	r5, [pc, #52]	; (8008c30 <__libc_init_array+0x38>)
 8008bfc:	4c0d      	ldr	r4, [pc, #52]	; (8008c34 <__libc_init_array+0x3c>)
 8008bfe:	1b64      	subs	r4, r4, r5
 8008c00:	10a4      	asrs	r4, r4, #2
 8008c02:	2600      	movs	r6, #0
 8008c04:	42a6      	cmp	r6, r4
 8008c06:	d109      	bne.n	8008c1c <__libc_init_array+0x24>
 8008c08:	4d0b      	ldr	r5, [pc, #44]	; (8008c38 <__libc_init_array+0x40>)
 8008c0a:	4c0c      	ldr	r4, [pc, #48]	; (8008c3c <__libc_init_array+0x44>)
 8008c0c:	f000 fc6a 	bl	80094e4 <_init>
 8008c10:	1b64      	subs	r4, r4, r5
 8008c12:	10a4      	asrs	r4, r4, #2
 8008c14:	2600      	movs	r6, #0
 8008c16:	42a6      	cmp	r6, r4
 8008c18:	d105      	bne.n	8008c26 <__libc_init_array+0x2e>
 8008c1a:	bd70      	pop	{r4, r5, r6, pc}
 8008c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c20:	4798      	blx	r3
 8008c22:	3601      	adds	r6, #1
 8008c24:	e7ee      	b.n	8008c04 <__libc_init_array+0xc>
 8008c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c2a:	4798      	blx	r3
 8008c2c:	3601      	adds	r6, #1
 8008c2e:	e7f2      	b.n	8008c16 <__libc_init_array+0x1e>
 8008c30:	080096fc 	.word	0x080096fc
 8008c34:	080096fc 	.word	0x080096fc
 8008c38:	080096fc 	.word	0x080096fc
 8008c3c:	08009700 	.word	0x08009700

08008c40 <__retarget_lock_acquire_recursive>:
 8008c40:	4770      	bx	lr

08008c42 <__retarget_lock_release_recursive>:
 8008c42:	4770      	bx	lr

08008c44 <memcpy>:
 8008c44:	440a      	add	r2, r1
 8008c46:	4291      	cmp	r1, r2
 8008c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c4c:	d100      	bne.n	8008c50 <memcpy+0xc>
 8008c4e:	4770      	bx	lr
 8008c50:	b510      	push	{r4, lr}
 8008c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c5a:	4291      	cmp	r1, r2
 8008c5c:	d1f9      	bne.n	8008c52 <memcpy+0xe>
 8008c5e:	bd10      	pop	{r4, pc}

08008c60 <_free_r>:
 8008c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c62:	2900      	cmp	r1, #0
 8008c64:	d044      	beq.n	8008cf0 <_free_r+0x90>
 8008c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c6a:	9001      	str	r0, [sp, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8008c72:	bfb8      	it	lt
 8008c74:	18e4      	addlt	r4, r4, r3
 8008c76:	f000 f8df 	bl	8008e38 <__malloc_lock>
 8008c7a:	4a1e      	ldr	r2, [pc, #120]	; (8008cf4 <_free_r+0x94>)
 8008c7c:	9801      	ldr	r0, [sp, #4]
 8008c7e:	6813      	ldr	r3, [r2, #0]
 8008c80:	b933      	cbnz	r3, 8008c90 <_free_r+0x30>
 8008c82:	6063      	str	r3, [r4, #4]
 8008c84:	6014      	str	r4, [r2, #0]
 8008c86:	b003      	add	sp, #12
 8008c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c8c:	f000 b8da 	b.w	8008e44 <__malloc_unlock>
 8008c90:	42a3      	cmp	r3, r4
 8008c92:	d908      	bls.n	8008ca6 <_free_r+0x46>
 8008c94:	6825      	ldr	r5, [r4, #0]
 8008c96:	1961      	adds	r1, r4, r5
 8008c98:	428b      	cmp	r3, r1
 8008c9a:	bf01      	itttt	eq
 8008c9c:	6819      	ldreq	r1, [r3, #0]
 8008c9e:	685b      	ldreq	r3, [r3, #4]
 8008ca0:	1949      	addeq	r1, r1, r5
 8008ca2:	6021      	streq	r1, [r4, #0]
 8008ca4:	e7ed      	b.n	8008c82 <_free_r+0x22>
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	b10b      	cbz	r3, 8008cb0 <_free_r+0x50>
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	d9fa      	bls.n	8008ca6 <_free_r+0x46>
 8008cb0:	6811      	ldr	r1, [r2, #0]
 8008cb2:	1855      	adds	r5, r2, r1
 8008cb4:	42a5      	cmp	r5, r4
 8008cb6:	d10b      	bne.n	8008cd0 <_free_r+0x70>
 8008cb8:	6824      	ldr	r4, [r4, #0]
 8008cba:	4421      	add	r1, r4
 8008cbc:	1854      	adds	r4, r2, r1
 8008cbe:	42a3      	cmp	r3, r4
 8008cc0:	6011      	str	r1, [r2, #0]
 8008cc2:	d1e0      	bne.n	8008c86 <_free_r+0x26>
 8008cc4:	681c      	ldr	r4, [r3, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	6053      	str	r3, [r2, #4]
 8008cca:	440c      	add	r4, r1
 8008ccc:	6014      	str	r4, [r2, #0]
 8008cce:	e7da      	b.n	8008c86 <_free_r+0x26>
 8008cd0:	d902      	bls.n	8008cd8 <_free_r+0x78>
 8008cd2:	230c      	movs	r3, #12
 8008cd4:	6003      	str	r3, [r0, #0]
 8008cd6:	e7d6      	b.n	8008c86 <_free_r+0x26>
 8008cd8:	6825      	ldr	r5, [r4, #0]
 8008cda:	1961      	adds	r1, r4, r5
 8008cdc:	428b      	cmp	r3, r1
 8008cde:	bf04      	itt	eq
 8008ce0:	6819      	ldreq	r1, [r3, #0]
 8008ce2:	685b      	ldreq	r3, [r3, #4]
 8008ce4:	6063      	str	r3, [r4, #4]
 8008ce6:	bf04      	itt	eq
 8008ce8:	1949      	addeq	r1, r1, r5
 8008cea:	6021      	streq	r1, [r4, #0]
 8008cec:	6054      	str	r4, [r2, #4]
 8008cee:	e7ca      	b.n	8008c86 <_free_r+0x26>
 8008cf0:	b003      	add	sp, #12
 8008cf2:	bd30      	pop	{r4, r5, pc}
 8008cf4:	200071e4 	.word	0x200071e4

08008cf8 <sbrk_aligned>:
 8008cf8:	b570      	push	{r4, r5, r6, lr}
 8008cfa:	4e0e      	ldr	r6, [pc, #56]	; (8008d34 <sbrk_aligned+0x3c>)
 8008cfc:	460c      	mov	r4, r1
 8008cfe:	6831      	ldr	r1, [r6, #0]
 8008d00:	4605      	mov	r5, r0
 8008d02:	b911      	cbnz	r1, 8008d0a <sbrk_aligned+0x12>
 8008d04:	f000 fba6 	bl	8009454 <_sbrk_r>
 8008d08:	6030      	str	r0, [r6, #0]
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	f000 fba1 	bl	8009454 <_sbrk_r>
 8008d12:	1c43      	adds	r3, r0, #1
 8008d14:	d00a      	beq.n	8008d2c <sbrk_aligned+0x34>
 8008d16:	1cc4      	adds	r4, r0, #3
 8008d18:	f024 0403 	bic.w	r4, r4, #3
 8008d1c:	42a0      	cmp	r0, r4
 8008d1e:	d007      	beq.n	8008d30 <sbrk_aligned+0x38>
 8008d20:	1a21      	subs	r1, r4, r0
 8008d22:	4628      	mov	r0, r5
 8008d24:	f000 fb96 	bl	8009454 <_sbrk_r>
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d101      	bne.n	8008d30 <sbrk_aligned+0x38>
 8008d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8008d30:	4620      	mov	r0, r4
 8008d32:	bd70      	pop	{r4, r5, r6, pc}
 8008d34:	200071e8 	.word	0x200071e8

08008d38 <_malloc_r>:
 8008d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d3c:	1ccd      	adds	r5, r1, #3
 8008d3e:	f025 0503 	bic.w	r5, r5, #3
 8008d42:	3508      	adds	r5, #8
 8008d44:	2d0c      	cmp	r5, #12
 8008d46:	bf38      	it	cc
 8008d48:	250c      	movcc	r5, #12
 8008d4a:	2d00      	cmp	r5, #0
 8008d4c:	4607      	mov	r7, r0
 8008d4e:	db01      	blt.n	8008d54 <_malloc_r+0x1c>
 8008d50:	42a9      	cmp	r1, r5
 8008d52:	d905      	bls.n	8008d60 <_malloc_r+0x28>
 8008d54:	230c      	movs	r3, #12
 8008d56:	603b      	str	r3, [r7, #0]
 8008d58:	2600      	movs	r6, #0
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e34 <_malloc_r+0xfc>
 8008d64:	f000 f868 	bl	8008e38 <__malloc_lock>
 8008d68:	f8d8 3000 	ldr.w	r3, [r8]
 8008d6c:	461c      	mov	r4, r3
 8008d6e:	bb5c      	cbnz	r4, 8008dc8 <_malloc_r+0x90>
 8008d70:	4629      	mov	r1, r5
 8008d72:	4638      	mov	r0, r7
 8008d74:	f7ff ffc0 	bl	8008cf8 <sbrk_aligned>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	d155      	bne.n	8008e2a <_malloc_r+0xf2>
 8008d7e:	f8d8 4000 	ldr.w	r4, [r8]
 8008d82:	4626      	mov	r6, r4
 8008d84:	2e00      	cmp	r6, #0
 8008d86:	d145      	bne.n	8008e14 <_malloc_r+0xdc>
 8008d88:	2c00      	cmp	r4, #0
 8008d8a:	d048      	beq.n	8008e1e <_malloc_r+0xe6>
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	4631      	mov	r1, r6
 8008d90:	4638      	mov	r0, r7
 8008d92:	eb04 0903 	add.w	r9, r4, r3
 8008d96:	f000 fb5d 	bl	8009454 <_sbrk_r>
 8008d9a:	4581      	cmp	r9, r0
 8008d9c:	d13f      	bne.n	8008e1e <_malloc_r+0xe6>
 8008d9e:	6821      	ldr	r1, [r4, #0]
 8008da0:	1a6d      	subs	r5, r5, r1
 8008da2:	4629      	mov	r1, r5
 8008da4:	4638      	mov	r0, r7
 8008da6:	f7ff ffa7 	bl	8008cf8 <sbrk_aligned>
 8008daa:	3001      	adds	r0, #1
 8008dac:	d037      	beq.n	8008e1e <_malloc_r+0xe6>
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	442b      	add	r3, r5
 8008db2:	6023      	str	r3, [r4, #0]
 8008db4:	f8d8 3000 	ldr.w	r3, [r8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d038      	beq.n	8008e2e <_malloc_r+0xf6>
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	42a2      	cmp	r2, r4
 8008dc0:	d12b      	bne.n	8008e1a <_malloc_r+0xe2>
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	605a      	str	r2, [r3, #4]
 8008dc6:	e00f      	b.n	8008de8 <_malloc_r+0xb0>
 8008dc8:	6822      	ldr	r2, [r4, #0]
 8008dca:	1b52      	subs	r2, r2, r5
 8008dcc:	d41f      	bmi.n	8008e0e <_malloc_r+0xd6>
 8008dce:	2a0b      	cmp	r2, #11
 8008dd0:	d917      	bls.n	8008e02 <_malloc_r+0xca>
 8008dd2:	1961      	adds	r1, r4, r5
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	6025      	str	r5, [r4, #0]
 8008dd8:	bf18      	it	ne
 8008dda:	6059      	strne	r1, [r3, #4]
 8008ddc:	6863      	ldr	r3, [r4, #4]
 8008dde:	bf08      	it	eq
 8008de0:	f8c8 1000 	streq.w	r1, [r8]
 8008de4:	5162      	str	r2, [r4, r5]
 8008de6:	604b      	str	r3, [r1, #4]
 8008de8:	4638      	mov	r0, r7
 8008dea:	f104 060b 	add.w	r6, r4, #11
 8008dee:	f000 f829 	bl	8008e44 <__malloc_unlock>
 8008df2:	f026 0607 	bic.w	r6, r6, #7
 8008df6:	1d23      	adds	r3, r4, #4
 8008df8:	1af2      	subs	r2, r6, r3
 8008dfa:	d0ae      	beq.n	8008d5a <_malloc_r+0x22>
 8008dfc:	1b9b      	subs	r3, r3, r6
 8008dfe:	50a3      	str	r3, [r4, r2]
 8008e00:	e7ab      	b.n	8008d5a <_malloc_r+0x22>
 8008e02:	42a3      	cmp	r3, r4
 8008e04:	6862      	ldr	r2, [r4, #4]
 8008e06:	d1dd      	bne.n	8008dc4 <_malloc_r+0x8c>
 8008e08:	f8c8 2000 	str.w	r2, [r8]
 8008e0c:	e7ec      	b.n	8008de8 <_malloc_r+0xb0>
 8008e0e:	4623      	mov	r3, r4
 8008e10:	6864      	ldr	r4, [r4, #4]
 8008e12:	e7ac      	b.n	8008d6e <_malloc_r+0x36>
 8008e14:	4634      	mov	r4, r6
 8008e16:	6876      	ldr	r6, [r6, #4]
 8008e18:	e7b4      	b.n	8008d84 <_malloc_r+0x4c>
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	e7cc      	b.n	8008db8 <_malloc_r+0x80>
 8008e1e:	230c      	movs	r3, #12
 8008e20:	603b      	str	r3, [r7, #0]
 8008e22:	4638      	mov	r0, r7
 8008e24:	f000 f80e 	bl	8008e44 <__malloc_unlock>
 8008e28:	e797      	b.n	8008d5a <_malloc_r+0x22>
 8008e2a:	6025      	str	r5, [r4, #0]
 8008e2c:	e7dc      	b.n	8008de8 <_malloc_r+0xb0>
 8008e2e:	605b      	str	r3, [r3, #4]
 8008e30:	deff      	udf	#255	; 0xff
 8008e32:	bf00      	nop
 8008e34:	200071e4 	.word	0x200071e4

08008e38 <__malloc_lock>:
 8008e38:	4801      	ldr	r0, [pc, #4]	; (8008e40 <__malloc_lock+0x8>)
 8008e3a:	f7ff bf01 	b.w	8008c40 <__retarget_lock_acquire_recursive>
 8008e3e:	bf00      	nop
 8008e40:	200071e0 	.word	0x200071e0

08008e44 <__malloc_unlock>:
 8008e44:	4801      	ldr	r0, [pc, #4]	; (8008e4c <__malloc_unlock+0x8>)
 8008e46:	f7ff befc 	b.w	8008c42 <__retarget_lock_release_recursive>
 8008e4a:	bf00      	nop
 8008e4c:	200071e0 	.word	0x200071e0

08008e50 <__ssputs_r>:
 8008e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e54:	688e      	ldr	r6, [r1, #8]
 8008e56:	461f      	mov	r7, r3
 8008e58:	42be      	cmp	r6, r7
 8008e5a:	680b      	ldr	r3, [r1, #0]
 8008e5c:	4682      	mov	sl, r0
 8008e5e:	460c      	mov	r4, r1
 8008e60:	4690      	mov	r8, r2
 8008e62:	d82c      	bhi.n	8008ebe <__ssputs_r+0x6e>
 8008e64:	898a      	ldrh	r2, [r1, #12]
 8008e66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e6a:	d026      	beq.n	8008eba <__ssputs_r+0x6a>
 8008e6c:	6965      	ldr	r5, [r4, #20]
 8008e6e:	6909      	ldr	r1, [r1, #16]
 8008e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e74:	eba3 0901 	sub.w	r9, r3, r1
 8008e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e7c:	1c7b      	adds	r3, r7, #1
 8008e7e:	444b      	add	r3, r9
 8008e80:	106d      	asrs	r5, r5, #1
 8008e82:	429d      	cmp	r5, r3
 8008e84:	bf38      	it	cc
 8008e86:	461d      	movcc	r5, r3
 8008e88:	0553      	lsls	r3, r2, #21
 8008e8a:	d527      	bpl.n	8008edc <__ssputs_r+0x8c>
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	f7ff ff53 	bl	8008d38 <_malloc_r>
 8008e92:	4606      	mov	r6, r0
 8008e94:	b360      	cbz	r0, 8008ef0 <__ssputs_r+0xa0>
 8008e96:	6921      	ldr	r1, [r4, #16]
 8008e98:	464a      	mov	r2, r9
 8008e9a:	f7ff fed3 	bl	8008c44 <memcpy>
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea8:	81a3      	strh	r3, [r4, #12]
 8008eaa:	6126      	str	r6, [r4, #16]
 8008eac:	6165      	str	r5, [r4, #20]
 8008eae:	444e      	add	r6, r9
 8008eb0:	eba5 0509 	sub.w	r5, r5, r9
 8008eb4:	6026      	str	r6, [r4, #0]
 8008eb6:	60a5      	str	r5, [r4, #8]
 8008eb8:	463e      	mov	r6, r7
 8008eba:	42be      	cmp	r6, r7
 8008ebc:	d900      	bls.n	8008ec0 <__ssputs_r+0x70>
 8008ebe:	463e      	mov	r6, r7
 8008ec0:	6820      	ldr	r0, [r4, #0]
 8008ec2:	4632      	mov	r2, r6
 8008ec4:	4641      	mov	r1, r8
 8008ec6:	f000 faab 	bl	8009420 <memmove>
 8008eca:	68a3      	ldr	r3, [r4, #8]
 8008ecc:	1b9b      	subs	r3, r3, r6
 8008ece:	60a3      	str	r3, [r4, #8]
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	4433      	add	r3, r6
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008edc:	462a      	mov	r2, r5
 8008ede:	f000 fac9 	bl	8009474 <_realloc_r>
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d1e0      	bne.n	8008eaa <__ssputs_r+0x5a>
 8008ee8:	6921      	ldr	r1, [r4, #16]
 8008eea:	4650      	mov	r0, sl
 8008eec:	f7ff feb8 	bl	8008c60 <_free_r>
 8008ef0:	230c      	movs	r3, #12
 8008ef2:	f8ca 3000 	str.w	r3, [sl]
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008efc:	81a3      	strh	r3, [r4, #12]
 8008efe:	f04f 30ff 	mov.w	r0, #4294967295
 8008f02:	e7e9      	b.n	8008ed8 <__ssputs_r+0x88>

08008f04 <_svfiprintf_r>:
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	4698      	mov	r8, r3
 8008f0a:	898b      	ldrh	r3, [r1, #12]
 8008f0c:	061b      	lsls	r3, r3, #24
 8008f0e:	b09d      	sub	sp, #116	; 0x74
 8008f10:	4607      	mov	r7, r0
 8008f12:	460d      	mov	r5, r1
 8008f14:	4614      	mov	r4, r2
 8008f16:	d50e      	bpl.n	8008f36 <_svfiprintf_r+0x32>
 8008f18:	690b      	ldr	r3, [r1, #16]
 8008f1a:	b963      	cbnz	r3, 8008f36 <_svfiprintf_r+0x32>
 8008f1c:	2140      	movs	r1, #64	; 0x40
 8008f1e:	f7ff ff0b 	bl	8008d38 <_malloc_r>
 8008f22:	6028      	str	r0, [r5, #0]
 8008f24:	6128      	str	r0, [r5, #16]
 8008f26:	b920      	cbnz	r0, 8008f32 <_svfiprintf_r+0x2e>
 8008f28:	230c      	movs	r3, #12
 8008f2a:	603b      	str	r3, [r7, #0]
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f30:	e0d0      	b.n	80090d4 <_svfiprintf_r+0x1d0>
 8008f32:	2340      	movs	r3, #64	; 0x40
 8008f34:	616b      	str	r3, [r5, #20]
 8008f36:	2300      	movs	r3, #0
 8008f38:	9309      	str	r3, [sp, #36]	; 0x24
 8008f3a:	2320      	movs	r3, #32
 8008f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f44:	2330      	movs	r3, #48	; 0x30
 8008f46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80090ec <_svfiprintf_r+0x1e8>
 8008f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f4e:	f04f 0901 	mov.w	r9, #1
 8008f52:	4623      	mov	r3, r4
 8008f54:	469a      	mov	sl, r3
 8008f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f5a:	b10a      	cbz	r2, 8008f60 <_svfiprintf_r+0x5c>
 8008f5c:	2a25      	cmp	r2, #37	; 0x25
 8008f5e:	d1f9      	bne.n	8008f54 <_svfiprintf_r+0x50>
 8008f60:	ebba 0b04 	subs.w	fp, sl, r4
 8008f64:	d00b      	beq.n	8008f7e <_svfiprintf_r+0x7a>
 8008f66:	465b      	mov	r3, fp
 8008f68:	4622      	mov	r2, r4
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f7ff ff6f 	bl	8008e50 <__ssputs_r>
 8008f72:	3001      	adds	r0, #1
 8008f74:	f000 80a9 	beq.w	80090ca <_svfiprintf_r+0x1c6>
 8008f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f7a:	445a      	add	r2, fp
 8008f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 80a1 	beq.w	80090ca <_svfiprintf_r+0x1c6>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f92:	f10a 0a01 	add.w	sl, sl, #1
 8008f96:	9304      	str	r3, [sp, #16]
 8008f98:	9307      	str	r3, [sp, #28]
 8008f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8008fa0:	4654      	mov	r4, sl
 8008fa2:	2205      	movs	r2, #5
 8008fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa8:	4850      	ldr	r0, [pc, #320]	; (80090ec <_svfiprintf_r+0x1e8>)
 8008faa:	f7f7 f919 	bl	80001e0 <memchr>
 8008fae:	9a04      	ldr	r2, [sp, #16]
 8008fb0:	b9d8      	cbnz	r0, 8008fea <_svfiprintf_r+0xe6>
 8008fb2:	06d0      	lsls	r0, r2, #27
 8008fb4:	bf44      	itt	mi
 8008fb6:	2320      	movmi	r3, #32
 8008fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fbc:	0711      	lsls	r1, r2, #28
 8008fbe:	bf44      	itt	mi
 8008fc0:	232b      	movmi	r3, #43	; 0x2b
 8008fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8008fca:	2b2a      	cmp	r3, #42	; 0x2a
 8008fcc:	d015      	beq.n	8008ffa <_svfiprintf_r+0xf6>
 8008fce:	9a07      	ldr	r2, [sp, #28]
 8008fd0:	4654      	mov	r4, sl
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	f04f 0c0a 	mov.w	ip, #10
 8008fd8:	4621      	mov	r1, r4
 8008fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fde:	3b30      	subs	r3, #48	; 0x30
 8008fe0:	2b09      	cmp	r3, #9
 8008fe2:	d94d      	bls.n	8009080 <_svfiprintf_r+0x17c>
 8008fe4:	b1b0      	cbz	r0, 8009014 <_svfiprintf_r+0x110>
 8008fe6:	9207      	str	r2, [sp, #28]
 8008fe8:	e014      	b.n	8009014 <_svfiprintf_r+0x110>
 8008fea:	eba0 0308 	sub.w	r3, r0, r8
 8008fee:	fa09 f303 	lsl.w	r3, r9, r3
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	9304      	str	r3, [sp, #16]
 8008ff6:	46a2      	mov	sl, r4
 8008ff8:	e7d2      	b.n	8008fa0 <_svfiprintf_r+0x9c>
 8008ffa:	9b03      	ldr	r3, [sp, #12]
 8008ffc:	1d19      	adds	r1, r3, #4
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	9103      	str	r1, [sp, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	bfbb      	ittet	lt
 8009006:	425b      	neglt	r3, r3
 8009008:	f042 0202 	orrlt.w	r2, r2, #2
 800900c:	9307      	strge	r3, [sp, #28]
 800900e:	9307      	strlt	r3, [sp, #28]
 8009010:	bfb8      	it	lt
 8009012:	9204      	strlt	r2, [sp, #16]
 8009014:	7823      	ldrb	r3, [r4, #0]
 8009016:	2b2e      	cmp	r3, #46	; 0x2e
 8009018:	d10c      	bne.n	8009034 <_svfiprintf_r+0x130>
 800901a:	7863      	ldrb	r3, [r4, #1]
 800901c:	2b2a      	cmp	r3, #42	; 0x2a
 800901e:	d134      	bne.n	800908a <_svfiprintf_r+0x186>
 8009020:	9b03      	ldr	r3, [sp, #12]
 8009022:	1d1a      	adds	r2, r3, #4
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	9203      	str	r2, [sp, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	bfb8      	it	lt
 800902c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009030:	3402      	adds	r4, #2
 8009032:	9305      	str	r3, [sp, #20]
 8009034:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80090fc <_svfiprintf_r+0x1f8>
 8009038:	7821      	ldrb	r1, [r4, #0]
 800903a:	2203      	movs	r2, #3
 800903c:	4650      	mov	r0, sl
 800903e:	f7f7 f8cf 	bl	80001e0 <memchr>
 8009042:	b138      	cbz	r0, 8009054 <_svfiprintf_r+0x150>
 8009044:	9b04      	ldr	r3, [sp, #16]
 8009046:	eba0 000a 	sub.w	r0, r0, sl
 800904a:	2240      	movs	r2, #64	; 0x40
 800904c:	4082      	lsls	r2, r0
 800904e:	4313      	orrs	r3, r2
 8009050:	3401      	adds	r4, #1
 8009052:	9304      	str	r3, [sp, #16]
 8009054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009058:	4825      	ldr	r0, [pc, #148]	; (80090f0 <_svfiprintf_r+0x1ec>)
 800905a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800905e:	2206      	movs	r2, #6
 8009060:	f7f7 f8be 	bl	80001e0 <memchr>
 8009064:	2800      	cmp	r0, #0
 8009066:	d038      	beq.n	80090da <_svfiprintf_r+0x1d6>
 8009068:	4b22      	ldr	r3, [pc, #136]	; (80090f4 <_svfiprintf_r+0x1f0>)
 800906a:	bb1b      	cbnz	r3, 80090b4 <_svfiprintf_r+0x1b0>
 800906c:	9b03      	ldr	r3, [sp, #12]
 800906e:	3307      	adds	r3, #7
 8009070:	f023 0307 	bic.w	r3, r3, #7
 8009074:	3308      	adds	r3, #8
 8009076:	9303      	str	r3, [sp, #12]
 8009078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800907a:	4433      	add	r3, r6
 800907c:	9309      	str	r3, [sp, #36]	; 0x24
 800907e:	e768      	b.n	8008f52 <_svfiprintf_r+0x4e>
 8009080:	fb0c 3202 	mla	r2, ip, r2, r3
 8009084:	460c      	mov	r4, r1
 8009086:	2001      	movs	r0, #1
 8009088:	e7a6      	b.n	8008fd8 <_svfiprintf_r+0xd4>
 800908a:	2300      	movs	r3, #0
 800908c:	3401      	adds	r4, #1
 800908e:	9305      	str	r3, [sp, #20]
 8009090:	4619      	mov	r1, r3
 8009092:	f04f 0c0a 	mov.w	ip, #10
 8009096:	4620      	mov	r0, r4
 8009098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800909c:	3a30      	subs	r2, #48	; 0x30
 800909e:	2a09      	cmp	r2, #9
 80090a0:	d903      	bls.n	80090aa <_svfiprintf_r+0x1a6>
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0c6      	beq.n	8009034 <_svfiprintf_r+0x130>
 80090a6:	9105      	str	r1, [sp, #20]
 80090a8:	e7c4      	b.n	8009034 <_svfiprintf_r+0x130>
 80090aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80090ae:	4604      	mov	r4, r0
 80090b0:	2301      	movs	r3, #1
 80090b2:	e7f0      	b.n	8009096 <_svfiprintf_r+0x192>
 80090b4:	ab03      	add	r3, sp, #12
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	462a      	mov	r2, r5
 80090ba:	4b0f      	ldr	r3, [pc, #60]	; (80090f8 <_svfiprintf_r+0x1f4>)
 80090bc:	a904      	add	r1, sp, #16
 80090be:	4638      	mov	r0, r7
 80090c0:	f3af 8000 	nop.w
 80090c4:	1c42      	adds	r2, r0, #1
 80090c6:	4606      	mov	r6, r0
 80090c8:	d1d6      	bne.n	8009078 <_svfiprintf_r+0x174>
 80090ca:	89ab      	ldrh	r3, [r5, #12]
 80090cc:	065b      	lsls	r3, r3, #25
 80090ce:	f53f af2d 	bmi.w	8008f2c <_svfiprintf_r+0x28>
 80090d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090d4:	b01d      	add	sp, #116	; 0x74
 80090d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090da:	ab03      	add	r3, sp, #12
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	462a      	mov	r2, r5
 80090e0:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <_svfiprintf_r+0x1f4>)
 80090e2:	a904      	add	r1, sp, #16
 80090e4:	4638      	mov	r0, r7
 80090e6:	f000 f879 	bl	80091dc <_printf_i>
 80090ea:	e7eb      	b.n	80090c4 <_svfiprintf_r+0x1c0>
 80090ec:	080096c0 	.word	0x080096c0
 80090f0:	080096ca 	.word	0x080096ca
 80090f4:	00000000 	.word	0x00000000
 80090f8:	08008e51 	.word	0x08008e51
 80090fc:	080096c6 	.word	0x080096c6

08009100 <_printf_common>:
 8009100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009104:	4616      	mov	r6, r2
 8009106:	4699      	mov	r9, r3
 8009108:	688a      	ldr	r2, [r1, #8]
 800910a:	690b      	ldr	r3, [r1, #16]
 800910c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009110:	4293      	cmp	r3, r2
 8009112:	bfb8      	it	lt
 8009114:	4613      	movlt	r3, r2
 8009116:	6033      	str	r3, [r6, #0]
 8009118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800911c:	4607      	mov	r7, r0
 800911e:	460c      	mov	r4, r1
 8009120:	b10a      	cbz	r2, 8009126 <_printf_common+0x26>
 8009122:	3301      	adds	r3, #1
 8009124:	6033      	str	r3, [r6, #0]
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	0699      	lsls	r1, r3, #26
 800912a:	bf42      	ittt	mi
 800912c:	6833      	ldrmi	r3, [r6, #0]
 800912e:	3302      	addmi	r3, #2
 8009130:	6033      	strmi	r3, [r6, #0]
 8009132:	6825      	ldr	r5, [r4, #0]
 8009134:	f015 0506 	ands.w	r5, r5, #6
 8009138:	d106      	bne.n	8009148 <_printf_common+0x48>
 800913a:	f104 0a19 	add.w	sl, r4, #25
 800913e:	68e3      	ldr	r3, [r4, #12]
 8009140:	6832      	ldr	r2, [r6, #0]
 8009142:	1a9b      	subs	r3, r3, r2
 8009144:	42ab      	cmp	r3, r5
 8009146:	dc26      	bgt.n	8009196 <_printf_common+0x96>
 8009148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800914c:	1e13      	subs	r3, r2, #0
 800914e:	6822      	ldr	r2, [r4, #0]
 8009150:	bf18      	it	ne
 8009152:	2301      	movne	r3, #1
 8009154:	0692      	lsls	r2, r2, #26
 8009156:	d42b      	bmi.n	80091b0 <_printf_common+0xb0>
 8009158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800915c:	4649      	mov	r1, r9
 800915e:	4638      	mov	r0, r7
 8009160:	47c0      	blx	r8
 8009162:	3001      	adds	r0, #1
 8009164:	d01e      	beq.n	80091a4 <_printf_common+0xa4>
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	6922      	ldr	r2, [r4, #16]
 800916a:	f003 0306 	and.w	r3, r3, #6
 800916e:	2b04      	cmp	r3, #4
 8009170:	bf02      	ittt	eq
 8009172:	68e5      	ldreq	r5, [r4, #12]
 8009174:	6833      	ldreq	r3, [r6, #0]
 8009176:	1aed      	subeq	r5, r5, r3
 8009178:	68a3      	ldr	r3, [r4, #8]
 800917a:	bf0c      	ite	eq
 800917c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009180:	2500      	movne	r5, #0
 8009182:	4293      	cmp	r3, r2
 8009184:	bfc4      	itt	gt
 8009186:	1a9b      	subgt	r3, r3, r2
 8009188:	18ed      	addgt	r5, r5, r3
 800918a:	2600      	movs	r6, #0
 800918c:	341a      	adds	r4, #26
 800918e:	42b5      	cmp	r5, r6
 8009190:	d11a      	bne.n	80091c8 <_printf_common+0xc8>
 8009192:	2000      	movs	r0, #0
 8009194:	e008      	b.n	80091a8 <_printf_common+0xa8>
 8009196:	2301      	movs	r3, #1
 8009198:	4652      	mov	r2, sl
 800919a:	4649      	mov	r1, r9
 800919c:	4638      	mov	r0, r7
 800919e:	47c0      	blx	r8
 80091a0:	3001      	adds	r0, #1
 80091a2:	d103      	bne.n	80091ac <_printf_common+0xac>
 80091a4:	f04f 30ff 	mov.w	r0, #4294967295
 80091a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ac:	3501      	adds	r5, #1
 80091ae:	e7c6      	b.n	800913e <_printf_common+0x3e>
 80091b0:	18e1      	adds	r1, r4, r3
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	2030      	movs	r0, #48	; 0x30
 80091b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091ba:	4422      	add	r2, r4
 80091bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091c4:	3302      	adds	r3, #2
 80091c6:	e7c7      	b.n	8009158 <_printf_common+0x58>
 80091c8:	2301      	movs	r3, #1
 80091ca:	4622      	mov	r2, r4
 80091cc:	4649      	mov	r1, r9
 80091ce:	4638      	mov	r0, r7
 80091d0:	47c0      	blx	r8
 80091d2:	3001      	adds	r0, #1
 80091d4:	d0e6      	beq.n	80091a4 <_printf_common+0xa4>
 80091d6:	3601      	adds	r6, #1
 80091d8:	e7d9      	b.n	800918e <_printf_common+0x8e>
	...

080091dc <_printf_i>:
 80091dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091e0:	7e0f      	ldrb	r7, [r1, #24]
 80091e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091e4:	2f78      	cmp	r7, #120	; 0x78
 80091e6:	4691      	mov	r9, r2
 80091e8:	4680      	mov	r8, r0
 80091ea:	460c      	mov	r4, r1
 80091ec:	469a      	mov	sl, r3
 80091ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091f2:	d807      	bhi.n	8009204 <_printf_i+0x28>
 80091f4:	2f62      	cmp	r7, #98	; 0x62
 80091f6:	d80a      	bhi.n	800920e <_printf_i+0x32>
 80091f8:	2f00      	cmp	r7, #0
 80091fa:	f000 80d4 	beq.w	80093a6 <_printf_i+0x1ca>
 80091fe:	2f58      	cmp	r7, #88	; 0x58
 8009200:	f000 80c0 	beq.w	8009384 <_printf_i+0x1a8>
 8009204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800920c:	e03a      	b.n	8009284 <_printf_i+0xa8>
 800920e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009212:	2b15      	cmp	r3, #21
 8009214:	d8f6      	bhi.n	8009204 <_printf_i+0x28>
 8009216:	a101      	add	r1, pc, #4	; (adr r1, 800921c <_printf_i+0x40>)
 8009218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800921c:	08009275 	.word	0x08009275
 8009220:	08009289 	.word	0x08009289
 8009224:	08009205 	.word	0x08009205
 8009228:	08009205 	.word	0x08009205
 800922c:	08009205 	.word	0x08009205
 8009230:	08009205 	.word	0x08009205
 8009234:	08009289 	.word	0x08009289
 8009238:	08009205 	.word	0x08009205
 800923c:	08009205 	.word	0x08009205
 8009240:	08009205 	.word	0x08009205
 8009244:	08009205 	.word	0x08009205
 8009248:	0800938d 	.word	0x0800938d
 800924c:	080092b5 	.word	0x080092b5
 8009250:	08009347 	.word	0x08009347
 8009254:	08009205 	.word	0x08009205
 8009258:	08009205 	.word	0x08009205
 800925c:	080093af 	.word	0x080093af
 8009260:	08009205 	.word	0x08009205
 8009264:	080092b5 	.word	0x080092b5
 8009268:	08009205 	.word	0x08009205
 800926c:	08009205 	.word	0x08009205
 8009270:	0800934f 	.word	0x0800934f
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	1d1a      	adds	r2, r3, #4
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	602a      	str	r2, [r5, #0]
 800927c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009284:	2301      	movs	r3, #1
 8009286:	e09f      	b.n	80093c8 <_printf_i+0x1ec>
 8009288:	6820      	ldr	r0, [r4, #0]
 800928a:	682b      	ldr	r3, [r5, #0]
 800928c:	0607      	lsls	r7, r0, #24
 800928e:	f103 0104 	add.w	r1, r3, #4
 8009292:	6029      	str	r1, [r5, #0]
 8009294:	d501      	bpl.n	800929a <_printf_i+0xbe>
 8009296:	681e      	ldr	r6, [r3, #0]
 8009298:	e003      	b.n	80092a2 <_printf_i+0xc6>
 800929a:	0646      	lsls	r6, r0, #25
 800929c:	d5fb      	bpl.n	8009296 <_printf_i+0xba>
 800929e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80092a2:	2e00      	cmp	r6, #0
 80092a4:	da03      	bge.n	80092ae <_printf_i+0xd2>
 80092a6:	232d      	movs	r3, #45	; 0x2d
 80092a8:	4276      	negs	r6, r6
 80092aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ae:	485a      	ldr	r0, [pc, #360]	; (8009418 <_printf_i+0x23c>)
 80092b0:	230a      	movs	r3, #10
 80092b2:	e012      	b.n	80092da <_printf_i+0xfe>
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	6820      	ldr	r0, [r4, #0]
 80092b8:	1d19      	adds	r1, r3, #4
 80092ba:	6029      	str	r1, [r5, #0]
 80092bc:	0605      	lsls	r5, r0, #24
 80092be:	d501      	bpl.n	80092c4 <_printf_i+0xe8>
 80092c0:	681e      	ldr	r6, [r3, #0]
 80092c2:	e002      	b.n	80092ca <_printf_i+0xee>
 80092c4:	0641      	lsls	r1, r0, #25
 80092c6:	d5fb      	bpl.n	80092c0 <_printf_i+0xe4>
 80092c8:	881e      	ldrh	r6, [r3, #0]
 80092ca:	4853      	ldr	r0, [pc, #332]	; (8009418 <_printf_i+0x23c>)
 80092cc:	2f6f      	cmp	r7, #111	; 0x6f
 80092ce:	bf0c      	ite	eq
 80092d0:	2308      	moveq	r3, #8
 80092d2:	230a      	movne	r3, #10
 80092d4:	2100      	movs	r1, #0
 80092d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092da:	6865      	ldr	r5, [r4, #4]
 80092dc:	60a5      	str	r5, [r4, #8]
 80092de:	2d00      	cmp	r5, #0
 80092e0:	bfa2      	ittt	ge
 80092e2:	6821      	ldrge	r1, [r4, #0]
 80092e4:	f021 0104 	bicge.w	r1, r1, #4
 80092e8:	6021      	strge	r1, [r4, #0]
 80092ea:	b90e      	cbnz	r6, 80092f0 <_printf_i+0x114>
 80092ec:	2d00      	cmp	r5, #0
 80092ee:	d04b      	beq.n	8009388 <_printf_i+0x1ac>
 80092f0:	4615      	mov	r5, r2
 80092f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80092f6:	fb03 6711 	mls	r7, r3, r1, r6
 80092fa:	5dc7      	ldrb	r7, [r0, r7]
 80092fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009300:	4637      	mov	r7, r6
 8009302:	42bb      	cmp	r3, r7
 8009304:	460e      	mov	r6, r1
 8009306:	d9f4      	bls.n	80092f2 <_printf_i+0x116>
 8009308:	2b08      	cmp	r3, #8
 800930a:	d10b      	bne.n	8009324 <_printf_i+0x148>
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	07de      	lsls	r6, r3, #31
 8009310:	d508      	bpl.n	8009324 <_printf_i+0x148>
 8009312:	6923      	ldr	r3, [r4, #16]
 8009314:	6861      	ldr	r1, [r4, #4]
 8009316:	4299      	cmp	r1, r3
 8009318:	bfde      	ittt	le
 800931a:	2330      	movle	r3, #48	; 0x30
 800931c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009320:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009324:	1b52      	subs	r2, r2, r5
 8009326:	6122      	str	r2, [r4, #16]
 8009328:	f8cd a000 	str.w	sl, [sp]
 800932c:	464b      	mov	r3, r9
 800932e:	aa03      	add	r2, sp, #12
 8009330:	4621      	mov	r1, r4
 8009332:	4640      	mov	r0, r8
 8009334:	f7ff fee4 	bl	8009100 <_printf_common>
 8009338:	3001      	adds	r0, #1
 800933a:	d14a      	bne.n	80093d2 <_printf_i+0x1f6>
 800933c:	f04f 30ff 	mov.w	r0, #4294967295
 8009340:	b004      	add	sp, #16
 8009342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	f043 0320 	orr.w	r3, r3, #32
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	4833      	ldr	r0, [pc, #204]	; (800941c <_printf_i+0x240>)
 8009350:	2778      	movs	r7, #120	; 0x78
 8009352:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	6829      	ldr	r1, [r5, #0]
 800935a:	061f      	lsls	r7, r3, #24
 800935c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009360:	d402      	bmi.n	8009368 <_printf_i+0x18c>
 8009362:	065f      	lsls	r7, r3, #25
 8009364:	bf48      	it	mi
 8009366:	b2b6      	uxthmi	r6, r6
 8009368:	07df      	lsls	r7, r3, #31
 800936a:	bf48      	it	mi
 800936c:	f043 0320 	orrmi.w	r3, r3, #32
 8009370:	6029      	str	r1, [r5, #0]
 8009372:	bf48      	it	mi
 8009374:	6023      	strmi	r3, [r4, #0]
 8009376:	b91e      	cbnz	r6, 8009380 <_printf_i+0x1a4>
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	f023 0320 	bic.w	r3, r3, #32
 800937e:	6023      	str	r3, [r4, #0]
 8009380:	2310      	movs	r3, #16
 8009382:	e7a7      	b.n	80092d4 <_printf_i+0xf8>
 8009384:	4824      	ldr	r0, [pc, #144]	; (8009418 <_printf_i+0x23c>)
 8009386:	e7e4      	b.n	8009352 <_printf_i+0x176>
 8009388:	4615      	mov	r5, r2
 800938a:	e7bd      	b.n	8009308 <_printf_i+0x12c>
 800938c:	682b      	ldr	r3, [r5, #0]
 800938e:	6826      	ldr	r6, [r4, #0]
 8009390:	6961      	ldr	r1, [r4, #20]
 8009392:	1d18      	adds	r0, r3, #4
 8009394:	6028      	str	r0, [r5, #0]
 8009396:	0635      	lsls	r5, r6, #24
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	d501      	bpl.n	80093a0 <_printf_i+0x1c4>
 800939c:	6019      	str	r1, [r3, #0]
 800939e:	e002      	b.n	80093a6 <_printf_i+0x1ca>
 80093a0:	0670      	lsls	r0, r6, #25
 80093a2:	d5fb      	bpl.n	800939c <_printf_i+0x1c0>
 80093a4:	8019      	strh	r1, [r3, #0]
 80093a6:	2300      	movs	r3, #0
 80093a8:	6123      	str	r3, [r4, #16]
 80093aa:	4615      	mov	r5, r2
 80093ac:	e7bc      	b.n	8009328 <_printf_i+0x14c>
 80093ae:	682b      	ldr	r3, [r5, #0]
 80093b0:	1d1a      	adds	r2, r3, #4
 80093b2:	602a      	str	r2, [r5, #0]
 80093b4:	681d      	ldr	r5, [r3, #0]
 80093b6:	6862      	ldr	r2, [r4, #4]
 80093b8:	2100      	movs	r1, #0
 80093ba:	4628      	mov	r0, r5
 80093bc:	f7f6 ff10 	bl	80001e0 <memchr>
 80093c0:	b108      	cbz	r0, 80093c6 <_printf_i+0x1ea>
 80093c2:	1b40      	subs	r0, r0, r5
 80093c4:	6060      	str	r0, [r4, #4]
 80093c6:	6863      	ldr	r3, [r4, #4]
 80093c8:	6123      	str	r3, [r4, #16]
 80093ca:	2300      	movs	r3, #0
 80093cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093d0:	e7aa      	b.n	8009328 <_printf_i+0x14c>
 80093d2:	6923      	ldr	r3, [r4, #16]
 80093d4:	462a      	mov	r2, r5
 80093d6:	4649      	mov	r1, r9
 80093d8:	4640      	mov	r0, r8
 80093da:	47d0      	blx	sl
 80093dc:	3001      	adds	r0, #1
 80093de:	d0ad      	beq.n	800933c <_printf_i+0x160>
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	079b      	lsls	r3, r3, #30
 80093e4:	d413      	bmi.n	800940e <_printf_i+0x232>
 80093e6:	68e0      	ldr	r0, [r4, #12]
 80093e8:	9b03      	ldr	r3, [sp, #12]
 80093ea:	4298      	cmp	r0, r3
 80093ec:	bfb8      	it	lt
 80093ee:	4618      	movlt	r0, r3
 80093f0:	e7a6      	b.n	8009340 <_printf_i+0x164>
 80093f2:	2301      	movs	r3, #1
 80093f4:	4632      	mov	r2, r6
 80093f6:	4649      	mov	r1, r9
 80093f8:	4640      	mov	r0, r8
 80093fa:	47d0      	blx	sl
 80093fc:	3001      	adds	r0, #1
 80093fe:	d09d      	beq.n	800933c <_printf_i+0x160>
 8009400:	3501      	adds	r5, #1
 8009402:	68e3      	ldr	r3, [r4, #12]
 8009404:	9903      	ldr	r1, [sp, #12]
 8009406:	1a5b      	subs	r3, r3, r1
 8009408:	42ab      	cmp	r3, r5
 800940a:	dcf2      	bgt.n	80093f2 <_printf_i+0x216>
 800940c:	e7eb      	b.n	80093e6 <_printf_i+0x20a>
 800940e:	2500      	movs	r5, #0
 8009410:	f104 0619 	add.w	r6, r4, #25
 8009414:	e7f5      	b.n	8009402 <_printf_i+0x226>
 8009416:	bf00      	nop
 8009418:	080096d1 	.word	0x080096d1
 800941c:	080096e2 	.word	0x080096e2

08009420 <memmove>:
 8009420:	4288      	cmp	r0, r1
 8009422:	b510      	push	{r4, lr}
 8009424:	eb01 0402 	add.w	r4, r1, r2
 8009428:	d902      	bls.n	8009430 <memmove+0x10>
 800942a:	4284      	cmp	r4, r0
 800942c:	4623      	mov	r3, r4
 800942e:	d807      	bhi.n	8009440 <memmove+0x20>
 8009430:	1e43      	subs	r3, r0, #1
 8009432:	42a1      	cmp	r1, r4
 8009434:	d008      	beq.n	8009448 <memmove+0x28>
 8009436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800943a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800943e:	e7f8      	b.n	8009432 <memmove+0x12>
 8009440:	4402      	add	r2, r0
 8009442:	4601      	mov	r1, r0
 8009444:	428a      	cmp	r2, r1
 8009446:	d100      	bne.n	800944a <memmove+0x2a>
 8009448:	bd10      	pop	{r4, pc}
 800944a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800944e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009452:	e7f7      	b.n	8009444 <memmove+0x24>

08009454 <_sbrk_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4d06      	ldr	r5, [pc, #24]	; (8009470 <_sbrk_r+0x1c>)
 8009458:	2300      	movs	r3, #0
 800945a:	4604      	mov	r4, r0
 800945c:	4608      	mov	r0, r1
 800945e:	602b      	str	r3, [r5, #0]
 8009460:	f7f8 fa0a 	bl	8001878 <_sbrk>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d102      	bne.n	800946e <_sbrk_r+0x1a>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	b103      	cbz	r3, 800946e <_sbrk_r+0x1a>
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	200071dc 	.word	0x200071dc

08009474 <_realloc_r>:
 8009474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009478:	4680      	mov	r8, r0
 800947a:	4614      	mov	r4, r2
 800947c:	460e      	mov	r6, r1
 800947e:	b921      	cbnz	r1, 800948a <_realloc_r+0x16>
 8009480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009484:	4611      	mov	r1, r2
 8009486:	f7ff bc57 	b.w	8008d38 <_malloc_r>
 800948a:	b92a      	cbnz	r2, 8009498 <_realloc_r+0x24>
 800948c:	f7ff fbe8 	bl	8008c60 <_free_r>
 8009490:	4625      	mov	r5, r4
 8009492:	4628      	mov	r0, r5
 8009494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009498:	f000 f81b 	bl	80094d2 <_malloc_usable_size_r>
 800949c:	4284      	cmp	r4, r0
 800949e:	4607      	mov	r7, r0
 80094a0:	d802      	bhi.n	80094a8 <_realloc_r+0x34>
 80094a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094a6:	d812      	bhi.n	80094ce <_realloc_r+0x5a>
 80094a8:	4621      	mov	r1, r4
 80094aa:	4640      	mov	r0, r8
 80094ac:	f7ff fc44 	bl	8008d38 <_malloc_r>
 80094b0:	4605      	mov	r5, r0
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d0ed      	beq.n	8009492 <_realloc_r+0x1e>
 80094b6:	42bc      	cmp	r4, r7
 80094b8:	4622      	mov	r2, r4
 80094ba:	4631      	mov	r1, r6
 80094bc:	bf28      	it	cs
 80094be:	463a      	movcs	r2, r7
 80094c0:	f7ff fbc0 	bl	8008c44 <memcpy>
 80094c4:	4631      	mov	r1, r6
 80094c6:	4640      	mov	r0, r8
 80094c8:	f7ff fbca 	bl	8008c60 <_free_r>
 80094cc:	e7e1      	b.n	8009492 <_realloc_r+0x1e>
 80094ce:	4635      	mov	r5, r6
 80094d0:	e7df      	b.n	8009492 <_realloc_r+0x1e>

080094d2 <_malloc_usable_size_r>:
 80094d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094d6:	1f18      	subs	r0, r3, #4
 80094d8:	2b00      	cmp	r3, #0
 80094da:	bfbc      	itt	lt
 80094dc:	580b      	ldrlt	r3, [r1, r0]
 80094de:	18c0      	addlt	r0, r0, r3
 80094e0:	4770      	bx	lr
	...

080094e4 <_init>:
 80094e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e6:	bf00      	nop
 80094e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ea:	bc08      	pop	{r3}
 80094ec:	469e      	mov	lr, r3
 80094ee:	4770      	bx	lr

080094f0 <_fini>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	bf00      	nop
 80094f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f6:	bc08      	pop	{r3}
 80094f8:	469e      	mov	lr, r3
 80094fa:	4770      	bx	lr
