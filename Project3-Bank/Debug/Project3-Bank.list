
Project3-Bank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a250  0800a250  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a250  0800a250  0001a250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a258  0800a258  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a258  0800a258  0001a258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a25c  0800a25c  0001a25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800a260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ea8  200000b0  0800a310  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006f58  0800a310  00026f58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d2f2  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003eda  00000000  00000000  0003d415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  000412f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012b5  00000000  00000000  00042b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a511  00000000  00000000  00043dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d51e  00000000  00000000  0006e2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe118  00000000  00000000  0008b7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a40  00000000  00000000  00189914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00190354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009dc0 	.word	0x08009dc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08009dc0 	.word	0x08009dc0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <updateDigit>:

int num[] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0X80, 0X90};
int seg[] = {0xF1, 0xF2, 0xF4, 0xF8};
int report_sent = 0;

int updateDigit(int spot, int num){
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	if (spot == 0){
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d107      	bne.n	800059c <updateDigit+0x20>
		return num / 1000;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	4a24      	ldr	r2, [pc, #144]	; (8000620 <updateDigit+0xa4>)
 8000590:	fb82 1203 	smull	r1, r2, r2, r3
 8000594:	1192      	asrs	r2, r2, #6
 8000596:	17db      	asrs	r3, r3, #31
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	e03a      	b.n	8000612 <updateDigit+0x96>
	} else if (spot == 1){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d113      	bne.n	80005ca <updateDigit+0x4e>
		return (num / 100) % 10;
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	4a1f      	ldr	r2, [pc, #124]	; (8000624 <updateDigit+0xa8>)
 80005a6:	fb82 1203 	smull	r1, r2, r2, r3
 80005aa:	1152      	asrs	r2, r2, #5
 80005ac:	17db      	asrs	r3, r3, #31
 80005ae:	1ad1      	subs	r1, r2, r3
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <updateDigit+0xac>)
 80005b2:	fb83 2301 	smull	r2, r3, r3, r1
 80005b6:	109a      	asrs	r2, r3, #2
 80005b8:	17cb      	asrs	r3, r1, #31
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	0092      	lsls	r2, r2, #2
 80005c0:	441a      	add	r2, r3
 80005c2:	0053      	lsls	r3, r2, #1
 80005c4:	461a      	mov	r2, r3
 80005c6:	1a8b      	subs	r3, r1, r2
 80005c8:	e023      	b.n	8000612 <updateDigit+0x96>
	} else if (spot == 2){
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d113      	bne.n	80005f8 <updateDigit+0x7c>
		return (num / 10) % 10;
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <updateDigit+0xac>)
 80005d4:	fb82 1203 	smull	r1, r2, r2, r3
 80005d8:	1092      	asrs	r2, r2, #2
 80005da:	17db      	asrs	r3, r3, #31
 80005dc:	1ad1      	subs	r1, r2, r3
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <updateDigit+0xac>)
 80005e0:	fb83 2301 	smull	r2, r3, r3, r1
 80005e4:	109a      	asrs	r2, r3, #2
 80005e6:	17cb      	asrs	r3, r1, #31
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	461a      	mov	r2, r3
 80005ec:	0092      	lsls	r2, r2, #2
 80005ee:	441a      	add	r2, r3
 80005f0:	0053      	lsls	r3, r2, #1
 80005f2:	461a      	mov	r2, r3
 80005f4:	1a8b      	subs	r3, r1, r2
 80005f6:	e00c      	b.n	8000612 <updateDigit+0x96>
	} else {
		return num % 10;
 80005f8:	6839      	ldr	r1, [r7, #0]
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <updateDigit+0xac>)
 80005fc:	fb83 2301 	smull	r2, r3, r3, r1
 8000600:	109a      	asrs	r2, r3, #2
 8000602:	17cb      	asrs	r3, r1, #31
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	461a      	mov	r2, r3
 8000608:	0092      	lsls	r2, r2, #2
 800060a:	441a      	add	r2, r3
 800060c:	0053      	lsls	r3, r2, #1
 800060e:	461a      	mov	r2, r3
 8000610:	1a8b      	subs	r3, r1, r2
	}
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	10624dd3 	.word	0x10624dd3
 8000624:	51eb851f 	.word	0x51eb851f
 8000628:	66666667 	.word	0x66666667

0800062c <run_manager>:

void run_manager(){
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b0dc      	sub	sp, #368	; 0x170
 8000630:	af04      	add	r7, sp, #16
//			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
//			sprintf(buffer,"Teller 1: %d Teller 2: %d Teller 3: %d \r\n", tellers[1].status,tellers[2].status,tellers[3].status);
//			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
//		}

	if (clock_compare(Clock, fiveOclockSomewhere) == 0 && waiting_customers == 0 && tellers[0].status == 0 && tellers[1].status == 0 && tellers[2].status == 0 && report_sent == 0){
 8000632:	4bb7      	ldr	r3, [pc, #732]	; (8000910 <run_manager+0x2e4>)
 8000634:	4ab7      	ldr	r2, [pc, #732]	; (8000914 <run_manager+0x2e8>)
 8000636:	466c      	mov	r4, sp
 8000638:	1d19      	adds	r1, r3, #4
 800063a:	c903      	ldmia	r1, {r0, r1}
 800063c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	ca07      	ldmia	r2, {r0, r1, r2}
 8000644:	f000 fe7e 	bl	8001344 <clock_compare>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	f040 8238 	bne.w	8000ac0 <run_manager+0x494>
 8000650:	4bb1      	ldr	r3, [pc, #708]	; (8000918 <run_manager+0x2ec>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	f040 8233 	bne.w	8000ac0 <run_manager+0x494>
 800065a:	4bb0      	ldr	r3, [pc, #704]	; (800091c <run_manager+0x2f0>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	f040 822e 	bne.w	8000ac0 <run_manager+0x494>
 8000664:	4bad      	ldr	r3, [pc, #692]	; (800091c <run_manager+0x2f0>)
 8000666:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800066a:	2b00      	cmp	r3, #0
 800066c:	f040 8228 	bne.w	8000ac0 <run_manager+0x494>
 8000670:	4baa      	ldr	r3, [pc, #680]	; (800091c <run_manager+0x2f0>)
 8000672:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000676:	2b00      	cmp	r3, #0
 8000678:	f040 8222 	bne.w	8000ac0 <run_manager+0x494>
 800067c:	4ba8      	ldr	r3, [pc, #672]	; (8000920 <run_manager+0x2f4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	f040 821d 	bne.w	8000ac0 <run_manager+0x494>
		day_over = 1;
 8000686:	4ba7      	ldr	r3, [pc, #668]	; (8000924 <run_manager+0x2f8>)
 8000688:	2201      	movs	r2, #1
 800068a:	601a      	str	r2, [r3, #0]
		report_sent = 1;
 800068c:	4ba4      	ldr	r3, [pc, #656]	; (8000920 <run_manager+0x2f4>)
 800068e:	2201      	movs	r2, #1
 8000690:	601a      	str	r2, [r3, #0]

		// Base stats for everyone
		int total_customers = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
		int total_teller_waits = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
		WallClock total_service_time = {.hour = 0, .minute = 0, .second = 0};
 800069e:	2300      	movs	r3, #0
 80006a0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80006aa:	2300      	movs	r3, #0
 80006ac:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		WallClock total_t_waiting_time = {.hour = 0, .minute = 0, .second = 0};
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80006bc:	2300      	movs	r3, #0
 80006be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

		// Individual Teller Stats
		for (int i = 0; i < 3; i++){
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80006c8:	e04b      	b.n	8000762 <run_manager+0x136>

			total_customers += tellers[i].customers_served;
 80006ca:	4a94      	ldr	r2, [pc, #592]	; (800091c <run_manager+0x2f0>)
 80006cc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80006d0:	21c8      	movs	r1, #200	; 0xc8
 80006d2:	fb01 f303 	mul.w	r3, r1, r3
 80006d6:	4413      	add	r3, r2
 80006d8:	3320      	adds	r3, #32
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80006e0:	4413      	add	r3, r2
 80006e2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
			total_teller_waits += tellers[i].waiting_count;
 80006e6:	4a8d      	ldr	r2, [pc, #564]	; (800091c <run_manager+0x2f0>)
 80006e8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80006ec:	21c8      	movs	r1, #200	; 0xc8
 80006ee:	fb01 f303 	mul.w	r3, r1, r3
 80006f2:	4413      	add	r3, r2
 80006f4:	3324      	adds	r3, #36	; 0x24
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80006fc:	4413      	add	r3, r2
 80006fe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
			total_service_time = add_clocks(total_service_time, tellers[i].total_time_working);
 8000702:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8000706:	4a85      	ldr	r2, [pc, #532]	; (800091c <run_manager+0x2f0>)
 8000708:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800070c:	21c8      	movs	r1, #200	; 0xc8
 800070e:	fb01 f303 	mul.w	r3, r1, r3
 8000712:	4413      	add	r3, r2
 8000714:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000718:	466b      	mov	r3, sp
 800071a:	ca07      	ldmia	r2, {r0, r1, r2}
 800071c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000720:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8000724:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000726:	4620      	mov	r0, r4
 8000728:	f000 fdcb 	bl	80012c2 <add_clocks>
			total_t_waiting_time = add_clocks(total_t_waiting_time, tellers[i].total_time_waiting);
 800072c:	f507 7598 	add.w	r5, r7, #304	; 0x130
 8000730:	4a7a      	ldr	r2, [pc, #488]	; (800091c <run_manager+0x2f0>)
 8000732:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000736:	21c8      	movs	r1, #200	; 0xc8
 8000738:	fb01 f303 	mul.w	r3, r1, r3
 800073c:	4413      	add	r3, r2
 800073e:	3330      	adds	r3, #48	; 0x30
 8000740:	466c      	mov	r4, sp
 8000742:	3304      	adds	r3, #4
 8000744:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000748:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800074c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000750:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000752:	4628      	mov	r0, r5
 8000754:	f000 fdb5 	bl	80012c2 <add_clocks>
		for (int i = 0; i < 3; i++){
 8000758:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800075c:	3301      	adds	r3, #1
 800075e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000762:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000766:	2b02      	cmp	r3, #2
 8000768:	ddaf      	ble.n	80006ca <run_manager+0x9e>
//					sprintf(buffer, "Current time: %d:%d:%d \r\n", total_t_waiting_time.hour, total_t_waiting_time.minute, total_t_waiting_time.second);
//					HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
		}

		// Everyone stats calculated
		WallClock avg_wait_time_customer = average_time(total_customer_wait, total_customers);
 800076a:	f507 7092 	add.w	r0, r7, #292	; 0x124
 800076e:	4b6e      	ldr	r3, [pc, #440]	; (8000928 <run_manager+0x2fc>)
 8000770:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8000774:	9200      	str	r2, [sp, #0]
 8000776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000778:	f000 fe96 	bl	80014a8 <average_time>
		WallClock avg_time_with_teller = average_time(total_service_time, total_customers);
 800077c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8000780:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800078a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800078c:	f000 fe8c 	bl	80014a8 <average_time>
		WallClock avg_wait_time_teller = average_time(total_t_waiting_time, total_teller_waits);
 8000790:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8000794:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800079e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007a0:	f000 fe82 	bl	80014a8 <average_time>
//		char buffer[100];
//		sprintf(buffer, "Customer wait time: %d:%d:%d \r\n", total_customer_wait.hour, total_customer_wait.minute, total_customer_wait.second);
//		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);

		char buffer[256];
		sprintf(buffer, "\r\n-------------------- End of Day Report ---------------------\r\n");
 80007a4:	463b      	mov	r3, r7
 80007a6:	4961      	ldr	r1, [pc, #388]	; (800092c <run_manager+0x300>)
 80007a8:	4618      	mov	r0, r3
 80007aa:	f008 febb 	bl	8009524 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80007ae:	463b      	mov	r3, r7
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fd0d 	bl	80001d0 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	4639      	mov	r1, r7
 80007bc:	2364      	movs	r3, #100	; 0x64
 80007be:	485c      	ldr	r0, [pc, #368]	; (8000930 <run_manager+0x304>)
 80007c0:	f004 fef2 	bl	80055a8 <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced: %d\r\n", total_customers);
 80007c4:	463b      	mov	r3, r7
 80007c6:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80007ca:	495a      	ldr	r1, [pc, #360]	; (8000934 <run_manager+0x308>)
 80007cc:	4618      	mov	r0, r3
 80007ce:	f008 fea9 	bl	8009524 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80007d2:	463b      	mov	r3, r7
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fcfb 	bl	80001d0 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	b29a      	uxth	r2, r3
 80007de:	4639      	mov	r1, r7
 80007e0:	2364      	movs	r3, #100	; 0x64
 80007e2:	4853      	ldr	r0, [pc, #332]	; (8000930 <run_manager+0x304>)
 80007e4:	f004 fee0 	bl	80055a8 <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced by Teller 1: %d\r\n", tellers[0].customers_served);
 80007e8:	4b4c      	ldr	r3, [pc, #304]	; (800091c <run_manager+0x2f0>)
 80007ea:	6a1a      	ldr	r2, [r3, #32]
 80007ec:	463b      	mov	r3, r7
 80007ee:	4952      	ldr	r1, [pc, #328]	; (8000938 <run_manager+0x30c>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f008 fe97 	bl	8009524 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80007f6:	463b      	mov	r3, r7
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fce9 	bl	80001d0 <strlen>
 80007fe:	4603      	mov	r3, r0
 8000800:	b29a      	uxth	r2, r3
 8000802:	4639      	mov	r1, r7
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	484a      	ldr	r0, [pc, #296]	; (8000930 <run_manager+0x304>)
 8000808:	f004 fece 	bl	80055a8 <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced by Teller 2: %d\r\n", tellers[1].customers_served);
 800080c:	4b43      	ldr	r3, [pc, #268]	; (800091c <run_manager+0x2f0>)
 800080e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000812:	463b      	mov	r3, r7
 8000814:	4949      	ldr	r1, [pc, #292]	; (800093c <run_manager+0x310>)
 8000816:	4618      	mov	r0, r3
 8000818:	f008 fe84 	bl	8009524 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 800081c:	463b      	mov	r3, r7
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fcd6 	bl	80001d0 <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	4639      	mov	r1, r7
 800082a:	2364      	movs	r3, #100	; 0x64
 800082c:	4840      	ldr	r0, [pc, #256]	; (8000930 <run_manager+0x304>)
 800082e:	f004 febb 	bl	80055a8 <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced by Teller 3: %d\r\n\r\n", tellers[2].customers_served);
 8000832:	4b3a      	ldr	r3, [pc, #232]	; (800091c <run_manager+0x2f0>)
 8000834:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 8000838:	463b      	mov	r3, r7
 800083a:	4941      	ldr	r1, [pc, #260]	; (8000940 <run_manager+0x314>)
 800083c:	4618      	mov	r0, r3
 800083e:	f008 fe71 	bl	8009524 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000842:	463b      	mov	r3, r7
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fcc3 	bl	80001d0 <strlen>
 800084a:	4603      	mov	r3, r0
 800084c:	b29a      	uxth	r2, r3
 800084e:	4639      	mov	r1, r7
 8000850:	2364      	movs	r3, #100	; 0x64
 8000852:	4837      	ldr	r0, [pc, #220]	; (8000930 <run_manager+0x304>)
 8000854:	f004 fea8 	bl	80055a8 <HAL_UART_Transmit>

		sprintf(buffer, "Average customer wait time: %d:%d:%d\r\n", avg_wait_time_customer.hour, avg_wait_time_customer.minute, avg_wait_time_customer.second);
 8000858:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800085c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8000860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000864:	4638      	mov	r0, r7
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	460b      	mov	r3, r1
 800086a:	4936      	ldr	r1, [pc, #216]	; (8000944 <run_manager+0x318>)
 800086c:	f008 fe5a 	bl	8009524 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000870:	463b      	mov	r3, r7
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fcac 	bl	80001d0 <strlen>
 8000878:	4603      	mov	r3, r0
 800087a:	b29a      	uxth	r2, r3
 800087c:	4639      	mov	r1, r7
 800087e:	2364      	movs	r3, #100	; 0x64
 8000880:	482b      	ldr	r0, [pc, #172]	; (8000930 <run_manager+0x304>)
 8000882:	f004 fe91 	bl	80055a8 <HAL_UART_Transmit>
		sprintf(buffer, "Average customer time with Tellers: %d:%d:%d\r\n", avg_time_with_teller.hour, avg_time_with_teller.minute, avg_time_with_teller.second);
 8000886:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800088a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800088e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000892:	4638      	mov	r0, r7
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	460b      	mov	r3, r1
 8000898:	492b      	ldr	r1, [pc, #172]	; (8000948 <run_manager+0x31c>)
 800089a:	f008 fe43 	bl	8009524 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 800089e:	463b      	mov	r3, r7
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fc95 	bl	80001d0 <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	4639      	mov	r1, r7
 80008ac:	2364      	movs	r3, #100	; 0x64
 80008ae:	4820      	ldr	r0, [pc, #128]	; (8000930 <run_manager+0x304>)
 80008b0:	f004 fe7a 	bl	80055a8 <HAL_UART_Transmit>
		sprintf(buffer, "Average teller wait time: %d:%d:%d\r\n", avg_wait_time_teller.hour, avg_wait_time_teller.minute, avg_wait_time_teller.second);
 80008b4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80008b8:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80008bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008c0:	4638      	mov	r0, r7
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	460b      	mov	r3, r1
 80008c6:	4921      	ldr	r1, [pc, #132]	; (800094c <run_manager+0x320>)
 80008c8:	f008 fe2c 	bl	8009524 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80008cc:	463b      	mov	r3, r7
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fc7e 	bl	80001d0 <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4639      	mov	r1, r7
 80008da:	2364      	movs	r3, #100	; 0x64
 80008dc:	4814      	ldr	r0, [pc, #80]	; (8000930 <run_manager+0x304>)
 80008de:	f004 fe63 	bl	80055a8 <HAL_UART_Transmit>
		sprintf(buffer, "Max customers in queue: %d\r\n\r\n", max_customer_waiting);
 80008e2:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <run_manager+0x324>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	463b      	mov	r3, r7
 80008e8:	491a      	ldr	r1, [pc, #104]	; (8000954 <run_manager+0x328>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f008 fe1a 	bl	8009524 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80008f0:	463b      	mov	r3, r7
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fc6c 	bl	80001d0 <strlen>
 80008f8:	4603      	mov	r3, r0
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	4639      	mov	r1, r7
 80008fe:	2364      	movs	r3, #100	; 0x64
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <run_manager+0x304>)
 8000902:	f004 fe51 	bl	80055a8 <HAL_UART_Transmit>

		for (int i = 0; i < 3; i++){
 8000906:	2300      	movs	r3, #0
 8000908:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800090c:	e0d3      	b.n	8000ab6 <run_manager+0x48a>
 800090e:	bf00      	nop
 8000910:	20000044 	.word	0x20000044
 8000914:	20000038 	.word	0x20000038
 8000918:	20000128 	.word	0x20000128
 800091c:	200003f4 	.word	0x200003f4
 8000920:	200000cc 	.word	0x200000cc
 8000924:	200002e4 	.word	0x200002e4
 8000928:	200002c8 	.word	0x200002c8
 800092c:	08009dd8 	.word	0x08009dd8
 8000930:	20000344 	.word	0x20000344
 8000934:	08009e1c 	.word	0x08009e1c
 8000938:	08009e38 	.word	0x08009e38
 800093c:	08009e60 	.word	0x08009e60
 8000940:	08009e88 	.word	0x08009e88
 8000944:	08009eb0 	.word	0x08009eb0
 8000948:	08009ed8 	.word	0x08009ed8
 800094c:	08009f08 	.word	0x08009f08
 8000950:	20000124 	.word	0x20000124
 8000954:	08009f30 	.word	0x08009f30
			sprintf(buffer, "Number of breaks for Teller %d: %d\r\n", i, tellers[i].num_breaks);
 8000958:	4a7d      	ldr	r2, [pc, #500]	; (8000b50 <run_manager+0x524>)
 800095a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800095e:	21c8      	movs	r1, #200	; 0xc8
 8000960:	fb01 f303 	mul.w	r3, r1, r3
 8000964:	4413      	add	r3, r2
 8000966:	33a0      	adds	r3, #160	; 0xa0
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4638      	mov	r0, r7
 800096c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8000970:	4978      	ldr	r1, [pc, #480]	; (8000b54 <run_manager+0x528>)
 8000972:	f008 fdd7 	bl	8009524 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000976:	463b      	mov	r3, r7
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fc29 	bl	80001d0 <strlen>
 800097e:	4603      	mov	r3, r0
 8000980:	b29a      	uxth	r2, r3
 8000982:	4639      	mov	r1, r7
 8000984:	2364      	movs	r3, #100	; 0x64
 8000986:	4874      	ldr	r0, [pc, #464]	; (8000b58 <run_manager+0x52c>)
 8000988:	f004 fe0e 	bl	80055a8 <HAL_UART_Transmit>
			WallClock avg_break = average_time(tellers[i].total_break, tellers[i].num_breaks);
 800098c:	4a70      	ldr	r2, [pc, #448]	; (8000b50 <run_manager+0x524>)
 800098e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000992:	21c8      	movs	r1, #200	; 0xc8
 8000994:	fb01 f303 	mul.w	r3, r1, r3
 8000998:	4413      	add	r3, r2
 800099a:	33a0      	adds	r3, #160	; 0xa0
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80009a2:	496b      	ldr	r1, [pc, #428]	; (8000b50 <run_manager+0x524>)
 80009a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80009a8:	24c8      	movs	r4, #200	; 0xc8
 80009aa:	fb04 f303 	mul.w	r3, r4, r3
 80009ae:	440b      	add	r3, r1
 80009b0:	33b8      	adds	r3, #184	; 0xb8
 80009b2:	9200      	str	r2, [sp, #0]
 80009b4:	3304      	adds	r3, #4
 80009b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009b8:	f000 fd76 	bl	80014a8 <average_time>
			sprintf(buffer, "Average break time for Teller %d: %d:%d:%d\r\n", i, avg_break.hour, avg_break.minute, avg_break.second); //calculate avg
 80009bc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80009c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80009c4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80009c8:	4638      	mov	r0, r7
 80009ca:	9201      	str	r2, [sp, #4]
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	460b      	mov	r3, r1
 80009d0:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80009d4:	4961      	ldr	r1, [pc, #388]	; (8000b5c <run_manager+0x530>)
 80009d6:	f008 fda5 	bl	8009524 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80009da:	463b      	mov	r3, r7
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fbf7 	bl	80001d0 <strlen>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4639      	mov	r1, r7
 80009e8:	2364      	movs	r3, #100	; 0x64
 80009ea:	485b      	ldr	r0, [pc, #364]	; (8000b58 <run_manager+0x52c>)
 80009ec:	f004 fddc 	bl	80055a8 <HAL_UART_Transmit>
			sprintf(buffer, "Max break time for Teller %d: %d:%d:%d\r\n", i, tellers[i].max_break.hour, tellers[i].max_break.minute, tellers[i].max_break.second);
 80009f0:	4a57      	ldr	r2, [pc, #348]	; (8000b50 <run_manager+0x524>)
 80009f2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80009f6:	21c8      	movs	r1, #200	; 0xc8
 80009f8:	fb01 f303 	mul.w	r3, r1, r3
 80009fc:	4413      	add	r3, r2
 80009fe:	33a4      	adds	r3, #164	; 0xa4
 8000a00:	6819      	ldr	r1, [r3, #0]
 8000a02:	4a53      	ldr	r2, [pc, #332]	; (8000b50 <run_manager+0x524>)
 8000a04:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000a08:	20c8      	movs	r0, #200	; 0xc8
 8000a0a:	fb00 f303 	mul.w	r3, r0, r3
 8000a0e:	4413      	add	r3, r2
 8000a10:	33a8      	adds	r3, #168	; 0xa8
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	484e      	ldr	r0, [pc, #312]	; (8000b50 <run_manager+0x524>)
 8000a16:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8000a1a:	24c8      	movs	r4, #200	; 0xc8
 8000a1c:	fb04 f202 	mul.w	r2, r4, r2
 8000a20:	4402      	add	r2, r0
 8000a22:	32ac      	adds	r2, #172	; 0xac
 8000a24:	6812      	ldr	r2, [r2, #0]
 8000a26:	4638      	mov	r0, r7
 8000a28:	9201      	str	r2, [sp, #4]
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8000a32:	494b      	ldr	r1, [pc, #300]	; (8000b60 <run_manager+0x534>)
 8000a34:	f008 fd76 	bl	8009524 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fbc8 	bl	80001d0 <strlen>
 8000a40:	4603      	mov	r3, r0
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4639      	mov	r1, r7
 8000a46:	2364      	movs	r3, #100	; 0x64
 8000a48:	4843      	ldr	r0, [pc, #268]	; (8000b58 <run_manager+0x52c>)
 8000a4a:	f004 fdad 	bl	80055a8 <HAL_UART_Transmit>
			sprintf(buffer, "Min break time for Teller %d: %d:%d:%d\r\n\r\n", i, tellers[i].min_break.hour, tellers[i].min_break.minute, tellers[i].min_break.second);
 8000a4e:	4a40      	ldr	r2, [pc, #256]	; (8000b50 <run_manager+0x524>)
 8000a50:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000a54:	21c8      	movs	r1, #200	; 0xc8
 8000a56:	fb01 f303 	mul.w	r3, r1, r3
 8000a5a:	4413      	add	r3, r2
 8000a5c:	33b0      	adds	r3, #176	; 0xb0
 8000a5e:	6819      	ldr	r1, [r3, #0]
 8000a60:	4a3b      	ldr	r2, [pc, #236]	; (8000b50 <run_manager+0x524>)
 8000a62:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000a66:	20c8      	movs	r0, #200	; 0xc8
 8000a68:	fb00 f303 	mul.w	r3, r0, r3
 8000a6c:	4413      	add	r3, r2
 8000a6e:	33b4      	adds	r3, #180	; 0xb4
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4837      	ldr	r0, [pc, #220]	; (8000b50 <run_manager+0x524>)
 8000a74:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8000a78:	24c8      	movs	r4, #200	; 0xc8
 8000a7a:	fb04 f202 	mul.w	r2, r4, r2
 8000a7e:	4402      	add	r2, r0
 8000a80:	32b8      	adds	r2, #184	; 0xb8
 8000a82:	6812      	ldr	r2, [r2, #0]
 8000a84:	4638      	mov	r0, r7
 8000a86:	9201      	str	r2, [sp, #4]
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8000a90:	4934      	ldr	r1, [pc, #208]	; (8000b64 <run_manager+0x538>)
 8000a92:	f008 fd47 	bl	8009524 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000a96:	463b      	mov	r3, r7
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fb99 	bl	80001d0 <strlen>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	4639      	mov	r1, r7
 8000aa4:	2364      	movs	r3, #100	; 0x64
 8000aa6:	482c      	ldr	r0, [pc, #176]	; (8000b58 <run_manager+0x52c>)
 8000aa8:	f004 fd7e 	bl	80055a8 <HAL_UART_Transmit>
		for (int i = 0; i < 3; i++){
 8000aac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000ab6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	f77f af4c 	ble.w	8000958 <run_manager+0x32c>
		}
	}

	for (int i = 0; i < 4; i++){
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000ac6:	e039      	b.n	8000b3c <run_manager+0x510>
			int digit = updateDigit(i, waiting_customers);
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <run_manager+0x53c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8000ad2:	f7ff fd53 	bl	800057c <updateDigit>
 8000ad6:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
			HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2120      	movs	r1, #32
 8000ade:	4823      	ldr	r0, [pc, #140]	; (8000b6c <run_manager+0x540>)
 8000ae0:	f002 fd7e 	bl	80035e0 <HAL_GPIO_WritePin>
			shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, num[digit]);
 8000ae4:	4a22      	ldr	r2, [pc, #136]	; (8000b70 <run_manager+0x544>)
 8000ae6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000afa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f000 f839 	bl	8000b78 <shiftOut>
			shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, seg[i]);
 8000b06:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <run_manager+0x548>)
 8000b08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b18:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f000 f828 	bl	8000b78 <shiftOut>
			HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2120      	movs	r1, #32
 8000b2c:	480f      	ldr	r0, [pc, #60]	; (8000b6c <run_manager+0x540>)
 8000b2e:	f002 fd57 	bl	80035e0 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++){
 8000b32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000b36:	3301      	adds	r3, #1
 8000b38:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000b3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	ddc1      	ble.n	8000ac8 <run_manager+0x49c>
		}
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b50:	200003f4 	.word	0x200003f4
 8000b54:	08009f50 	.word	0x08009f50
 8000b58:	20000344 	.word	0x20000344
 8000b5c:	08009f78 	.word	0x08009f78
 8000b60:	08009fa8 	.word	0x08009fa8
 8000b64:	08009fd4 	.word	0x08009fd4
 8000b68:	20000128 	.word	0x20000128
 8000b6c:	48000400 	.word	0x48000400
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000028 	.word	0x20000028

08000b78 <shiftOut>:



void shiftOut(GPIO_TypeDef* data_port, uint16_t data_pin, GPIO_TypeDef* clock_port, uint16_t clock_pin, uint8_t value) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	461a      	mov	r2, r3
 8000b84:	460b      	mov	r3, r1
 8000b86:	817b      	strh	r3, [r7, #10]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	813b      	strh	r3, [r7, #8]
	for(int ii=0x80; ii; ii>>=1) {
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e01d      	b.n	8000bce <shiftOut+0x56>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_RESET);
 8000b92:	893b      	ldrh	r3, [r7, #8]
 8000b94:	2200      	movs	r2, #0
 8000b96:	4619      	mov	r1, r3
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f002 fd21 	bl	80035e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pin, (value&ii)!=0);
 8000b9e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	bf14      	ite	ne
 8000baa:	2301      	movne	r3, #1
 8000bac:	2300      	moveq	r3, #0
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	897b      	ldrh	r3, [r7, #10]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f002 fd12 	bl	80035e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_SET);
 8000bbc:	893b      	ldrh	r3, [r7, #8]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f002 fd0c 	bl	80035e0 <HAL_GPIO_WritePin>
	for(int ii=0x80; ii; ii>>=1) {
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	105b      	asrs	r3, r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1de      	bne.n	8000b92 <shiftOut+0x1a>
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <init_breaker>:
#include "clock.h"
#include "teller.h"

Breaker breaker;

void init_breaker(void){
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	b0a1      	sub	sp, #132	; 0x84
 8000be4:	af04      	add	r7, sp, #16
	uint32_t random1 = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t random2 = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t random3 = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	667b      	str	r3, [r7, #100]	; 0x64

	//What time the variable for going on break will be assigned

	breaker.start_break[0] = 0;
 8000bf2:	4bae      	ldr	r3, [pc, #696]	; (8000eac <init_breaker+0x2cc>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,&random1);
 8000bf8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	48ac      	ldr	r0, [pc, #688]	; (8000eb0 <init_breaker+0x2d0>)
 8000c00:	f004 f87d 	bl	8004cfe <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock1 = { .hour = 9, .minute = (30 + (random1 - 30) % 31), .second = (random1 % 60)};
 8000c04:	2309      	movs	r3, #9
 8000c06:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c0a:	f1a3 011e 	sub.w	r1, r3, #30
 8000c0e:	4ba9      	ldr	r3, [pc, #676]	; (8000eb4 <init_breaker+0x2d4>)
 8000c10:	fba3 2301 	umull	r2, r3, r3, r1
 8000c14:	1aca      	subs	r2, r1, r3
 8000c16:	0852      	lsrs	r2, r2, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	091a      	lsrs	r2, r3, #4
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	015b      	lsls	r3, r3, #5
 8000c20:	1a9b      	subs	r3, r3, r2
 8000c22:	1aca      	subs	r2, r1, r3
 8000c24:	f102 031e 	add.w	r3, r2, #30
 8000c28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c2a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000c2c:	4ba2      	ldr	r3, [pc, #648]	; (8000eb8 <init_breaker+0x2d8>)
 8000c2e:	fba3 2301 	umull	r2, r3, r3, r1
 8000c32:	095a      	lsrs	r2, r3, #5
 8000c34:	4613      	mov	r3, r2
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	1a9b      	subs	r3, r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	1aca      	subs	r2, r1, r3
 8000c3e:	4613      	mov	r3, r2
 8000c40:	663b      	str	r3, [r7, #96]	; 0x60
	WallClock temp_clock11 = { .hour = 0, .minute = (random1 % 5), .second = (random1 % 60)};
 8000c42:	2300      	movs	r3, #0
 8000c44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c46:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000c48:	4b9c      	ldr	r3, [pc, #624]	; (8000ebc <init_breaker+0x2dc>)
 8000c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8000c4e:	089a      	lsrs	r2, r3, #2
 8000c50:	4613      	mov	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4413      	add	r3, r2
 8000c56:	1aca      	subs	r2, r1, r3
 8000c58:	4613      	mov	r3, r2
 8000c5a:	653b      	str	r3, [r7, #80]	; 0x50
 8000c5c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000c5e:	4b96      	ldr	r3, [pc, #600]	; (8000eb8 <init_breaker+0x2d8>)
 8000c60:	fba3 2301 	umull	r2, r3, r3, r1
 8000c64:	095a      	lsrs	r2, r3, #5
 8000c66:	4613      	mov	r3, r2
 8000c68:	011b      	lsls	r3, r3, #4
 8000c6a:	1a9b      	subs	r3, r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	1aca      	subs	r2, r1, r3
 8000c70:	4613      	mov	r3, r2
 8000c72:	657b      	str	r3, [r7, #84]	; 0x54
	breaker.break_time[0] = add_clocks(breaker.break_time[0],temp_clock1);
 8000c74:	4e8d      	ldr	r6, [pc, #564]	; (8000eac <init_breaker+0x2cc>)
 8000c76:	f107 0508 	add.w	r5, r7, #8
 8000c7a:	4b8c      	ldr	r3, [pc, #560]	; (8000eac <init_breaker+0x2cc>)
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	466c      	mov	r4, sp
 8000c80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	330c      	adds	r3, #12
 8000c90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c92:	4628      	mov	r0, r5
 8000c94:	f000 fb15 	bl	80012c2 <add_clocks>
 8000c98:	f106 030c 	add.w	r3, r6, #12
 8000c9c:	f107 0208 	add.w	r2, r7, #8
 8000ca0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ca2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration[0] = add_clocks(breaker.break_duration[0],temp_clock11);
 8000ca6:	4e81      	ldr	r6, [pc, #516]	; (8000eac <init_breaker+0x2cc>)
 8000ca8:	f107 0508 	add.w	r5, r7, #8
 8000cac:	4b7f      	ldr	r3, [pc, #508]	; (8000eac <init_breaker+0x2cc>)
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	466c      	mov	r4, sp
 8000cb2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3330      	adds	r3, #48	; 0x30
 8000cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cc4:	4628      	mov	r0, r5
 8000cc6:	f000 fafc 	bl	80012c2 <add_clocks>
 8000cca:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8000cce:	f107 0208 	add.w	r2, r7, #8
 8000cd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//What time the variable for going on break will be assigned
	breaker.start_break[1] = 0;
 8000cd8:	4b74      	ldr	r3, [pc, #464]	; (8000eac <init_breaker+0x2cc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,&random2);
 8000cde:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4872      	ldr	r0, [pc, #456]	; (8000eb0 <init_breaker+0x2d0>)
 8000ce6:	f004 f80a 	bl	8004cfe <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock2 = { .hour = 9, .minute = (30 + (random2 - 30) % 31), .second = (random2 % 60)};
 8000cea:	2309      	movs	r3, #9
 8000cec:	643b      	str	r3, [r7, #64]	; 0x40
 8000cee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000cf0:	f1a3 011e 	sub.w	r1, r3, #30
 8000cf4:	4b6f      	ldr	r3, [pc, #444]	; (8000eb4 <init_breaker+0x2d4>)
 8000cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8000cfa:	1aca      	subs	r2, r1, r3
 8000cfc:	0852      	lsrs	r2, r2, #1
 8000cfe:	4413      	add	r3, r2
 8000d00:	091a      	lsrs	r2, r3, #4
 8000d02:	4613      	mov	r3, r2
 8000d04:	015b      	lsls	r3, r3, #5
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	1aca      	subs	r2, r1, r3
 8000d0a:	f102 031e 	add.w	r3, r2, #30
 8000d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8000d10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000d12:	4b69      	ldr	r3, [pc, #420]	; (8000eb8 <init_breaker+0x2d8>)
 8000d14:	fba3 2301 	umull	r2, r3, r3, r1
 8000d18:	095a      	lsrs	r2, r3, #5
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	1aca      	subs	r2, r1, r3
 8000d24:	4613      	mov	r3, r2
 8000d26:	64bb      	str	r3, [r7, #72]	; 0x48
	WallClock temp_clock22 = { .hour = 0, .minute = (random2 % 5), .second = (random2 % 60)};
 8000d28:	2300      	movs	r3, #0
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8000d2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000d2e:	4b63      	ldr	r3, [pc, #396]	; (8000ebc <init_breaker+0x2dc>)
 8000d30:	fba3 2301 	umull	r2, r3, r3, r1
 8000d34:	089a      	lsrs	r2, r3, #2
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	1aca      	subs	r2, r1, r3
 8000d3e:	4613      	mov	r3, r2
 8000d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000d44:	4b5c      	ldr	r3, [pc, #368]	; (8000eb8 <init_breaker+0x2d8>)
 8000d46:	fba3 2301 	umull	r2, r3, r3, r1
 8000d4a:	095a      	lsrs	r2, r3, #5
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	1a9b      	subs	r3, r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	1aca      	subs	r2, r1, r3
 8000d56:	4613      	mov	r3, r2
 8000d58:	63fb      	str	r3, [r7, #60]	; 0x3c
	breaker.break_time[1] = add_clocks(breaker.break_time[1],temp_clock2);
 8000d5a:	4e54      	ldr	r6, [pc, #336]	; (8000eac <init_breaker+0x2cc>)
 8000d5c:	f107 0508 	add.w	r5, r7, #8
 8000d60:	4b52      	ldr	r3, [pc, #328]	; (8000eac <init_breaker+0x2cc>)
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	466c      	mov	r4, sp
 8000d66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3318      	adds	r3, #24
 8000d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d78:	4628      	mov	r0, r5
 8000d7a:	f000 faa2 	bl	80012c2 <add_clocks>
 8000d7e:	f106 0318 	add.w	r3, r6, #24
 8000d82:	f107 0208 	add.w	r2, r7, #8
 8000d86:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration[1] = add_clocks(breaker.break_duration[1],temp_clock22);
 8000d8c:	4e47      	ldr	r6, [pc, #284]	; (8000eac <init_breaker+0x2cc>)
 8000d8e:	f107 0508 	add.w	r5, r7, #8
 8000d92:	4b46      	ldr	r3, [pc, #280]	; (8000eac <init_breaker+0x2cc>)
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	466c      	mov	r4, sp
 8000d98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000da0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	333c      	adds	r3, #60	; 0x3c
 8000da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000daa:	4628      	mov	r0, r5
 8000dac:	f000 fa89 	bl	80012c2 <add_clocks>
 8000db0:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 8000db4:	f107 0208 	add.w	r2, r7, #8
 8000db8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//What time the variable for going on break will be assigned
	breaker.start_break[2] = 0;
 8000dbe:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <init_breaker+0x2cc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,&random3);
 8000dc4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4839      	ldr	r0, [pc, #228]	; (8000eb0 <init_breaker+0x2d0>)
 8000dcc:	f003 ff97 	bl	8004cfe <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock3 = { .hour = 9, .minute = (30 + (random3 - 30) % 31), .second = (random3 % 60)};
 8000dd0:	2309      	movs	r3, #9
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000dd6:	f1a3 011e 	sub.w	r1, r3, #30
 8000dda:	4b36      	ldr	r3, [pc, #216]	; (8000eb4 <init_breaker+0x2d4>)
 8000ddc:	fba3 2301 	umull	r2, r3, r3, r1
 8000de0:	1aca      	subs	r2, r1, r3
 8000de2:	0852      	lsrs	r2, r2, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	091a      	lsrs	r2, r3, #4
 8000de8:	4613      	mov	r3, r2
 8000dea:	015b      	lsls	r3, r3, #5
 8000dec:	1a9b      	subs	r3, r3, r2
 8000dee:	1aca      	subs	r2, r1, r3
 8000df0:	f102 031e 	add.w	r3, r2, #30
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000df6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000df8:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <init_breaker+0x2d8>)
 8000dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8000dfe:	095a      	lsrs	r2, r3, #5
 8000e00:	4613      	mov	r3, r2
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	1a9b      	subs	r3, r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	1aca      	subs	r2, r1, r3
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
	WallClock temp_clock33 = { .hour = 0, .minute = (random3 % 5), .second = (random3 % 60)};
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000e14:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <init_breaker+0x2dc>)
 8000e16:	fba3 2301 	umull	r2, r3, r3, r1
 8000e1a:	089a      	lsrs	r2, r3, #2
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	1aca      	subs	r2, r1, r3
 8000e24:	4613      	mov	r3, r2
 8000e26:	623b      	str	r3, [r7, #32]
 8000e28:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000e2a:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <init_breaker+0x2d8>)
 8000e2c:	fba3 2301 	umull	r2, r3, r3, r1
 8000e30:	095a      	lsrs	r2, r3, #5
 8000e32:	4613      	mov	r3, r2
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	1aca      	subs	r2, r1, r3
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
	breaker.break_time[2] = add_clocks(breaker.break_time[2],temp_clock3);
 8000e40:	4e1a      	ldr	r6, [pc, #104]	; (8000eac <init_breaker+0x2cc>)
 8000e42:	f107 0508 	add.w	r5, r7, #8
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <init_breaker+0x2cc>)
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	466c      	mov	r4, sp
 8000e4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3324      	adds	r3, #36	; 0x24
 8000e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e5e:	4628      	mov	r0, r5
 8000e60:	f000 fa2f 	bl	80012c2 <add_clocks>
 8000e64:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000e68:	f107 0208 	add.w	r2, r7, #8
 8000e6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration[2] =  add_clocks(breaker.break_duration[2],temp_clock33);
 8000e72:	4e0e      	ldr	r6, [pc, #56]	; (8000eac <init_breaker+0x2cc>)
 8000e74:	f107 0508 	add.w	r5, r7, #8
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <init_breaker+0x2cc>)
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	466c      	mov	r4, sp
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3348      	adds	r3, #72	; 0x48
 8000e8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e90:	4628      	mov	r0, r5
 8000e92:	f000 fa16 	bl	80012c2 <add_clocks>
 8000e96:	f106 0348 	add.w	r3, r6, #72	; 0x48
 8000e9a:	f107 0208 	add.w	r2, r7, #8
 8000e9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ea0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8000ea4:	bf00      	nop
 8000ea6:	3774      	adds	r7, #116	; 0x74
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eac:	200000d0 	.word	0x200000d0
 8000eb0:	200002e8 	.word	0x200002e8
 8000eb4:	08421085 	.word	0x08421085
 8000eb8:	88888889 	.word	0x88888889
 8000ebc:	cccccccd 	.word	0xcccccccd

08000ec0 <run_breaker>:

void run_breaker(){
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af02      	add	r7, sp, #8

	//Override automatic break if switch gets pressed
	if(((!HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)) == 1 ) || (clock_compare(breaker.break_time[0],Clock) == 1)){
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f002 fb70 	bl	80035b0 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d010      	beq.n	8000ef8 <run_breaker+0x38>
 8000ed6:	4b45      	ldr	r3, [pc, #276]	; (8000fec <run_breaker+0x12c>)
 8000ed8:	4d45      	ldr	r5, [pc, #276]	; (8000ff0 <run_breaker+0x130>)
 8000eda:	466c      	mov	r4, sp
 8000edc:	1d1a      	adds	r2, r3, #4
 8000ede:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee2:	e884 0003 	stmia.w	r4, {r0, r1}
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f105 020c 	add.w	r2, r5, #12
 8000eec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eee:	f000 fa29 	bl	8001344 <clock_compare>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d116      	bne.n	8000f26 <run_breaker+0x66>
		breaker.start_break[0] = 1;
 8000ef8:	4b3d      	ldr	r3, [pc, #244]	; (8000ff0 <run_breaker+0x130>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
		if((!HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)) == 1 ){
 8000efe:	2102      	movs	r1, #2
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f04:	f002 fb54 	bl	80035b0 <HAL_GPIO_ReadPin>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10b      	bne.n	8000f26 <run_breaker+0x66>
			tellers[0].break_end = clock_increment(Clock);
 8000f0e:	4c39      	ldr	r4, [pc, #228]	; (8000ff4 <run_breaker+0x134>)
 8000f10:	4638      	mov	r0, r7
 8000f12:	4b36      	ldr	r3, [pc, #216]	; (8000fec <run_breaker+0x12c>)
 8000f14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f16:	f000 f9a7 	bl	8001268 <clock_increment>
 8000f1a:	f104 0388 	add.w	r3, r4, #136	; 0x88
 8000f1e:	463a      	mov	r2, r7
 8000f20:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}
	if(((!HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)) == 1 ) || (clock_compare(breaker.break_time[1],Clock) == 1)){
 8000f26:	2102      	movs	r1, #2
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f002 fb40 	bl	80035b0 <HAL_GPIO_ReadPin>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d010      	beq.n	8000f58 <run_breaker+0x98>
 8000f36:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <run_breaker+0x12c>)
 8000f38:	4d2d      	ldr	r5, [pc, #180]	; (8000ff0 <run_breaker+0x130>)
 8000f3a:	466c      	mov	r4, sp
 8000f3c:	1d1a      	adds	r2, r3, #4
 8000f3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f42:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f105 0218 	add.w	r2, r5, #24
 8000f4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f4e:	f000 f9f9 	bl	8001344 <clock_compare>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d116      	bne.n	8000f86 <run_breaker+0xc6>
		breaker.start_break[0] = 1;
 8000f58:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <run_breaker+0x130>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]
		if((!HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin)) == 1 ){
 8000f5e:	2110      	movs	r1, #16
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f64:	f002 fb24 	bl	80035b0 <HAL_GPIO_ReadPin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10b      	bne.n	8000f86 <run_breaker+0xc6>
			tellers[1].break_end = clock_increment(Clock);
 8000f6e:	4c21      	ldr	r4, [pc, #132]	; (8000ff4 <run_breaker+0x134>)
 8000f70:	4638      	mov	r0, r7
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <run_breaker+0x12c>)
 8000f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f76:	f000 f977 	bl	8001268 <clock_increment>
 8000f7a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 8000f7e:	463a      	mov	r2, r7
 8000f80:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}
	if(((!HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)) == 1 ) || (clock_compare(breaker.break_time[2],Clock) == 1)){
 8000f86:	2102      	movs	r1, #2
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8c:	f002 fb10 	bl	80035b0 <HAL_GPIO_ReadPin>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d010      	beq.n	8000fb8 <run_breaker+0xf8>
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <run_breaker+0x12c>)
 8000f98:	4d15      	ldr	r5, [pc, #84]	; (8000ff0 <run_breaker+0x130>)
 8000f9a:	466c      	mov	r4, sp
 8000f9c:	1d1a      	adds	r2, r3, #4
 8000f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fa2:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8000fac:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fae:	f000 f9c9 	bl	8001344 <clock_compare>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d115      	bne.n	8000fe4 <run_breaker+0x124>
		breaker.start_break[0] = 1;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <run_breaker+0x130>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
		if((!HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin)) == 1 ){
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <run_breaker+0x138>)
 8000fc2:	f002 faf5 	bl	80035b0 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10b      	bne.n	8000fe4 <run_breaker+0x124>
			tellers[2].break_end = clock_increment(Clock);
 8000fcc:	4c09      	ldr	r4, [pc, #36]	; (8000ff4 <run_breaker+0x134>)
 8000fce:	4638      	mov	r0, r7
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <run_breaker+0x12c>)
 8000fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fd4:	f000 f948 	bl	8001268 <clock_increment>
 8000fd8:	f504 7306 	add.w	r3, r4, #536	; 0x218
 8000fdc:	463a      	mov	r2, r7
 8000fde:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bdb0      	pop	{r4, r5, r7, pc}
 8000fec:	20000038 	.word	0x20000038
 8000ff0:	200000d0 	.word	0x200000d0
 8000ff4:	200003f4 	.word	0x200003f4
 8000ff8:	48000400 	.word	0x48000400

08000ffc <generate_next_break>:

void generate_next_break(int teller_id){
 8000ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffe:	b093      	sub	sp, #76	; 0x4c
 8001000:	af04      	add	r7, sp, #16
 8001002:	6178      	str	r0, [r7, #20]
		uint32_t random = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	637b      	str	r3, [r7, #52]	; 0x34


		//What time the variable for going on break will be assigned

		breaker.start_break[teller_id] = 0;
 8001008:	4a71      	ldr	r2, [pc, #452]	; (80011d0 <generate_next_break+0x1d4>)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2100      	movs	r1, #0
 800100e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//Duration of the assigned break;
		HAL_RNG_GenerateRandomNumber(&hrng,&random);
 8001012:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001016:	4619      	mov	r1, r3
 8001018:	486e      	ldr	r0, [pc, #440]	; (80011d4 <generate_next_break+0x1d8>)
 800101a:	f003 fe70 	bl	8004cfe <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock1 = { .hour = 0, .minute = (30 + (random - 30) % 31), .second = (random % 60)};
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
 8001022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001024:	f1a3 011e 	sub.w	r1, r3, #30
 8001028:	4b6b      	ldr	r3, [pc, #428]	; (80011d8 <generate_next_break+0x1dc>)
 800102a:	fba3 2301 	umull	r2, r3, r3, r1
 800102e:	1aca      	subs	r2, r1, r3
 8001030:	0852      	lsrs	r2, r2, #1
 8001032:	4413      	add	r3, r2
 8001034:	091a      	lsrs	r2, r3, #4
 8001036:	4613      	mov	r3, r2
 8001038:	015b      	lsls	r3, r3, #5
 800103a:	1a9b      	subs	r3, r3, r2
 800103c:	1aca      	subs	r2, r1, r3
 800103e:	f102 031e 	add.w	r3, r2, #30
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001044:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001046:	4b65      	ldr	r3, [pc, #404]	; (80011dc <generate_next_break+0x1e0>)
 8001048:	fba3 2301 	umull	r2, r3, r3, r1
 800104c:	095a      	lsrs	r2, r3, #5
 800104e:	4613      	mov	r3, r2
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	1a9b      	subs	r3, r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	1aca      	subs	r2, r1, r3
 8001058:	4613      	mov	r3, r2
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
		WallClock temp_clock11 = { .hour = 0, .minute = (random % 5), .second = (random % 60)};
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001062:	4b5f      	ldr	r3, [pc, #380]	; (80011e0 <generate_next_break+0x1e4>)
 8001064:	fba3 2301 	umull	r2, r3, r3, r1
 8001068:	089a      	lsrs	r2, r3, #2
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	1aca      	subs	r2, r1, r3
 8001072:	4613      	mov	r3, r2
 8001074:	623b      	str	r3, [r7, #32]
 8001076:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001078:	4b58      	ldr	r3, [pc, #352]	; (80011dc <generate_next_break+0x1e0>)
 800107a:	fba3 2301 	umull	r2, r3, r3, r1
 800107e:	095a      	lsrs	r2, r3, #5
 8001080:	4613      	mov	r3, r2
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	1aca      	subs	r2, r1, r3
 800108a:	4613      	mov	r3, r2
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
		//Initialize both clocks
		breaker.break_time[teller_id] = clock_init(breaker.break_time[teller_id]);
 800108e:	4950      	ldr	r1, [pc, #320]	; (80011d0 <generate_next_break+0x1d4>)
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	f103 0408 	add.w	r4, r3, #8
 80010a0:	4638      	mov	r0, r7
 80010a2:	494b      	ldr	r1, [pc, #300]	; (80011d0 <generate_next_break+0x1d4>)
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	3308      	adds	r3, #8
 80010b2:	3304      	adds	r3, #4
 80010b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010b6:	f000 f897 	bl	80011e8 <clock_init>
 80010ba:	1d23      	adds	r3, r4, #4
 80010bc:	463a      	mov	r2, r7
 80010be:	ca07      	ldmia	r2, {r0, r1, r2}
 80010c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration[teller_id] = clock_init(breaker.break_duration[teller_id]);
 80010c4:	4942      	ldr	r1, [pc, #264]	; (80011d0 <generate_next_break+0x1d4>)
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80010d6:	4638      	mov	r0, r7
 80010d8:	493d      	ldr	r1, [pc, #244]	; (80011d0 <generate_next_break+0x1d4>)
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	3330      	adds	r3, #48	; 0x30
 80010e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ea:	f000 f87d 	bl	80011e8 <clock_init>
 80010ee:	463b      	mov	r3, r7
 80010f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		//Set the clocks to their proper values
		breaker.break_time[teller_id]= add_clocks(breaker.break_time[teller_id],Clock);
 80010f8:	4935      	ldr	r1, [pc, #212]	; (80011d0 <generate_next_break+0x1d4>)
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	440b      	add	r3, r1
 8001106:	f103 0408 	add.w	r4, r3, #8
 800110a:	463e      	mov	r6, r7
 800110c:	4930      	ldr	r1, [pc, #192]	; (80011d0 <generate_next_break+0x1d4>)
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	f103 0508 	add.w	r5, r3, #8
 800111e:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <generate_next_break+0x1e8>)
 8001120:	466b      	mov	r3, sp
 8001122:	ca07      	ldmia	r2, {r0, r1, r2}
 8001124:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001128:	1d2b      	adds	r3, r5, #4
 800112a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800112c:	4630      	mov	r0, r6
 800112e:	f000 f8c8 	bl	80012c2 <add_clocks>
 8001132:	1d23      	adds	r3, r4, #4
 8001134:	463a      	mov	r2, r7
 8001136:	ca07      	ldmia	r2, {r0, r1, r2}
 8001138:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time[teller_id] = add_clocks(breaker.break_time[teller_id],temp_clock1);
 800113c:	4924      	ldr	r1, [pc, #144]	; (80011d0 <generate_next_break+0x1d4>)
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	f103 0508 	add.w	r5, r3, #8
 800114e:	46bc      	mov	ip, r7
 8001150:	491f      	ldr	r1, [pc, #124]	; (80011d0 <generate_next_break+0x1d4>)
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	f103 0608 	add.w	r6, r3, #8
 8001162:	466c      	mov	r4, sp
 8001164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001168:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800116c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001170:	1d33      	adds	r3, r6, #4
 8001172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001174:	4660      	mov	r0, ip
 8001176:	f000 f8a4 	bl	80012c2 <add_clocks>
 800117a:	1d2b      	adds	r3, r5, #4
 800117c:	463a      	mov	r2, r7
 800117e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001180:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration[teller_id] = add_clocks(breaker.break_duration[teller_id],temp_clock11);
 8001184:	4912      	ldr	r1, [pc, #72]	; (80011d0 <generate_next_break+0x1d4>)
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	f103 0630 	add.w	r6, r3, #48	; 0x30
 8001196:	463d      	mov	r5, r7
 8001198:	490d      	ldr	r1, [pc, #52]	; (80011d0 <generate_next_break+0x1d4>)
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	3330      	adds	r3, #48	; 0x30
 80011a8:	466c      	mov	r4, sp
 80011aa:	f107 021c 	add.w	r2, r7, #28
 80011ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b6:	4628      	mov	r0, r5
 80011b8:	f000 f883 	bl	80012c2 <add_clocks>
 80011bc:	4634      	mov	r4, r6
 80011be:	463b      	mov	r3, r7
 80011c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}


}
 80011c8:	bf00      	nop
 80011ca:	373c      	adds	r7, #60	; 0x3c
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d0:	200000d0 	.word	0x200000d0
 80011d4:	200002e8 	.word	0x200002e8
 80011d8:	08421085 	.word	0x08421085
 80011dc:	88888889 	.word	0x88888889
 80011e0:	cccccccd 	.word	0xcccccccd
 80011e4:	20000038 	.word	0x20000038

080011e8 <clock_init>:
//The main clock to be checked by the program
//Declare extern within the header file
WallClock Clock = {.hour = 9, .minute = 0, .second = 0};


WallClock clock_init(WallClock the_clock) {
 80011e8:	b490      	push	{r4, r7}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	4638      	mov	r0, r7
 80011f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Initialize the main clock
	WallClock tempClock = the_clock;
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	463a      	mov	r2, r7
 80011fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80011fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	tempClock.hour = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
	tempClock.minute = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
	tempClock.second = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]

	return tempClock;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	461c      	mov	r4, r3
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800121a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bc90      	pop	{r4, r7}
 8001226:	4770      	bx	lr

08001228 <day_init>:

WallClock day_init(WallClock the_clock) {
 8001228:	b490      	push	{r4, r7}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	4638      	mov	r0, r7
 8001232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Initialize the main clock
	WallClock tempClock = the_clock;
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	463a      	mov	r2, r7
 800123c:	ca07      	ldmia	r2, {r0, r1, r2}
 800123e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	tempClock.hour = 9;
 8001242:	2309      	movs	r3, #9
 8001244:	617b      	str	r3, [r7, #20]
	tempClock.minute = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
	tempClock.second = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]

	return tempClock;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	461c      	mov	r4, r3
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800125a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bc90      	pop	{r4, r7}
 8001266:	4770      	bx	lr

08001268 <clock_increment>:

WallClock clock_increment(WallClock the_clock){
 8001268:	b490      	push	{r4, r7}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	4638      	mov	r0, r7
 8001272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	WallClock tempClock = the_clock;
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	463a      	mov	r2, r7
 800127c:	ca07      	ldmia	r2, {r0, r1, r2}
 800127e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Check if second is full, if so then increment
	//minute count and reset second count to 0
	//if minute count full increment hour count and reset minutes to 0
	tempClock.second++;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3301      	adds	r3, #1
 8001286:	61fb      	str	r3, [r7, #28]
	if(tempClock.second == 60){
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	2b3c      	cmp	r3, #60	; 0x3c
 800128c:	d104      	bne.n	8001298 <clock_increment+0x30>
		tempClock.minute++;
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	3301      	adds	r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
		tempClock.second = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
	}
	if(tempClock.minute == 60){
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	2b3c      	cmp	r3, #60	; 0x3c
 800129c:	d104      	bne.n	80012a8 <clock_increment+0x40>
		tempClock.hour++;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3301      	adds	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
		tempClock.minute= 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
	}
	return tempClock;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	461c      	mov	r4, r3
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc90      	pop	{r4, r7}
 80012c0:	4770      	bx	lr

080012c2 <add_clocks>:

WallClock add_clocks(WallClock Clock1, WallClock Clock2){
 80012c2:	b490      	push	{r4, r7}
 80012c4:	b088      	sub	sp, #32
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	4638      	mov	r0, r7
 80012cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	WallClock tempClock = Clock1;
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	463a      	mov	r2, r7
 80012d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Adds seconds then minutes then hours, accounting for overflows as needed
	//Add seconds and account overflow
	tempClock.second += Clock2.second;
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e0:	4413      	add	r3, r2
 80012e2:	61fb      	str	r3, [r7, #28]
	if(tempClock.second >= 60){
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	2b3b      	cmp	r3, #59	; 0x3b
 80012e8:	dd0e      	ble.n	8001308 <add_clocks+0x46>
		tempClock.minute += 1;
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	3301      	adds	r3, #1
 80012ee:	61bb      	str	r3, [r7, #24]
		tempClock.second -= 60;
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	3b3c      	subs	r3, #60	; 0x3c
 80012f4:	61fb      	str	r3, [r7, #28]
		if(tempClock.minute >= 60){
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2b3b      	cmp	r3, #59	; 0x3b
 80012fa:	dd05      	ble.n	8001308 <add_clocks+0x46>
			tempClock.hour += 1;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
			tempClock.minute -= 60;
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	3b3c      	subs	r3, #60	; 0x3c
 8001306:	61bb      	str	r3, [r7, #24]
		}
	}
	//Add minutes and account overflow
	tempClock.minute += Clock2.minute;
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800130c:	4413      	add	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
	if(tempClock.minute >= 60){
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	2b3b      	cmp	r3, #59	; 0x3b
 8001314:	dd05      	ble.n	8001322 <add_clocks+0x60>
		tempClock.hour += 1;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
		tempClock.minute -= 60;
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	3b3c      	subs	r3, #60	; 0x3c
 8001320:	61bb      	str	r3, [r7, #24]
	}
	//Add hours, don't account overflow as impossible
	tempClock.hour += Clock2.hour;
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001326:	4413      	add	r3, r2
 8001328:	617b      	str	r3, [r7, #20]

	return tempClock;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	461c      	mov	r4, r3
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bc90      	pop	{r4, r7}
 8001342:	4770      	bx	lr

08001344 <clock_compare>:

//if clock 1 is greater than clock 2(later) then return 0
//if clock 1 is less than clock 2(earlier) then return 2
int clock_compare(WallClock Clock1, WallClock Clock2){
 8001344:	b082      	sub	sp, #8
 8001346:	b490      	push	{r4, r7}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	1d3c      	adds	r4, r7, #4
 800134e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001352:	61fb      	str	r3, [r7, #28]
	if(Clock1.hour == Clock2.hour){
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	429a      	cmp	r2, r3
 800135a:	d121      	bne.n	80013a0 <clock_compare+0x5c>
		if(Clock1.minute == Clock2.minute){
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	429a      	cmp	r2, r3
 8001362:	d111      	bne.n	8001388 <clock_compare+0x44>
			if(Clock1.second == Clock2.second){
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	429a      	cmp	r2, r3
 800136a:	d101      	bne.n	8001370 <clock_compare+0x2c>
				return 1;
 800136c:	2301      	movs	r3, #1
 800136e:	e024      	b.n	80013ba <clock_compare+0x76>
			}
			else if(Clock1.second > Clock2.second){
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	429a      	cmp	r2, r3
 8001376:	dd01      	ble.n	800137c <clock_compare+0x38>
				return 0;
 8001378:	2300      	movs	r3, #0
 800137a:	e01e      	b.n	80013ba <clock_compare+0x76>
			}
			else if(Clock1.second < Clock2.second){
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	429a      	cmp	r2, r3
 8001382:	da19      	bge.n	80013b8 <clock_compare+0x74>
				return 2;
 8001384:	2302      	movs	r3, #2
 8001386:	e018      	b.n	80013ba <clock_compare+0x76>
			}
		}
		else if(Clock1.minute > Clock2.minute){
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	429a      	cmp	r2, r3
 800138e:	dd01      	ble.n	8001394 <clock_compare+0x50>
			return 0;
 8001390:	2300      	movs	r3, #0
 8001392:	e012      	b.n	80013ba <clock_compare+0x76>
		}
		else if(Clock1.minute < Clock2.minute){
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	429a      	cmp	r2, r3
 800139a:	da0d      	bge.n	80013b8 <clock_compare+0x74>
			return 2;
 800139c:	2302      	movs	r3, #2
 800139e:	e00c      	b.n	80013ba <clock_compare+0x76>
		}
	}
	else if(Clock1.hour > Clock2.hour){
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dd01      	ble.n	80013ac <clock_compare+0x68>
		return 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	e006      	b.n	80013ba <clock_compare+0x76>
	}
	else if(Clock1.hour < Clock2.hour){
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	da01      	bge.n	80013b8 <clock_compare+0x74>
		return 2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	e000      	b.n	80013ba <clock_compare+0x76>
	}
	return 0;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc90      	pop	{r4, r7}
 80013c2:	b002      	add	sp, #8
 80013c4:	4770      	bx	lr
	...

080013c8 <subtract_Clocks>:

WallClock subtract_Clocks(WallClock clock1, WallClock clock2) {
 80013c8:	b490      	push	{r4, r7}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	4638      	mov	r0, r7
 80013d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    WallClock result;

    // Convert both clocks to total seconds
    int totalSeconds1 = clock1.hour * 3600 + clock1.minute * 60 + clock1.second;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80013dc:	fb02 f103 	mul.w	r1, r2, r3
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	1a9b      	subs	r3, r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	18ca      	adds	r2, r1, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4413      	add	r3, r2
 80013f0:	623b      	str	r3, [r7, #32]
    int totalSeconds2 = clock2.hour * 3600 + clock2.minute * 60 + clock2.second;
 80013f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80013f8:	fb02 f103 	mul.w	r1, r2, r3
 80013fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013fe:	4613      	mov	r3, r2
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	1a9b      	subs	r3, r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	18ca      	adds	r2, r1, r3
 8001408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800140a:	4413      	add	r3, r2
 800140c:	61fb      	str	r3, [r7, #28]

    // Calculate the difference in total seconds
    int diffSeconds = totalSeconds1 - totalSeconds2;
 800140e:	6a3a      	ldr	r2, [r7, #32]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	627b      	str	r3, [r7, #36]	; 0x24

    // Handle negative differences
    if (diffSeconds < 0) {
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	2b00      	cmp	r3, #0
 800141a:	da05      	bge.n	8001428 <subtract_Clocks+0x60>
        diffSeconds += 24 * 3600; // Assuming clocks are within a 24-hour period
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001422:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Convert difference back to clock format
    result.hour = diffSeconds / 3600;
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <subtract_Clocks+0xd8>)
 800142c:	fb82 1203 	smull	r1, r2, r2, r3
 8001430:	441a      	add	r2, r3
 8001432:	12d2      	asrs	r2, r2, #11
 8001434:	17db      	asrs	r3, r3, #31
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	613b      	str	r3, [r7, #16]
    diffSeconds %= 3600;
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <subtract_Clocks+0xd8>)
 800143e:	fb82 1203 	smull	r1, r2, r2, r3
 8001442:	441a      	add	r2, r3
 8001444:	12d1      	asrs	r1, r2, #11
 8001446:	17da      	asrs	r2, r3, #31
 8001448:	1a8a      	subs	r2, r1, r2
 800144a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800144e:	fb01 f202 	mul.w	r2, r1, r2
 8001452:	1a9b      	subs	r3, r3, r2
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
    result.minute = diffSeconds / 60;
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <subtract_Clocks+0xdc>)
 800145a:	fb82 1203 	smull	r1, r2, r2, r3
 800145e:	441a      	add	r2, r3
 8001460:	1152      	asrs	r2, r2, #5
 8001462:	17db      	asrs	r3, r3, #31
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	617b      	str	r3, [r7, #20]
    result.second = diffSeconds % 60;
 8001468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <subtract_Clocks+0xdc>)
 800146c:	fb83 1302 	smull	r1, r3, r3, r2
 8001470:	4413      	add	r3, r2
 8001472:	1159      	asrs	r1, r3, #5
 8001474:	17d3      	asrs	r3, r2, #31
 8001476:	1ac9      	subs	r1, r1, r3
 8001478:	460b      	mov	r3, r1
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	1a5b      	subs	r3, r3, r1
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	1ad1      	subs	r1, r2, r3
 8001482:	61b9      	str	r1, [r7, #24]

    return result;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	461c      	mov	r4, r3
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001490:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bc90      	pop	{r4, r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	91a2b3c5 	.word	0x91a2b3c5
 80014a4:	88888889 	.word	0x88888889

080014a8 <average_time>:

WallClock average_time(WallClock avgClock, int number){
 80014a8:	b490      	push	{r4, r7}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	4638      	mov	r0, r7
 80014b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	WallClock result;

	int totalSeconds = (avgClock.hour * 3600) + (avgClock.minute * 60) + avgClock.second;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80014bc:	fb02 f103 	mul.w	r1, r2, r3
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	1a9b      	subs	r3, r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	18ca      	adds	r2, r1, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4413      	add	r3, r2
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24

	int avgTime = totalSeconds / number;
 80014d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80014da:	623b      	str	r3, [r7, #32]

	result.hour = avgTime / 3600;
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	4a22      	ldr	r2, [pc, #136]	; (8001568 <average_time+0xc0>)
 80014e0:	fb82 1203 	smull	r1, r2, r2, r3
 80014e4:	441a      	add	r2, r3
 80014e6:	12d2      	asrs	r2, r2, #11
 80014e8:	17db      	asrs	r3, r3, #31
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
	result.minute = (avgTime % 3600) / 60;
 80014ee:	6a3a      	ldr	r2, [r7, #32]
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <average_time+0xc0>)
 80014f2:	fb83 1302 	smull	r1, r3, r3, r2
 80014f6:	4413      	add	r3, r2
 80014f8:	12d9      	asrs	r1, r3, #11
 80014fa:	17d3      	asrs	r3, r2, #31
 80014fc:	1acb      	subs	r3, r1, r3
 80014fe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001502:	fb01 f303 	mul.w	r3, r1, r3
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	4a18      	ldr	r2, [pc, #96]	; (800156c <average_time+0xc4>)
 800150a:	fb82 1203 	smull	r1, r2, r2, r3
 800150e:	441a      	add	r2, r3
 8001510:	1152      	asrs	r2, r2, #5
 8001512:	17db      	asrs	r3, r3, #31
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	61bb      	str	r3, [r7, #24]
	result.second = (avgTime % 3600) % 60;
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <average_time+0xc0>)
 800151c:	fb82 1203 	smull	r1, r2, r2, r3
 8001520:	441a      	add	r2, r3
 8001522:	12d1      	asrs	r1, r2, #11
 8001524:	17da      	asrs	r2, r3, #31
 8001526:	1a8a      	subs	r2, r1, r2
 8001528:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800152c:	fb01 f202 	mul.w	r2, r1, r2
 8001530:	1a9a      	subs	r2, r3, r2
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <average_time+0xc4>)
 8001534:	fb83 1302 	smull	r1, r3, r3, r2
 8001538:	4413      	add	r3, r2
 800153a:	1159      	asrs	r1, r3, #5
 800153c:	17d3      	asrs	r3, r2, #31
 800153e:	1ac9      	subs	r1, r1, r3
 8001540:	460b      	mov	r3, r1
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	1a5b      	subs	r3, r3, r1
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	1ad1      	subs	r1, r2, r3
 800154a:	61f9      	str	r1, [r7, #28]

	return result;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	461c      	mov	r4, r3
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	3728      	adds	r7, #40	; 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bc90      	pop	{r4, r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	91a2b3c5 	.word	0x91a2b3c5
 800156c:	88888889 	.word	0x88888889

08001570 <init_GPIO>:
WallClock max_customer_wait;
int total_customers;
WallClock fiveOclockSomewhere = {.hour = 17, .minute = 0, .second = 0};


void init_GPIO(){
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <init_GPIO+0xac>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	4a28      	ldr	r2, [pc, #160]	; (800161c <init_GPIO+0xac>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <init_GPIO+0xac>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <init_GPIO+0xac>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	4a22      	ldr	r2, [pc, #136]	; (800161c <init_GPIO+0xac>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <init_GPIO+0xac>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pins : SHLD_D13_Pin SHLD_D12_Pin SHLD_D11_Pin SHLD_D7_SEG7_Clock_Pin */
	GPIO_InitStruct.Pin = SHLD_D13_Pin|SHLD_D12_Pin|SHLD_D11_Pin|SHLD_D7_SEG7_Clock_Pin;
 80015b6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d2:	f001 fe43 	bl	800325c <HAL_GPIO_Init>

	/*Configure GPIO pin : SHLD_D8_SEG7_Data_Pin */
	GPIO_InitStruct.Pin = SHLD_D8_SEG7_Data_Pin;
 80015d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015e4:	2301      	movs	r3, #1
 80015e6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SHLD_D8_SEG7_Data_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f2:	f001 fe33 	bl	800325c <HAL_GPIO_Init>

	/*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
	GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 80015f6:	2320      	movs	r3, #32
 80015f8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	4619      	mov	r1, r3
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <init_GPIO+0xb0>)
 800160e:	f001 fe25 	bl	800325c <HAL_GPIO_Init>
}
 8001612:	bf00      	nop
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	48000400 	.word	0x48000400

08001624 <init_customer>:

void init_customer(){
 8001624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001626:	b08b      	sub	sp, #44	; 0x2c
 8001628:	af04      	add	r7, sp, #16
	uint32_t random_new_customer = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
	total_customers = 0;
 800162e:	4b3e      	ldr	r3, [pc, #248]	; (8001728 <init_customer+0x104>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
	total_customer_wait = clock_init(total_customer_wait);
 8001634:	4c3d      	ldr	r4, [pc, #244]	; (800172c <init_customer+0x108>)
 8001636:	4638      	mov	r0, r7
 8001638:	4b3c      	ldr	r3, [pc, #240]	; (800172c <init_customer+0x108>)
 800163a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163c:	f7ff fdd4 	bl	80011e8 <clock_init>
 8001640:	463b      	mov	r3, r7
 8001642:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	max_customer_waiting = 0;
 800164a:	4b39      	ldr	r3, [pc, #228]	; (8001730 <init_customer+0x10c>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
	max_customer_wait = clock_init(max_customer_wait);
 8001650:	4c38      	ldr	r4, [pc, #224]	; (8001734 <init_customer+0x110>)
 8001652:	4638      	mov	r0, r7
 8001654:	4b37      	ldr	r3, [pc, #220]	; (8001734 <init_customer+0x110>)
 8001656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001658:	f7ff fdc6 	bl	80011e8 <clock_init>
 800165c:	463b      	mov	r3, r7
 800165e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	waiting_customers = 0;
 8001666:	4b34      	ldr	r3, [pc, #208]	; (8001738 <init_customer+0x114>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
	HAL_RNG_GenerateRandomNumber(&hrng, &random_new_customer);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	4832      	ldr	r0, [pc, #200]	; (800173c <init_customer+0x118>)
 8001674:	f003 fb43 	bl	8004cfe <HAL_RNG_GenerateRandomNumber>
	new_customer_time.hour = 0;
 8001678:	4b31      	ldr	r3, [pc, #196]	; (8001740 <init_customer+0x11c>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
	new_customer_time.minute = (random_new_customer % 3) + 1;
 800167e:	6979      	ldr	r1, [r7, #20]
 8001680:	4b30      	ldr	r3, [pc, #192]	; (8001744 <init_customer+0x120>)
 8001682:	fba3 2301 	umull	r2, r3, r3, r1
 8001686:	085a      	lsrs	r2, r3, #1
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	1aca      	subs	r2, r1, r3
 8001690:	1c53      	adds	r3, r2, #1
 8001692:	461a      	mov	r2, r3
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <init_customer+0x11c>)
 8001696:	605a      	str	r2, [r3, #4]
	new_customer_time.second = (random_new_customer % 60);
 8001698:	6979      	ldr	r1, [r7, #20]
 800169a:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <init_customer+0x124>)
 800169c:	fba3 2301 	umull	r2, r3, r3, r1
 80016a0:	095a      	lsrs	r2, r3, #5
 80016a2:	4613      	mov	r3, r2
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	1aca      	subs	r2, r1, r3
 80016ac:	4b24      	ldr	r3, [pc, #144]	; (8001740 <init_customer+0x11c>)
 80016ae:	609a      	str	r2, [r3, #8]
	new_customer_time = add_clocks(new_customer_time, Clock);
 80016b0:	4e23      	ldr	r6, [pc, #140]	; (8001740 <init_customer+0x11c>)
 80016b2:	463d      	mov	r5, r7
 80016b4:	4c22      	ldr	r4, [pc, #136]	; (8001740 <init_customer+0x11c>)
 80016b6:	4a25      	ldr	r2, [pc, #148]	; (800174c <init_customer+0x128>)
 80016b8:	466b      	mov	r3, sp
 80016ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80016bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016c0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80016c4:	4628      	mov	r0, r5
 80016c6:	f7ff fdfc 	bl	80012c2 <add_clocks>
 80016ca:	4634      	mov	r4, r6
 80016cc:	463b      	mov	r3, r7
 80016ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	init_GPIO();
 80016d6:	f7ff ff4b 	bl	8001570 <init_GPIO>
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2120      	movs	r1, #32
 80016de:	481c      	ldr	r0, [pc, #112]	; (8001750 <init_customer+0x12c>)
 80016e0:	f001 ff7e 	bl	80035e0 <HAL_GPIO_WritePin>
			shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, 0);
 80016e4:	2300      	movs	r3, #0
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80016f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f8:	f7ff fa3e 	bl	8000b78 <shiftOut>
			shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, 0);
 80016fc:	2300      	movs	r3, #0
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001704:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800170c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001710:	f7ff fa32 	bl	8000b78 <shiftOut>
			HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 8001714:	2201      	movs	r2, #1
 8001716:	2120      	movs	r1, #32
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <init_customer+0x12c>)
 800171a:	f001 ff61 	bl	80035e0 <HAL_GPIO_WritePin>

}
 800171e:	bf00      	nop
 8001720:	371c      	adds	r7, #28
 8001722:	46bd      	mov	sp, r7
 8001724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001726:	bf00      	nop
 8001728:	200002e0 	.word	0x200002e0
 800172c:	200002c8 	.word	0x200002c8
 8001730:	20000124 	.word	0x20000124
 8001734:	200002d4 	.word	0x200002d4
 8001738:	20000128 	.word	0x20000128
 800173c:	200002e8 	.word	0x200002e8
 8001740:	200002bc 	.word	0x200002bc
 8001744:	aaaaaaab 	.word	0xaaaaaaab
 8001748:	88888889 	.word	0x88888889
 800174c:	20000038 	.word	0x20000038
 8001750:	48000400 	.word	0x48000400

08001754 <run_customer>:



void run_customer(){
 8001754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001756:	b093      	sub	sp, #76	; 0x4c
 8001758:	af04      	add	r7, sp, #16
	uint32_t random_service_time =0;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t random_new_customer = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
	// shift customers if first customers want to
	if((waiting[0] == NULL) && waiting[1] != NULL){
 8001762:	4b68      	ldr	r3, [pc, #416]	; (8001904 <run_customer+0x1b0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d117      	bne.n	800179a <run_customer+0x46>
 800176a:	4b66      	ldr	r3, [pc, #408]	; (8001904 <run_customer+0x1b0>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d013      	beq.n	800179a <run_customer+0x46>
		for (int i = 0; i <= waiting_customers; i++){
 8001772:	2300      	movs	r3, #0
 8001774:	637b      	str	r3, [r7, #52]	; 0x34
 8001776:	e00b      	b.n	8001790 <run_customer+0x3c>
			waiting[i] = waiting[i+1];
 8001778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177a:	3301      	adds	r3, #1
 800177c:	4a61      	ldr	r2, [pc, #388]	; (8001904 <run_customer+0x1b0>)
 800177e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001782:	4960      	ldr	r1, [pc, #384]	; (8001904 <run_customer+0x1b0>)
 8001784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i <= waiting_customers; i++){
 800178a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178c:	3301      	adds	r3, #1
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
 8001790:	4b5d      	ldr	r3, [pc, #372]	; (8001908 <run_customer+0x1b4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001796:	429a      	cmp	r2, r3
 8001798:	ddee      	ble.n	8001778 <run_customer+0x24>
//	for (int i = 0; i < waiting_customers; i++){
//		waiting[i]->total_queue_time = clock_increment(waiting[i]->total_queue_time);
//	}

	// add new customer if enough time has passed
	if (clock_compare(Clock, new_customer_time) == 1 && clock_compare(Clock, fiveOclockSomewhere) == 2){
 800179a:	4b5c      	ldr	r3, [pc, #368]	; (800190c <run_customer+0x1b8>)
 800179c:	4a5c      	ldr	r2, [pc, #368]	; (8001910 <run_customer+0x1bc>)
 800179e:	466c      	mov	r4, sp
 80017a0:	1d19      	adds	r1, r3, #4
 80017a2:	c903      	ldmia	r1, {r0, r1}
 80017a4:	e884 0003 	stmia.w	r4, {r0, r1}
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ac:	f7ff fdca 	bl	8001344 <clock_compare>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	f040 8097 	bne.w	80018e6 <run_customer+0x192>
 80017b8:	4b56      	ldr	r3, [pc, #344]	; (8001914 <run_customer+0x1c0>)
 80017ba:	4a55      	ldr	r2, [pc, #340]	; (8001910 <run_customer+0x1bc>)
 80017bc:	466c      	mov	r4, sp
 80017be:	1d19      	adds	r1, r3, #4
 80017c0:	c903      	ldmia	r1, {r0, r1}
 80017c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ca:	f7ff fdbb 	bl	8001344 <clock_compare>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	f040 8088 	bne.w	80018e6 <run_customer+0x192>
//		char buf[20];
//				sprintf(buf, "\r\n\r\n%d\r\n\r\n", waiting[1]->id);
//				HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), 100);
		HAL_RNG_GenerateRandomNumber(&hrng, &random_service_time);
 80017d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017da:	4619      	mov	r1, r3
 80017dc:	484e      	ldr	r0, [pc, #312]	; (8001918 <run_customer+0x1c4>)
 80017de:	f003 fa8e 	bl	8004cfe <HAL_RNG_GenerateRandomNumber>
		WallClock service_time = { .hour = 0, .minute = (random_service_time % 5) + 1, .second = (random_service_time % 60)};
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017e8:	4b4c      	ldr	r3, [pc, #304]	; (800191c <run_customer+0x1c8>)
 80017ea:	fba3 2301 	umull	r2, r3, r3, r1
 80017ee:	089a      	lsrs	r2, r3, #2
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	1aca      	subs	r2, r1, r3
 80017f8:	1c53      	adds	r3, r2, #1
 80017fa:	623b      	str	r3, [r7, #32]
 80017fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017fe:	4b48      	ldr	r3, [pc, #288]	; (8001920 <run_customer+0x1cc>)
 8001800:	fba3 2301 	umull	r2, r3, r3, r1
 8001804:	095a      	lsrs	r2, r3, #5
 8001806:	4613      	mov	r3, r2
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	1a9b      	subs	r3, r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	1aca      	subs	r2, r1, r3
 8001810:	4613      	mov	r3, r2
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
//		WallClock service_time = { .hour = 0, .minute = 2, .second = 31};
		Customer *c = malloc(sizeof(Customer));
 8001814:	2034      	movs	r0, #52	; 0x34
 8001816:	f007 fdd1 	bl	80093bc <malloc>
 800181a:	4603      	mov	r3, r0
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
		c->service_time = service_time;
 800181e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001820:	3304      	adds	r3, #4
 8001822:	f107 021c 	add.w	r2, r7, #28
 8001826:	ca07      	ldmia	r2, {r0, r1, r2}
 8001828:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		c->id = ++total_customers;
 800182c:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <run_customer+0x1d0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	4a3c      	ldr	r2, [pc, #240]	; (8001924 <run_customer+0x1d0>)
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <run_customer+0x1d0>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800183c:	601a      	str	r2, [r3, #0]
		c->entered_queue_time = Clock;
 800183e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001840:	4a33      	ldr	r2, [pc, #204]	; (8001910 <run_customer+0x1bc>)
 8001842:	3310      	adds	r3, #16
 8001844:	ca07      	ldmia	r2, {r0, r1, r2}
 8001846:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		c->total_queue_time = (WallClock) {.hour = 0, .minute = 0, .second = 0};
 800184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184c:	2200      	movs	r2, #0
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
 8001850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001852:	2200      	movs	r2, #0
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
 8001856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001858:	2200      	movs	r2, #0
 800185a:	631a      	str	r2, [r3, #48]	; 0x30
		waiting[waiting_customers++] = c;
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <run_customer+0x1b4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	4929      	ldr	r1, [pc, #164]	; (8001908 <run_customer+0x1b4>)
 8001864:	600a      	str	r2, [r1, #0]
 8001866:	4927      	ldr	r1, [pc, #156]	; (8001904 <run_customer+0x1b0>)
 8001868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//		waiting[waiting_customers + 1] = c;
		HAL_RNG_GenerateRandomNumber(&hrng, &random_new_customer);
 800186e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001872:	4619      	mov	r1, r3
 8001874:	4828      	ldr	r0, [pc, #160]	; (8001918 <run_customer+0x1c4>)
 8001876:	f003 fa42 	bl	8004cfe <HAL_RNG_GenerateRandomNumber>
		new_customer_time.hour = 0;
 800187a:	4b24      	ldr	r3, [pc, #144]	; (800190c <run_customer+0x1b8>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
		new_customer_time.minute = (random_new_customer % 3) + 1;
 8001880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <run_customer+0x1d4>)
 8001884:	fba3 2301 	umull	r2, r3, r3, r1
 8001888:	085a      	lsrs	r2, r3, #1
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	1aca      	subs	r2, r1, r3
 8001892:	1c53      	adds	r3, r2, #1
 8001894:	461a      	mov	r2, r3
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <run_customer+0x1b8>)
 8001898:	605a      	str	r2, [r3, #4]
		if(new_customer_time.minute == 0){
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <run_customer+0x1b8>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <run_customer+0x154>
			new_customer_time.minute = 1;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <run_customer+0x1b8>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	605a      	str	r2, [r3, #4]
		}
		new_customer_time.second = (random_new_customer % 60);
 80018a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <run_customer+0x1cc>)
 80018ac:	fba3 2301 	umull	r2, r3, r3, r1
 80018b0:	095a      	lsrs	r2, r3, #5
 80018b2:	4613      	mov	r3, r2
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	1aca      	subs	r2, r1, r3
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <run_customer+0x1b8>)
 80018be:	609a      	str	r2, [r3, #8]
		new_customer_time = add_clocks(new_customer_time, Clock);
 80018c0:	4e12      	ldr	r6, [pc, #72]	; (800190c <run_customer+0x1b8>)
 80018c2:	463d      	mov	r5, r7
 80018c4:	4c11      	ldr	r4, [pc, #68]	; (800190c <run_customer+0x1b8>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <run_customer+0x1bc>)
 80018c8:	466b      	mov	r3, sp
 80018ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80018cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80018d0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80018d4:	4628      	mov	r0, r5
 80018d6:	f7ff fcf4 	bl	80012c2 <add_clocks>
 80018da:	4634      	mov	r4, r6
 80018dc:	463b      	mov	r3, r7
 80018de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//		sprintf(buf, "\r\n\r\n%d:%d:%d\r\n\r\n", &waiting[0]->service_time.hour, &waiting[0]->service_time.minute, &waiting[0]->service_time.second);
//				print(buf);
	}

	// update max customers waiting
	if (max_customer_waiting < waiting_customers){
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <run_customer+0x1d8>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <run_customer+0x1b4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	da03      	bge.n	80018fa <run_customer+0x1a6>
		max_customer_waiting = waiting_customers;
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <run_customer+0x1b4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a0d      	ldr	r2, [pc, #52]	; (800192c <run_customer+0x1d8>)
 80018f8:	6013      	str	r3, [r2, #0]
	}

//	uint32_t display_num = 0;


}
 80018fa:	bf00      	nop
 80018fc:	373c      	adds	r7, #60	; 0x3c
 80018fe:	46bd      	mov	sp, r7
 8001900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001902:	bf00      	nop
 8001904:	2000012c 	.word	0x2000012c
 8001908:	20000128 	.word	0x20000128
 800190c:	200002bc 	.word	0x200002bc
 8001910:	20000038 	.word	0x20000038
 8001914:	20000044 	.word	0x20000044
 8001918:	200002e8 	.word	0x200002e8
 800191c:	cccccccd 	.word	0xcccccccd
 8001920:	88888889 	.word	0x88888889
 8001924:	200002e0 	.word	0x200002e0
 8001928:	aaaaaaab 	.word	0xaaaaaaab
 800192c:	20000124 	.word	0x20000124

08001930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001934:	f001 fb04 	bl	8002f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001938:	f000 f87e 	bl	8001a38 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193c:	f000 f948 	bl	8001bd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001940:	f000 f916 	bl	8001b70 <MX_USART2_UART_Init>
  MX_RNG_Init();
 8001944:	f000 f8ca 	bl	8001adc <MX_RNG_Init>
  MX_TIM6_Init();
 8001948:	f000 f8dc 	bl	8001b04 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800194c:	4822      	ldr	r0, [pc, #136]	; (80019d8 <main+0xa8>)
 800194e:	f003 fb03 	bl	8004f58 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001952:	f004 fbb5 	bl	80060c0 <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 8001956:	4821      	ldr	r0, [pc, #132]	; (80019dc <main+0xac>)
 8001958:	f004 fcae 	bl	80062b8 <osMutexNew>
 800195c:	4603      	mov	r3, r0
 800195e:	4a20      	ldr	r2, [pc, #128]	; (80019e0 <main+0xb0>)
 8001960:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Teller0 */
  Teller0Handle = osThreadNew(StartTeller0, NULL, &Teller0_attributes);
 8001962:	4a20      	ldr	r2, [pc, #128]	; (80019e4 <main+0xb4>)
 8001964:	2100      	movs	r1, #0
 8001966:	4820      	ldr	r0, [pc, #128]	; (80019e8 <main+0xb8>)
 8001968:	f004 fbf4 	bl	8006154 <osThreadNew>
 800196c:	4603      	mov	r3, r0
 800196e:	4a1f      	ldr	r2, [pc, #124]	; (80019ec <main+0xbc>)
 8001970:	6013      	str	r3, [r2, #0]

  /* creation of Customers */
  CustomersHandle = osThreadNew(StartCustomers, NULL, &Customers_attributes);
 8001972:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <main+0xc0>)
 8001974:	2100      	movs	r1, #0
 8001976:	481f      	ldr	r0, [pc, #124]	; (80019f4 <main+0xc4>)
 8001978:	f004 fbec 	bl	8006154 <osThreadNew>
 800197c:	4603      	mov	r3, r0
 800197e:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <main+0xc8>)
 8001980:	6013      	str	r3, [r2, #0]

  /* creation of Clock */
  ClockHandle = osThreadNew(StartClock, NULL, &Clock_attributes);
 8001982:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <main+0xcc>)
 8001984:	2100      	movs	r1, #0
 8001986:	481e      	ldr	r0, [pc, #120]	; (8001a00 <main+0xd0>)
 8001988:	f004 fbe4 	bl	8006154 <osThreadNew>
 800198c:	4603      	mov	r3, r0
 800198e:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <main+0xd4>)
 8001990:	6013      	str	r3, [r2, #0]

  /* creation of Manager */
  ManagerHandle = osThreadNew(StartManager, NULL, &Manager_attributes);
 8001992:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <main+0xd8>)
 8001994:	2100      	movs	r1, #0
 8001996:	481d      	ldr	r0, [pc, #116]	; (8001a0c <main+0xdc>)
 8001998:	f004 fbdc 	bl	8006154 <osThreadNew>
 800199c:	4603      	mov	r3, r0
 800199e:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <main+0xe0>)
 80019a0:	6013      	str	r3, [r2, #0]

  /* creation of Breaker */
  BreakerHandle = osThreadNew(StartBreaker, NULL, &Breaker_attributes);
 80019a2:	4a1c      	ldr	r2, [pc, #112]	; (8001a14 <main+0xe4>)
 80019a4:	2100      	movs	r1, #0
 80019a6:	481c      	ldr	r0, [pc, #112]	; (8001a18 <main+0xe8>)
 80019a8:	f004 fbd4 	bl	8006154 <osThreadNew>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <main+0xec>)
 80019b0:	6013      	str	r3, [r2, #0]

  /* creation of Teller1 */
  Teller1Handle = osThreadNew(StartTeller1, NULL, &Teller1_attributes);
 80019b2:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <main+0xf0>)
 80019b4:	2100      	movs	r1, #0
 80019b6:	481b      	ldr	r0, [pc, #108]	; (8001a24 <main+0xf4>)
 80019b8:	f004 fbcc 	bl	8006154 <osThreadNew>
 80019bc:	4603      	mov	r3, r0
 80019be:	4a1a      	ldr	r2, [pc, #104]	; (8001a28 <main+0xf8>)
 80019c0:	6013      	str	r3, [r2, #0]

  /* creation of Teller2 */
  Teller2Handle = osThreadNew(StartTeller2, NULL, &Teller2_attributes);
 80019c2:	4a1a      	ldr	r2, [pc, #104]	; (8001a2c <main+0xfc>)
 80019c4:	2100      	movs	r1, #0
 80019c6:	481a      	ldr	r0, [pc, #104]	; (8001a30 <main+0x100>)
 80019c8:	f004 fbc4 	bl	8006154 <osThreadNew>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <main+0x104>)
 80019d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019d2:	f004 fb99 	bl	8006108 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <main+0xa6>
 80019d8:	200002f8 	.word	0x200002f8
 80019dc:	0800a1c4 	.word	0x0800a1c4
 80019e0:	200003e8 	.word	0x200003e8
 80019e4:	0800a0c8 	.word	0x0800a0c8
 80019e8:	08001d29 	.word	0x08001d29
 80019ec:	200003cc 	.word	0x200003cc
 80019f0:	0800a0ec 	.word	0x0800a0ec
 80019f4:	08001d61 	.word	0x08001d61
 80019f8:	200003d0 	.word	0x200003d0
 80019fc:	0800a110 	.word	0x0800a110
 8001a00:	08001d95 	.word	0x08001d95
 8001a04:	200003d4 	.word	0x200003d4
 8001a08:	0800a134 	.word	0x0800a134
 8001a0c:	08001f25 	.word	0x08001f25
 8001a10:	200003d8 	.word	0x200003d8
 8001a14:	0800a158 	.word	0x0800a158
 8001a18:	08001f55 	.word	0x08001f55
 8001a1c:	200003dc 	.word	0x200003dc
 8001a20:	0800a17c 	.word	0x0800a17c
 8001a24:	08001f89 	.word	0x08001f89
 8001a28:	200003e0 	.word	0x200003e0
 8001a2c:	0800a1a0 	.word	0x0800a1a0
 8001a30:	08001fc1 	.word	0x08001fc1
 8001a34:	200003e4 	.word	0x200003e4

08001a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b096      	sub	sp, #88	; 0x58
 8001a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	2244      	movs	r2, #68	; 0x44
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f007 fd8c 	bl	8009564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a5e:	f001 fde5 	bl	800362c <HAL_PWREx_ControlVoltageScaling>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a68:	f000 fac6 	bl	8001ff8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001a6c:	2310      	movs	r3, #16
 8001a6e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a70:	2301      	movs	r3, #1
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a78:	2360      	movs	r3, #96	; 0x60
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a80:	2301      	movs	r3, #1
 8001a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001a88:	2328      	movs	r3, #40	; 0x28
 8001a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a90:	2302      	movs	r3, #2
 8001a92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a94:	2302      	movs	r3, #2
 8001a96:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f001 fe1b 	bl	80036d8 <HAL_RCC_OscConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001aa8:	f000 faa6 	bl	8001ff8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aac:	230f      	movs	r3, #15
 8001aae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 f9e3 	bl	8003e90 <HAL_RCC_ClockConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ad0:	f000 fa92 	bl	8001ff8 <Error_Handler>
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3758      	adds	r7, #88	; 0x58
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_RNG_Init+0x20>)
 8001ae2:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <MX_RNG_Init+0x24>)
 8001ae4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_RNG_Init+0x20>)
 8001ae8:	f003 f8b2 	bl	8004c50 <HAL_RNG_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001af2:	f000 fa81 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200002e8 	.word	0x200002e8
 8001b00:	50060800 	.word	0x50060800

08001b04 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b16:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <MX_TIM6_Init+0x68>)
 8001b18:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 600;
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b1c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001b20:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 222;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b2a:	22de      	movs	r2, #222	; 0xde
 8001b2c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b34:	480c      	ldr	r0, [pc, #48]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b36:	f003 f9b7 	bl	8004ea8 <HAL_TIM_Base_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b40:	f000 fa5a 	bl	8001ff8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_TIM6_Init+0x64>)
 8001b52:	f003 fc35 	bl	80053c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b5c:	f000 fa4c 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200002f8 	.word	0x200002f8
 8001b6c:	40001000 	.word	0x40001000

08001b70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b76:	4a15      	ldr	r2, [pc, #84]	; (8001bcc <MX_USART2_UART_Init+0x5c>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_USART2_UART_Init+0x58>)
 8001bb4:	f003 fcaa 	bl	800550c <HAL_UART_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bbe:	f000 fa1b 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000344 	.word	0x20000344
 8001bcc:	40004400 	.word	0x40004400

08001bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be6:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <MX_GPIO_Init+0x12c>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	4a44      	ldr	r2, [pc, #272]	; (8001cfc <MX_GPIO_Init+0x12c>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf2:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <MX_GPIO_Init+0x12c>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bfe:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <MX_GPIO_Init+0x12c>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	4a3e      	ldr	r2, [pc, #248]	; (8001cfc <MX_GPIO_Init+0x12c>)
 8001c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0a:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <MX_GPIO_Init+0x12c>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <MX_GPIO_Init+0x12c>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	4a38      	ldr	r2, [pc, #224]	; (8001cfc <MX_GPIO_Init+0x12c>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c22:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <MX_GPIO_Init+0x12c>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <MX_GPIO_Init+0x12c>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	4a32      	ldr	r2, [pc, #200]	; (8001cfc <MX_GPIO_Init+0x12c>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3a:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <MX_GPIO_Init+0x12c>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2120      	movs	r1, #32
 8001c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4e:	f001 fcc7 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4825      	ldr	r0, [pc, #148]	; (8001d00 <MX_GPIO_Init+0x130>)
 8001c6a:	f001 faf7 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c72:	2303      	movs	r3, #3
 8001c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	481f      	ldr	r0, [pc, #124]	; (8001d00 <MX_GPIO_Init+0x130>)
 8001c82:	f001 faeb 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 Switch1_Pin Switch2_Pin PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Switch1_Pin|Switch2_Pin|GPIO_PIN_10;
 8001c86:	f240 4313 	movw	r3, #1043	; 0x413
 8001c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9e:	f001 fadd 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbc:	f001 face 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch3_Pin PB10 PB4 */
  GPIO_InitStruct.Pin = Switch3_Pin|GPIO_PIN_10|GPIO_PIN_4;
 8001cc0:	f240 4311 	movw	r3, #1041	; 0x411
 8001cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480b      	ldr	r0, [pc, #44]	; (8001d04 <MX_GPIO_Init+0x134>)
 8001cd6:	f001 fac1 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	4804      	ldr	r0, [pc, #16]	; (8001d00 <MX_GPIO_Init+0x130>)
 8001cee:	f001 fab5 	bl	800325c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cf2:	bf00      	nop
 8001cf4:	3728      	adds	r7, #40	; 0x28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	48000800 	.word	0x48000800
 8001d04:	48000400 	.word	0x48000400

08001d08 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	update_flag = 1;
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	200003ec 	.word	0x200003ec

08001d28 <StartTeller0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTeller0 */
void StartTeller0(void *argument)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Initialize 3 tellers
  /* Infinite loop */
	init_teller(0);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f000 fadd 	bl	80022f0 <init_teller>
  for(;;)
  {
		osMutexAcquire(MUTEXHandle, osWaitForever);
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <StartTeller0+0x34>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 fb40 	bl	80063c4 <osMutexAcquire>
		manage_teller(0);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f000 fc2f 	bl	80025a8 <manage_teller>
		osMutexRelease(MUTEXHandle);
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <StartTeller0+0x34>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 fb83 	bl	800645a <osMutexRelease>
		osThreadYield();
 8001d54:	f004 fa90 	bl	8006278 <osThreadYield>
		osMutexAcquire(MUTEXHandle, osWaitForever);
 8001d58:	e7ed      	b.n	8001d36 <StartTeller0+0xe>
 8001d5a:	bf00      	nop
 8001d5c:	200003e8 	.word	0x200003e8

08001d60 <StartCustomers>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCustomers */
void StartCustomers(void *argument)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCustomers */
  /* Infinite loop */
  init_customer();
 8001d68:	f7ff fc5c 	bl	8001624 <init_customer>
  for(;;)
  {

	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <StartCustomers+0x30>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	4618      	mov	r0, r3
 8001d76:	f004 fb25 	bl	80063c4 <osMutexAcquire>
	run_customer();
 8001d7a:	f7ff fceb 	bl	8001754 <run_customer>
	osMutexRelease(MUTEXHandle);
 8001d7e:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <StartCustomers+0x30>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 fb69 	bl	800645a <osMutexRelease>
	osThreadYield();
 8001d88:	f004 fa76 	bl	8006278 <osThreadYield>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001d8c:	e7ee      	b.n	8001d6c <StartCustomers+0xc>
 8001d8e:	bf00      	nop
 8001d90:	200003e8 	.word	0x200003e8

08001d94 <StartClock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClock */
void StartClock(void *argument)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b0c9      	sub	sp, #292	; 0x124
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001da2:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartClock */
  /* Infinite loop */
	Clock = day_init(Clock);
 8001da4:	4c53      	ldr	r4, [pc, #332]	; (8001ef4 <StartClock+0x160>)
 8001da6:	4638      	mov	r0, r7
 8001da8:	4b52      	ldr	r3, [pc, #328]	; (8001ef4 <StartClock+0x160>)
 8001daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dac:	f7ff fa3c 	bl	8001228 <day_init>
 8001db0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001db4:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8001db8:	4623      	mov	r3, r4
 8001dba:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for(;;)
  {
	if(update_flag == 1 && day_over != 1){
 8001dc0:	4b4d      	ldr	r3, [pc, #308]	; (8001ef8 <StartClock+0x164>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	f040 808e 	bne.w	8001ee6 <StartClock+0x152>
 8001dca:	4b4c      	ldr	r3, [pc, #304]	; (8001efc <StartClock+0x168>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	f000 8089 	beq.w	8001ee6 <StartClock+0x152>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001dd4:	4b4a      	ldr	r3, [pc, #296]	; (8001f00 <StartClock+0x16c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 faf1 	bl	80063c4 <osMutexAcquire>
    Clock = clock_increment(Clock);
 8001de2:	4c44      	ldr	r4, [pc, #272]	; (8001ef4 <StartClock+0x160>)
 8001de4:	4638      	mov	r0, r7
 8001de6:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <StartClock+0x160>)
 8001de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dea:	f7ff fa3d 	bl	8001268 <clock_increment>
 8001dee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001df2:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8001df6:	4623      	mov	r3, r4
 8001df8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	update_flag = 0;
 8001dfe:	4b3e      	ldr	r3, [pc, #248]	; (8001ef8 <StartClock+0x164>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
    osMutexRelease(MUTEXHandle);
 8001e04:	4b3e      	ldr	r3, [pc, #248]	; (8001f00 <StartClock+0x16c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f004 fb26 	bl	800645a <osMutexRelease>
    char buffer[256];
	if((Clock.minute  % 10) == 0 && (Clock.second % 60) == 30){
 8001e0e:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <StartClock+0x160>)
 8001e10:	6859      	ldr	r1, [r3, #4]
 8001e12:	4b3c      	ldr	r3, [pc, #240]	; (8001f04 <StartClock+0x170>)
 8001e14:	fb83 2301 	smull	r2, r3, r3, r1
 8001e18:	109a      	asrs	r2, r3, #2
 8001e1a:	17cb      	asrs	r3, r1, #31
 8001e1c:	1ad2      	subs	r2, r2, r3
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	1aca      	subs	r2, r1, r3
 8001e28:	2a00      	cmp	r2, #0
 8001e2a:	d15a      	bne.n	8001ee2 <StartClock+0x14e>
 8001e2c:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <StartClock+0x160>)
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	4b35      	ldr	r3, [pc, #212]	; (8001f08 <StartClock+0x174>)
 8001e32:	fb83 1302 	smull	r1, r3, r3, r2
 8001e36:	4413      	add	r3, r2
 8001e38:	1159      	asrs	r1, r3, #5
 8001e3a:	17d3      	asrs	r3, r2, #31
 8001e3c:	1ac9      	subs	r1, r1, r3
 8001e3e:	460b      	mov	r3, r1
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	1a5b      	subs	r3, r3, r1
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	1ad1      	subs	r1, r2, r3
 8001e48:	291e      	cmp	r1, #30
 8001e4a:	d14a      	bne.n	8001ee2 <StartClock+0x14e>
			sprintf(buffer, "Current time: %d:%d:%d \r\n", Clock.hour, Clock.minute, Clock.second);
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <StartClock+0x160>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <StartClock+0x160>)
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <StartClock+0x160>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f107 0018 	add.w	r0, r7, #24
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	492a      	ldr	r1, [pc, #168]	; (8001f0c <StartClock+0x178>)
 8001e62:	f007 fb5f 	bl	8009524 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001e66:	f107 0318 	add.w	r3, r7, #24
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe f9b0 	bl	80001d0 <strlen>
 8001e70:	4603      	mov	r3, r0
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	f107 0118 	add.w	r1, r7, #24
 8001e78:	2364      	movs	r3, #100	; 0x64
 8001e7a:	4825      	ldr	r0, [pc, #148]	; (8001f10 <StartClock+0x17c>)
 8001e7c:	f003 fb94 	bl	80055a8 <HAL_UART_Transmit>
			sprintf(buffer,"Customers waiting in Queue: %d \r\n", waiting_customers );
 8001e80:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <StartClock+0x180>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	f107 0318 	add.w	r3, r7, #24
 8001e88:	4923      	ldr	r1, [pc, #140]	; (8001f18 <StartClock+0x184>)
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f007 fb4a 	bl	8009524 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001e90:	f107 0318 	add.w	r3, r7, #24
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe f99b 	bl	80001d0 <strlen>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	f107 0118 	add.w	r1, r7, #24
 8001ea2:	2364      	movs	r3, #100	; 0x64
 8001ea4:	481a      	ldr	r0, [pc, #104]	; (8001f10 <StartClock+0x17c>)
 8001ea6:	f003 fb7f 	bl	80055a8 <HAL_UART_Transmit>
			sprintf(buffer,"Teller 1: %d Teller 2: %d Teller 3: %d \r\n", tellers[0].status,tellers[1].status,tellers[2].status);
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <StartClock+0x188>)
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <StartClock+0x188>)
 8001eb0:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001eb4:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <StartClock+0x188>)
 8001eb6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001eba:	f107 0018 	add.w	r0, r7, #24
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4917      	ldr	r1, [pc, #92]	; (8001f20 <StartClock+0x18c>)
 8001ec4:	f007 fb2e 	bl	8009524 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001ec8:	f107 0318 	add.w	r3, r7, #24
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe f97f 	bl	80001d0 <strlen>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	f107 0118 	add.w	r1, r7, #24
 8001eda:	2364      	movs	r3, #100	; 0x64
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <StartClock+0x17c>)
 8001ede:	f003 fb63 	bl	80055a8 <HAL_UART_Transmit>
		}
	osThreadYield();
 8001ee2:	f004 f9c9 	bl	8006278 <osThreadYield>

	}
//	if(day_over == 1){
//		Clock = clock_init(Clock);
//	}
	update_flag = 0;
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <StartClock+0x164>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
	osThreadYield();
 8001eec:	f004 f9c4 	bl	8006278 <osThreadYield>
	if(update_flag == 1 && day_over != 1){
 8001ef0:	e766      	b.n	8001dc0 <StartClock+0x2c>
 8001ef2:	bf00      	nop
 8001ef4:	20000038 	.word	0x20000038
 8001ef8:	200003ec 	.word	0x200003ec
 8001efc:	200002e4 	.word	0x200002e4
 8001f00:	200003e8 	.word	0x200003e8
 8001f04:	66666667 	.word	0x66666667
 8001f08:	88888889 	.word	0x88888889
 8001f0c:	0800a044 	.word	0x0800a044
 8001f10:	20000344 	.word	0x20000344
 8001f14:	20000128 	.word	0x20000128
 8001f18:	0800a060 	.word	0x0800a060
 8001f1c:	200003f4 	.word	0x200003f4
 8001f20:	0800a084 	.word	0x0800a084

08001f24 <StartManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManager */
void StartManager(void *argument)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManager */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <StartManager+0x2c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295
 8001f34:	4618      	mov	r0, r3
 8001f36:	f004 fa45 	bl	80063c4 <osMutexAcquire>
	  run_manager();
 8001f3a:	f7fe fb77 	bl	800062c <run_manager>
	  osMutexRelease(MUTEXHandle);
 8001f3e:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <StartManager+0x2c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f004 fa89 	bl	800645a <osMutexRelease>
	  osThreadYield();
 8001f48:	f004 f996 	bl	8006278 <osThreadYield>
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 8001f4c:	e7ee      	b.n	8001f2c <StartManager+0x8>
 8001f4e:	bf00      	nop
 8001f50:	200003e8 	.word	0x200003e8

08001f54 <StartBreaker>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBreaker */
void StartBreaker(void *argument)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBreaker */
  /* Infinite loop */
	init_breaker();
 8001f5c:	f7fe fe40 	bl	8000be0 <init_breaker>
  for(;;)
  {
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <StartBreaker+0x30>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 fa2b 	bl	80063c4 <osMutexAcquire>
	run_breaker();
 8001f6e:	f7fe ffa7 	bl	8000ec0 <run_breaker>
	osMutexRelease(MUTEXHandle);
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <StartBreaker+0x30>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f004 fa6f 	bl	800645a <osMutexRelease>
	osThreadYield();
 8001f7c:	f004 f97c 	bl	8006278 <osThreadYield>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001f80:	e7ee      	b.n	8001f60 <StartBreaker+0xc>
 8001f82:	bf00      	nop
 8001f84:	200003e8 	.word	0x200003e8

08001f88 <StartTeller1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller1 */
void StartTeller1(void *argument)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller1 */
  /* Infinite loop */
	init_teller(1);
 8001f90:	2001      	movs	r0, #1
 8001f92:	f000 f9ad 	bl	80022f0 <init_teller>
  for(;;)
  {
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <StartTeller1+0x34>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f004 fa10 	bl	80063c4 <osMutexAcquire>
	manage_teller(1);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f000 faff 	bl	80025a8 <manage_teller>
	osMutexRelease(MUTEXHandle);
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <StartTeller1+0x34>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 fa53 	bl	800645a <osMutexRelease>
	osThreadYield();
 8001fb4:	f004 f960 	bl	8006278 <osThreadYield>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001fb8:	e7ed      	b.n	8001f96 <StartTeller1+0xe>
 8001fba:	bf00      	nop
 8001fbc:	200003e8 	.word	0x200003e8

08001fc0 <StartTeller2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller2 */
void StartTeller2(void *argument)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller2 */
  /* Infinite loop */
	init_teller(2);
 8001fc8:	2002      	movs	r0, #2
 8001fca:	f000 f991 	bl	80022f0 <init_teller>
  for(;;){
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <StartTeller2+0x34>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f004 f9f4 	bl	80063c4 <osMutexAcquire>
	manage_teller(2);
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f000 fae3 	bl	80025a8 <manage_teller>
	osMutexRelease(MUTEXHandle);
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <StartTeller2+0x34>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f004 fa37 	bl	800645a <osMutexRelease>
	osThreadYield();
 8001fec:	f004 f944 	bl	8006278 <osThreadYield>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001ff0:	e7ed      	b.n	8001fce <StartTeller2+0xe>
 8001ff2:	bf00      	nop
 8001ff4:	200003e8 	.word	0x200003e8

08001ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ffc:	b672      	cpsid	i
}
 8001ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002000:	e7fe      	b.n	8002000 <Error_Handler+0x8>
	...

08002004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_MspInit+0x4c>)
 800200c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200e:	4a10      	ldr	r2, [pc, #64]	; (8002050 <HAL_MspInit+0x4c>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6613      	str	r3, [r2, #96]	; 0x60
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_MspInit+0x4c>)
 8002018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_MspInit+0x4c>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <HAL_MspInit+0x4c>)
 8002028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202c:	6593      	str	r3, [r2, #88]	; 0x58
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <HAL_MspInit+0x4c>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	210f      	movs	r1, #15
 800203e:	f06f 0001 	mvn.w	r0, #1
 8002042:	f001 f8d4 	bl	80031ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000

08002054 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b0a6      	sub	sp, #152	; 0x98
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	2288      	movs	r2, #136	; 0x88
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f007 fa7d 	bl	8009564 <memset>
  if(hrng->Instance==RNG)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_RNG_MspInit+0x90>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d133      	bne.n	80020dc <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002074:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002078:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800207a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800207e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002082:	2301      	movs	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002086:	2301      	movs	r3, #1
 8002088:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800208a:	2310      	movs	r3, #16
 800208c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800208e:	2307      	movs	r3, #7
 8002090:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002092:	2302      	movs	r3, #2
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002096:	2302      	movs	r3, #2
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800209a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	4618      	mov	r0, r3
 80020a6:	f002 f917 	bl	80042d8 <HAL_RCCEx_PeriphCLKConfig>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 80020b0:	f7ff ffa2 	bl	8001ff8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <HAL_RNG_MspInit+0x94>)
 80020b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b8:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <HAL_RNG_MspInit+0x94>)
 80020ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RNG_MspInit+0x94>)
 80020c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 5, 0);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2105      	movs	r1, #5
 80020d0:	2050      	movs	r0, #80	; 0x50
 80020d2:	f001 f88c 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 80020d6:	2050      	movs	r0, #80	; 0x50
 80020d8:	f001 f8a5 	bl	8003226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80020dc:	bf00      	nop
 80020de:	3798      	adds	r7, #152	; 0x98
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	50060800 	.word	0x50060800
 80020e8:	40021000 	.word	0x40021000

080020ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0d      	ldr	r2, [pc, #52]	; (8002130 <HAL_TIM_Base_MspInit+0x44>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d113      	bne.n	8002126 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <HAL_TIM_Base_MspInit+0x48>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002102:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <HAL_TIM_Base_MspInit+0x48>)
 8002104:	f043 0310 	orr.w	r3, r3, #16
 8002108:	6593      	str	r3, [r2, #88]	; 0x58
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_TIM_Base_MspInit+0x48>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2105      	movs	r1, #5
 800211a:	2036      	movs	r0, #54	; 0x36
 800211c:	f001 f867 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002120:	2036      	movs	r0, #54	; 0x36
 8002122:	f001 f880 	bl	8003226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40001000 	.word	0x40001000
 8002134:	40021000 	.word	0x40021000

08002138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b0ac      	sub	sp, #176	; 0xb0
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2288      	movs	r2, #136	; 0x88
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f007 fa03 	bl	8009564 <memset>
  if(huart->Instance==USART2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <HAL_UART_MspInit+0xb0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d13b      	bne.n	80021e0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002168:	2302      	movs	r3, #2
 800216a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800216c:	2300      	movs	r3, #0
 800216e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	4618      	mov	r0, r3
 8002176:	f002 f8af 	bl	80042d8 <HAL_RCCEx_PeriphCLKConfig>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002180:	f7ff ff3a 	bl	8001ff8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_UART_MspInit+0xb4>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	4a18      	ldr	r2, [pc, #96]	; (80021ec <HAL_UART_MspInit+0xb4>)
 800218a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218e:	6593      	str	r3, [r2, #88]	; 0x58
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_UART_MspInit+0xb4>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_UART_MspInit+0xb4>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a0:	4a12      	ldr	r2, [pc, #72]	; (80021ec <HAL_UART_MspInit+0xb4>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_UART_MspInit+0xb4>)
 80021aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021b4:	230c      	movs	r3, #12
 80021b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021cc:	2307      	movs	r3, #7
 80021ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021d6:	4619      	mov	r1, r3
 80021d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021dc:	f001 f83e 	bl	800325c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021e0:	bf00      	nop
 80021e2:	37b0      	adds	r7, #176	; 0xb0
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40004400 	.word	0x40004400
 80021ec:	40021000 	.word	0x40021000

080021f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021f4:	e7fe      	b.n	80021f4 <NMI_Handler+0x4>

080021f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021fa:	e7fe      	b.n	80021fa <HardFault_Handler+0x4>

080021fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <MemManage_Handler+0x4>

08002202 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002206:	e7fe      	b.n	8002206 <BusFault_Handler+0x4>

08002208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800220c:	e7fe      	b.n	800220c <UsageFault_Handler+0x4>

0800220e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002220:	f000 feea 	bl	8002ff8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002224:	f005 ff62 	bl	80080ec <xTaskGetSchedulerState>
 8002228:	4603      	mov	r3, r0
 800222a:	2b01      	cmp	r3, #1
 800222c:	d001      	beq.n	8002232 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800222e:	f006 fe4b 	bl	8008ec8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <TIM6_DAC_IRQHandler+0x10>)
 800223e:	f002 fefb 	bl	8005038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200002f8 	.word	0x200002f8

0800224c <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <RNG_IRQHandler+0x10>)
 8002252:	f002 fdaa 	bl	8004daa <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200002e8 	.word	0x200002e8

08002260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002268:	4a14      	ldr	r2, [pc, #80]	; (80022bc <_sbrk+0x5c>)
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <_sbrk+0x60>)
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <_sbrk+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <_sbrk+0x64>)
 800227e:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <_sbrk+0x68>)
 8002280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <_sbrk+0x64>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	429a      	cmp	r2, r3
 800228e:	d207      	bcs.n	80022a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002290:	f007 f9d6 	bl	8009640 <__errno>
 8002294:	4603      	mov	r3, r0
 8002296:	220c      	movs	r2, #12
 8002298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
 800229e:	e009      	b.n	80022b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <_sbrk+0x64>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <_sbrk+0x64>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <_sbrk+0x64>)
 80022b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022b2:	68fb      	ldr	r3, [r7, #12]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20018000 	.word	0x20018000
 80022c0:	00000400 	.word	0x00000400
 80022c4:	200003f0 	.word	0x200003f0
 80022c8:	20006f58 	.word	0x20006f58

080022cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <SystemInit+0x20>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <SystemInit+0x20>)
 80022d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <init_teller>:

Teller VOID_TELLER;


//Pass in the teller ID
void init_teller(int i) {
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6178      	str	r0, [r7, #20]
    	//Initialize ID
        tellers[i].id = i;
 80022f8:	4aaa      	ldr	r2, [pc, #680]	; (80025a4 <init_teller+0x2b4>)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	21c8      	movs	r1, #200	; 0xc8
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	601a      	str	r2, [r3, #0]
        // Initialize statuses
        tellers[i].status = 0;
 8002308:	4aa6      	ldr	r2, [pc, #664]	; (80025a4 <init_teller+0x2b4>)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	21c8      	movs	r1, #200	; 0xc8
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3304      	adds	r3, #4
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
        //service function
        tellers[i].service_end_time = clock_init(tellers[i].service_end_time);
 800231a:	4aa2      	ldr	r2, [pc, #648]	; (80025a4 <init_teller+0x2b4>)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	21c8      	movs	r1, #200	; 0xc8
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	f103 0410 	add.w	r4, r3, #16
 800232a:	4638      	mov	r0, r7
 800232c:	4a9d      	ldr	r2, [pc, #628]	; (80025a4 <init_teller+0x2b4>)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	21c8      	movs	r1, #200	; 0xc8
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3310      	adds	r3, #16
 800233a:	3304      	adds	r3, #4
 800233c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800233e:	f7fe ff53 	bl	80011e8 <clock_init>
 8002342:	1d23      	adds	r3, r4, #4
 8002344:	463a      	mov	r2, r7
 8002346:	ca07      	ldmia	r2, {r0, r1, r2}
 8002348:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize metrics
        tellers[i].customers_served = 0;
 800234c:	4a95      	ldr	r2, [pc, #596]	; (80025a4 <init_teller+0x2b4>)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	21c8      	movs	r1, #200	; 0xc8
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3320      	adds	r3, #32
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
        tellers[i].waiting_count = 0;
 800235e:	4a91      	ldr	r2, [pc, #580]	; (80025a4 <init_teller+0x2b4>)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	21c8      	movs	r1, #200	; 0xc8
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	3324      	adds	r3, #36	; 0x24
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
        tellers[i].total_time_working = clock_init(tellers[i].total_time_working);
 8002370:	4a8c      	ldr	r2, [pc, #560]	; (80025a4 <init_teller+0x2b4>)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	21c8      	movs	r1, #200	; 0xc8
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8002380:	4638      	mov	r0, r7
 8002382:	4a88      	ldr	r2, [pc, #544]	; (80025a4 <init_teller+0x2b4>)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	21c8      	movs	r1, #200	; 0xc8
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3328      	adds	r3, #40	; 0x28
 8002390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002392:	f7fe ff29 	bl	80011e8 <clock_init>
 8002396:	463b      	mov	r3, r7
 8002398:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800239c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].total_time_waiting = clock_init(tellers[i].total_time_waiting);
 80023a0:	4a80      	ldr	r2, [pc, #512]	; (80025a4 <init_teller+0x2b4>)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	21c8      	movs	r1, #200	; 0xc8
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80023b0:	4638      	mov	r0, r7
 80023b2:	4a7c      	ldr	r2, [pc, #496]	; (80025a4 <init_teller+0x2b4>)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	21c8      	movs	r1, #200	; 0xc8
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	3330      	adds	r3, #48	; 0x30
 80023c0:	3304      	adds	r3, #4
 80023c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c4:	f7fe ff10 	bl	80011e8 <clock_init>
 80023c8:	1d23      	adds	r3, r4, #4
 80023ca:	463a      	mov	r2, r7
 80023cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80023ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].current_time_working = clock_init(tellers[i].current_time_working);
 80023d2:	4a74      	ldr	r2, [pc, #464]	; (80025a4 <init_teller+0x2b4>)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	21c8      	movs	r1, #200	; 0xc8
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80023e2:	4638      	mov	r0, r7
 80023e4:	4a6f      	ldr	r2, [pc, #444]	; (80025a4 <init_teller+0x2b4>)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	21c8      	movs	r1, #200	; 0xc8
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	3340      	adds	r3, #64	; 0x40
 80023f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f4:	f7fe fef8 	bl	80011e8 <clock_init>
 80023f8:	463b      	mov	r3, r7
 80023fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 8002402:	4a68      	ldr	r2, [pc, #416]	; (80025a4 <init_teller+0x2b4>)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	21c8      	movs	r1, #200	; 0xc8
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	4413      	add	r3, r2
 800240e:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8002412:	4638      	mov	r0, r7
 8002414:	4a63      	ldr	r2, [pc, #396]	; (80025a4 <init_teller+0x2b4>)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	21c8      	movs	r1, #200	; 0xc8
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	3348      	adds	r3, #72	; 0x48
 8002422:	3304      	adds	r3, #4
 8002424:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002426:	f7fe fedf 	bl	80011e8 <clock_init>
 800242a:	1d23      	adds	r3, r4, #4
 800242c:	463a      	mov	r2, r7
 800242e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002430:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].max_time_working = clock_init(tellers[i].max_time_working);
 8002434:	4a5b      	ldr	r2, [pc, #364]	; (80025a4 <init_teller+0x2b4>)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	21c8      	movs	r1, #200	; 0xc8
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	4413      	add	r3, r2
 8002440:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8002444:	4638      	mov	r0, r7
 8002446:	4a57      	ldr	r2, [pc, #348]	; (80025a4 <init_teller+0x2b4>)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	21c8      	movs	r1, #200	; 0xc8
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	3358      	adds	r3, #88	; 0x58
 8002454:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002456:	f7fe fec7 	bl	80011e8 <clock_init>
 800245a:	463b      	mov	r3, r7
 800245c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002460:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].max_time_working = clock_init(tellers[i].max_time_working);
 8002464:	4a4f      	ldr	r2, [pc, #316]	; (80025a4 <init_teller+0x2b4>)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	21c8      	movs	r1, #200	; 0xc8
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8002474:	4638      	mov	r0, r7
 8002476:	4a4b      	ldr	r2, [pc, #300]	; (80025a4 <init_teller+0x2b4>)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	21c8      	movs	r1, #200	; 0xc8
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	3358      	adds	r3, #88	; 0x58
 8002484:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002486:	f7fe feaf 	bl	80011e8 <clock_init>
 800248a:	463b      	mov	r3, r7
 800248c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002490:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        //Initialize break taking
        tellers[i].break_end = clock_init(tellers[i].break_end);
 8002494:	4a43      	ldr	r2, [pc, #268]	; (80025a4 <init_teller+0x2b4>)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	21c8      	movs	r1, #200	; 0xc8
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	f103 0488 	add.w	r4, r3, #136	; 0x88
 80024a4:	4638      	mov	r0, r7
 80024a6:	4a3f      	ldr	r2, [pc, #252]	; (80025a4 <init_teller+0x2b4>)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	21c8      	movs	r1, #200	; 0xc8
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	3388      	adds	r3, #136	; 0x88
 80024b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024b6:	f7fe fe97 	bl	80011e8 <clock_init>
 80024ba:	463b      	mov	r3, r7
 80024bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].current_break = clock_init(tellers[i].current_break);
 80024c4:	4a37      	ldr	r2, [pc, #220]	; (80025a4 <init_teller+0x2b4>)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	21c8      	movs	r1, #200	; 0xc8
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	f103 0490 	add.w	r4, r3, #144	; 0x90
 80024d4:	4638      	mov	r0, r7
 80024d6:	4a33      	ldr	r2, [pc, #204]	; (80025a4 <init_teller+0x2b4>)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	21c8      	movs	r1, #200	; 0xc8
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	3390      	adds	r3, #144	; 0x90
 80024e4:	3304      	adds	r3, #4
 80024e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e8:	f7fe fe7e 	bl	80011e8 <clock_init>
 80024ec:	1d23      	adds	r3, r4, #4
 80024ee:	463a      	mov	r2, r7
 80024f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80024f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize break metrics
        tellers[i].num_breaks = 0;
 80024f6:	4a2b      	ldr	r2, [pc, #172]	; (80025a4 <init_teller+0x2b4>)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	21c8      	movs	r1, #200	; 0xc8
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	33a0      	adds	r3, #160	; 0xa0
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
        tellers[i].max_break = clock_init(tellers[i].max_break);
 8002508:	4a26      	ldr	r2, [pc, #152]	; (80025a4 <init_teller+0x2b4>)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	21c8      	movs	r1, #200	; 0xc8
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8002518:	4638      	mov	r0, r7
 800251a:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <init_teller+0x2b4>)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	21c8      	movs	r1, #200	; 0xc8
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	33a0      	adds	r3, #160	; 0xa0
 8002528:	3304      	adds	r3, #4
 800252a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800252c:	f7fe fe5c 	bl	80011e8 <clock_init>
 8002530:	1d23      	adds	r3, r4, #4
 8002532:	463a      	mov	r2, r7
 8002534:	ca07      	ldmia	r2, {r0, r1, r2}
 8002536:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].min_break = clock_init(tellers[i].min_break);
 800253a:	4a1a      	ldr	r2, [pc, #104]	; (80025a4 <init_teller+0x2b4>)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	21c8      	movs	r1, #200	; 0xc8
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 800254a:	4638      	mov	r0, r7
 800254c:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <init_teller+0x2b4>)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	21c8      	movs	r1, #200	; 0xc8
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	33b0      	adds	r3, #176	; 0xb0
 800255a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800255c:	f7fe fe44 	bl	80011e8 <clock_init>
 8002560:	463b      	mov	r3, r7
 8002562:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002566:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].total_break = clock_init(tellers[i].total_break);
 800256a:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <init_teller+0x2b4>)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	21c8      	movs	r1, #200	; 0xc8
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800257a:	4638      	mov	r0, r7
 800257c:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <init_teller+0x2b4>)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	21c8      	movs	r1, #200	; 0xc8
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	33b8      	adds	r3, #184	; 0xb8
 800258a:	3304      	adds	r3, #4
 800258c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258e:	f7fe fe2b 	bl	80011e8 <clock_init>
 8002592:	1d23      	adds	r3, r4, #4
 8002594:	463a      	mov	r2, r7
 8002596:	ca07      	ldmia	r2, {r0, r1, r2}
 8002598:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800259c:	bf00      	nop
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd90      	pop	{r4, r7, pc}
 80025a4:	200003f4 	.word	0x200003f4

080025a8 <manage_teller>:

//Pass in Teller ID
void manage_teller(int i){
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	b09d      	sub	sp, #116	; 0x74
 80025ac:	af04      	add	r7, sp, #16
 80025ae:	61f8      	str	r0, [r7, #28]
	switch (tellers[i].status){
 80025b0:	4a79      	ldr	r2, [pc, #484]	; (8002798 <manage_teller+0x1f0>)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	21c8      	movs	r1, #200	; 0xc8
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3304      	adds	r3, #4
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d00a      	beq.n	80025da <manage_teller+0x32>
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	f300 8488 	bgt.w	8002eda <manage_teller+0x932>
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80ea 	beq.w	80027a4 <manage_teller+0x1fc>
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	f000 83a1 	beq.w	8002d18 <manage_teller+0x770>
			//Otherwise, just keep on servicing

			//case break
			break;
	}
}
 80025d6:	f000 bc80 	b.w	8002eda <manage_teller+0x932>
			if(clock_compare(Clock,tellers[i].break_end) == 1){
 80025da:	4a6f      	ldr	r2, [pc, #444]	; (8002798 <manage_teller+0x1f0>)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	21c8      	movs	r1, #200	; 0xc8
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	3388      	adds	r3, #136	; 0x88
 80025e8:	4a6c      	ldr	r2, [pc, #432]	; (800279c <manage_teller+0x1f4>)
 80025ea:	466c      	mov	r4, sp
 80025ec:	1d19      	adds	r1, r3, #4
 80025ee:	c903      	ldmia	r1, {r0, r1}
 80025f0:	e884 0003 	stmia.w	r4, {r0, r1}
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80025f8:	f7fe fea4 	bl	8001344 <clock_compare>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b01      	cmp	r3, #1
 8002600:	f040 8466 	bne.w	8002ed0 <manage_teller+0x928>
				tellers[i].status = 0;
 8002604:	4a64      	ldr	r2, [pc, #400]	; (8002798 <manage_teller+0x1f0>)
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	21c8      	movs	r1, #200	; 0xc8
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3304      	adds	r3, #4
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
				breaker.start_break[i] = 0;
 8002616:	4a62      	ldr	r2, [pc, #392]	; (80027a0 <manage_teller+0x1f8>)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2100      	movs	r1, #0
 800261c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				tellers[i].current_break = subtract_Clocks(Clock, tellers[i].break_start);
 8002620:	4a5d      	ldr	r2, [pc, #372]	; (8002798 <manage_teller+0x1f0>)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	21c8      	movs	r1, #200	; 0xc8
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	f103 0690 	add.w	r6, r3, #144	; 0x90
 8002630:	f107 0c08 	add.w	ip, r7, #8
 8002634:	4d59      	ldr	r5, [pc, #356]	; (800279c <manage_teller+0x1f4>)
 8002636:	4a58      	ldr	r2, [pc, #352]	; (8002798 <manage_teller+0x1f0>)
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	21c8      	movs	r1, #200	; 0xc8
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	4413      	add	r3, r2
 8002642:	3378      	adds	r3, #120	; 0x78
 8002644:	466c      	mov	r4, sp
 8002646:	3304      	adds	r3, #4
 8002648:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800264c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002650:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002654:	4660      	mov	r0, ip
 8002656:	f7fe feb7 	bl	80013c8 <subtract_Clocks>
 800265a:	1d33      	adds	r3, r6, #4
 800265c:	f107 0208 	add.w	r2, r7, #8
 8002660:	ca07      	ldmia	r2, {r0, r1, r2}
 8002662:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				if(clock_compare(tellers[i].current_break, tellers[i].max_break) == 0){
 8002666:	4a4c      	ldr	r2, [pc, #304]	; (8002798 <manage_teller+0x1f0>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	21c8      	movs	r1, #200	; 0xc8
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	33a0      	adds	r3, #160	; 0xa0
 8002674:	4948      	ldr	r1, [pc, #288]	; (8002798 <manage_teller+0x1f0>)
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	20c8      	movs	r0, #200	; 0xc8
 800267a:	fb00 f202 	mul.w	r2, r0, r2
 800267e:	440a      	add	r2, r1
 8002680:	3290      	adds	r2, #144	; 0x90
 8002682:	466c      	mov	r4, sp
 8002684:	f103 0108 	add.w	r1, r3, #8
 8002688:	c903      	ldmia	r1, {r0, r1}
 800268a:	e884 0003 	stmia.w	r4, {r0, r1}
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	3204      	adds	r2, #4
 8002692:	ca07      	ldmia	r2, {r0, r1, r2}
 8002694:	f7fe fe56 	bl	8001344 <clock_compare>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d112      	bne.n	80026c4 <manage_teller+0x11c>
					tellers[i].max_break = tellers[i].current_break;
 800269e:	4a3e      	ldr	r2, [pc, #248]	; (8002798 <manage_teller+0x1f0>)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	21c8      	movs	r1, #200	; 0xc8
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	33a0      	adds	r3, #160	; 0xa0
 80026ac:	493a      	ldr	r1, [pc, #232]	; (8002798 <manage_teller+0x1f0>)
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	20c8      	movs	r0, #200	; 0xc8
 80026b2:	fb00 f202 	mul.w	r2, r0, r2
 80026b6:	440a      	add	r2, r1
 80026b8:	3290      	adds	r2, #144	; 0x90
 80026ba:	3304      	adds	r3, #4
 80026bc:	3204      	adds	r2, #4
 80026be:	ca07      	ldmia	r2, {r0, r1, r2}
 80026c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				if(clock_compare(tellers[i].current_break, tellers[i].min_break) == 2){
 80026c4:	4a34      	ldr	r2, [pc, #208]	; (8002798 <manage_teller+0x1f0>)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	21c8      	movs	r1, #200	; 0xc8
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	33b0      	adds	r3, #176	; 0xb0
 80026d2:	4931      	ldr	r1, [pc, #196]	; (8002798 <manage_teller+0x1f0>)
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	20c8      	movs	r0, #200	; 0xc8
 80026d8:	fb00 f202 	mul.w	r2, r0, r2
 80026dc:	440a      	add	r2, r1
 80026de:	3290      	adds	r2, #144	; 0x90
 80026e0:	466c      	mov	r4, sp
 80026e2:	1d19      	adds	r1, r3, #4
 80026e4:	c903      	ldmia	r1, {r0, r1}
 80026e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3204      	adds	r2, #4
 80026ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80026f0:	f7fe fe28 	bl	8001344 <clock_compare>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d114      	bne.n	8002724 <manage_teller+0x17c>
					tellers[i].min_break = tellers[i].current_break;
 80026fa:	4a27      	ldr	r2, [pc, #156]	; (8002798 <manage_teller+0x1f0>)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	21c8      	movs	r1, #200	; 0xc8
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 800270a:	4a23      	ldr	r2, [pc, #140]	; (8002798 <manage_teller+0x1f0>)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	21c8      	movs	r1, #200	; 0xc8
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	3390      	adds	r3, #144	; 0x90
 8002718:	4604      	mov	r4, r0
 800271a:	3304      	adds	r3, #4
 800271c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002720:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				tellers[i].current_break = clock_init(tellers[i].current_break);
 8002724:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <manage_teller+0x1f0>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	21c8      	movs	r1, #200	; 0xc8
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8002734:	f107 0008 	add.w	r0, r7, #8
 8002738:	4a17      	ldr	r2, [pc, #92]	; (8002798 <manage_teller+0x1f0>)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	21c8      	movs	r1, #200	; 0xc8
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	3390      	adds	r3, #144	; 0x90
 8002746:	3304      	adds	r3, #4
 8002748:	cb0e      	ldmia	r3, {r1, r2, r3}
 800274a:	f7fe fd4d 	bl	80011e8 <clock_init>
 800274e:	1d23      	adds	r3, r4, #4
 8002750:	f107 0208 	add.w	r2, r7, #8
 8002754:	ca07      	ldmia	r2, {r0, r1, r2}
 8002756:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].break_start = clock_init(tellers[i].break_start);
 800275a:	4a0f      	ldr	r2, [pc, #60]	; (8002798 <manage_teller+0x1f0>)
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	21c8      	movs	r1, #200	; 0xc8
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800276a:	f107 0008 	add.w	r0, r7, #8
 800276e:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <manage_teller+0x1f0>)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	21c8      	movs	r1, #200	; 0xc8
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	3378      	adds	r3, #120	; 0x78
 800277c:	3304      	adds	r3, #4
 800277e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002780:	f7fe fd32 	bl	80011e8 <clock_init>
 8002784:	1d23      	adds	r3, r4, #4
 8002786:	f107 0208 	add.w	r2, r7, #8
 800278a:	ca07      	ldmia	r2, {r0, r1, r2}
 800278c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				generate_next_break(i);
 8002790:	69f8      	ldr	r0, [r7, #28]
 8002792:	f7fe fc33 	bl	8000ffc <generate_next_break>
			break;
 8002796:	e39b      	b.n	8002ed0 <manage_teller+0x928>
 8002798:	200003f4 	.word	0x200003f4
 800279c:	20000038 	.word	0x20000038
 80027a0:	200000d0 	.word	0x200000d0
			if(breaker.start_break[i] == 1){
 80027a4:	4a98      	ldr	r2, [pc, #608]	; (8002a08 <manage_teller+0x460>)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	f040 8131 	bne.w	8002a14 <manage_teller+0x46c>
				breaker.start_break[i] = 0;
 80027b2:	4a95      	ldr	r2, [pc, #596]	; (8002a08 <manage_teller+0x460>)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2100      	movs	r1, #0
 80027b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				tellers[i].status = 2;
 80027bc:	4a93      	ldr	r2, [pc, #588]	; (8002a0c <manage_teller+0x464>)
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	21c8      	movs	r1, #200	; 0xc8
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3304      	adds	r3, #4
 80027ca:	2202      	movs	r2, #2
 80027cc:	601a      	str	r2, [r3, #0]
				tellers[i].break_start = Clock;
 80027ce:	4a8f      	ldr	r2, [pc, #572]	; (8002a0c <manage_teller+0x464>)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	21c8      	movs	r1, #200	; 0xc8
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	3378      	adds	r3, #120	; 0x78
 80027dc:	4a8c      	ldr	r2, [pc, #560]	; (8002a10 <manage_teller+0x468>)
 80027de:	3304      	adds	r3, #4
 80027e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80027e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].break_end = add_clocks(Clock, breaker.break_duration[i]);
 80027e6:	4a89      	ldr	r2, [pc, #548]	; (8002a0c <manage_teller+0x464>)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	21c8      	movs	r1, #200	; 0xc8
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	f103 0688 	add.w	r6, r3, #136	; 0x88
 80027f6:	f107 0508 	add.w	r5, r7, #8
 80027fa:	4c85      	ldr	r4, [pc, #532]	; (8002a10 <manage_teller+0x468>)
 80027fc:	4982      	ldr	r1, [pc, #520]	; (8002a08 <manage_teller+0x460>)
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800280e:	466b      	mov	r3, sp
 8002810:	ca07      	ldmia	r2, {r0, r1, r2}
 8002812:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002816:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800281a:	4628      	mov	r0, r5
 800281c:	f7fe fd51 	bl	80012c2 <add_clocks>
 8002820:	4634      	mov	r4, r6
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800282a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				tellers[i].total_break = add_clocks(tellers[i].total_break, breaker.break_duration[i]);
 800282e:	4a77      	ldr	r2, [pc, #476]	; (8002a0c <manage_teller+0x464>)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	21c8      	movs	r1, #200	; 0xc8
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 800283e:	f107 0608 	add.w	r6, r7, #8
 8002842:	4a72      	ldr	r2, [pc, #456]	; (8002a0c <manage_teller+0x464>)
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	21c8      	movs	r1, #200	; 0xc8
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
 8002852:	496d      	ldr	r1, [pc, #436]	; (8002a08 <manage_teller+0x460>)
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002864:	466b      	mov	r3, sp
 8002866:	ca07      	ldmia	r2, {r0, r1, r2}
 8002868:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800286c:	1d2b      	adds	r3, r5, #4
 800286e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002870:	4630      	mov	r0, r6
 8002872:	f7fe fd26 	bl	80012c2 <add_clocks>
 8002876:	1d23      	adds	r3, r4, #4
 8002878:	f107 0208 	add.w	r2, r7, #8
 800287c:	ca07      	ldmia	r2, {r0, r1, r2}
 800287e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].num_breaks++;
 8002882:	4a62      	ldr	r2, [pc, #392]	; (8002a0c <manage_teller+0x464>)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	21c8      	movs	r1, #200	; 0xc8
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	33a0      	adds	r3, #160	; 0xa0
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	495d      	ldr	r1, [pc, #372]	; (8002a0c <manage_teller+0x464>)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	20c8      	movs	r0, #200	; 0xc8
 800289a:	fb00 f303 	mul.w	r3, r0, r3
 800289e:	440b      	add	r3, r1
 80028a0:	33a0      	adds	r3, #160	; 0xa0
 80028a2:	601a      	str	r2, [r3, #0]
				tellers[i].current_time_waiting = subtract_Clocks(Clock, tellers[i].teller_start_wait);
 80028a4:	4a59      	ldr	r2, [pc, #356]	; (8002a0c <manage_teller+0x464>)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	21c8      	movs	r1, #200	; 0xc8
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	f103 0548 	add.w	r5, r3, #72	; 0x48
 80028b4:	f107 0608 	add.w	r6, r7, #8
 80028b8:	4c55      	ldr	r4, [pc, #340]	; (8002a10 <manage_teller+0x468>)
 80028ba:	4a54      	ldr	r2, [pc, #336]	; (8002a0c <manage_teller+0x464>)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	21c8      	movs	r1, #200	; 0xc8
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80028ca:	466b      	mov	r3, sp
 80028cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80028ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80028d2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80028d6:	4630      	mov	r0, r6
 80028d8:	f7fe fd76 	bl	80013c8 <subtract_Clocks>
 80028dc:	1d2b      	adds	r3, r5, #4
 80028de:	f107 0208 	add.w	r2, r7, #8
 80028e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80028e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].total_time_waiting = add_clocks(tellers[i].total_time_waiting,tellers[i].current_time_waiting);
 80028e8:	4a48      	ldr	r2, [pc, #288]	; (8002a0c <manage_teller+0x464>)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	21c8      	movs	r1, #200	; 0xc8
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	f103 0530 	add.w	r5, r3, #48	; 0x30
 80028f8:	f107 0c08 	add.w	ip, r7, #8
 80028fc:	4a43      	ldr	r2, [pc, #268]	; (8002a0c <manage_teller+0x464>)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	21c8      	movs	r1, #200	; 0xc8
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	f103 0630 	add.w	r6, r3, #48	; 0x30
 800290c:	4a3f      	ldr	r2, [pc, #252]	; (8002a0c <manage_teller+0x464>)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	21c8      	movs	r1, #200	; 0xc8
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	3348      	adds	r3, #72	; 0x48
 800291a:	466c      	mov	r4, sp
 800291c:	3304      	adds	r3, #4
 800291e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002922:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002926:	1d33      	adds	r3, r6, #4
 8002928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292a:	4660      	mov	r0, ip
 800292c:	f7fe fcc9 	bl	80012c2 <add_clocks>
 8002930:	1d2b      	adds	r3, r5, #4
 8002932:	f107 0208 	add.w	r2, r7, #8
 8002936:	ca07      	ldmia	r2, {r0, r1, r2}
 8002938:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				if(clock_compare(tellers[i].current_time_waiting, tellers[i].max_time_waiting) == 0){
 800293c:	4a33      	ldr	r2, [pc, #204]	; (8002a0c <manage_teller+0x464>)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	21c8      	movs	r1, #200	; 0xc8
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3360      	adds	r3, #96	; 0x60
 800294a:	4930      	ldr	r1, [pc, #192]	; (8002a0c <manage_teller+0x464>)
 800294c:	69fa      	ldr	r2, [r7, #28]
 800294e:	20c8      	movs	r0, #200	; 0xc8
 8002950:	fb00 f202 	mul.w	r2, r0, r2
 8002954:	440a      	add	r2, r1
 8002956:	3248      	adds	r2, #72	; 0x48
 8002958:	466c      	mov	r4, sp
 800295a:	f103 0108 	add.w	r1, r3, #8
 800295e:	c903      	ldmia	r1, {r0, r1}
 8002960:	e884 0003 	stmia.w	r4, {r0, r1}
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	3204      	adds	r2, #4
 8002968:	ca07      	ldmia	r2, {r0, r1, r2}
 800296a:	f7fe fceb 	bl	8001344 <clock_compare>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d112      	bne.n	800299a <manage_teller+0x3f2>
					tellers[i].max_time_waiting = tellers[i].current_time_waiting;
 8002974:	4a25      	ldr	r2, [pc, #148]	; (8002a0c <manage_teller+0x464>)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	21c8      	movs	r1, #200	; 0xc8
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3360      	adds	r3, #96	; 0x60
 8002982:	4922      	ldr	r1, [pc, #136]	; (8002a0c <manage_teller+0x464>)
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	20c8      	movs	r0, #200	; 0xc8
 8002988:	fb00 f202 	mul.w	r2, r0, r2
 800298c:	440a      	add	r2, r1
 800298e:	3248      	adds	r2, #72	; 0x48
 8002990:	3304      	adds	r3, #4
 8002992:	3204      	adds	r2, #4
 8002994:	ca07      	ldmia	r2, {r0, r1, r2}
 8002996:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 800299a:	4a1c      	ldr	r2, [pc, #112]	; (8002a0c <manage_teller+0x464>)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	21c8      	movs	r1, #200	; 0xc8
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80029aa:	f107 0008 	add.w	r0, r7, #8
 80029ae:	4a17      	ldr	r2, [pc, #92]	; (8002a0c <manage_teller+0x464>)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	21c8      	movs	r1, #200	; 0xc8
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3348      	adds	r3, #72	; 0x48
 80029bc:	3304      	adds	r3, #4
 80029be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c0:	f7fe fc12 	bl	80011e8 <clock_init>
 80029c4:	1d23      	adds	r3, r4, #4
 80029c6:	f107 0208 	add.w	r2, r7, #8
 80029ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80029cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].teller_start_wait = clock_init(tellers[i].teller_start_wait);
 80029d0:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <manage_teller+0x464>)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	21c8      	movs	r1, #200	; 0xc8
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80029e0:	f107 0008 	add.w	r0, r7, #8
 80029e4:	4a09      	ldr	r2, [pc, #36]	; (8002a0c <manage_teller+0x464>)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	21c8      	movs	r1, #200	; 0xc8
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	3370      	adds	r3, #112	; 0x70
 80029f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f4:	f7fe fbf8 	bl	80011e8 <clock_init>
 80029f8:	f107 0308 	add.w	r3, r7, #8
 80029fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			break;
 8002a04:	e266      	b.n	8002ed4 <manage_teller+0x92c>
 8002a06:	bf00      	nop
 8002a08:	200000d0 	.word	0x200000d0
 8002a0c:	200003f4 	.word	0x200003f4
 8002a10:	20000038 	.word	0x20000038
			else if(waiting[0] != NULL){
 8002a14:	4bba      	ldr	r3, [pc, #744]	; (8002d00 <manage_teller+0x758>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 825b 	beq.w	8002ed4 <manage_teller+0x92c>
				tellers[i].status = 1;
 8002a1e:	4ab9      	ldr	r2, [pc, #740]	; (8002d04 <manage_teller+0x75c>)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	21c8      	movs	r1, #200	; 0xc8
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
				Customer grabbed_customer = *waiting[0];
 8002a30:	4bb3      	ldr	r3, [pc, #716]	; (8002d00 <manage_teller+0x758>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f107 0420 	add.w	r4, r7, #32
 8002a38:	461d      	mov	r5, r3
 8002a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a46:	682b      	ldr	r3, [r5, #0]
 8002a48:	6023      	str	r3, [r4, #0]
				waiting_customers--;
 8002a4a:	4baf      	ldr	r3, [pc, #700]	; (8002d08 <manage_teller+0x760>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	4aad      	ldr	r2, [pc, #692]	; (8002d08 <manage_teller+0x760>)
 8002a52:	6013      	str	r3, [r2, #0]
				tellers[i].service_start_time = Clock;
 8002a54:	4aab      	ldr	r2, [pc, #684]	; (8002d04 <manage_teller+0x75c>)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	21c8      	movs	r1, #200	; 0xc8
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3308      	adds	r3, #8
 8002a62:	4aaa      	ldr	r2, [pc, #680]	; (8002d0c <manage_teller+0x764>)
 8002a64:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].service_end_time = add_clocks(grabbed_customer.service_time, Clock);
 8002a6a:	4aa6      	ldr	r2, [pc, #664]	; (8002d04 <manage_teller+0x75c>)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	21c8      	movs	r1, #200	; 0xc8
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	f103 0410 	add.w	r4, r3, #16
 8002a7a:	f107 0508 	add.w	r5, r7, #8
 8002a7e:	4aa3      	ldr	r2, [pc, #652]	; (8002d0c <manage_teller+0x764>)
 8002a80:	466b      	mov	r3, sp
 8002a82:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f7fe fc17 	bl	80012c2 <add_clocks>
 8002a94:	1d23      	adds	r3, r4, #4
 8002a96:	f107 0208 	add.w	r2, r7, #8
 8002a9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				grabbed_customer.total_queue_time = subtract_Clocks(Clock, grabbed_customer.entered_queue_time);
 8002aa0:	f107 0608 	add.w	r6, r7, #8
 8002aa4:	4d99      	ldr	r5, [pc, #612]	; (8002d0c <manage_teller+0x764>)
 8002aa6:	466c      	mov	r4, sp
 8002aa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002aac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ab0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ab4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002ab8:	4630      	mov	r0, r6
 8002aba:	f7fe fc85 	bl	80013c8 <subtract_Clocks>
 8002abe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ac2:	f107 0208 	add.w	r2, r7, #8
 8002ac6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ac8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				total_customer_wait = add_clocks(total_customer_wait, grabbed_customer.total_queue_time);
 8002acc:	4b90      	ldr	r3, [pc, #576]	; (8002d10 <manage_teller+0x768>)
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	f107 0608 	add.w	r6, r7, #8
 8002ad4:	4d8e      	ldr	r5, [pc, #568]	; (8002d10 <manage_teller+0x768>)
 8002ad6:	466c      	mov	r4, sp
 8002ad8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002adc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ae0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ae4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002ae8:	4630      	mov	r0, r6
 8002aea:	f7fe fbea 	bl	80012c2 <add_clocks>
 8002aee:	687c      	ldr	r4, [r7, #4]
 8002af0:	f107 0308 	add.w	r3, r7, #8
 8002af4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002af8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				if(clock_compare(grabbed_customer.total_queue_time, max_customer_wait) == 0){
 8002afc:	4b85      	ldr	r3, [pc, #532]	; (8002d14 <manage_teller+0x76c>)
 8002afe:	466c      	mov	r4, sp
 8002b00:	1d1a      	adds	r2, r3, #4
 8002b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b06:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002b10:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b12:	f7fe fc17 	bl	8001344 <clock_compare>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <manage_teller+0x584>
					max_customer_wait = grabbed_customer.total_queue_time;
 8002b1c:	4b7d      	ldr	r3, [pc, #500]	; (8002d14 <manage_teller+0x76c>)
 8002b1e:	461c      	mov	r4, r3
 8002b20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				WallClock totalService = subtract_Clocks(tellers[i].service_end_time, tellers[i].service_start_time);
 8002b2c:	f107 0554 	add.w	r5, r7, #84	; 0x54
 8002b30:	4a74      	ldr	r2, [pc, #464]	; (8002d04 <manage_teller+0x75c>)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	21c8      	movs	r1, #200	; 0xc8
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f103 0410 	add.w	r4, r3, #16
 8002b40:	4a70      	ldr	r2, [pc, #448]	; (8002d04 <manage_teller+0x75c>)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	21c8      	movs	r1, #200	; 0xc8
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f103 0208 	add.w	r2, r3, #8
 8002b50:	466b      	mov	r3, sp
 8002b52:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b58:	1d23      	adds	r3, r4, #4
 8002b5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b5c:	4628      	mov	r0, r5
 8002b5e:	f7fe fc33 	bl	80013c8 <subtract_Clocks>
				tellers[i].total_time_working = add_clocks(tellers[i].total_time_working, totalService);
 8002b62:	4a68      	ldr	r2, [pc, #416]	; (8002d04 <manage_teller+0x75c>)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	21c8      	movs	r1, #200	; 0xc8
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8002b72:	f107 0508 	add.w	r5, r7, #8
 8002b76:	4a63      	ldr	r2, [pc, #396]	; (8002d04 <manage_teller+0x75c>)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	21c8      	movs	r1, #200	; 0xc8
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	3328      	adds	r3, #40	; 0x28
 8002b84:	466c      	mov	r4, sp
 8002b86:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002b8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b92:	4628      	mov	r0, r5
 8002b94:	f7fe fb95 	bl	80012c2 <add_clocks>
 8002b98:	4634      	mov	r4, r6
 8002b9a:	f107 0308 	add.w	r3, r7, #8
 8002b9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ba2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				waiting[0] = NULL;
 8002ba6:	4b56      	ldr	r3, [pc, #344]	; (8002d00 <manage_teller+0x758>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
				tellers[i].current_time_waiting = subtract_Clocks(Clock, tellers[i].teller_start_wait);
 8002bac:	4a55      	ldr	r2, [pc, #340]	; (8002d04 <manage_teller+0x75c>)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	21c8      	movs	r1, #200	; 0xc8
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f103 0548 	add.w	r5, r3, #72	; 0x48
 8002bbc:	f107 0608 	add.w	r6, r7, #8
 8002bc0:	4c52      	ldr	r4, [pc, #328]	; (8002d0c <manage_teller+0x764>)
 8002bc2:	4a50      	ldr	r2, [pc, #320]	; (8002d04 <manage_teller+0x75c>)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	21c8      	movs	r1, #200	; 0xc8
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002bd2:	466b      	mov	r3, sp
 8002bd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002bda:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002bde:	4630      	mov	r0, r6
 8002be0:	f7fe fbf2 	bl	80013c8 <subtract_Clocks>
 8002be4:	1d2b      	adds	r3, r5, #4
 8002be6:	f107 0208 	add.w	r2, r7, #8
 8002bea:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].total_time_waiting = add_clocks(tellers[i].total_time_waiting,tellers[i].current_time_waiting);
 8002bf0:	4a44      	ldr	r2, [pc, #272]	; (8002d04 <manage_teller+0x75c>)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	21c8      	movs	r1, #200	; 0xc8
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8002c00:	f107 0c08 	add.w	ip, r7, #8
 8002c04:	4a3f      	ldr	r2, [pc, #252]	; (8002d04 <manage_teller+0x75c>)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	21c8      	movs	r1, #200	; 0xc8
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	f103 0630 	add.w	r6, r3, #48	; 0x30
 8002c14:	4a3b      	ldr	r2, [pc, #236]	; (8002d04 <manage_teller+0x75c>)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	21c8      	movs	r1, #200	; 0xc8
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3348      	adds	r3, #72	; 0x48
 8002c22:	466c      	mov	r4, sp
 8002c24:	3304      	adds	r3, #4
 8002c26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c2e:	1d33      	adds	r3, r6, #4
 8002c30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c32:	4660      	mov	r0, ip
 8002c34:	f7fe fb45 	bl	80012c2 <add_clocks>
 8002c38:	1d2b      	adds	r3, r5, #4
 8002c3a:	f107 0208 	add.w	r2, r7, #8
 8002c3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].waiting_count++;
 8002c44:	4a2f      	ldr	r2, [pc, #188]	; (8002d04 <manage_teller+0x75c>)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	21c8      	movs	r1, #200	; 0xc8
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3324      	adds	r3, #36	; 0x24
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	492b      	ldr	r1, [pc, #172]	; (8002d04 <manage_teller+0x75c>)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	20c8      	movs	r0, #200	; 0xc8
 8002c5c:	fb00 f303 	mul.w	r3, r0, r3
 8002c60:	440b      	add	r3, r1
 8002c62:	3324      	adds	r3, #36	; 0x24
 8002c64:	601a      	str	r2, [r3, #0]
				tellers[i].current_time_waiting.hour = 0;
 8002c66:	4a27      	ldr	r2, [pc, #156]	; (8002d04 <manage_teller+0x75c>)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	21c8      	movs	r1, #200	; 0xc8
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	334c      	adds	r3, #76	; 0x4c
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
				tellers[i].current_time_waiting.minute = 0;
 8002c78:	4a22      	ldr	r2, [pc, #136]	; (8002d04 <manage_teller+0x75c>)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	21c8      	movs	r1, #200	; 0xc8
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3350      	adds	r3, #80	; 0x50
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
				tellers[i].current_time_waiting.second = 0;
 8002c8a:	4a1e      	ldr	r2, [pc, #120]	; (8002d04 <manage_teller+0x75c>)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	21c8      	movs	r1, #200	; 0xc8
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3354      	adds	r3, #84	; 0x54
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
				if(clock_compare(tellers[i].current_time_waiting, tellers[i].max_time_waiting) == 0){
 8002c9c:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <manage_teller+0x75c>)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	21c8      	movs	r1, #200	; 0xc8
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3360      	adds	r3, #96	; 0x60
 8002caa:	4916      	ldr	r1, [pc, #88]	; (8002d04 <manage_teller+0x75c>)
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	20c8      	movs	r0, #200	; 0xc8
 8002cb0:	fb00 f202 	mul.w	r2, r0, r2
 8002cb4:	440a      	add	r2, r1
 8002cb6:	3248      	adds	r2, #72	; 0x48
 8002cb8:	466c      	mov	r4, sp
 8002cba:	f103 0108 	add.w	r1, r3, #8
 8002cbe:	c903      	ldmia	r1, {r0, r1}
 8002cc0:	e884 0003 	stmia.w	r4, {r0, r1}
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	3204      	adds	r2, #4
 8002cc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cca:	f7fe fb3b 	bl	8001344 <clock_compare>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f040 80ff 	bne.w	8002ed4 <manage_teller+0x92c>
					tellers[i].max_time_waiting = tellers[i].current_time_waiting;
 8002cd6:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <manage_teller+0x75c>)
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	21c8      	movs	r1, #200	; 0xc8
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3360      	adds	r3, #96	; 0x60
 8002ce4:	4907      	ldr	r1, [pc, #28]	; (8002d04 <manage_teller+0x75c>)
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	20c8      	movs	r0, #200	; 0xc8
 8002cea:	fb00 f202 	mul.w	r2, r0, r2
 8002cee:	440a      	add	r2, r1
 8002cf0:	3248      	adds	r2, #72	; 0x48
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	3204      	adds	r2, #4
 8002cf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cf8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			break;
 8002cfc:	e0ea      	b.n	8002ed4 <manage_teller+0x92c>
 8002cfe:	bf00      	nop
 8002d00:	2000012c 	.word	0x2000012c
 8002d04:	200003f4 	.word	0x200003f4
 8002d08:	20000128 	.word	0x20000128
 8002d0c:	20000038 	.word	0x20000038
 8002d10:	200002c8 	.word	0x200002c8
 8002d14:	200002d4 	.word	0x200002d4
			if(clock_compare(Clock, tellers[i].service_end_time) == 1){
 8002d18:	4a72      	ldr	r2, [pc, #456]	; (8002ee4 <manage_teller+0x93c>)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	21c8      	movs	r1, #200	; 0xc8
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3310      	adds	r3, #16
 8002d26:	4a70      	ldr	r2, [pc, #448]	; (8002ee8 <manage_teller+0x940>)
 8002d28:	466c      	mov	r4, sp
 8002d2a:	f103 0108 	add.w	r1, r3, #8
 8002d2e:	c903      	ldmia	r1, {r0, r1}
 8002d30:	e884 0003 	stmia.w	r4, {r0, r1}
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d38:	f7fe fb04 	bl	8001344 <clock_compare>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	f040 80ca 	bne.w	8002ed8 <manage_teller+0x930>
				tellers[i].status = 0;
 8002d44:	4a67      	ldr	r2, [pc, #412]	; (8002ee4 <manage_teller+0x93c>)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	21c8      	movs	r1, #200	; 0xc8
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3304      	adds	r3, #4
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
				tellers[i].teller_start_wait = Clock;
 8002d56:	4a63      	ldr	r2, [pc, #396]	; (8002ee4 <manage_teller+0x93c>)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	21c8      	movs	r1, #200	; 0xc8
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	3370      	adds	r3, #112	; 0x70
 8002d64:	4a60      	ldr	r2, [pc, #384]	; (8002ee8 <manage_teller+0x940>)
 8002d66:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].customers_served++;
 8002d6c:	4a5d      	ldr	r2, [pc, #372]	; (8002ee4 <manage_teller+0x93c>)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	21c8      	movs	r1, #200	; 0xc8
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3320      	adds	r3, #32
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	4959      	ldr	r1, [pc, #356]	; (8002ee4 <manage_teller+0x93c>)
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	20c8      	movs	r0, #200	; 0xc8
 8002d84:	fb00 f303 	mul.w	r3, r0, r3
 8002d88:	440b      	add	r3, r1
 8002d8a:	3320      	adds	r3, #32
 8002d8c:	601a      	str	r2, [r3, #0]
				tellers[i].current_time_working = subtract_Clocks(Clock, tellers[i].service_start_time);
 8002d8e:	4a55      	ldr	r2, [pc, #340]	; (8002ee4 <manage_teller+0x93c>)
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	21c8      	movs	r1, #200	; 0xc8
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	f103 0640 	add.w	r6, r3, #64	; 0x40
 8002d9e:	f107 0508 	add.w	r5, r7, #8
 8002da2:	4c51      	ldr	r4, [pc, #324]	; (8002ee8 <manage_teller+0x940>)
 8002da4:	4a4f      	ldr	r2, [pc, #316]	; (8002ee4 <manage_teller+0x93c>)
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	21c8      	movs	r1, #200	; 0xc8
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	f103 0208 	add.w	r2, r3, #8
 8002db4:	466b      	mov	r3, sp
 8002db6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002db8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002dbc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	f7fe fb01 	bl	80013c8 <subtract_Clocks>
 8002dc6:	4634      	mov	r4, r6
 8002dc8:	f107 0308 	add.w	r3, r7, #8
 8002dcc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002dd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				if(clock_compare(tellers[i].current_time_working, tellers[i].max_time_working) == 0){
 8002dd4:	4a43      	ldr	r2, [pc, #268]	; (8002ee4 <manage_teller+0x93c>)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	21c8      	movs	r1, #200	; 0xc8
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	3358      	adds	r3, #88	; 0x58
 8002de2:	4940      	ldr	r1, [pc, #256]	; (8002ee4 <manage_teller+0x93c>)
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	20c8      	movs	r0, #200	; 0xc8
 8002de8:	fb00 f202 	mul.w	r2, r0, r2
 8002dec:	440a      	add	r2, r1
 8002dee:	3240      	adds	r2, #64	; 0x40
 8002df0:	466c      	mov	r4, sp
 8002df2:	1d19      	adds	r1, r3, #4
 8002df4:	c903      	ldmia	r1, {r0, r1}
 8002df6:	e884 0003 	stmia.w	r4, {r0, r1}
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dfe:	f7fe faa1 	bl	8001344 <clock_compare>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d113      	bne.n	8002e30 <manage_teller+0x888>
					tellers[i].max_time_working = tellers[i].current_time_working;
 8002e08:	4a36      	ldr	r2, [pc, #216]	; (8002ee4 <manage_teller+0x93c>)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	21c8      	movs	r1, #200	; 0xc8
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8002e18:	4a32      	ldr	r2, [pc, #200]	; (8002ee4 <manage_teller+0x93c>)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	21c8      	movs	r1, #200	; 0xc8
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002e28:	4603      	mov	r3, r0
 8002e2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].current_time_working = clock_init(tellers[i].current_time_working);
 8002e30:	4a2c      	ldr	r2, [pc, #176]	; (8002ee4 <manage_teller+0x93c>)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	21c8      	movs	r1, #200	; 0xc8
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002e40:	f107 0008 	add.w	r0, r7, #8
 8002e44:	4a27      	ldr	r2, [pc, #156]	; (8002ee4 <manage_teller+0x93c>)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	21c8      	movs	r1, #200	; 0xc8
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	3340      	adds	r3, #64	; 0x40
 8002e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e54:	f7fe f9c8 	bl	80011e8 <clock_init>
 8002e58:	f107 0308 	add.w	r3, r7, #8
 8002e5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				tellers[i].service_end_time = clock_init(tellers[i].service_end_time);
 8002e64:	4a1f      	ldr	r2, [pc, #124]	; (8002ee4 <manage_teller+0x93c>)
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	21c8      	movs	r1, #200	; 0xc8
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	f103 0410 	add.w	r4, r3, #16
 8002e74:	f107 0008 	add.w	r0, r7, #8
 8002e78:	4a1a      	ldr	r2, [pc, #104]	; (8002ee4 <manage_teller+0x93c>)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	21c8      	movs	r1, #200	; 0xc8
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3310      	adds	r3, #16
 8002e86:	3304      	adds	r3, #4
 8002e88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e8a:	f7fe f9ad 	bl	80011e8 <clock_init>
 8002e8e:	1d23      	adds	r3, r4, #4
 8002e90:	f107 0208 	add.w	r2, r7, #8
 8002e94:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].service_start_time = clock_init(tellers[i].service_start_time);
 8002e9a:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <manage_teller+0x93c>)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	21c8      	movs	r1, #200	; 0xc8
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f103 0408 	add.w	r4, r3, #8
 8002eaa:	f107 0008 	add.w	r0, r7, #8
 8002eae:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <manage_teller+0x93c>)
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	21c8      	movs	r1, #200	; 0xc8
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	3308      	adds	r3, #8
 8002ebc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ebe:	f7fe f993 	bl	80011e8 <clock_init>
 8002ec2:	f107 0308 	add.w	r3, r7, #8
 8002ec6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002eca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			break;
 8002ece:	e003      	b.n	8002ed8 <manage_teller+0x930>
			break;
 8002ed0:	bf00      	nop
 8002ed2:	e002      	b.n	8002eda <manage_teller+0x932>
			break;
 8002ed4:	bf00      	nop
 8002ed6:	e000      	b.n	8002eda <manage_teller+0x932>
			break;
 8002ed8:	bf00      	nop
}
 8002eda:	bf00      	nop
 8002edc:	3764      	adds	r7, #100	; 0x64
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200003f4 	.word	0x200003f4
 8002ee8:	20000038 	.word	0x20000038

08002eec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ef0:	f7ff f9ec 	bl	80022cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ef4:	480c      	ldr	r0, [pc, #48]	; (8002f28 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ef6:	490d      	ldr	r1, [pc, #52]	; (8002f2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ef8:	4a0d      	ldr	r2, [pc, #52]	; (8002f30 <LoopForever+0xe>)
  movs r3, #0
 8002efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002efc:	e002      	b.n	8002f04 <LoopCopyDataInit>

08002efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f02:	3304      	adds	r3, #4

08002f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f08:	d3f9      	bcc.n	8002efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f0a:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f0c:	4c0a      	ldr	r4, [pc, #40]	; (8002f38 <LoopForever+0x16>)
  movs r3, #0
 8002f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f10:	e001      	b.n	8002f16 <LoopFillZerobss>

08002f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f14:	3204      	adds	r2, #4

08002f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f18:	d3fb      	bcc.n	8002f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f1a:	f006 fb97 	bl	800964c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f1e:	f7fe fd07 	bl	8001930 <main>

08002f22 <LoopForever>:

LoopForever:
    b LoopForever
 8002f22:	e7fe      	b.n	8002f22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f2c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002f30:	0800a260 	.word	0x0800a260
  ldr r2, =_sbss
 8002f34:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002f38:	20006f58 	.word	0x20006f58

08002f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f3c:	e7fe      	b.n	8002f3c <ADC1_2_IRQHandler>
	...

08002f40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_Init+0x3c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <HAL_Init+0x3c>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f56:	2003      	movs	r0, #3
 8002f58:	f000 f93e 	bl	80031d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f5c:	200f      	movs	r0, #15
 8002f5e:	f000 f80f 	bl	8002f80 <HAL_InitTick>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	71fb      	strb	r3, [r7, #7]
 8002f6c:	e001      	b.n	8002f72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f6e:	f7ff f849 	bl	8002004 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f72:	79fb      	ldrb	r3, [r7, #7]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40022000 	.word	0x40022000

08002f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <HAL_InitTick+0x6c>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d023      	beq.n	8002fdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f94:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <HAL_InitTick+0x70>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <HAL_InitTick+0x6c>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f949 	bl	8003242 <HAL_SYSTICK_Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10f      	bne.n	8002fd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b0f      	cmp	r3, #15
 8002fba:	d809      	bhi.n	8002fd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc4:	f000 f913 	bl	80031ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fc8:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <HAL_InitTick+0x74>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e007      	b.n	8002fe0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
 8002fd4:	e004      	b.n	8002fe0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
 8002fda:	e001      	b.n	8002fe0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000058 	.word	0x20000058
 8002ff0:	20000050 	.word	0x20000050
 8002ff4:	20000054 	.word	0x20000054

08002ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_IncTick+0x20>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_IncTick+0x24>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4413      	add	r3, r2
 8003008:	4a04      	ldr	r2, [pc, #16]	; (800301c <HAL_IncTick+0x24>)
 800300a:	6013      	str	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000058 	.word	0x20000058
 800301c:	2000064c 	.word	0x2000064c

08003020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return uwTick;
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_GetTick+0x14>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	2000064c 	.word	0x2000064c

08003038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <__NVIC_SetPriorityGrouping+0x44>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003054:	4013      	ands	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800306a:	4a04      	ldr	r2, [pc, #16]	; (800307c <__NVIC_SetPriorityGrouping+0x44>)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	60d3      	str	r3, [r2, #12]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <__NVIC_GetPriorityGrouping+0x18>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f003 0307 	and.w	r3, r3, #7
}
 800308e:	4618      	mov	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	db0b      	blt.n	80030c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	4907      	ldr	r1, [pc, #28]	; (80030d4 <__NVIC_EnableIRQ+0x38>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2001      	movs	r0, #1
 80030be:	fa00 f202 	lsl.w	r2, r0, r2
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	e000e100 	.word	0xe000e100

080030d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	6039      	str	r1, [r7, #0]
 80030e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	db0a      	blt.n	8003102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	490c      	ldr	r1, [pc, #48]	; (8003124 <__NVIC_SetPriority+0x4c>)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	440b      	add	r3, r1
 80030fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003100:	e00a      	b.n	8003118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4908      	ldr	r1, [pc, #32]	; (8003128 <__NVIC_SetPriority+0x50>)
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	3b04      	subs	r3, #4
 8003110:	0112      	lsls	r2, r2, #4
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	440b      	add	r3, r1
 8003116:	761a      	strb	r2, [r3, #24]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000e100 	.word	0xe000e100
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	; 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f1c3 0307 	rsb	r3, r3, #7
 8003146:	2b04      	cmp	r3, #4
 8003148:	bf28      	it	cs
 800314a:	2304      	movcs	r3, #4
 800314c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3304      	adds	r3, #4
 8003152:	2b06      	cmp	r3, #6
 8003154:	d902      	bls.n	800315c <NVIC_EncodePriority+0x30>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3b03      	subs	r3, #3
 800315a:	e000      	b.n	800315e <NVIC_EncodePriority+0x32>
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	f04f 32ff 	mov.w	r2, #4294967295
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	401a      	ands	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003174:	f04f 31ff 	mov.w	r1, #4294967295
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43d9      	mvns	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	4313      	orrs	r3, r2
         );
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	; 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3b01      	subs	r3, #1
 80031a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a4:	d301      	bcc.n	80031aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a6:	2301      	movs	r3, #1
 80031a8:	e00f      	b.n	80031ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <SysTick_Config+0x40>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b2:	210f      	movs	r1, #15
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	f7ff ff8e 	bl	80030d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <SysTick_Config+0x40>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c2:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <SysTick_Config+0x40>)
 80031c4:	2207      	movs	r2, #7
 80031c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	e000e010 	.word	0xe000e010

080031d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff29 	bl	8003038 <__NVIC_SetPriorityGrouping>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003200:	f7ff ff3e 	bl	8003080 <__NVIC_GetPriorityGrouping>
 8003204:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	6978      	ldr	r0, [r7, #20]
 800320c:	f7ff ff8e 	bl	800312c <NVIC_EncodePriority>
 8003210:	4602      	mov	r2, r0
 8003212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff5d 	bl	80030d8 <__NVIC_SetPriority>
}
 800321e:	bf00      	nop
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff31 	bl	800309c <__NVIC_EnableIRQ>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ffa2 	bl	8003194 <SysTick_Config>
 8003250:	4603      	mov	r3, r0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800326a:	e17f      	b.n	800356c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2101      	movs	r1, #1
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	4013      	ands	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8171 	beq.w	8003566 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d005      	beq.n	800329c <HAL_GPIO_Init+0x40>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d130      	bne.n	80032fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032d2:	2201      	movs	r2, #1
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f003 0201 	and.w	r2, r3, #1
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b03      	cmp	r3, #3
 8003308:	d118      	bne.n	800333c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003310:	2201      	movs	r2, #1
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4013      	ands	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	08db      	lsrs	r3, r3, #3
 8003326:	f003 0201 	and.w	r2, r3, #1
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0303 	and.w	r3, r3, #3
 8003344:	2b03      	cmp	r3, #3
 8003346:	d017      	beq.n	8003378 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	2203      	movs	r2, #3
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d123      	bne.n	80033cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	08da      	lsrs	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3208      	adds	r2, #8
 800338c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003390:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	220f      	movs	r2, #15
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	08da      	lsrs	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3208      	adds	r2, #8
 80033c6:	6939      	ldr	r1, [r7, #16]
 80033c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	2203      	movs	r2, #3
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0203 	and.w	r2, r3, #3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80ac 	beq.w	8003566 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340e:	4b5f      	ldr	r3, [pc, #380]	; (800358c <HAL_GPIO_Init+0x330>)
 8003410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003412:	4a5e      	ldr	r2, [pc, #376]	; (800358c <HAL_GPIO_Init+0x330>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	6613      	str	r3, [r2, #96]	; 0x60
 800341a:	4b5c      	ldr	r3, [pc, #368]	; (800358c <HAL_GPIO_Init+0x330>)
 800341c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003426:	4a5a      	ldr	r2, [pc, #360]	; (8003590 <HAL_GPIO_Init+0x334>)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	089b      	lsrs	r3, r3, #2
 800342c:	3302      	adds	r3, #2
 800342e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003432:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	220f      	movs	r2, #15
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003450:	d025      	beq.n	800349e <HAL_GPIO_Init+0x242>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a4f      	ldr	r2, [pc, #316]	; (8003594 <HAL_GPIO_Init+0x338>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01f      	beq.n	800349a <HAL_GPIO_Init+0x23e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a4e      	ldr	r2, [pc, #312]	; (8003598 <HAL_GPIO_Init+0x33c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d019      	beq.n	8003496 <HAL_GPIO_Init+0x23a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a4d      	ldr	r2, [pc, #308]	; (800359c <HAL_GPIO_Init+0x340>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <HAL_GPIO_Init+0x236>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a4c      	ldr	r2, [pc, #304]	; (80035a0 <HAL_GPIO_Init+0x344>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00d      	beq.n	800348e <HAL_GPIO_Init+0x232>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a4b      	ldr	r2, [pc, #300]	; (80035a4 <HAL_GPIO_Init+0x348>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d007      	beq.n	800348a <HAL_GPIO_Init+0x22e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a4a      	ldr	r2, [pc, #296]	; (80035a8 <HAL_GPIO_Init+0x34c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_GPIO_Init+0x22a>
 8003482:	2306      	movs	r3, #6
 8003484:	e00c      	b.n	80034a0 <HAL_GPIO_Init+0x244>
 8003486:	2307      	movs	r3, #7
 8003488:	e00a      	b.n	80034a0 <HAL_GPIO_Init+0x244>
 800348a:	2305      	movs	r3, #5
 800348c:	e008      	b.n	80034a0 <HAL_GPIO_Init+0x244>
 800348e:	2304      	movs	r3, #4
 8003490:	e006      	b.n	80034a0 <HAL_GPIO_Init+0x244>
 8003492:	2303      	movs	r3, #3
 8003494:	e004      	b.n	80034a0 <HAL_GPIO_Init+0x244>
 8003496:	2302      	movs	r3, #2
 8003498:	e002      	b.n	80034a0 <HAL_GPIO_Init+0x244>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <HAL_GPIO_Init+0x244>
 800349e:	2300      	movs	r3, #0
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	f002 0203 	and.w	r2, r2, #3
 80034a6:	0092      	lsls	r2, r2, #2
 80034a8:	4093      	lsls	r3, r2
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034b0:	4937      	ldr	r1, [pc, #220]	; (8003590 <HAL_GPIO_Init+0x334>)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	089b      	lsrs	r3, r3, #2
 80034b6:	3302      	adds	r3, #2
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034be:	4b3b      	ldr	r3, [pc, #236]	; (80035ac <HAL_GPIO_Init+0x350>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034e2:	4a32      	ldr	r2, [pc, #200]	; (80035ac <HAL_GPIO_Init+0x350>)
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034e8:	4b30      	ldr	r3, [pc, #192]	; (80035ac <HAL_GPIO_Init+0x350>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800350c:	4a27      	ldr	r2, [pc, #156]	; (80035ac <HAL_GPIO_Init+0x350>)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003512:	4b26      	ldr	r3, [pc, #152]	; (80035ac <HAL_GPIO_Init+0x350>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	43db      	mvns	r3, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003536:	4a1d      	ldr	r2, [pc, #116]	; (80035ac <HAL_GPIO_Init+0x350>)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_GPIO_Init+0x350>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	43db      	mvns	r3, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003560:	4a12      	ldr	r2, [pc, #72]	; (80035ac <HAL_GPIO_Init+0x350>)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3301      	adds	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	fa22 f303 	lsr.w	r3, r2, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	f47f ae78 	bne.w	800326c <HAL_GPIO_Init+0x10>
  }
}
 800357c:	bf00      	nop
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000
 8003590:	40010000 	.word	0x40010000
 8003594:	48000400 	.word	0x48000400
 8003598:	48000800 	.word	0x48000800
 800359c:	48000c00 	.word	0x48000c00
 80035a0:	48001000 	.word	0x48001000
 80035a4:	48001400 	.word	0x48001400
 80035a8:	48001800 	.word	0x48001800
 80035ac:	40010400 	.word	0x40010400

080035b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	887b      	ldrh	r3, [r7, #2]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	e001      	b.n	80035d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
 80035ec:	4613      	mov	r3, r2
 80035ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f0:	787b      	ldrb	r3, [r7, #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035fc:	e002      	b.n	8003604 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035fe:	887a      	ldrh	r2, [r7, #2]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <HAL_PWREx_GetVoltageRange+0x18>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40007000 	.word	0x40007000

0800362c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800363a:	d130      	bne.n	800369e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800363c:	4b23      	ldr	r3, [pc, #140]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003648:	d038      	beq.n	80036bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800364a:	4b20      	ldr	r3, [pc, #128]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003652:	4a1e      	ldr	r2, [pc, #120]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003654:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003658:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2232      	movs	r2, #50	; 0x32
 8003660:	fb02 f303 	mul.w	r3, r2, r3
 8003664:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	0c9b      	lsrs	r3, r3, #18
 800366c:	3301      	adds	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003670:	e002      	b.n	8003678 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3b01      	subs	r3, #1
 8003676:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003678:	4b14      	ldr	r3, [pc, #80]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	d102      	bne.n	800368c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f2      	bne.n	8003672 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800368c:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003698:	d110      	bne.n	80036bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e00f      	b.n	80036be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036aa:	d007      	beq.n	80036bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036ac:	4b07      	ldr	r3, [pc, #28]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036b4:	4a05      	ldr	r2, [pc, #20]	; (80036cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40007000 	.word	0x40007000
 80036d0:	20000050 	.word	0x20000050
 80036d4:	431bde83 	.word	0x431bde83

080036d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e3ca      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ea:	4b97      	ldr	r3, [pc, #604]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036f4:	4b94      	ldr	r3, [pc, #592]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80e4 	beq.w	80038d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <HAL_RCC_OscConfig+0x4a>
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	2b0c      	cmp	r3, #12
 8003716:	f040 808b 	bne.w	8003830 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b01      	cmp	r3, #1
 800371e:	f040 8087 	bne.w	8003830 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003722:	4b89      	ldr	r3, [pc, #548]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_RCC_OscConfig+0x62>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e3a2      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1a      	ldr	r2, [r3, #32]
 800373e:	4b82      	ldr	r3, [pc, #520]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d004      	beq.n	8003754 <HAL_RCC_OscConfig+0x7c>
 800374a:	4b7f      	ldr	r3, [pc, #508]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003752:	e005      	b.n	8003760 <HAL_RCC_OscConfig+0x88>
 8003754:	4b7c      	ldr	r3, [pc, #496]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 8003756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003760:	4293      	cmp	r3, r2
 8003762:	d223      	bcs.n	80037ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4618      	mov	r0, r3
 800376a:	f000 fd55 	bl	8004218 <RCC_SetFlashLatencyFromMSIRange>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e383      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003778:	4b73      	ldr	r3, [pc, #460]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a72      	ldr	r2, [pc, #456]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 800377e:	f043 0308 	orr.w	r3, r3, #8
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b70      	ldr	r3, [pc, #448]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	496d      	ldr	r1, [pc, #436]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003796:	4b6c      	ldr	r3, [pc, #432]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	021b      	lsls	r3, r3, #8
 80037a4:	4968      	ldr	r1, [pc, #416]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	604b      	str	r3, [r1, #4]
 80037aa:	e025      	b.n	80037f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ac:	4b66      	ldr	r3, [pc, #408]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a65      	ldr	r2, [pc, #404]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 80037b2:	f043 0308 	orr.w	r3, r3, #8
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4b63      	ldr	r3, [pc, #396]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	4960      	ldr	r1, [pc, #384]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037ca:	4b5f      	ldr	r3, [pc, #380]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	021b      	lsls	r3, r3, #8
 80037d8:	495b      	ldr	r1, [pc, #364]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d109      	bne.n	80037f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fd15 	bl	8004218 <RCC_SetFlashLatencyFromMSIRange>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e343      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037f8:	f000 fc4a 	bl	8004090 <HAL_RCC_GetSysClockFreq>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b52      	ldr	r3, [pc, #328]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	4950      	ldr	r1, [pc, #320]	; (800394c <HAL_RCC_OscConfig+0x274>)
 800380a:	5ccb      	ldrb	r3, [r1, r3]
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
 8003814:	4a4e      	ldr	r2, [pc, #312]	; (8003950 <HAL_RCC_OscConfig+0x278>)
 8003816:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003818:	4b4e      	ldr	r3, [pc, #312]	; (8003954 <HAL_RCC_OscConfig+0x27c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fbaf 	bl	8002f80 <HAL_InitTick>
 8003822:	4603      	mov	r3, r0
 8003824:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d052      	beq.n	80038d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	e327      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d032      	beq.n	800389e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003838:	4b43      	ldr	r3, [pc, #268]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a42      	ldr	r2, [pc, #264]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003844:	f7ff fbec 	bl	8003020 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800384c:	f7ff fbe8 	bl	8003020 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e310      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800385e:	4b3a      	ldr	r3, [pc, #232]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800386a:	4b37      	ldr	r3, [pc, #220]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a36      	ldr	r2, [pc, #216]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 8003870:	f043 0308 	orr.w	r3, r3, #8
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	4b34      	ldr	r3, [pc, #208]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4931      	ldr	r1, [pc, #196]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 8003884:	4313      	orrs	r3, r2
 8003886:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003888:	4b2f      	ldr	r3, [pc, #188]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	492c      	ldr	r1, [pc, #176]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]
 800389c:	e01a      	b.n	80038d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800389e:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a29      	ldr	r2, [pc, #164]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038aa:	f7ff fbb9 	bl	8003020 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038b2:	f7ff fbb5 	bl	8003020 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e2dd      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038c4:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f0      	bne.n	80038b2 <HAL_RCC_OscConfig+0x1da>
 80038d0:	e000      	b.n	80038d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d074      	beq.n	80039ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d005      	beq.n	80038f2 <HAL_RCC_OscConfig+0x21a>
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b0c      	cmp	r3, #12
 80038ea:	d10e      	bne.n	800390a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d10b      	bne.n	800390a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f2:	4b15      	ldr	r3, [pc, #84]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d064      	beq.n	80039c8 <HAL_RCC_OscConfig+0x2f0>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d160      	bne.n	80039c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e2ba      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003912:	d106      	bne.n	8003922 <HAL_RCC_OscConfig+0x24a>
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 800391a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	e026      	b.n	8003970 <HAL_RCC_OscConfig+0x298>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800392a:	d115      	bne.n	8003958 <HAL_RCC_OscConfig+0x280>
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a05      	ldr	r2, [pc, #20]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 8003932:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	4b03      	ldr	r3, [pc, #12]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a02      	ldr	r2, [pc, #8]	; (8003948 <HAL_RCC_OscConfig+0x270>)
 800393e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	e014      	b.n	8003970 <HAL_RCC_OscConfig+0x298>
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	0800a1d4 	.word	0x0800a1d4
 8003950:	20000050 	.word	0x20000050
 8003954:	20000054 	.word	0x20000054
 8003958:	4ba0      	ldr	r3, [pc, #640]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a9f      	ldr	r2, [pc, #636]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 800395e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4b9d      	ldr	r3, [pc, #628]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a9c      	ldr	r2, [pc, #624]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 800396a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d013      	beq.n	80039a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7ff fb52 	bl	8003020 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003980:	f7ff fb4e 	bl	8003020 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	; 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e276      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003992:	4b92      	ldr	r3, [pc, #584]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0x2a8>
 800399e:	e014      	b.n	80039ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7ff fb3e 	bl	8003020 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a8:	f7ff fb3a 	bl	8003020 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e262      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ba:	4b88      	ldr	r3, [pc, #544]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x2d0>
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d060      	beq.n	8003a98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_OscConfig+0x310>
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d119      	bne.n	8003a16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d116      	bne.n	8003a16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e8:	4b7c      	ldr	r3, [pc, #496]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_OscConfig+0x328>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e23f      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	4b76      	ldr	r3, [pc, #472]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	061b      	lsls	r3, r3, #24
 8003a0e:	4973      	ldr	r1, [pc, #460]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a14:	e040      	b.n	8003a98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d023      	beq.n	8003a66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a1e:	4b6f      	ldr	r3, [pc, #444]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6e      	ldr	r2, [pc, #440]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7ff faf9 	bl	8003020 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a32:	f7ff faf5 	bl	8003020 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e21d      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a44:	4b65      	ldr	r3, [pc, #404]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a50:	4b62      	ldr	r3, [pc, #392]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	061b      	lsls	r3, r3, #24
 8003a5e:	495f      	ldr	r1, [pc, #380]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	604b      	str	r3, [r1, #4]
 8003a64:	e018      	b.n	8003a98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a66:	4b5d      	ldr	r3, [pc, #372]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a5c      	ldr	r2, [pc, #368]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a72:	f7ff fad5 	bl	8003020 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a7a:	f7ff fad1 	bl	8003020 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e1f9      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a8c:	4b53      	ldr	r3, [pc, #332]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f0      	bne.n	8003a7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d03c      	beq.n	8003b1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01c      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aac:	4b4b      	ldr	r3, [pc, #300]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ab2:	4a4a      	ldr	r2, [pc, #296]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7ff fab0 	bl	8003020 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac4:	f7ff faac 	bl	8003020 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e1d4      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ad6:	4b41      	ldr	r3, [pc, #260]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0ef      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x3ec>
 8003ae4:	e01b      	b.n	8003b1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae6:	4b3d      	ldr	r3, [pc, #244]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aec:	4a3b      	ldr	r2, [pc, #236]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af6:	f7ff fa93 	bl	8003020 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003afe:	f7ff fa8f 	bl	8003020 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e1b7      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b10:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1ef      	bne.n	8003afe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80a6 	beq.w	8003c78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b30:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10d      	bne.n	8003b58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3c:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b40:	4a26      	ldr	r2, [pc, #152]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b46:	6593      	str	r3, [r2, #88]	; 0x58
 8003b48:	4b24      	ldr	r3, [pc, #144]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b54:	2301      	movs	r3, #1
 8003b56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b58:	4b21      	ldr	r3, [pc, #132]	; (8003be0 <HAL_RCC_OscConfig+0x508>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d118      	bne.n	8003b96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b64:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <HAL_RCC_OscConfig+0x508>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1d      	ldr	r2, [pc, #116]	; (8003be0 <HAL_RCC_OscConfig+0x508>)
 8003b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b70:	f7ff fa56 	bl	8003020 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b78:	f7ff fa52 	bl	8003020 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e17a      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <HAL_RCC_OscConfig+0x508>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d108      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x4d8>
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba4:	4a0d      	ldr	r2, [pc, #52]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bae:	e029      	b.n	8003c04 <HAL_RCC_OscConfig+0x52c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b05      	cmp	r3, #5
 8003bb6:	d115      	bne.n	8003be4 <HAL_RCC_OscConfig+0x50c>
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbe:	4a07      	ldr	r2, [pc, #28]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bc8:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	4a03      	ldr	r2, [pc, #12]	; (8003bdc <HAL_RCC_OscConfig+0x504>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bd8:	e014      	b.n	8003c04 <HAL_RCC_OscConfig+0x52c>
 8003bda:	bf00      	nop
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40007000 	.word	0x40007000
 8003be4:	4b9c      	ldr	r3, [pc, #624]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	4a9b      	ldr	r2, [pc, #620]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bf4:	4b98      	ldr	r3, [pc, #608]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	4a97      	ldr	r2, [pc, #604]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003bfc:	f023 0304 	bic.w	r3, r3, #4
 8003c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d016      	beq.n	8003c3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0c:	f7ff fa08 	bl	8003020 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7ff fa04 	bl	8003020 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e12a      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c2a:	4b8b      	ldr	r3, [pc, #556]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0ed      	beq.n	8003c14 <HAL_RCC_OscConfig+0x53c>
 8003c38:	e015      	b.n	8003c66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3a:	f7ff f9f1 	bl	8003020 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c40:	e00a      	b.n	8003c58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c42:	f7ff f9ed 	bl	8003020 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e113      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c58:	4b7f      	ldr	r3, [pc, #508]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1ed      	bne.n	8003c42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c66:	7ffb      	ldrb	r3, [r7, #31]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d105      	bne.n	8003c78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6c:	4b7a      	ldr	r3, [pc, #488]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c70:	4a79      	ldr	r2, [pc, #484]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c76:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 80fe 	beq.w	8003e7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	f040 80d0 	bne.w	8003e2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c8c:	4b72      	ldr	r3, [pc, #456]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f003 0203 	and.w	r2, r3, #3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d130      	bne.n	8003d02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	3b01      	subs	r3, #1
 8003cac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d127      	bne.n	8003d02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d11f      	bne.n	8003d02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ccc:	2a07      	cmp	r2, #7
 8003cce:	bf14      	ite	ne
 8003cd0:	2201      	movne	r2, #1
 8003cd2:	2200      	moveq	r2, #0
 8003cd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d113      	bne.n	8003d02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	085b      	lsrs	r3, r3, #1
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d109      	bne.n	8003d02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	085b      	lsrs	r3, r3, #1
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d06e      	beq.n	8003de0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b0c      	cmp	r3, #12
 8003d06:	d069      	beq.n	8003ddc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d08:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d105      	bne.n	8003d20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d14:	4b50      	ldr	r3, [pc, #320]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0ad      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d24:	4b4c      	ldr	r3, [pc, #304]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a4b      	ldr	r2, [pc, #300]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d30:	f7ff f976 	bl	8003020 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d38:	f7ff f972 	bl	8003020 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e09a      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d4a:	4b43      	ldr	r3, [pc, #268]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d56:	4b40      	ldr	r3, [pc, #256]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	4b40      	ldr	r3, [pc, #256]	; (8003e5c <HAL_RCC_OscConfig+0x784>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d66:	3a01      	subs	r2, #1
 8003d68:	0112      	lsls	r2, r2, #4
 8003d6a:	4311      	orrs	r1, r2
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d70:	0212      	lsls	r2, r2, #8
 8003d72:	4311      	orrs	r1, r2
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d78:	0852      	lsrs	r2, r2, #1
 8003d7a:	3a01      	subs	r2, #1
 8003d7c:	0552      	lsls	r2, r2, #21
 8003d7e:	4311      	orrs	r1, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d84:	0852      	lsrs	r2, r2, #1
 8003d86:	3a01      	subs	r2, #1
 8003d88:	0652      	lsls	r2, r2, #25
 8003d8a:	4311      	orrs	r1, r2
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d90:	0912      	lsrs	r2, r2, #4
 8003d92:	0452      	lsls	r2, r2, #17
 8003d94:	430a      	orrs	r2, r1
 8003d96:	4930      	ldr	r1, [pc, #192]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d9c:	4b2e      	ldr	r3, [pc, #184]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2d      	ldr	r2, [pc, #180]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003da6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003da8:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4a2a      	ldr	r2, [pc, #168]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003db4:	f7ff f934 	bl	8003020 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dbc:	f7ff f930 	bl	8003020 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e058      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dce:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dda:	e050      	b.n	8003e7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e04f      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de0:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d148      	bne.n	8003e7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a19      	ldr	r2, [pc, #100]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003df8:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a16      	ldr	r2, [pc, #88]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e04:	f7ff f90c 	bl	8003020 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7ff f908 	bl	8003020 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e030      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x734>
 8003e2a:	e028      	b.n	8003e7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2b0c      	cmp	r3, #12
 8003e30:	d023      	beq.n	8003e7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a08      	ldr	r2, [pc, #32]	; (8003e58 <HAL_RCC_OscConfig+0x780>)
 8003e38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3e:	f7ff f8ef 	bl	8003020 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e44:	e00c      	b.n	8003e60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e46:	f7ff f8eb 	bl	8003020 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d905      	bls.n	8003e60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e013      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_RCC_OscConfig+0x7b0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ec      	bne.n	8003e46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_RCC_OscConfig+0x7b0>)
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	4905      	ldr	r1, [pc, #20]	; (8003e88 <HAL_RCC_OscConfig+0x7b0>)
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <HAL_RCC_OscConfig+0x7b4>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	60cb      	str	r3, [r1, #12]
 8003e78:	e001      	b.n	8003e7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3720      	adds	r7, #32
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	feeefffc 	.word	0xfeeefffc

08003e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0e7      	b.n	8004074 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b75      	ldr	r3, [pc, #468]	; (800407c <HAL_RCC_ClockConfig+0x1ec>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d910      	bls.n	8003ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b72      	ldr	r3, [pc, #456]	; (800407c <HAL_RCC_ClockConfig+0x1ec>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f023 0207 	bic.w	r2, r3, #7
 8003eba:	4970      	ldr	r1, [pc, #448]	; (800407c <HAL_RCC_ClockConfig+0x1ec>)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec2:	4b6e      	ldr	r3, [pc, #440]	; (800407c <HAL_RCC_ClockConfig+0x1ec>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0cf      	b.n	8004074 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d010      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	4b66      	ldr	r3, [pc, #408]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d908      	bls.n	8003f02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef0:	4b63      	ldr	r3, [pc, #396]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4960      	ldr	r1, [pc, #384]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d04c      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d107      	bne.n	8003f26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f16:	4b5a      	ldr	r3, [pc, #360]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d121      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e0a6      	b.n	8004074 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f2e:	4b54      	ldr	r3, [pc, #336]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d115      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e09a      	b.n	8004074 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d107      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f46:	4b4e      	ldr	r3, [pc, #312]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e08e      	b.n	8004074 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f56:	4b4a      	ldr	r3, [pc, #296]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e086      	b.n	8004074 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f66:	4b46      	ldr	r3, [pc, #280]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f023 0203 	bic.w	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4943      	ldr	r1, [pc, #268]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f78:	f7ff f852 	bl	8003020 <HAL_GetTick>
 8003f7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f80:	f7ff f84e 	bl	8003020 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e06e      	b.n	8004074 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f96:	4b3a      	ldr	r3, [pc, #232]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 020c 	and.w	r2, r3, #12
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d1eb      	bne.n	8003f80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d010      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	4b31      	ldr	r3, [pc, #196]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d208      	bcs.n	8003fd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc4:	4b2e      	ldr	r3, [pc, #184]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	492b      	ldr	r1, [pc, #172]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd6:	4b29      	ldr	r3, [pc, #164]	; (800407c <HAL_RCC_ClockConfig+0x1ec>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d210      	bcs.n	8004006 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe4:	4b25      	ldr	r3, [pc, #148]	; (800407c <HAL_RCC_ClockConfig+0x1ec>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f023 0207 	bic.w	r2, r3, #7
 8003fec:	4923      	ldr	r1, [pc, #140]	; (800407c <HAL_RCC_ClockConfig+0x1ec>)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff4:	4b21      	ldr	r3, [pc, #132]	; (800407c <HAL_RCC_ClockConfig+0x1ec>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d001      	beq.n	8004006 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e036      	b.n	8004074 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d008      	beq.n	8004024 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004012:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	4918      	ldr	r1, [pc, #96]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8004020:	4313      	orrs	r3, r2
 8004022:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d009      	beq.n	8004044 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	4910      	ldr	r1, [pc, #64]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 8004040:	4313      	orrs	r3, r2
 8004042:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004044:	f000 f824 	bl	8004090 <HAL_RCC_GetSysClockFreq>
 8004048:	4602      	mov	r2, r0
 800404a:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <HAL_RCC_ClockConfig+0x1f0>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	091b      	lsrs	r3, r3, #4
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	490b      	ldr	r1, [pc, #44]	; (8004084 <HAL_RCC_ClockConfig+0x1f4>)
 8004056:	5ccb      	ldrb	r3, [r1, r3]
 8004058:	f003 031f 	and.w	r3, r3, #31
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
 8004060:	4a09      	ldr	r2, [pc, #36]	; (8004088 <HAL_RCC_ClockConfig+0x1f8>)
 8004062:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004064:	4b09      	ldr	r3, [pc, #36]	; (800408c <HAL_RCC_ClockConfig+0x1fc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe ff89 	bl	8002f80 <HAL_InitTick>
 800406e:	4603      	mov	r3, r0
 8004070:	72fb      	strb	r3, [r7, #11]

  return status;
 8004072:	7afb      	ldrb	r3, [r7, #11]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40022000 	.word	0x40022000
 8004080:	40021000 	.word	0x40021000
 8004084:	0800a1d4 	.word	0x0800a1d4
 8004088:	20000050 	.word	0x20000050
 800408c:	20000054 	.word	0x20000054

08004090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004090:	b480      	push	{r7}
 8004092:	b089      	sub	sp, #36	; 0x24
 8004094:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
 800409a:	2300      	movs	r3, #0
 800409c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800409e:	4b3e      	ldr	r3, [pc, #248]	; (8004198 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040a8:	4b3b      	ldr	r3, [pc, #236]	; (8004198 <HAL_RCC_GetSysClockFreq+0x108>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x34>
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2b0c      	cmp	r3, #12
 80040bc:	d121      	bne.n	8004102 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d11e      	bne.n	8004102 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040c4:	4b34      	ldr	r3, [pc, #208]	; (8004198 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d107      	bne.n	80040e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040d0:	4b31      	ldr	r3, [pc, #196]	; (8004198 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d6:	0a1b      	lsrs	r3, r3, #8
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	61fb      	str	r3, [r7, #28]
 80040de:	e005      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040e0:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040ec:	4a2b      	ldr	r2, [pc, #172]	; (800419c <HAL_RCC_GetSysClockFreq+0x10c>)
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10d      	bne.n	8004118 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004100:	e00a      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b04      	cmp	r3, #4
 8004106:	d102      	bne.n	800410e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004108:	4b25      	ldr	r3, [pc, #148]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800410a:	61bb      	str	r3, [r7, #24]
 800410c:	e004      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d101      	bne.n	8004118 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004114:	4b23      	ldr	r3, [pc, #140]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004116:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b0c      	cmp	r3, #12
 800411c:	d134      	bne.n	8004188 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800411e:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <HAL_RCC_GetSysClockFreq+0x108>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d003      	beq.n	8004136 <HAL_RCC_GetSysClockFreq+0xa6>
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b03      	cmp	r3, #3
 8004132:	d003      	beq.n	800413c <HAL_RCC_GetSysClockFreq+0xac>
 8004134:	e005      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004136:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004138:	617b      	str	r3, [r7, #20]
      break;
 800413a:	e005      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800413c:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800413e:	617b      	str	r3, [r7, #20]
      break;
 8004140:	e002      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	617b      	str	r3, [r7, #20]
      break;
 8004146:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004148:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_RCC_GetSysClockFreq+0x108>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	3301      	adds	r3, #1
 8004154:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <HAL_RCC_GetSysClockFreq+0x108>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	0a1b      	lsrs	r3, r3, #8
 800415c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	fb03 f202 	mul.w	r2, r3, r2
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	fbb2 f3f3 	udiv	r3, r2, r3
 800416c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800416e:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <HAL_RCC_GetSysClockFreq+0x108>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	0e5b      	lsrs	r3, r3, #25
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	3301      	adds	r3, #1
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	fbb2 f3f3 	udiv	r3, r2, r3
 8004186:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004188:	69bb      	ldr	r3, [r7, #24]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3724      	adds	r7, #36	; 0x24
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	0800a1ec 	.word	0x0800a1ec
 80041a0:	00f42400 	.word	0x00f42400
 80041a4:	007a1200 	.word	0x007a1200

080041a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041ac:	4b03      	ldr	r3, [pc, #12]	; (80041bc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ae:	681b      	ldr	r3, [r3, #0]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	20000050 	.word	0x20000050

080041c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041c4:	f7ff fff0 	bl	80041a8 <HAL_RCC_GetHCLKFreq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	0a1b      	lsrs	r3, r3, #8
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	4904      	ldr	r1, [pc, #16]	; (80041e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041d6:	5ccb      	ldrb	r3, [r1, r3]
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40021000 	.word	0x40021000
 80041e8:	0800a1e4 	.word	0x0800a1e4

080041ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041f0:	f7ff ffda 	bl	80041a8 <HAL_RCC_GetHCLKFreq>
 80041f4:	4602      	mov	r2, r0
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	0adb      	lsrs	r3, r3, #11
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	4904      	ldr	r1, [pc, #16]	; (8004214 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004202:	5ccb      	ldrb	r3, [r1, r3]
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800420c:	4618      	mov	r0, r3
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40021000 	.word	0x40021000
 8004214:	0800a1e4 	.word	0x0800a1e4

08004218 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004224:	4b2a      	ldr	r3, [pc, #168]	; (80042d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004230:	f7ff f9ee 	bl	8003610 <HAL_PWREx_GetVoltageRange>
 8004234:	6178      	str	r0, [r7, #20]
 8004236:	e014      	b.n	8004262 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004238:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	4a24      	ldr	r2, [pc, #144]	; (80042d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800423e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004242:	6593      	str	r3, [r2, #88]	; 0x58
 8004244:	4b22      	ldr	r3, [pc, #136]	; (80042d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004250:	f7ff f9de 	bl	8003610 <HAL_PWREx_GetVoltageRange>
 8004254:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004256:	4b1e      	ldr	r3, [pc, #120]	; (80042d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	4a1d      	ldr	r2, [pc, #116]	; (80042d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800425c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004260:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004268:	d10b      	bne.n	8004282 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b80      	cmp	r3, #128	; 0x80
 800426e:	d919      	bls.n	80042a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2ba0      	cmp	r3, #160	; 0xa0
 8004274:	d902      	bls.n	800427c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004276:	2302      	movs	r3, #2
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	e013      	b.n	80042a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800427c:	2301      	movs	r3, #1
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	e010      	b.n	80042a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b80      	cmp	r3, #128	; 0x80
 8004286:	d902      	bls.n	800428e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004288:	2303      	movs	r3, #3
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	e00a      	b.n	80042a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b80      	cmp	r3, #128	; 0x80
 8004292:	d102      	bne.n	800429a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004294:	2302      	movs	r3, #2
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	e004      	b.n	80042a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b70      	cmp	r3, #112	; 0x70
 800429e:	d101      	bne.n	80042a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042a0:	2301      	movs	r3, #1
 80042a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 0207 	bic.w	r2, r3, #7
 80042ac:	4909      	ldr	r1, [pc, #36]	; (80042d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042b4:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d001      	beq.n	80042c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40022000 	.word	0x40022000

080042d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042e0:	2300      	movs	r3, #0
 80042e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042e4:	2300      	movs	r3, #0
 80042e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d041      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042fc:	d02a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80042fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004302:	d824      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004304:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004308:	d008      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800430a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800430e:	d81e      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004318:	d010      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800431a:	e018      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800431c:	4b86      	ldr	r3, [pc, #536]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a85      	ldr	r2, [pc, #532]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004326:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004328:	e015      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3304      	adds	r3, #4
 800432e:	2100      	movs	r1, #0
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fabb 	bl	80048ac <RCCEx_PLLSAI1_Config>
 8004336:	4603      	mov	r3, r0
 8004338:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800433a:	e00c      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3320      	adds	r3, #32
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fba6 	bl	8004a94 <RCCEx_PLLSAI2_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800434c:	e003      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	74fb      	strb	r3, [r7, #19]
      break;
 8004352:	e000      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10b      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800435c:	4b76      	ldr	r3, [pc, #472]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800436a:	4973      	ldr	r1, [pc, #460]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004372:	e001      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004374:	7cfb      	ldrb	r3, [r7, #19]
 8004376:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d041      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004388:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800438c:	d02a      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800438e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004392:	d824      	bhi.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004394:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004398:	d008      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800439a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800439e:	d81e      	bhi.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80043a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043a8:	d010      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043aa:	e018      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043ac:	4b62      	ldr	r3, [pc, #392]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a61      	ldr	r2, [pc, #388]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043b8:	e015      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3304      	adds	r3, #4
 80043be:	2100      	movs	r1, #0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fa73 	bl	80048ac <RCCEx_PLLSAI1_Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043ca:	e00c      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3320      	adds	r3, #32
 80043d0:	2100      	movs	r1, #0
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fb5e 	bl	8004a94 <RCCEx_PLLSAI2_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043dc:	e003      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	74fb      	strb	r3, [r7, #19]
      break;
 80043e2:	e000      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80043e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043e6:	7cfb      	ldrb	r3, [r7, #19]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043ec:	4b52      	ldr	r3, [pc, #328]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043fa:	494f      	ldr	r1, [pc, #316]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004402:	e001      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004404:	7cfb      	ldrb	r3, [r7, #19]
 8004406:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 80a0 	beq.w	8004556 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004416:	2300      	movs	r3, #0
 8004418:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800441a:	4b47      	ldr	r3, [pc, #284]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800442a:	2300      	movs	r3, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00d      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004430:	4b41      	ldr	r3, [pc, #260]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004434:	4a40      	ldr	r2, [pc, #256]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443a:	6593      	str	r3, [r2, #88]	; 0x58
 800443c:	4b3e      	ldr	r3, [pc, #248]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004448:	2301      	movs	r3, #1
 800444a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800444c:	4b3b      	ldr	r3, [pc, #236]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a3a      	ldr	r2, [pc, #232]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004456:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004458:	f7fe fde2 	bl	8003020 <HAL_GetTick>
 800445c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800445e:	e009      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004460:	f7fe fdde 	bl	8003020 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d902      	bls.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	74fb      	strb	r3, [r7, #19]
        break;
 8004472:	e005      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004474:	4b31      	ldr	r3, [pc, #196]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0ef      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d15c      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004486:	4b2c      	ldr	r3, [pc, #176]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004490:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01f      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d019      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044a4:	4b24      	ldr	r3, [pc, #144]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044b0:	4b21      	ldr	r3, [pc, #132]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b6:	4a20      	ldr	r2, [pc, #128]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044c0:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c6:	4a1c      	ldr	r2, [pc, #112]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044d0:	4a19      	ldr	r2, [pc, #100]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d016      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e2:	f7fe fd9d 	bl	8003020 <HAL_GetTick>
 80044e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e8:	e00b      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ea:	f7fe fd99 	bl	8003020 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d902      	bls.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	74fb      	strb	r3, [r7, #19]
            break;
 8004500:	e006      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004502:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0ec      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004510:	7cfb      	ldrb	r3, [r7, #19]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10c      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004516:	4b08      	ldr	r3, [pc, #32]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004526:	4904      	ldr	r1, [pc, #16]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800452e:	e009      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	74bb      	strb	r3, [r7, #18]
 8004534:	e006      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004536:	bf00      	nop
 8004538:	40021000 	.word	0x40021000
 800453c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004540:	7cfb      	ldrb	r3, [r7, #19]
 8004542:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004544:	7c7b      	ldrb	r3, [r7, #17]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d105      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454a:	4b9e      	ldr	r3, [pc, #632]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454e:	4a9d      	ldr	r2, [pc, #628]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004554:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004562:	4b98      	ldr	r3, [pc, #608]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004568:	f023 0203 	bic.w	r2, r3, #3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	4994      	ldr	r1, [pc, #592]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004572:	4313      	orrs	r3, r2
 8004574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004584:	4b8f      	ldr	r3, [pc, #572]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f023 020c 	bic.w	r2, r3, #12
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004592:	498c      	ldr	r1, [pc, #560]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045a6:	4b87      	ldr	r3, [pc, #540]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	4983      	ldr	r1, [pc, #524]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045c8:	4b7e      	ldr	r3, [pc, #504]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d6:	497b      	ldr	r1, [pc, #492]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045ea:	4b76      	ldr	r3, [pc, #472]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f8:	4972      	ldr	r1, [pc, #456]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800460c:	4b6d      	ldr	r3, [pc, #436]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004612:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461a:	496a      	ldr	r1, [pc, #424]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800462e:	4b65      	ldr	r3, [pc, #404]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004634:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463c:	4961      	ldr	r1, [pc, #388]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004650:	4b5c      	ldr	r3, [pc, #368]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004656:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465e:	4959      	ldr	r1, [pc, #356]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004672:	4b54      	ldr	r3, [pc, #336]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004678:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004680:	4950      	ldr	r1, [pc, #320]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004694:	4b4b      	ldr	r3, [pc, #300]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a2:	4948      	ldr	r1, [pc, #288]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046b6:	4b43      	ldr	r3, [pc, #268]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c4:	493f      	ldr	r1, [pc, #252]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d028      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046d8:	4b3a      	ldr	r3, [pc, #232]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e6:	4937      	ldr	r1, [pc, #220]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046f6:	d106      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046f8:	4b32      	ldr	r3, [pc, #200]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4a31      	ldr	r2, [pc, #196]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004702:	60d3      	str	r3, [r2, #12]
 8004704:	e011      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800470a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800470e:	d10c      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	2101      	movs	r1, #1
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f8c8 	bl	80048ac <RCCEx_PLLSAI1_Config>
 800471c:	4603      	mov	r3, r0
 800471e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004720:	7cfb      	ldrb	r3, [r7, #19]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004726:	7cfb      	ldrb	r3, [r7, #19]
 8004728:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d028      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004736:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004744:	491f      	ldr	r1, [pc, #124]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004754:	d106      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004756:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	4a1a      	ldr	r2, [pc, #104]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004760:	60d3      	str	r3, [r2, #12]
 8004762:	e011      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800476c:	d10c      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	3304      	adds	r3, #4
 8004772:	2101      	movs	r1, #1
 8004774:	4618      	mov	r0, r3
 8004776:	f000 f899 	bl	80048ac <RCCEx_PLLSAI1_Config>
 800477a:	4603      	mov	r3, r0
 800477c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800477e:	7cfb      	ldrb	r3, [r7, #19]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004784:	7cfb      	ldrb	r3, [r7, #19]
 8004786:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d02b      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a2:	4908      	ldr	r1, [pc, #32]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047b2:	d109      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047b4:	4b03      	ldr	r3, [pc, #12]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4a02      	ldr	r2, [pc, #8]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047be:	60d3      	str	r3, [r2, #12]
 80047c0:	e014      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047d0:	d10c      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3304      	adds	r3, #4
 80047d6:	2101      	movs	r1, #1
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 f867 	bl	80048ac <RCCEx_PLLSAI1_Config>
 80047de:	4603      	mov	r3, r0
 80047e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047e2:	7cfb      	ldrb	r3, [r7, #19]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80047e8:	7cfb      	ldrb	r3, [r7, #19]
 80047ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d02f      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047f8:	4b2b      	ldr	r3, [pc, #172]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004806:	4928      	ldr	r1, [pc, #160]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004816:	d10d      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	2102      	movs	r1, #2
 800481e:	4618      	mov	r0, r3
 8004820:	f000 f844 	bl	80048ac <RCCEx_PLLSAI1_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004828:	7cfb      	ldrb	r3, [r7, #19]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d014      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800482e:	7cfb      	ldrb	r3, [r7, #19]
 8004830:	74bb      	strb	r3, [r7, #18]
 8004832:	e011      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800483c:	d10c      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3320      	adds	r3, #32
 8004842:	2102      	movs	r1, #2
 8004844:	4618      	mov	r0, r3
 8004846:	f000 f925 	bl	8004a94 <RCCEx_PLLSAI2_Config>
 800484a:	4603      	mov	r3, r0
 800484c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800484e:	7cfb      	ldrb	r3, [r7, #19]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004854:	7cfb      	ldrb	r3, [r7, #19]
 8004856:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004864:	4b10      	ldr	r3, [pc, #64]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004872:	490d      	ldr	r1, [pc, #52]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00b      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004886:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004896:	4904      	ldr	r1, [pc, #16]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800489e:	7cbb      	ldrb	r3, [r7, #18]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40021000 	.word	0x40021000

080048ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ba:	4b75      	ldr	r3, [pc, #468]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d018      	beq.n	80048f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048c6:	4b72      	ldr	r3, [pc, #456]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0203 	and.w	r2, r3, #3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d10d      	bne.n	80048f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
       ||
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048de:	4b6c      	ldr	r3, [pc, #432]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	091b      	lsrs	r3, r3, #4
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
       ||
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d047      	beq.n	8004982 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	73fb      	strb	r3, [r7, #15]
 80048f6:	e044      	b.n	8004982 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d018      	beq.n	8004932 <RCCEx_PLLSAI1_Config+0x86>
 8004900:	2b03      	cmp	r3, #3
 8004902:	d825      	bhi.n	8004950 <RCCEx_PLLSAI1_Config+0xa4>
 8004904:	2b01      	cmp	r3, #1
 8004906:	d002      	beq.n	800490e <RCCEx_PLLSAI1_Config+0x62>
 8004908:	2b02      	cmp	r3, #2
 800490a:	d009      	beq.n	8004920 <RCCEx_PLLSAI1_Config+0x74>
 800490c:	e020      	b.n	8004950 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800490e:	4b60      	ldr	r3, [pc, #384]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d11d      	bne.n	8004956 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800491e:	e01a      	b.n	8004956 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004920:	4b5b      	ldr	r3, [pc, #364]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004928:	2b00      	cmp	r3, #0
 800492a:	d116      	bne.n	800495a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004930:	e013      	b.n	800495a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004932:	4b57      	ldr	r3, [pc, #348]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10f      	bne.n	800495e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800493e:	4b54      	ldr	r3, [pc, #336]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800494e:	e006      	b.n	800495e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
      break;
 8004954:	e004      	b.n	8004960 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004956:	bf00      	nop
 8004958:	e002      	b.n	8004960 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800495a:	bf00      	nop
 800495c:	e000      	b.n	8004960 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800495e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10d      	bne.n	8004982 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004966:	4b4a      	ldr	r3, [pc, #296]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6819      	ldr	r1, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	3b01      	subs	r3, #1
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	430b      	orrs	r3, r1
 800497c:	4944      	ldr	r1, [pc, #272]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 800497e:	4313      	orrs	r3, r2
 8004980:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d17d      	bne.n	8004a84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004988:	4b41      	ldr	r3, [pc, #260]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a40      	ldr	r2, [pc, #256]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 800498e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004994:	f7fe fb44 	bl	8003020 <HAL_GetTick>
 8004998:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800499a:	e009      	b.n	80049b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800499c:	f7fe fb40 	bl	8003020 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d902      	bls.n	80049b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	73fb      	strb	r3, [r7, #15]
        break;
 80049ae:	e005      	b.n	80049bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049b0:	4b37      	ldr	r3, [pc, #220]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1ef      	bne.n	800499c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d160      	bne.n	8004a84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d111      	bne.n	80049ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049c8:	4b31      	ldr	r3, [pc, #196]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6892      	ldr	r2, [r2, #8]
 80049d8:	0211      	lsls	r1, r2, #8
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68d2      	ldr	r2, [r2, #12]
 80049de:	0912      	lsrs	r2, r2, #4
 80049e0:	0452      	lsls	r2, r2, #17
 80049e2:	430a      	orrs	r2, r1
 80049e4:	492a      	ldr	r1, [pc, #168]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	610b      	str	r3, [r1, #16]
 80049ea:	e027      	b.n	8004a3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d112      	bne.n	8004a18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049f2:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6892      	ldr	r2, [r2, #8]
 8004a02:	0211      	lsls	r1, r2, #8
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6912      	ldr	r2, [r2, #16]
 8004a08:	0852      	lsrs	r2, r2, #1
 8004a0a:	3a01      	subs	r2, #1
 8004a0c:	0552      	lsls	r2, r2, #21
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	491f      	ldr	r1, [pc, #124]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	610b      	str	r3, [r1, #16]
 8004a16:	e011      	b.n	8004a3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a18:	4b1d      	ldr	r3, [pc, #116]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6892      	ldr	r2, [r2, #8]
 8004a28:	0211      	lsls	r1, r2, #8
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6952      	ldr	r2, [r2, #20]
 8004a2e:	0852      	lsrs	r2, r2, #1
 8004a30:	3a01      	subs	r2, #1
 8004a32:	0652      	lsls	r2, r2, #25
 8004a34:	430a      	orrs	r2, r1
 8004a36:	4916      	ldr	r1, [pc, #88]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a3c:	4b14      	ldr	r3, [pc, #80]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a13      	ldr	r2, [pc, #76]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a48:	f7fe faea 	bl	8003020 <HAL_GetTick>
 8004a4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a4e:	e009      	b.n	8004a64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a50:	f7fe fae6 	bl	8003020 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d902      	bls.n	8004a64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	73fb      	strb	r3, [r7, #15]
          break;
 8004a62:	e005      	b.n	8004a70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a64:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0ef      	beq.n	8004a50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a76:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	4904      	ldr	r1, [pc, #16]	; (8004a90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40021000 	.word	0x40021000

08004a94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004aa2:	4b6a      	ldr	r3, [pc, #424]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d018      	beq.n	8004ae0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004aae:	4b67      	ldr	r3, [pc, #412]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0203 	and.w	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d10d      	bne.n	8004ada <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ac6:	4b61      	ldr	r3, [pc, #388]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	091b      	lsrs	r3, r3, #4
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d047      	beq.n	8004b6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	73fb      	strb	r3, [r7, #15]
 8004ade:	e044      	b.n	8004b6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d018      	beq.n	8004b1a <RCCEx_PLLSAI2_Config+0x86>
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	d825      	bhi.n	8004b38 <RCCEx_PLLSAI2_Config+0xa4>
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d002      	beq.n	8004af6 <RCCEx_PLLSAI2_Config+0x62>
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d009      	beq.n	8004b08 <RCCEx_PLLSAI2_Config+0x74>
 8004af4:	e020      	b.n	8004b38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004af6:	4b55      	ldr	r3, [pc, #340]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d11d      	bne.n	8004b3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b06:	e01a      	b.n	8004b3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b08:	4b50      	ldr	r3, [pc, #320]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d116      	bne.n	8004b42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b18:	e013      	b.n	8004b42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b1a:	4b4c      	ldr	r3, [pc, #304]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10f      	bne.n	8004b46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b26:	4b49      	ldr	r3, [pc, #292]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d109      	bne.n	8004b46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b36:	e006      	b.n	8004b46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b3c:	e004      	b.n	8004b48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b3e:	bf00      	nop
 8004b40:	e002      	b.n	8004b48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b42:	bf00      	nop
 8004b44:	e000      	b.n	8004b48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b46:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10d      	bne.n	8004b6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b4e:	4b3f      	ldr	r3, [pc, #252]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6819      	ldr	r1, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	430b      	orrs	r3, r1
 8004b64:	4939      	ldr	r1, [pc, #228]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d167      	bne.n	8004c40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b70:	4b36      	ldr	r3, [pc, #216]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a35      	ldr	r2, [pc, #212]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b7c:	f7fe fa50 	bl	8003020 <HAL_GetTick>
 8004b80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b82:	e009      	b.n	8004b98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b84:	f7fe fa4c 	bl	8003020 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d902      	bls.n	8004b98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	73fb      	strb	r3, [r7, #15]
        break;
 8004b96:	e005      	b.n	8004ba4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b98:	4b2c      	ldr	r3, [pc, #176]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1ef      	bne.n	8004b84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d14a      	bne.n	8004c40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d111      	bne.n	8004bd4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bb0:	4b26      	ldr	r3, [pc, #152]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6892      	ldr	r2, [r2, #8]
 8004bc0:	0211      	lsls	r1, r2, #8
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	68d2      	ldr	r2, [r2, #12]
 8004bc6:	0912      	lsrs	r2, r2, #4
 8004bc8:	0452      	lsls	r2, r2, #17
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	491f      	ldr	r1, [pc, #124]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	614b      	str	r3, [r1, #20]
 8004bd2:	e011      	b.n	8004bf8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6892      	ldr	r2, [r2, #8]
 8004be4:	0211      	lsls	r1, r2, #8
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6912      	ldr	r2, [r2, #16]
 8004bea:	0852      	lsrs	r2, r2, #1
 8004bec:	3a01      	subs	r2, #1
 8004bee:	0652      	lsls	r2, r2, #25
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	4916      	ldr	r1, [pc, #88]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004bf8:	4b14      	ldr	r3, [pc, #80]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a13      	ldr	r2, [pc, #76]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c04:	f7fe fa0c 	bl	8003020 <HAL_GetTick>
 8004c08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c0a:	e009      	b.n	8004c20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c0c:	f7fe fa08 	bl	8003020 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d902      	bls.n	8004c20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	73fb      	strb	r3, [r7, #15]
          break;
 8004c1e:	e005      	b.n	8004c2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0ef      	beq.n	8004c0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c32:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	4904      	ldr	r1, [pc, #16]	; (8004c4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40021000 	.word	0x40021000

08004c50 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e049      	b.n	8004cf6 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	795b      	ldrb	r3, [r3, #5]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d105      	bne.n	8004c78 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fd f9ee 	bl	8002054 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0204 	orr.w	r2, r2, #4
 8004c8c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c98:	2b40      	cmp	r3, #64	; 0x40
 8004c9a:	d104      	bne.n	8004ca6 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e027      	b.n	8004cf6 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004ca6:	f7fe f9bb 	bl	8003020 <HAL_GetTick>
 8004caa:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004cac:	e015      	b.n	8004cda <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004cae:	f7fe f9b7 	bl	8003020 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d90e      	bls.n	8004cda <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d107      	bne.n	8004cda <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2204      	movs	r2, #4
 8004cce:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e00d      	b.n	8004cf6 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d0e2      	beq.n	8004cae <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	791b      	ldrb	r3, [r3, #4]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e044      	b.n	8004da2 <HAL_RNG_GenerateRandomNumber+0xa4>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	795b      	ldrb	r3, [r3, #5]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d133      	bne.n	8004d90 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d2e:	f7fe f977 	bl	8003020 <HAL_GetTick>
 8004d32:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d34:	e018      	b.n	8004d68 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004d36:	f7fe f973 	bl	8003020 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d911      	bls.n	8004d68 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d00a      	beq.n	8004d68 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e01c      	b.n	8004da2 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d1df      	bne.n	8004d36 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	715a      	strb	r2, [r3, #5]
 8004d8e:	e004      	b.n	8004d9a <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2204      	movs	r2, #4
 8004d94:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	711a      	strb	r2, [r3, #4]

  return status;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2210      	movs	r2, #16
 8004dcc:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	e01f      	b.n	8004e14 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d01a      	beq.n	8004e14 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d108      	bne.n	8004dfa <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	e00c      	b.n	8004e14 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 8004e00:	2301      	movs	r3, #1
 8004e02:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0208 	bic.w	r2, r2, #8
 8004e12:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10b      	bne.n	8004e32 <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f837 	bl	8004e94 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8004e2e:	605a      	str	r2, [r3, #4]

    return;
 8004e30:	e022      	b.n	8004e78 <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01d      	beq.n	8004e78 <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0208 	bic.w	r2, r2, #8
 8004e4a:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	795b      	ldrb	r3, [r3, #5]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d00b      	beq.n	8004e78 <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4619      	mov	r1, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f803 	bl	8004e7e <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e049      	b.n	8004f4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fd f90c 	bl	80020ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f000 f9d0 	bl	800528c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d001      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e04f      	b.n	8005010 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a23      	ldr	r2, [pc, #140]	; (800501c <HAL_TIM_Base_Start_IT+0xc4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01d      	beq.n	8004fce <HAL_TIM_Base_Start_IT+0x76>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9a:	d018      	beq.n	8004fce <HAL_TIM_Base_Start_IT+0x76>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1f      	ldr	r2, [pc, #124]	; (8005020 <HAL_TIM_Base_Start_IT+0xc8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d013      	beq.n	8004fce <HAL_TIM_Base_Start_IT+0x76>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <HAL_TIM_Base_Start_IT+0xcc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00e      	beq.n	8004fce <HAL_TIM_Base_Start_IT+0x76>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d009      	beq.n	8004fce <HAL_TIM_Base_Start_IT+0x76>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1b      	ldr	r2, [pc, #108]	; (800502c <HAL_TIM_Base_Start_IT+0xd4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d004      	beq.n	8004fce <HAL_TIM_Base_Start_IT+0x76>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a19      	ldr	r2, [pc, #100]	; (8005030 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d115      	bne.n	8004ffa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	4b17      	ldr	r3, [pc, #92]	; (8005034 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b06      	cmp	r3, #6
 8004fde:	d015      	beq.n	800500c <HAL_TIM_Base_Start_IT+0xb4>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe6:	d011      	beq.n	800500c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff8:	e008      	b.n	800500c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0201 	orr.w	r2, r2, #1
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	e000      	b.n	800500e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800
 8005028:	40000c00 	.word	0x40000c00
 800502c:	40013400 	.word	0x40013400
 8005030:	40014000 	.word	0x40014000
 8005034:	00010007 	.word	0x00010007

08005038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d020      	beq.n	800509c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01b      	beq.n	800509c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0202 	mvn.w	r2, #2
 800506c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f8e4 	bl	8005250 <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f8d6 	bl	800523c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f8e7 	bl	8005264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d020      	beq.n	80050e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01b      	beq.n	80050e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0204 	mvn.w	r2, #4
 80050b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2202      	movs	r2, #2
 80050be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f8be 	bl	8005250 <HAL_TIM_IC_CaptureCallback>
 80050d4:	e005      	b.n	80050e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f8b0 	bl	800523c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f8c1 	bl	8005264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d020      	beq.n	8005134 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01b      	beq.n	8005134 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0208 	mvn.w	r2, #8
 8005104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2204      	movs	r2, #4
 800510a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f898 	bl	8005250 <HAL_TIM_IC_CaptureCallback>
 8005120:	e005      	b.n	800512e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f88a 	bl	800523c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f89b 	bl	8005264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	2b00      	cmp	r3, #0
 800513c:	d020      	beq.n	8005180 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01b      	beq.n	8005180 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0210 	mvn.w	r2, #16
 8005150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2208      	movs	r2, #8
 8005156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f872 	bl	8005250 <HAL_TIM_IC_CaptureCallback>
 800516c:	e005      	b.n	800517a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f864 	bl	800523c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f875 	bl	8005264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00c      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0201 	mvn.w	r2, #1
 800519c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fc fdb2 	bl	8001d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00c      	beq.n	80051c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f98e 	bl	80054e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00c      	beq.n	80051ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d007      	beq.n	80051ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f986 	bl	80054f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00c      	beq.n	8005210 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f834 	bl	8005278 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00c      	beq.n	8005234 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0220 	mvn.w	r2, #32
 800522c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f94e 	bl	80054d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005234:	bf00      	nop
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a40      	ldr	r2, [pc, #256]	; (80053a0 <TIM_Base_SetConfig+0x114>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d013      	beq.n	80052cc <TIM_Base_SetConfig+0x40>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052aa:	d00f      	beq.n	80052cc <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a3d      	ldr	r2, [pc, #244]	; (80053a4 <TIM_Base_SetConfig+0x118>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00b      	beq.n	80052cc <TIM_Base_SetConfig+0x40>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a3c      	ldr	r2, [pc, #240]	; (80053a8 <TIM_Base_SetConfig+0x11c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d007      	beq.n	80052cc <TIM_Base_SetConfig+0x40>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a3b      	ldr	r2, [pc, #236]	; (80053ac <TIM_Base_SetConfig+0x120>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_Base_SetConfig+0x40>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a3a      	ldr	r2, [pc, #232]	; (80053b0 <TIM_Base_SetConfig+0x124>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d108      	bne.n	80052de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a2f      	ldr	r2, [pc, #188]	; (80053a0 <TIM_Base_SetConfig+0x114>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d01f      	beq.n	8005326 <TIM_Base_SetConfig+0x9a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ec:	d01b      	beq.n	8005326 <TIM_Base_SetConfig+0x9a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a2c      	ldr	r2, [pc, #176]	; (80053a4 <TIM_Base_SetConfig+0x118>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d017      	beq.n	8005326 <TIM_Base_SetConfig+0x9a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a2b      	ldr	r2, [pc, #172]	; (80053a8 <TIM_Base_SetConfig+0x11c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d013      	beq.n	8005326 <TIM_Base_SetConfig+0x9a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a2a      	ldr	r2, [pc, #168]	; (80053ac <TIM_Base_SetConfig+0x120>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00f      	beq.n	8005326 <TIM_Base_SetConfig+0x9a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a29      	ldr	r2, [pc, #164]	; (80053b0 <TIM_Base_SetConfig+0x124>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00b      	beq.n	8005326 <TIM_Base_SetConfig+0x9a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a28      	ldr	r2, [pc, #160]	; (80053b4 <TIM_Base_SetConfig+0x128>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d007      	beq.n	8005326 <TIM_Base_SetConfig+0x9a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a27      	ldr	r2, [pc, #156]	; (80053b8 <TIM_Base_SetConfig+0x12c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_Base_SetConfig+0x9a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a26      	ldr	r2, [pc, #152]	; (80053bc <TIM_Base_SetConfig+0x130>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d108      	bne.n	8005338 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800532c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a10      	ldr	r2, [pc, #64]	; (80053a0 <TIM_Base_SetConfig+0x114>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00f      	beq.n	8005384 <TIM_Base_SetConfig+0xf8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a12      	ldr	r2, [pc, #72]	; (80053b0 <TIM_Base_SetConfig+0x124>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00b      	beq.n	8005384 <TIM_Base_SetConfig+0xf8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a11      	ldr	r2, [pc, #68]	; (80053b4 <TIM_Base_SetConfig+0x128>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d007      	beq.n	8005384 <TIM_Base_SetConfig+0xf8>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a10      	ldr	r2, [pc, #64]	; (80053b8 <TIM_Base_SetConfig+0x12c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d003      	beq.n	8005384 <TIM_Base_SetConfig+0xf8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a0f      	ldr	r2, [pc, #60]	; (80053bc <TIM_Base_SetConfig+0x130>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d103      	bne.n	800538c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	615a      	str	r2, [r3, #20]
}
 8005392:	bf00      	nop
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40012c00 	.word	0x40012c00
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800
 80053ac:	40000c00 	.word	0x40000c00
 80053b0:	40013400 	.word	0x40013400
 80053b4:	40014000 	.word	0x40014000
 80053b8:	40014400 	.word	0x40014400
 80053bc:	40014800 	.word	0x40014800

080053c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e068      	b.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a2e      	ldr	r2, [pc, #184]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a2d      	ldr	r2, [pc, #180]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d108      	bne.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005412:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005424:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1e      	ldr	r2, [pc, #120]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d01d      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544a:	d018      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1b      	ldr	r2, [pc, #108]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d013      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00e      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d009      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a13      	ldr	r2, [pc, #76]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d004      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a14      	ldr	r2, [pc, #80]	; (80054cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d10c      	bne.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	4313      	orrs	r3, r2
 800548e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40012c00 	.word	0x40012c00
 80054bc:	40013400 	.word	0x40013400
 80054c0:	40000400 	.word	0x40000400
 80054c4:	40000800 	.word	0x40000800
 80054c8:	40000c00 	.word	0x40000c00
 80054cc:	40014000 	.word	0x40014000

080054d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e040      	b.n	80055a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fc fe02 	bl	8002138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2224      	movs	r2, #36	; 0x24
 8005538:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0201 	bic.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fb6a 	bl	8005c2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f8af 	bl	80056bc <UART_SetConfig>
 800555e:	4603      	mov	r3, r0
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e01b      	b.n	80055a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005576:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005586:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0201 	orr.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fbe9 	bl	8005d70 <UART_CheckIdleState>
 800559e:	4603      	mov	r3, r0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	; 0x28
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d178      	bne.n	80056b2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <HAL_UART_Transmit+0x24>
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e071      	b.n	80056b4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2221      	movs	r2, #33	; 0x21
 80055dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055de:	f7fd fd1f 	bl	8003020 <HAL_GetTick>
 80055e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	88fa      	ldrh	r2, [r7, #6]
 80055e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	88fa      	ldrh	r2, [r7, #6]
 80055f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fc:	d108      	bne.n	8005610 <HAL_UART_Transmit+0x68>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d104      	bne.n	8005610 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	e003      	b.n	8005618 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005614:	2300      	movs	r3, #0
 8005616:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005618:	e030      	b.n	800567c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2200      	movs	r2, #0
 8005622:	2180      	movs	r1, #128	; 0x80
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 fc4b 	bl	8005ec0 <UART_WaitOnFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d004      	beq.n	800563a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e03c      	b.n	80056b4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10b      	bne.n	8005658 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	881a      	ldrh	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800564c:	b292      	uxth	r2, r2
 800564e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	3302      	adds	r3, #2
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	e008      	b.n	800566a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	781a      	ldrb	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	b292      	uxth	r2, r2
 8005662:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	3301      	adds	r3, #1
 8005668:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1c8      	bne.n	800561a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2200      	movs	r2, #0
 8005690:	2140      	movs	r1, #64	; 0x40
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 fc14 	bl	8005ec0 <UART_WaitOnFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d004      	beq.n	80056a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2220      	movs	r2, #32
 80056a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e005      	b.n	80056b4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2220      	movs	r2, #32
 80056ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e000      	b.n	80056b4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80056b2:	2302      	movs	r3, #2
  }
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3720      	adds	r7, #32
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056c0:	b08a      	sub	sp, #40	; 0x28
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	431a      	orrs	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	431a      	orrs	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4ba4      	ldr	r3, [pc, #656]	; (800597c <UART_SetConfig+0x2c0>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	6812      	ldr	r2, [r2, #0]
 80056f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056f4:	430b      	orrs	r3, r1
 80056f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a99      	ldr	r2, [pc, #612]	; (8005980 <UART_SetConfig+0x2c4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d004      	beq.n	8005728 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005724:	4313      	orrs	r3, r2
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005738:	430a      	orrs	r2, r1
 800573a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a90      	ldr	r2, [pc, #576]	; (8005984 <UART_SetConfig+0x2c8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d126      	bne.n	8005794 <UART_SetConfig+0xd8>
 8005746:	4b90      	ldr	r3, [pc, #576]	; (8005988 <UART_SetConfig+0x2cc>)
 8005748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574c:	f003 0303 	and.w	r3, r3, #3
 8005750:	2b03      	cmp	r3, #3
 8005752:	d81b      	bhi.n	800578c <UART_SetConfig+0xd0>
 8005754:	a201      	add	r2, pc, #4	; (adr r2, 800575c <UART_SetConfig+0xa0>)
 8005756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575a:	bf00      	nop
 800575c:	0800576d 	.word	0x0800576d
 8005760:	0800577d 	.word	0x0800577d
 8005764:	08005775 	.word	0x08005775
 8005768:	08005785 	.word	0x08005785
 800576c:	2301      	movs	r3, #1
 800576e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005772:	e116      	b.n	80059a2 <UART_SetConfig+0x2e6>
 8005774:	2302      	movs	r3, #2
 8005776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800577a:	e112      	b.n	80059a2 <UART_SetConfig+0x2e6>
 800577c:	2304      	movs	r3, #4
 800577e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005782:	e10e      	b.n	80059a2 <UART_SetConfig+0x2e6>
 8005784:	2308      	movs	r3, #8
 8005786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800578a:	e10a      	b.n	80059a2 <UART_SetConfig+0x2e6>
 800578c:	2310      	movs	r3, #16
 800578e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005792:	e106      	b.n	80059a2 <UART_SetConfig+0x2e6>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a7c      	ldr	r2, [pc, #496]	; (800598c <UART_SetConfig+0x2d0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d138      	bne.n	8005810 <UART_SetConfig+0x154>
 800579e:	4b7a      	ldr	r3, [pc, #488]	; (8005988 <UART_SetConfig+0x2cc>)
 80057a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a4:	f003 030c 	and.w	r3, r3, #12
 80057a8:	2b0c      	cmp	r3, #12
 80057aa:	d82d      	bhi.n	8005808 <UART_SetConfig+0x14c>
 80057ac:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <UART_SetConfig+0xf8>)
 80057ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b2:	bf00      	nop
 80057b4:	080057e9 	.word	0x080057e9
 80057b8:	08005809 	.word	0x08005809
 80057bc:	08005809 	.word	0x08005809
 80057c0:	08005809 	.word	0x08005809
 80057c4:	080057f9 	.word	0x080057f9
 80057c8:	08005809 	.word	0x08005809
 80057cc:	08005809 	.word	0x08005809
 80057d0:	08005809 	.word	0x08005809
 80057d4:	080057f1 	.word	0x080057f1
 80057d8:	08005809 	.word	0x08005809
 80057dc:	08005809 	.word	0x08005809
 80057e0:	08005809 	.word	0x08005809
 80057e4:	08005801 	.word	0x08005801
 80057e8:	2300      	movs	r3, #0
 80057ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ee:	e0d8      	b.n	80059a2 <UART_SetConfig+0x2e6>
 80057f0:	2302      	movs	r3, #2
 80057f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f6:	e0d4      	b.n	80059a2 <UART_SetConfig+0x2e6>
 80057f8:	2304      	movs	r3, #4
 80057fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fe:	e0d0      	b.n	80059a2 <UART_SetConfig+0x2e6>
 8005800:	2308      	movs	r3, #8
 8005802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005806:	e0cc      	b.n	80059a2 <UART_SetConfig+0x2e6>
 8005808:	2310      	movs	r3, #16
 800580a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800580e:	e0c8      	b.n	80059a2 <UART_SetConfig+0x2e6>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a5e      	ldr	r2, [pc, #376]	; (8005990 <UART_SetConfig+0x2d4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d125      	bne.n	8005866 <UART_SetConfig+0x1aa>
 800581a:	4b5b      	ldr	r3, [pc, #364]	; (8005988 <UART_SetConfig+0x2cc>)
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005820:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005824:	2b30      	cmp	r3, #48	; 0x30
 8005826:	d016      	beq.n	8005856 <UART_SetConfig+0x19a>
 8005828:	2b30      	cmp	r3, #48	; 0x30
 800582a:	d818      	bhi.n	800585e <UART_SetConfig+0x1a2>
 800582c:	2b20      	cmp	r3, #32
 800582e:	d00a      	beq.n	8005846 <UART_SetConfig+0x18a>
 8005830:	2b20      	cmp	r3, #32
 8005832:	d814      	bhi.n	800585e <UART_SetConfig+0x1a2>
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <UART_SetConfig+0x182>
 8005838:	2b10      	cmp	r3, #16
 800583a:	d008      	beq.n	800584e <UART_SetConfig+0x192>
 800583c:	e00f      	b.n	800585e <UART_SetConfig+0x1a2>
 800583e:	2300      	movs	r3, #0
 8005840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005844:	e0ad      	b.n	80059a2 <UART_SetConfig+0x2e6>
 8005846:	2302      	movs	r3, #2
 8005848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800584c:	e0a9      	b.n	80059a2 <UART_SetConfig+0x2e6>
 800584e:	2304      	movs	r3, #4
 8005850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005854:	e0a5      	b.n	80059a2 <UART_SetConfig+0x2e6>
 8005856:	2308      	movs	r3, #8
 8005858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585c:	e0a1      	b.n	80059a2 <UART_SetConfig+0x2e6>
 800585e:	2310      	movs	r3, #16
 8005860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005864:	e09d      	b.n	80059a2 <UART_SetConfig+0x2e6>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a4a      	ldr	r2, [pc, #296]	; (8005994 <UART_SetConfig+0x2d8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d125      	bne.n	80058bc <UART_SetConfig+0x200>
 8005870:	4b45      	ldr	r3, [pc, #276]	; (8005988 <UART_SetConfig+0x2cc>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005876:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800587a:	2bc0      	cmp	r3, #192	; 0xc0
 800587c:	d016      	beq.n	80058ac <UART_SetConfig+0x1f0>
 800587e:	2bc0      	cmp	r3, #192	; 0xc0
 8005880:	d818      	bhi.n	80058b4 <UART_SetConfig+0x1f8>
 8005882:	2b80      	cmp	r3, #128	; 0x80
 8005884:	d00a      	beq.n	800589c <UART_SetConfig+0x1e0>
 8005886:	2b80      	cmp	r3, #128	; 0x80
 8005888:	d814      	bhi.n	80058b4 <UART_SetConfig+0x1f8>
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <UART_SetConfig+0x1d8>
 800588e:	2b40      	cmp	r3, #64	; 0x40
 8005890:	d008      	beq.n	80058a4 <UART_SetConfig+0x1e8>
 8005892:	e00f      	b.n	80058b4 <UART_SetConfig+0x1f8>
 8005894:	2300      	movs	r3, #0
 8005896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589a:	e082      	b.n	80059a2 <UART_SetConfig+0x2e6>
 800589c:	2302      	movs	r3, #2
 800589e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a2:	e07e      	b.n	80059a2 <UART_SetConfig+0x2e6>
 80058a4:	2304      	movs	r3, #4
 80058a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058aa:	e07a      	b.n	80059a2 <UART_SetConfig+0x2e6>
 80058ac:	2308      	movs	r3, #8
 80058ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b2:	e076      	b.n	80059a2 <UART_SetConfig+0x2e6>
 80058b4:	2310      	movs	r3, #16
 80058b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ba:	e072      	b.n	80059a2 <UART_SetConfig+0x2e6>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a35      	ldr	r2, [pc, #212]	; (8005998 <UART_SetConfig+0x2dc>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d12a      	bne.n	800591c <UART_SetConfig+0x260>
 80058c6:	4b30      	ldr	r3, [pc, #192]	; (8005988 <UART_SetConfig+0x2cc>)
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d4:	d01a      	beq.n	800590c <UART_SetConfig+0x250>
 80058d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058da:	d81b      	bhi.n	8005914 <UART_SetConfig+0x258>
 80058dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e0:	d00c      	beq.n	80058fc <UART_SetConfig+0x240>
 80058e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e6:	d815      	bhi.n	8005914 <UART_SetConfig+0x258>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <UART_SetConfig+0x238>
 80058ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f0:	d008      	beq.n	8005904 <UART_SetConfig+0x248>
 80058f2:	e00f      	b.n	8005914 <UART_SetConfig+0x258>
 80058f4:	2300      	movs	r3, #0
 80058f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058fa:	e052      	b.n	80059a2 <UART_SetConfig+0x2e6>
 80058fc:	2302      	movs	r3, #2
 80058fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005902:	e04e      	b.n	80059a2 <UART_SetConfig+0x2e6>
 8005904:	2304      	movs	r3, #4
 8005906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800590a:	e04a      	b.n	80059a2 <UART_SetConfig+0x2e6>
 800590c:	2308      	movs	r3, #8
 800590e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005912:	e046      	b.n	80059a2 <UART_SetConfig+0x2e6>
 8005914:	2310      	movs	r3, #16
 8005916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800591a:	e042      	b.n	80059a2 <UART_SetConfig+0x2e6>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a17      	ldr	r2, [pc, #92]	; (8005980 <UART_SetConfig+0x2c4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d13a      	bne.n	800599c <UART_SetConfig+0x2e0>
 8005926:	4b18      	ldr	r3, [pc, #96]	; (8005988 <UART_SetConfig+0x2cc>)
 8005928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005930:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005934:	d01a      	beq.n	800596c <UART_SetConfig+0x2b0>
 8005936:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800593a:	d81b      	bhi.n	8005974 <UART_SetConfig+0x2b8>
 800593c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005940:	d00c      	beq.n	800595c <UART_SetConfig+0x2a0>
 8005942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005946:	d815      	bhi.n	8005974 <UART_SetConfig+0x2b8>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <UART_SetConfig+0x298>
 800594c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005950:	d008      	beq.n	8005964 <UART_SetConfig+0x2a8>
 8005952:	e00f      	b.n	8005974 <UART_SetConfig+0x2b8>
 8005954:	2300      	movs	r3, #0
 8005956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595a:	e022      	b.n	80059a2 <UART_SetConfig+0x2e6>
 800595c:	2302      	movs	r3, #2
 800595e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005962:	e01e      	b.n	80059a2 <UART_SetConfig+0x2e6>
 8005964:	2304      	movs	r3, #4
 8005966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596a:	e01a      	b.n	80059a2 <UART_SetConfig+0x2e6>
 800596c:	2308      	movs	r3, #8
 800596e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005972:	e016      	b.n	80059a2 <UART_SetConfig+0x2e6>
 8005974:	2310      	movs	r3, #16
 8005976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800597a:	e012      	b.n	80059a2 <UART_SetConfig+0x2e6>
 800597c:	efff69f3 	.word	0xefff69f3
 8005980:	40008000 	.word	0x40008000
 8005984:	40013800 	.word	0x40013800
 8005988:	40021000 	.word	0x40021000
 800598c:	40004400 	.word	0x40004400
 8005990:	40004800 	.word	0x40004800
 8005994:	40004c00 	.word	0x40004c00
 8005998:	40005000 	.word	0x40005000
 800599c:	2310      	movs	r3, #16
 800599e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a9f      	ldr	r2, [pc, #636]	; (8005c24 <UART_SetConfig+0x568>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d17a      	bne.n	8005aa2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d824      	bhi.n	80059fe <UART_SetConfig+0x342>
 80059b4:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <UART_SetConfig+0x300>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	080059e1 	.word	0x080059e1
 80059c0:	080059ff 	.word	0x080059ff
 80059c4:	080059e9 	.word	0x080059e9
 80059c8:	080059ff 	.word	0x080059ff
 80059cc:	080059ef 	.word	0x080059ef
 80059d0:	080059ff 	.word	0x080059ff
 80059d4:	080059ff 	.word	0x080059ff
 80059d8:	080059ff 	.word	0x080059ff
 80059dc:	080059f7 	.word	0x080059f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e0:	f7fe fbee 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 80059e4:	61f8      	str	r0, [r7, #28]
        break;
 80059e6:	e010      	b.n	8005a0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e8:	4b8f      	ldr	r3, [pc, #572]	; (8005c28 <UART_SetConfig+0x56c>)
 80059ea:	61fb      	str	r3, [r7, #28]
        break;
 80059ec:	e00d      	b.n	8005a0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ee:	f7fe fb4f 	bl	8004090 <HAL_RCC_GetSysClockFreq>
 80059f2:	61f8      	str	r0, [r7, #28]
        break;
 80059f4:	e009      	b.n	8005a0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059fa:	61fb      	str	r3, [r7, #28]
        break;
 80059fc:	e005      	b.n	8005a0a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 80fb 	beq.w	8005c08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	4413      	add	r3, r2
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d305      	bcc.n	8005a2e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d903      	bls.n	8005a36 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a34:	e0e8      	b.n	8005c08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	461c      	mov	r4, r3
 8005a3c:	4615      	mov	r5, r2
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	022b      	lsls	r3, r5, #8
 8005a48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a4c:	0222      	lsls	r2, r4, #8
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	6849      	ldr	r1, [r1, #4]
 8005a52:	0849      	lsrs	r1, r1, #1
 8005a54:	2000      	movs	r0, #0
 8005a56:	4688      	mov	r8, r1
 8005a58:	4681      	mov	r9, r0
 8005a5a:	eb12 0a08 	adds.w	sl, r2, r8
 8005a5e:	eb43 0b09 	adc.w	fp, r3, r9
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	603b      	str	r3, [r7, #0]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a70:	4650      	mov	r0, sl
 8005a72:	4659      	mov	r1, fp
 8005a74:	f7fa fc04 	bl	8000280 <__aeabi_uldivmod>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a86:	d308      	bcc.n	8005a9a <UART_SetConfig+0x3de>
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a8e:	d204      	bcs.n	8005a9a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	60da      	str	r2, [r3, #12]
 8005a98:	e0b6      	b.n	8005c08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005aa0:	e0b2      	b.n	8005c08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aaa:	d15e      	bne.n	8005b6a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d828      	bhi.n	8005b06 <UART_SetConfig+0x44a>
 8005ab4:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <UART_SetConfig+0x400>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005ae1 	.word	0x08005ae1
 8005ac0:	08005ae9 	.word	0x08005ae9
 8005ac4:	08005af1 	.word	0x08005af1
 8005ac8:	08005b07 	.word	0x08005b07
 8005acc:	08005af7 	.word	0x08005af7
 8005ad0:	08005b07 	.word	0x08005b07
 8005ad4:	08005b07 	.word	0x08005b07
 8005ad8:	08005b07 	.word	0x08005b07
 8005adc:	08005aff 	.word	0x08005aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae0:	f7fe fb6e 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 8005ae4:	61f8      	str	r0, [r7, #28]
        break;
 8005ae6:	e014      	b.n	8005b12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae8:	f7fe fb80 	bl	80041ec <HAL_RCC_GetPCLK2Freq>
 8005aec:	61f8      	str	r0, [r7, #28]
        break;
 8005aee:	e010      	b.n	8005b12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af0:	4b4d      	ldr	r3, [pc, #308]	; (8005c28 <UART_SetConfig+0x56c>)
 8005af2:	61fb      	str	r3, [r7, #28]
        break;
 8005af4:	e00d      	b.n	8005b12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005af6:	f7fe facb 	bl	8004090 <HAL_RCC_GetSysClockFreq>
 8005afa:	61f8      	str	r0, [r7, #28]
        break;
 8005afc:	e009      	b.n	8005b12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b02:	61fb      	str	r3, [r7, #28]
        break;
 8005b04:	e005      	b.n	8005b12 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d077      	beq.n	8005c08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	005a      	lsls	r2, r3, #1
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	085b      	lsrs	r3, r3, #1
 8005b22:	441a      	add	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2b0f      	cmp	r3, #15
 8005b32:	d916      	bls.n	8005b62 <UART_SetConfig+0x4a6>
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3a:	d212      	bcs.n	8005b62 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f023 030f 	bic.w	r3, r3, #15
 8005b44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	085b      	lsrs	r3, r3, #1
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	8afb      	ldrh	r3, [r7, #22]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	8afa      	ldrh	r2, [r7, #22]
 8005b5e:	60da      	str	r2, [r3, #12]
 8005b60:	e052      	b.n	8005c08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b68:	e04e      	b.n	8005c08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d827      	bhi.n	8005bc2 <UART_SetConfig+0x506>
 8005b72:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <UART_SetConfig+0x4bc>)
 8005b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b78:	08005b9d 	.word	0x08005b9d
 8005b7c:	08005ba5 	.word	0x08005ba5
 8005b80:	08005bad 	.word	0x08005bad
 8005b84:	08005bc3 	.word	0x08005bc3
 8005b88:	08005bb3 	.word	0x08005bb3
 8005b8c:	08005bc3 	.word	0x08005bc3
 8005b90:	08005bc3 	.word	0x08005bc3
 8005b94:	08005bc3 	.word	0x08005bc3
 8005b98:	08005bbb 	.word	0x08005bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b9c:	f7fe fb10 	bl	80041c0 <HAL_RCC_GetPCLK1Freq>
 8005ba0:	61f8      	str	r0, [r7, #28]
        break;
 8005ba2:	e014      	b.n	8005bce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ba4:	f7fe fb22 	bl	80041ec <HAL_RCC_GetPCLK2Freq>
 8005ba8:	61f8      	str	r0, [r7, #28]
        break;
 8005baa:	e010      	b.n	8005bce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bac:	4b1e      	ldr	r3, [pc, #120]	; (8005c28 <UART_SetConfig+0x56c>)
 8005bae:	61fb      	str	r3, [r7, #28]
        break;
 8005bb0:	e00d      	b.n	8005bce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bb2:	f7fe fa6d 	bl	8004090 <HAL_RCC_GetSysClockFreq>
 8005bb6:	61f8      	str	r0, [r7, #28]
        break;
 8005bb8:	e009      	b.n	8005bce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bbe:	61fb      	str	r3, [r7, #28]
        break;
 8005bc0:	e005      	b.n	8005bce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005bcc:	bf00      	nop
    }

    if (pclk != 0U)
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d019      	beq.n	8005c08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	085a      	lsrs	r2, r3, #1
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	441a      	add	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	2b0f      	cmp	r3, #15
 8005bec:	d909      	bls.n	8005c02 <UART_SetConfig+0x546>
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf4:	d205      	bcs.n	8005c02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60da      	str	r2, [r3, #12]
 8005c00:	e002      	b.n	8005c08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3728      	adds	r7, #40	; 0x28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c22:	bf00      	nop
 8005c24:	40008000 	.word	0x40008000
 8005c28:	00f42400 	.word	0x00f42400

08005c2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00a      	beq.n	8005c56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00a      	beq.n	8005c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00a      	beq.n	8005c9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	f003 0304 	and.w	r3, r3, #4
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01a      	beq.n	8005d42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d2a:	d10a      	bne.n	8005d42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	605a      	str	r2, [r3, #4]
  }
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b098      	sub	sp, #96	; 0x60
 8005d74:	af02      	add	r7, sp, #8
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d80:	f7fd f94e 	bl	8003020 <HAL_GetTick>
 8005d84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d12e      	bne.n	8005df2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f88c 	bl	8005ec0 <UART_WaitOnFlagUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d021      	beq.n	8005df2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8005dce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e6      	bne.n	8005dae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e062      	b.n	8005eb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d149      	bne.n	8005e94 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f856 	bl	8005ec0 <UART_WaitOnFlagUntilTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d03c      	beq.n	8005e94 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	623b      	str	r3, [r7, #32]
   return(result);
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e38:	633b      	str	r3, [r7, #48]	; 0x30
 8005e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e6      	bne.n	8005e1a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3308      	adds	r3, #8
 8005e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0301 	bic.w	r3, r3, #1
 8005e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3308      	adds	r3, #8
 8005e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e6c:	61fa      	str	r2, [r7, #28]
 8005e6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	69b9      	ldr	r1, [r7, #24]
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	617b      	str	r3, [r7, #20]
   return(result);
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e5      	bne.n	8005e4c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e011      	b.n	8005eb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3758      	adds	r7, #88	; 0x58
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed0:	e049      	b.n	8005f66 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d045      	beq.n	8005f66 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eda:	f7fd f8a1 	bl	8003020 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d302      	bcc.n	8005ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e048      	b.n	8005f86 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d031      	beq.n	8005f66 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d110      	bne.n	8005f32 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2208      	movs	r2, #8
 8005f16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 f838 	bl	8005f8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2208      	movs	r2, #8
 8005f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e029      	b.n	8005f86 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f40:	d111      	bne.n	8005f66 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 f81e 	bl	8005f8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e00f      	b.n	8005f86 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69da      	ldr	r2, [r3, #28]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	bf0c      	ite	eq
 8005f76:	2301      	moveq	r3, #1
 8005f78:	2300      	movne	r3, #0
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d0a6      	beq.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b095      	sub	sp, #84	; 0x54
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9e:	e853 3f00 	ldrex	r3, [r3]
 8005fa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fbc:	e841 2300 	strex	r3, r2, [r1]
 8005fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e6      	bne.n	8005f96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	e853 3f00 	ldrex	r3, [r3]
 8005fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f023 0301 	bic.w	r3, r3, #1
 8005fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e5      	bne.n	8005fc8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006000:	2b01      	cmp	r3, #1
 8006002:	d118      	bne.n	8006036 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	60bb      	str	r3, [r7, #8]
   return(result);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f023 0310 	bic.w	r3, r3, #16
 8006018:	647b      	str	r3, [r7, #68]	; 0x44
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	6979      	ldr	r1, [r7, #20]
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	613b      	str	r3, [r7, #16]
   return(result);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e6      	bne.n	8006004 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	669a      	str	r2, [r3, #104]	; 0x68
}
 800604a:	bf00      	nop
 800604c:	3754      	adds	r7, #84	; 0x54
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
	...

08006058 <__NVIC_SetPriority>:
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	6039      	str	r1, [r7, #0]
 8006062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006068:	2b00      	cmp	r3, #0
 800606a:	db0a      	blt.n	8006082 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	b2da      	uxtb	r2, r3
 8006070:	490c      	ldr	r1, [pc, #48]	; (80060a4 <__NVIC_SetPriority+0x4c>)
 8006072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006076:	0112      	lsls	r2, r2, #4
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	440b      	add	r3, r1
 800607c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006080:	e00a      	b.n	8006098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	b2da      	uxtb	r2, r3
 8006086:	4908      	ldr	r1, [pc, #32]	; (80060a8 <__NVIC_SetPriority+0x50>)
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	f003 030f 	and.w	r3, r3, #15
 800608e:	3b04      	subs	r3, #4
 8006090:	0112      	lsls	r2, r2, #4
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	440b      	add	r3, r1
 8006096:	761a      	strb	r2, [r3, #24]
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	e000e100 	.word	0xe000e100
 80060a8:	e000ed00 	.word	0xe000ed00

080060ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80060b0:	2100      	movs	r1, #0
 80060b2:	f06f 0004 	mvn.w	r0, #4
 80060b6:	f7ff ffcf 	bl	8006058 <__NVIC_SetPriority>
#endif
}
 80060ba:	bf00      	nop
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060c6:	f3ef 8305 	mrs	r3, IPSR
 80060ca:	603b      	str	r3, [r7, #0]
  return(result);
 80060cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80060d2:	f06f 0305 	mvn.w	r3, #5
 80060d6:	607b      	str	r3, [r7, #4]
 80060d8:	e00c      	b.n	80060f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060da:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <osKernelInitialize+0x44>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d105      	bne.n	80060ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80060e2:	4b08      	ldr	r3, [pc, #32]	; (8006104 <osKernelInitialize+0x44>)
 80060e4:	2201      	movs	r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	607b      	str	r3, [r7, #4]
 80060ec:	e002      	b.n	80060f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80060ee:	f04f 33ff 	mov.w	r3, #4294967295
 80060f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060f4:	687b      	ldr	r3, [r7, #4]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20000650 	.word	0x20000650

08006108 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800610e:	f3ef 8305 	mrs	r3, IPSR
 8006112:	603b      	str	r3, [r7, #0]
  return(result);
 8006114:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <osKernelStart+0x1a>
    stat = osErrorISR;
 800611a:	f06f 0305 	mvn.w	r3, #5
 800611e:	607b      	str	r3, [r7, #4]
 8006120:	e010      	b.n	8006144 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006122:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <osKernelStart+0x48>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d109      	bne.n	800613e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800612a:	f7ff ffbf 	bl	80060ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800612e:	4b08      	ldr	r3, [pc, #32]	; (8006150 <osKernelStart+0x48>)
 8006130:	2202      	movs	r2, #2
 8006132:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006134:	f001 fb6e 	bl	8007814 <vTaskStartScheduler>
      stat = osOK;
 8006138:	2300      	movs	r3, #0
 800613a:	607b      	str	r3, [r7, #4]
 800613c:	e002      	b.n	8006144 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800613e:	f04f 33ff 	mov.w	r3, #4294967295
 8006142:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006144:	687b      	ldr	r3, [r7, #4]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000650 	.word	0x20000650

08006154 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006154:	b580      	push	{r7, lr}
 8006156:	b08e      	sub	sp, #56	; 0x38
 8006158:	af04      	add	r7, sp, #16
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006160:	2300      	movs	r3, #0
 8006162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006164:	f3ef 8305 	mrs	r3, IPSR
 8006168:	617b      	str	r3, [r7, #20]
  return(result);
 800616a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800616c:	2b00      	cmp	r3, #0
 800616e:	d17e      	bne.n	800626e <osThreadNew+0x11a>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d07b      	beq.n	800626e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006176:	2380      	movs	r3, #128	; 0x80
 8006178:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800617a:	2318      	movs	r3, #24
 800617c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800617e:	2300      	movs	r3, #0
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006182:	f04f 33ff 	mov.w	r3, #4294967295
 8006186:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d045      	beq.n	800621a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <osThreadNew+0x48>
        name = attr->name;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <osThreadNew+0x6e>
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	2b38      	cmp	r3, #56	; 0x38
 80061b4:	d805      	bhi.n	80061c2 <osThreadNew+0x6e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <osThreadNew+0x72>
        return (NULL);
 80061c2:	2300      	movs	r3, #0
 80061c4:	e054      	b.n	8006270 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	089b      	lsrs	r3, r3, #2
 80061d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00e      	beq.n	80061fc <osThreadNew+0xa8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	2ba7      	cmp	r3, #167	; 0xa7
 80061e4:	d90a      	bls.n	80061fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d006      	beq.n	80061fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <osThreadNew+0xa8>
        mem = 1;
 80061f6:	2301      	movs	r3, #1
 80061f8:	61bb      	str	r3, [r7, #24]
 80061fa:	e010      	b.n	800621e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10c      	bne.n	800621e <osThreadNew+0xca>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d108      	bne.n	800621e <osThreadNew+0xca>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d104      	bne.n	800621e <osThreadNew+0xca>
          mem = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	61bb      	str	r3, [r7, #24]
 8006218:	e001      	b.n	800621e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d110      	bne.n	8006246 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800622c:	9202      	str	r2, [sp, #8]
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	6a3a      	ldr	r2, [r7, #32]
 8006238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f001 f932 	bl	80074a4 <xTaskCreateStatic>
 8006240:	4603      	mov	r3, r0
 8006242:	613b      	str	r3, [r7, #16]
 8006244:	e013      	b.n	800626e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d110      	bne.n	800626e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	b29a      	uxth	r2, r3
 8006250:	f107 0310 	add.w	r3, r7, #16
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f001 f97d 	bl	800755e <xTaskCreate>
 8006264:	4603      	mov	r3, r0
 8006266:	2b01      	cmp	r3, #1
 8006268:	d001      	beq.n	800626e <osThreadNew+0x11a>
            hTask = NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800626e:	693b      	ldr	r3, [r7, #16]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3728      	adds	r7, #40	; 0x28
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800627e:	f3ef 8305 	mrs	r3, IPSR
 8006282:	603b      	str	r3, [r7, #0]
  return(result);
 8006284:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <osThreadYield+0x1a>
    stat = osErrorISR;
 800628a:	f06f 0305 	mvn.w	r3, #5
 800628e:	607b      	str	r3, [r7, #4]
 8006290:	e009      	b.n	80062a6 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8006292:	2300      	movs	r3, #0
 8006294:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8006296:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <osThreadYield+0x3c>)
 8006298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80062a6:	687b      	ldr	r3, [r7, #4]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	e000ed04 	.word	0xe000ed04

080062b8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b088      	sub	sp, #32
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80062c0:	2300      	movs	r3, #0
 80062c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c4:	f3ef 8305 	mrs	r3, IPSR
 80062c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80062ca:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d174      	bne.n	80063ba <osMutexNew+0x102>
    if (attr != NULL) {
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <osMutexNew+0x26>
      type = attr->attr_bits;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	61bb      	str	r3, [r7, #24]
 80062dc:	e001      	b.n	80062e2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <osMutexNew+0x3a>
      rmtx = 1U;
 80062ec:	2301      	movs	r3, #1
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	e001      	b.n	80062f6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	f003 0308 	and.w	r3, r3, #8
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d15c      	bne.n	80063ba <osMutexNew+0x102>
      mem = -1;
 8006300:	f04f 33ff 	mov.w	r3, #4294967295
 8006304:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d015      	beq.n	8006338 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d006      	beq.n	8006322 <osMutexNew+0x6a>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	2b4f      	cmp	r3, #79	; 0x4f
 800631a:	d902      	bls.n	8006322 <osMutexNew+0x6a>
          mem = 1;
 800631c:	2301      	movs	r3, #1
 800631e:	613b      	str	r3, [r7, #16]
 8006320:	e00c      	b.n	800633c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d108      	bne.n	800633c <osMutexNew+0x84>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d104      	bne.n	800633c <osMutexNew+0x84>
            mem = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	e001      	b.n	800633c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006338:	2300      	movs	r3, #0
 800633a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d112      	bne.n	8006368 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d007      	beq.n	8006358 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	4619      	mov	r1, r3
 800634e:	2004      	movs	r0, #4
 8006350:	f000 fb17 	bl	8006982 <xQueueCreateMutexStatic>
 8006354:	61f8      	str	r0, [r7, #28]
 8006356:	e016      	b.n	8006386 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	4619      	mov	r1, r3
 800635e:	2001      	movs	r0, #1
 8006360:	f000 fb0f 	bl	8006982 <xQueueCreateMutexStatic>
 8006364:	61f8      	str	r0, [r7, #28]
 8006366:	e00e      	b.n	8006386 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10b      	bne.n	8006386 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d004      	beq.n	800637e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006374:	2004      	movs	r0, #4
 8006376:	f000 faec 	bl	8006952 <xQueueCreateMutex>
 800637a:	61f8      	str	r0, [r7, #28]
 800637c:	e003      	b.n	8006386 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800637e:	2001      	movs	r0, #1
 8006380:	f000 fae7 	bl	8006952 <xQueueCreateMutex>
 8006384:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00c      	beq.n	80063a6 <osMutexNew+0xee>
        if (attr != NULL) {
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <osMutexNew+0xe2>
          name = attr->name;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	e001      	b.n	800639e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	69f8      	ldr	r0, [r7, #28]
 80063a2:	f001 f821 	bl	80073e8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d006      	beq.n	80063ba <osMutexNew+0x102>
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	f043 0301 	orr.w	r3, r3, #1
 80063b8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80063ba:	69fb      	ldr	r3, [r7, #28]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3720      	adds	r7, #32
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80063de:	2300      	movs	r3, #0
 80063e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063e2:	f3ef 8305 	mrs	r3, IPSR
 80063e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80063e8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80063ee:	f06f 0305 	mvn.w	r3, #5
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	e02c      	b.n	8006450 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d103      	bne.n	8006404 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80063fc:	f06f 0303 	mvn.w	r3, #3
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	e025      	b.n	8006450 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d011      	beq.n	800642e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800640a:	6839      	ldr	r1, [r7, #0]
 800640c:	6938      	ldr	r0, [r7, #16]
 800640e:	f000 fb07 	bl	8006a20 <xQueueTakeMutexRecursive>
 8006412:	4603      	mov	r3, r0
 8006414:	2b01      	cmp	r3, #1
 8006416:	d01b      	beq.n	8006450 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800641e:	f06f 0301 	mvn.w	r3, #1
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	e014      	b.n	8006450 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006426:	f06f 0302 	mvn.w	r3, #2
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	e010      	b.n	8006450 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6938      	ldr	r0, [r7, #16]
 8006432:	f000 fda5 	bl	8006f80 <xQueueSemaphoreTake>
 8006436:	4603      	mov	r3, r0
 8006438:	2b01      	cmp	r3, #1
 800643a:	d009      	beq.n	8006450 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006442:	f06f 0301 	mvn.w	r3, #1
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	e002      	b.n	8006450 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800644a:	f06f 0302 	mvn.w	r3, #2
 800644e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006450:	697b      	ldr	r3, [r7, #20]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800645a:	b580      	push	{r7, lr}
 800645c:	b086      	sub	sp, #24
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f023 0301 	bic.w	r3, r3, #1
 8006468:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006476:	f3ef 8305 	mrs	r3, IPSR
 800647a:	60bb      	str	r3, [r7, #8]
  return(result);
 800647c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <osMutexRelease+0x30>
    stat = osErrorISR;
 8006482:	f06f 0305 	mvn.w	r3, #5
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	e01f      	b.n	80064ca <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d103      	bne.n	8006498 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006490:	f06f 0303 	mvn.w	r3, #3
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	e018      	b.n	80064ca <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d009      	beq.n	80064b2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800649e:	6938      	ldr	r0, [r7, #16]
 80064a0:	f000 fa8a 	bl	80069b8 <xQueueGiveMutexRecursive>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d00f      	beq.n	80064ca <osMutexRelease+0x70>
        stat = osErrorResource;
 80064aa:	f06f 0302 	mvn.w	r3, #2
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	e00b      	b.n	80064ca <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80064b2:	2300      	movs	r3, #0
 80064b4:	2200      	movs	r2, #0
 80064b6:	2100      	movs	r1, #0
 80064b8:	6938      	ldr	r0, [r7, #16]
 80064ba:	f000 fae7 	bl	8006a8c <xQueueGenericSend>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d002      	beq.n	80064ca <osMutexRelease+0x70>
        stat = osErrorResource;
 80064c4:	f06f 0302 	mvn.w	r3, #2
 80064c8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80064ca:	697b      	ldr	r3, [r7, #20]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3718      	adds	r7, #24
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4a07      	ldr	r2, [pc, #28]	; (8006500 <vApplicationGetIdleTaskMemory+0x2c>)
 80064e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	4a06      	ldr	r2, [pc, #24]	; (8006504 <vApplicationGetIdleTaskMemory+0x30>)
 80064ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2280      	movs	r2, #128	; 0x80
 80064f0:	601a      	str	r2, [r3, #0]
}
 80064f2:	bf00      	nop
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	20000654 	.word	0x20000654
 8006504:	200006fc 	.word	0x200006fc

08006508 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4a07      	ldr	r2, [pc, #28]	; (8006534 <vApplicationGetTimerTaskMemory+0x2c>)
 8006518:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	4a06      	ldr	r2, [pc, #24]	; (8006538 <vApplicationGetTimerTaskMemory+0x30>)
 800651e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006526:	601a      	str	r2, [r3, #0]
}
 8006528:	bf00      	nop
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	200008fc 	.word	0x200008fc
 8006538:	200009a4 	.word	0x200009a4

0800653c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f103 0208 	add.w	r2, r3, #8
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f04f 32ff 	mov.w	r2, #4294967295
 8006554:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f103 0208 	add.w	r2, r3, #8
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f103 0208 	add.w	r2, r3, #8
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006596:	b480      	push	{r7}
 8006598:	b085      	sub	sp, #20
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	601a      	str	r2, [r3, #0]
}
 80065d2:	bf00      	nop
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065de:	b480      	push	{r7}
 80065e0:	b085      	sub	sp, #20
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f4:	d103      	bne.n	80065fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	e00c      	b.n	8006618 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3308      	adds	r3, #8
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	e002      	b.n	800660c <vListInsert+0x2e>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	429a      	cmp	r2, r3
 8006616:	d2f6      	bcs.n	8006606 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	601a      	str	r2, [r3, #0]
}
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6892      	ldr	r2, [r2, #8]
 8006666:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6852      	ldr	r2, [r2, #4]
 8006670:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	429a      	cmp	r2, r3
 800667a:	d103      	bne.n	8006684 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689a      	ldr	r2, [r3, #8]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	1e5a      	subs	r2, r3, #1
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80066ce:	f002 fb69 	bl	8008da4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066da:	68f9      	ldr	r1, [r7, #12]
 80066dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066de:	fb01 f303 	mul.w	r3, r1, r3
 80066e2:	441a      	add	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fe:	3b01      	subs	r3, #1
 8006700:	68f9      	ldr	r1, [r7, #12]
 8006702:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	441a      	add	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	22ff      	movs	r2, #255	; 0xff
 8006712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	22ff      	movs	r2, #255	; 0xff
 800671a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d114      	bne.n	800674e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d01a      	beq.n	8006762 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3310      	adds	r3, #16
 8006730:	4618      	mov	r0, r3
 8006732:	f001 fb09 	bl	8007d48 <xTaskRemoveFromEventList>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d012      	beq.n	8006762 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800673c:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <xQueueGenericReset+0xcc>)
 800673e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	e009      	b.n	8006762 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3310      	adds	r3, #16
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff fef2 	bl	800653c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3324      	adds	r3, #36	; 0x24
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff feed 	bl	800653c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006762:	f002 fb4f 	bl	8008e04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006766:	2301      	movs	r3, #1
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	e000ed04 	.word	0xe000ed04

08006774 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08e      	sub	sp, #56	; 0x38
 8006778:	af02      	add	r7, sp, #8
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067b6:	bf00      	nop
 80067b8:	e7fe      	b.n	80067b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <xQueueGenericCreateStatic+0x52>
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <xQueueGenericCreateStatic+0x56>
 80067c6:	2301      	movs	r3, #1
 80067c8:	e000      	b.n	80067cc <xQueueGenericCreateStatic+0x58>
 80067ca:	2300      	movs	r3, #0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10a      	bne.n	80067e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	623b      	str	r3, [r7, #32]
}
 80067e2:	bf00      	nop
 80067e4:	e7fe      	b.n	80067e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d102      	bne.n	80067f2 <xQueueGenericCreateStatic+0x7e>
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <xQueueGenericCreateStatic+0x82>
 80067f2:	2301      	movs	r3, #1
 80067f4:	e000      	b.n	80067f8 <xQueueGenericCreateStatic+0x84>
 80067f6:	2300      	movs	r3, #0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	61fb      	str	r3, [r7, #28]
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006812:	2350      	movs	r3, #80	; 0x50
 8006814:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2b50      	cmp	r3, #80	; 0x50
 800681a:	d00a      	beq.n	8006832 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	61bb      	str	r3, [r7, #24]
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006832:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00d      	beq.n	800685a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006846:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	4613      	mov	r3, r2
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	68b9      	ldr	r1, [r7, #8]
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f83f 	bl	80068d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800685c:	4618      	mov	r0, r3
 800685e:	3730      	adds	r7, #48	; 0x30
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08a      	sub	sp, #40	; 0x28
 8006868:	af02      	add	r7, sp, #8
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	4613      	mov	r3, r2
 8006870:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10a      	bne.n	800688e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	613b      	str	r3, [r7, #16]
}
 800688a:	bf00      	nop
 800688c:	e7fe      	b.n	800688c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	fb02 f303 	mul.w	r3, r2, r3
 8006896:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	3350      	adds	r3, #80	; 0x50
 800689c:	4618      	mov	r0, r3
 800689e:	f002 fba3 	bl	8008fe8 <pvPortMalloc>
 80068a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d011      	beq.n	80068ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	3350      	adds	r3, #80	; 0x50
 80068b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068bc:	79fa      	ldrb	r2, [r7, #7]
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	4613      	mov	r3, r2
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	68b9      	ldr	r1, [r7, #8]
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 f805 	bl	80068d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068ce:	69bb      	ldr	r3, [r7, #24]
	}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3720      	adds	r7, #32
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d103      	bne.n	80068f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	e002      	b.n	80068fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006906:	2101      	movs	r1, #1
 8006908:	69b8      	ldr	r0, [r7, #24]
 800690a:	f7ff fecb 	bl	80066a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	78fa      	ldrb	r2, [r7, #3]
 8006912:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006916:	bf00      	nop
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800691e:	b580      	push	{r7, lr}
 8006920:	b082      	sub	sp, #8
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00e      	beq.n	800694a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800693e:	2300      	movs	r3, #0
 8006940:	2200      	movs	r2, #0
 8006942:	2100      	movs	r1, #0
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f8a1 	bl	8006a8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800694a:	bf00      	nop
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006952:	b580      	push	{r7, lr}
 8006954:	b086      	sub	sp, #24
 8006956:	af00      	add	r7, sp, #0
 8006958:	4603      	mov	r3, r0
 800695a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800695c:	2301      	movs	r3, #1
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	2300      	movs	r3, #0
 8006962:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	461a      	mov	r2, r3
 8006968:	6939      	ldr	r1, [r7, #16]
 800696a:	6978      	ldr	r0, [r7, #20]
 800696c:	f7ff ff7a 	bl	8006864 <xQueueGenericCreate>
 8006970:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7ff ffd3 	bl	800691e <prvInitialiseMutex>

		return xNewQueue;
 8006978:	68fb      	ldr	r3, [r7, #12]
	}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006982:	b580      	push	{r7, lr}
 8006984:	b088      	sub	sp, #32
 8006986:	af02      	add	r7, sp, #8
 8006988:	4603      	mov	r3, r0
 800698a:	6039      	str	r1, [r7, #0]
 800698c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800698e:	2301      	movs	r3, #1
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	2300      	movs	r3, #0
 8006994:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006996:	79fb      	ldrb	r3, [r7, #7]
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2200      	movs	r2, #0
 800699e:	6939      	ldr	r1, [r7, #16]
 80069a0:	6978      	ldr	r0, [r7, #20]
 80069a2:	f7ff fee7 	bl	8006774 <xQueueGenericCreateStatic>
 80069a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f7ff ffb8 	bl	800691e <prvInitialiseMutex>

		return xNewQueue;
 80069ae:	68fb      	ldr	r3, [r7, #12]
	}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80069b8:	b590      	push	{r4, r7, lr}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	60fb      	str	r3, [r7, #12]
}
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	689c      	ldr	r4, [r3, #8]
 80069e4:	f001 fb72 	bl	80080cc <xTaskGetCurrentTaskHandle>
 80069e8:	4603      	mov	r3, r0
 80069ea:	429c      	cmp	r4, r3
 80069ec:	d111      	bne.n	8006a12 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	1e5a      	subs	r2, r3, #1
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d105      	bne.n	8006a0c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006a00:	2300      	movs	r3, #0
 8006a02:	2200      	movs	r2, #0
 8006a04:	2100      	movs	r1, #0
 8006a06:	6938      	ldr	r0, [r7, #16]
 8006a08:	f000 f840 	bl	8006a8c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	e001      	b.n	8006a16 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006a16:	697b      	ldr	r3, [r7, #20]
	}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd90      	pop	{r4, r7, pc}

08006a20 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006a20:	b590      	push	{r4, r7, lr}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10a      	bne.n	8006a4a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	60fb      	str	r3, [r7, #12]
}
 8006a46:	bf00      	nop
 8006a48:	e7fe      	b.n	8006a48 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	689c      	ldr	r4, [r3, #8]
 8006a4e:	f001 fb3d 	bl	80080cc <xTaskGetCurrentTaskHandle>
 8006a52:	4603      	mov	r3, r0
 8006a54:	429c      	cmp	r4, r3
 8006a56:	d107      	bne.n	8006a68 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006a62:	2301      	movs	r3, #1
 8006a64:	617b      	str	r3, [r7, #20]
 8006a66:	e00c      	b.n	8006a82 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6938      	ldr	r0, [r7, #16]
 8006a6c:	f000 fa88 	bl	8006f80 <xQueueSemaphoreTake>
 8006a70:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d004      	beq.n	8006a82 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006a82:	697b      	ldr	r3, [r7, #20]
	}
 8006a84:	4618      	mov	r0, r3
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd90      	pop	{r4, r7, pc}

08006a8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08e      	sub	sp, #56	; 0x38
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10a      	bne.n	8006abe <xQueueGenericSend+0x32>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006aba:	bf00      	nop
 8006abc:	e7fe      	b.n	8006abc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d103      	bne.n	8006acc <xQueueGenericSend+0x40>
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <xQueueGenericSend+0x44>
 8006acc:	2301      	movs	r3, #1
 8006ace:	e000      	b.n	8006ad2 <xQueueGenericSend+0x46>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10a      	bne.n	8006aec <xQueueGenericSend+0x60>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ae8:	bf00      	nop
 8006aea:	e7fe      	b.n	8006aea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d103      	bne.n	8006afa <xQueueGenericSend+0x6e>
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d101      	bne.n	8006afe <xQueueGenericSend+0x72>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <xQueueGenericSend+0x74>
 8006afe:	2300      	movs	r3, #0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10a      	bne.n	8006b1a <xQueueGenericSend+0x8e>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	623b      	str	r3, [r7, #32]
}
 8006b16:	bf00      	nop
 8006b18:	e7fe      	b.n	8006b18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b1a:	f001 fae7 	bl	80080ec <xTaskGetSchedulerState>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d102      	bne.n	8006b2a <xQueueGenericSend+0x9e>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <xQueueGenericSend+0xa2>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <xQueueGenericSend+0xa4>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10a      	bne.n	8006b4a <xQueueGenericSend+0xbe>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	61fb      	str	r3, [r7, #28]
}
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b4a:	f002 f92b 	bl	8008da4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d302      	bcc.n	8006b60 <xQueueGenericSend+0xd4>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d129      	bne.n	8006bb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b66:	f000 fb2f 	bl	80071c8 <prvCopyDataToQueue>
 8006b6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d010      	beq.n	8006b96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	3324      	adds	r3, #36	; 0x24
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f001 f8e5 	bl	8007d48 <xTaskRemoveFromEventList>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d013      	beq.n	8006bac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b84:	4b3f      	ldr	r3, [pc, #252]	; (8006c84 <xQueueGenericSend+0x1f8>)
 8006b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	e00a      	b.n	8006bac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d007      	beq.n	8006bac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b9c:	4b39      	ldr	r3, [pc, #228]	; (8006c84 <xQueueGenericSend+0x1f8>)
 8006b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006bac:	f002 f92a 	bl	8008e04 <vPortExitCritical>
				return pdPASS;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e063      	b.n	8006c7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d103      	bne.n	8006bc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bba:	f002 f923 	bl	8008e04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e05c      	b.n	8006c7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d106      	bne.n	8006bd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bc8:	f107 0314 	add.w	r3, r7, #20
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f001 f91f 	bl	8007e10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bd6:	f002 f915 	bl	8008e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bda:	f000 fe8b 	bl	80078f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bde:	f002 f8e1 	bl	8008da4 <vPortEnterCritical>
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006be8:	b25b      	sxtb	r3, r3
 8006bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bee:	d103      	bne.n	8006bf8 <xQueueGenericSend+0x16c>
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bfe:	b25b      	sxtb	r3, r3
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c04:	d103      	bne.n	8006c0e <xQueueGenericSend+0x182>
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c0e:	f002 f8f9 	bl	8008e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c12:	1d3a      	adds	r2, r7, #4
 8006c14:	f107 0314 	add.w	r3, r7, #20
 8006c18:	4611      	mov	r1, r2
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f001 f90e 	bl	8007e3c <xTaskCheckForTimeOut>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d124      	bne.n	8006c70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c28:	f000 fbc6 	bl	80073b8 <prvIsQueueFull>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d018      	beq.n	8006c64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	3310      	adds	r3, #16
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	4611      	mov	r1, r2
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f001 f834 	bl	8007ca8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c42:	f000 fb51 	bl	80072e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c46:	f000 fe63 	bl	8007910 <xTaskResumeAll>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f47f af7c 	bne.w	8006b4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c52:	4b0c      	ldr	r3, [pc, #48]	; (8006c84 <xQueueGenericSend+0x1f8>)
 8006c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	e772      	b.n	8006b4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c66:	f000 fb3f 	bl	80072e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c6a:	f000 fe51 	bl	8007910 <xTaskResumeAll>
 8006c6e:	e76c      	b.n	8006b4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c72:	f000 fb39 	bl	80072e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c76:	f000 fe4b 	bl	8007910 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3738      	adds	r7, #56	; 0x38
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	e000ed04 	.word	0xe000ed04

08006c88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b090      	sub	sp, #64	; 0x40
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d103      	bne.n	8006cc4 <xQueueGenericSendFromISR+0x3c>
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <xQueueGenericSendFromISR+0x40>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <xQueueGenericSendFromISR+0x42>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10a      	bne.n	8006ce4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ce0:	bf00      	nop
 8006ce2:	e7fe      	b.n	8006ce2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d103      	bne.n	8006cf2 <xQueueGenericSendFromISR+0x6a>
 8006cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d101      	bne.n	8006cf6 <xQueueGenericSendFromISR+0x6e>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e000      	b.n	8006cf8 <xQueueGenericSendFromISR+0x70>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10a      	bne.n	8006d12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	623b      	str	r3, [r7, #32]
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d12:	f002 f929 	bl	8008f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d16:	f3ef 8211 	mrs	r2, BASEPRI
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	61fa      	str	r2, [r7, #28]
 8006d2c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d2e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d30:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d302      	bcc.n	8006d44 <xQueueGenericSendFromISR+0xbc>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d12f      	bne.n	8006da4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d52:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	68b9      	ldr	r1, [r7, #8]
 8006d58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d5a:	f000 fa35 	bl	80071c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d66:	d112      	bne.n	8006d8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d016      	beq.n	8006d9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d72:	3324      	adds	r3, #36	; 0x24
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 ffe7 	bl	8007d48 <xTaskRemoveFromEventList>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00e      	beq.n	8006d9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00b      	beq.n	8006d9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	e007      	b.n	8006d9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d92:	3301      	adds	r3, #1
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	b25a      	sxtb	r2, r3
 8006d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006da2:	e001      	b.n	8006da8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006da4:	2300      	movs	r3, #0
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006daa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006db2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3740      	adds	r7, #64	; 0x40
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08c      	sub	sp, #48	; 0x30
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10a      	bne.n	8006df0 <xQueueReceive+0x30>
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	623b      	str	r3, [r7, #32]
}
 8006dec:	bf00      	nop
 8006dee:	e7fe      	b.n	8006dee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d103      	bne.n	8006dfe <xQueueReceive+0x3e>
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <xQueueReceive+0x42>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <xQueueReceive+0x44>
 8006e02:	2300      	movs	r3, #0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10a      	bne.n	8006e1e <xQueueReceive+0x5e>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	61fb      	str	r3, [r7, #28]
}
 8006e1a:	bf00      	nop
 8006e1c:	e7fe      	b.n	8006e1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e1e:	f001 f965 	bl	80080ec <xTaskGetSchedulerState>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d102      	bne.n	8006e2e <xQueueReceive+0x6e>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <xQueueReceive+0x72>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <xQueueReceive+0x74>
 8006e32:	2300      	movs	r3, #0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10a      	bne.n	8006e4e <xQueueReceive+0x8e>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	61bb      	str	r3, [r7, #24]
}
 8006e4a:	bf00      	nop
 8006e4c:	e7fe      	b.n	8006e4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e4e:	f001 ffa9 	bl	8008da4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d01f      	beq.n	8006e9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e62:	f000 fa1b 	bl	800729c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	1e5a      	subs	r2, r3, #1
 8006e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00f      	beq.n	8006e96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	3310      	adds	r3, #16
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 ff64 	bl	8007d48 <xTaskRemoveFromEventList>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d007      	beq.n	8006e96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e86:	4b3d      	ldr	r3, [pc, #244]	; (8006f7c <xQueueReceive+0x1bc>)
 8006e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e96:	f001 ffb5 	bl	8008e04 <vPortExitCritical>
				return pdPASS;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e069      	b.n	8006f72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d103      	bne.n	8006eac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ea4:	f001 ffae 	bl	8008e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	e062      	b.n	8006f72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d106      	bne.n	8006ec0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006eb2:	f107 0310 	add.w	r3, r7, #16
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 ffaa 	bl	8007e10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ec0:	f001 ffa0 	bl	8008e04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ec4:	f000 fd16 	bl	80078f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ec8:	f001 ff6c 	bl	8008da4 <vPortEnterCritical>
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ed2:	b25b      	sxtb	r3, r3
 8006ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed8:	d103      	bne.n	8006ee2 <xQueueReceive+0x122>
 8006eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ee8:	b25b      	sxtb	r3, r3
 8006eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eee:	d103      	bne.n	8006ef8 <xQueueReceive+0x138>
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ef8:	f001 ff84 	bl	8008e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006efc:	1d3a      	adds	r2, r7, #4
 8006efe:	f107 0310 	add.w	r3, r7, #16
 8006f02:	4611      	mov	r1, r2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 ff99 	bl	8007e3c <xTaskCheckForTimeOut>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d123      	bne.n	8006f58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f12:	f000 fa3b 	bl	800738c <prvIsQueueEmpty>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d017      	beq.n	8006f4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1e:	3324      	adds	r3, #36	; 0x24
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	4611      	mov	r1, r2
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 febf 	bl	8007ca8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f2c:	f000 f9dc 	bl	80072e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f30:	f000 fcee 	bl	8007910 <xTaskResumeAll>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d189      	bne.n	8006e4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006f3a:	4b10      	ldr	r3, [pc, #64]	; (8006f7c <xQueueReceive+0x1bc>)
 8006f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	e780      	b.n	8006e4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f4e:	f000 f9cb 	bl	80072e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f52:	f000 fcdd 	bl	8007910 <xTaskResumeAll>
 8006f56:	e77a      	b.n	8006e4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f5a:	f000 f9c5 	bl	80072e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f5e:	f000 fcd7 	bl	8007910 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f64:	f000 fa12 	bl	800738c <prvIsQueueEmpty>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f43f af6f 	beq.w	8006e4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3730      	adds	r7, #48	; 0x30
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	e000ed04 	.word	0xe000ed04

08006f80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08e      	sub	sp, #56	; 0x38
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10a      	bne.n	8006fb2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	623b      	str	r3, [r7, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	e7fe      	b.n	8006fb0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	61fb      	str	r3, [r7, #28]
}
 8006fcc:	bf00      	nop
 8006fce:	e7fe      	b.n	8006fce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fd0:	f001 f88c 	bl	80080ec <xTaskGetSchedulerState>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <xQueueSemaphoreTake+0x60>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <xQueueSemaphoreTake+0x64>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e000      	b.n	8006fe6 <xQueueSemaphoreTake+0x66>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10a      	bne.n	8007000 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	61bb      	str	r3, [r7, #24]
}
 8006ffc:	bf00      	nop
 8006ffe:	e7fe      	b.n	8006ffe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007000:	f001 fed0 	bl	8008da4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	2b00      	cmp	r3, #0
 800700e:	d024      	beq.n	800705a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	1e5a      	subs	r2, r3, #1
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d104      	bne.n	800702a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007020:	f001 f9da 	bl	80083d8 <pvTaskIncrementMutexHeldCount>
 8007024:	4602      	mov	r2, r0
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00f      	beq.n	8007052 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	3310      	adds	r3, #16
 8007036:	4618      	mov	r0, r3
 8007038:	f000 fe86 	bl	8007d48 <xTaskRemoveFromEventList>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007042:	4b54      	ldr	r3, [pc, #336]	; (8007194 <xQueueSemaphoreTake+0x214>)
 8007044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007052:	f001 fed7 	bl	8008e04 <vPortExitCritical>
				return pdPASS;
 8007056:	2301      	movs	r3, #1
 8007058:	e097      	b.n	800718a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d111      	bne.n	8007084 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	617b      	str	r3, [r7, #20]
}
 8007078:	bf00      	nop
 800707a:	e7fe      	b.n	800707a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800707c:	f001 fec2 	bl	8008e04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007080:	2300      	movs	r3, #0
 8007082:	e082      	b.n	800718a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800708a:	f107 030c 	add.w	r3, r7, #12
 800708e:	4618      	mov	r0, r3
 8007090:	f000 febe 	bl	8007e10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007094:	2301      	movs	r3, #1
 8007096:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007098:	f001 feb4 	bl	8008e04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800709c:	f000 fc2a 	bl	80078f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070a0:	f001 fe80 	bl	8008da4 <vPortEnterCritical>
 80070a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070aa:	b25b      	sxtb	r3, r3
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d103      	bne.n	80070ba <xQueueSemaphoreTake+0x13a>
 80070b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070c0:	b25b      	sxtb	r3, r3
 80070c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c6:	d103      	bne.n	80070d0 <xQueueSemaphoreTake+0x150>
 80070c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d0:	f001 fe98 	bl	8008e04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070d4:	463a      	mov	r2, r7
 80070d6:	f107 030c 	add.w	r3, r7, #12
 80070da:	4611      	mov	r1, r2
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fead 	bl	8007e3c <xTaskCheckForTimeOut>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d132      	bne.n	800714e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ea:	f000 f94f 	bl	800738c <prvIsQueueEmpty>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d026      	beq.n	8007142 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d109      	bne.n	8007110 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80070fc:	f001 fe52 	bl	8008da4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	4618      	mov	r0, r3
 8007106:	f001 f80f 	bl	8008128 <xTaskPriorityInherit>
 800710a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800710c:	f001 fe7a 	bl	8008e04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	3324      	adds	r3, #36	; 0x24
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	4611      	mov	r1, r2
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fdc5 	bl	8007ca8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800711e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007120:	f000 f8e2 	bl	80072e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007124:	f000 fbf4 	bl	8007910 <xTaskResumeAll>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	f47f af68 	bne.w	8007000 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007130:	4b18      	ldr	r3, [pc, #96]	; (8007194 <xQueueSemaphoreTake+0x214>)
 8007132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	e75e      	b.n	8007000 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007144:	f000 f8d0 	bl	80072e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007148:	f000 fbe2 	bl	8007910 <xTaskResumeAll>
 800714c:	e758      	b.n	8007000 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800714e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007150:	f000 f8ca 	bl	80072e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007154:	f000 fbdc 	bl	8007910 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007158:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800715a:	f000 f917 	bl	800738c <prvIsQueueEmpty>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	f43f af4d 	beq.w	8007000 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00d      	beq.n	8007188 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800716c:	f001 fe1a 	bl	8008da4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007170:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007172:	f000 f811 	bl	8007198 <prvGetDisinheritPriorityAfterTimeout>
 8007176:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800717e:	4618      	mov	r0, r3
 8007180:	f001 f8a8 	bl	80082d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007184:	f001 fe3e 	bl	8008e04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007188:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800718a:	4618      	mov	r0, r3
 800718c:	3738      	adds	r7, #56	; 0x38
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	e000ed04 	.word	0xe000ed04

08007198 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d006      	beq.n	80071b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	e001      	b.n	80071ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80071ba:	68fb      	ldr	r3, [r7, #12]
	}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071d4:	2300      	movs	r3, #0
 80071d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10d      	bne.n	8007202 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d14d      	bne.n	800728a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f001 f800 	bl	80081f8 <xTaskPriorityDisinherit>
 80071f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	609a      	str	r2, [r3, #8]
 8007200:	e043      	b.n	800728a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d119      	bne.n	800723c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6858      	ldr	r0, [r3, #4]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007210:	461a      	mov	r2, r3
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	f002 fa40 	bl	8009698 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	441a      	add	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	429a      	cmp	r2, r3
 8007230:	d32b      	bcc.n	800728a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	605a      	str	r2, [r3, #4]
 800723a:	e026      	b.n	800728a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	68d8      	ldr	r0, [r3, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007244:	461a      	mov	r2, r3
 8007246:	68b9      	ldr	r1, [r7, #8]
 8007248:	f002 fa26 	bl	8009698 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007254:	425b      	negs	r3, r3
 8007256:	441a      	add	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d207      	bcs.n	8007278 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007270:	425b      	negs	r3, r3
 8007272:	441a      	add	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b02      	cmp	r3, #2
 800727c:	d105      	bne.n	800728a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	3b01      	subs	r3, #1
 8007288:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007292:	697b      	ldr	r3, [r7, #20]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d018      	beq.n	80072e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	441a      	add	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d303      	bcc.n	80072d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68d9      	ldr	r1, [r3, #12]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	461a      	mov	r2, r3
 80072da:	6838      	ldr	r0, [r7, #0]
 80072dc:	f002 f9dc 	bl	8009698 <memcpy>
	}
}
 80072e0:	bf00      	nop
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072f0:	f001 fd58 	bl	8008da4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072fc:	e011      	b.n	8007322 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007302:	2b00      	cmp	r3, #0
 8007304:	d012      	beq.n	800732c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3324      	adds	r3, #36	; 0x24
 800730a:	4618      	mov	r0, r3
 800730c:	f000 fd1c 	bl	8007d48 <xTaskRemoveFromEventList>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007316:	f000 fdf3 	bl	8007f00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	3b01      	subs	r3, #1
 800731e:	b2db      	uxtb	r3, r3
 8007320:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007326:	2b00      	cmp	r3, #0
 8007328:	dce9      	bgt.n	80072fe <prvUnlockQueue+0x16>
 800732a:	e000      	b.n	800732e <prvUnlockQueue+0x46>
					break;
 800732c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	22ff      	movs	r2, #255	; 0xff
 8007332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007336:	f001 fd65 	bl	8008e04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800733a:	f001 fd33 	bl	8008da4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007344:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007346:	e011      	b.n	800736c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d012      	beq.n	8007376 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3310      	adds	r3, #16
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fcf7 	bl	8007d48 <xTaskRemoveFromEventList>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007360:	f000 fdce 	bl	8007f00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	3b01      	subs	r3, #1
 8007368:	b2db      	uxtb	r3, r3
 800736a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800736c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007370:	2b00      	cmp	r3, #0
 8007372:	dce9      	bgt.n	8007348 <prvUnlockQueue+0x60>
 8007374:	e000      	b.n	8007378 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007376:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	22ff      	movs	r2, #255	; 0xff
 800737c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007380:	f001 fd40 	bl	8008e04 <vPortExitCritical>
}
 8007384:	bf00      	nop
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007394:	f001 fd06 	bl	8008da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739c:	2b00      	cmp	r3, #0
 800739e:	d102      	bne.n	80073a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073a0:	2301      	movs	r3, #1
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	e001      	b.n	80073aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073aa:	f001 fd2b 	bl	8008e04 <vPortExitCritical>

	return xReturn;
 80073ae:	68fb      	ldr	r3, [r7, #12]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073c0:	f001 fcf0 	bl	8008da4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d102      	bne.n	80073d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073d0:	2301      	movs	r3, #1
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	e001      	b.n	80073da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073da:	f001 fd13 	bl	8008e04 <vPortExitCritical>

	return xReturn;
 80073de:	68fb      	ldr	r3, [r7, #12]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	e014      	b.n	8007422 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80073f8:	4a0f      	ldr	r2, [pc, #60]	; (8007438 <vQueueAddToRegistry+0x50>)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10b      	bne.n	800741c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007404:	490c      	ldr	r1, [pc, #48]	; (8007438 <vQueueAddToRegistry+0x50>)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800740e:	4a0a      	ldr	r2, [pc, #40]	; (8007438 <vQueueAddToRegistry+0x50>)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	4413      	add	r3, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800741a:	e006      	b.n	800742a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	3301      	adds	r3, #1
 8007420:	60fb      	str	r3, [r7, #12]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b07      	cmp	r3, #7
 8007426:	d9e7      	bls.n	80073f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	20000da4 	.word	0x20000da4

0800743c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800744c:	f001 fcaa 	bl	8008da4 <vPortEnterCritical>
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007456:	b25b      	sxtb	r3, r3
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745c:	d103      	bne.n	8007466 <vQueueWaitForMessageRestricted+0x2a>
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800746c:	b25b      	sxtb	r3, r3
 800746e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007472:	d103      	bne.n	800747c <vQueueWaitForMessageRestricted+0x40>
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800747c:	f001 fcc2 	bl	8008e04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007484:	2b00      	cmp	r3, #0
 8007486:	d106      	bne.n	8007496 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	3324      	adds	r3, #36	; 0x24
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fc2d 	bl	8007cf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007496:	6978      	ldr	r0, [r7, #20]
 8007498:	f7ff ff26 	bl	80072e8 <prvUnlockQueue>
	}
 800749c:	bf00      	nop
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08e      	sub	sp, #56	; 0x38
 80074a8:	af04      	add	r7, sp, #16
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10a      	bne.n	80074ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	623b      	str	r3, [r7, #32]
}
 80074ca:	bf00      	nop
 80074cc:	e7fe      	b.n	80074cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10a      	bne.n	80074ea <xTaskCreateStatic+0x46>
	__asm volatile
 80074d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	61fb      	str	r3, [r7, #28]
}
 80074e6:	bf00      	nop
 80074e8:	e7fe      	b.n	80074e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074ea:	23a8      	movs	r3, #168	; 0xa8
 80074ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	2ba8      	cmp	r3, #168	; 0xa8
 80074f2:	d00a      	beq.n	800750a <xTaskCreateStatic+0x66>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	61bb      	str	r3, [r7, #24]
}
 8007506:	bf00      	nop
 8007508:	e7fe      	b.n	8007508 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800750a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800750c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750e:	2b00      	cmp	r3, #0
 8007510:	d01e      	beq.n	8007550 <xTaskCreateStatic+0xac>
 8007512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007514:	2b00      	cmp	r3, #0
 8007516:	d01b      	beq.n	8007550 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007520:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	2202      	movs	r2, #2
 8007526:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800752a:	2300      	movs	r3, #0
 800752c:	9303      	str	r3, [sp, #12]
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	9302      	str	r3, [sp, #8]
 8007532:	f107 0314 	add.w	r3, r7, #20
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	68b9      	ldr	r1, [r7, #8]
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 f850 	bl	80075e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007548:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800754a:	f000 f8f3 	bl	8007734 <prvAddNewTaskToReadyList>
 800754e:	e001      	b.n	8007554 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007554:	697b      	ldr	r3, [r7, #20]
	}
 8007556:	4618      	mov	r0, r3
 8007558:	3728      	adds	r7, #40	; 0x28
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800755e:	b580      	push	{r7, lr}
 8007560:	b08c      	sub	sp, #48	; 0x30
 8007562:	af04      	add	r7, sp, #16
 8007564:	60f8      	str	r0, [r7, #12]
 8007566:	60b9      	str	r1, [r7, #8]
 8007568:	603b      	str	r3, [r7, #0]
 800756a:	4613      	mov	r3, r2
 800756c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800756e:	88fb      	ldrh	r3, [r7, #6]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4618      	mov	r0, r3
 8007574:	f001 fd38 	bl	8008fe8 <pvPortMalloc>
 8007578:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00e      	beq.n	800759e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007580:	20a8      	movs	r0, #168	; 0xa8
 8007582:	f001 fd31 	bl	8008fe8 <pvPortMalloc>
 8007586:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	631a      	str	r2, [r3, #48]	; 0x30
 8007594:	e005      	b.n	80075a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007596:	6978      	ldr	r0, [r7, #20]
 8007598:	f001 fdf2 	bl	8009180 <vPortFree>
 800759c:	e001      	b.n	80075a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d017      	beq.n	80075d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075b0:	88fa      	ldrh	r2, [r7, #6]
 80075b2:	2300      	movs	r3, #0
 80075b4:	9303      	str	r3, [sp, #12]
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	9302      	str	r3, [sp, #8]
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68b9      	ldr	r1, [r7, #8]
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f80e 	bl	80075e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075cc:	69f8      	ldr	r0, [r7, #28]
 80075ce:	f000 f8b1 	bl	8007734 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075d2:	2301      	movs	r3, #1
 80075d4:	61bb      	str	r3, [r7, #24]
 80075d6:	e002      	b.n	80075de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075d8:	f04f 33ff 	mov.w	r3, #4294967295
 80075dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075de:	69bb      	ldr	r3, [r7, #24]
	}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3720      	adds	r7, #32
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	461a      	mov	r2, r3
 8007600:	21a5      	movs	r1, #165	; 0xa5
 8007602:	f001 ffaf 	bl	8009564 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007610:	3b01      	subs	r3, #1
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	f023 0307 	bic.w	r3, r3, #7
 800761e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <prvInitialiseNewTask+0x58>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	617b      	str	r3, [r7, #20]
}
 800763c:	bf00      	nop
 800763e:	e7fe      	b.n	800763e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d01f      	beq.n	8007686 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007646:	2300      	movs	r3, #0
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	e012      	b.n	8007672 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	4413      	add	r3, r2
 8007652:	7819      	ldrb	r1, [r3, #0]
 8007654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	4413      	add	r3, r2
 800765a:	3334      	adds	r3, #52	; 0x34
 800765c:	460a      	mov	r2, r1
 800765e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	4413      	add	r3, r2
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d006      	beq.n	800767a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	3301      	adds	r3, #1
 8007670:	61fb      	str	r3, [r7, #28]
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	2b0f      	cmp	r3, #15
 8007676:	d9e9      	bls.n	800764c <prvInitialiseNewTask+0x64>
 8007678:	e000      	b.n	800767c <prvInitialiseNewTask+0x94>
			{
				break;
 800767a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007684:	e003      	b.n	800768e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800768e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007690:	2b37      	cmp	r3, #55	; 0x37
 8007692:	d901      	bls.n	8007698 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007694:	2337      	movs	r3, #55	; 0x37
 8007696:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800769c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80076a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a6:	2200      	movs	r2, #0
 80076a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	3304      	adds	r3, #4
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe ff64 	bl	800657c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b6:	3318      	adds	r3, #24
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fe ff5f 	bl	800657c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	3354      	adds	r3, #84	; 0x54
 80076e8:	224c      	movs	r2, #76	; 0x4c
 80076ea:	2100      	movs	r1, #0
 80076ec:	4618      	mov	r0, r3
 80076ee:	f001 ff39 	bl	8009564 <memset>
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	4a0c      	ldr	r2, [pc, #48]	; (8007728 <prvInitialiseNewTask+0x140>)
 80076f6:	659a      	str	r2, [r3, #88]	; 0x58
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	4a0c      	ldr	r2, [pc, #48]	; (800772c <prvInitialiseNewTask+0x144>)
 80076fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	4a0b      	ldr	r2, [pc, #44]	; (8007730 <prvInitialiseNewTask+0x148>)
 8007702:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	68f9      	ldr	r1, [r7, #12]
 8007708:	69b8      	ldr	r0, [r7, #24]
 800770a:	f001 fa1b 	bl	8008b44 <pxPortInitialiseStack>
 800770e:	4602      	mov	r2, r0
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007716:	2b00      	cmp	r3, #0
 8007718:	d002      	beq.n	8007720 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800771e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007720:	bf00      	nop
 8007722:	3720      	adds	r7, #32
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20006e18 	.word	0x20006e18
 800772c:	20006e80 	.word	0x20006e80
 8007730:	20006ee8 	.word	0x20006ee8

08007734 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800773c:	f001 fb32 	bl	8008da4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007740:	4b2d      	ldr	r3, [pc, #180]	; (80077f8 <prvAddNewTaskToReadyList+0xc4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3301      	adds	r3, #1
 8007746:	4a2c      	ldr	r2, [pc, #176]	; (80077f8 <prvAddNewTaskToReadyList+0xc4>)
 8007748:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800774a:	4b2c      	ldr	r3, [pc, #176]	; (80077fc <prvAddNewTaskToReadyList+0xc8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d109      	bne.n	8007766 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007752:	4a2a      	ldr	r2, [pc, #168]	; (80077fc <prvAddNewTaskToReadyList+0xc8>)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007758:	4b27      	ldr	r3, [pc, #156]	; (80077f8 <prvAddNewTaskToReadyList+0xc4>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d110      	bne.n	8007782 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007760:	f000 fbf2 	bl	8007f48 <prvInitialiseTaskLists>
 8007764:	e00d      	b.n	8007782 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007766:	4b26      	ldr	r3, [pc, #152]	; (8007800 <prvAddNewTaskToReadyList+0xcc>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d109      	bne.n	8007782 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800776e:	4b23      	ldr	r3, [pc, #140]	; (80077fc <prvAddNewTaskToReadyList+0xc8>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007778:	429a      	cmp	r2, r3
 800777a:	d802      	bhi.n	8007782 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800777c:	4a1f      	ldr	r2, [pc, #124]	; (80077fc <prvAddNewTaskToReadyList+0xc8>)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007782:	4b20      	ldr	r3, [pc, #128]	; (8007804 <prvAddNewTaskToReadyList+0xd0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3301      	adds	r3, #1
 8007788:	4a1e      	ldr	r2, [pc, #120]	; (8007804 <prvAddNewTaskToReadyList+0xd0>)
 800778a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800778c:	4b1d      	ldr	r3, [pc, #116]	; (8007804 <prvAddNewTaskToReadyList+0xd0>)
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007798:	4b1b      	ldr	r3, [pc, #108]	; (8007808 <prvAddNewTaskToReadyList+0xd4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	429a      	cmp	r2, r3
 800779e:	d903      	bls.n	80077a8 <prvAddNewTaskToReadyList+0x74>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	4a18      	ldr	r2, [pc, #96]	; (8007808 <prvAddNewTaskToReadyList+0xd4>)
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ac:	4613      	mov	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4a15      	ldr	r2, [pc, #84]	; (800780c <prvAddNewTaskToReadyList+0xd8>)
 80077b6:	441a      	add	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4619      	mov	r1, r3
 80077be:	4610      	mov	r0, r2
 80077c0:	f7fe fee9 	bl	8006596 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077c4:	f001 fb1e 	bl	8008e04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077c8:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <prvAddNewTaskToReadyList+0xcc>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00e      	beq.n	80077ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077d0:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <prvAddNewTaskToReadyList+0xc8>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077da:	429a      	cmp	r2, r3
 80077dc:	d207      	bcs.n	80077ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077de:	4b0c      	ldr	r3, [pc, #48]	; (8007810 <prvAddNewTaskToReadyList+0xdc>)
 80077e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077ee:	bf00      	nop
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	200012b8 	.word	0x200012b8
 80077fc:	20000de4 	.word	0x20000de4
 8007800:	200012c4 	.word	0x200012c4
 8007804:	200012d4 	.word	0x200012d4
 8007808:	200012c0 	.word	0x200012c0
 800780c:	20000de8 	.word	0x20000de8
 8007810:	e000ed04 	.word	0xe000ed04

08007814 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08a      	sub	sp, #40	; 0x28
 8007818:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800781a:	2300      	movs	r3, #0
 800781c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800781e:	2300      	movs	r3, #0
 8007820:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007822:	463a      	mov	r2, r7
 8007824:	1d39      	adds	r1, r7, #4
 8007826:	f107 0308 	add.w	r3, r7, #8
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe fe52 	bl	80064d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	9202      	str	r2, [sp, #8]
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	2300      	movs	r3, #0
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	2300      	movs	r3, #0
 8007840:	460a      	mov	r2, r1
 8007842:	4924      	ldr	r1, [pc, #144]	; (80078d4 <vTaskStartScheduler+0xc0>)
 8007844:	4824      	ldr	r0, [pc, #144]	; (80078d8 <vTaskStartScheduler+0xc4>)
 8007846:	f7ff fe2d 	bl	80074a4 <xTaskCreateStatic>
 800784a:	4603      	mov	r3, r0
 800784c:	4a23      	ldr	r2, [pc, #140]	; (80078dc <vTaskStartScheduler+0xc8>)
 800784e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007850:	4b22      	ldr	r3, [pc, #136]	; (80078dc <vTaskStartScheduler+0xc8>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007858:	2301      	movs	r3, #1
 800785a:	617b      	str	r3, [r7, #20]
 800785c:	e001      	b.n	8007862 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800785e:	2300      	movs	r3, #0
 8007860:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d102      	bne.n	800786e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007868:	f000 fe1e 	bl	80084a8 <xTimerCreateTimerTask>
 800786c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d11b      	bne.n	80078ac <vTaskStartScheduler+0x98>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	613b      	str	r3, [r7, #16]
}
 8007886:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007888:	4b15      	ldr	r3, [pc, #84]	; (80078e0 <vTaskStartScheduler+0xcc>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3354      	adds	r3, #84	; 0x54
 800788e:	4a15      	ldr	r2, [pc, #84]	; (80078e4 <vTaskStartScheduler+0xd0>)
 8007890:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007892:	4b15      	ldr	r3, [pc, #84]	; (80078e8 <vTaskStartScheduler+0xd4>)
 8007894:	f04f 32ff 	mov.w	r2, #4294967295
 8007898:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800789a:	4b14      	ldr	r3, [pc, #80]	; (80078ec <vTaskStartScheduler+0xd8>)
 800789c:	2201      	movs	r2, #1
 800789e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078a0:	4b13      	ldr	r3, [pc, #76]	; (80078f0 <vTaskStartScheduler+0xdc>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078a6:	f001 f9db 	bl	8008c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078aa:	e00e      	b.n	80078ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b2:	d10a      	bne.n	80078ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80078b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	60fb      	str	r3, [r7, #12]
}
 80078c6:	bf00      	nop
 80078c8:	e7fe      	b.n	80078c8 <vTaskStartScheduler+0xb4>
}
 80078ca:	bf00      	nop
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	0800a0b0 	.word	0x0800a0b0
 80078d8:	08007f19 	.word	0x08007f19
 80078dc:	200012dc 	.word	0x200012dc
 80078e0:	20000de4 	.word	0x20000de4
 80078e4:	200000ac 	.word	0x200000ac
 80078e8:	200012d8 	.word	0x200012d8
 80078ec:	200012c4 	.word	0x200012c4
 80078f0:	200012bc 	.word	0x200012bc

080078f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078f4:	b480      	push	{r7}
 80078f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078f8:	4b04      	ldr	r3, [pc, #16]	; (800790c <vTaskSuspendAll+0x18>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3301      	adds	r3, #1
 80078fe:	4a03      	ldr	r2, [pc, #12]	; (800790c <vTaskSuspendAll+0x18>)
 8007900:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007902:	bf00      	nop
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	200012e0 	.word	0x200012e0

08007910 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007916:	2300      	movs	r3, #0
 8007918:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800791a:	2300      	movs	r3, #0
 800791c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800791e:	4b42      	ldr	r3, [pc, #264]	; (8007a28 <xTaskResumeAll+0x118>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <xTaskResumeAll+0x2c>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	603b      	str	r3, [r7, #0]
}
 8007938:	bf00      	nop
 800793a:	e7fe      	b.n	800793a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800793c:	f001 fa32 	bl	8008da4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007940:	4b39      	ldr	r3, [pc, #228]	; (8007a28 <xTaskResumeAll+0x118>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3b01      	subs	r3, #1
 8007946:	4a38      	ldr	r2, [pc, #224]	; (8007a28 <xTaskResumeAll+0x118>)
 8007948:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800794a:	4b37      	ldr	r3, [pc, #220]	; (8007a28 <xTaskResumeAll+0x118>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d162      	bne.n	8007a18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007952:	4b36      	ldr	r3, [pc, #216]	; (8007a2c <xTaskResumeAll+0x11c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d05e      	beq.n	8007a18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800795a:	e02f      	b.n	80079bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800795c:	4b34      	ldr	r3, [pc, #208]	; (8007a30 <xTaskResumeAll+0x120>)
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3318      	adds	r3, #24
 8007968:	4618      	mov	r0, r3
 800796a:	f7fe fe71 	bl	8006650 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3304      	adds	r3, #4
 8007972:	4618      	mov	r0, r3
 8007974:	f7fe fe6c 	bl	8006650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797c:	4b2d      	ldr	r3, [pc, #180]	; (8007a34 <xTaskResumeAll+0x124>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	429a      	cmp	r2, r3
 8007982:	d903      	bls.n	800798c <xTaskResumeAll+0x7c>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	4a2a      	ldr	r2, [pc, #168]	; (8007a34 <xTaskResumeAll+0x124>)
 800798a:	6013      	str	r3, [r2, #0]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4a27      	ldr	r2, [pc, #156]	; (8007a38 <xTaskResumeAll+0x128>)
 800799a:	441a      	add	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3304      	adds	r3, #4
 80079a0:	4619      	mov	r1, r3
 80079a2:	4610      	mov	r0, r2
 80079a4:	f7fe fdf7 	bl	8006596 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ac:	4b23      	ldr	r3, [pc, #140]	; (8007a3c <xTaskResumeAll+0x12c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d302      	bcc.n	80079bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80079b6:	4b22      	ldr	r3, [pc, #136]	; (8007a40 <xTaskResumeAll+0x130>)
 80079b8:	2201      	movs	r2, #1
 80079ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079bc:	4b1c      	ldr	r3, [pc, #112]	; (8007a30 <xTaskResumeAll+0x120>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1cb      	bne.n	800795c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079ca:	f000 fb5f 	bl	800808c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079ce:	4b1d      	ldr	r3, [pc, #116]	; (8007a44 <xTaskResumeAll+0x134>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d010      	beq.n	80079fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079da:	f000 f847 	bl	8007a6c <xTaskIncrementTick>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80079e4:	4b16      	ldr	r3, [pc, #88]	; (8007a40 <xTaskResumeAll+0x130>)
 80079e6:	2201      	movs	r2, #1
 80079e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1f1      	bne.n	80079da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80079f6:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <xTaskResumeAll+0x134>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079fc:	4b10      	ldr	r3, [pc, #64]	; (8007a40 <xTaskResumeAll+0x130>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d009      	beq.n	8007a18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a04:	2301      	movs	r3, #1
 8007a06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a08:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <xTaskResumeAll+0x138>)
 8007a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a18:	f001 f9f4 	bl	8008e04 <vPortExitCritical>

	return xAlreadyYielded;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	200012e0 	.word	0x200012e0
 8007a2c:	200012b8 	.word	0x200012b8
 8007a30:	20001278 	.word	0x20001278
 8007a34:	200012c0 	.word	0x200012c0
 8007a38:	20000de8 	.word	0x20000de8
 8007a3c:	20000de4 	.word	0x20000de4
 8007a40:	200012cc 	.word	0x200012cc
 8007a44:	200012c8 	.word	0x200012c8
 8007a48:	e000ed04 	.word	0xe000ed04

08007a4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a52:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <xTaskGetTickCount+0x1c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a58:	687b      	ldr	r3, [r7, #4]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	200012bc 	.word	0x200012bc

08007a6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a72:	2300      	movs	r3, #0
 8007a74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a76:	4b4f      	ldr	r3, [pc, #316]	; (8007bb4 <xTaskIncrementTick+0x148>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f040 808f 	bne.w	8007b9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a80:	4b4d      	ldr	r3, [pc, #308]	; (8007bb8 <xTaskIncrementTick+0x14c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3301      	adds	r3, #1
 8007a86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a88:	4a4b      	ldr	r2, [pc, #300]	; (8007bb8 <xTaskIncrementTick+0x14c>)
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d120      	bne.n	8007ad6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a94:	4b49      	ldr	r3, [pc, #292]	; (8007bbc <xTaskIncrementTick+0x150>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	603b      	str	r3, [r7, #0]
}
 8007ab0:	bf00      	nop
 8007ab2:	e7fe      	b.n	8007ab2 <xTaskIncrementTick+0x46>
 8007ab4:	4b41      	ldr	r3, [pc, #260]	; (8007bbc <xTaskIncrementTick+0x150>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	4b41      	ldr	r3, [pc, #260]	; (8007bc0 <xTaskIncrementTick+0x154>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a3f      	ldr	r2, [pc, #252]	; (8007bbc <xTaskIncrementTick+0x150>)
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	4a3f      	ldr	r2, [pc, #252]	; (8007bc0 <xTaskIncrementTick+0x154>)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	4b3e      	ldr	r3, [pc, #248]	; (8007bc4 <xTaskIncrementTick+0x158>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3301      	adds	r3, #1
 8007ace:	4a3d      	ldr	r2, [pc, #244]	; (8007bc4 <xTaskIncrementTick+0x158>)
 8007ad0:	6013      	str	r3, [r2, #0]
 8007ad2:	f000 fadb 	bl	800808c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ad6:	4b3c      	ldr	r3, [pc, #240]	; (8007bc8 <xTaskIncrementTick+0x15c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d349      	bcc.n	8007b74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ae0:	4b36      	ldr	r3, [pc, #216]	; (8007bbc <xTaskIncrementTick+0x150>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d104      	bne.n	8007af4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aea:	4b37      	ldr	r3, [pc, #220]	; (8007bc8 <xTaskIncrementTick+0x15c>)
 8007aec:	f04f 32ff 	mov.w	r2, #4294967295
 8007af0:	601a      	str	r2, [r3, #0]
					break;
 8007af2:	e03f      	b.n	8007b74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af4:	4b31      	ldr	r3, [pc, #196]	; (8007bbc <xTaskIncrementTick+0x150>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d203      	bcs.n	8007b14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b0c:	4a2e      	ldr	r2, [pc, #184]	; (8007bc8 <xTaskIncrementTick+0x15c>)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b12:	e02f      	b.n	8007b74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	3304      	adds	r3, #4
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fd99 	bl	8006650 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d004      	beq.n	8007b30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	3318      	adds	r3, #24
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe fd90 	bl	8006650 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b34:	4b25      	ldr	r3, [pc, #148]	; (8007bcc <xTaskIncrementTick+0x160>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d903      	bls.n	8007b44 <xTaskIncrementTick+0xd8>
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	4a22      	ldr	r2, [pc, #136]	; (8007bcc <xTaskIncrementTick+0x160>)
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b48:	4613      	mov	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4a1f      	ldr	r2, [pc, #124]	; (8007bd0 <xTaskIncrementTick+0x164>)
 8007b52:	441a      	add	r2, r3
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	3304      	adds	r3, #4
 8007b58:	4619      	mov	r1, r3
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	f7fe fd1b 	bl	8006596 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b64:	4b1b      	ldr	r3, [pc, #108]	; (8007bd4 <xTaskIncrementTick+0x168>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d3b8      	bcc.n	8007ae0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b72:	e7b5      	b.n	8007ae0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b74:	4b17      	ldr	r3, [pc, #92]	; (8007bd4 <xTaskIncrementTick+0x168>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7a:	4915      	ldr	r1, [pc, #84]	; (8007bd0 <xTaskIncrementTick+0x164>)
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d901      	bls.n	8007b90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b90:	4b11      	ldr	r3, [pc, #68]	; (8007bd8 <xTaskIncrementTick+0x16c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d007      	beq.n	8007ba8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	617b      	str	r3, [r7, #20]
 8007b9c:	e004      	b.n	8007ba8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b9e:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <xTaskIncrementTick+0x170>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	4a0d      	ldr	r2, [pc, #52]	; (8007bdc <xTaskIncrementTick+0x170>)
 8007ba6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ba8:	697b      	ldr	r3, [r7, #20]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	200012e0 	.word	0x200012e0
 8007bb8:	200012bc 	.word	0x200012bc
 8007bbc:	20001270 	.word	0x20001270
 8007bc0:	20001274 	.word	0x20001274
 8007bc4:	200012d0 	.word	0x200012d0
 8007bc8:	200012d8 	.word	0x200012d8
 8007bcc:	200012c0 	.word	0x200012c0
 8007bd0:	20000de8 	.word	0x20000de8
 8007bd4:	20000de4 	.word	0x20000de4
 8007bd8:	200012cc 	.word	0x200012cc
 8007bdc:	200012c8 	.word	0x200012c8

08007be0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007be6:	4b2a      	ldr	r3, [pc, #168]	; (8007c90 <vTaskSwitchContext+0xb0>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bee:	4b29      	ldr	r3, [pc, #164]	; (8007c94 <vTaskSwitchContext+0xb4>)
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bf4:	e046      	b.n	8007c84 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007bf6:	4b27      	ldr	r3, [pc, #156]	; (8007c94 <vTaskSwitchContext+0xb4>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bfc:	4b26      	ldr	r3, [pc, #152]	; (8007c98 <vTaskSwitchContext+0xb8>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	e010      	b.n	8007c26 <vTaskSwitchContext+0x46>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10a      	bne.n	8007c20 <vTaskSwitchContext+0x40>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	607b      	str	r3, [r7, #4]
}
 8007c1c:	bf00      	nop
 8007c1e:	e7fe      	b.n	8007c1e <vTaskSwitchContext+0x3e>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3b01      	subs	r3, #1
 8007c24:	60fb      	str	r3, [r7, #12]
 8007c26:	491d      	ldr	r1, [pc, #116]	; (8007c9c <vTaskSwitchContext+0xbc>)
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	440b      	add	r3, r1
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0e4      	beq.n	8007c04 <vTaskSwitchContext+0x24>
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4a15      	ldr	r2, [pc, #84]	; (8007c9c <vTaskSwitchContext+0xbc>)
 8007c46:	4413      	add	r3, r2
 8007c48:	60bb      	str	r3, [r7, #8]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	605a      	str	r2, [r3, #4]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d104      	bne.n	8007c6a <vTaskSwitchContext+0x8a>
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	605a      	str	r2, [r3, #4]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	4a0b      	ldr	r2, [pc, #44]	; (8007ca0 <vTaskSwitchContext+0xc0>)
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	4a08      	ldr	r2, [pc, #32]	; (8007c98 <vTaskSwitchContext+0xb8>)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c7a:	4b09      	ldr	r3, [pc, #36]	; (8007ca0 <vTaskSwitchContext+0xc0>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3354      	adds	r3, #84	; 0x54
 8007c80:	4a08      	ldr	r2, [pc, #32]	; (8007ca4 <vTaskSwitchContext+0xc4>)
 8007c82:	6013      	str	r3, [r2, #0]
}
 8007c84:	bf00      	nop
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	200012e0 	.word	0x200012e0
 8007c94:	200012cc 	.word	0x200012cc
 8007c98:	200012c0 	.word	0x200012c0
 8007c9c:	20000de8 	.word	0x20000de8
 8007ca0:	20000de4 	.word	0x20000de4
 8007ca4:	200000ac 	.word	0x200000ac

08007ca8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	60fb      	str	r3, [r7, #12]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cce:	4b07      	ldr	r3, [pc, #28]	; (8007cec <vTaskPlaceOnEventList+0x44>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3318      	adds	r3, #24
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7fe fc81 	bl	80065de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cdc:	2101      	movs	r1, #1
 8007cde:	6838      	ldr	r0, [r7, #0]
 8007ce0:	f000 fb8e 	bl	8008400 <prvAddCurrentTaskToDelayedList>
}
 8007ce4:	bf00      	nop
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	20000de4 	.word	0x20000de4

08007cf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10a      	bne.n	8007d18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	617b      	str	r3, [r7, #20]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d18:	4b0a      	ldr	r3, [pc, #40]	; (8007d44 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3318      	adds	r3, #24
 8007d1e:	4619      	mov	r1, r3
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f7fe fc38 	bl	8006596 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d32:	6879      	ldr	r1, [r7, #4]
 8007d34:	68b8      	ldr	r0, [r7, #8]
 8007d36:	f000 fb63 	bl	8008400 <prvAddCurrentTaskToDelayedList>
	}
 8007d3a:	bf00      	nop
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20000de4 	.word	0x20000de4

08007d48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	60fb      	str	r3, [r7, #12]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	3318      	adds	r3, #24
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fe fc69 	bl	8006650 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d7e:	4b1e      	ldr	r3, [pc, #120]	; (8007df8 <xTaskRemoveFromEventList+0xb0>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d11d      	bne.n	8007dc2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe fc60 	bl	8006650 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d94:	4b19      	ldr	r3, [pc, #100]	; (8007dfc <xTaskRemoveFromEventList+0xb4>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d903      	bls.n	8007da4 <xTaskRemoveFromEventList+0x5c>
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	4a16      	ldr	r2, [pc, #88]	; (8007dfc <xTaskRemoveFromEventList+0xb4>)
 8007da2:	6013      	str	r3, [r2, #0]
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da8:	4613      	mov	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4a13      	ldr	r2, [pc, #76]	; (8007e00 <xTaskRemoveFromEventList+0xb8>)
 8007db2:	441a      	add	r2, r3
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	3304      	adds	r3, #4
 8007db8:	4619      	mov	r1, r3
 8007dba:	4610      	mov	r0, r2
 8007dbc:	f7fe fbeb 	bl	8006596 <vListInsertEnd>
 8007dc0:	e005      	b.n	8007dce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	3318      	adds	r3, #24
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	480e      	ldr	r0, [pc, #56]	; (8007e04 <xTaskRemoveFromEventList+0xbc>)
 8007dca:	f7fe fbe4 	bl	8006596 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd2:	4b0d      	ldr	r3, [pc, #52]	; (8007e08 <xTaskRemoveFromEventList+0xc0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d905      	bls.n	8007de8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <xTaskRemoveFromEventList+0xc4>)
 8007de2:	2201      	movs	r2, #1
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	e001      	b.n	8007dec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007de8:	2300      	movs	r3, #0
 8007dea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007dec:	697b      	ldr	r3, [r7, #20]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	200012e0 	.word	0x200012e0
 8007dfc:	200012c0 	.word	0x200012c0
 8007e00:	20000de8 	.word	0x20000de8
 8007e04:	20001278 	.word	0x20001278
 8007e08:	20000de4 	.word	0x20000de4
 8007e0c:	200012cc 	.word	0x200012cc

08007e10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e18:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <vTaskInternalSetTimeOutState+0x24>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e20:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <vTaskInternalSetTimeOutState+0x28>)
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	605a      	str	r2, [r3, #4]
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	200012d0 	.word	0x200012d0
 8007e38:	200012bc 	.word	0x200012bc

08007e3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b088      	sub	sp, #32
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10a      	bne.n	8007e62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	613b      	str	r3, [r7, #16]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10a      	bne.n	8007e7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	60fb      	str	r3, [r7, #12]
}
 8007e7a:	bf00      	nop
 8007e7c:	e7fe      	b.n	8007e7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e7e:	f000 ff91 	bl	8008da4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e82:	4b1d      	ldr	r3, [pc, #116]	; (8007ef8 <xTaskCheckForTimeOut+0xbc>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9a:	d102      	bne.n	8007ea2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	e023      	b.n	8007eea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	4b15      	ldr	r3, [pc, #84]	; (8007efc <xTaskCheckForTimeOut+0xc0>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d007      	beq.n	8007ebe <xTaskCheckForTimeOut+0x82>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	69ba      	ldr	r2, [r7, #24]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d302      	bcc.n	8007ebe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	e015      	b.n	8007eea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d20b      	bcs.n	8007ee0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	1ad2      	subs	r2, r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7ff ff9b 	bl	8007e10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eda:	2300      	movs	r3, #0
 8007edc:	61fb      	str	r3, [r7, #28]
 8007ede:	e004      	b.n	8007eea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007eea:	f000 ff8b 	bl	8008e04 <vPortExitCritical>

	return xReturn;
 8007eee:	69fb      	ldr	r3, [r7, #28]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3720      	adds	r7, #32
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	200012bc 	.word	0x200012bc
 8007efc:	200012d0 	.word	0x200012d0

08007f00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f04:	4b03      	ldr	r3, [pc, #12]	; (8007f14 <vTaskMissedYield+0x14>)
 8007f06:	2201      	movs	r2, #1
 8007f08:	601a      	str	r2, [r3, #0]
}
 8007f0a:	bf00      	nop
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	200012cc 	.word	0x200012cc

08007f18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f20:	f000 f852 	bl	8007fc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f24:	4b06      	ldr	r3, [pc, #24]	; (8007f40 <prvIdleTask+0x28>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d9f9      	bls.n	8007f20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f2c:	4b05      	ldr	r3, [pc, #20]	; (8007f44 <prvIdleTask+0x2c>)
 8007f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f3c:	e7f0      	b.n	8007f20 <prvIdleTask+0x8>
 8007f3e:	bf00      	nop
 8007f40:	20000de8 	.word	0x20000de8
 8007f44:	e000ed04 	.word	0xe000ed04

08007f48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f4e:	2300      	movs	r3, #0
 8007f50:	607b      	str	r3, [r7, #4]
 8007f52:	e00c      	b.n	8007f6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	4613      	mov	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4a12      	ldr	r2, [pc, #72]	; (8007fa8 <prvInitialiseTaskLists+0x60>)
 8007f60:	4413      	add	r3, r2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe faea 	bl	800653c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	607b      	str	r3, [r7, #4]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b37      	cmp	r3, #55	; 0x37
 8007f72:	d9ef      	bls.n	8007f54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f74:	480d      	ldr	r0, [pc, #52]	; (8007fac <prvInitialiseTaskLists+0x64>)
 8007f76:	f7fe fae1 	bl	800653c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f7a:	480d      	ldr	r0, [pc, #52]	; (8007fb0 <prvInitialiseTaskLists+0x68>)
 8007f7c:	f7fe fade 	bl	800653c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f80:	480c      	ldr	r0, [pc, #48]	; (8007fb4 <prvInitialiseTaskLists+0x6c>)
 8007f82:	f7fe fadb 	bl	800653c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f86:	480c      	ldr	r0, [pc, #48]	; (8007fb8 <prvInitialiseTaskLists+0x70>)
 8007f88:	f7fe fad8 	bl	800653c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f8c:	480b      	ldr	r0, [pc, #44]	; (8007fbc <prvInitialiseTaskLists+0x74>)
 8007f8e:	f7fe fad5 	bl	800653c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f92:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <prvInitialiseTaskLists+0x78>)
 8007f94:	4a05      	ldr	r2, [pc, #20]	; (8007fac <prvInitialiseTaskLists+0x64>)
 8007f96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f98:	4b0a      	ldr	r3, [pc, #40]	; (8007fc4 <prvInitialiseTaskLists+0x7c>)
 8007f9a:	4a05      	ldr	r2, [pc, #20]	; (8007fb0 <prvInitialiseTaskLists+0x68>)
 8007f9c:	601a      	str	r2, [r3, #0]
}
 8007f9e:	bf00      	nop
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000de8 	.word	0x20000de8
 8007fac:	20001248 	.word	0x20001248
 8007fb0:	2000125c 	.word	0x2000125c
 8007fb4:	20001278 	.word	0x20001278
 8007fb8:	2000128c 	.word	0x2000128c
 8007fbc:	200012a4 	.word	0x200012a4
 8007fc0:	20001270 	.word	0x20001270
 8007fc4:	20001274 	.word	0x20001274

08007fc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fce:	e019      	b.n	8008004 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fd0:	f000 fee8 	bl	8008da4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd4:	4b10      	ldr	r3, [pc, #64]	; (8008018 <prvCheckTasksWaitingTermination+0x50>)
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	3304      	adds	r3, #4
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fe fb35 	bl	8006650 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	; (800801c <prvCheckTasksWaitingTermination+0x54>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	4a0b      	ldr	r2, [pc, #44]	; (800801c <prvCheckTasksWaitingTermination+0x54>)
 8007fee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <prvCheckTasksWaitingTermination+0x58>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	4a0a      	ldr	r2, [pc, #40]	; (8008020 <prvCheckTasksWaitingTermination+0x58>)
 8007ff8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ffa:	f000 ff03 	bl	8008e04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f810 	bl	8008024 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008004:	4b06      	ldr	r3, [pc, #24]	; (8008020 <prvCheckTasksWaitingTermination+0x58>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e1      	bne.n	8007fd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	2000128c 	.word	0x2000128c
 800801c:	200012b8 	.word	0x200012b8
 8008020:	200012a0 	.word	0x200012a0

08008024 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3354      	adds	r3, #84	; 0x54
 8008030:	4618      	mov	r0, r3
 8008032:	f001 fa9f 	bl	8009574 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800803c:	2b00      	cmp	r3, #0
 800803e:	d108      	bne.n	8008052 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008044:	4618      	mov	r0, r3
 8008046:	f001 f89b 	bl	8009180 <vPortFree>
				vPortFree( pxTCB );
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 f898 	bl	8009180 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008050:	e018      	b.n	8008084 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008058:	2b01      	cmp	r3, #1
 800805a:	d103      	bne.n	8008064 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 f88f 	bl	8009180 <vPortFree>
	}
 8008062:	e00f      	b.n	8008084 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800806a:	2b02      	cmp	r3, #2
 800806c:	d00a      	beq.n	8008084 <prvDeleteTCB+0x60>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	60fb      	str	r3, [r7, #12]
}
 8008080:	bf00      	nop
 8008082:	e7fe      	b.n	8008082 <prvDeleteTCB+0x5e>
	}
 8008084:	bf00      	nop
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008092:	4b0c      	ldr	r3, [pc, #48]	; (80080c4 <prvResetNextTaskUnblockTime+0x38>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d104      	bne.n	80080a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800809c:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <prvResetNextTaskUnblockTime+0x3c>)
 800809e:	f04f 32ff 	mov.w	r2, #4294967295
 80080a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080a4:	e008      	b.n	80080b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080a6:	4b07      	ldr	r3, [pc, #28]	; (80080c4 <prvResetNextTaskUnblockTime+0x38>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	4a04      	ldr	r2, [pc, #16]	; (80080c8 <prvResetNextTaskUnblockTime+0x3c>)
 80080b6:	6013      	str	r3, [r2, #0]
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	20001270 	.word	0x20001270
 80080c8:	200012d8 	.word	0x200012d8

080080cc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80080d2:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <xTaskGetCurrentTaskHandle+0x1c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80080d8:	687b      	ldr	r3, [r7, #4]
	}
 80080da:	4618      	mov	r0, r3
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	20000de4 	.word	0x20000de4

080080ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080f2:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <xTaskGetSchedulerState+0x34>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d102      	bne.n	8008100 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080fa:	2301      	movs	r3, #1
 80080fc:	607b      	str	r3, [r7, #4]
 80080fe:	e008      	b.n	8008112 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008100:	4b08      	ldr	r3, [pc, #32]	; (8008124 <xTaskGetSchedulerState+0x38>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008108:	2302      	movs	r3, #2
 800810a:	607b      	str	r3, [r7, #4]
 800810c:	e001      	b.n	8008112 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800810e:	2300      	movs	r3, #0
 8008110:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008112:	687b      	ldr	r3, [r7, #4]
	}
 8008114:	4618      	mov	r0, r3
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	200012c4 	.word	0x200012c4
 8008124:	200012e0 	.word	0x200012e0

08008128 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008134:	2300      	movs	r3, #0
 8008136:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d051      	beq.n	80081e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008142:	4b2a      	ldr	r3, [pc, #168]	; (80081ec <xTaskPriorityInherit+0xc4>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008148:	429a      	cmp	r2, r3
 800814a:	d241      	bcs.n	80081d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	2b00      	cmp	r3, #0
 8008152:	db06      	blt.n	8008162 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008154:	4b25      	ldr	r3, [pc, #148]	; (80081ec <xTaskPriorityInherit+0xc4>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	6959      	ldr	r1, [r3, #20]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4a1f      	ldr	r2, [pc, #124]	; (80081f0 <xTaskPriorityInherit+0xc8>)
 8008174:	4413      	add	r3, r2
 8008176:	4299      	cmp	r1, r3
 8008178:	d122      	bne.n	80081c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	3304      	adds	r3, #4
 800817e:	4618      	mov	r0, r3
 8008180:	f7fe fa66 	bl	8006650 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008184:	4b19      	ldr	r3, [pc, #100]	; (80081ec <xTaskPriorityInherit+0xc4>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008192:	4b18      	ldr	r3, [pc, #96]	; (80081f4 <xTaskPriorityInherit+0xcc>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	429a      	cmp	r2, r3
 8008198:	d903      	bls.n	80081a2 <xTaskPriorityInherit+0x7a>
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819e:	4a15      	ldr	r2, [pc, #84]	; (80081f4 <xTaskPriorityInherit+0xcc>)
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a6:	4613      	mov	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4a10      	ldr	r2, [pc, #64]	; (80081f0 <xTaskPriorityInherit+0xc8>)
 80081b0:	441a      	add	r2, r3
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	3304      	adds	r3, #4
 80081b6:	4619      	mov	r1, r3
 80081b8:	4610      	mov	r0, r2
 80081ba:	f7fe f9ec 	bl	8006596 <vListInsertEnd>
 80081be:	e004      	b.n	80081ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081c0:	4b0a      	ldr	r3, [pc, #40]	; (80081ec <xTaskPriorityInherit+0xc4>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80081ca:	2301      	movs	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	e008      	b.n	80081e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <xTaskPriorityInherit+0xc4>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081da:	429a      	cmp	r2, r3
 80081dc:	d201      	bcs.n	80081e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80081de:	2301      	movs	r3, #1
 80081e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081e2:	68fb      	ldr	r3, [r7, #12]
	}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	20000de4 	.word	0x20000de4
 80081f0:	20000de8 	.word	0x20000de8
 80081f4:	200012c0 	.word	0x200012c0

080081f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008204:	2300      	movs	r3, #0
 8008206:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d056      	beq.n	80082bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800820e:	4b2e      	ldr	r3, [pc, #184]	; (80082c8 <xTaskPriorityDisinherit+0xd0>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	429a      	cmp	r2, r3
 8008216:	d00a      	beq.n	800822e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	60fb      	str	r3, [r7, #12]
}
 800822a:	bf00      	nop
 800822c:	e7fe      	b.n	800822c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10a      	bne.n	800824c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	60bb      	str	r3, [r7, #8]
}
 8008248:	bf00      	nop
 800824a:	e7fe      	b.n	800824a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008250:	1e5a      	subs	r2, r3, #1
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800825e:	429a      	cmp	r2, r3
 8008260:	d02c      	beq.n	80082bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008266:	2b00      	cmp	r3, #0
 8008268:	d128      	bne.n	80082bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	3304      	adds	r3, #4
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe f9ee 	bl	8006650 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008280:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800828c:	4b0f      	ldr	r3, [pc, #60]	; (80082cc <xTaskPriorityDisinherit+0xd4>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	429a      	cmp	r2, r3
 8008292:	d903      	bls.n	800829c <xTaskPriorityDisinherit+0xa4>
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008298:	4a0c      	ldr	r2, [pc, #48]	; (80082cc <xTaskPriorityDisinherit+0xd4>)
 800829a:	6013      	str	r3, [r2, #0]
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a0:	4613      	mov	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4a09      	ldr	r2, [pc, #36]	; (80082d0 <xTaskPriorityDisinherit+0xd8>)
 80082aa:	441a      	add	r2, r3
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	3304      	adds	r3, #4
 80082b0:	4619      	mov	r1, r3
 80082b2:	4610      	mov	r0, r2
 80082b4:	f7fe f96f 	bl	8006596 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082b8:	2301      	movs	r3, #1
 80082ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082bc:	697b      	ldr	r3, [r7, #20]
	}
 80082be:	4618      	mov	r0, r3
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	20000de4 	.word	0x20000de4
 80082cc:	200012c0 	.word	0x200012c0
 80082d0:	20000de8 	.word	0x20000de8

080082d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b088      	sub	sp, #32
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80082e2:	2301      	movs	r3, #1
 80082e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d06a      	beq.n	80083c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10a      	bne.n	800830a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80082f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	60fb      	str	r3, [r7, #12]
}
 8008306:	bf00      	nop
 8008308:	e7fe      	b.n	8008308 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d902      	bls.n	800831a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	61fb      	str	r3, [r7, #28]
 8008318:	e002      	b.n	8008320 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800831e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008324:	69fa      	ldr	r2, [r7, #28]
 8008326:	429a      	cmp	r2, r3
 8008328:	d04b      	beq.n	80083c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	429a      	cmp	r2, r3
 8008332:	d146      	bne.n	80083c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008334:	4b25      	ldr	r3, [pc, #148]	; (80083cc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	69ba      	ldr	r2, [r7, #24]
 800833a:	429a      	cmp	r2, r3
 800833c:	d10a      	bne.n	8008354 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	60bb      	str	r3, [r7, #8]
}
 8008350:	bf00      	nop
 8008352:	e7fe      	b.n	8008352 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008358:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	69fa      	ldr	r2, [r7, #28]
 800835e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	db04      	blt.n	8008372 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	6959      	ldr	r1, [r3, #20]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	4613      	mov	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4a13      	ldr	r2, [pc, #76]	; (80083d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008382:	4413      	add	r3, r2
 8008384:	4299      	cmp	r1, r3
 8008386:	d11c      	bne.n	80083c2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	3304      	adds	r3, #4
 800838c:	4618      	mov	r0, r3
 800838e:	f7fe f95f 	bl	8006650 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008396:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d903      	bls.n	80083a6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a2:	4a0c      	ldr	r2, [pc, #48]	; (80083d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4a07      	ldr	r2, [pc, #28]	; (80083d0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80083b4:	441a      	add	r2, r3
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	3304      	adds	r3, #4
 80083ba:	4619      	mov	r1, r3
 80083bc:	4610      	mov	r0, r2
 80083be:	f7fe f8ea 	bl	8006596 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083c2:	bf00      	nop
 80083c4:	3720      	adds	r7, #32
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20000de4 	.word	0x20000de4
 80083d0:	20000de8 	.word	0x20000de8
 80083d4:	200012c0 	.word	0x200012c0

080083d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80083d8:	b480      	push	{r7}
 80083da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80083dc:	4b07      	ldr	r3, [pc, #28]	; (80083fc <pvTaskIncrementMutexHeldCount+0x24>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d004      	beq.n	80083ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80083e4:	4b05      	ldr	r3, [pc, #20]	; (80083fc <pvTaskIncrementMutexHeldCount+0x24>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083ea:	3201      	adds	r2, #1
 80083ec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80083ee:	4b03      	ldr	r3, [pc, #12]	; (80083fc <pvTaskIncrementMutexHeldCount+0x24>)
 80083f0:	681b      	ldr	r3, [r3, #0]
	}
 80083f2:	4618      	mov	r0, r3
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	20000de4 	.word	0x20000de4

08008400 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800840a:	4b21      	ldr	r3, [pc, #132]	; (8008490 <prvAddCurrentTaskToDelayedList+0x90>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008410:	4b20      	ldr	r3, [pc, #128]	; (8008494 <prvAddCurrentTaskToDelayedList+0x94>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3304      	adds	r3, #4
 8008416:	4618      	mov	r0, r3
 8008418:	f7fe f91a 	bl	8006650 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008422:	d10a      	bne.n	800843a <prvAddCurrentTaskToDelayedList+0x3a>
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d007      	beq.n	800843a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800842a:	4b1a      	ldr	r3, [pc, #104]	; (8008494 <prvAddCurrentTaskToDelayedList+0x94>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3304      	adds	r3, #4
 8008430:	4619      	mov	r1, r3
 8008432:	4819      	ldr	r0, [pc, #100]	; (8008498 <prvAddCurrentTaskToDelayedList+0x98>)
 8008434:	f7fe f8af 	bl	8006596 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008438:	e026      	b.n	8008488 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4413      	add	r3, r2
 8008440:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008442:	4b14      	ldr	r3, [pc, #80]	; (8008494 <prvAddCurrentTaskToDelayedList+0x94>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	429a      	cmp	r2, r3
 8008450:	d209      	bcs.n	8008466 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008452:	4b12      	ldr	r3, [pc, #72]	; (800849c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <prvAddCurrentTaskToDelayedList+0x94>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3304      	adds	r3, #4
 800845c:	4619      	mov	r1, r3
 800845e:	4610      	mov	r0, r2
 8008460:	f7fe f8bd 	bl	80065de <vListInsert>
}
 8008464:	e010      	b.n	8008488 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008466:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <prvAddCurrentTaskToDelayedList+0x94>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3304      	adds	r3, #4
 8008470:	4619      	mov	r1, r3
 8008472:	4610      	mov	r0, r2
 8008474:	f7fe f8b3 	bl	80065de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008478:	4b0a      	ldr	r3, [pc, #40]	; (80084a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	429a      	cmp	r2, r3
 8008480:	d202      	bcs.n	8008488 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008482:	4a08      	ldr	r2, [pc, #32]	; (80084a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	6013      	str	r3, [r2, #0]
}
 8008488:	bf00      	nop
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	200012bc 	.word	0x200012bc
 8008494:	20000de4 	.word	0x20000de4
 8008498:	200012a4 	.word	0x200012a4
 800849c:	20001274 	.word	0x20001274
 80084a0:	20001270 	.word	0x20001270
 80084a4:	200012d8 	.word	0x200012d8

080084a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08a      	sub	sp, #40	; 0x28
 80084ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80084b2:	f000 fb07 	bl	8008ac4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084b6:	4b1c      	ldr	r3, [pc, #112]	; (8008528 <xTimerCreateTimerTask+0x80>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d021      	beq.n	8008502 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084c6:	1d3a      	adds	r2, r7, #4
 80084c8:	f107 0108 	add.w	r1, r7, #8
 80084cc:	f107 030c 	add.w	r3, r7, #12
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fe f819 	bl	8006508 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	9202      	str	r2, [sp, #8]
 80084de:	9301      	str	r3, [sp, #4]
 80084e0:	2302      	movs	r3, #2
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	2300      	movs	r3, #0
 80084e6:	460a      	mov	r2, r1
 80084e8:	4910      	ldr	r1, [pc, #64]	; (800852c <xTimerCreateTimerTask+0x84>)
 80084ea:	4811      	ldr	r0, [pc, #68]	; (8008530 <xTimerCreateTimerTask+0x88>)
 80084ec:	f7fe ffda 	bl	80074a4 <xTaskCreateStatic>
 80084f0:	4603      	mov	r3, r0
 80084f2:	4a10      	ldr	r2, [pc, #64]	; (8008534 <xTimerCreateTimerTask+0x8c>)
 80084f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084f6:	4b0f      	ldr	r3, [pc, #60]	; (8008534 <xTimerCreateTimerTask+0x8c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084fe:	2301      	movs	r3, #1
 8008500:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10a      	bne.n	800851e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	613b      	str	r3, [r7, #16]
}
 800851a:	bf00      	nop
 800851c:	e7fe      	b.n	800851c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800851e:	697b      	ldr	r3, [r7, #20]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3718      	adds	r7, #24
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	20001314 	.word	0x20001314
 800852c:	0800a0b8 	.word	0x0800a0b8
 8008530:	0800866d 	.word	0x0800866d
 8008534:	20001318 	.word	0x20001318

08008538 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08a      	sub	sp, #40	; 0x28
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
 8008544:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008546:	2300      	movs	r3, #0
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10a      	bne.n	8008566 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	623b      	str	r3, [r7, #32]
}
 8008562:	bf00      	nop
 8008564:	e7fe      	b.n	8008564 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008566:	4b1a      	ldr	r3, [pc, #104]	; (80085d0 <xTimerGenericCommand+0x98>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d02a      	beq.n	80085c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b05      	cmp	r3, #5
 800857e:	dc18      	bgt.n	80085b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008580:	f7ff fdb4 	bl	80080ec <xTaskGetSchedulerState>
 8008584:	4603      	mov	r3, r0
 8008586:	2b02      	cmp	r3, #2
 8008588:	d109      	bne.n	800859e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800858a:	4b11      	ldr	r3, [pc, #68]	; (80085d0 <xTimerGenericCommand+0x98>)
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	f107 0110 	add.w	r1, r7, #16
 8008592:	2300      	movs	r3, #0
 8008594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008596:	f7fe fa79 	bl	8006a8c <xQueueGenericSend>
 800859a:	6278      	str	r0, [r7, #36]	; 0x24
 800859c:	e012      	b.n	80085c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800859e:	4b0c      	ldr	r3, [pc, #48]	; (80085d0 <xTimerGenericCommand+0x98>)
 80085a0:	6818      	ldr	r0, [r3, #0]
 80085a2:	f107 0110 	add.w	r1, r7, #16
 80085a6:	2300      	movs	r3, #0
 80085a8:	2200      	movs	r2, #0
 80085aa:	f7fe fa6f 	bl	8006a8c <xQueueGenericSend>
 80085ae:	6278      	str	r0, [r7, #36]	; 0x24
 80085b0:	e008      	b.n	80085c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085b2:	4b07      	ldr	r3, [pc, #28]	; (80085d0 <xTimerGenericCommand+0x98>)
 80085b4:	6818      	ldr	r0, [r3, #0]
 80085b6:	f107 0110 	add.w	r1, r7, #16
 80085ba:	2300      	movs	r3, #0
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	f7fe fb63 	bl	8006c88 <xQueueGenericSendFromISR>
 80085c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3728      	adds	r7, #40	; 0x28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	20001314 	.word	0x20001314

080085d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af02      	add	r7, sp, #8
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085de:	4b22      	ldr	r3, [pc, #136]	; (8008668 <prvProcessExpiredTimer+0x94>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	3304      	adds	r3, #4
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fe f82f 	bl	8006650 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d022      	beq.n	8008646 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	699a      	ldr	r2, [r3, #24]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	18d1      	adds	r1, r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	6978      	ldr	r0, [r7, #20]
 800860e:	f000 f8d1 	bl	80087b4 <prvInsertTimerInActiveList>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d01f      	beq.n	8008658 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008618:	2300      	movs	r3, #0
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	2300      	movs	r3, #0
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	2100      	movs	r1, #0
 8008622:	6978      	ldr	r0, [r7, #20]
 8008624:	f7ff ff88 	bl	8008538 <xTimerGenericCommand>
 8008628:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d113      	bne.n	8008658 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	60fb      	str	r3, [r7, #12]
}
 8008642:	bf00      	nop
 8008644:	e7fe      	b.n	8008644 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800864c:	f023 0301 	bic.w	r3, r3, #1
 8008650:	b2da      	uxtb	r2, r3
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	6978      	ldr	r0, [r7, #20]
 800865e:	4798      	blx	r3
}
 8008660:	bf00      	nop
 8008662:	3718      	adds	r7, #24
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	2000130c 	.word	0x2000130c

0800866c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008674:	f107 0308 	add.w	r3, r7, #8
 8008678:	4618      	mov	r0, r3
 800867a:	f000 f857 	bl	800872c <prvGetNextExpireTime>
 800867e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	4619      	mov	r1, r3
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f000 f803 	bl	8008690 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800868a:	f000 f8d5 	bl	8008838 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800868e:	e7f1      	b.n	8008674 <prvTimerTask+0x8>

08008690 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800869a:	f7ff f92b 	bl	80078f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800869e:	f107 0308 	add.w	r3, r7, #8
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 f866 	bl	8008774 <prvSampleTimeNow>
 80086a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d130      	bne.n	8008712 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10a      	bne.n	80086cc <prvProcessTimerOrBlockTask+0x3c>
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d806      	bhi.n	80086cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086be:	f7ff f927 	bl	8007910 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086c2:	68f9      	ldr	r1, [r7, #12]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7ff ff85 	bl	80085d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80086ca:	e024      	b.n	8008716 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d008      	beq.n	80086e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086d2:	4b13      	ldr	r3, [pc, #76]	; (8008720 <prvProcessTimerOrBlockTask+0x90>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d101      	bne.n	80086e0 <prvProcessTimerOrBlockTask+0x50>
 80086dc:	2301      	movs	r3, #1
 80086de:	e000      	b.n	80086e2 <prvProcessTimerOrBlockTask+0x52>
 80086e0:	2300      	movs	r3, #0
 80086e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086e4:	4b0f      	ldr	r3, [pc, #60]	; (8008724 <prvProcessTimerOrBlockTask+0x94>)
 80086e6:	6818      	ldr	r0, [r3, #0]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	4619      	mov	r1, r3
 80086f2:	f7fe fea3 	bl	800743c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086f6:	f7ff f90b 	bl	8007910 <xTaskResumeAll>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10a      	bne.n	8008716 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008700:	4b09      	ldr	r3, [pc, #36]	; (8008728 <prvProcessTimerOrBlockTask+0x98>)
 8008702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	f3bf 8f6f 	isb	sy
}
 8008710:	e001      	b.n	8008716 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008712:	f7ff f8fd 	bl	8007910 <xTaskResumeAll>
}
 8008716:	bf00      	nop
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	20001310 	.word	0x20001310
 8008724:	20001314 	.word	0x20001314
 8008728:	e000ed04 	.word	0xe000ed04

0800872c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008734:	4b0e      	ldr	r3, [pc, #56]	; (8008770 <prvGetNextExpireTime+0x44>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <prvGetNextExpireTime+0x16>
 800873e:	2201      	movs	r2, #1
 8008740:	e000      	b.n	8008744 <prvGetNextExpireTime+0x18>
 8008742:	2200      	movs	r2, #0
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d105      	bne.n	800875c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008750:	4b07      	ldr	r3, [pc, #28]	; (8008770 <prvGetNextExpireTime+0x44>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	e001      	b.n	8008760 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800875c:	2300      	movs	r3, #0
 800875e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008760:	68fb      	ldr	r3, [r7, #12]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	2000130c 	.word	0x2000130c

08008774 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800877c:	f7ff f966 	bl	8007a4c <xTaskGetTickCount>
 8008780:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008782:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <prvSampleTimeNow+0x3c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	429a      	cmp	r2, r3
 800878a:	d205      	bcs.n	8008798 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800878c:	f000 f936 	bl	80089fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	601a      	str	r2, [r3, #0]
 8008796:	e002      	b.n	800879e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800879e:	4a04      	ldr	r2, [pc, #16]	; (80087b0 <prvSampleTimeNow+0x3c>)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80087a4:	68fb      	ldr	r3, [r7, #12]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	2000131c 	.word	0x2000131c

080087b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80087c2:	2300      	movs	r3, #0
 80087c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d812      	bhi.n	8008800 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	1ad2      	subs	r2, r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d302      	bcc.n	80087ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087e8:	2301      	movs	r3, #1
 80087ea:	617b      	str	r3, [r7, #20]
 80087ec:	e01b      	b.n	8008826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087ee:	4b10      	ldr	r3, [pc, #64]	; (8008830 <prvInsertTimerInActiveList+0x7c>)
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	3304      	adds	r3, #4
 80087f6:	4619      	mov	r1, r3
 80087f8:	4610      	mov	r0, r2
 80087fa:	f7fd fef0 	bl	80065de <vListInsert>
 80087fe:	e012      	b.n	8008826 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	d206      	bcs.n	8008816 <prvInsertTimerInActiveList+0x62>
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	429a      	cmp	r2, r3
 800880e:	d302      	bcc.n	8008816 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008810:	2301      	movs	r3, #1
 8008812:	617b      	str	r3, [r7, #20]
 8008814:	e007      	b.n	8008826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008816:	4b07      	ldr	r3, [pc, #28]	; (8008834 <prvInsertTimerInActiveList+0x80>)
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3304      	adds	r3, #4
 800881e:	4619      	mov	r1, r3
 8008820:	4610      	mov	r0, r2
 8008822:	f7fd fedc 	bl	80065de <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008826:	697b      	ldr	r3, [r7, #20]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	20001310 	.word	0x20001310
 8008834:	2000130c 	.word	0x2000130c

08008838 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08e      	sub	sp, #56	; 0x38
 800883c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800883e:	e0ca      	b.n	80089d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	da18      	bge.n	8008878 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008846:	1d3b      	adds	r3, r7, #4
 8008848:	3304      	adds	r3, #4
 800884a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800884c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10a      	bne.n	8008868 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	61fb      	str	r3, [r7, #28]
}
 8008864:	bf00      	nop
 8008866:	e7fe      	b.n	8008866 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800886e:	6850      	ldr	r0, [r2, #4]
 8008870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008872:	6892      	ldr	r2, [r2, #8]
 8008874:	4611      	mov	r1, r2
 8008876:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	f2c0 80ab 	blt.w	80089d6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d004      	beq.n	8008896 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	3304      	adds	r3, #4
 8008890:	4618      	mov	r0, r3
 8008892:	f7fd fedd 	bl	8006650 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008896:	463b      	mov	r3, r7
 8008898:	4618      	mov	r0, r3
 800889a:	f7ff ff6b 	bl	8008774 <prvSampleTimeNow>
 800889e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b09      	cmp	r3, #9
 80088a4:	f200 8096 	bhi.w	80089d4 <prvProcessReceivedCommands+0x19c>
 80088a8:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <prvProcessReceivedCommands+0x78>)
 80088aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ae:	bf00      	nop
 80088b0:	080088d9 	.word	0x080088d9
 80088b4:	080088d9 	.word	0x080088d9
 80088b8:	080088d9 	.word	0x080088d9
 80088bc:	0800894d 	.word	0x0800894d
 80088c0:	08008961 	.word	0x08008961
 80088c4:	080089ab 	.word	0x080089ab
 80088c8:	080088d9 	.word	0x080088d9
 80088cc:	080088d9 	.word	0x080088d9
 80088d0:	0800894d 	.word	0x0800894d
 80088d4:	08008961 	.word	0x08008961
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088de:	f043 0301 	orr.w	r3, r3, #1
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	18d1      	adds	r1, r2, r3
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088f8:	f7ff ff5c 	bl	80087b4 <prvInsertTimerInActiveList>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d069      	beq.n	80089d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008908:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008910:	f003 0304 	and.w	r3, r3, #4
 8008914:	2b00      	cmp	r3, #0
 8008916:	d05e      	beq.n	80089d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	441a      	add	r2, r3
 8008920:	2300      	movs	r3, #0
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	2300      	movs	r3, #0
 8008926:	2100      	movs	r1, #0
 8008928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800892a:	f7ff fe05 	bl	8008538 <xTimerGenericCommand>
 800892e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d14f      	bne.n	80089d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	61bb      	str	r3, [r7, #24]
}
 8008948:	bf00      	nop
 800894a:	e7fe      	b.n	800894a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008952:	f023 0301 	bic.w	r3, r3, #1
 8008956:	b2da      	uxtb	r2, r3
 8008958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800895e:	e03a      	b.n	80089d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008966:	f043 0301 	orr.w	r3, r3, #1
 800896a:	b2da      	uxtb	r2, r3
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008976:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	617b      	str	r3, [r7, #20]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008998:	699a      	ldr	r2, [r3, #24]
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	18d1      	adds	r1, r2, r3
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089a4:	f7ff ff06 	bl	80087b4 <prvInsertTimerInActiveList>
					break;
 80089a8:	e015      	b.n	80089d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80089aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d103      	bne.n	80089c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80089b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ba:	f000 fbe1 	bl	8009180 <vPortFree>
 80089be:	e00a      	b.n	80089d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089c6:	f023 0301 	bic.w	r3, r3, #1
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80089d2:	e000      	b.n	80089d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80089d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089d6:	4b08      	ldr	r3, [pc, #32]	; (80089f8 <prvProcessReceivedCommands+0x1c0>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	1d39      	adds	r1, r7, #4
 80089dc:	2200      	movs	r2, #0
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe f9ee 	bl	8006dc0 <xQueueReceive>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f47f af2a 	bne.w	8008840 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80089ec:	bf00      	nop
 80089ee:	bf00      	nop
 80089f0:	3730      	adds	r7, #48	; 0x30
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	20001314 	.word	0x20001314

080089fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b088      	sub	sp, #32
 8008a00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a02:	e048      	b.n	8008a96 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a04:	4b2d      	ldr	r3, [pc, #180]	; (8008abc <prvSwitchTimerLists+0xc0>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a0e:	4b2b      	ldr	r3, [pc, #172]	; (8008abc <prvSwitchTimerLists+0xc0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fd fe17 	bl	8006650 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d02e      	beq.n	8008a96 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	4413      	add	r3, r2
 8008a40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d90e      	bls.n	8008a68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a56:	4b19      	ldr	r3, [pc, #100]	; (8008abc <prvSwitchTimerLists+0xc0>)
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	4619      	mov	r1, r3
 8008a60:	4610      	mov	r0, r2
 8008a62:	f7fd fdbc 	bl	80065de <vListInsert>
 8008a66:	e016      	b.n	8008a96 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a68:	2300      	movs	r3, #0
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	2100      	movs	r1, #0
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f7ff fd60 	bl	8008538 <xTimerGenericCommand>
 8008a78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10a      	bne.n	8008a96 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	603b      	str	r3, [r7, #0]
}
 8008a92:	bf00      	nop
 8008a94:	e7fe      	b.n	8008a94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a96:	4b09      	ldr	r3, [pc, #36]	; (8008abc <prvSwitchTimerLists+0xc0>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1b1      	bne.n	8008a04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008aa0:	4b06      	ldr	r3, [pc, #24]	; (8008abc <prvSwitchTimerLists+0xc0>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008aa6:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <prvSwitchTimerLists+0xc4>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a04      	ldr	r2, [pc, #16]	; (8008abc <prvSwitchTimerLists+0xc0>)
 8008aac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008aae:	4a04      	ldr	r2, [pc, #16]	; (8008ac0 <prvSwitchTimerLists+0xc4>)
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	6013      	str	r3, [r2, #0]
}
 8008ab4:	bf00      	nop
 8008ab6:	3718      	adds	r7, #24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	2000130c 	.word	0x2000130c
 8008ac0:	20001310 	.word	0x20001310

08008ac4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008aca:	f000 f96b 	bl	8008da4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ace:	4b15      	ldr	r3, [pc, #84]	; (8008b24 <prvCheckForValidListAndQueue+0x60>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d120      	bne.n	8008b18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ad6:	4814      	ldr	r0, [pc, #80]	; (8008b28 <prvCheckForValidListAndQueue+0x64>)
 8008ad8:	f7fd fd30 	bl	800653c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008adc:	4813      	ldr	r0, [pc, #76]	; (8008b2c <prvCheckForValidListAndQueue+0x68>)
 8008ade:	f7fd fd2d 	bl	800653c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008ae2:	4b13      	ldr	r3, [pc, #76]	; (8008b30 <prvCheckForValidListAndQueue+0x6c>)
 8008ae4:	4a10      	ldr	r2, [pc, #64]	; (8008b28 <prvCheckForValidListAndQueue+0x64>)
 8008ae6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ae8:	4b12      	ldr	r3, [pc, #72]	; (8008b34 <prvCheckForValidListAndQueue+0x70>)
 8008aea:	4a10      	ldr	r2, [pc, #64]	; (8008b2c <prvCheckForValidListAndQueue+0x68>)
 8008aec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008aee:	2300      	movs	r3, #0
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	4b11      	ldr	r3, [pc, #68]	; (8008b38 <prvCheckForValidListAndQueue+0x74>)
 8008af4:	4a11      	ldr	r2, [pc, #68]	; (8008b3c <prvCheckForValidListAndQueue+0x78>)
 8008af6:	2110      	movs	r1, #16
 8008af8:	200a      	movs	r0, #10
 8008afa:	f7fd fe3b 	bl	8006774 <xQueueGenericCreateStatic>
 8008afe:	4603      	mov	r3, r0
 8008b00:	4a08      	ldr	r2, [pc, #32]	; (8008b24 <prvCheckForValidListAndQueue+0x60>)
 8008b02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b04:	4b07      	ldr	r3, [pc, #28]	; (8008b24 <prvCheckForValidListAndQueue+0x60>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d005      	beq.n	8008b18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b0c:	4b05      	ldr	r3, [pc, #20]	; (8008b24 <prvCheckForValidListAndQueue+0x60>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	490b      	ldr	r1, [pc, #44]	; (8008b40 <prvCheckForValidListAndQueue+0x7c>)
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fe fc68 	bl	80073e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b18:	f000 f974 	bl	8008e04 <vPortExitCritical>
}
 8008b1c:	bf00      	nop
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20001314 	.word	0x20001314
 8008b28:	200012e4 	.word	0x200012e4
 8008b2c:	200012f8 	.word	0x200012f8
 8008b30:	2000130c 	.word	0x2000130c
 8008b34:	20001310 	.word	0x20001310
 8008b38:	200013c0 	.word	0x200013c0
 8008b3c:	20001320 	.word	0x20001320
 8008b40:	0800a0c0 	.word	0x0800a0c0

08008b44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	3b04      	subs	r3, #4
 8008b54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3b04      	subs	r3, #4
 8008b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f023 0201 	bic.w	r2, r3, #1
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3b04      	subs	r3, #4
 8008b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b74:	4a0c      	ldr	r2, [pc, #48]	; (8008ba8 <pxPortInitialiseStack+0x64>)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	3b14      	subs	r3, #20
 8008b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3b04      	subs	r3, #4
 8008b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f06f 0202 	mvn.w	r2, #2
 8008b92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	3b20      	subs	r3, #32
 8008b98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr
 8008ba8:	08008bad 	.word	0x08008bad

08008bac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008bb6:	4b12      	ldr	r3, [pc, #72]	; (8008c00 <prvTaskExitError+0x54>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bbe:	d00a      	beq.n	8008bd6 <prvTaskExitError+0x2a>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	60fb      	str	r3, [r7, #12]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <prvTaskExitError+0x28>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	60bb      	str	r3, [r7, #8]
}
 8008be8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008bea:	bf00      	nop
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0fc      	beq.n	8008bec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bf2:	bf00      	nop
 8008bf4:	bf00      	nop
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	2000005c 	.word	0x2000005c
	...

08008c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c10:	4b07      	ldr	r3, [pc, #28]	; (8008c30 <pxCurrentTCBConst2>)
 8008c12:	6819      	ldr	r1, [r3, #0]
 8008c14:	6808      	ldr	r0, [r1, #0]
 8008c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1a:	f380 8809 	msr	PSP, r0
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f04f 0000 	mov.w	r0, #0
 8008c26:	f380 8811 	msr	BASEPRI, r0
 8008c2a:	4770      	bx	lr
 8008c2c:	f3af 8000 	nop.w

08008c30 <pxCurrentTCBConst2>:
 8008c30:	20000de4 	.word	0x20000de4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop

08008c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c38:	4808      	ldr	r0, [pc, #32]	; (8008c5c <prvPortStartFirstTask+0x24>)
 8008c3a:	6800      	ldr	r0, [r0, #0]
 8008c3c:	6800      	ldr	r0, [r0, #0]
 8008c3e:	f380 8808 	msr	MSP, r0
 8008c42:	f04f 0000 	mov.w	r0, #0
 8008c46:	f380 8814 	msr	CONTROL, r0
 8008c4a:	b662      	cpsie	i
 8008c4c:	b661      	cpsie	f
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	df00      	svc	0
 8008c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c5a:	bf00      	nop
 8008c5c:	e000ed08 	.word	0xe000ed08

08008c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c66:	4b46      	ldr	r3, [pc, #280]	; (8008d80 <xPortStartScheduler+0x120>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a46      	ldr	r2, [pc, #280]	; (8008d84 <xPortStartScheduler+0x124>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d10a      	bne.n	8008c86 <xPortStartScheduler+0x26>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	613b      	str	r3, [r7, #16]
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c86:	4b3e      	ldr	r3, [pc, #248]	; (8008d80 <xPortStartScheduler+0x120>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a3f      	ldr	r2, [pc, #252]	; (8008d88 <xPortStartScheduler+0x128>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d10a      	bne.n	8008ca6 <xPortStartScheduler+0x46>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	60fb      	str	r3, [r7, #12]
}
 8008ca2:	bf00      	nop
 8008ca4:	e7fe      	b.n	8008ca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ca6:	4b39      	ldr	r3, [pc, #228]	; (8008d8c <xPortStartScheduler+0x12c>)
 8008ca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	22ff      	movs	r2, #255	; 0xff
 8008cb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	4b31      	ldr	r3, [pc, #196]	; (8008d90 <xPortStartScheduler+0x130>)
 8008ccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008cce:	4b31      	ldr	r3, [pc, #196]	; (8008d94 <xPortStartScheduler+0x134>)
 8008cd0:	2207      	movs	r2, #7
 8008cd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cd4:	e009      	b.n	8008cea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008cd6:	4b2f      	ldr	r3, [pc, #188]	; (8008d94 <xPortStartScheduler+0x134>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	4a2d      	ldr	r2, [pc, #180]	; (8008d94 <xPortStartScheduler+0x134>)
 8008cde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cea:	78fb      	ldrb	r3, [r7, #3]
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cf2:	2b80      	cmp	r3, #128	; 0x80
 8008cf4:	d0ef      	beq.n	8008cd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cf6:	4b27      	ldr	r3, [pc, #156]	; (8008d94 <xPortStartScheduler+0x134>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f1c3 0307 	rsb	r3, r3, #7
 8008cfe:	2b04      	cmp	r3, #4
 8008d00:	d00a      	beq.n	8008d18 <xPortStartScheduler+0xb8>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	60bb      	str	r3, [r7, #8]
}
 8008d14:	bf00      	nop
 8008d16:	e7fe      	b.n	8008d16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d18:	4b1e      	ldr	r3, [pc, #120]	; (8008d94 <xPortStartScheduler+0x134>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	021b      	lsls	r3, r3, #8
 8008d1e:	4a1d      	ldr	r2, [pc, #116]	; (8008d94 <xPortStartScheduler+0x134>)
 8008d20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d22:	4b1c      	ldr	r3, [pc, #112]	; (8008d94 <xPortStartScheduler+0x134>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d2a:	4a1a      	ldr	r2, [pc, #104]	; (8008d94 <xPortStartScheduler+0x134>)
 8008d2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	b2da      	uxtb	r2, r3
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d36:	4b18      	ldr	r3, [pc, #96]	; (8008d98 <xPortStartScheduler+0x138>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a17      	ldr	r2, [pc, #92]	; (8008d98 <xPortStartScheduler+0x138>)
 8008d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d42:	4b15      	ldr	r3, [pc, #84]	; (8008d98 <xPortStartScheduler+0x138>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a14      	ldr	r2, [pc, #80]	; (8008d98 <xPortStartScheduler+0x138>)
 8008d48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d4e:	f000 f8dd 	bl	8008f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d52:	4b12      	ldr	r3, [pc, #72]	; (8008d9c <xPortStartScheduler+0x13c>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d58:	f000 f8fc 	bl	8008f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d5c:	4b10      	ldr	r3, [pc, #64]	; (8008da0 <xPortStartScheduler+0x140>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a0f      	ldr	r2, [pc, #60]	; (8008da0 <xPortStartScheduler+0x140>)
 8008d62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d68:	f7ff ff66 	bl	8008c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d6c:	f7fe ff38 	bl	8007be0 <vTaskSwitchContext>
	prvTaskExitError();
 8008d70:	f7ff ff1c 	bl	8008bac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	e000ed00 	.word	0xe000ed00
 8008d84:	410fc271 	.word	0x410fc271
 8008d88:	410fc270 	.word	0x410fc270
 8008d8c:	e000e400 	.word	0xe000e400
 8008d90:	20001410 	.word	0x20001410
 8008d94:	20001414 	.word	0x20001414
 8008d98:	e000ed20 	.word	0xe000ed20
 8008d9c:	2000005c 	.word	0x2000005c
 8008da0:	e000ef34 	.word	0xe000ef34

08008da4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
	__asm volatile
 8008daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	607b      	str	r3, [r7, #4]
}
 8008dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008dbe:	4b0f      	ldr	r3, [pc, #60]	; (8008dfc <vPortEnterCritical+0x58>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	4a0d      	ldr	r2, [pc, #52]	; (8008dfc <vPortEnterCritical+0x58>)
 8008dc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008dc8:	4b0c      	ldr	r3, [pc, #48]	; (8008dfc <vPortEnterCritical+0x58>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d10f      	bne.n	8008df0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008dd0:	4b0b      	ldr	r3, [pc, #44]	; (8008e00 <vPortEnterCritical+0x5c>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00a      	beq.n	8008df0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	603b      	str	r3, [r7, #0]
}
 8008dec:	bf00      	nop
 8008dee:	e7fe      	b.n	8008dee <vPortEnterCritical+0x4a>
	}
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr
 8008dfc:	2000005c 	.word	0x2000005c
 8008e00:	e000ed04 	.word	0xe000ed04

08008e04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e0a:	4b12      	ldr	r3, [pc, #72]	; (8008e54 <vPortExitCritical+0x50>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10a      	bne.n	8008e28 <vPortExitCritical+0x24>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	607b      	str	r3, [r7, #4]
}
 8008e24:	bf00      	nop
 8008e26:	e7fe      	b.n	8008e26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e28:	4b0a      	ldr	r3, [pc, #40]	; (8008e54 <vPortExitCritical+0x50>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	4a09      	ldr	r2, [pc, #36]	; (8008e54 <vPortExitCritical+0x50>)
 8008e30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e32:	4b08      	ldr	r3, [pc, #32]	; (8008e54 <vPortExitCritical+0x50>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d105      	bne.n	8008e46 <vPortExitCritical+0x42>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	f383 8811 	msr	BASEPRI, r3
}
 8008e44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e46:	bf00      	nop
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	2000005c 	.word	0x2000005c
	...

08008e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e60:	f3ef 8009 	mrs	r0, PSP
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	4b15      	ldr	r3, [pc, #84]	; (8008ec0 <pxCurrentTCBConst>)
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	f01e 0f10 	tst.w	lr, #16
 8008e70:	bf08      	it	eq
 8008e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7a:	6010      	str	r0, [r2, #0]
 8008e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e84:	f380 8811 	msr	BASEPRI, r0
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f7fe fea6 	bl	8007be0 <vTaskSwitchContext>
 8008e94:	f04f 0000 	mov.w	r0, #0
 8008e98:	f380 8811 	msr	BASEPRI, r0
 8008e9c:	bc09      	pop	{r0, r3}
 8008e9e:	6819      	ldr	r1, [r3, #0]
 8008ea0:	6808      	ldr	r0, [r1, #0]
 8008ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea6:	f01e 0f10 	tst.w	lr, #16
 8008eaa:	bf08      	it	eq
 8008eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008eb0:	f380 8809 	msr	PSP, r0
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	f3af 8000 	nop.w

08008ec0 <pxCurrentTCBConst>:
 8008ec0:	20000de4 	.word	0x20000de4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop

08008ec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	607b      	str	r3, [r7, #4]
}
 8008ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ee2:	f7fe fdc3 	bl	8007a6c <xTaskIncrementTick>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d003      	beq.n	8008ef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008eec:	4b06      	ldr	r3, [pc, #24]	; (8008f08 <xPortSysTickHandler+0x40>)
 8008eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	f383 8811 	msr	BASEPRI, r3
}
 8008efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	e000ed04 	.word	0xe000ed04

08008f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f10:	4b0b      	ldr	r3, [pc, #44]	; (8008f40 <vPortSetupTimerInterrupt+0x34>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f16:	4b0b      	ldr	r3, [pc, #44]	; (8008f44 <vPortSetupTimerInterrupt+0x38>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f1c:	4b0a      	ldr	r3, [pc, #40]	; (8008f48 <vPortSetupTimerInterrupt+0x3c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a0a      	ldr	r2, [pc, #40]	; (8008f4c <vPortSetupTimerInterrupt+0x40>)
 8008f22:	fba2 2303 	umull	r2, r3, r2, r3
 8008f26:	099b      	lsrs	r3, r3, #6
 8008f28:	4a09      	ldr	r2, [pc, #36]	; (8008f50 <vPortSetupTimerInterrupt+0x44>)
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f2e:	4b04      	ldr	r3, [pc, #16]	; (8008f40 <vPortSetupTimerInterrupt+0x34>)
 8008f30:	2207      	movs	r2, #7
 8008f32:	601a      	str	r2, [r3, #0]
}
 8008f34:	bf00      	nop
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	e000e010 	.word	0xe000e010
 8008f44:	e000e018 	.word	0xe000e018
 8008f48:	20000050 	.word	0x20000050
 8008f4c:	10624dd3 	.word	0x10624dd3
 8008f50:	e000e014 	.word	0xe000e014

08008f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f64 <vPortEnableVFP+0x10>
 8008f58:	6801      	ldr	r1, [r0, #0]
 8008f5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f5e:	6001      	str	r1, [r0, #0]
 8008f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f62:	bf00      	nop
 8008f64:	e000ed88 	.word	0xe000ed88

08008f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f6e:	f3ef 8305 	mrs	r3, IPSR
 8008f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b0f      	cmp	r3, #15
 8008f78:	d914      	bls.n	8008fa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f7a:	4a17      	ldr	r2, [pc, #92]	; (8008fd8 <vPortValidateInterruptPriority+0x70>)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4413      	add	r3, r2
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f84:	4b15      	ldr	r3, [pc, #84]	; (8008fdc <vPortValidateInterruptPriority+0x74>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	7afa      	ldrb	r2, [r7, #11]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d20a      	bcs.n	8008fa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	607b      	str	r3, [r7, #4]
}
 8008fa0:	bf00      	nop
 8008fa2:	e7fe      	b.n	8008fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fa4:	4b0e      	ldr	r3, [pc, #56]	; (8008fe0 <vPortValidateInterruptPriority+0x78>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008fac:	4b0d      	ldr	r3, [pc, #52]	; (8008fe4 <vPortValidateInterruptPriority+0x7c>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d90a      	bls.n	8008fca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb8:	f383 8811 	msr	BASEPRI, r3
 8008fbc:	f3bf 8f6f 	isb	sy
 8008fc0:	f3bf 8f4f 	dsb	sy
 8008fc4:	603b      	str	r3, [r7, #0]
}
 8008fc6:	bf00      	nop
 8008fc8:	e7fe      	b.n	8008fc8 <vPortValidateInterruptPriority+0x60>
	}
 8008fca:	bf00      	nop
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	e000e3f0 	.word	0xe000e3f0
 8008fdc:	20001410 	.word	0x20001410
 8008fe0:	e000ed0c 	.word	0xe000ed0c
 8008fe4:	20001414 	.word	0x20001414

08008fe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08a      	sub	sp, #40	; 0x28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ff4:	f7fe fc7e 	bl	80078f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ff8:	4b5b      	ldr	r3, [pc, #364]	; (8009168 <pvPortMalloc+0x180>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009000:	f000 f920 	bl	8009244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009004:	4b59      	ldr	r3, [pc, #356]	; (800916c <pvPortMalloc+0x184>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	f040 8093 	bne.w	8009138 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d01d      	beq.n	8009054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009018:	2208      	movs	r2, #8
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4413      	add	r3, r2
 800901e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f003 0307 	and.w	r3, r3, #7
 8009026:	2b00      	cmp	r3, #0
 8009028:	d014      	beq.n	8009054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f023 0307 	bic.w	r3, r3, #7
 8009030:	3308      	adds	r3, #8
 8009032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00a      	beq.n	8009054 <pvPortMalloc+0x6c>
	__asm volatile
 800903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	617b      	str	r3, [r7, #20]
}
 8009050:	bf00      	nop
 8009052:	e7fe      	b.n	8009052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d06e      	beq.n	8009138 <pvPortMalloc+0x150>
 800905a:	4b45      	ldr	r3, [pc, #276]	; (8009170 <pvPortMalloc+0x188>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	429a      	cmp	r2, r3
 8009062:	d869      	bhi.n	8009138 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009064:	4b43      	ldr	r3, [pc, #268]	; (8009174 <pvPortMalloc+0x18c>)
 8009066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009068:	4b42      	ldr	r3, [pc, #264]	; (8009174 <pvPortMalloc+0x18c>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800906e:	e004      	b.n	800907a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	429a      	cmp	r2, r3
 8009082:	d903      	bls.n	800908c <pvPortMalloc+0xa4>
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1f1      	bne.n	8009070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800908c:	4b36      	ldr	r3, [pc, #216]	; (8009168 <pvPortMalloc+0x180>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009092:	429a      	cmp	r2, r3
 8009094:	d050      	beq.n	8009138 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009096:	6a3b      	ldr	r3, [r7, #32]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2208      	movs	r2, #8
 800909c:	4413      	add	r3, r2
 800909e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	1ad2      	subs	r2, r2, r3
 80090b0:	2308      	movs	r3, #8
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d91f      	bls.n	80090f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4413      	add	r3, r2
 80090be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	f003 0307 	and.w	r3, r3, #7
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00a      	beq.n	80090e0 <pvPortMalloc+0xf8>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	613b      	str	r3, [r7, #16]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	1ad2      	subs	r2, r2, r3
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090f2:	69b8      	ldr	r0, [r7, #24]
 80090f4:	f000 f908 	bl	8009308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090f8:	4b1d      	ldr	r3, [pc, #116]	; (8009170 <pvPortMalloc+0x188>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	4a1b      	ldr	r2, [pc, #108]	; (8009170 <pvPortMalloc+0x188>)
 8009104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009106:	4b1a      	ldr	r3, [pc, #104]	; (8009170 <pvPortMalloc+0x188>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	4b1b      	ldr	r3, [pc, #108]	; (8009178 <pvPortMalloc+0x190>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	d203      	bcs.n	800911a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009112:	4b17      	ldr	r3, [pc, #92]	; (8009170 <pvPortMalloc+0x188>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a18      	ldr	r2, [pc, #96]	; (8009178 <pvPortMalloc+0x190>)
 8009118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800911a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	4b13      	ldr	r3, [pc, #76]	; (800916c <pvPortMalloc+0x184>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	431a      	orrs	r2, r3
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912a:	2200      	movs	r2, #0
 800912c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800912e:	4b13      	ldr	r3, [pc, #76]	; (800917c <pvPortMalloc+0x194>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	3301      	adds	r3, #1
 8009134:	4a11      	ldr	r2, [pc, #68]	; (800917c <pvPortMalloc+0x194>)
 8009136:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009138:	f7fe fbea 	bl	8007910 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	f003 0307 	and.w	r3, r3, #7
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00a      	beq.n	800915c <pvPortMalloc+0x174>
	__asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	60fb      	str	r3, [r7, #12]
}
 8009158:	bf00      	nop
 800915a:	e7fe      	b.n	800915a <pvPortMalloc+0x172>
	return pvReturn;
 800915c:	69fb      	ldr	r3, [r7, #28]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3728      	adds	r7, #40	; 0x28
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20006df8 	.word	0x20006df8
 800916c:	20006e0c 	.word	0x20006e0c
 8009170:	20006dfc 	.word	0x20006dfc
 8009174:	20006df0 	.word	0x20006df0
 8009178:	20006e00 	.word	0x20006e00
 800917c:	20006e04 	.word	0x20006e04

08009180 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d04d      	beq.n	800922e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009192:	2308      	movs	r3, #8
 8009194:	425b      	negs	r3, r3
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	4413      	add	r3, r2
 800919a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	4b24      	ldr	r3, [pc, #144]	; (8009238 <vPortFree+0xb8>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4013      	ands	r3, r2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10a      	bne.n	80091c4 <vPortFree+0x44>
	__asm volatile
 80091ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	60fb      	str	r3, [r7, #12]
}
 80091c0:	bf00      	nop
 80091c2:	e7fe      	b.n	80091c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00a      	beq.n	80091e2 <vPortFree+0x62>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	60bb      	str	r3, [r7, #8]
}
 80091de:	bf00      	nop
 80091e0:	e7fe      	b.n	80091e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	4b14      	ldr	r3, [pc, #80]	; (8009238 <vPortFree+0xb8>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4013      	ands	r3, r2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01e      	beq.n	800922e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d11a      	bne.n	800922e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	4b0e      	ldr	r3, [pc, #56]	; (8009238 <vPortFree+0xb8>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	43db      	mvns	r3, r3
 8009202:	401a      	ands	r2, r3
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009208:	f7fe fb74 	bl	80078f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	4b0a      	ldr	r3, [pc, #40]	; (800923c <vPortFree+0xbc>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4413      	add	r3, r2
 8009216:	4a09      	ldr	r2, [pc, #36]	; (800923c <vPortFree+0xbc>)
 8009218:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800921a:	6938      	ldr	r0, [r7, #16]
 800921c:	f000 f874 	bl	8009308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009220:	4b07      	ldr	r3, [pc, #28]	; (8009240 <vPortFree+0xc0>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3301      	adds	r3, #1
 8009226:	4a06      	ldr	r2, [pc, #24]	; (8009240 <vPortFree+0xc0>)
 8009228:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800922a:	f7fe fb71 	bl	8007910 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800922e:	bf00      	nop
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20006e0c 	.word	0x20006e0c
 800923c:	20006dfc 	.word	0x20006dfc
 8009240:	20006e08 	.word	0x20006e08

08009244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800924a:	f645 13d8 	movw	r3, #23000	; 0x59d8
 800924e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009250:	4b27      	ldr	r3, [pc, #156]	; (80092f0 <prvHeapInit+0xac>)
 8009252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f003 0307 	and.w	r3, r3, #7
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00c      	beq.n	8009278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3307      	adds	r3, #7
 8009262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 0307 	bic.w	r3, r3, #7
 800926a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	4a1f      	ldr	r2, [pc, #124]	; (80092f0 <prvHeapInit+0xac>)
 8009274:	4413      	add	r3, r2
 8009276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800927c:	4a1d      	ldr	r2, [pc, #116]	; (80092f4 <prvHeapInit+0xb0>)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009282:	4b1c      	ldr	r3, [pc, #112]	; (80092f4 <prvHeapInit+0xb0>)
 8009284:	2200      	movs	r2, #0
 8009286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	4413      	add	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009290:	2208      	movs	r2, #8
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	1a9b      	subs	r3, r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f023 0307 	bic.w	r3, r3, #7
 800929e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	4a15      	ldr	r2, [pc, #84]	; (80092f8 <prvHeapInit+0xb4>)
 80092a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092a6:	4b14      	ldr	r3, [pc, #80]	; (80092f8 <prvHeapInit+0xb4>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2200      	movs	r2, #0
 80092ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092ae:	4b12      	ldr	r3, [pc, #72]	; (80092f8 <prvHeapInit+0xb4>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	1ad2      	subs	r2, r2, r3
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092c4:	4b0c      	ldr	r3, [pc, #48]	; (80092f8 <prvHeapInit+0xb4>)
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	4a0a      	ldr	r2, [pc, #40]	; (80092fc <prvHeapInit+0xb8>)
 80092d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	4a09      	ldr	r2, [pc, #36]	; (8009300 <prvHeapInit+0xbc>)
 80092da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092dc:	4b09      	ldr	r3, [pc, #36]	; (8009304 <prvHeapInit+0xc0>)
 80092de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092e2:	601a      	str	r2, [r3, #0]
}
 80092e4:	bf00      	nop
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	20001418 	.word	0x20001418
 80092f4:	20006df0 	.word	0x20006df0
 80092f8:	20006df8 	.word	0x20006df8
 80092fc:	20006e00 	.word	0x20006e00
 8009300:	20006dfc 	.word	0x20006dfc
 8009304:	20006e0c 	.word	0x20006e0c

08009308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009310:	4b28      	ldr	r3, [pc, #160]	; (80093b4 <prvInsertBlockIntoFreeList+0xac>)
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	e002      	b.n	800931c <prvInsertBlockIntoFreeList+0x14>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	60fb      	str	r3, [r7, #12]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	429a      	cmp	r2, r3
 8009324:	d8f7      	bhi.n	8009316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	4413      	add	r3, r2
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	429a      	cmp	r2, r3
 8009336:	d108      	bne.n	800934a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	441a      	add	r2, r3
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	441a      	add	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	429a      	cmp	r2, r3
 800935c:	d118      	bne.n	8009390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	4b15      	ldr	r3, [pc, #84]	; (80093b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	429a      	cmp	r2, r3
 8009368:	d00d      	beq.n	8009386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	441a      	add	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	601a      	str	r2, [r3, #0]
 8009384:	e008      	b.n	8009398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009386:	4b0c      	ldr	r3, [pc, #48]	; (80093b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	e003      	b.n	8009398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	429a      	cmp	r2, r3
 800939e:	d002      	beq.n	80093a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093a6:	bf00      	nop
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	20006df0 	.word	0x20006df0
 80093b8:	20006df8 	.word	0x20006df8

080093bc <malloc>:
 80093bc:	4b02      	ldr	r3, [pc, #8]	; (80093c8 <malloc+0xc>)
 80093be:	4601      	mov	r1, r0
 80093c0:	6818      	ldr	r0, [r3, #0]
 80093c2:	f000 b823 	b.w	800940c <_malloc_r>
 80093c6:	bf00      	nop
 80093c8:	200000ac 	.word	0x200000ac

080093cc <sbrk_aligned>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	4e0e      	ldr	r6, [pc, #56]	; (8009408 <sbrk_aligned+0x3c>)
 80093d0:	460c      	mov	r4, r1
 80093d2:	6831      	ldr	r1, [r6, #0]
 80093d4:	4605      	mov	r5, r0
 80093d6:	b911      	cbnz	r1, 80093de <sbrk_aligned+0x12>
 80093d8:	f000 f922 	bl	8009620 <_sbrk_r>
 80093dc:	6030      	str	r0, [r6, #0]
 80093de:	4621      	mov	r1, r4
 80093e0:	4628      	mov	r0, r5
 80093e2:	f000 f91d 	bl	8009620 <_sbrk_r>
 80093e6:	1c43      	adds	r3, r0, #1
 80093e8:	d00a      	beq.n	8009400 <sbrk_aligned+0x34>
 80093ea:	1cc4      	adds	r4, r0, #3
 80093ec:	f024 0403 	bic.w	r4, r4, #3
 80093f0:	42a0      	cmp	r0, r4
 80093f2:	d007      	beq.n	8009404 <sbrk_aligned+0x38>
 80093f4:	1a21      	subs	r1, r4, r0
 80093f6:	4628      	mov	r0, r5
 80093f8:	f000 f912 	bl	8009620 <_sbrk_r>
 80093fc:	3001      	adds	r0, #1
 80093fe:	d101      	bne.n	8009404 <sbrk_aligned+0x38>
 8009400:	f04f 34ff 	mov.w	r4, #4294967295
 8009404:	4620      	mov	r0, r4
 8009406:	bd70      	pop	{r4, r5, r6, pc}
 8009408:	20006e14 	.word	0x20006e14

0800940c <_malloc_r>:
 800940c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009410:	1ccd      	adds	r5, r1, #3
 8009412:	f025 0503 	bic.w	r5, r5, #3
 8009416:	3508      	adds	r5, #8
 8009418:	2d0c      	cmp	r5, #12
 800941a:	bf38      	it	cc
 800941c:	250c      	movcc	r5, #12
 800941e:	2d00      	cmp	r5, #0
 8009420:	4607      	mov	r7, r0
 8009422:	db01      	blt.n	8009428 <_malloc_r+0x1c>
 8009424:	42a9      	cmp	r1, r5
 8009426:	d905      	bls.n	8009434 <_malloc_r+0x28>
 8009428:	230c      	movs	r3, #12
 800942a:	603b      	str	r3, [r7, #0]
 800942c:	2600      	movs	r6, #0
 800942e:	4630      	mov	r0, r6
 8009430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009434:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009508 <_malloc_r+0xfc>
 8009438:	f000 f868 	bl	800950c <__malloc_lock>
 800943c:	f8d8 3000 	ldr.w	r3, [r8]
 8009440:	461c      	mov	r4, r3
 8009442:	bb5c      	cbnz	r4, 800949c <_malloc_r+0x90>
 8009444:	4629      	mov	r1, r5
 8009446:	4638      	mov	r0, r7
 8009448:	f7ff ffc0 	bl	80093cc <sbrk_aligned>
 800944c:	1c43      	adds	r3, r0, #1
 800944e:	4604      	mov	r4, r0
 8009450:	d155      	bne.n	80094fe <_malloc_r+0xf2>
 8009452:	f8d8 4000 	ldr.w	r4, [r8]
 8009456:	4626      	mov	r6, r4
 8009458:	2e00      	cmp	r6, #0
 800945a:	d145      	bne.n	80094e8 <_malloc_r+0xdc>
 800945c:	2c00      	cmp	r4, #0
 800945e:	d048      	beq.n	80094f2 <_malloc_r+0xe6>
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	4631      	mov	r1, r6
 8009464:	4638      	mov	r0, r7
 8009466:	eb04 0903 	add.w	r9, r4, r3
 800946a:	f000 f8d9 	bl	8009620 <_sbrk_r>
 800946e:	4581      	cmp	r9, r0
 8009470:	d13f      	bne.n	80094f2 <_malloc_r+0xe6>
 8009472:	6821      	ldr	r1, [r4, #0]
 8009474:	1a6d      	subs	r5, r5, r1
 8009476:	4629      	mov	r1, r5
 8009478:	4638      	mov	r0, r7
 800947a:	f7ff ffa7 	bl	80093cc <sbrk_aligned>
 800947e:	3001      	adds	r0, #1
 8009480:	d037      	beq.n	80094f2 <_malloc_r+0xe6>
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	442b      	add	r3, r5
 8009486:	6023      	str	r3, [r4, #0]
 8009488:	f8d8 3000 	ldr.w	r3, [r8]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d038      	beq.n	8009502 <_malloc_r+0xf6>
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	42a2      	cmp	r2, r4
 8009494:	d12b      	bne.n	80094ee <_malloc_r+0xe2>
 8009496:	2200      	movs	r2, #0
 8009498:	605a      	str	r2, [r3, #4]
 800949a:	e00f      	b.n	80094bc <_malloc_r+0xb0>
 800949c:	6822      	ldr	r2, [r4, #0]
 800949e:	1b52      	subs	r2, r2, r5
 80094a0:	d41f      	bmi.n	80094e2 <_malloc_r+0xd6>
 80094a2:	2a0b      	cmp	r2, #11
 80094a4:	d917      	bls.n	80094d6 <_malloc_r+0xca>
 80094a6:	1961      	adds	r1, r4, r5
 80094a8:	42a3      	cmp	r3, r4
 80094aa:	6025      	str	r5, [r4, #0]
 80094ac:	bf18      	it	ne
 80094ae:	6059      	strne	r1, [r3, #4]
 80094b0:	6863      	ldr	r3, [r4, #4]
 80094b2:	bf08      	it	eq
 80094b4:	f8c8 1000 	streq.w	r1, [r8]
 80094b8:	5162      	str	r2, [r4, r5]
 80094ba:	604b      	str	r3, [r1, #4]
 80094bc:	4638      	mov	r0, r7
 80094be:	f104 060b 	add.w	r6, r4, #11
 80094c2:	f000 f829 	bl	8009518 <__malloc_unlock>
 80094c6:	f026 0607 	bic.w	r6, r6, #7
 80094ca:	1d23      	adds	r3, r4, #4
 80094cc:	1af2      	subs	r2, r6, r3
 80094ce:	d0ae      	beq.n	800942e <_malloc_r+0x22>
 80094d0:	1b9b      	subs	r3, r3, r6
 80094d2:	50a3      	str	r3, [r4, r2]
 80094d4:	e7ab      	b.n	800942e <_malloc_r+0x22>
 80094d6:	42a3      	cmp	r3, r4
 80094d8:	6862      	ldr	r2, [r4, #4]
 80094da:	d1dd      	bne.n	8009498 <_malloc_r+0x8c>
 80094dc:	f8c8 2000 	str.w	r2, [r8]
 80094e0:	e7ec      	b.n	80094bc <_malloc_r+0xb0>
 80094e2:	4623      	mov	r3, r4
 80094e4:	6864      	ldr	r4, [r4, #4]
 80094e6:	e7ac      	b.n	8009442 <_malloc_r+0x36>
 80094e8:	4634      	mov	r4, r6
 80094ea:	6876      	ldr	r6, [r6, #4]
 80094ec:	e7b4      	b.n	8009458 <_malloc_r+0x4c>
 80094ee:	4613      	mov	r3, r2
 80094f0:	e7cc      	b.n	800948c <_malloc_r+0x80>
 80094f2:	230c      	movs	r3, #12
 80094f4:	603b      	str	r3, [r7, #0]
 80094f6:	4638      	mov	r0, r7
 80094f8:	f000 f80e 	bl	8009518 <__malloc_unlock>
 80094fc:	e797      	b.n	800942e <_malloc_r+0x22>
 80094fe:	6025      	str	r5, [r4, #0]
 8009500:	e7dc      	b.n	80094bc <_malloc_r+0xb0>
 8009502:	605b      	str	r3, [r3, #4]
 8009504:	deff      	udf	#255	; 0xff
 8009506:	bf00      	nop
 8009508:	20006e10 	.word	0x20006e10

0800950c <__malloc_lock>:
 800950c:	4801      	ldr	r0, [pc, #4]	; (8009514 <__malloc_lock+0x8>)
 800950e:	f000 b8c1 	b.w	8009694 <__retarget_lock_acquire_recursive>
 8009512:	bf00      	nop
 8009514:	20006f54 	.word	0x20006f54

08009518 <__malloc_unlock>:
 8009518:	4801      	ldr	r0, [pc, #4]	; (8009520 <__malloc_unlock+0x8>)
 800951a:	f000 b8bc 	b.w	8009696 <__retarget_lock_release_recursive>
 800951e:	bf00      	nop
 8009520:	20006f54 	.word	0x20006f54

08009524 <siprintf>:
 8009524:	b40e      	push	{r1, r2, r3}
 8009526:	b500      	push	{lr}
 8009528:	b09c      	sub	sp, #112	; 0x70
 800952a:	ab1d      	add	r3, sp, #116	; 0x74
 800952c:	9002      	str	r0, [sp, #8]
 800952e:	9006      	str	r0, [sp, #24]
 8009530:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009534:	4809      	ldr	r0, [pc, #36]	; (800955c <siprintf+0x38>)
 8009536:	9107      	str	r1, [sp, #28]
 8009538:	9104      	str	r1, [sp, #16]
 800953a:	4909      	ldr	r1, [pc, #36]	; (8009560 <siprintf+0x3c>)
 800953c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009540:	9105      	str	r1, [sp, #20]
 8009542:	6800      	ldr	r0, [r0, #0]
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	a902      	add	r1, sp, #8
 8009548:	f000 f95a 	bl	8009800 <_svfiprintf_r>
 800954c:	9b02      	ldr	r3, [sp, #8]
 800954e:	2200      	movs	r2, #0
 8009550:	701a      	strb	r2, [r3, #0]
 8009552:	b01c      	add	sp, #112	; 0x70
 8009554:	f85d eb04 	ldr.w	lr, [sp], #4
 8009558:	b003      	add	sp, #12
 800955a:	4770      	bx	lr
 800955c:	200000ac 	.word	0x200000ac
 8009560:	ffff0208 	.word	0xffff0208

08009564 <memset>:
 8009564:	4402      	add	r2, r0
 8009566:	4603      	mov	r3, r0
 8009568:	4293      	cmp	r3, r2
 800956a:	d100      	bne.n	800956e <memset+0xa>
 800956c:	4770      	bx	lr
 800956e:	f803 1b01 	strb.w	r1, [r3], #1
 8009572:	e7f9      	b.n	8009568 <memset+0x4>

08009574 <_reclaim_reent>:
 8009574:	4b29      	ldr	r3, [pc, #164]	; (800961c <_reclaim_reent+0xa8>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4283      	cmp	r3, r0
 800957a:	b570      	push	{r4, r5, r6, lr}
 800957c:	4604      	mov	r4, r0
 800957e:	d04b      	beq.n	8009618 <_reclaim_reent+0xa4>
 8009580:	69c3      	ldr	r3, [r0, #28]
 8009582:	b143      	cbz	r3, 8009596 <_reclaim_reent+0x22>
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d144      	bne.n	8009614 <_reclaim_reent+0xa0>
 800958a:	69e3      	ldr	r3, [r4, #28]
 800958c:	6819      	ldr	r1, [r3, #0]
 800958e:	b111      	cbz	r1, 8009596 <_reclaim_reent+0x22>
 8009590:	4620      	mov	r0, r4
 8009592:	f000 f88f 	bl	80096b4 <_free_r>
 8009596:	6961      	ldr	r1, [r4, #20]
 8009598:	b111      	cbz	r1, 80095a0 <_reclaim_reent+0x2c>
 800959a:	4620      	mov	r0, r4
 800959c:	f000 f88a 	bl	80096b4 <_free_r>
 80095a0:	69e1      	ldr	r1, [r4, #28]
 80095a2:	b111      	cbz	r1, 80095aa <_reclaim_reent+0x36>
 80095a4:	4620      	mov	r0, r4
 80095a6:	f000 f885 	bl	80096b4 <_free_r>
 80095aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80095ac:	b111      	cbz	r1, 80095b4 <_reclaim_reent+0x40>
 80095ae:	4620      	mov	r0, r4
 80095b0:	f000 f880 	bl	80096b4 <_free_r>
 80095b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095b6:	b111      	cbz	r1, 80095be <_reclaim_reent+0x4a>
 80095b8:	4620      	mov	r0, r4
 80095ba:	f000 f87b 	bl	80096b4 <_free_r>
 80095be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80095c0:	b111      	cbz	r1, 80095c8 <_reclaim_reent+0x54>
 80095c2:	4620      	mov	r0, r4
 80095c4:	f000 f876 	bl	80096b4 <_free_r>
 80095c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80095ca:	b111      	cbz	r1, 80095d2 <_reclaim_reent+0x5e>
 80095cc:	4620      	mov	r0, r4
 80095ce:	f000 f871 	bl	80096b4 <_free_r>
 80095d2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80095d4:	b111      	cbz	r1, 80095dc <_reclaim_reent+0x68>
 80095d6:	4620      	mov	r0, r4
 80095d8:	f000 f86c 	bl	80096b4 <_free_r>
 80095dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80095de:	b111      	cbz	r1, 80095e6 <_reclaim_reent+0x72>
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 f867 	bl	80096b4 <_free_r>
 80095e6:	6a23      	ldr	r3, [r4, #32]
 80095e8:	b1b3      	cbz	r3, 8009618 <_reclaim_reent+0xa4>
 80095ea:	4620      	mov	r0, r4
 80095ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80095f0:	4718      	bx	r3
 80095f2:	5949      	ldr	r1, [r1, r5]
 80095f4:	b941      	cbnz	r1, 8009608 <_reclaim_reent+0x94>
 80095f6:	3504      	adds	r5, #4
 80095f8:	69e3      	ldr	r3, [r4, #28]
 80095fa:	2d80      	cmp	r5, #128	; 0x80
 80095fc:	68d9      	ldr	r1, [r3, #12]
 80095fe:	d1f8      	bne.n	80095f2 <_reclaim_reent+0x7e>
 8009600:	4620      	mov	r0, r4
 8009602:	f000 f857 	bl	80096b4 <_free_r>
 8009606:	e7c0      	b.n	800958a <_reclaim_reent+0x16>
 8009608:	680e      	ldr	r6, [r1, #0]
 800960a:	4620      	mov	r0, r4
 800960c:	f000 f852 	bl	80096b4 <_free_r>
 8009610:	4631      	mov	r1, r6
 8009612:	e7ef      	b.n	80095f4 <_reclaim_reent+0x80>
 8009614:	2500      	movs	r5, #0
 8009616:	e7ef      	b.n	80095f8 <_reclaim_reent+0x84>
 8009618:	bd70      	pop	{r4, r5, r6, pc}
 800961a:	bf00      	nop
 800961c:	200000ac 	.word	0x200000ac

08009620 <_sbrk_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	4d06      	ldr	r5, [pc, #24]	; (800963c <_sbrk_r+0x1c>)
 8009624:	2300      	movs	r3, #0
 8009626:	4604      	mov	r4, r0
 8009628:	4608      	mov	r0, r1
 800962a:	602b      	str	r3, [r5, #0]
 800962c:	f7f8 fe18 	bl	8002260 <_sbrk>
 8009630:	1c43      	adds	r3, r0, #1
 8009632:	d102      	bne.n	800963a <_sbrk_r+0x1a>
 8009634:	682b      	ldr	r3, [r5, #0]
 8009636:	b103      	cbz	r3, 800963a <_sbrk_r+0x1a>
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	bd38      	pop	{r3, r4, r5, pc}
 800963c:	20006f50 	.word	0x20006f50

08009640 <__errno>:
 8009640:	4b01      	ldr	r3, [pc, #4]	; (8009648 <__errno+0x8>)
 8009642:	6818      	ldr	r0, [r3, #0]
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	200000ac 	.word	0x200000ac

0800964c <__libc_init_array>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	4d0d      	ldr	r5, [pc, #52]	; (8009684 <__libc_init_array+0x38>)
 8009650:	4c0d      	ldr	r4, [pc, #52]	; (8009688 <__libc_init_array+0x3c>)
 8009652:	1b64      	subs	r4, r4, r5
 8009654:	10a4      	asrs	r4, r4, #2
 8009656:	2600      	movs	r6, #0
 8009658:	42a6      	cmp	r6, r4
 800965a:	d109      	bne.n	8009670 <__libc_init_array+0x24>
 800965c:	4d0b      	ldr	r5, [pc, #44]	; (800968c <__libc_init_array+0x40>)
 800965e:	4c0c      	ldr	r4, [pc, #48]	; (8009690 <__libc_init_array+0x44>)
 8009660:	f000 fbae 	bl	8009dc0 <_init>
 8009664:	1b64      	subs	r4, r4, r5
 8009666:	10a4      	asrs	r4, r4, #2
 8009668:	2600      	movs	r6, #0
 800966a:	42a6      	cmp	r6, r4
 800966c:	d105      	bne.n	800967a <__libc_init_array+0x2e>
 800966e:	bd70      	pop	{r4, r5, r6, pc}
 8009670:	f855 3b04 	ldr.w	r3, [r5], #4
 8009674:	4798      	blx	r3
 8009676:	3601      	adds	r6, #1
 8009678:	e7ee      	b.n	8009658 <__libc_init_array+0xc>
 800967a:	f855 3b04 	ldr.w	r3, [r5], #4
 800967e:	4798      	blx	r3
 8009680:	3601      	adds	r6, #1
 8009682:	e7f2      	b.n	800966a <__libc_init_array+0x1e>
 8009684:	0800a258 	.word	0x0800a258
 8009688:	0800a258 	.word	0x0800a258
 800968c:	0800a258 	.word	0x0800a258
 8009690:	0800a25c 	.word	0x0800a25c

08009694 <__retarget_lock_acquire_recursive>:
 8009694:	4770      	bx	lr

08009696 <__retarget_lock_release_recursive>:
 8009696:	4770      	bx	lr

08009698 <memcpy>:
 8009698:	440a      	add	r2, r1
 800969a:	4291      	cmp	r1, r2
 800969c:	f100 33ff 	add.w	r3, r0, #4294967295
 80096a0:	d100      	bne.n	80096a4 <memcpy+0xc>
 80096a2:	4770      	bx	lr
 80096a4:	b510      	push	{r4, lr}
 80096a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ae:	4291      	cmp	r1, r2
 80096b0:	d1f9      	bne.n	80096a6 <memcpy+0xe>
 80096b2:	bd10      	pop	{r4, pc}

080096b4 <_free_r>:
 80096b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096b6:	2900      	cmp	r1, #0
 80096b8:	d044      	beq.n	8009744 <_free_r+0x90>
 80096ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096be:	9001      	str	r0, [sp, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f1a1 0404 	sub.w	r4, r1, #4
 80096c6:	bfb8      	it	lt
 80096c8:	18e4      	addlt	r4, r4, r3
 80096ca:	f7ff ff1f 	bl	800950c <__malloc_lock>
 80096ce:	4a1e      	ldr	r2, [pc, #120]	; (8009748 <_free_r+0x94>)
 80096d0:	9801      	ldr	r0, [sp, #4]
 80096d2:	6813      	ldr	r3, [r2, #0]
 80096d4:	b933      	cbnz	r3, 80096e4 <_free_r+0x30>
 80096d6:	6063      	str	r3, [r4, #4]
 80096d8:	6014      	str	r4, [r2, #0]
 80096da:	b003      	add	sp, #12
 80096dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096e0:	f7ff bf1a 	b.w	8009518 <__malloc_unlock>
 80096e4:	42a3      	cmp	r3, r4
 80096e6:	d908      	bls.n	80096fa <_free_r+0x46>
 80096e8:	6825      	ldr	r5, [r4, #0]
 80096ea:	1961      	adds	r1, r4, r5
 80096ec:	428b      	cmp	r3, r1
 80096ee:	bf01      	itttt	eq
 80096f0:	6819      	ldreq	r1, [r3, #0]
 80096f2:	685b      	ldreq	r3, [r3, #4]
 80096f4:	1949      	addeq	r1, r1, r5
 80096f6:	6021      	streq	r1, [r4, #0]
 80096f8:	e7ed      	b.n	80096d6 <_free_r+0x22>
 80096fa:	461a      	mov	r2, r3
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	b10b      	cbz	r3, 8009704 <_free_r+0x50>
 8009700:	42a3      	cmp	r3, r4
 8009702:	d9fa      	bls.n	80096fa <_free_r+0x46>
 8009704:	6811      	ldr	r1, [r2, #0]
 8009706:	1855      	adds	r5, r2, r1
 8009708:	42a5      	cmp	r5, r4
 800970a:	d10b      	bne.n	8009724 <_free_r+0x70>
 800970c:	6824      	ldr	r4, [r4, #0]
 800970e:	4421      	add	r1, r4
 8009710:	1854      	adds	r4, r2, r1
 8009712:	42a3      	cmp	r3, r4
 8009714:	6011      	str	r1, [r2, #0]
 8009716:	d1e0      	bne.n	80096da <_free_r+0x26>
 8009718:	681c      	ldr	r4, [r3, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	6053      	str	r3, [r2, #4]
 800971e:	440c      	add	r4, r1
 8009720:	6014      	str	r4, [r2, #0]
 8009722:	e7da      	b.n	80096da <_free_r+0x26>
 8009724:	d902      	bls.n	800972c <_free_r+0x78>
 8009726:	230c      	movs	r3, #12
 8009728:	6003      	str	r3, [r0, #0]
 800972a:	e7d6      	b.n	80096da <_free_r+0x26>
 800972c:	6825      	ldr	r5, [r4, #0]
 800972e:	1961      	adds	r1, r4, r5
 8009730:	428b      	cmp	r3, r1
 8009732:	bf04      	itt	eq
 8009734:	6819      	ldreq	r1, [r3, #0]
 8009736:	685b      	ldreq	r3, [r3, #4]
 8009738:	6063      	str	r3, [r4, #4]
 800973a:	bf04      	itt	eq
 800973c:	1949      	addeq	r1, r1, r5
 800973e:	6021      	streq	r1, [r4, #0]
 8009740:	6054      	str	r4, [r2, #4]
 8009742:	e7ca      	b.n	80096da <_free_r+0x26>
 8009744:	b003      	add	sp, #12
 8009746:	bd30      	pop	{r4, r5, pc}
 8009748:	20006e10 	.word	0x20006e10

0800974c <__ssputs_r>:
 800974c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009750:	688e      	ldr	r6, [r1, #8]
 8009752:	461f      	mov	r7, r3
 8009754:	42be      	cmp	r6, r7
 8009756:	680b      	ldr	r3, [r1, #0]
 8009758:	4682      	mov	sl, r0
 800975a:	460c      	mov	r4, r1
 800975c:	4690      	mov	r8, r2
 800975e:	d82c      	bhi.n	80097ba <__ssputs_r+0x6e>
 8009760:	898a      	ldrh	r2, [r1, #12]
 8009762:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009766:	d026      	beq.n	80097b6 <__ssputs_r+0x6a>
 8009768:	6965      	ldr	r5, [r4, #20]
 800976a:	6909      	ldr	r1, [r1, #16]
 800976c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009770:	eba3 0901 	sub.w	r9, r3, r1
 8009774:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009778:	1c7b      	adds	r3, r7, #1
 800977a:	444b      	add	r3, r9
 800977c:	106d      	asrs	r5, r5, #1
 800977e:	429d      	cmp	r5, r3
 8009780:	bf38      	it	cc
 8009782:	461d      	movcc	r5, r3
 8009784:	0553      	lsls	r3, r2, #21
 8009786:	d527      	bpl.n	80097d8 <__ssputs_r+0x8c>
 8009788:	4629      	mov	r1, r5
 800978a:	f7ff fe3f 	bl	800940c <_malloc_r>
 800978e:	4606      	mov	r6, r0
 8009790:	b360      	cbz	r0, 80097ec <__ssputs_r+0xa0>
 8009792:	6921      	ldr	r1, [r4, #16]
 8009794:	464a      	mov	r2, r9
 8009796:	f7ff ff7f 	bl	8009698 <memcpy>
 800979a:	89a3      	ldrh	r3, [r4, #12]
 800979c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a4:	81a3      	strh	r3, [r4, #12]
 80097a6:	6126      	str	r6, [r4, #16]
 80097a8:	6165      	str	r5, [r4, #20]
 80097aa:	444e      	add	r6, r9
 80097ac:	eba5 0509 	sub.w	r5, r5, r9
 80097b0:	6026      	str	r6, [r4, #0]
 80097b2:	60a5      	str	r5, [r4, #8]
 80097b4:	463e      	mov	r6, r7
 80097b6:	42be      	cmp	r6, r7
 80097b8:	d900      	bls.n	80097bc <__ssputs_r+0x70>
 80097ba:	463e      	mov	r6, r7
 80097bc:	6820      	ldr	r0, [r4, #0]
 80097be:	4632      	mov	r2, r6
 80097c0:	4641      	mov	r1, r8
 80097c2:	f000 faab 	bl	8009d1c <memmove>
 80097c6:	68a3      	ldr	r3, [r4, #8]
 80097c8:	1b9b      	subs	r3, r3, r6
 80097ca:	60a3      	str	r3, [r4, #8]
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	4433      	add	r3, r6
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	2000      	movs	r0, #0
 80097d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d8:	462a      	mov	r2, r5
 80097da:	f000 fab9 	bl	8009d50 <_realloc_r>
 80097de:	4606      	mov	r6, r0
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d1e0      	bne.n	80097a6 <__ssputs_r+0x5a>
 80097e4:	6921      	ldr	r1, [r4, #16]
 80097e6:	4650      	mov	r0, sl
 80097e8:	f7ff ff64 	bl	80096b4 <_free_r>
 80097ec:	230c      	movs	r3, #12
 80097ee:	f8ca 3000 	str.w	r3, [sl]
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097f8:	81a3      	strh	r3, [r4, #12]
 80097fa:	f04f 30ff 	mov.w	r0, #4294967295
 80097fe:	e7e9      	b.n	80097d4 <__ssputs_r+0x88>

08009800 <_svfiprintf_r>:
 8009800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	4698      	mov	r8, r3
 8009806:	898b      	ldrh	r3, [r1, #12]
 8009808:	061b      	lsls	r3, r3, #24
 800980a:	b09d      	sub	sp, #116	; 0x74
 800980c:	4607      	mov	r7, r0
 800980e:	460d      	mov	r5, r1
 8009810:	4614      	mov	r4, r2
 8009812:	d50e      	bpl.n	8009832 <_svfiprintf_r+0x32>
 8009814:	690b      	ldr	r3, [r1, #16]
 8009816:	b963      	cbnz	r3, 8009832 <_svfiprintf_r+0x32>
 8009818:	2140      	movs	r1, #64	; 0x40
 800981a:	f7ff fdf7 	bl	800940c <_malloc_r>
 800981e:	6028      	str	r0, [r5, #0]
 8009820:	6128      	str	r0, [r5, #16]
 8009822:	b920      	cbnz	r0, 800982e <_svfiprintf_r+0x2e>
 8009824:	230c      	movs	r3, #12
 8009826:	603b      	str	r3, [r7, #0]
 8009828:	f04f 30ff 	mov.w	r0, #4294967295
 800982c:	e0d0      	b.n	80099d0 <_svfiprintf_r+0x1d0>
 800982e:	2340      	movs	r3, #64	; 0x40
 8009830:	616b      	str	r3, [r5, #20]
 8009832:	2300      	movs	r3, #0
 8009834:	9309      	str	r3, [sp, #36]	; 0x24
 8009836:	2320      	movs	r3, #32
 8009838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800983c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009840:	2330      	movs	r3, #48	; 0x30
 8009842:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80099e8 <_svfiprintf_r+0x1e8>
 8009846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800984a:	f04f 0901 	mov.w	r9, #1
 800984e:	4623      	mov	r3, r4
 8009850:	469a      	mov	sl, r3
 8009852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009856:	b10a      	cbz	r2, 800985c <_svfiprintf_r+0x5c>
 8009858:	2a25      	cmp	r2, #37	; 0x25
 800985a:	d1f9      	bne.n	8009850 <_svfiprintf_r+0x50>
 800985c:	ebba 0b04 	subs.w	fp, sl, r4
 8009860:	d00b      	beq.n	800987a <_svfiprintf_r+0x7a>
 8009862:	465b      	mov	r3, fp
 8009864:	4622      	mov	r2, r4
 8009866:	4629      	mov	r1, r5
 8009868:	4638      	mov	r0, r7
 800986a:	f7ff ff6f 	bl	800974c <__ssputs_r>
 800986e:	3001      	adds	r0, #1
 8009870:	f000 80a9 	beq.w	80099c6 <_svfiprintf_r+0x1c6>
 8009874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009876:	445a      	add	r2, fp
 8009878:	9209      	str	r2, [sp, #36]	; 0x24
 800987a:	f89a 3000 	ldrb.w	r3, [sl]
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 80a1 	beq.w	80099c6 <_svfiprintf_r+0x1c6>
 8009884:	2300      	movs	r3, #0
 8009886:	f04f 32ff 	mov.w	r2, #4294967295
 800988a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800988e:	f10a 0a01 	add.w	sl, sl, #1
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	9307      	str	r3, [sp, #28]
 8009896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800989a:	931a      	str	r3, [sp, #104]	; 0x68
 800989c:	4654      	mov	r4, sl
 800989e:	2205      	movs	r2, #5
 80098a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a4:	4850      	ldr	r0, [pc, #320]	; (80099e8 <_svfiprintf_r+0x1e8>)
 80098a6:	f7f6 fc9b 	bl	80001e0 <memchr>
 80098aa:	9a04      	ldr	r2, [sp, #16]
 80098ac:	b9d8      	cbnz	r0, 80098e6 <_svfiprintf_r+0xe6>
 80098ae:	06d0      	lsls	r0, r2, #27
 80098b0:	bf44      	itt	mi
 80098b2:	2320      	movmi	r3, #32
 80098b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098b8:	0711      	lsls	r1, r2, #28
 80098ba:	bf44      	itt	mi
 80098bc:	232b      	movmi	r3, #43	; 0x2b
 80098be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c2:	f89a 3000 	ldrb.w	r3, [sl]
 80098c6:	2b2a      	cmp	r3, #42	; 0x2a
 80098c8:	d015      	beq.n	80098f6 <_svfiprintf_r+0xf6>
 80098ca:	9a07      	ldr	r2, [sp, #28]
 80098cc:	4654      	mov	r4, sl
 80098ce:	2000      	movs	r0, #0
 80098d0:	f04f 0c0a 	mov.w	ip, #10
 80098d4:	4621      	mov	r1, r4
 80098d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098da:	3b30      	subs	r3, #48	; 0x30
 80098dc:	2b09      	cmp	r3, #9
 80098de:	d94d      	bls.n	800997c <_svfiprintf_r+0x17c>
 80098e0:	b1b0      	cbz	r0, 8009910 <_svfiprintf_r+0x110>
 80098e2:	9207      	str	r2, [sp, #28]
 80098e4:	e014      	b.n	8009910 <_svfiprintf_r+0x110>
 80098e6:	eba0 0308 	sub.w	r3, r0, r8
 80098ea:	fa09 f303 	lsl.w	r3, r9, r3
 80098ee:	4313      	orrs	r3, r2
 80098f0:	9304      	str	r3, [sp, #16]
 80098f2:	46a2      	mov	sl, r4
 80098f4:	e7d2      	b.n	800989c <_svfiprintf_r+0x9c>
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	1d19      	adds	r1, r3, #4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	9103      	str	r1, [sp, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfbb      	ittet	lt
 8009902:	425b      	neglt	r3, r3
 8009904:	f042 0202 	orrlt.w	r2, r2, #2
 8009908:	9307      	strge	r3, [sp, #28]
 800990a:	9307      	strlt	r3, [sp, #28]
 800990c:	bfb8      	it	lt
 800990e:	9204      	strlt	r2, [sp, #16]
 8009910:	7823      	ldrb	r3, [r4, #0]
 8009912:	2b2e      	cmp	r3, #46	; 0x2e
 8009914:	d10c      	bne.n	8009930 <_svfiprintf_r+0x130>
 8009916:	7863      	ldrb	r3, [r4, #1]
 8009918:	2b2a      	cmp	r3, #42	; 0x2a
 800991a:	d134      	bne.n	8009986 <_svfiprintf_r+0x186>
 800991c:	9b03      	ldr	r3, [sp, #12]
 800991e:	1d1a      	adds	r2, r3, #4
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	9203      	str	r2, [sp, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	bfb8      	it	lt
 8009928:	f04f 33ff 	movlt.w	r3, #4294967295
 800992c:	3402      	adds	r4, #2
 800992e:	9305      	str	r3, [sp, #20]
 8009930:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80099f8 <_svfiprintf_r+0x1f8>
 8009934:	7821      	ldrb	r1, [r4, #0]
 8009936:	2203      	movs	r2, #3
 8009938:	4650      	mov	r0, sl
 800993a:	f7f6 fc51 	bl	80001e0 <memchr>
 800993e:	b138      	cbz	r0, 8009950 <_svfiprintf_r+0x150>
 8009940:	9b04      	ldr	r3, [sp, #16]
 8009942:	eba0 000a 	sub.w	r0, r0, sl
 8009946:	2240      	movs	r2, #64	; 0x40
 8009948:	4082      	lsls	r2, r0
 800994a:	4313      	orrs	r3, r2
 800994c:	3401      	adds	r4, #1
 800994e:	9304      	str	r3, [sp, #16]
 8009950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009954:	4825      	ldr	r0, [pc, #148]	; (80099ec <_svfiprintf_r+0x1ec>)
 8009956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800995a:	2206      	movs	r2, #6
 800995c:	f7f6 fc40 	bl	80001e0 <memchr>
 8009960:	2800      	cmp	r0, #0
 8009962:	d038      	beq.n	80099d6 <_svfiprintf_r+0x1d6>
 8009964:	4b22      	ldr	r3, [pc, #136]	; (80099f0 <_svfiprintf_r+0x1f0>)
 8009966:	bb1b      	cbnz	r3, 80099b0 <_svfiprintf_r+0x1b0>
 8009968:	9b03      	ldr	r3, [sp, #12]
 800996a:	3307      	adds	r3, #7
 800996c:	f023 0307 	bic.w	r3, r3, #7
 8009970:	3308      	adds	r3, #8
 8009972:	9303      	str	r3, [sp, #12]
 8009974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009976:	4433      	add	r3, r6
 8009978:	9309      	str	r3, [sp, #36]	; 0x24
 800997a:	e768      	b.n	800984e <_svfiprintf_r+0x4e>
 800997c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009980:	460c      	mov	r4, r1
 8009982:	2001      	movs	r0, #1
 8009984:	e7a6      	b.n	80098d4 <_svfiprintf_r+0xd4>
 8009986:	2300      	movs	r3, #0
 8009988:	3401      	adds	r4, #1
 800998a:	9305      	str	r3, [sp, #20]
 800998c:	4619      	mov	r1, r3
 800998e:	f04f 0c0a 	mov.w	ip, #10
 8009992:	4620      	mov	r0, r4
 8009994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009998:	3a30      	subs	r2, #48	; 0x30
 800999a:	2a09      	cmp	r2, #9
 800999c:	d903      	bls.n	80099a6 <_svfiprintf_r+0x1a6>
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d0c6      	beq.n	8009930 <_svfiprintf_r+0x130>
 80099a2:	9105      	str	r1, [sp, #20]
 80099a4:	e7c4      	b.n	8009930 <_svfiprintf_r+0x130>
 80099a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80099aa:	4604      	mov	r4, r0
 80099ac:	2301      	movs	r3, #1
 80099ae:	e7f0      	b.n	8009992 <_svfiprintf_r+0x192>
 80099b0:	ab03      	add	r3, sp, #12
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	462a      	mov	r2, r5
 80099b6:	4b0f      	ldr	r3, [pc, #60]	; (80099f4 <_svfiprintf_r+0x1f4>)
 80099b8:	a904      	add	r1, sp, #16
 80099ba:	4638      	mov	r0, r7
 80099bc:	f3af 8000 	nop.w
 80099c0:	1c42      	adds	r2, r0, #1
 80099c2:	4606      	mov	r6, r0
 80099c4:	d1d6      	bne.n	8009974 <_svfiprintf_r+0x174>
 80099c6:	89ab      	ldrh	r3, [r5, #12]
 80099c8:	065b      	lsls	r3, r3, #25
 80099ca:	f53f af2d 	bmi.w	8009828 <_svfiprintf_r+0x28>
 80099ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099d0:	b01d      	add	sp, #116	; 0x74
 80099d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d6:	ab03      	add	r3, sp, #12
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	462a      	mov	r2, r5
 80099dc:	4b05      	ldr	r3, [pc, #20]	; (80099f4 <_svfiprintf_r+0x1f4>)
 80099de:	a904      	add	r1, sp, #16
 80099e0:	4638      	mov	r0, r7
 80099e2:	f000 f879 	bl	8009ad8 <_printf_i>
 80099e6:	e7eb      	b.n	80099c0 <_svfiprintf_r+0x1c0>
 80099e8:	0800a21c 	.word	0x0800a21c
 80099ec:	0800a226 	.word	0x0800a226
 80099f0:	00000000 	.word	0x00000000
 80099f4:	0800974d 	.word	0x0800974d
 80099f8:	0800a222 	.word	0x0800a222

080099fc <_printf_common>:
 80099fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a00:	4616      	mov	r6, r2
 8009a02:	4699      	mov	r9, r3
 8009a04:	688a      	ldr	r2, [r1, #8]
 8009a06:	690b      	ldr	r3, [r1, #16]
 8009a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	bfb8      	it	lt
 8009a10:	4613      	movlt	r3, r2
 8009a12:	6033      	str	r3, [r6, #0]
 8009a14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a18:	4607      	mov	r7, r0
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	b10a      	cbz	r2, 8009a22 <_printf_common+0x26>
 8009a1e:	3301      	adds	r3, #1
 8009a20:	6033      	str	r3, [r6, #0]
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	0699      	lsls	r1, r3, #26
 8009a26:	bf42      	ittt	mi
 8009a28:	6833      	ldrmi	r3, [r6, #0]
 8009a2a:	3302      	addmi	r3, #2
 8009a2c:	6033      	strmi	r3, [r6, #0]
 8009a2e:	6825      	ldr	r5, [r4, #0]
 8009a30:	f015 0506 	ands.w	r5, r5, #6
 8009a34:	d106      	bne.n	8009a44 <_printf_common+0x48>
 8009a36:	f104 0a19 	add.w	sl, r4, #25
 8009a3a:	68e3      	ldr	r3, [r4, #12]
 8009a3c:	6832      	ldr	r2, [r6, #0]
 8009a3e:	1a9b      	subs	r3, r3, r2
 8009a40:	42ab      	cmp	r3, r5
 8009a42:	dc26      	bgt.n	8009a92 <_printf_common+0x96>
 8009a44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a48:	1e13      	subs	r3, r2, #0
 8009a4a:	6822      	ldr	r2, [r4, #0]
 8009a4c:	bf18      	it	ne
 8009a4e:	2301      	movne	r3, #1
 8009a50:	0692      	lsls	r2, r2, #26
 8009a52:	d42b      	bmi.n	8009aac <_printf_common+0xb0>
 8009a54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a58:	4649      	mov	r1, r9
 8009a5a:	4638      	mov	r0, r7
 8009a5c:	47c0      	blx	r8
 8009a5e:	3001      	adds	r0, #1
 8009a60:	d01e      	beq.n	8009aa0 <_printf_common+0xa4>
 8009a62:	6823      	ldr	r3, [r4, #0]
 8009a64:	6922      	ldr	r2, [r4, #16]
 8009a66:	f003 0306 	and.w	r3, r3, #6
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	bf02      	ittt	eq
 8009a6e:	68e5      	ldreq	r5, [r4, #12]
 8009a70:	6833      	ldreq	r3, [r6, #0]
 8009a72:	1aed      	subeq	r5, r5, r3
 8009a74:	68a3      	ldr	r3, [r4, #8]
 8009a76:	bf0c      	ite	eq
 8009a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a7c:	2500      	movne	r5, #0
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	bfc4      	itt	gt
 8009a82:	1a9b      	subgt	r3, r3, r2
 8009a84:	18ed      	addgt	r5, r5, r3
 8009a86:	2600      	movs	r6, #0
 8009a88:	341a      	adds	r4, #26
 8009a8a:	42b5      	cmp	r5, r6
 8009a8c:	d11a      	bne.n	8009ac4 <_printf_common+0xc8>
 8009a8e:	2000      	movs	r0, #0
 8009a90:	e008      	b.n	8009aa4 <_printf_common+0xa8>
 8009a92:	2301      	movs	r3, #1
 8009a94:	4652      	mov	r2, sl
 8009a96:	4649      	mov	r1, r9
 8009a98:	4638      	mov	r0, r7
 8009a9a:	47c0      	blx	r8
 8009a9c:	3001      	adds	r0, #1
 8009a9e:	d103      	bne.n	8009aa8 <_printf_common+0xac>
 8009aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa8:	3501      	adds	r5, #1
 8009aaa:	e7c6      	b.n	8009a3a <_printf_common+0x3e>
 8009aac:	18e1      	adds	r1, r4, r3
 8009aae:	1c5a      	adds	r2, r3, #1
 8009ab0:	2030      	movs	r0, #48	; 0x30
 8009ab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ab6:	4422      	add	r2, r4
 8009ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009abc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ac0:	3302      	adds	r3, #2
 8009ac2:	e7c7      	b.n	8009a54 <_printf_common+0x58>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	4622      	mov	r2, r4
 8009ac8:	4649      	mov	r1, r9
 8009aca:	4638      	mov	r0, r7
 8009acc:	47c0      	blx	r8
 8009ace:	3001      	adds	r0, #1
 8009ad0:	d0e6      	beq.n	8009aa0 <_printf_common+0xa4>
 8009ad2:	3601      	adds	r6, #1
 8009ad4:	e7d9      	b.n	8009a8a <_printf_common+0x8e>
	...

08009ad8 <_printf_i>:
 8009ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009adc:	7e0f      	ldrb	r7, [r1, #24]
 8009ade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ae0:	2f78      	cmp	r7, #120	; 0x78
 8009ae2:	4691      	mov	r9, r2
 8009ae4:	4680      	mov	r8, r0
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	469a      	mov	sl, r3
 8009aea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009aee:	d807      	bhi.n	8009b00 <_printf_i+0x28>
 8009af0:	2f62      	cmp	r7, #98	; 0x62
 8009af2:	d80a      	bhi.n	8009b0a <_printf_i+0x32>
 8009af4:	2f00      	cmp	r7, #0
 8009af6:	f000 80d4 	beq.w	8009ca2 <_printf_i+0x1ca>
 8009afa:	2f58      	cmp	r7, #88	; 0x58
 8009afc:	f000 80c0 	beq.w	8009c80 <_printf_i+0x1a8>
 8009b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b08:	e03a      	b.n	8009b80 <_printf_i+0xa8>
 8009b0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b0e:	2b15      	cmp	r3, #21
 8009b10:	d8f6      	bhi.n	8009b00 <_printf_i+0x28>
 8009b12:	a101      	add	r1, pc, #4	; (adr r1, 8009b18 <_printf_i+0x40>)
 8009b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b18:	08009b71 	.word	0x08009b71
 8009b1c:	08009b85 	.word	0x08009b85
 8009b20:	08009b01 	.word	0x08009b01
 8009b24:	08009b01 	.word	0x08009b01
 8009b28:	08009b01 	.word	0x08009b01
 8009b2c:	08009b01 	.word	0x08009b01
 8009b30:	08009b85 	.word	0x08009b85
 8009b34:	08009b01 	.word	0x08009b01
 8009b38:	08009b01 	.word	0x08009b01
 8009b3c:	08009b01 	.word	0x08009b01
 8009b40:	08009b01 	.word	0x08009b01
 8009b44:	08009c89 	.word	0x08009c89
 8009b48:	08009bb1 	.word	0x08009bb1
 8009b4c:	08009c43 	.word	0x08009c43
 8009b50:	08009b01 	.word	0x08009b01
 8009b54:	08009b01 	.word	0x08009b01
 8009b58:	08009cab 	.word	0x08009cab
 8009b5c:	08009b01 	.word	0x08009b01
 8009b60:	08009bb1 	.word	0x08009bb1
 8009b64:	08009b01 	.word	0x08009b01
 8009b68:	08009b01 	.word	0x08009b01
 8009b6c:	08009c4b 	.word	0x08009c4b
 8009b70:	682b      	ldr	r3, [r5, #0]
 8009b72:	1d1a      	adds	r2, r3, #4
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	602a      	str	r2, [r5, #0]
 8009b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b80:	2301      	movs	r3, #1
 8009b82:	e09f      	b.n	8009cc4 <_printf_i+0x1ec>
 8009b84:	6820      	ldr	r0, [r4, #0]
 8009b86:	682b      	ldr	r3, [r5, #0]
 8009b88:	0607      	lsls	r7, r0, #24
 8009b8a:	f103 0104 	add.w	r1, r3, #4
 8009b8e:	6029      	str	r1, [r5, #0]
 8009b90:	d501      	bpl.n	8009b96 <_printf_i+0xbe>
 8009b92:	681e      	ldr	r6, [r3, #0]
 8009b94:	e003      	b.n	8009b9e <_printf_i+0xc6>
 8009b96:	0646      	lsls	r6, r0, #25
 8009b98:	d5fb      	bpl.n	8009b92 <_printf_i+0xba>
 8009b9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b9e:	2e00      	cmp	r6, #0
 8009ba0:	da03      	bge.n	8009baa <_printf_i+0xd2>
 8009ba2:	232d      	movs	r3, #45	; 0x2d
 8009ba4:	4276      	negs	r6, r6
 8009ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009baa:	485a      	ldr	r0, [pc, #360]	; (8009d14 <_printf_i+0x23c>)
 8009bac:	230a      	movs	r3, #10
 8009bae:	e012      	b.n	8009bd6 <_printf_i+0xfe>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	6820      	ldr	r0, [r4, #0]
 8009bb4:	1d19      	adds	r1, r3, #4
 8009bb6:	6029      	str	r1, [r5, #0]
 8009bb8:	0605      	lsls	r5, r0, #24
 8009bba:	d501      	bpl.n	8009bc0 <_printf_i+0xe8>
 8009bbc:	681e      	ldr	r6, [r3, #0]
 8009bbe:	e002      	b.n	8009bc6 <_printf_i+0xee>
 8009bc0:	0641      	lsls	r1, r0, #25
 8009bc2:	d5fb      	bpl.n	8009bbc <_printf_i+0xe4>
 8009bc4:	881e      	ldrh	r6, [r3, #0]
 8009bc6:	4853      	ldr	r0, [pc, #332]	; (8009d14 <_printf_i+0x23c>)
 8009bc8:	2f6f      	cmp	r7, #111	; 0x6f
 8009bca:	bf0c      	ite	eq
 8009bcc:	2308      	moveq	r3, #8
 8009bce:	230a      	movne	r3, #10
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bd6:	6865      	ldr	r5, [r4, #4]
 8009bd8:	60a5      	str	r5, [r4, #8]
 8009bda:	2d00      	cmp	r5, #0
 8009bdc:	bfa2      	ittt	ge
 8009bde:	6821      	ldrge	r1, [r4, #0]
 8009be0:	f021 0104 	bicge.w	r1, r1, #4
 8009be4:	6021      	strge	r1, [r4, #0]
 8009be6:	b90e      	cbnz	r6, 8009bec <_printf_i+0x114>
 8009be8:	2d00      	cmp	r5, #0
 8009bea:	d04b      	beq.n	8009c84 <_printf_i+0x1ac>
 8009bec:	4615      	mov	r5, r2
 8009bee:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bf2:	fb03 6711 	mls	r7, r3, r1, r6
 8009bf6:	5dc7      	ldrb	r7, [r0, r7]
 8009bf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bfc:	4637      	mov	r7, r6
 8009bfe:	42bb      	cmp	r3, r7
 8009c00:	460e      	mov	r6, r1
 8009c02:	d9f4      	bls.n	8009bee <_printf_i+0x116>
 8009c04:	2b08      	cmp	r3, #8
 8009c06:	d10b      	bne.n	8009c20 <_printf_i+0x148>
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	07de      	lsls	r6, r3, #31
 8009c0c:	d508      	bpl.n	8009c20 <_printf_i+0x148>
 8009c0e:	6923      	ldr	r3, [r4, #16]
 8009c10:	6861      	ldr	r1, [r4, #4]
 8009c12:	4299      	cmp	r1, r3
 8009c14:	bfde      	ittt	le
 8009c16:	2330      	movle	r3, #48	; 0x30
 8009c18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c20:	1b52      	subs	r2, r2, r5
 8009c22:	6122      	str	r2, [r4, #16]
 8009c24:	f8cd a000 	str.w	sl, [sp]
 8009c28:	464b      	mov	r3, r9
 8009c2a:	aa03      	add	r2, sp, #12
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	4640      	mov	r0, r8
 8009c30:	f7ff fee4 	bl	80099fc <_printf_common>
 8009c34:	3001      	adds	r0, #1
 8009c36:	d14a      	bne.n	8009cce <_printf_i+0x1f6>
 8009c38:	f04f 30ff 	mov.w	r0, #4294967295
 8009c3c:	b004      	add	sp, #16
 8009c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	f043 0320 	orr.w	r3, r3, #32
 8009c48:	6023      	str	r3, [r4, #0]
 8009c4a:	4833      	ldr	r0, [pc, #204]	; (8009d18 <_printf_i+0x240>)
 8009c4c:	2778      	movs	r7, #120	; 0x78
 8009c4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	6829      	ldr	r1, [r5, #0]
 8009c56:	061f      	lsls	r7, r3, #24
 8009c58:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c5c:	d402      	bmi.n	8009c64 <_printf_i+0x18c>
 8009c5e:	065f      	lsls	r7, r3, #25
 8009c60:	bf48      	it	mi
 8009c62:	b2b6      	uxthmi	r6, r6
 8009c64:	07df      	lsls	r7, r3, #31
 8009c66:	bf48      	it	mi
 8009c68:	f043 0320 	orrmi.w	r3, r3, #32
 8009c6c:	6029      	str	r1, [r5, #0]
 8009c6e:	bf48      	it	mi
 8009c70:	6023      	strmi	r3, [r4, #0]
 8009c72:	b91e      	cbnz	r6, 8009c7c <_printf_i+0x1a4>
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	f023 0320 	bic.w	r3, r3, #32
 8009c7a:	6023      	str	r3, [r4, #0]
 8009c7c:	2310      	movs	r3, #16
 8009c7e:	e7a7      	b.n	8009bd0 <_printf_i+0xf8>
 8009c80:	4824      	ldr	r0, [pc, #144]	; (8009d14 <_printf_i+0x23c>)
 8009c82:	e7e4      	b.n	8009c4e <_printf_i+0x176>
 8009c84:	4615      	mov	r5, r2
 8009c86:	e7bd      	b.n	8009c04 <_printf_i+0x12c>
 8009c88:	682b      	ldr	r3, [r5, #0]
 8009c8a:	6826      	ldr	r6, [r4, #0]
 8009c8c:	6961      	ldr	r1, [r4, #20]
 8009c8e:	1d18      	adds	r0, r3, #4
 8009c90:	6028      	str	r0, [r5, #0]
 8009c92:	0635      	lsls	r5, r6, #24
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	d501      	bpl.n	8009c9c <_printf_i+0x1c4>
 8009c98:	6019      	str	r1, [r3, #0]
 8009c9a:	e002      	b.n	8009ca2 <_printf_i+0x1ca>
 8009c9c:	0670      	lsls	r0, r6, #25
 8009c9e:	d5fb      	bpl.n	8009c98 <_printf_i+0x1c0>
 8009ca0:	8019      	strh	r1, [r3, #0]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	6123      	str	r3, [r4, #16]
 8009ca6:	4615      	mov	r5, r2
 8009ca8:	e7bc      	b.n	8009c24 <_printf_i+0x14c>
 8009caa:	682b      	ldr	r3, [r5, #0]
 8009cac:	1d1a      	adds	r2, r3, #4
 8009cae:	602a      	str	r2, [r5, #0]
 8009cb0:	681d      	ldr	r5, [r3, #0]
 8009cb2:	6862      	ldr	r2, [r4, #4]
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f7f6 fa92 	bl	80001e0 <memchr>
 8009cbc:	b108      	cbz	r0, 8009cc2 <_printf_i+0x1ea>
 8009cbe:	1b40      	subs	r0, r0, r5
 8009cc0:	6060      	str	r0, [r4, #4]
 8009cc2:	6863      	ldr	r3, [r4, #4]
 8009cc4:	6123      	str	r3, [r4, #16]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ccc:	e7aa      	b.n	8009c24 <_printf_i+0x14c>
 8009cce:	6923      	ldr	r3, [r4, #16]
 8009cd0:	462a      	mov	r2, r5
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	47d0      	blx	sl
 8009cd8:	3001      	adds	r0, #1
 8009cda:	d0ad      	beq.n	8009c38 <_printf_i+0x160>
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	079b      	lsls	r3, r3, #30
 8009ce0:	d413      	bmi.n	8009d0a <_printf_i+0x232>
 8009ce2:	68e0      	ldr	r0, [r4, #12]
 8009ce4:	9b03      	ldr	r3, [sp, #12]
 8009ce6:	4298      	cmp	r0, r3
 8009ce8:	bfb8      	it	lt
 8009cea:	4618      	movlt	r0, r3
 8009cec:	e7a6      	b.n	8009c3c <_printf_i+0x164>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	4640      	mov	r0, r8
 8009cf6:	47d0      	blx	sl
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	d09d      	beq.n	8009c38 <_printf_i+0x160>
 8009cfc:	3501      	adds	r5, #1
 8009cfe:	68e3      	ldr	r3, [r4, #12]
 8009d00:	9903      	ldr	r1, [sp, #12]
 8009d02:	1a5b      	subs	r3, r3, r1
 8009d04:	42ab      	cmp	r3, r5
 8009d06:	dcf2      	bgt.n	8009cee <_printf_i+0x216>
 8009d08:	e7eb      	b.n	8009ce2 <_printf_i+0x20a>
 8009d0a:	2500      	movs	r5, #0
 8009d0c:	f104 0619 	add.w	r6, r4, #25
 8009d10:	e7f5      	b.n	8009cfe <_printf_i+0x226>
 8009d12:	bf00      	nop
 8009d14:	0800a22d 	.word	0x0800a22d
 8009d18:	0800a23e 	.word	0x0800a23e

08009d1c <memmove>:
 8009d1c:	4288      	cmp	r0, r1
 8009d1e:	b510      	push	{r4, lr}
 8009d20:	eb01 0402 	add.w	r4, r1, r2
 8009d24:	d902      	bls.n	8009d2c <memmove+0x10>
 8009d26:	4284      	cmp	r4, r0
 8009d28:	4623      	mov	r3, r4
 8009d2a:	d807      	bhi.n	8009d3c <memmove+0x20>
 8009d2c:	1e43      	subs	r3, r0, #1
 8009d2e:	42a1      	cmp	r1, r4
 8009d30:	d008      	beq.n	8009d44 <memmove+0x28>
 8009d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d3a:	e7f8      	b.n	8009d2e <memmove+0x12>
 8009d3c:	4402      	add	r2, r0
 8009d3e:	4601      	mov	r1, r0
 8009d40:	428a      	cmp	r2, r1
 8009d42:	d100      	bne.n	8009d46 <memmove+0x2a>
 8009d44:	bd10      	pop	{r4, pc}
 8009d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d4e:	e7f7      	b.n	8009d40 <memmove+0x24>

08009d50 <_realloc_r>:
 8009d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d54:	4680      	mov	r8, r0
 8009d56:	4614      	mov	r4, r2
 8009d58:	460e      	mov	r6, r1
 8009d5a:	b921      	cbnz	r1, 8009d66 <_realloc_r+0x16>
 8009d5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d60:	4611      	mov	r1, r2
 8009d62:	f7ff bb53 	b.w	800940c <_malloc_r>
 8009d66:	b92a      	cbnz	r2, 8009d74 <_realloc_r+0x24>
 8009d68:	f7ff fca4 	bl	80096b4 <_free_r>
 8009d6c:	4625      	mov	r5, r4
 8009d6e:	4628      	mov	r0, r5
 8009d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d74:	f000 f81b 	bl	8009dae <_malloc_usable_size_r>
 8009d78:	4284      	cmp	r4, r0
 8009d7a:	4607      	mov	r7, r0
 8009d7c:	d802      	bhi.n	8009d84 <_realloc_r+0x34>
 8009d7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d82:	d812      	bhi.n	8009daa <_realloc_r+0x5a>
 8009d84:	4621      	mov	r1, r4
 8009d86:	4640      	mov	r0, r8
 8009d88:	f7ff fb40 	bl	800940c <_malloc_r>
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d0ed      	beq.n	8009d6e <_realloc_r+0x1e>
 8009d92:	42bc      	cmp	r4, r7
 8009d94:	4622      	mov	r2, r4
 8009d96:	4631      	mov	r1, r6
 8009d98:	bf28      	it	cs
 8009d9a:	463a      	movcs	r2, r7
 8009d9c:	f7ff fc7c 	bl	8009698 <memcpy>
 8009da0:	4631      	mov	r1, r6
 8009da2:	4640      	mov	r0, r8
 8009da4:	f7ff fc86 	bl	80096b4 <_free_r>
 8009da8:	e7e1      	b.n	8009d6e <_realloc_r+0x1e>
 8009daa:	4635      	mov	r5, r6
 8009dac:	e7df      	b.n	8009d6e <_realloc_r+0x1e>

08009dae <_malloc_usable_size_r>:
 8009dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009db2:	1f18      	subs	r0, r3, #4
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bfbc      	itt	lt
 8009db8:	580b      	ldrlt	r3, [r1, r0]
 8009dba:	18c0      	addlt	r0, r0, r3
 8009dbc:	4770      	bx	lr
	...

08009dc0 <_init>:
 8009dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc2:	bf00      	nop
 8009dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dc6:	bc08      	pop	{r3}
 8009dc8:	469e      	mov	lr, r3
 8009dca:	4770      	bx	lr

08009dcc <_fini>:
 8009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dce:	bf00      	nop
 8009dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dd2:	bc08      	pop	{r3}
 8009dd4:	469e      	mov	lr, r3
 8009dd6:	4770      	bx	lr
