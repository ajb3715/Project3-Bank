
Project3-Bank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08009cdc  08009cdc  00019cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0fc  0800a0fc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0fc  0800a0fc  0001a0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a104  0800a104  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a104  0800a104  0001a104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a108  0800a108  0001a108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a10c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000071e8  20000078  0800a184  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007260  0800a184  00027260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb50  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d93  00000000  00000000  0003bc3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001800  00000000  00000000  0003f9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001293  00000000  00000000  000411d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029321  00000000  00000000  00042463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cd12  00000000  00000000  0006b784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdaaa  00000000  00000000  00088496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006954  00000000  00000000  00185f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0018c894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cc4 	.word	0x08009cc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08009cc4 	.word	0x08009cc4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <run_manager>:
#include "clock.h"
#include "teller.h"
#include "stdio.h"
#include "string.h"

void run_manager(){
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b0d4      	sub	sp, #336	; 0x150
 8000580:	af04      	add	r7, sp, #16
	if (clock_compare(Clock, fiveOclockSomewhere) == 1 && waiting_customers == 0){
 8000582:	4b91      	ldr	r3, [pc, #580]	; (80007c8 <run_manager+0x24c>)
 8000584:	4a91      	ldr	r2, [pc, #580]	; (80007cc <run_manager+0x250>)
 8000586:	466c      	mov	r4, sp
 8000588:	1d19      	adds	r1, r3, #4
 800058a:	c903      	ldmia	r1, {r0, r1}
 800058c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	ca07      	ldmia	r2, {r0, r1, r2}
 8000594:	f000 fe89 	bl	80012aa <clock_compare>
 8000598:	4603      	mov	r3, r0
 800059a:	2b01      	cmp	r3, #1
 800059c:	f040 81e3 	bne.w	8000966 <run_manager+0x3ea>
 80005a0:	4b8b      	ldr	r3, [pc, #556]	; (80007d0 <run_manager+0x254>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	f040 81de 	bne.w	8000966 <run_manager+0x3ea>
		// Everyone stats
		int total_customers = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		WallClock total_service_time = {.hour = 0, .minute = 0, .second = 0};
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80005b6:	2300      	movs	r3, #0
 80005b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80005bc:	2300      	movs	r3, #0
 80005be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		WallClock avg_wait_time_customer = {.hour = 0, .minute = 0, .second = 0};
 80005c2:	2300      	movs	r3, #0
 80005c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80005c8:	2300      	movs	r3, #0
 80005ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80005ce:	2300      	movs	r3, #0
 80005d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		WallClock avg_time_with_teller = {.hour = 0, .minute = 0, .second = 0};
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80005da:	2300      	movs	r3, #0
 80005dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80005e0:	2300      	movs	r3, #0
 80005e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		WallClock avg_wait_time_teller = {.hour = 0, .minute = 0, .second = 0};
 80005e6:	2300      	movs	r3, #0
 80005e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80005ec:	2300      	movs	r3, #0
 80005ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80005f2:	2300      	movs	r3, #0
 80005f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		//WallClock max_queue_time = {.hour = 0, .minute = 0, .second = 0};
		// Individual Teller stats
		for (int i = 1; i < 4; i++){
 80005f8:	2301      	movs	r3, #1
 80005fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80005fe:	e028      	b.n	8000652 <run_manager+0xd6>
			total_customers += tellers[i].customers_served;
 8000600:	4a74      	ldr	r2, [pc, #464]	; (80007d4 <run_manager+0x258>)
 8000602:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000606:	21b0      	movs	r1, #176	; 0xb0
 8000608:	fb01 f303 	mul.w	r3, r1, r3
 800060c:	4413      	add	r3, r2
 800060e:	3318      	adds	r3, #24
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8000616:	4413      	add	r3, r2
 8000618:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
			total_service_time = add_clocks(total_service_time, tellers[i].total_time_working);
 800061c:	f507 7594 	add.w	r5, r7, #296	; 0x128
 8000620:	4a6c      	ldr	r2, [pc, #432]	; (80007d4 <run_manager+0x258>)
 8000622:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000626:	21b0      	movs	r1, #176	; 0xb0
 8000628:	fb01 f303 	mul.w	r3, r1, r3
 800062c:	4413      	add	r3, r2
 800062e:	3318      	adds	r3, #24
 8000630:	466c      	mov	r4, sp
 8000632:	3304      	adds	r3, #4
 8000634:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000638:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800063c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000642:	4628      	mov	r0, r5
 8000644:	f000 fdf7 	bl	8001236 <add_clocks>
		for (int i = 1; i < 4; i++){
 8000648:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800064c:	3301      	adds	r3, #1
 800064e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000652:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000656:	2b03      	cmp	r3, #3
 8000658:	ddd2      	ble.n	8000600 <run_manager+0x84>
		}

		char buffer[256];
		sprintf(buffer, "\r\n-------------------- End of Day Report ---------------------\r\n");
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	495e      	ldr	r1, [pc, #376]	; (80007d8 <run_manager+0x25c>)
 800065e:	4618      	mov	r0, r3
 8000660:	f008 fe8c 	bl	800937c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fdb2 	bl	80001d0 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	1d39      	adds	r1, r7, #4
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	4859      	ldr	r0, [pc, #356]	; (80007dc <run_manager+0x260>)
 8000676:	f004 ffc1 	bl	80055fc <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced: %d\r\n", total_customers);
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8000680:	4957      	ldr	r1, [pc, #348]	; (80007e0 <run_manager+0x264>)
 8000682:	4618      	mov	r0, r3
 8000684:	f008 fe7a 	bl	800937c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff fda0 	bl	80001d0 <strlen>
 8000690:	4603      	mov	r3, r0
 8000692:	b29a      	uxth	r2, r3
 8000694:	1d39      	adds	r1, r7, #4
 8000696:	2364      	movs	r3, #100	; 0x64
 8000698:	4850      	ldr	r0, [pc, #320]	; (80007dc <run_manager+0x260>)
 800069a:	f004 ffaf 	bl	80055fc <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced by Teller 1: %d\r\n", tellers[1].customers_served);
 800069e:	4b4d      	ldr	r3, [pc, #308]	; (80007d4 <run_manager+0x258>)
 80006a0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	494f      	ldr	r1, [pc, #316]	; (80007e4 <run_manager+0x268>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f008 fe67 	bl	800937c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fd8d 	bl	80001d0 <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	1d39      	adds	r1, r7, #4
 80006bc:	2364      	movs	r3, #100	; 0x64
 80006be:	4847      	ldr	r0, [pc, #284]	; (80007dc <run_manager+0x260>)
 80006c0:	f004 ff9c 	bl	80055fc <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced by Teller 2: %d\r\n", tellers[2].customers_served);
 80006c4:	4b43      	ldr	r3, [pc, #268]	; (80007d4 <run_manager+0x258>)
 80006c6:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4946      	ldr	r1, [pc, #280]	; (80007e8 <run_manager+0x26c>)
 80006ce:	4618      	mov	r0, r3
 80006d0:	f008 fe54 	bl	800937c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fd7a 	bl	80001d0 <strlen>
 80006dc:	4603      	mov	r3, r0
 80006de:	b29a      	uxth	r2, r3
 80006e0:	1d39      	adds	r1, r7, #4
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	483d      	ldr	r0, [pc, #244]	; (80007dc <run_manager+0x260>)
 80006e6:	f004 ff89 	bl	80055fc <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced by Teller 3: %d\r\n", tellers[3].customers_served);
 80006ea:	4b3a      	ldr	r3, [pc, #232]	; (80007d4 <run_manager+0x258>)
 80006ec:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	493e      	ldr	r1, [pc, #248]	; (80007ec <run_manager+0x270>)
 80006f4:	4618      	mov	r0, r3
 80006f6:	f008 fe41 	bl	800937c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fd67 	bl	80001d0 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	b29a      	uxth	r2, r3
 8000706:	1d39      	adds	r1, r7, #4
 8000708:	2364      	movs	r3, #100	; 0x64
 800070a:	4834      	ldr	r0, [pc, #208]	; (80007dc <run_manager+0x260>)
 800070c:	f004 ff76 	bl	80055fc <HAL_UART_Transmit>

		sprintf(buffer, "Average customer wait time: %d:%d:%d\r\n", avg_wait_time_customer.hour, avg_wait_time_customer.minute, avg_wait_time_customer.second);
 8000710:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000714:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8000718:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800071c:	1d38      	adds	r0, r7, #4
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	460b      	mov	r3, r1
 8000722:	4933      	ldr	r1, [pc, #204]	; (80007f0 <run_manager+0x274>)
 8000724:	f008 fe2a 	bl	800937c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fd50 	bl	80001d0 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	1d39      	adds	r1, r7, #4
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	4828      	ldr	r0, [pc, #160]	; (80007dc <run_manager+0x260>)
 800073a:	f004 ff5f 	bl	80055fc <HAL_UART_Transmit>
		sprintf(buffer, "Average customer time with Tellers: %d:%d:%d\r\n", avg_time_with_teller.hour, avg_time_with_teller.minute, avg_time_with_teller.second);
 800073e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000742:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000746:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800074a:	1d38      	adds	r0, r7, #4
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	460b      	mov	r3, r1
 8000750:	4928      	ldr	r1, [pc, #160]	; (80007f4 <run_manager+0x278>)
 8000752:	f008 fe13 	bl	800937c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fd39 	bl	80001d0 <strlen>
 800075e:	4603      	mov	r3, r0
 8000760:	b29a      	uxth	r2, r3
 8000762:	1d39      	adds	r1, r7, #4
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	481d      	ldr	r0, [pc, #116]	; (80007dc <run_manager+0x260>)
 8000768:	f004 ff48 	bl	80055fc <HAL_UART_Transmit>
		sprintf(buffer, "Average teller wait time: %d:%d:%d\r\n", avg_wait_time_teller.hour, avg_wait_time_teller.minute, avg_wait_time_teller.second);
 800076c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000770:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8000774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000778:	1d38      	adds	r0, r7, #4
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	460b      	mov	r3, r1
 800077e:	491e      	ldr	r1, [pc, #120]	; (80007f8 <run_manager+0x27c>)
 8000780:	f008 fdfc 	bl	800937c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fd22 	bl	80001d0 <strlen>
 800078c:	4603      	mov	r3, r0
 800078e:	b29a      	uxth	r2, r3
 8000790:	1d39      	adds	r1, r7, #4
 8000792:	2364      	movs	r3, #100	; 0x64
 8000794:	4811      	ldr	r0, [pc, #68]	; (80007dc <run_manager+0x260>)
 8000796:	f004 ff31 	bl	80055fc <HAL_UART_Transmit>
		sprintf(buffer, "Max customers in queue: %d\r\n", max_customer_waiting);
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <run_manager+0x280>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4917      	ldr	r1, [pc, #92]	; (8000800 <run_manager+0x284>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f008 fdea 	bl	800937c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fd10 	bl	80001d0 <strlen>
 80007b0:	4603      	mov	r3, r0
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	1d39      	adds	r1, r7, #4
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	4808      	ldr	r0, [pc, #32]	; (80007dc <run_manager+0x260>)
 80007ba:	f004 ff1f 	bl	80055fc <HAL_UART_Transmit>

		for (int i = 1; i < 4; i++){
 80007be:	2301      	movs	r3, #1
 80007c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80007c4:	e0ca      	b.n	800095c <run_manager+0x3e0>
 80007c6:	bf00      	nop
 80007c8:	2000000c 	.word	0x2000000c
 80007cc:	20000000 	.word	0x20000000
 80007d0:	200000f8 	.word	0x200000f8
 80007d4:	200003bc 	.word	0x200003bc
 80007d8:	08009cdc 	.word	0x08009cdc
 80007dc:	20000314 	.word	0x20000314
 80007e0:	08009d20 	.word	0x08009d20
 80007e4:	08009d3c 	.word	0x08009d3c
 80007e8:	08009d64 	.word	0x08009d64
 80007ec:	08009d8c 	.word	0x08009d8c
 80007f0:	08009db4 	.word	0x08009db4
 80007f4:	08009ddc 	.word	0x08009ddc
 80007f8:	08009e0c 	.word	0x08009e0c
 80007fc:	200000f4 	.word	0x200000f4
 8000800:	08009e34 	.word	0x08009e34
			sprintf(buffer, "Number of breaks for Teller %d: %d\r\n", i, tellers[i].num_breaks);
 8000804:	4a5a      	ldr	r2, [pc, #360]	; (8000970 <run_manager+0x3f4>)
 8000806:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800080a:	21b0      	movs	r1, #176	; 0xb0
 800080c:	fb01 f303 	mul.w	r3, r1, r3
 8000810:	4413      	add	r3, r2
 8000812:	3388      	adds	r3, #136	; 0x88
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	1d38      	adds	r0, r7, #4
 8000818:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800081c:	4955      	ldr	r1, [pc, #340]	; (8000974 <run_manager+0x3f8>)
 800081e:	f008 fdad 	bl	800937c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fcd3 	bl	80001d0 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	b29a      	uxth	r2, r3
 800082e:	1d39      	adds	r1, r7, #4
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	4851      	ldr	r0, [pc, #324]	; (8000978 <run_manager+0x3fc>)
 8000834:	f004 fee2 	bl	80055fc <HAL_UART_Transmit>
			sprintf(buffer, "Average break time for Teller %d: %d:%d:%d\r\n", i, tellers[i].current_break.hour, tellers[i].current_break.minute, tellers[i].current_break.second); //calculate avg
 8000838:	4a4d      	ldr	r2, [pc, #308]	; (8000970 <run_manager+0x3f4>)
 800083a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800083e:	21b0      	movs	r1, #176	; 0xb0
 8000840:	fb01 f303 	mul.w	r3, r1, r3
 8000844:	4413      	add	r3, r2
 8000846:	337c      	adds	r3, #124	; 0x7c
 8000848:	6819      	ldr	r1, [r3, #0]
 800084a:	4a49      	ldr	r2, [pc, #292]	; (8000970 <run_manager+0x3f4>)
 800084c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000850:	20b0      	movs	r0, #176	; 0xb0
 8000852:	fb00 f303 	mul.w	r3, r0, r3
 8000856:	4413      	add	r3, r2
 8000858:	3380      	adds	r3, #128	; 0x80
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4844      	ldr	r0, [pc, #272]	; (8000970 <run_manager+0x3f4>)
 800085e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000862:	24b0      	movs	r4, #176	; 0xb0
 8000864:	fb04 f202 	mul.w	r2, r4, r2
 8000868:	4402      	add	r2, r0
 800086a:	3284      	adds	r2, #132	; 0x84
 800086c:	6812      	ldr	r2, [r2, #0]
 800086e:	1d38      	adds	r0, r7, #4
 8000870:	9201      	str	r2, [sp, #4]
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	460b      	mov	r3, r1
 8000876:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800087a:	4940      	ldr	r1, [pc, #256]	; (800097c <run_manager+0x400>)
 800087c:	f008 fd7e 	bl	800937c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fca4 	bl	80001d0 <strlen>
 8000888:	4603      	mov	r3, r0
 800088a:	b29a      	uxth	r2, r3
 800088c:	1d39      	adds	r1, r7, #4
 800088e:	2364      	movs	r3, #100	; 0x64
 8000890:	4839      	ldr	r0, [pc, #228]	; (8000978 <run_manager+0x3fc>)
 8000892:	f004 feb3 	bl	80055fc <HAL_UART_Transmit>
			sprintf(buffer, "Max break time for Teller %d: %d:%d:%d\r\n", i, tellers[i].max_break.hour, tellers[i].max_break.minute, tellers[i].max_break.second);
 8000896:	4a36      	ldr	r2, [pc, #216]	; (8000970 <run_manager+0x3f4>)
 8000898:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800089c:	21b0      	movs	r1, #176	; 0xb0
 800089e:	fb01 f303 	mul.w	r3, r1, r3
 80008a2:	4413      	add	r3, r2
 80008a4:	338c      	adds	r3, #140	; 0x8c
 80008a6:	6819      	ldr	r1, [r3, #0]
 80008a8:	4a31      	ldr	r2, [pc, #196]	; (8000970 <run_manager+0x3f4>)
 80008aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008ae:	20b0      	movs	r0, #176	; 0xb0
 80008b0:	fb00 f303 	mul.w	r3, r0, r3
 80008b4:	4413      	add	r3, r2
 80008b6:	3390      	adds	r3, #144	; 0x90
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	482d      	ldr	r0, [pc, #180]	; (8000970 <run_manager+0x3f4>)
 80008bc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80008c0:	24b0      	movs	r4, #176	; 0xb0
 80008c2:	fb04 f202 	mul.w	r2, r4, r2
 80008c6:	4402      	add	r2, r0
 80008c8:	3294      	adds	r2, #148	; 0x94
 80008ca:	6812      	ldr	r2, [r2, #0]
 80008cc:	1d38      	adds	r0, r7, #4
 80008ce:	9201      	str	r2, [sp, #4]
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	460b      	mov	r3, r1
 80008d4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80008d8:	4929      	ldr	r1, [pc, #164]	; (8000980 <run_manager+0x404>)
 80008da:	f008 fd4f 	bl	800937c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fc75 	bl	80001d0 <strlen>
 80008e6:	4603      	mov	r3, r0
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	1d39      	adds	r1, r7, #4
 80008ec:	2364      	movs	r3, #100	; 0x64
 80008ee:	4822      	ldr	r0, [pc, #136]	; (8000978 <run_manager+0x3fc>)
 80008f0:	f004 fe84 	bl	80055fc <HAL_UART_Transmit>
			sprintf(buffer, "Min break time for Teller %d: %d:%d:%d\r\n", i, tellers[i].min_break.hour, tellers[i].min_break.minute, tellers[i].min_break.second);
 80008f4:	4a1e      	ldr	r2, [pc, #120]	; (8000970 <run_manager+0x3f4>)
 80008f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80008fa:	21b0      	movs	r1, #176	; 0xb0
 80008fc:	fb01 f303 	mul.w	r3, r1, r3
 8000900:	4413      	add	r3, r2
 8000902:	3398      	adds	r3, #152	; 0x98
 8000904:	6819      	ldr	r1, [r3, #0]
 8000906:	4a1a      	ldr	r2, [pc, #104]	; (8000970 <run_manager+0x3f4>)
 8000908:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800090c:	20b0      	movs	r0, #176	; 0xb0
 800090e:	fb00 f303 	mul.w	r3, r0, r3
 8000912:	4413      	add	r3, r2
 8000914:	339c      	adds	r3, #156	; 0x9c
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4815      	ldr	r0, [pc, #84]	; (8000970 <run_manager+0x3f4>)
 800091a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800091e:	24b0      	movs	r4, #176	; 0xb0
 8000920:	fb04 f202 	mul.w	r2, r4, r2
 8000924:	4402      	add	r2, r0
 8000926:	32a0      	adds	r2, #160	; 0xa0
 8000928:	6812      	ldr	r2, [r2, #0]
 800092a:	1d38      	adds	r0, r7, #4
 800092c:	9201      	str	r2, [sp, #4]
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	460b      	mov	r3, r1
 8000932:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000936:	4913      	ldr	r1, [pc, #76]	; (8000984 <run_manager+0x408>)
 8000938:	f008 fd20 	bl	800937c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fc46 	bl	80001d0 <strlen>
 8000944:	4603      	mov	r3, r0
 8000946:	b29a      	uxth	r2, r3
 8000948:	1d39      	adds	r1, r7, #4
 800094a:	2364      	movs	r3, #100	; 0x64
 800094c:	480a      	ldr	r0, [pc, #40]	; (8000978 <run_manager+0x3fc>)
 800094e:	f004 fe55 	bl	80055fc <HAL_UART_Transmit>
		for (int i = 1; i < 4; i++){
 8000952:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000956:	3301      	adds	r3, #1
 8000958:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800095c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000960:	2b03      	cmp	r3, #3
 8000962:	f77f af4f 	ble.w	8000804 <run_manager+0x288>
		}
	}
}
 8000966:	bf00      	nop
 8000968:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800096c:	46bd      	mov	sp, r7
 800096e:	bdb0      	pop	{r4, r5, r7, pc}
 8000970:	200003bc 	.word	0x200003bc
 8000974:	08009e54 	.word	0x08009e54
 8000978:	20000314 	.word	0x20000314
 800097c:	08009e7c 	.word	0x08009e7c
 8000980:	08009eac 	.word	0x08009eac
 8000984:	08009ed8 	.word	0x08009ed8

08000988 <init_breaker>:
uint32_t* random2;
uint32_t* random3;



void init_breaker(void){
 8000988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098a:	b09d      	sub	sp, #116	; 0x74
 800098c:	af04      	add	r7, sp, #16

	//What time the variable for going on break will be assigned
	breaker.start_break[0] = 0;
 800098e:	4bbc      	ldr	r3, [pc, #752]	; (8000c80 <init_breaker+0x2f8>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
	breaker.start_break[1] = 0;
 8000994:	4bba      	ldr	r3, [pc, #744]	; (8000c80 <init_breaker+0x2f8>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random1);
 800099a:	4bba      	ldr	r3, [pc, #744]	; (8000c84 <init_breaker+0x2fc>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4619      	mov	r1, r3
 80009a0:	48b9      	ldr	r0, [pc, #740]	; (8000c88 <init_breaker+0x300>)
 80009a2:	f004 f9d6 	bl	8004d52 <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock1 = { .hour = 9, .minute = (30 + (*random1 - 30) % 31), .second = (*random1 % 60)};
 80009a6:	2309      	movs	r3, #9
 80009a8:	657b      	str	r3, [r7, #84]	; 0x54
 80009aa:	4bb6      	ldr	r3, [pc, #728]	; (8000c84 <init_breaker+0x2fc>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f1a3 011e 	sub.w	r1, r3, #30
 80009b4:	4bb5      	ldr	r3, [pc, #724]	; (8000c8c <init_breaker+0x304>)
 80009b6:	fba3 2301 	umull	r2, r3, r3, r1
 80009ba:	1aca      	subs	r2, r1, r3
 80009bc:	0852      	lsrs	r2, r2, #1
 80009be:	4413      	add	r3, r2
 80009c0:	091a      	lsrs	r2, r3, #4
 80009c2:	4613      	mov	r3, r2
 80009c4:	015b      	lsls	r3, r3, #5
 80009c6:	1a9b      	subs	r3, r3, r2
 80009c8:	1aca      	subs	r2, r1, r3
 80009ca:	f102 031e 	add.w	r3, r2, #30
 80009ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80009d0:	4bac      	ldr	r3, [pc, #688]	; (8000c84 <init_breaker+0x2fc>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6819      	ldr	r1, [r3, #0]
 80009d6:	4bae      	ldr	r3, [pc, #696]	; (8000c90 <init_breaker+0x308>)
 80009d8:	fba3 2301 	umull	r2, r3, r3, r1
 80009dc:	095a      	lsrs	r2, r3, #5
 80009de:	4613      	mov	r3, r2
 80009e0:	011b      	lsls	r3, r3, #4
 80009e2:	1a9b      	subs	r3, r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	1aca      	subs	r2, r1, r3
 80009e8:	4613      	mov	r3, r2
 80009ea:	65fb      	str	r3, [r7, #92]	; 0x5c
	WallClock temp_clock11 = { .hour = 0, .minute = (*random1 % 5), .second = (*random1 % 60)};
 80009ec:	2300      	movs	r3, #0
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80009f0:	4ba4      	ldr	r3, [pc, #656]	; (8000c84 <init_breaker+0x2fc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	6819      	ldr	r1, [r3, #0]
 80009f6:	4ba7      	ldr	r3, [pc, #668]	; (8000c94 <init_breaker+0x30c>)
 80009f8:	fba3 2301 	umull	r2, r3, r3, r1
 80009fc:	089a      	lsrs	r2, r3, #2
 80009fe:	4613      	mov	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	1aca      	subs	r2, r1, r3
 8000a06:	4613      	mov	r3, r2
 8000a08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a0a:	4b9e      	ldr	r3, [pc, #632]	; (8000c84 <init_breaker+0x2fc>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	6819      	ldr	r1, [r3, #0]
 8000a10:	4b9f      	ldr	r3, [pc, #636]	; (8000c90 <init_breaker+0x308>)
 8000a12:	fba3 2301 	umull	r2, r3, r3, r1
 8000a16:	095a      	lsrs	r2, r3, #5
 8000a18:	4613      	mov	r3, r2
 8000a1a:	011b      	lsls	r3, r3, #4
 8000a1c:	1a9b      	subs	r3, r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	1aca      	subs	r2, r1, r3
 8000a22:	4613      	mov	r3, r2
 8000a24:	653b      	str	r3, [r7, #80]	; 0x50
	breaker.break_time1 = add_clocks(breaker.break_time1,temp_clock1);
 8000a26:	4e96      	ldr	r6, [pc, #600]	; (8000c80 <init_breaker+0x2f8>)
 8000a28:	f107 0508 	add.w	r5, r7, #8
 8000a2c:	4b94      	ldr	r3, [pc, #592]	; (8000c80 <init_breaker+0x2f8>)
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	466c      	mov	r4, sp
 8000a32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	330c      	adds	r3, #12
 8000a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a44:	4628      	mov	r0, r5
 8000a46:	f000 fbf6 	bl	8001236 <add_clocks>
 8000a4a:	f106 030c 	add.w	r3, r6, #12
 8000a4e:	f107 0208 	add.w	r2, r7, #8
 8000a52:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration1 = add_clocks(breaker.break_duration1,temp_clock11);
 8000a58:	4e89      	ldr	r6, [pc, #548]	; (8000c80 <init_breaker+0x2f8>)
 8000a5a:	f107 0508 	add.w	r5, r7, #8
 8000a5e:	4b88      	ldr	r3, [pc, #544]	; (8000c80 <init_breaker+0x2f8>)
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	466c      	mov	r4, sp
 8000a64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3318      	adds	r3, #24
 8000a74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a76:	4628      	mov	r0, r5
 8000a78:	f000 fbdd 	bl	8001236 <add_clocks>
 8000a7c:	f106 0318 	add.w	r3, r6, #24
 8000a80:	f107 0208 	add.w	r2, r7, #8
 8000a84:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a86:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//What time the variable for going on break will be assigned
	breaker.start_break[2] = 0;
 8000a8a:	4b7d      	ldr	r3, [pc, #500]	; (8000c80 <init_breaker+0x2f8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random2);
 8000a90:	4b81      	ldr	r3, [pc, #516]	; (8000c98 <init_breaker+0x310>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	487c      	ldr	r0, [pc, #496]	; (8000c88 <init_breaker+0x300>)
 8000a98:	f004 f95b 	bl	8004d52 <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock2 = { .hour = 9, .minute = (30 + (*random2 - 30) % 31), .second = (*random2 % 60)};
 8000a9c:	2309      	movs	r3, #9
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000aa0:	4b7d      	ldr	r3, [pc, #500]	; (8000c98 <init_breaker+0x310>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f1a3 011e 	sub.w	r1, r3, #30
 8000aaa:	4b78      	ldr	r3, [pc, #480]	; (8000c8c <init_breaker+0x304>)
 8000aac:	fba3 2301 	umull	r2, r3, r3, r1
 8000ab0:	1aca      	subs	r2, r1, r3
 8000ab2:	0852      	lsrs	r2, r2, #1
 8000ab4:	4413      	add	r3, r2
 8000ab6:	091a      	lsrs	r2, r3, #4
 8000ab8:	4613      	mov	r3, r2
 8000aba:	015b      	lsls	r3, r3, #5
 8000abc:	1a9b      	subs	r3, r3, r2
 8000abe:	1aca      	subs	r2, r1, r3
 8000ac0:	f102 031e 	add.w	r3, r2, #30
 8000ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8000ac6:	4b74      	ldr	r3, [pc, #464]	; (8000c98 <init_breaker+0x310>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	6819      	ldr	r1, [r3, #0]
 8000acc:	4b70      	ldr	r3, [pc, #448]	; (8000c90 <init_breaker+0x308>)
 8000ace:	fba3 2301 	umull	r2, r3, r3, r1
 8000ad2:	095a      	lsrs	r2, r3, #5
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	1a9b      	subs	r3, r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	1aca      	subs	r2, r1, r3
 8000ade:	4613      	mov	r3, r2
 8000ae0:	647b      	str	r3, [r7, #68]	; 0x44
	WallClock temp_clock22 = { .hour = 0, .minute = (*random2 % 5), .second = (*random2 % 60)};
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8000ae6:	4b6c      	ldr	r3, [pc, #432]	; (8000c98 <init_breaker+0x310>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6819      	ldr	r1, [r3, #0]
 8000aec:	4b69      	ldr	r3, [pc, #420]	; (8000c94 <init_breaker+0x30c>)
 8000aee:	fba3 2301 	umull	r2, r3, r3, r1
 8000af2:	089a      	lsrs	r2, r3, #2
 8000af4:	4613      	mov	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	1aca      	subs	r2, r1, r3
 8000afc:	4613      	mov	r3, r2
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34
 8000b00:	4b65      	ldr	r3, [pc, #404]	; (8000c98 <init_breaker+0x310>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	6819      	ldr	r1, [r3, #0]
 8000b06:	4b62      	ldr	r3, [pc, #392]	; (8000c90 <init_breaker+0x308>)
 8000b08:	fba3 2301 	umull	r2, r3, r3, r1
 8000b0c:	095a      	lsrs	r2, r3, #5
 8000b0e:	4613      	mov	r3, r2
 8000b10:	011b      	lsls	r3, r3, #4
 8000b12:	1a9b      	subs	r3, r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	1aca      	subs	r2, r1, r3
 8000b18:	4613      	mov	r3, r2
 8000b1a:	63bb      	str	r3, [r7, #56]	; 0x38
	breaker.break_time2 = add_clocks(breaker.break_time2,temp_clock2);
 8000b1c:	4e58      	ldr	r6, [pc, #352]	; (8000c80 <init_breaker+0x2f8>)
 8000b1e:	f107 0508 	add.w	r5, r7, #8
 8000b22:	4b57      	ldr	r3, [pc, #348]	; (8000c80 <init_breaker+0x2f8>)
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	466c      	mov	r4, sp
 8000b28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3324      	adds	r3, #36	; 0x24
 8000b38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b3a:	4628      	mov	r0, r5
 8000b3c:	f000 fb7b 	bl	8001236 <add_clocks>
 8000b40:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000b44:	f107 0208 	add.w	r2, r7, #8
 8000b48:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration2 = add_clocks(breaker.break_duration2,temp_clock22);
 8000b4e:	4e4c      	ldr	r6, [pc, #304]	; (8000c80 <init_breaker+0x2f8>)
 8000b50:	f107 0508 	add.w	r5, r7, #8
 8000b54:	4b4a      	ldr	r3, [pc, #296]	; (8000c80 <init_breaker+0x2f8>)
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	466c      	mov	r4, sp
 8000b5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3330      	adds	r3, #48	; 0x30
 8000b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b6c:	4628      	mov	r0, r5
 8000b6e:	f000 fb62 	bl	8001236 <add_clocks>
 8000b72:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8000b76:	f107 0208 	add.w	r2, r7, #8
 8000b7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//What time the variable for going on break will be assigned
	breaker.start_break[3] = 0;
 8000b80:	4b3f      	ldr	r3, [pc, #252]	; (8000c80 <init_breaker+0x2f8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random3);
 8000b86:	4b45      	ldr	r3, [pc, #276]	; (8000c9c <init_breaker+0x314>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	483e      	ldr	r0, [pc, #248]	; (8000c88 <init_breaker+0x300>)
 8000b8e:	f004 f8e0 	bl	8004d52 <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock3 = { .hour = 9, .minute = (30 + (*random3 - 30) % 31), .second = (*random3 % 60)};
 8000b92:	2309      	movs	r3, #9
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
 8000b96:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <init_breaker+0x314>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f1a3 011e 	sub.w	r1, r3, #30
 8000ba0:	4b3a      	ldr	r3, [pc, #232]	; (8000c8c <init_breaker+0x304>)
 8000ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8000ba6:	1aca      	subs	r2, r1, r3
 8000ba8:	0852      	lsrs	r2, r2, #1
 8000baa:	4413      	add	r3, r2
 8000bac:	091a      	lsrs	r2, r3, #4
 8000bae:	4613      	mov	r3, r2
 8000bb0:	015b      	lsls	r3, r3, #5
 8000bb2:	1a9b      	subs	r3, r3, r2
 8000bb4:	1aca      	subs	r2, r1, r3
 8000bb6:	f102 031e 	add.w	r3, r2, #30
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bbc:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <init_breaker+0x314>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6819      	ldr	r1, [r3, #0]
 8000bc2:	4b33      	ldr	r3, [pc, #204]	; (8000c90 <init_breaker+0x308>)
 8000bc4:	fba3 2301 	umull	r2, r3, r3, r1
 8000bc8:	095a      	lsrs	r2, r3, #5
 8000bca:	4613      	mov	r3, r2
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	1a9b      	subs	r3, r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	1aca      	subs	r2, r1, r3
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	WallClock temp_clock33 = { .hour = 0, .minute = (*random3 % 5), .second = (*random3 % 60)};
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <init_breaker+0x314>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6819      	ldr	r1, [r3, #0]
 8000be2:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <init_breaker+0x30c>)
 8000be4:	fba3 2301 	umull	r2, r3, r3, r1
 8000be8:	089a      	lsrs	r2, r3, #2
 8000bea:	4613      	mov	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	1aca      	subs	r2, r1, r3
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	61fb      	str	r3, [r7, #28]
 8000bf6:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <init_breaker+0x314>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <init_breaker+0x308>)
 8000bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8000c02:	095a      	lsrs	r2, r3, #5
 8000c04:	4613      	mov	r3, r2
 8000c06:	011b      	lsls	r3, r3, #4
 8000c08:	1a9b      	subs	r3, r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	1aca      	subs	r2, r1, r3
 8000c0e:	4613      	mov	r3, r2
 8000c10:	623b      	str	r3, [r7, #32]
	breaker.break_time3 = add_clocks(breaker.break_time3,temp_clock3);
 8000c12:	4e1b      	ldr	r6, [pc, #108]	; (8000c80 <init_breaker+0x2f8>)
 8000c14:	f107 0508 	add.w	r5, r7, #8
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <init_breaker+0x2f8>)
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	466c      	mov	r4, sp
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	333c      	adds	r3, #60	; 0x3c
 8000c2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c30:	4628      	mov	r0, r5
 8000c32:	f000 fb00 	bl	8001236 <add_clocks>
 8000c36:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 8000c3a:	f107 0208 	add.w	r2, r7, #8
 8000c3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration3 =  add_clocks(breaker.break_duration3,temp_clock33);
 8000c44:	4e0e      	ldr	r6, [pc, #56]	; (8000c80 <init_breaker+0x2f8>)
 8000c46:	f107 0508 	add.w	r5, r7, #8
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <init_breaker+0x2f8>)
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	466c      	mov	r4, sp
 8000c50:	f107 0318 	add.w	r3, r7, #24
 8000c54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3348      	adds	r3, #72	; 0x48
 8000c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c62:	4628      	mov	r0, r5
 8000c64:	f000 fae7 	bl	8001236 <add_clocks>
 8000c68:	f106 0348 	add.w	r3, r6, #72	; 0x48
 8000c6c:	f107 0208 	add.w	r2, r7, #8
 8000c70:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8000c76:	bf00      	nop
 8000c78:	3764      	adds	r7, #100	; 0x64
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000094 	.word	0x20000094
 8000c84:	200000e8 	.word	0x200000e8
 8000c88:	200002b8 	.word	0x200002b8
 8000c8c:	08421085 	.word	0x08421085
 8000c90:	88888889 	.word	0x88888889
 8000c94:	cccccccd 	.word	0xcccccccd
 8000c98:	200000ec 	.word	0x200000ec
 8000c9c:	200000f0 	.word	0x200000f0

08000ca0 <run_breaker>:

void run_breaker(){
 8000ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca2:	b09d      	sub	sp, #116	; 0x74
 8000ca4:	af04      	add	r7, sp, #16
	if(breaker.break_time1.hour == 0){
 8000ca6:	4bbd      	ldr	r3, [pc, #756]	; (8000f9c <run_breaker+0x2fc>)
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d102      	bne.n	8000cb4 <run_breaker+0x14>
		breaker.break_time1.hour = 9;
 8000cae:	4bbb      	ldr	r3, [pc, #748]	; (8000f9c <run_breaker+0x2fc>)
 8000cb0:	2209      	movs	r2, #9
 8000cb2:	60da      	str	r2, [r3, #12]
	}
	if((!HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)) == 1 ){
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f002 fca3 	bl	8003604 <HAL_GPIO_ReadPin>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d103      	bne.n	8000ccc <run_breaker+0x2c>
			  tellers[1].take_break = 1;
 8000cc4:	4bb6      	ldr	r3, [pc, #728]	; (8000fa0 <run_breaker+0x300>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	}
	if((!HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin)) == 1 ){
 8000ccc:	2110      	movs	r1, #16
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f002 fc97 	bl	8003604 <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d103      	bne.n	8000ce4 <run_breaker+0x44>
			  tellers[2].take_break = 2;
 8000cdc:	4bb0      	ldr	r3, [pc, #704]	; (8000fa0 <run_breaker+0x300>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	}
	if((!HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch2_Pin)) == 1 ){
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	48af      	ldr	r0, [pc, #700]	; (8000fa4 <run_breaker+0x304>)
 8000ce8:	f002 fc8c 	bl	8003604 <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d103      	bne.n	8000cfa <run_breaker+0x5a>
			  tellers[3].take_break = 3;
 8000cf2:	4bab      	ldr	r3, [pc, #684]	; (8000fa0 <run_breaker+0x300>)
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	}
	if(clock_compare(Clock, breaker.break_time1) == 1){
 8000cfa:	4ba8      	ldr	r3, [pc, #672]	; (8000f9c <run_breaker+0x2fc>)
 8000cfc:	4aaa      	ldr	r2, [pc, #680]	; (8000fa8 <run_breaker+0x308>)
 8000cfe:	466c      	mov	r4, sp
 8000d00:	f103 0110 	add.w	r1, r3, #16
 8000d04:	c903      	ldmia	r1, {r0, r1}
 8000d06:	e884 0003 	stmia.w	r4, {r0, r1}
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d0e:	f000 facc 	bl	80012aa <clock_compare>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d103      	bne.n	8000d20 <run_breaker+0x80>
		tellers[1].take_break = 1;
 8000d18:	4ba1      	ldr	r3, [pc, #644]	; (8000fa0 <run_breaker+0x300>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	}
	if(clock_compare(Clock, breaker.break_time2) == 1){
 8000d20:	4b9e      	ldr	r3, [pc, #632]	; (8000f9c <run_breaker+0x2fc>)
 8000d22:	4aa1      	ldr	r2, [pc, #644]	; (8000fa8 <run_breaker+0x308>)
 8000d24:	466c      	mov	r4, sp
 8000d26:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8000d2a:	c903      	ldmia	r1, {r0, r1}
 8000d2c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d32:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d34:	f000 fab9 	bl	80012aa <clock_compare>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d103      	bne.n	8000d46 <run_breaker+0xa6>
		tellers[2].take_break = 1;
 8000d3e:	4b98      	ldr	r3, [pc, #608]	; (8000fa0 <run_breaker+0x300>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	}
	if(clock_compare(Clock, breaker.break_time3) == 1){
 8000d46:	4b95      	ldr	r3, [pc, #596]	; (8000f9c <run_breaker+0x2fc>)
 8000d48:	4a97      	ldr	r2, [pc, #604]	; (8000fa8 <run_breaker+0x308>)
 8000d4a:	466c      	mov	r4, sp
 8000d4c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000d50:	c903      	ldmia	r1, {r0, r1}
 8000d52:	e884 0003 	stmia.w	r4, {r0, r1}
 8000d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d58:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d5a:	f000 faa6 	bl	80012aa <clock_compare>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d103      	bne.n	8000d6c <run_breaker+0xcc>
		tellers[3].take_break = 1;
 8000d64:	4b8e      	ldr	r3, [pc, #568]	; (8000fa0 <run_breaker+0x300>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	}
	if(breaker.start_break[1] == 1){
 8000d6c:	4b8b      	ldr	r3, [pc, #556]	; (8000f9c <run_breaker+0x2fc>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	f040 8094 	bne.w	8000e9e <run_breaker+0x1fe>
		breaker.start_break[1] = 0;
 8000d76:	4b89      	ldr	r3, [pc, #548]	; (8000f9c <run_breaker+0x2fc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
		HAL_RNG_Init(&hrng);
 8000d7c:	488b      	ldr	r0, [pc, #556]	; (8000fac <run_breaker+0x30c>)
 8000d7e:	f003 ff91 	bl	8004ca4 <HAL_RNG_Init>
		HAL_RNG_GenerateRandomNumber(&hrng,random1);
 8000d82:	4b8b      	ldr	r3, [pc, #556]	; (8000fb0 <run_breaker+0x310>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4619      	mov	r1, r3
 8000d88:	4888      	ldr	r0, [pc, #544]	; (8000fac <run_breaker+0x30c>)
 8000d8a:	f003 ffe2 	bl	8004d52 <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock1 = { .hour = 0, .minute = (30 + (*random1 - 30) % 31), .second = (*random1 % 60)};
 8000d8e:	2300      	movs	r3, #0
 8000d90:	657b      	str	r3, [r7, #84]	; 0x54
 8000d92:	4b87      	ldr	r3, [pc, #540]	; (8000fb0 <run_breaker+0x310>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f1a3 011e 	sub.w	r1, r3, #30
 8000d9c:	4b85      	ldr	r3, [pc, #532]	; (8000fb4 <run_breaker+0x314>)
 8000d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8000da2:	1aca      	subs	r2, r1, r3
 8000da4:	0852      	lsrs	r2, r2, #1
 8000da6:	4413      	add	r3, r2
 8000da8:	091a      	lsrs	r2, r3, #4
 8000daa:	4613      	mov	r3, r2
 8000dac:	015b      	lsls	r3, r3, #5
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	1aca      	subs	r2, r1, r3
 8000db2:	f102 031e 	add.w	r3, r2, #30
 8000db6:	65bb      	str	r3, [r7, #88]	; 0x58
 8000db8:	4b7d      	ldr	r3, [pc, #500]	; (8000fb0 <run_breaker+0x310>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	6819      	ldr	r1, [r3, #0]
 8000dbe:	4b7e      	ldr	r3, [pc, #504]	; (8000fb8 <run_breaker+0x318>)
 8000dc0:	fba3 2301 	umull	r2, r3, r3, r1
 8000dc4:	095a      	lsrs	r2, r3, #5
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	011b      	lsls	r3, r3, #4
 8000dca:	1a9b      	subs	r3, r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	1aca      	subs	r2, r1, r3
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
		WallClock temp_clock11 = { .hour = 0, .minute = (*random1 % 5), .second = (*random1 % 60)};
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000dd8:	4b75      	ldr	r3, [pc, #468]	; (8000fb0 <run_breaker+0x310>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	6819      	ldr	r1, [r3, #0]
 8000dde:	4b77      	ldr	r3, [pc, #476]	; (8000fbc <run_breaker+0x31c>)
 8000de0:	fba3 2301 	umull	r2, r3, r3, r1
 8000de4:	089a      	lsrs	r2, r3, #2
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	1aca      	subs	r2, r1, r3
 8000dee:	4613      	mov	r3, r2
 8000df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000df2:	4b6f      	ldr	r3, [pc, #444]	; (8000fb0 <run_breaker+0x310>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6819      	ldr	r1, [r3, #0]
 8000df8:	4b6f      	ldr	r3, [pc, #444]	; (8000fb8 <run_breaker+0x318>)
 8000dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8000dfe:	095a      	lsrs	r2, r3, #5
 8000e00:	4613      	mov	r3, r2
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	1a9b      	subs	r3, r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	1aca      	subs	r2, r1, r3
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	653b      	str	r3, [r7, #80]	; 0x50
		breaker.break_time1 = add_clocks(breaker.break_time1,Clock);
 8000e0e:	4d63      	ldr	r5, [pc, #396]	; (8000f9c <run_breaker+0x2fc>)
 8000e10:	f107 0408 	add.w	r4, r7, #8
 8000e14:	4e61      	ldr	r6, [pc, #388]	; (8000f9c <run_breaker+0x2fc>)
 8000e16:	4a64      	ldr	r2, [pc, #400]	; (8000fa8 <run_breaker+0x308>)
 8000e18:	466b      	mov	r3, sp
 8000e1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000e20:	f106 030c 	add.w	r3, r6, #12
 8000e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e26:	4620      	mov	r0, r4
 8000e28:	f000 fa05 	bl	8001236 <add_clocks>
 8000e2c:	f105 030c 	add.w	r3, r5, #12
 8000e30:	f107 0208 	add.w	r2, r7, #8
 8000e34:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time1 = add_clocks(breaker.break_time1,temp_clock1);
 8000e3a:	4e58      	ldr	r6, [pc, #352]	; (8000f9c <run_breaker+0x2fc>)
 8000e3c:	f107 0508 	add.w	r5, r7, #8
 8000e40:	4b56      	ldr	r3, [pc, #344]	; (8000f9c <run_breaker+0x2fc>)
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	466c      	mov	r4, sp
 8000e46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	330c      	adds	r3, #12
 8000e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e58:	4628      	mov	r0, r5
 8000e5a:	f000 f9ec 	bl	8001236 <add_clocks>
 8000e5e:	f106 030c 	add.w	r3, r6, #12
 8000e62:	f107 0208 	add.w	r2, r7, #8
 8000e66:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration1 = add_clocks(breaker.break_duration1,temp_clock11);
 8000e6c:	4e4b      	ldr	r6, [pc, #300]	; (8000f9c <run_breaker+0x2fc>)
 8000e6e:	f107 0508 	add.w	r5, r7, #8
 8000e72:	4b4a      	ldr	r3, [pc, #296]	; (8000f9c <run_breaker+0x2fc>)
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	466c      	mov	r4, sp
 8000e78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3318      	adds	r3, #24
 8000e88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	f000 f9d3 	bl	8001236 <add_clocks>
 8000e90:	f106 0318 	add.w	r3, r6, #24
 8000e94:	f107 0208 	add.w	r2, r7, #8
 8000e98:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
	if(breaker.start_break[2] == 1){
 8000e9e:	4b3f      	ldr	r3, [pc, #252]	; (8000f9c <run_breaker+0x2fc>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	f040 80aa 	bne.w	8000ffc <run_breaker+0x35c>
		breaker.start_break[2] = 0;
 8000ea8:	4b3c      	ldr	r3, [pc, #240]	; (8000f9c <run_breaker+0x2fc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
		HAL_RNG_Init(&hrng);
 8000eae:	483f      	ldr	r0, [pc, #252]	; (8000fac <run_breaker+0x30c>)
 8000eb0:	f003 fef8 	bl	8004ca4 <HAL_RNG_Init>
		HAL_RNG_GenerateRandomNumber(&hrng,random2);
 8000eb4:	4b42      	ldr	r3, [pc, #264]	; (8000fc0 <run_breaker+0x320>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	483c      	ldr	r0, [pc, #240]	; (8000fac <run_breaker+0x30c>)
 8000ebc:	f003 ff49 	bl	8004d52 <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock2 = { .hour = 0, .minute = (30 + (*random2 - 30) % 31), .second = (*random2 % 60)};
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ec4:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <run_breaker+0x320>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f1a3 011e 	sub.w	r1, r3, #30
 8000ece:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <run_breaker+0x314>)
 8000ed0:	fba3 2301 	umull	r2, r3, r3, r1
 8000ed4:	1aca      	subs	r2, r1, r3
 8000ed6:	0852      	lsrs	r2, r2, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	091a      	lsrs	r2, r3, #4
 8000edc:	4613      	mov	r3, r2
 8000ede:	015b      	lsls	r3, r3, #5
 8000ee0:	1a9b      	subs	r3, r3, r2
 8000ee2:	1aca      	subs	r2, r1, r3
 8000ee4:	f102 031e 	add.w	r3, r2, #30
 8000ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8000eea:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <run_breaker+0x320>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6819      	ldr	r1, [r3, #0]
 8000ef0:	4b31      	ldr	r3, [pc, #196]	; (8000fb8 <run_breaker+0x318>)
 8000ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8000ef6:	095a      	lsrs	r2, r3, #5
 8000ef8:	4613      	mov	r3, r2
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	1aca      	subs	r2, r1, r3
 8000f02:	4613      	mov	r3, r2
 8000f04:	647b      	str	r3, [r7, #68]	; 0x44
		WallClock temp_clock22 = { .hour = 0, .minute = (*random2 % 5), .second = (*random2 % 60)};
 8000f06:	2300      	movs	r3, #0
 8000f08:	633b      	str	r3, [r7, #48]	; 0x30
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <run_breaker+0x320>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6819      	ldr	r1, [r3, #0]
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <run_breaker+0x31c>)
 8000f12:	fba3 2301 	umull	r2, r3, r3, r1
 8000f16:	089a      	lsrs	r2, r3, #2
 8000f18:	4613      	mov	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	1aca      	subs	r2, r1, r3
 8000f20:	4613      	mov	r3, r2
 8000f22:	637b      	str	r3, [r7, #52]	; 0x34
 8000f24:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <run_breaker+0x320>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6819      	ldr	r1, [r3, #0]
 8000f2a:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <run_breaker+0x318>)
 8000f2c:	fba3 2301 	umull	r2, r3, r3, r1
 8000f30:	095a      	lsrs	r2, r3, #5
 8000f32:	4613      	mov	r3, r2
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	1a9b      	subs	r3, r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	1aca      	subs	r2, r1, r3
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
		breaker.break_time2 = add_clocks(breaker.break_time2,Clock);
 8000f40:	4d16      	ldr	r5, [pc, #88]	; (8000f9c <run_breaker+0x2fc>)
 8000f42:	f107 0408 	add.w	r4, r7, #8
 8000f46:	4e15      	ldr	r6, [pc, #84]	; (8000f9c <run_breaker+0x2fc>)
 8000f48:	4a17      	ldr	r2, [pc, #92]	; (8000fa8 <run_breaker+0x308>)
 8000f4a:	466b      	mov	r3, sp
 8000f4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000f52:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f58:	4620      	mov	r0, r4
 8000f5a:	f000 f96c 	bl	8001236 <add_clocks>
 8000f5e:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8000f62:	f107 0208 	add.w	r2, r7, #8
 8000f66:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time2 = add_clocks(breaker.break_time2,temp_clock2);
 8000f6c:	4e0b      	ldr	r6, [pc, #44]	; (8000f9c <run_breaker+0x2fc>)
 8000f6e:	f107 0508 	add.w	r5, r7, #8
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <run_breaker+0x2fc>)
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	466c      	mov	r4, sp
 8000f78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3324      	adds	r3, #36	; 0x24
 8000f88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	f000 f953 	bl	8001236 <add_clocks>
 8000f90:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000f94:	f107 0208 	add.w	r2, r7, #8
 8000f98:	e014      	b.n	8000fc4 <run_breaker+0x324>
 8000f9a:	bf00      	nop
 8000f9c:	20000094 	.word	0x20000094
 8000fa0:	200003bc 	.word	0x200003bc
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	200002b8 	.word	0x200002b8
 8000fb0:	200000e8 	.word	0x200000e8
 8000fb4:	08421085 	.word	0x08421085
 8000fb8:	88888889 	.word	0x88888889
 8000fbc:	cccccccd 	.word	0xcccccccd
 8000fc0:	200000ec 	.word	0x200000ec
 8000fc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration2 = add_clocks(breaker.break_duration2,temp_clock22);
 8000fca:	4e5b      	ldr	r6, [pc, #364]	; (8001138 <run_breaker+0x498>)
 8000fcc:	f107 0508 	add.w	r5, r7, #8
 8000fd0:	4b59      	ldr	r3, [pc, #356]	; (8001138 <run_breaker+0x498>)
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	466c      	mov	r4, sp
 8000fd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3330      	adds	r3, #48	; 0x30
 8000fe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fe8:	4628      	mov	r0, r5
 8000fea:	f000 f924 	bl	8001236 <add_clocks>
 8000fee:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8000ff2:	f107 0208 	add.w	r2, r7, #8
 8000ff6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ff8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
	if(breaker.start_break[3] == 1){
 8000ffc:	4b4e      	ldr	r3, [pc, #312]	; (8001138 <run_breaker+0x498>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b01      	cmp	r3, #1
 8001002:	f040 8094 	bne.w	800112e <run_breaker+0x48e>
		breaker.start_break[3] = 0;
 8001006:	4b4c      	ldr	r3, [pc, #304]	; (8001138 <run_breaker+0x498>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
		HAL_RNG_Init(&hrng);
 800100c:	484b      	ldr	r0, [pc, #300]	; (800113c <run_breaker+0x49c>)
 800100e:	f003 fe49 	bl	8004ca4 <HAL_RNG_Init>
		HAL_RNG_GenerateRandomNumber(&hrng,random3);
 8001012:	4b4b      	ldr	r3, [pc, #300]	; (8001140 <run_breaker+0x4a0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4619      	mov	r1, r3
 8001018:	4848      	ldr	r0, [pc, #288]	; (800113c <run_breaker+0x49c>)
 800101a:	f003 fe9a 	bl	8004d52 <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock3 = { .hour = 0, .minute = (30 + (*random3 - 30) % 31), .second = (*random3 % 60)};
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
 8001022:	4b47      	ldr	r3, [pc, #284]	; (8001140 <run_breaker+0x4a0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f1a3 011e 	sub.w	r1, r3, #30
 800102c:	4b45      	ldr	r3, [pc, #276]	; (8001144 <run_breaker+0x4a4>)
 800102e:	fba3 2301 	umull	r2, r3, r3, r1
 8001032:	1aca      	subs	r2, r1, r3
 8001034:	0852      	lsrs	r2, r2, #1
 8001036:	4413      	add	r3, r2
 8001038:	091a      	lsrs	r2, r3, #4
 800103a:	4613      	mov	r3, r2
 800103c:	015b      	lsls	r3, r3, #5
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	1aca      	subs	r2, r1, r3
 8001042:	f102 031e 	add.w	r3, r2, #30
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
 8001048:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <run_breaker+0x4a0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6819      	ldr	r1, [r3, #0]
 800104e:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <run_breaker+0x4a8>)
 8001050:	fba3 2301 	umull	r2, r3, r3, r1
 8001054:	095a      	lsrs	r2, r3, #5
 8001056:	4613      	mov	r3, r2
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	1a9b      	subs	r3, r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	1aca      	subs	r2, r1, r3
 8001060:	4613      	mov	r3, r2
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
		WallClock temp_clock33 = { .hour = 0, .minute = (*random3 % 5), .second = (*random3 % 60)};
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	4b35      	ldr	r3, [pc, #212]	; (8001140 <run_breaker+0x4a0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6819      	ldr	r1, [r3, #0]
 800106e:	4b37      	ldr	r3, [pc, #220]	; (800114c <run_breaker+0x4ac>)
 8001070:	fba3 2301 	umull	r2, r3, r3, r1
 8001074:	089a      	lsrs	r2, r3, #2
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	1aca      	subs	r2, r1, r3
 800107e:	4613      	mov	r3, r2
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <run_breaker+0x4a0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6819      	ldr	r1, [r3, #0]
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <run_breaker+0x4a8>)
 800108a:	fba3 2301 	umull	r2, r3, r3, r1
 800108e:	095a      	lsrs	r2, r3, #5
 8001090:	4613      	mov	r3, r2
 8001092:	011b      	lsls	r3, r3, #4
 8001094:	1a9b      	subs	r3, r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	1aca      	subs	r2, r1, r3
 800109a:	4613      	mov	r3, r2
 800109c:	623b      	str	r3, [r7, #32]
		breaker.break_time3 = add_clocks(breaker.break_time3,Clock);
 800109e:	4d26      	ldr	r5, [pc, #152]	; (8001138 <run_breaker+0x498>)
 80010a0:	f107 0408 	add.w	r4, r7, #8
 80010a4:	4e24      	ldr	r6, [pc, #144]	; (8001138 <run_breaker+0x498>)
 80010a6:	4a2a      	ldr	r2, [pc, #168]	; (8001150 <run_breaker+0x4b0>)
 80010a8:	466b      	mov	r3, sp
 80010aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80010ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010b0:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 80010b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010b6:	4620      	mov	r0, r4
 80010b8:	f000 f8bd 	bl	8001236 <add_clocks>
 80010bc:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 80010c0:	f107 0208 	add.w	r2, r7, #8
 80010c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time3 = add_clocks(breaker.break_time3,temp_clock3);
 80010ca:	4e1b      	ldr	r6, [pc, #108]	; (8001138 <run_breaker+0x498>)
 80010cc:	f107 0508 	add.w	r5, r7, #8
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <run_breaker+0x498>)
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	466c      	mov	r4, sp
 80010d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	333c      	adds	r3, #60	; 0x3c
 80010e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010e8:	4628      	mov	r0, r5
 80010ea:	f000 f8a4 	bl	8001236 <add_clocks>
 80010ee:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 80010f2:	f107 0208 	add.w	r2, r7, #8
 80010f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration3 =  add_clocks(breaker.break_duration3,temp_clock33);
 80010fc:	4e0e      	ldr	r6, [pc, #56]	; (8001138 <run_breaker+0x498>)
 80010fe:	f107 0508 	add.w	r5, r7, #8
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <run_breaker+0x498>)
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	466c      	mov	r4, sp
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001110:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3348      	adds	r3, #72	; 0x48
 8001118:	cb0e      	ldmia	r3, {r1, r2, r3}
 800111a:	4628      	mov	r0, r5
 800111c:	f000 f88b 	bl	8001236 <add_clocks>
 8001120:	f106 0348 	add.w	r3, r6, #72	; 0x48
 8001124:	f107 0208 	add.w	r2, r7, #8
 8001128:	ca07      	ldmia	r2, {r0, r1, r2}
 800112a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}

}
 800112e:	bf00      	nop
 8001130:	3764      	adds	r7, #100	; 0x64
 8001132:	46bd      	mov	sp, r7
 8001134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001136:	bf00      	nop
 8001138:	20000094 	.word	0x20000094
 800113c:	200002b8 	.word	0x200002b8
 8001140:	200000f0 	.word	0x200000f0
 8001144:	08421085 	.word	0x08421085
 8001148:	88888889 	.word	0x88888889
 800114c:	cccccccd 	.word	0xcccccccd
 8001150:	20000000 	.word	0x20000000

08001154 <clock_init>:
//The main clock to be checked by the program
//Declare extern within the header file
WallClock Clock = {.hour = 9, .minute = 0, .second = 0};


WallClock clock_init(WallClock the_clock) {
 8001154:	b490      	push	{r4, r7}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	4638      	mov	r0, r7
 800115e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Initialize the main clock
	WallClock tempClock = the_clock;
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	463a      	mov	r2, r7
 8001168:	ca07      	ldmia	r2, {r0, r1, r2}
 800116a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	tempClock.hour = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
	tempClock.minute = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
	tempClock.second = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]

	return tempClock;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	461c      	mov	r4, r3
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001186:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	3720      	adds	r7, #32
 800118e:	46bd      	mov	sp, r7
 8001190:	bc90      	pop	{r4, r7}
 8001192:	4770      	bx	lr

08001194 <day_init>:

WallClock day_init(WallClock the_clock) {
 8001194:	b490      	push	{r4, r7}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	4638      	mov	r0, r7
 800119e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Initialize the main clock
	WallClock tempClock = the_clock;
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	463a      	mov	r2, r7
 80011a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	tempClock.hour = 9;
 80011ae:	2309      	movs	r3, #9
 80011b0:	617b      	str	r3, [r7, #20]
	tempClock.minute = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
	tempClock.second = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]

	return tempClock;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	461c      	mov	r4, r3
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	3720      	adds	r7, #32
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc90      	pop	{r4, r7}
 80011d2:	4770      	bx	lr

080011d4 <clock_increment>:

WallClock clock_increment(WallClock the_clock){
 80011d4:	b490      	push	{r4, r7}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	4638      	mov	r0, r7
 80011de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	WallClock tempClock = the_clock;
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	463a      	mov	r2, r7
 80011e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Check if second is full, if so then increment
	//minute count and reset second count to 0
	//if minute count full increment hour count and reset minutes to 0
	if(tempClock.second >= 59){
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	2b3a      	cmp	r3, #58	; 0x3a
 80011f2:	dd10      	ble.n	8001216 <clock_increment+0x42>
		tempClock.second -= 59;
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	3b3b      	subs	r3, #59	; 0x3b
 80011f8:	61fb      	str	r3, [r7, #28]
		if(tempClock.minute >= 59){
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	2b3a      	cmp	r3, #58	; 0x3a
 80011fe:	dd06      	ble.n	800120e <clock_increment+0x3a>
			tempClock.minute -= 59;
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	3b3b      	subs	r3, #59	; 0x3b
 8001204:	61bb      	str	r3, [r7, #24]
			tempClock.hour += 1;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	e006      	b.n	800121c <clock_increment+0x48>
		}
		else{
			tempClock.minute += 1;
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	3301      	adds	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	e002      	b.n	800121c <clock_increment+0x48>
		}
	}
	else{
		tempClock.second += 1;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3301      	adds	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
	}
	return tempClock;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	461c      	mov	r4, r3
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bc90      	pop	{r4, r7}
 8001234:	4770      	bx	lr

08001236 <add_clocks>:

WallClock add_clocks(WallClock Clock1, WallClock Clock2){
 8001236:	b490      	push	{r4, r7}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	4638      	mov	r0, r7
 8001240:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Adds seconds then minutes then hours, accounting for overflows as needed
	//Add seconds and account overflow
	Clock1.second += Clock2.second;
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	6a3b      	ldr	r3, [r7, #32]
 8001248:	4413      	add	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
	if(Clock1.second >= 60){
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2b3b      	cmp	r3, #59	; 0x3b
 8001250:	dd0e      	ble.n	8001270 <add_clocks+0x3a>
		Clock1.minute += 1;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3301      	adds	r3, #1
 8001256:	607b      	str	r3, [r7, #4]
		Clock1.second -= 60;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	3b3c      	subs	r3, #60	; 0x3c
 800125c:	60bb      	str	r3, [r7, #8]
		if(Clock1.minute >= 60){
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b3b      	cmp	r3, #59	; 0x3b
 8001262:	dd05      	ble.n	8001270 <add_clocks+0x3a>
			Clock1.hour += 1;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	3301      	adds	r3, #1
 8001268:	603b      	str	r3, [r7, #0]
			Clock1.minute -= 60;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3b3c      	subs	r3, #60	; 0x3c
 800126e:	607b      	str	r3, [r7, #4]
		}
	}
	//Add minutes and account overflow
	Clock1.minute += Clock2.minute;
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	4413      	add	r3, r2
 8001276:	607b      	str	r3, [r7, #4]
	if(Clock1.minute >= 60){
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b3b      	cmp	r3, #59	; 0x3b
 800127c:	dd05      	ble.n	800128a <add_clocks+0x54>
		Clock1.hour += 1;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	603b      	str	r3, [r7, #0]
		Clock1.minute -= 60;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b3c      	subs	r3, #60	; 0x3c
 8001288:	607b      	str	r3, [r7, #4]
	}
	//Add hours, don't account overflow as impossible
	Clock1.hour += Clock2.hour;
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	4413      	add	r3, r2
 8001290:	603b      	str	r3, [r7, #0]

	return Clock1;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	461c      	mov	r4, r3
 8001296:	463b      	mov	r3, r7
 8001298:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800129c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc90      	pop	{r4, r7}
 80012a8:	4770      	bx	lr

080012aa <clock_compare>:

//if clock 1 is greater than clock 2(later) then return 0
//if clock 1 is less than clock 2(earlier) then return 2
int clock_compare(WallClock Clock1, WallClock Clock2){
 80012aa:	b082      	sub	sp, #8
 80012ac:	b490      	push	{r4, r7}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	1d3c      	adds	r4, r7, #4
 80012b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012b8:	61fb      	str	r3, [r7, #28]
	if(Clock1.hour == Clock2.hour){
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d121      	bne.n	8001306 <clock_compare+0x5c>
		if(Clock1.minute == Clock2.minute){
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d111      	bne.n	80012ee <clock_compare+0x44>
			if(Clock1.second == Clock2.second){
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d101      	bne.n	80012d6 <clock_compare+0x2c>
				return 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e024      	b.n	8001320 <clock_compare+0x76>
			}
			else if(Clock1.second > Clock2.second){
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	429a      	cmp	r2, r3
 80012dc:	dd01      	ble.n	80012e2 <clock_compare+0x38>
				return 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	e01e      	b.n	8001320 <clock_compare+0x76>
			}
			else if(Clock1.second < Clock2.second){
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	429a      	cmp	r2, r3
 80012e8:	da19      	bge.n	800131e <clock_compare+0x74>
				return 2;
 80012ea:	2302      	movs	r3, #2
 80012ec:	e018      	b.n	8001320 <clock_compare+0x76>
			}
		}
		else if(Clock1.minute > Clock2.minute){
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dd01      	ble.n	80012fa <clock_compare+0x50>
			return 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e012      	b.n	8001320 <clock_compare+0x76>
		}
		else if(Clock1.minute < Clock2.minute){
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	429a      	cmp	r2, r3
 8001300:	da0d      	bge.n	800131e <clock_compare+0x74>
			return 2;
 8001302:	2302      	movs	r3, #2
 8001304:	e00c      	b.n	8001320 <clock_compare+0x76>
		}
	}
	else if(Clock1.hour > Clock2.hour){
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	429a      	cmp	r2, r3
 800130c:	dd01      	ble.n	8001312 <clock_compare+0x68>
		return 0;
 800130e:	2300      	movs	r3, #0
 8001310:	e006      	b.n	8001320 <clock_compare+0x76>
	}
	else if(Clock1.hour < Clock2.hour){
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	429a      	cmp	r2, r3
 8001318:	da01      	bge.n	800131e <clock_compare+0x74>
		return 2;
 800131a:	2302      	movs	r3, #2
 800131c:	e000      	b.n	8001320 <clock_compare+0x76>
	}
	return 0;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bc90      	pop	{r4, r7}
 8001328:	b002      	add	sp, #8
 800132a:	4770      	bx	lr

0800132c <subtract_Clocks>:

WallClock subtract_Clocks(WallClock clock1, WallClock clock2) {
 800132c:	b490      	push	{r4, r7}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	4638      	mov	r0, r7
 8001336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    WallClock result;

    // Convert both clocks to total seconds
    int totalSeconds1 = clock1.hour * 3600 + clock1.minute * 60 + clock1.second;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001340:	fb02 f103 	mul.w	r1, r2, r3
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	1a9b      	subs	r3, r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	18ca      	adds	r2, r1, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4413      	add	r3, r2
 8001354:	623b      	str	r3, [r7, #32]
    int totalSeconds2 = clock2.hour * 3600 + clock2.minute * 60 + clock2.second;
 8001356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001358:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800135c:	fb02 f103 	mul.w	r1, r2, r3
 8001360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001362:	4613      	mov	r3, r2
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	1a9b      	subs	r3, r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	18ca      	adds	r2, r1, r3
 800136c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800136e:	4413      	add	r3, r2
 8001370:	61fb      	str	r3, [r7, #28]

    // Calculate the difference in total seconds
    int diffSeconds = totalSeconds1 - totalSeconds2;
 8001372:	6a3a      	ldr	r2, [r7, #32]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	627b      	str	r3, [r7, #36]	; 0x24

    // Handle negative differences
    if (diffSeconds < 0) {
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	2b00      	cmp	r3, #0
 800137e:	da05      	bge.n	800138c <subtract_Clocks+0x60>
        diffSeconds += 24 * 3600; // Assuming clocks are within a 24-hour period
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001386:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Convert difference back to clock format
    result.hour = diffSeconds / 3600;
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <subtract_Clocks+0xd8>)
 8001390:	fb82 1203 	smull	r1, r2, r2, r3
 8001394:	441a      	add	r2, r3
 8001396:	12d2      	asrs	r2, r2, #11
 8001398:	17db      	asrs	r3, r3, #31
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	613b      	str	r3, [r7, #16]
    diffSeconds %= 3600;
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	4a18      	ldr	r2, [pc, #96]	; (8001404 <subtract_Clocks+0xd8>)
 80013a2:	fb82 1203 	smull	r1, r2, r2, r3
 80013a6:	441a      	add	r2, r3
 80013a8:	12d1      	asrs	r1, r2, #11
 80013aa:	17da      	asrs	r2, r3, #31
 80013ac:	1a8a      	subs	r2, r1, r2
 80013ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80013b2:	fb01 f202 	mul.w	r2, r1, r2
 80013b6:	1a9b      	subs	r3, r3, r2
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
    result.minute = diffSeconds / 60;
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	4a12      	ldr	r2, [pc, #72]	; (8001408 <subtract_Clocks+0xdc>)
 80013be:	fb82 1203 	smull	r1, r2, r2, r3
 80013c2:	441a      	add	r2, r3
 80013c4:	1152      	asrs	r2, r2, #5
 80013c6:	17db      	asrs	r3, r3, #31
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	617b      	str	r3, [r7, #20]
    result.second = diffSeconds % 60;
 80013cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <subtract_Clocks+0xdc>)
 80013d0:	fb83 1302 	smull	r1, r3, r3, r2
 80013d4:	4413      	add	r3, r2
 80013d6:	1159      	asrs	r1, r3, #5
 80013d8:	17d3      	asrs	r3, r2, #31
 80013da:	1ac9      	subs	r1, r1, r3
 80013dc:	460b      	mov	r3, r1
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	1a5b      	subs	r3, r3, r1
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	1ad1      	subs	r1, r2, r3
 80013e6:	61b9      	str	r1, [r7, #24]

    return result;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	461c      	mov	r4, r3
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80013f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc90      	pop	{r4, r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	91a2b3c5 	.word	0x91a2b3c5
 8001408:	88888889 	.word	0x88888889

0800140c <init_GPIO>:
WallClock total_customer_wait;
WallClock max_customer_wait;
int total_customers;
WallClock fiveOclockSomewhere = {.hour = 17, .minute = 0, .second = 0};

void init_GPIO(){
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <init_GPIO+0xac>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <init_GPIO+0xac>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <init_GPIO+0xac>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <init_GPIO+0xac>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <init_GPIO+0xac>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <init_GPIO+0xac>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pins : SHLD_D13_Pin SHLD_D12_Pin SHLD_D11_Pin SHLD_D7_SEG7_Clock_Pin */
	GPIO_InitStruct.Pin = SHLD_D13_Pin|SHLD_D12_Pin|SHLD_D11_Pin|SHLD_D7_SEG7_Clock_Pin;
 8001452:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001456:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	4619      	mov	r1, r3
 800146a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146e:	f001 ff1f 	bl	80032b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SHLD_D8_SEG7_Data_Pin */
	GPIO_InitStruct.Pin = SHLD_D8_SEG7_Data_Pin;
 8001472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001476:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001480:	2301      	movs	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SHLD_D8_SEG7_Data_GPIO_Port, &GPIO_InitStruct);
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f001 ff0f 	bl	80032b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
	GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 8001492:	2310      	movs	r3, #16
 8001494:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	4619      	mov	r1, r3
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <init_GPIO+0xb0>)
 80014aa:	f001 ff01 	bl	80032b0 <HAL_GPIO_Init>
}
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	48000400 	.word	0x48000400

080014c0 <init_customer>:

void init_customer(){
 80014c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af04      	add	r7, sp, #16
	total_customers = 0;
 80014c6:	4b30      	ldr	r3, [pc, #192]	; (8001588 <init_customer+0xc8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
	total_customer_wait = clock_init(total_customer_wait);
 80014cc:	4c2f      	ldr	r4, [pc, #188]	; (800158c <init_customer+0xcc>)
 80014ce:	4638      	mov	r0, r7
 80014d0:	4b2e      	ldr	r3, [pc, #184]	; (800158c <init_customer+0xcc>)
 80014d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014d4:	f7ff fe3e 	bl	8001154 <clock_init>
 80014d8:	463b      	mov	r3, r7
 80014da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	max_customer_waiting = 0;
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <init_customer+0xd0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
	max_customer_wait = clock_init(max_customer_wait);
 80014e8:	4c2a      	ldr	r4, [pc, #168]	; (8001594 <init_customer+0xd4>)
 80014ea:	4638      	mov	r0, r7
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <init_customer+0xd4>)
 80014ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f0:	f7ff fe30 	bl	8001154 <clock_init>
 80014f4:	463b      	mov	r3, r7
 80014f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	waiting_customers = 0;
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <init_customer+0xd8>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
	HAL_RNG_GenerateRandomNumber(&hrng, random_new_customer);
 8001504:	4b25      	ldr	r3, [pc, #148]	; (800159c <init_customer+0xdc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	4825      	ldr	r0, [pc, #148]	; (80015a0 <init_customer+0xe0>)
 800150c:	f003 fc21 	bl	8004d52 <HAL_RNG_GenerateRandomNumber>
	new_customer_time->hour = 0;
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <init_customer+0xe4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
	new_customer_time->minute = (*random_new_customer % 5);
 8001518:	4b20      	ldr	r3, [pc, #128]	; (800159c <init_customer+0xdc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6819      	ldr	r1, [r3, #0]
 800151e:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <init_customer+0xe8>)
 8001520:	fba3 2301 	umull	r2, r3, r3, r1
 8001524:	089a      	lsrs	r2, r3, #2
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	1aca      	subs	r2, r1, r3
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <init_customer+0xe4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
	new_customer_time->second = (*random_new_customer % 60);
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <init_customer+0xdc>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6819      	ldr	r1, [r3, #0]
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <init_customer+0xec>)
 800153c:	fba3 2301 	umull	r2, r3, r3, r1
 8001540:	095a      	lsrs	r2, r3, #5
 8001542:	4613      	mov	r3, r2
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	1aca      	subs	r2, r1, r3
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <init_customer+0xe4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	609a      	str	r2, [r3, #8]
	*new_customer_time = add_clocks(*new_customer_time, Clock);
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <init_customer+0xe4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <init_customer+0xe4>)
 8001558:	6816      	ldr	r6, [r2, #0]
 800155a:	463d      	mov	r5, r7
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <init_customer+0xf0>)
 800155e:	466c      	mov	r4, sp
 8001560:	ca07      	ldmia	r2, {r0, r1, r2}
 8001562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001566:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001568:	4628      	mov	r0, r5
 800156a:	f7ff fe64 	bl	8001236 <add_clocks>
 800156e:	4634      	mov	r4, r6
 8001570:	463b      	mov	r3, r7
 8001572:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	init_GPIO();
 800157a:	f7ff ff47 	bl	800140c <init_GPIO>

}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001586:	bf00      	nop
 8001588:	200002b4 	.word	0x200002b4
 800158c:	2000029c 	.word	0x2000029c
 8001590:	200000f4 	.word	0x200000f4
 8001594:	200002a8 	.word	0x200002a8
 8001598:	200000f8 	.word	0x200000f8
 800159c:	20000294 	.word	0x20000294
 80015a0:	200002b8 	.word	0x200002b8
 80015a4:	2000028c 	.word	0x2000028c
 80015a8:	cccccccd 	.word	0xcccccccd
 80015ac:	88888889 	.word	0x88888889
 80015b0:	20000000 	.word	0x20000000

080015b4 <run_customer>:



void run_customer(){
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	b091      	sub	sp, #68	; 0x44
 80015b8:	af04      	add	r7, sp, #16
	// shift customers if first customers want to
	if((waiting[0] == NULL) && waiting[1] != NULL){
 80015ba:	4b89      	ldr	r3, [pc, #548]	; (80017e0 <run_customer+0x22c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d11c      	bne.n	80015fc <run_customer+0x48>
 80015c2:	4b87      	ldr	r3, [pc, #540]	; (80017e0 <run_customer+0x22c>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d018      	beq.n	80015fc <run_customer+0x48>
		for (int i = 0; i < waiting_customers; i++){
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ce:	e00b      	b.n	80015e8 <run_customer+0x34>
			waiting[i] = waiting[i+1];
 80015d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a82      	ldr	r2, [pc, #520]	; (80017e0 <run_customer+0x22c>)
 80015d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015da:	4981      	ldr	r1, [pc, #516]	; (80017e0 <run_customer+0x22c>)
 80015dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < waiting_customers; i++){
 80015e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e4:	3301      	adds	r3, #1
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e8:	4b7e      	ldr	r3, [pc, #504]	; (80017e4 <run_customer+0x230>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dbee      	blt.n	80015d0 <run_customer+0x1c>
		}
		waiting_customers--;
 80015f2:	4b7c      	ldr	r3, [pc, #496]	; (80017e4 <run_customer+0x230>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	4a7a      	ldr	r2, [pc, #488]	; (80017e4 <run_customer+0x230>)
 80015fa:	6013      	str	r3, [r2, #0]
	}

	for (int i = 0; i < waiting_customers; i++){
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001600:	e015      	b.n	800162e <run_customer+0x7a>
		waiting[i]->total_queue_time = clock_increment(waiting[i]->total_queue_time);
 8001602:	4a77      	ldr	r2, [pc, #476]	; (80017e0 <run_customer+0x22c>)
 8001604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160a:	4975      	ldr	r1, [pc, #468]	; (80017e0 <run_customer+0x22c>)
 800160c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800160e:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 8001612:	4638      	mov	r0, r7
 8001614:	3328      	adds	r3, #40	; 0x28
 8001616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001618:	f7ff fddc 	bl	80011d4 <clock_increment>
 800161c:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8001620:	463a      	mov	r2, r7
 8001622:	ca07      	ldmia	r2, {r0, r1, r2}
 8001624:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < waiting_customers; i++){
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	3301      	adds	r3, #1
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
 800162e:	4b6d      	ldr	r3, [pc, #436]	; (80017e4 <run_customer+0x230>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001634:	429a      	cmp	r2, r3
 8001636:	dbe4      	blt.n	8001602 <run_customer+0x4e>
	}

	// add new customer if enough time has passed
	if (clock_compare(Clock, *new_customer_time) == 1 && clock_compare(Clock, fiveOclockSomewhere) == 2){
 8001638:	4b6b      	ldr	r3, [pc, #428]	; (80017e8 <run_customer+0x234>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a6b      	ldr	r2, [pc, #428]	; (80017ec <run_customer+0x238>)
 800163e:	466c      	mov	r4, sp
 8001640:	1d19      	adds	r1, r3, #4
 8001642:	c903      	ldmia	r1, {r0, r1}
 8001644:	e884 0003 	stmia.w	r4, {r0, r1}
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	ca07      	ldmia	r2, {r0, r1, r2}
 800164c:	f7ff fe2d 	bl	80012aa <clock_compare>
 8001650:	4603      	mov	r3, r0
 8001652:	2b01      	cmp	r3, #1
 8001654:	f040 8093 	bne.w	800177e <run_customer+0x1ca>
 8001658:	4b65      	ldr	r3, [pc, #404]	; (80017f0 <run_customer+0x23c>)
 800165a:	4a64      	ldr	r2, [pc, #400]	; (80017ec <run_customer+0x238>)
 800165c:	466c      	mov	r4, sp
 800165e:	1d19      	adds	r1, r3, #4
 8001660:	c903      	ldmia	r1, {r0, r1}
 8001662:	e884 0003 	stmia.w	r4, {r0, r1}
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	ca07      	ldmia	r2, {r0, r1, r2}
 800166a:	f7ff fe1e 	bl	80012aa <clock_compare>
 800166e:	4603      	mov	r3, r0
 8001670:	2b02      	cmp	r3, #2
 8001672:	f040 8084 	bne.w	800177e <run_customer+0x1ca>
		HAL_RNG_GenerateRandomNumber(&hrng, random_service_time);
 8001676:	4b5f      	ldr	r3, [pc, #380]	; (80017f4 <run_customer+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4619      	mov	r1, r3
 800167c:	485e      	ldr	r0, [pc, #376]	; (80017f8 <run_customer+0x244>)
 800167e:	f003 fb68 	bl	8004d52 <HAL_RNG_GenerateRandomNumber>
		WallClock service_time = { .hour = 0, .minute = (*random_service_time % 7), .second = (*random_service_time % 60)};
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	4b5b      	ldr	r3, [pc, #364]	; (80017f4 <run_customer+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b5b      	ldr	r3, [pc, #364]	; (80017fc <run_customer+0x248>)
 800168e:	fba3 1302 	umull	r1, r3, r3, r2
 8001692:	1ad1      	subs	r1, r2, r3
 8001694:	0849      	lsrs	r1, r1, #1
 8001696:	440b      	add	r3, r1
 8001698:	0899      	lsrs	r1, r3, #2
 800169a:	460b      	mov	r3, r1
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	1a5b      	subs	r3, r3, r1
 80016a0:	1ad1      	subs	r1, r2, r3
 80016a2:	460b      	mov	r3, r1
 80016a4:	623b      	str	r3, [r7, #32]
 80016a6:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <run_customer+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6819      	ldr	r1, [r3, #0]
 80016ac:	4b54      	ldr	r3, [pc, #336]	; (8001800 <run_customer+0x24c>)
 80016ae:	fba3 2301 	umull	r2, r3, r3, r1
 80016b2:	095a      	lsrs	r2, r3, #5
 80016b4:	4613      	mov	r3, r2
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	1aca      	subs	r2, r1, r3
 80016be:	4613      	mov	r3, r2
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
		c->service_time = service_time;
 80016c2:	4b50      	ldr	r3, [pc, #320]	; (8001804 <run_customer+0x250>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3304      	adds	r3, #4
 80016c8:	f107 021c 	add.w	r2, r7, #28
 80016cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		c->entered_queue_time = Clock;
 80016d2:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <run_customer+0x250>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a45      	ldr	r2, [pc, #276]	; (80017ec <run_customer+0x238>)
 80016d8:	3310      	adds	r3, #16
 80016da:	ca07      	ldmia	r2, {r0, r1, r2}
 80016dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		c->total_queue_time = (WallClock) {.hour = 0, .minute = 0, .second = 0};
 80016e0:	4b48      	ldr	r3, [pc, #288]	; (8001804 <run_customer+0x250>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2200      	movs	r2, #0
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
 80016e8:	2200      	movs	r2, #0
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ec:	2200      	movs	r2, #0
 80016ee:	631a      	str	r2, [r3, #48]	; 0x30
		waiting[waiting_customers] = c;
 80016f0:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <run_customer+0x230>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a43      	ldr	r2, [pc, #268]	; (8001804 <run_customer+0x250>)
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	4939      	ldr	r1, [pc, #228]	; (80017e0 <run_customer+0x22c>)
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_RNG_GenerateRandomNumber(&hrng, random_new_customer);
 80016fe:	4b42      	ldr	r3, [pc, #264]	; (8001808 <run_customer+0x254>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4619      	mov	r1, r3
 8001704:	483c      	ldr	r0, [pc, #240]	; (80017f8 <run_customer+0x244>)
 8001706:	f003 fb24 	bl	8004d52 <HAL_RNG_GenerateRandomNumber>
		new_customer_time->hour = 0;
 800170a:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <run_customer+0x234>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
		new_customer_time->minute = (*random_new_customer % 5);
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <run_customer+0x254>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6819      	ldr	r1, [r3, #0]
 8001718:	4b3c      	ldr	r3, [pc, #240]	; (800180c <run_customer+0x258>)
 800171a:	fba3 2301 	umull	r2, r3, r3, r1
 800171e:	089a      	lsrs	r2, r3, #2
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	1aca      	subs	r2, r1, r3
 8001728:	4b2f      	ldr	r3, [pc, #188]	; (80017e8 <run_customer+0x234>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
		new_customer_time->second = (*random_new_customer % 60);
 800172e:	4b36      	ldr	r3, [pc, #216]	; (8001808 <run_customer+0x254>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6819      	ldr	r1, [r3, #0]
 8001734:	4b32      	ldr	r3, [pc, #200]	; (8001800 <run_customer+0x24c>)
 8001736:	fba3 2301 	umull	r2, r3, r3, r1
 800173a:	095a      	lsrs	r2, r3, #5
 800173c:	4613      	mov	r3, r2
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	1a9b      	subs	r3, r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	1aca      	subs	r2, r1, r3
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <run_customer+0x234>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	609a      	str	r2, [r3, #8]
		*new_customer_time = add_clocks(*new_customer_time, Clock);
 800174c:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <run_customer+0x234>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <run_customer+0x234>)
 8001752:	6816      	ldr	r6, [r2, #0]
 8001754:	463d      	mov	r5, r7
 8001756:	4a25      	ldr	r2, [pc, #148]	; (80017ec <run_customer+0x238>)
 8001758:	466c      	mov	r4, sp
 800175a:	ca07      	ldmia	r2, {r0, r1, r2}
 800175c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001760:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001762:	4628      	mov	r0, r5
 8001764:	f7ff fd67 	bl	8001236 <add_clocks>
 8001768:	4634      	mov	r4, r6
 800176a:	463b      	mov	r3, r7
 800176c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		total_customers += 1;
 8001774:	4b26      	ldr	r3, [pc, #152]	; (8001810 <run_customer+0x25c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	4a25      	ldr	r2, [pc, #148]	; (8001810 <run_customer+0x25c>)
 800177c:	6013      	str	r3, [r2, #0]
	}

	// update max customers waiting
	if (max_customer_waiting < waiting_customers){
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <run_customer+0x260>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <run_customer+0x230>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	da03      	bge.n	8001792 <run_customer+0x1de>
		max_customer_waiting = waiting_customers;
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <run_customer+0x230>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a21      	ldr	r2, [pc, #132]	; (8001814 <run_customer+0x260>)
 8001790:	6013      	str	r3, [r2, #0]

//	uint32_t display_num = 0;



	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2110      	movs	r1, #16
 8001796:	4820      	ldr	r0, [pc, #128]	; (8001818 <run_customer+0x264>)
 8001798:	f001 ff4c 	bl	8003634 <HAL_GPIO_WritePin>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, 0xC0);
 800179c:	23c0      	movs	r3, #192	; 0xc0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b0:	f000 f834 	bl	800181c <shiftOut>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, 0);
 80017b4:	2300      	movs	r3, #0
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c8:	f000 f828 	bl	800181c <shiftOut>
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	2110      	movs	r1, #16
 80017d0:	4811      	ldr	r0, [pc, #68]	; (8001818 <run_customer+0x264>)
 80017d2:	f001 ff2f 	bl	8003634 <HAL_GPIO_WritePin>
}
 80017d6:	bf00      	nop
 80017d8:	3734      	adds	r7, #52	; 0x34
 80017da:	46bd      	mov	sp, r7
 80017dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017de:	bf00      	nop
 80017e0:	200000fc 	.word	0x200000fc
 80017e4:	200000f8 	.word	0x200000f8
 80017e8:	2000028c 	.word	0x2000028c
 80017ec:	20000000 	.word	0x20000000
 80017f0:	2000000c 	.word	0x2000000c
 80017f4:	20000290 	.word	0x20000290
 80017f8:	200002b8 	.word	0x200002b8
 80017fc:	24924925 	.word	0x24924925
 8001800:	88888889 	.word	0x88888889
 8001804:	20000298 	.word	0x20000298
 8001808:	20000294 	.word	0x20000294
 800180c:	cccccccd 	.word	0xcccccccd
 8001810:	200002b4 	.word	0x200002b4
 8001814:	200000f4 	.word	0x200000f4
 8001818:	48000400 	.word	0x48000400

0800181c <shiftOut>:

void shiftOut(GPIO_TypeDef* data_port, uint16_t data_pin, GPIO_TypeDef* clock_port, uint16_t clock_pin, uint8_t value) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	461a      	mov	r2, r3
 8001828:	460b      	mov	r3, r1
 800182a:	817b      	strh	r3, [r7, #10]
 800182c:	4613      	mov	r3, r2
 800182e:	813b      	strh	r3, [r7, #8]
	for(int ii=0x80; ii; ii>>=1) {
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	e01d      	b.n	8001872 <shiftOut+0x56>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_RESET);
 8001836:	893b      	ldrh	r3, [r7, #8]
 8001838:	2200      	movs	r2, #0
 800183a:	4619      	mov	r1, r3
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f001 fef9 	bl	8003634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pin, (value&ii)!=0);
 8001842:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	bf14      	ite	ne
 800184e:	2301      	movne	r3, #1
 8001850:	2300      	moveq	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	897b      	ldrh	r3, [r7, #10]
 8001858:	4619      	mov	r1, r3
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f001 feea 	bl	8003634 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_SET);
 8001860:	893b      	ldrh	r3, [r7, #8]
 8001862:	2201      	movs	r2, #1
 8001864:	4619      	mov	r1, r3
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f001 fee4 	bl	8003634 <HAL_GPIO_WritePin>
	for(int ii=0x80; ii; ii>>=1) {
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	105b      	asrs	r3, r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1de      	bne.n	8001836 <shiftOut+0x1a>
	}
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001888:	f001 fb84 	bl	8002f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800188c:	f000 f862 	bl	8001954 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001890:	f000 f92c 	bl	8001aec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001894:	f000 f8fa 	bl	8001a8c <MX_USART2_UART_Init>
  MX_RNG_Init();
 8001898:	f000 f8ae 	bl	80019f8 <MX_RNG_Init>
  MX_TIM6_Init();
 800189c:	f000 f8c0 	bl	8001a20 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80018a0:	481a      	ldr	r0, [pc, #104]	; (800190c <main+0x88>)
 80018a2:	f003 fb83 	bl	8004fac <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018a6:	f004 fc35 	bl	8006114 <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 80018aa:	4819      	ldr	r0, [pc, #100]	; (8001910 <main+0x8c>)
 80018ac:	f004 fd0e 	bl	80062cc <osMutexNew>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4a18      	ldr	r2, [pc, #96]	; (8001914 <main+0x90>)
 80018b4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tellers */
  TellersHandle = osThreadNew(StartTellers, NULL, &Tellers_attributes);
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <main+0x94>)
 80018b8:	2100      	movs	r1, #0
 80018ba:	4818      	ldr	r0, [pc, #96]	; (800191c <main+0x98>)
 80018bc:	f004 fc74 	bl	80061a8 <osThreadNew>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4a17      	ldr	r2, [pc, #92]	; (8001920 <main+0x9c>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* creation of Customers */
  CustomersHandle = osThreadNew(StartCustomers, NULL, &Customers_attributes);
 80018c6:	4a17      	ldr	r2, [pc, #92]	; (8001924 <main+0xa0>)
 80018c8:	2100      	movs	r1, #0
 80018ca:	4817      	ldr	r0, [pc, #92]	; (8001928 <main+0xa4>)
 80018cc:	f004 fc6c 	bl	80061a8 <osThreadNew>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4a16      	ldr	r2, [pc, #88]	; (800192c <main+0xa8>)
 80018d4:	6013      	str	r3, [r2, #0]

  /* creation of Clock */
  ClockHandle = osThreadNew(StartClock, NULL, &Clock_attributes);
 80018d6:	4a16      	ldr	r2, [pc, #88]	; (8001930 <main+0xac>)
 80018d8:	2100      	movs	r1, #0
 80018da:	4816      	ldr	r0, [pc, #88]	; (8001934 <main+0xb0>)
 80018dc:	f004 fc64 	bl	80061a8 <osThreadNew>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4a15      	ldr	r2, [pc, #84]	; (8001938 <main+0xb4>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* creation of Manager */
  ManagerHandle = osThreadNew(StartManager, NULL, &Manager_attributes);
 80018e6:	4a15      	ldr	r2, [pc, #84]	; (800193c <main+0xb8>)
 80018e8:	2100      	movs	r1, #0
 80018ea:	4815      	ldr	r0, [pc, #84]	; (8001940 <main+0xbc>)
 80018ec:	f004 fc5c 	bl	80061a8 <osThreadNew>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a14      	ldr	r2, [pc, #80]	; (8001944 <main+0xc0>)
 80018f4:	6013      	str	r3, [r2, #0]

  /* creation of Breaker */
  BreakerHandle = osThreadNew(StartBreaker, NULL, &Breaker_attributes);
 80018f6:	4a14      	ldr	r2, [pc, #80]	; (8001948 <main+0xc4>)
 80018f8:	2100      	movs	r1, #0
 80018fa:	4814      	ldr	r0, [pc, #80]	; (800194c <main+0xc8>)
 80018fc:	f004 fc54 	bl	80061a8 <osThreadNew>
 8001900:	4603      	mov	r3, r0
 8001902:	4a13      	ldr	r2, [pc, #76]	; (8001950 <main+0xcc>)
 8001904:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001906:	f004 fc29 	bl	800615c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800190a:	e7fe      	b.n	800190a <main+0x86>
 800190c:	200002c8 	.word	0x200002c8
 8001910:	0800a070 	.word	0x0800a070
 8001914:	200003b0 	.word	0x200003b0
 8001918:	08009fbc 	.word	0x08009fbc
 800191c:	08001c45 	.word	0x08001c45
 8001920:	2000039c 	.word	0x2000039c
 8001924:	08009fe0 	.word	0x08009fe0
 8001928:	08001c75 	.word	0x08001c75
 800192c:	200003a0 	.word	0x200003a0
 8001930:	0800a004 	.word	0x0800a004
 8001934:	08001ca5 	.word	0x08001ca5
 8001938:	200003a4 	.word	0x200003a4
 800193c:	0800a028 	.word	0x0800a028
 8001940:	08001e01 	.word	0x08001e01
 8001944:	200003a8 	.word	0x200003a8
 8001948:	0800a04c 	.word	0x0800a04c
 800194c:	08001e2d 	.word	0x08001e2d
 8001950:	200003ac 	.word	0x200003ac

08001954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b096      	sub	sp, #88	; 0x58
 8001958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	2244      	movs	r2, #68	; 0x44
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f007 fd2a 	bl	80093bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001968:	463b      	mov	r3, r7
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001976:	f44f 7000 	mov.w	r0, #512	; 0x200
 800197a:	f001 fe81 	bl	8003680 <HAL_PWREx_ControlVoltageScaling>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001984:	f000 fa6a 	bl	8001e5c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001988:	2302      	movs	r3, #2
 800198a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800198c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001990:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001992:	2310      	movs	r3, #16
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001996:	2302      	movs	r3, #2
 8001998:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800199a:	2302      	movs	r3, #2
 800199c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800199e:	2301      	movs	r3, #1
 80019a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80019a2:	230a      	movs	r3, #10
 80019a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019a6:	2307      	movs	r3, #7
 80019a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019aa:	2302      	movs	r3, #2
 80019ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019ae:	2302      	movs	r3, #2
 80019b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 feb8 	bl	800372c <HAL_RCC_OscConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80019c2:	f000 fa4b 	bl	8001e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019c6:	230f      	movs	r3, #15
 80019c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ca:	2303      	movs	r3, #3
 80019cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019da:	463b      	mov	r3, r7
 80019dc:	2104      	movs	r1, #4
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fa80 	bl	8003ee4 <HAL_RCC_ClockConfig>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019ea:	f000 fa37 	bl	8001e5c <Error_Handler>
  }
}
 80019ee:	bf00      	nop
 80019f0:	3758      	adds	r7, #88	; 0x58
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <MX_RNG_Init+0x20>)
 80019fe:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <MX_RNG_Init+0x24>)
 8001a00:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_RNG_Init+0x20>)
 8001a04:	f003 f94e 	bl	8004ca4 <HAL_RNG_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001a0e:	f000 fa25 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200002b8 	.word	0x200002b8
 8001a1c:	50060800 	.word	0x50060800

08001a20 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_TIM6_Init+0x64>)
 8001a32:	4a15      	ldr	r2, [pc, #84]	; (8001a88 <MX_TIM6_Init+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 125;
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <MX_TIM6_Init+0x64>)
 8001a38:	227d      	movs	r2, #125	; 0x7d
 8001a3a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_TIM6_Init+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MX_TIM6_Init+0x64>)
 8001a44:	2264      	movs	r2, #100	; 0x64
 8001a46:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_TIM6_Init+0x64>)
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a4e:	480d      	ldr	r0, [pc, #52]	; (8001a84 <MX_TIM6_Init+0x64>)
 8001a50:	f003 fa54 	bl	8004efc <HAL_TIM_Base_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001a5a:	f000 f9ff 	bl	8001e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4806      	ldr	r0, [pc, #24]	; (8001a84 <MX_TIM6_Init+0x64>)
 8001a6c:	f003 fcd2 	bl	8005414 <HAL_TIMEx_MasterConfigSynchronization>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001a76:	f000 f9f1 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200002c8 	.word	0x200002c8
 8001a88:	40001000 	.word	0x40001000

08001a8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_USART2_UART_Init+0x58>)
 8001a92:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <MX_USART2_UART_Init+0x5c>)
 8001a94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <MX_USART2_UART_Init+0x58>)
 8001a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_USART2_UART_Init+0x58>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_USART2_UART_Init+0x58>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <MX_USART2_UART_Init+0x58>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <MX_USART2_UART_Init+0x58>)
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <MX_USART2_UART_Init+0x58>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <MX_USART2_UART_Init+0x58>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <MX_USART2_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_USART2_UART_Init+0x58>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_USART2_UART_Init+0x58>)
 8001ad0:	f003 fd46 	bl	8005560 <HAL_UART_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ada:	f000 f9bf 	bl	8001e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000314 	.word	0x20000314
 8001ae8:	40004400 	.word	0x40004400

08001aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b02:	4b45      	ldr	r3, [pc, #276]	; (8001c18 <MX_GPIO_Init+0x12c>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	4a44      	ldr	r2, [pc, #272]	; (8001c18 <MX_GPIO_Init+0x12c>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0e:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <MX_GPIO_Init+0x12c>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b1a:	4b3f      	ldr	r3, [pc, #252]	; (8001c18 <MX_GPIO_Init+0x12c>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	4a3e      	ldr	r2, [pc, #248]	; (8001c18 <MX_GPIO_Init+0x12c>)
 8001b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <MX_GPIO_Init+0x12c>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <MX_GPIO_Init+0x12c>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	4a38      	ldr	r2, [pc, #224]	; (8001c18 <MX_GPIO_Init+0x12c>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3e:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <MX_GPIO_Init+0x12c>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4a:	4b33      	ldr	r3, [pc, #204]	; (8001c18 <MX_GPIO_Init+0x12c>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	4a32      	ldr	r2, [pc, #200]	; (8001c18 <MX_GPIO_Init+0x12c>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b56:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <MX_GPIO_Init+0x12c>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2120      	movs	r1, #32
 8001b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6a:	f001 fd63 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	4825      	ldr	r0, [pc, #148]	; (8001c1c <MX_GPIO_Init+0x130>)
 8001b86:	f001 fb93 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	481f      	ldr	r0, [pc, #124]	; (8001c1c <MX_GPIO_Init+0x130>)
 8001b9e:	f001 fb87 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 Switch1_Pin Switch2_Pin PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Switch1_Pin|Switch2_Pin|GPIO_PIN_10;
 8001ba2:	f240 4313 	movw	r3, #1043	; 0x413
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bba:	f001 fb79 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bbe:	2320      	movs	r3, #32
 8001bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd8:	f001 fb6a 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch3_Pin PB10 PB4 */
  GPIO_InitStruct.Pin = Switch3_Pin|GPIO_PIN_10|GPIO_PIN_4;
 8001bdc:	f240 4311 	movw	r3, #1041	; 0x411
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480b      	ldr	r0, [pc, #44]	; (8001c20 <MX_GPIO_Init+0x134>)
 8001bf2:	f001 fb5d 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	4804      	ldr	r0, [pc, #16]	; (8001c1c <MX_GPIO_Init+0x130>)
 8001c0a:	f001 fb51 	bl	80032b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c0e:	bf00      	nop
 8001c10:	3728      	adds	r7, #40	; 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48000800 	.word	0x48000800
 8001c20:	48000400 	.word	0x48000400

08001c24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	update_flag = 1;
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	200003b4 	.word	0x200003b4

08001c44 <StartTellers>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTellers */
void StartTellers(void *argument)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Initialize 3 tellers
  /* Infinite loop */
	initialize_tellers();
 8001c4c:	f000 fa82 	bl	8002154 <initialize_tellers>
  for(;;)
  {
    osMutexAcquire(MUTEXHandle, osWaitForever);
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <StartTellers+0x2c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f004 fbbd 	bl	80063d8 <osMutexAcquire>
    manage_tellers();
 8001c5e:	f000 fbff 	bl	8002460 <manage_tellers>
    osMutexRelease(MUTEXHandle);
 8001c62:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <StartTellers+0x2c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f004 fc01 	bl	800646e <osMutexRelease>
    osMutexAcquire(MUTEXHandle, osWaitForever);
 8001c6c:	e7f0      	b.n	8001c50 <StartTellers+0xc>
 8001c6e:	bf00      	nop
 8001c70:	200003b0 	.word	0x200003b0

08001c74 <StartCustomers>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCustomers */
void StartCustomers(void *argument)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCustomers */
  /* Infinite loop */
  init_customer();
 8001c7c:	f7ff fc20 	bl	80014c0 <init_customer>
  for(;;)
  {

	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <StartCustomers+0x2c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f004 fba5 	bl	80063d8 <osMutexAcquire>
	run_customer();
 8001c8e:	f7ff fc91 	bl	80015b4 <run_customer>
	osMutexRelease(MUTEXHandle);
 8001c92:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <StartCustomers+0x2c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f004 fbe9 	bl	800646e <osMutexRelease>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001c9c:	e7f0      	b.n	8001c80 <StartCustomers+0xc>
 8001c9e:	bf00      	nop
 8001ca0:	200003b0 	.word	0x200003b0

08001ca4 <StartClock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClock */
void StartClock(void *argument)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b0c9      	sub	sp, #292	; 0x124
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cb2:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartClock */
  /* Infinite loop */
	Clock = day_init(Clock);
 8001cb4:	4c48      	ldr	r4, [pc, #288]	; (8001dd8 <StartClock+0x134>)
 8001cb6:	4638      	mov	r0, r7
 8001cb8:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <StartClock+0x134>)
 8001cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cbc:	f7ff fa6a 	bl	8001194 <day_init>
 8001cc0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cc4:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8001cc8:	4623      	mov	r3, r4
 8001cca:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ccc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for(;;)
  {
	if(update_flag == 1){
 8001cd0:	4b42      	ldr	r3, [pc, #264]	; (8001ddc <StartClock+0x138>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d17b      	bne.n	8001dd0 <StartClock+0x12c>
	char buffer[256];
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001cd8:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <StartClock+0x13c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f004 fb79 	bl	80063d8 <osMutexAcquire>
    Clock = clock_increment(Clock);
 8001ce6:	4c3c      	ldr	r4, [pc, #240]	; (8001dd8 <StartClock+0x134>)
 8001ce8:	4638      	mov	r0, r7
 8001cea:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <StartClock+0x134>)
 8001cec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cee:	f7ff fa71 	bl	80011d4 <clock_increment>
 8001cf2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cf6:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8001cfa:	4623      	mov	r3, r4
 8001cfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    osMutexRelease(MUTEXHandle);
 8001d02:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <StartClock+0x13c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f004 fbb1 	bl	800646e <osMutexRelease>
	if((Clock.minute  % 2) == 0 && (Clock.second % 60) == 30){
 8001d0c:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <StartClock+0x134>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d15b      	bne.n	8001dd0 <StartClock+0x12c>
 8001d18:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <StartClock+0x134>)
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <StartClock+0x140>)
 8001d1e:	fb83 1302 	smull	r1, r3, r3, r2
 8001d22:	4413      	add	r3, r2
 8001d24:	1159      	asrs	r1, r3, #5
 8001d26:	17d3      	asrs	r3, r2, #31
 8001d28:	1ac9      	subs	r1, r1, r3
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	1a5b      	subs	r3, r3, r1
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	1ad1      	subs	r1, r2, r3
 8001d34:	291e      	cmp	r1, #30
 8001d36:	d14b      	bne.n	8001dd0 <StartClock+0x12c>
		sprintf(buffer, "Current time: %d:%d:%d \r\n", Clock.hour, Clock.minute, Clock.second);
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <StartClock+0x134>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <StartClock+0x134>)
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <StartClock+0x134>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f107 0018 	add.w	r0, r7, #24
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4926      	ldr	r1, [pc, #152]	; (8001de8 <StartClock+0x144>)
 8001d4e:	f007 fb15 	bl	800937c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001d52:	f107 0318 	add.w	r3, r7, #24
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fa3a 	bl	80001d0 <strlen>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	f107 0118 	add.w	r1, r7, #24
 8001d64:	2364      	movs	r3, #100	; 0x64
 8001d66:	4821      	ldr	r0, [pc, #132]	; (8001dec <StartClock+0x148>)
 8001d68:	f003 fc48 	bl	80055fc <HAL_UART_Transmit>
		sprintf(buffer,"Customers waiting in Queue: %d \r\n", waiting_customers );
 8001d6c:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <StartClock+0x14c>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	491f      	ldr	r1, [pc, #124]	; (8001df4 <StartClock+0x150>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f007 fb00 	bl	800937c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001d7c:	f107 0318 	add.w	r3, r7, #24
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fa25 	bl	80001d0 <strlen>
 8001d86:	4603      	mov	r3, r0
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	f107 0118 	add.w	r1, r7, #24
 8001d8e:	2364      	movs	r3, #100	; 0x64
 8001d90:	4816      	ldr	r0, [pc, #88]	; (8001dec <StartClock+0x148>)
 8001d92:	f003 fc33 	bl	80055fc <HAL_UART_Transmit>
		sprintf(buffer,"Teller 1: %d Teller 2: %d Teller 3: %d \r\n", tellers[1].status,tellers[2].status,tellers[3].status);
 8001d96:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <StartClock+0x154>)
 8001d98:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <StartClock+0x154>)
 8001d9e:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <StartClock+0x154>)
 8001da4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001da8:	f107 0018 	add.w	r0, r7, #24
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	460b      	mov	r3, r1
 8001db0:	4912      	ldr	r1, [pc, #72]	; (8001dfc <StartClock+0x158>)
 8001db2:	f007 fae3 	bl	800937c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001db6:	f107 0318 	add.w	r3, r7, #24
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fa08 	bl	80001d0 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	f107 0118 	add.w	r1, r7, #24
 8001dc8:	2364      	movs	r3, #100	; 0x64
 8001dca:	4808      	ldr	r0, [pc, #32]	; (8001dec <StartClock+0x148>)
 8001dcc:	f003 fc16 	bl	80055fc <HAL_UART_Transmit>
	}
	}
    update_flag = 0;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <StartClock+0x138>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
	if(update_flag == 1){
 8001dd6:	e77b      	b.n	8001cd0 <StartClock+0x2c>
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	200003b4 	.word	0x200003b4
 8001de0:	200003b0 	.word	0x200003b0
 8001de4:	88888889 	.word	0x88888889
 8001de8:	08009f38 	.word	0x08009f38
 8001dec:	20000314 	.word	0x20000314
 8001df0:	200000f8 	.word	0x200000f8
 8001df4:	08009f54 	.word	0x08009f54
 8001df8:	200003bc 	.word	0x200003bc
 8001dfc:	08009f78 	.word	0x08009f78

08001e00 <StartManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManager */
void StartManager(void *argument)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManager */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <StartManager+0x28>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	4618      	mov	r0, r3
 8001e12:	f004 fae1 	bl	80063d8 <osMutexAcquire>
	  run_manager();
 8001e16:	f7fe fbb1 	bl	800057c <run_manager>
	  osMutexRelease(MUTEXHandle);
 8001e1a:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <StartManager+0x28>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f004 fb25 	bl	800646e <osMutexRelease>
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 8001e24:	e7f0      	b.n	8001e08 <StartManager+0x8>
 8001e26:	bf00      	nop
 8001e28:	200003b0 	.word	0x200003b0

08001e2c <StartBreaker>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBreaker */
void StartBreaker(void *argument)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBreaker */
  /* Infinite loop */
	init_breaker();
 8001e34:	f7fe fda8 	bl	8000988 <init_breaker>
  for(;;)
  {
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <StartBreaker+0x2c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	4618      	mov	r0, r3
 8001e42:	f004 fac9 	bl	80063d8 <osMutexAcquire>
	run_breaker();
 8001e46:	f7fe ff2b 	bl	8000ca0 <run_breaker>
	osMutexRelease(MUTEXHandle);
 8001e4a:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <StartBreaker+0x2c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f004 fb0d 	bl	800646e <osMutexRelease>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001e54:	e7f0      	b.n	8001e38 <StartBreaker+0xc>
 8001e56:	bf00      	nop
 8001e58:	200003b0 	.word	0x200003b0

08001e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e60:	b672      	cpsid	i
}
 8001e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <Error_Handler+0x8>
	...

08001e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6613      	str	r3, [r2, #96]	; 0x60
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e90:	6593      	str	r3, [r2, #88]	; 0x58
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_MspInit+0x4c>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	210f      	movs	r1, #15
 8001ea2:	f06f 0001 	mvn.w	r0, #1
 8001ea6:	f001 f9cc 	bl	8003242 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b0a6      	sub	sp, #152	; 0x98
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	2288      	movs	r2, #136	; 0x88
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f007 fa77 	bl	80093bc <memset>
  if(hrng->Instance==RNG)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a1d      	ldr	r2, [pc, #116]	; (8001f48 <HAL_RNG_MspInit+0x90>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d133      	bne.n	8001f40 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001ed8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001edc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001ede:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001eea:	2301      	movs	r3, #1
 8001eec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001eee:	2308      	movs	r3, #8
 8001ef0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001ef2:	2307      	movs	r3, #7
 8001ef4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001efa:	2302      	movs	r3, #2
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001efe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f04:	f107 0310 	add.w	r3, r7, #16
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 fa0f 	bl	800432c <HAL_RCCEx_PeriphCLKConfig>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8001f14:	f7ff ffa2 	bl	8001e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <HAL_RNG_MspInit+0x94>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <HAL_RNG_MspInit+0x94>)
 8001f1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_RNG_MspInit+0x94>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 5, 0);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2105      	movs	r1, #5
 8001f34:	2050      	movs	r0, #80	; 0x50
 8001f36:	f001 f984 	bl	8003242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8001f3a:	2050      	movs	r0, #80	; 0x50
 8001f3c:	f001 f99d 	bl	800327a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001f40:	bf00      	nop
 8001f42:	3798      	adds	r7, #152	; 0x98
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	50060800 	.word	0x50060800
 8001f4c:	40021000 	.word	0x40021000

08001f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <HAL_TIM_Base_MspInit+0x44>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d113      	bne.n	8001f8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_TIM_Base_MspInit+0x48>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	4a0c      	ldr	r2, [pc, #48]	; (8001f98 <HAL_TIM_Base_MspInit+0x48>)
 8001f68:	f043 0310 	orr.w	r3, r3, #16
 8001f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_TIM_Base_MspInit+0x48>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2105      	movs	r1, #5
 8001f7e:	2036      	movs	r0, #54	; 0x36
 8001f80:	f001 f95f 	bl	8003242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f84:	2036      	movs	r0, #54	; 0x36
 8001f86:	f001 f978 	bl	800327a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40001000 	.word	0x40001000
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b0ac      	sub	sp, #176	; 0xb0
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2288      	movs	r2, #136	; 0x88
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f007 f9fd 	bl	80093bc <memset>
  if(huart->Instance==USART2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a21      	ldr	r2, [pc, #132]	; (800204c <HAL_UART_MspInit+0xb0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d13b      	bne.n	8002044 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f002 f9a7 	bl	800432c <HAL_RCCEx_PeriphCLKConfig>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fe4:	f7ff ff3a 	bl	8001e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_UART_MspInit+0xb4>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	4a18      	ldr	r2, [pc, #96]	; (8002050 <HAL_UART_MspInit+0xb4>)
 8001fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_UART_MspInit+0xb4>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_UART_MspInit+0xb4>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <HAL_UART_MspInit+0xb4>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_UART_MspInit+0xb4>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002018:	230c      	movs	r3, #12
 800201a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002030:	2307      	movs	r3, #7
 8002032:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800203a:	4619      	mov	r1, r3
 800203c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002040:	f001 f936 	bl	80032b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002044:	bf00      	nop
 8002046:	37b0      	adds	r7, #176	; 0xb0
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40004400 	.word	0x40004400
 8002050:	40021000 	.word	0x40021000

08002054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002058:	e7fe      	b.n	8002058 <NMI_Handler+0x4>

0800205a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <HardFault_Handler+0x4>

08002060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <MemManage_Handler+0x4>

08002066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <BusFault_Handler+0x4>

0800206c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <UsageFault_Handler+0x4>

08002072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002084:	f000 ffe2 	bl	800304c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002088:	f006 f810 	bl	80080ac <xTaskGetSchedulerState>
 800208c:	4603      	mov	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d001      	beq.n	8002096 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002092:	f006 fef9 	bl	8008e88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <TIM6_DAC_IRQHandler+0x10>)
 80020a2:	f002 fff3 	bl	800508c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200002c8 	.word	0x200002c8

080020b0 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <RNG_IRQHandler+0x10>)
 80020b6:	f002 fea2 	bl	8004dfe <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200002b8 	.word	0x200002b8

080020c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020cc:	4a14      	ldr	r2, [pc, #80]	; (8002120 <_sbrk+0x5c>)
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <_sbrk+0x60>)
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <_sbrk+0x64>)
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <_sbrk+0x68>)
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d207      	bcs.n	8002104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f4:	f007 f96a 	bl	80093cc <__errno>
 80020f8:	4603      	mov	r3, r0
 80020fa:	220c      	movs	r2, #12
 80020fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	e009      	b.n	8002118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <_sbrk+0x64>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <_sbrk+0x64>)
 8002114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002116:	68fb      	ldr	r3, [r7, #12]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20018000 	.word	0x20018000
 8002124:	00000400 	.word	0x00000400
 8002128:	200003b8 	.word	0x200003b8
 800212c:	20007260 	.word	0x20007260

08002130 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <SystemInit+0x20>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <SystemInit+0x20>)
 800213c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <initialize_tellers>:

Teller VOID_TELLER;
//fix this
Teller teller_wait[4];

void initialize_tellers(void) {
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
    for (int i = 1; i < 4; i++) {
 800215a:	2301      	movs	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e168      	b.n	8002432 <initialize_tellers+0x2de>
    	//Initialize ID
        tellers[i].id = i;
 8002160:	4abc      	ldr	r2, [pc, #752]	; (8002454 <initialize_tellers+0x300>)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	21b0      	movs	r1, #176	; 0xb0
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	601a      	str	r2, [r3, #0]
        // Initialize statuses
        tellers[i].status = 0;
 8002170:	4ab8      	ldr	r2, [pc, #736]	; (8002454 <initialize_tellers+0x300>)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	21b0      	movs	r1, #176	; 0xb0
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	3304      	adds	r3, #4
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
        tellers[i].take_break = 0;
 8002182:	4ab4      	ldr	r2, [pc, #720]	; (8002454 <initialize_tellers+0x300>)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	21b0      	movs	r1, #176	; 0xb0
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	4413      	add	r3, r2
 800218e:	3308      	adds	r3, #8
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
        //service function
        tellers[i].service_end_time = clock_init(tellers[i].service_end_time);
 8002194:	4aaf      	ldr	r2, [pc, #700]	; (8002454 <initialize_tellers+0x300>)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	21b0      	movs	r1, #176	; 0xb0
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	f103 0408 	add.w	r4, r3, #8
 80021a4:	4638      	mov	r0, r7
 80021a6:	4aab      	ldr	r2, [pc, #684]	; (8002454 <initialize_tellers+0x300>)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	21b0      	movs	r1, #176	; 0xb0
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	3308      	adds	r3, #8
 80021b4:	3304      	adds	r3, #4
 80021b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b8:	f7fe ffcc 	bl	8001154 <clock_init>
 80021bc:	1d23      	adds	r3, r4, #4
 80021be:	463a      	mov	r2, r7
 80021c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80021c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize metrics
        tellers[i].customers_served = 0;
 80021c6:	4aa3      	ldr	r2, [pc, #652]	; (8002454 <initialize_tellers+0x300>)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	21b0      	movs	r1, #176	; 0xb0
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	3318      	adds	r3, #24
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
        tellers[i].total_time_working = clock_init(tellers[i].total_time_working);
 80021d8:	4a9e      	ldr	r2, [pc, #632]	; (8002454 <initialize_tellers+0x300>)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	21b0      	movs	r1, #176	; 0xb0
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	f103 0418 	add.w	r4, r3, #24
 80021e8:	4638      	mov	r0, r7
 80021ea:	4a9a      	ldr	r2, [pc, #616]	; (8002454 <initialize_tellers+0x300>)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	21b0      	movs	r1, #176	; 0xb0
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	3318      	adds	r3, #24
 80021f8:	3304      	adds	r3, #4
 80021fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fc:	f7fe ffaa 	bl	8001154 <clock_init>
 8002200:	1d23      	adds	r3, r4, #4
 8002202:	463a      	mov	r2, r7
 8002204:	ca07      	ldmia	r2, {r0, r1, r2}
 8002206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].total_time_waiting = clock_init(tellers[i].total_time_waiting);
 800220a:	4a92      	ldr	r2, [pc, #584]	; (8002454 <initialize_tellers+0x300>)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	21b0      	movs	r1, #176	; 0xb0
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800221a:	4638      	mov	r0, r7
 800221c:	4a8d      	ldr	r2, [pc, #564]	; (8002454 <initialize_tellers+0x300>)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	21b0      	movs	r1, #176	; 0xb0
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	3328      	adds	r3, #40	; 0x28
 800222a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800222c:	f7fe ff92 	bl	8001154 <clock_init>
 8002230:	463b      	mov	r3, r7
 8002232:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002236:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].current_time_working = clock_init(tellers[i].current_time_working);
 800223a:	4a86      	ldr	r2, [pc, #536]	; (8002454 <initialize_tellers+0x300>)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	21b0      	movs	r1, #176	; 0xb0
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800224a:	4638      	mov	r0, r7
 800224c:	4a81      	ldr	r2, [pc, #516]	; (8002454 <initialize_tellers+0x300>)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	21b0      	movs	r1, #176	; 0xb0
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3330      	adds	r3, #48	; 0x30
 800225a:	3304      	adds	r3, #4
 800225c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800225e:	f7fe ff79 	bl	8001154 <clock_init>
 8002262:	1d23      	adds	r3, r4, #4
 8002264:	463a      	mov	r2, r7
 8002266:	ca07      	ldmia	r2, {r0, r1, r2}
 8002268:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 800226c:	4a79      	ldr	r2, [pc, #484]	; (8002454 <initialize_tellers+0x300>)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	21b0      	movs	r1, #176	; 0xb0
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800227c:	4638      	mov	r0, r7
 800227e:	4a75      	ldr	r2, [pc, #468]	; (8002454 <initialize_tellers+0x300>)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	21b0      	movs	r1, #176	; 0xb0
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	4413      	add	r3, r2
 800228a:	3340      	adds	r3, #64	; 0x40
 800228c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800228e:	f7fe ff61 	bl	8001154 <clock_init>
 8002292:	463b      	mov	r3, r7
 8002294:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002298:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].max_time_working = clock_init(tellers[i].max_time_working);
 800229c:	4a6d      	ldr	r2, [pc, #436]	; (8002454 <initialize_tellers+0x300>)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	21b0      	movs	r1, #176	; 0xb0
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80022ac:	4638      	mov	r0, r7
 80022ae:	4a69      	ldr	r2, [pc, #420]	; (8002454 <initialize_tellers+0x300>)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	21b0      	movs	r1, #176	; 0xb0
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3348      	adds	r3, #72	; 0x48
 80022bc:	3304      	adds	r3, #4
 80022be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c0:	f7fe ff48 	bl	8001154 <clock_init>
 80022c4:	1d23      	adds	r3, r4, #4
 80022c6:	463a      	mov	r2, r7
 80022c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80022ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].max_time_working = clock_init(tellers[i].max_time_working);
 80022ce:	4a61      	ldr	r2, [pc, #388]	; (8002454 <initialize_tellers+0x300>)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	21b0      	movs	r1, #176	; 0xb0
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80022de:	4638      	mov	r0, r7
 80022e0:	4a5c      	ldr	r2, [pc, #368]	; (8002454 <initialize_tellers+0x300>)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	21b0      	movs	r1, #176	; 0xb0
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3348      	adds	r3, #72	; 0x48
 80022ee:	3304      	adds	r3, #4
 80022f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f2:	f7fe ff2f 	bl	8001154 <clock_init>
 80022f6:	1d23      	adds	r3, r4, #4
 80022f8:	463a      	mov	r2, r7
 80022fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80022fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize break taking
        tellers[i].break_end = clock_init(tellers[i].break_end);
 8002300:	4a54      	ldr	r2, [pc, #336]	; (8002454 <initialize_tellers+0x300>)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	21b0      	movs	r1, #176	; 0xb0
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4413      	add	r3, r2
 800230c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8002310:	4638      	mov	r0, r7
 8002312:	4a50      	ldr	r2, [pc, #320]	; (8002454 <initialize_tellers+0x300>)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	21b0      	movs	r1, #176	; 0xb0
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	3370      	adds	r3, #112	; 0x70
 8002320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002322:	f7fe ff17 	bl	8001154 <clock_init>
 8002326:	463b      	mov	r3, r7
 8002328:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800232c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].current_break = clock_init(tellers[i].current_break);
 8002330:	4a48      	ldr	r2, [pc, #288]	; (8002454 <initialize_tellers+0x300>)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	21b0      	movs	r1, #176	; 0xb0
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8002340:	4638      	mov	r0, r7
 8002342:	4a44      	ldr	r2, [pc, #272]	; (8002454 <initialize_tellers+0x300>)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	21b0      	movs	r1, #176	; 0xb0
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	3378      	adds	r3, #120	; 0x78
 8002350:	3304      	adds	r3, #4
 8002352:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002354:	f7fe fefe 	bl	8001154 <clock_init>
 8002358:	1d23      	adds	r3, r4, #4
 800235a:	463a      	mov	r2, r7
 800235c:	ca07      	ldmia	r2, {r0, r1, r2}
 800235e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize break metrics
        tellers[i].num_breaks = 0;
 8002362:	4a3c      	ldr	r2, [pc, #240]	; (8002454 <initialize_tellers+0x300>)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	21b0      	movs	r1, #176	; 0xb0
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	3388      	adds	r3, #136	; 0x88
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
        tellers[i].max_break = clock_init(tellers[i].max_break);
 8002374:	4a37      	ldr	r2, [pc, #220]	; (8002454 <initialize_tellers+0x300>)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	21b0      	movs	r1, #176	; 0xb0
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8002384:	4638      	mov	r0, r7
 8002386:	4a33      	ldr	r2, [pc, #204]	; (8002454 <initialize_tellers+0x300>)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	21b0      	movs	r1, #176	; 0xb0
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	3388      	adds	r3, #136	; 0x88
 8002394:	3304      	adds	r3, #4
 8002396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002398:	f7fe fedc 	bl	8001154 <clock_init>
 800239c:	1d23      	adds	r3, r4, #4
 800239e:	463a      	mov	r2, r7
 80023a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80023a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].min_break = clock_init(tellers[i].min_break);
 80023a6:	4a2b      	ldr	r2, [pc, #172]	; (8002454 <initialize_tellers+0x300>)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	21b0      	movs	r1, #176	; 0xb0
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80023b6:	4638      	mov	r0, r7
 80023b8:	4a26      	ldr	r2, [pc, #152]	; (8002454 <initialize_tellers+0x300>)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	21b0      	movs	r1, #176	; 0xb0
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3398      	adds	r3, #152	; 0x98
 80023c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c8:	f7fe fec4 	bl	8001154 <clock_init>
 80023cc:	463b      	mov	r3, r7
 80023ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].total_break = clock_init(tellers[i].total_break);
 80023d6:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <initialize_tellers+0x300>)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	21b0      	movs	r1, #176	; 0xb0
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80023e6:	4638      	mov	r0, r7
 80023e8:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <initialize_tellers+0x300>)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	21b0      	movs	r1, #176	; 0xb0
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	33a0      	adds	r3, #160	; 0xa0
 80023f6:	3304      	adds	r3, #4
 80023f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023fa:	f7fe feab 	bl	8001154 <clock_init>
 80023fe:	1d23      	adds	r3, r4, #4
 8002400:	463a      	mov	r2, r7
 8002402:	ca07      	ldmia	r2, {r0, r1, r2}
 8002404:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        //initialize tellers in Queue
        teller_wait[i-1] = tellers[i];
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	3b01      	subs	r3, #1
 800240c:	4a12      	ldr	r2, [pc, #72]	; (8002458 <initialize_tellers+0x304>)
 800240e:	21b0      	movs	r1, #176	; 0xb0
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	18d0      	adds	r0, r2, r3
 8002416:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <initialize_tellers+0x300>)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	21b0      	movs	r1, #176	; 0xb0
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	4619      	mov	r1, r3
 8002424:	23b0      	movs	r3, #176	; 0xb0
 8002426:	461a      	mov	r2, r3
 8002428:	f006 fffc 	bl	8009424 <memcpy>
    for (int i = 1; i < 4; i++) {
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3301      	adds	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b03      	cmp	r3, #3
 8002436:	f77f ae93 	ble.w	8002160 <initialize_tellers+0xc>

    }
    	teller_wait[0] = VOID_TELLER;
 800243a:	4a07      	ldr	r2, [pc, #28]	; (8002458 <initialize_tellers+0x304>)
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <initialize_tellers+0x308>)
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	23b0      	movs	r3, #176	; 0xb0
 8002444:	461a      	mov	r2, r3
 8002446:	f006 ffed 	bl	8009424 <memcpy>
}
 800244a:	bf00      	nop
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop
 8002454:	200003bc 	.word	0x200003bc
 8002458:	2000072c 	.word	0x2000072c
 800245c:	2000067c 	.word	0x2000067c

08002460 <manage_tellers>:

//Maybe Put entire thing inside a case statement if at all possible,
//Would Simplify logic and speed it up
void manage_tellers(void){
 8002460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002464:	b098      	sub	sp, #96	; 0x60
 8002466:	af04      	add	r7, sp, #16
	int i;
	for (i = 1; i < 4; i++) {
 8002468:	2301      	movs	r3, #1
 800246a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800246c:	bf00      	nop
 800246e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002470:	2b03      	cmp	r3, #3
 8002472:	f300 8557 	bgt.w	8002f24 <manage_tellers+0xac4>
		switch (tellers[i].status){
 8002476:	4aa3      	ldr	r2, [pc, #652]	; (8002704 <manage_tellers+0x2a4>)
 8002478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800247a:	21b0      	movs	r1, #176	; 0xb0
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	3304      	adds	r3, #4
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d00a      	beq.n	80024a0 <manage_tellers+0x40>
 800248a:	2b02      	cmp	r3, #2
 800248c:	f300 854c 	bgt.w	8002f28 <manage_tellers+0xac8>
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 813d 	beq.w	8002710 <manage_tellers+0x2b0>
 8002496:	2b01      	cmp	r3, #1
 8002498:	f000 840a 	beq.w	8002cb0 <manage_tellers+0x850>
				}
				break;
			}
		}
			//Case Break
			break;
 800249c:	f000 bd44 	b.w	8002f28 <manage_tellers+0xac8>
			if(clock_compare(Clock,tellers[i].break_end) != 1){
 80024a0:	4a98      	ldr	r2, [pc, #608]	; (8002704 <manage_tellers+0x2a4>)
 80024a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a4:	21b0      	movs	r1, #176	; 0xb0
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	3370      	adds	r3, #112	; 0x70
 80024ae:	4a96      	ldr	r2, [pc, #600]	; (8002708 <manage_tellers+0x2a8>)
 80024b0:	466c      	mov	r4, sp
 80024b2:	1d19      	adds	r1, r3, #4
 80024b4:	c903      	ldmia	r1, {r0, r1}
 80024b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80024be:	f7fe fef4 	bl	80012aa <clock_compare>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	f040 851f 	bne.w	8002f08 <manage_tellers+0xaa8>
			if(clock_compare(Clock,tellers[i].break_end) == 1){
 80024ca:	4a8e      	ldr	r2, [pc, #568]	; (8002704 <manage_tellers+0x2a4>)
 80024cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ce:	21b0      	movs	r1, #176	; 0xb0
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	3370      	adds	r3, #112	; 0x70
 80024d8:	4a8b      	ldr	r2, [pc, #556]	; (8002708 <manage_tellers+0x2a8>)
 80024da:	466c      	mov	r4, sp
 80024dc:	1d19      	adds	r1, r3, #4
 80024de:	c903      	ldmia	r1, {r0, r1}
 80024e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80024e8:	f7fe fedf 	bl	80012aa <clock_compare>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	f040 850c 	bne.w	8002f0c <manage_tellers+0xaac>
				if(clock_compare(tellers[i].current_break,tellers[i].max_break) == 0){
 80024f4:	4a83      	ldr	r2, [pc, #524]	; (8002704 <manage_tellers+0x2a4>)
 80024f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f8:	21b0      	movs	r1, #176	; 0xb0
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3388      	adds	r3, #136	; 0x88
 8002502:	4980      	ldr	r1, [pc, #512]	; (8002704 <manage_tellers+0x2a4>)
 8002504:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002506:	20b0      	movs	r0, #176	; 0xb0
 8002508:	fb00 f202 	mul.w	r2, r0, r2
 800250c:	440a      	add	r2, r1
 800250e:	3278      	adds	r2, #120	; 0x78
 8002510:	466c      	mov	r4, sp
 8002512:	f103 0108 	add.w	r1, r3, #8
 8002516:	c903      	ldmia	r1, {r0, r1}
 8002518:	e884 0003 	stmia.w	r4, {r0, r1}
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	3204      	adds	r2, #4
 8002520:	ca07      	ldmia	r2, {r0, r1, r2}
 8002522:	f7fe fec2 	bl	80012aa <clock_compare>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d112      	bne.n	8002552 <manage_tellers+0xf2>
					tellers[i].max_break = tellers[i].current_break;
 800252c:	4a75      	ldr	r2, [pc, #468]	; (8002704 <manage_tellers+0x2a4>)
 800252e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002530:	21b0      	movs	r1, #176	; 0xb0
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3388      	adds	r3, #136	; 0x88
 800253a:	4972      	ldr	r1, [pc, #456]	; (8002704 <manage_tellers+0x2a4>)
 800253c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800253e:	20b0      	movs	r0, #176	; 0xb0
 8002540:	fb00 f202 	mul.w	r2, r0, r2
 8002544:	440a      	add	r2, r1
 8002546:	3278      	adds	r2, #120	; 0x78
 8002548:	3304      	adds	r3, #4
 800254a:	3204      	adds	r2, #4
 800254c:	ca07      	ldmia	r2, {r0, r1, r2}
 800254e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				if(clock_compare(tellers[i].current_break,tellers[i].min_break) == 2){
 8002552:	4a6c      	ldr	r2, [pc, #432]	; (8002704 <manage_tellers+0x2a4>)
 8002554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002556:	21b0      	movs	r1, #176	; 0xb0
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	3398      	adds	r3, #152	; 0x98
 8002560:	4968      	ldr	r1, [pc, #416]	; (8002704 <manage_tellers+0x2a4>)
 8002562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002564:	20b0      	movs	r0, #176	; 0xb0
 8002566:	fb00 f202 	mul.w	r2, r0, r2
 800256a:	440a      	add	r2, r1
 800256c:	3278      	adds	r2, #120	; 0x78
 800256e:	466c      	mov	r4, sp
 8002570:	1d19      	adds	r1, r3, #4
 8002572:	c903      	ldmia	r1, {r0, r1}
 8002574:	e884 0003 	stmia.w	r4, {r0, r1}
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3204      	adds	r2, #4
 800257c:	ca07      	ldmia	r2, {r0, r1, r2}
 800257e:	f7fe fe94 	bl	80012aa <clock_compare>
 8002582:	4603      	mov	r3, r0
 8002584:	2b02      	cmp	r3, #2
 8002586:	d114      	bne.n	80025b2 <manage_tellers+0x152>
					tellers[i].min_break = tellers[i].current_break;
 8002588:	4a5e      	ldr	r2, [pc, #376]	; (8002704 <manage_tellers+0x2a4>)
 800258a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258c:	21b0      	movs	r1, #176	; 0xb0
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8002598:	4a5a      	ldr	r2, [pc, #360]	; (8002704 <manage_tellers+0x2a4>)
 800259a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800259c:	21b0      	movs	r1, #176	; 0xb0
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	3378      	adds	r3, #120	; 0x78
 80025a6:	4604      	mov	r4, r0
 80025a8:	3304      	adds	r3, #4
 80025aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				tellers[i].total_break = add_clocks(tellers[i].total_break, tellers[i].current_break);
 80025b2:	4a54      	ldr	r2, [pc, #336]	; (8002704 <manage_tellers+0x2a4>)
 80025b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b6:	21b0      	movs	r1, #176	; 0xb0
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	4413      	add	r3, r2
 80025be:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
 80025c2:	f107 0c08 	add.w	ip, r7, #8
 80025c6:	4a4f      	ldr	r2, [pc, #316]	; (8002704 <manage_tellers+0x2a4>)
 80025c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ca:	21b0      	movs	r1, #176	; 0xb0
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	f103 06a0 	add.w	r6, r3, #160	; 0xa0
 80025d6:	4a4b      	ldr	r2, [pc, #300]	; (8002704 <manage_tellers+0x2a4>)
 80025d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025da:	21b0      	movs	r1, #176	; 0xb0
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	3378      	adds	r3, #120	; 0x78
 80025e4:	466c      	mov	r4, sp
 80025e6:	3304      	adds	r3, #4
 80025e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80025f0:	1d33      	adds	r3, r6, #4
 80025f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025f4:	4660      	mov	r0, ip
 80025f6:	f7fe fe1e 	bl	8001236 <add_clocks>
 80025fa:	1d2b      	adds	r3, r5, #4
 80025fc:	f107 0208 	add.w	r2, r7, #8
 8002600:	ca07      	ldmia	r2, {r0, r1, r2}
 8002602:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].current_break = clock_init(tellers[i].current_break);
 8002606:	4a3f      	ldr	r2, [pc, #252]	; (8002704 <manage_tellers+0x2a4>)
 8002608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260a:	21b0      	movs	r1, #176	; 0xb0
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8002616:	f107 0008 	add.w	r0, r7, #8
 800261a:	4a3a      	ldr	r2, [pc, #232]	; (8002704 <manage_tellers+0x2a4>)
 800261c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800261e:	21b0      	movs	r1, #176	; 0xb0
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	3378      	adds	r3, #120	; 0x78
 8002628:	3304      	adds	r3, #4
 800262a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800262c:	f7fe fd92 	bl	8001154 <clock_init>
 8002630:	1d23      	adds	r3, r4, #4
 8002632:	f107 0208 	add.w	r2, r7, #8
 8002636:	ca07      	ldmia	r2, {r0, r1, r2}
 8002638:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].status = 0;
 800263c:	4a31      	ldr	r2, [pc, #196]	; (8002704 <manage_tellers+0x2a4>)
 800263e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002640:	21b0      	movs	r1, #176	; 0xb0
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3304      	adds	r3, #4
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
				if(!((teller_wait[0].id == i) && (teller_wait[1].id == i) && (teller_wait[2].id == i))){
 800264e:	4b2f      	ldr	r3, [pc, #188]	; (800270c <manage_tellers+0x2ac>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002654:	429a      	cmp	r2, r3
 8002656:	d10b      	bne.n	8002670 <manage_tellers+0x210>
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <manage_tellers+0x2ac>)
 800265a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800265e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002660:	429a      	cmp	r2, r3
 8002662:	d105      	bne.n	8002670 <manage_tellers+0x210>
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <manage_tellers+0x2ac>)
 8002666:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800266a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800266c:	429a      	cmp	r2, r3
 800266e:	d03a      	beq.n	80026e6 <manage_tellers+0x286>
					if(teller_wait[0].id == 0){
 8002670:	4b26      	ldr	r3, [pc, #152]	; (800270c <manage_tellers+0x2ac>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10d      	bne.n	8002694 <manage_tellers+0x234>
						teller_wait[0] = tellers[i];
 8002678:	4824      	ldr	r0, [pc, #144]	; (800270c <manage_tellers+0x2ac>)
 800267a:	4a22      	ldr	r2, [pc, #136]	; (8002704 <manage_tellers+0x2a4>)
 800267c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800267e:	21b0      	movs	r1, #176	; 0xb0
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	4619      	mov	r1, r3
 8002688:	23b0      	movs	r3, #176	; 0xb0
 800268a:	461a      	mov	r2, r3
 800268c:	f006 feca 	bl	8009424 <memcpy>
					break;
 8002690:	f000 bc3e 	b.w	8002f10 <manage_tellers+0xab0>
					else if(teller_wait[1].id == 0){
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <manage_tellers+0x2ac>)
 8002696:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10e      	bne.n	80026bc <manage_tellers+0x25c>
						teller_wait[1] = tellers[i];
 800269e:	4a1b      	ldr	r2, [pc, #108]	; (800270c <manage_tellers+0x2ac>)
 80026a0:	4918      	ldr	r1, [pc, #96]	; (8002704 <manage_tellers+0x2a4>)
 80026a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a4:	20b0      	movs	r0, #176	; 0xb0
 80026a6:	fb00 f303 	mul.w	r3, r0, r3
 80026aa:	4419      	add	r1, r3
 80026ac:	f102 03b0 	add.w	r3, r2, #176	; 0xb0
 80026b0:	22b0      	movs	r2, #176	; 0xb0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f006 feb6 	bl	8009424 <memcpy>
					break;
 80026b8:	f000 bc2a 	b.w	8002f10 <manage_tellers+0xab0>
					else if(teller_wait[2].id == 0){
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <manage_tellers+0x2ac>)
 80026be:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 8424 	bne.w	8002f10 <manage_tellers+0xab0>
						teller_wait[2] = tellers[i];
 80026c8:	4a10      	ldr	r2, [pc, #64]	; (800270c <manage_tellers+0x2ac>)
 80026ca:	490e      	ldr	r1, [pc, #56]	; (8002704 <manage_tellers+0x2a4>)
 80026cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ce:	20b0      	movs	r0, #176	; 0xb0
 80026d0:	fb00 f303 	mul.w	r3, r0, r3
 80026d4:	4419      	add	r1, r3
 80026d6:	f502 73b0 	add.w	r3, r2, #352	; 0x160
 80026da:	22b0      	movs	r2, #176	; 0xb0
 80026dc:	4618      	mov	r0, r3
 80026de:	f006 fea1 	bl	8009424 <memcpy>
					break;
 80026e2:	f000 bc15 	b.w	8002f10 <manage_tellers+0xab0>
				tellers[i].teller_start_wait = Clock;
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <manage_tellers+0x2a4>)
 80026e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ea:	21b0      	movs	r1, #176	; 0xb0
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3360      	adds	r3, #96	; 0x60
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <manage_tellers+0x2a8>)
 80026f6:	3304      	adds	r3, #4
 80026f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80026fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			break;
 80026fe:	f000 bc05 	b.w	8002f0c <manage_tellers+0xaac>
 8002702:	bf00      	nop
 8002704:	200003bc 	.word	0x200003bc
 8002708:	20000000 	.word	0x20000000
 800270c:	2000072c 	.word	0x2000072c
			if(tellers[i].take_break == 0){
 8002710:	4abf      	ldr	r2, [pc, #764]	; (8002a10 <manage_tellers+0x5b0>)
 8002712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002714:	21b0      	movs	r1, #176	; 0xb0
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	3308      	adds	r3, #8
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	f040 80ee 	bne.w	8002902 <manage_tellers+0x4a2>
				  if((waiting[0] != NULL) && (tellers[i].id == teller_wait[0].id)){
 8002726:	4bbb      	ldr	r3, [pc, #748]	; (8002a14 <manage_tellers+0x5b4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 83f2 	beq.w	8002f14 <manage_tellers+0xab4>
 8002730:	4ab7      	ldr	r2, [pc, #732]	; (8002a10 <manage_tellers+0x5b0>)
 8002732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002734:	21b0      	movs	r1, #176	; 0xb0
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4bb6      	ldr	r3, [pc, #728]	; (8002a18 <manage_tellers+0x5b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	f040 83e6 	bne.w	8002f14 <manage_tellers+0xab4>
					tellers[i].current_time_waiting = subtract_Clocks(Clock,tellers[i].teller_start_wait);
 8002748:	4ab1      	ldr	r2, [pc, #708]	; (8002a10 <manage_tellers+0x5b0>)
 800274a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800274c:	21b0      	movs	r1, #176	; 0xb0
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	4413      	add	r3, r2
 8002754:	f103 0840 	add.w	r8, r3, #64	; 0x40
 8002758:	f107 0608 	add.w	r6, r7, #8
 800275c:	4daf      	ldr	r5, [pc, #700]	; (8002a1c <manage_tellers+0x5bc>)
 800275e:	4aac      	ldr	r2, [pc, #688]	; (8002a10 <manage_tellers+0x5b0>)
 8002760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002762:	21b0      	movs	r1, #176	; 0xb0
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3360      	adds	r3, #96	; 0x60
 800276c:	466c      	mov	r4, sp
 800276e:	3304      	adds	r3, #4
 8002770:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002774:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002778:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800277c:	4630      	mov	r0, r6
 800277e:	f7fe fdd5 	bl	800132c <subtract_Clocks>
 8002782:	4644      	mov	r4, r8
 8002784:	f107 0308 	add.w	r3, r7, #8
 8002788:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800278c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Customer customer = *waiting[0];
 8002790:	4ba0      	ldr	r3, [pc, #640]	; (8002a14 <manage_tellers+0x5b4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f107 0418 	add.w	r4, r7, #24
 8002798:	461d      	mov	r5, r3
 800279a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800279e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a6:	682b      	ldr	r3, [r5, #0]
 80027a8:	6023      	str	r3, [r4, #0]
					waiting[0] = NULL;
 80027aa:	4b9a      	ldr	r3, [pc, #616]	; (8002a14 <manage_tellers+0x5b4>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
				  	tellers[i].service_end_time = customer.service_time;
 80027b0:	4a97      	ldr	r2, [pc, #604]	; (8002a10 <manage_tellers+0x5b0>)
 80027b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b4:	21b0      	movs	r1, #176	; 0xb0
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	3308      	adds	r3, #8
 80027be:	3304      	adds	r3, #4
 80027c0:	f107 021c 	add.w	r2, r7, #28
 80027c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80027c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  	total_customer_wait = add_clocks(total_customer_wait, customer.total_queue_time);
 80027ca:	4b95      	ldr	r3, [pc, #596]	; (8002a20 <manage_tellers+0x5c0>)
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	f107 0608 	add.w	r6, r7, #8
 80027d2:	4d93      	ldr	r5, [pc, #588]	; (8002a20 <manage_tellers+0x5c0>)
 80027d4:	466c      	mov	r4, sp
 80027d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027e2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80027e6:	4630      	mov	r0, r6
 80027e8:	f7fe fd25 	bl	8001236 <add_clocks>
 80027ec:	687c      	ldr	r4, [r7, #4]
 80027ee:	f107 0308 	add.w	r3, r7, #8
 80027f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				  	if(clock_compare(customer.total_queue_time,max_customer_wait) == 0){
 80027fa:	4b8a      	ldr	r3, [pc, #552]	; (8002a24 <manage_tellers+0x5c4>)
 80027fc:	466c      	mov	r4, sp
 80027fe:	1d1a      	adds	r2, r3, #4
 8002800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002804:	e884 0003 	stmia.w	r4, {r0, r1}
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800280e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002810:	f7fe fd4b 	bl	80012aa <clock_compare>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d107      	bne.n	800282a <manage_tellers+0x3ca>
				  		max_customer_wait = customer.total_queue_time;
 800281a:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <manage_tellers+0x5c4>)
 800281c:	461c      	mov	r4, r3
 800281e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002822:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002826:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				  	tellers[i].status = 1;
 800282a:	4a79      	ldr	r2, [pc, #484]	; (8002a10 <manage_tellers+0x5b0>)
 800282c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800282e:	21b0      	movs	r1, #176	; 0xb0
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	3304      	adds	r3, #4
 8002838:	2201      	movs	r2, #1
 800283a:	601a      	str	r2, [r3, #0]
				  	if(clock_compare(tellers[i].current_time_waiting,tellers[i].max_time_waiting) == 0){
 800283c:	4a74      	ldr	r2, [pc, #464]	; (8002a10 <manage_tellers+0x5b0>)
 800283e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002840:	21b0      	movs	r1, #176	; 0xb0
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	3358      	adds	r3, #88	; 0x58
 800284a:	4971      	ldr	r1, [pc, #452]	; (8002a10 <manage_tellers+0x5b0>)
 800284c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800284e:	20b0      	movs	r0, #176	; 0xb0
 8002850:	fb00 f202 	mul.w	r2, r0, r2
 8002854:	440a      	add	r2, r1
 8002856:	3240      	adds	r2, #64	; 0x40
 8002858:	466c      	mov	r4, sp
 800285a:	1d19      	adds	r1, r3, #4
 800285c:	c903      	ldmia	r1, {r0, r1}
 800285e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	ca07      	ldmia	r2, {r0, r1, r2}
 8002866:	f7fe fd20 	bl	80012aa <clock_compare>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d12d      	bne.n	80028cc <manage_tellers+0x46c>
				 	tellers[i].max_time_waiting = tellers[i].current_time_waiting;
 8002870:	4a67      	ldr	r2, [pc, #412]	; (8002a10 <manage_tellers+0x5b0>)
 8002872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002874:	21b0      	movs	r1, #176	; 0xb0
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8002880:	4a63      	ldr	r2, [pc, #396]	; (8002a10 <manage_tellers+0x5b0>)
 8002882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002884:	21b0      	movs	r1, #176	; 0xb0
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002890:	4603      	mov	r3, r0
 8002892:	ca07      	ldmia	r2, {r0, r1, r2}
 8002894:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				 	teller_wait[0] = teller_wait[1];
 8002898:	4a5f      	ldr	r2, [pc, #380]	; (8002a18 <manage_tellers+0x5b8>)
 800289a:	4b5f      	ldr	r3, [pc, #380]	; (8002a18 <manage_tellers+0x5b8>)
 800289c:	4610      	mov	r0, r2
 800289e:	33b0      	adds	r3, #176	; 0xb0
 80028a0:	22b0      	movs	r2, #176	; 0xb0
 80028a2:	4619      	mov	r1, r3
 80028a4:	f006 fdbe 	bl	8009424 <memcpy>
				 	teller_wait[1] = teller_wait[2];
 80028a8:	4b5b      	ldr	r3, [pc, #364]	; (8002a18 <manage_tellers+0x5b8>)
 80028aa:	4a5b      	ldr	r2, [pc, #364]	; (8002a18 <manage_tellers+0x5b8>)
 80028ac:	33b0      	adds	r3, #176	; 0xb0
 80028ae:	f502 71b0 	add.w	r1, r2, #352	; 0x160
 80028b2:	22b0      	movs	r2, #176	; 0xb0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f006 fdb5 	bl	8009424 <memcpy>
				 	teller_wait[4] = VOID_TELLER;
 80028ba:	4b57      	ldr	r3, [pc, #348]	; (8002a18 <manage_tellers+0x5b8>)
 80028bc:	4a5a      	ldr	r2, [pc, #360]	; (8002a28 <manage_tellers+0x5c8>)
 80028be:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80028c2:	4611      	mov	r1, r2
 80028c4:	22b0      	movs	r2, #176	; 0xb0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f006 fdac 	bl	8009424 <memcpy>
				  	tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 80028cc:	4a50      	ldr	r2, [pc, #320]	; (8002a10 <manage_tellers+0x5b0>)
 80028ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d0:	21b0      	movs	r1, #176	; 0xb0
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80028dc:	f107 0008 	add.w	r0, r7, #8
 80028e0:	4a4b      	ldr	r2, [pc, #300]	; (8002a10 <manage_tellers+0x5b0>)
 80028e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e4:	21b0      	movs	r1, #176	; 0xb0
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	3340      	adds	r3, #64	; 0x40
 80028ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f0:	f7fe fc30 	bl	8001154 <clock_init>
 80028f4:	f107 0308 	add.w	r3, r7, #8
 80028f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				break;
 8002900:	e308      	b.n	8002f14 <manage_tellers+0xab4>
			if(tellers[i].take_break == 1){
 8002902:	4a43      	ldr	r2, [pc, #268]	; (8002a10 <manage_tellers+0x5b0>)
 8002904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002906:	21b0      	movs	r1, #176	; 0xb0
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	3308      	adds	r3, #8
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	f040 8300 	bne.w	8002f18 <manage_tellers+0xab8>
				tellers[i].status = 2;
 8002918:	4a3d      	ldr	r2, [pc, #244]	; (8002a10 <manage_tellers+0x5b0>)
 800291a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800291c:	21b0      	movs	r1, #176	; 0xb0
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	3304      	adds	r3, #4
 8002926:	2202      	movs	r2, #2
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800292c:	2b03      	cmp	r3, #3
 800292e:	f000 80e2 	beq.w	8002af6 <manage_tellers+0x696>
 8002932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002934:	2b03      	cmp	r3, #3
 8002936:	f300 8141 	bgt.w	8002bbc <manage_tellers+0x75c>
 800293a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800293c:	2b01      	cmp	r3, #1
 800293e:	d003      	beq.n	8002948 <manage_tellers+0x4e8>
 8002940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002942:	2b02      	cmp	r3, #2
 8002944:	d074      	beq.n	8002a30 <manage_tellers+0x5d0>
					break;
 8002946:	e139      	b.n	8002bbc <manage_tellers+0x75c>
					breaker.start_break[i] = 1;
 8002948:	4a38      	ldr	r2, [pc, #224]	; (8002a2c <manage_tellers+0x5cc>)
 800294a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800294c:	2101      	movs	r1, #1
 800294e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration1;
 8002952:	4a2f      	ldr	r2, [pc, #188]	; (8002a10 <manage_tellers+0x5b0>)
 8002954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002956:	21b0      	movs	r1, #176	; 0xb0
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002962:	4b32      	ldr	r3, [pc, #200]	; (8002a2c <manage_tellers+0x5cc>)
 8002964:	4614      	mov	r4, r2
 8002966:	3318      	adds	r3, #24
 8002968:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800296c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					tellers[i].current_break = breaker.break_duration1;
 8002970:	4a27      	ldr	r2, [pc, #156]	; (8002a10 <manage_tellers+0x5b0>)
 8002972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002974:	21b0      	movs	r1, #176	; 0xb0
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	3378      	adds	r3, #120	; 0x78
 800297e:	4a2b      	ldr	r2, [pc, #172]	; (8002a2c <manage_tellers+0x5cc>)
 8002980:	3304      	adds	r3, #4
 8002982:	3218      	adds	r2, #24
 8002984:	ca07      	ldmia	r2, {r0, r1, r2}
 8002986:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_duration1 = clock_init(breaker.break_duration1);
 800298a:	4c28      	ldr	r4, [pc, #160]	; (8002a2c <manage_tellers+0x5cc>)
 800298c:	f107 0008 	add.w	r0, r7, #8
 8002990:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <manage_tellers+0x5cc>)
 8002992:	3318      	adds	r3, #24
 8002994:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002996:	f7fe fbdd 	bl	8001154 <clock_init>
 800299a:	f104 0318 	add.w	r3, r4, #24
 800299e:	f107 0208 	add.w	r2, r7, #8
 80029a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80029a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_time1 = clock_init(breaker.break_time1);
 80029a8:	4c20      	ldr	r4, [pc, #128]	; (8002a2c <manage_tellers+0x5cc>)
 80029aa:	f107 0008 	add.w	r0, r7, #8
 80029ae:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <manage_tellers+0x5cc>)
 80029b0:	330c      	adds	r3, #12
 80029b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b4:	f7fe fbce 	bl	8001154 <clock_init>
 80029b8:	f104 030c 	add.w	r3, r4, #12
 80029bc:	f107 0208 	add.w	r2, r7, #8
 80029c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80029c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					tellers[i].break_end = add_clocks(Clock, tellers[i].break_end);
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <manage_tellers+0x5b0>)
 80029c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ca:	21b0      	movs	r1, #176	; 0xb0
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	f103 0670 	add.w	r6, r3, #112	; 0x70
 80029d6:	f107 0508 	add.w	r5, r7, #8
 80029da:	4c10      	ldr	r4, [pc, #64]	; (8002a1c <manage_tellers+0x5bc>)
 80029dc:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <manage_tellers+0x5b0>)
 80029de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e0:	21b0      	movs	r1, #176	; 0xb0
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80029ec:	466b      	mov	r3, sp
 80029ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80029f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029f4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80029f8:	4628      	mov	r0, r5
 80029fa:	f7fe fc1c 	bl	8001236 <add_clocks>
 80029fe:	4634      	mov	r4, r6
 8002a00:	f107 0308 	add.w	r3, r7, #8
 8002a04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					break;
 8002a0c:	e0d7      	b.n	8002bbe <manage_tellers+0x75e>
 8002a0e:	bf00      	nop
 8002a10:	200003bc 	.word	0x200003bc
 8002a14:	200000fc 	.word	0x200000fc
 8002a18:	2000072c 	.word	0x2000072c
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	2000029c 	.word	0x2000029c
 8002a24:	200002a8 	.word	0x200002a8
 8002a28:	2000067c 	.word	0x2000067c
 8002a2c:	20000094 	.word	0x20000094
					breaker.start_break[i] = 1;
 8002a30:	4abb      	ldr	r2, [pc, #748]	; (8002d20 <manage_tellers+0x8c0>)
 8002a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a34:	2101      	movs	r1, #1
 8002a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration2;
 8002a3a:	4aba      	ldr	r2, [pc, #744]	; (8002d24 <manage_tellers+0x8c4>)
 8002a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3e:	21b0      	movs	r1, #176	; 0xb0
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002a4a:	4bb5      	ldr	r3, [pc, #724]	; (8002d20 <manage_tellers+0x8c0>)
 8002a4c:	4614      	mov	r4, r2
 8002a4e:	3330      	adds	r3, #48	; 0x30
 8002a50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					tellers[i].current_break = breaker.break_duration2;
 8002a58:	4ab2      	ldr	r2, [pc, #712]	; (8002d24 <manage_tellers+0x8c4>)
 8002a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a5c:	21b0      	movs	r1, #176	; 0xb0
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3378      	adds	r3, #120	; 0x78
 8002a66:	4aae      	ldr	r2, [pc, #696]	; (8002d20 <manage_tellers+0x8c0>)
 8002a68:	3304      	adds	r3, #4
 8002a6a:	3230      	adds	r2, #48	; 0x30
 8002a6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_duration2 = clock_init(breaker.break_duration2);
 8002a72:	4cab      	ldr	r4, [pc, #684]	; (8002d20 <manage_tellers+0x8c0>)
 8002a74:	f107 0008 	add.w	r0, r7, #8
 8002a78:	4ba9      	ldr	r3, [pc, #676]	; (8002d20 <manage_tellers+0x8c0>)
 8002a7a:	3330      	adds	r3, #48	; 0x30
 8002a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7e:	f7fe fb69 	bl	8001154 <clock_init>
 8002a82:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8002a86:	f107 0208 	add.w	r2, r7, #8
 8002a8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_time2 = clock_init(breaker.break_time2);
 8002a90:	4ca3      	ldr	r4, [pc, #652]	; (8002d20 <manage_tellers+0x8c0>)
 8002a92:	f107 0008 	add.w	r0, r7, #8
 8002a96:	4ba2      	ldr	r3, [pc, #648]	; (8002d20 <manage_tellers+0x8c0>)
 8002a98:	3324      	adds	r3, #36	; 0x24
 8002a9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a9c:	f7fe fb5a 	bl	8001154 <clock_init>
 8002aa0:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8002aa4:	f107 0208 	add.w	r2, r7, #8
 8002aa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					tellers[i].break_end = add_clocks(Clock, tellers[i].break_end);
 8002aae:	4a9d      	ldr	r2, [pc, #628]	; (8002d24 <manage_tellers+0x8c4>)
 8002ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab2:	21b0      	movs	r1, #176	; 0xb0
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	f103 0670 	add.w	r6, r3, #112	; 0x70
 8002abe:	f107 0508 	add.w	r5, r7, #8
 8002ac2:	4c99      	ldr	r4, [pc, #612]	; (8002d28 <manage_tellers+0x8c8>)
 8002ac4:	4a97      	ldr	r2, [pc, #604]	; (8002d24 <manage_tellers+0x8c4>)
 8002ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac8:	21b0      	movs	r1, #176	; 0xb0
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002ad4:	466b      	mov	r3, sp
 8002ad6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ad8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002adc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	f7fe fba8 	bl	8001236 <add_clocks>
 8002ae6:	4634      	mov	r4, r6
 8002ae8:	f107 0308 	add.w	r3, r7, #8
 8002aec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002af0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					break;
 8002af4:	e063      	b.n	8002bbe <manage_tellers+0x75e>
					breaker.start_break[i] = 1;
 8002af6:	4a8a      	ldr	r2, [pc, #552]	; (8002d20 <manage_tellers+0x8c0>)
 8002af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afa:	2101      	movs	r1, #1
 8002afc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration3;
 8002b00:	4a88      	ldr	r2, [pc, #544]	; (8002d24 <manage_tellers+0x8c4>)
 8002b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b04:	21b0      	movs	r1, #176	; 0xb0
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002b10:	4b83      	ldr	r3, [pc, #524]	; (8002d20 <manage_tellers+0x8c0>)
 8002b12:	4614      	mov	r4, r2
 8002b14:	3348      	adds	r3, #72	; 0x48
 8002b16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					tellers[i].current_break = breaker.break_duration3;
 8002b1e:	4a81      	ldr	r2, [pc, #516]	; (8002d24 <manage_tellers+0x8c4>)
 8002b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b22:	21b0      	movs	r1, #176	; 0xb0
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3378      	adds	r3, #120	; 0x78
 8002b2c:	4a7c      	ldr	r2, [pc, #496]	; (8002d20 <manage_tellers+0x8c0>)
 8002b2e:	3304      	adds	r3, #4
 8002b30:	3248      	adds	r2, #72	; 0x48
 8002b32:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_duration3 = clock_init(breaker.break_duration3);
 8002b38:	4c79      	ldr	r4, [pc, #484]	; (8002d20 <manage_tellers+0x8c0>)
 8002b3a:	f107 0008 	add.w	r0, r7, #8
 8002b3e:	4b78      	ldr	r3, [pc, #480]	; (8002d20 <manage_tellers+0x8c0>)
 8002b40:	3348      	adds	r3, #72	; 0x48
 8002b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b44:	f7fe fb06 	bl	8001154 <clock_init>
 8002b48:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002b4c:	f107 0208 	add.w	r2, r7, #8
 8002b50:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_time3 = clock_init(breaker.break_time3);
 8002b56:	4c72      	ldr	r4, [pc, #456]	; (8002d20 <manage_tellers+0x8c0>)
 8002b58:	f107 0008 	add.w	r0, r7, #8
 8002b5c:	4b70      	ldr	r3, [pc, #448]	; (8002d20 <manage_tellers+0x8c0>)
 8002b5e:	333c      	adds	r3, #60	; 0x3c
 8002b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b62:	f7fe faf7 	bl	8001154 <clock_init>
 8002b66:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8002b6a:	f107 0208 	add.w	r2, r7, #8
 8002b6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					tellers[i].break_end = add_clocks(Clock, tellers[i].break_end);
 8002b74:	4a6b      	ldr	r2, [pc, #428]	; (8002d24 <manage_tellers+0x8c4>)
 8002b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b78:	21b0      	movs	r1, #176	; 0xb0
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	f103 0670 	add.w	r6, r3, #112	; 0x70
 8002b84:	f107 0508 	add.w	r5, r7, #8
 8002b88:	4c67      	ldr	r4, [pc, #412]	; (8002d28 <manage_tellers+0x8c8>)
 8002b8a:	4a66      	ldr	r2, [pc, #408]	; (8002d24 <manage_tellers+0x8c4>)
 8002b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b8e:	21b0      	movs	r1, #176	; 0xb0
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002b9a:	466b      	mov	r3, sp
 8002b9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ba2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	f7fe fb45 	bl	8001236 <add_clocks>
 8002bac:	4634      	mov	r4, r6
 8002bae:	f107 0308 	add.w	r3, r7, #8
 8002bb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					break;
 8002bba:	e000      	b.n	8002bbe <manage_tellers+0x75e>
					break;
 8002bbc:	bf00      	nop
				tellers[i].take_break = 0;
 8002bbe:	4a59      	ldr	r2, [pc, #356]	; (8002d24 <manage_tellers+0x8c4>)
 8002bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc2:	21b0      	movs	r1, #176	; 0xb0
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3308      	adds	r3, #8
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
				if(clock_compare(tellers[i].current_time_waiting,tellers[i].max_time_waiting) == 0){
 8002bd0:	4a54      	ldr	r2, [pc, #336]	; (8002d24 <manage_tellers+0x8c4>)
 8002bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd4:	21b0      	movs	r1, #176	; 0xb0
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3358      	adds	r3, #88	; 0x58
 8002bde:	4951      	ldr	r1, [pc, #324]	; (8002d24 <manage_tellers+0x8c4>)
 8002be0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002be2:	20b0      	movs	r0, #176	; 0xb0
 8002be4:	fb00 f202 	mul.w	r2, r0, r2
 8002be8:	440a      	add	r2, r1
 8002bea:	3240      	adds	r2, #64	; 0x40
 8002bec:	466c      	mov	r4, sp
 8002bee:	1d19      	adds	r1, r3, #4
 8002bf0:	c903      	ldmia	r1, {r0, r1}
 8002bf2:	e884 0003 	stmia.w	r4, {r0, r1}
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bfa:	f7fe fb56 	bl	80012aa <clock_compare>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d113      	bne.n	8002c2c <manage_tellers+0x7cc>
					tellers[i].max_time_waiting = tellers[i].current_time_waiting;
 8002c04:	4a47      	ldr	r2, [pc, #284]	; (8002d24 <manage_tellers+0x8c4>)
 8002c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c08:	21b0      	movs	r1, #176	; 0xb0
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8002c14:	4a43      	ldr	r2, [pc, #268]	; (8002d24 <manage_tellers+0x8c4>)
 8002c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c18:	21b0      	movs	r1, #176	; 0xb0
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002c24:	4603      	mov	r3, r0
 8002c26:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].total_time_waiting = add_clocks(tellers[i].total_time_waiting,tellers[i].current_time_waiting);
 8002c2c:	4a3d      	ldr	r2, [pc, #244]	; (8002d24 <manage_tellers+0x8c4>)
 8002c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c30:	21b0      	movs	r1, #176	; 0xb0
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8002c3c:	f107 0508 	add.w	r5, r7, #8
 8002c40:	4a38      	ldr	r2, [pc, #224]	; (8002d24 <manage_tellers+0x8c4>)
 8002c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c44:	21b0      	movs	r1, #176	; 0xb0
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3328      	adds	r3, #40	; 0x28
 8002c4e:	4935      	ldr	r1, [pc, #212]	; (8002d24 <manage_tellers+0x8c4>)
 8002c50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c52:	20b0      	movs	r0, #176	; 0xb0
 8002c54:	fb00 f202 	mul.w	r2, r0, r2
 8002c58:	440a      	add	r2, r1
 8002c5a:	3240      	adds	r2, #64	; 0x40
 8002c5c:	466c      	mov	r4, sp
 8002c5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c66:	4628      	mov	r0, r5
 8002c68:	f7fe fae5 	bl	8001236 <add_clocks>
 8002c6c:	4634      	mov	r4, r6
 8002c6e:	f107 0308 	add.w	r3, r7, #8
 8002c72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 8002c7a:	4a2a      	ldr	r2, [pc, #168]	; (8002d24 <manage_tellers+0x8c4>)
 8002c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c7e:	21b0      	movs	r1, #176	; 0xb0
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002c8a:	f107 0008 	add.w	r0, r7, #8
 8002c8e:	4a25      	ldr	r2, [pc, #148]	; (8002d24 <manage_tellers+0x8c4>)
 8002c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c92:	21b0      	movs	r1, #176	; 0xb0
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3340      	adds	r3, #64	; 0x40
 8002c9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c9e:	f7fe fa59 	bl	8001154 <clock_init>
 8002ca2:	f107 0308 	add.w	r3, r7, #8
 8002ca6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002caa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			break;
 8002cae:	e133      	b.n	8002f18 <manage_tellers+0xab8>
			if(clock_compare(tellers[i].current_time_working,tellers[i].service_end_time) == 1){
 8002cb0:	4a1c      	ldr	r2, [pc, #112]	; (8002d24 <manage_tellers+0x8c4>)
 8002cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb4:	21b0      	movs	r1, #176	; 0xb0
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3308      	adds	r3, #8
 8002cbe:	4919      	ldr	r1, [pc, #100]	; (8002d24 <manage_tellers+0x8c4>)
 8002cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cc2:	20b0      	movs	r0, #176	; 0xb0
 8002cc4:	fb00 f202 	mul.w	r2, r0, r2
 8002cc8:	440a      	add	r2, r1
 8002cca:	3230      	adds	r2, #48	; 0x30
 8002ccc:	466c      	mov	r4, sp
 8002cce:	f103 0108 	add.w	r1, r3, #8
 8002cd2:	c903      	ldmia	r1, {r0, r1}
 8002cd4:	e884 0003 	stmia.w	r4, {r0, r1}
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	3204      	adds	r2, #4
 8002cdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cde:	f7fe fae4 	bl	80012aa <clock_compare>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d121      	bne.n	8002d2c <manage_tellers+0x8cc>
				tellers[i].current_time_working = clock_increment(tellers[i].current_time_working);
 8002ce8:	4a0e      	ldr	r2, [pc, #56]	; (8002d24 <manage_tellers+0x8c4>)
 8002cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cec:	21b0      	movs	r1, #176	; 0xb0
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002cf8:	f107 0008 	add.w	r0, r7, #8
 8002cfc:	4a09      	ldr	r2, [pc, #36]	; (8002d24 <manage_tellers+0x8c4>)
 8002cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d00:	21b0      	movs	r1, #176	; 0xb0
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3330      	adds	r3, #48	; 0x30
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d0e:	f7fe fa61 	bl	80011d4 <clock_increment>
 8002d12:	1d23      	adds	r3, r4, #4
 8002d14:	f107 0208 	add.w	r2, r7, #8
 8002d18:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				break;
 8002d1e:	e100      	b.n	8002f22 <manage_tellers+0xac2>
 8002d20:	20000094 	.word	0x20000094
 8002d24:	200003bc 	.word	0x200003bc
 8002d28:	20000000 	.word	0x20000000
			if(clock_compare(tellers[i].current_time_working,tellers[i].service_end_time) == 1){
 8002d2c:	4a81      	ldr	r2, [pc, #516]	; (8002f34 <manage_tellers+0xad4>)
 8002d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d30:	21b0      	movs	r1, #176	; 0xb0
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3308      	adds	r3, #8
 8002d3a:	497e      	ldr	r1, [pc, #504]	; (8002f34 <manage_tellers+0xad4>)
 8002d3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d3e:	20b0      	movs	r0, #176	; 0xb0
 8002d40:	fb00 f202 	mul.w	r2, r0, r2
 8002d44:	440a      	add	r2, r1
 8002d46:	3230      	adds	r2, #48	; 0x30
 8002d48:	466c      	mov	r4, sp
 8002d4a:	f103 0108 	add.w	r1, r3, #8
 8002d4e:	c903      	ldmia	r1, {r0, r1}
 8002d50:	e884 0003 	stmia.w	r4, {r0, r1}
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	3204      	adds	r2, #4
 8002d58:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d5a:	f7fe faa6 	bl	80012aa <clock_compare>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	f040 80e1 	bne.w	8002f28 <manage_tellers+0xac8>
				if(clock_compare(tellers[i].current_time_working,tellers[i].max_time_working) == 0){
 8002d66:	4a73      	ldr	r2, [pc, #460]	; (8002f34 <manage_tellers+0xad4>)
 8002d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d6a:	21b0      	movs	r1, #176	; 0xb0
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	3348      	adds	r3, #72	; 0x48
 8002d74:	496f      	ldr	r1, [pc, #444]	; (8002f34 <manage_tellers+0xad4>)
 8002d76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d78:	20b0      	movs	r0, #176	; 0xb0
 8002d7a:	fb00 f202 	mul.w	r2, r0, r2
 8002d7e:	440a      	add	r2, r1
 8002d80:	3230      	adds	r2, #48	; 0x30
 8002d82:	466c      	mov	r4, sp
 8002d84:	f103 0108 	add.w	r1, r3, #8
 8002d88:	c903      	ldmia	r1, {r0, r1}
 8002d8a:	e884 0003 	stmia.w	r4, {r0, r1}
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	3204      	adds	r2, #4
 8002d92:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d94:	f7fe fa89 	bl	80012aa <clock_compare>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d112      	bne.n	8002dc4 <manage_tellers+0x964>
					tellers[i].max_time_working = tellers[i].current_time_working;
 8002d9e:	4a65      	ldr	r2, [pc, #404]	; (8002f34 <manage_tellers+0xad4>)
 8002da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da2:	21b0      	movs	r1, #176	; 0xb0
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	3348      	adds	r3, #72	; 0x48
 8002dac:	4961      	ldr	r1, [pc, #388]	; (8002f34 <manage_tellers+0xad4>)
 8002dae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002db0:	20b0      	movs	r0, #176	; 0xb0
 8002db2:	fb00 f202 	mul.w	r2, r0, r2
 8002db6:	440a      	add	r2, r1
 8002db8:	3230      	adds	r2, #48	; 0x30
 8002dba:	3304      	adds	r3, #4
 8002dbc:	3204      	adds	r2, #4
 8002dbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].total_time_working = add_clocks(tellers[i].total_time_working,tellers[i].current_time_working);
 8002dc4:	4a5b      	ldr	r2, [pc, #364]	; (8002f34 <manage_tellers+0xad4>)
 8002dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc8:	21b0      	movs	r1, #176	; 0xb0
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	f103 0518 	add.w	r5, r3, #24
 8002dd4:	f107 0c08 	add.w	ip, r7, #8
 8002dd8:	4a56      	ldr	r2, [pc, #344]	; (8002f34 <manage_tellers+0xad4>)
 8002dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ddc:	21b0      	movs	r1, #176	; 0xb0
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	f103 0618 	add.w	r6, r3, #24
 8002de8:	4a52      	ldr	r2, [pc, #328]	; (8002f34 <manage_tellers+0xad4>)
 8002dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dec:	21b0      	movs	r1, #176	; 0xb0
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	3330      	adds	r3, #48	; 0x30
 8002df6:	466c      	mov	r4, sp
 8002df8:	3304      	adds	r3, #4
 8002dfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002dfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e02:	1d33      	adds	r3, r6, #4
 8002e04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e06:	4660      	mov	r0, ip
 8002e08:	f7fe fa15 	bl	8001236 <add_clocks>
 8002e0c:	1d2b      	adds	r3, r5, #4
 8002e0e:	f107 0208 	add.w	r2, r7, #8
 8002e12:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].current_time_working = clock_init(tellers[i].current_time_working);
 8002e18:	4a46      	ldr	r2, [pc, #280]	; (8002f34 <manage_tellers+0xad4>)
 8002e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e1c:	21b0      	movs	r1, #176	; 0xb0
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002e28:	f107 0008 	add.w	r0, r7, #8
 8002e2c:	4a41      	ldr	r2, [pc, #260]	; (8002f34 <manage_tellers+0xad4>)
 8002e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e30:	21b0      	movs	r1, #176	; 0xb0
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3330      	adds	r3, #48	; 0x30
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e3e:	f7fe f989 	bl	8001154 <clock_init>
 8002e42:	1d23      	adds	r3, r4, #4
 8002e44:	f107 0208 	add.w	r2, r7, #8
 8002e48:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].status = 0;
 8002e4e:	4a39      	ldr	r2, [pc, #228]	; (8002f34 <manage_tellers+0xad4>)
 8002e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e52:	21b0      	movs	r1, #176	; 0xb0
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
				tellers[i].teller_start_wait = Clock;
 8002e60:	4a34      	ldr	r2, [pc, #208]	; (8002f34 <manage_tellers+0xad4>)
 8002e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e64:	21b0      	movs	r1, #176	; 0xb0
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3360      	adds	r3, #96	; 0x60
 8002e6e:	4a32      	ldr	r2, [pc, #200]	; (8002f38 <manage_tellers+0xad8>)
 8002e70:	3304      	adds	r3, #4
 8002e72:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				if(!((teller_wait[0].id == i) && (teller_wait[1].id == i) && (teller_wait[2].id == i))){
 8002e78:	4b30      	ldr	r3, [pc, #192]	; (8002f3c <manage_tellers+0xadc>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d10b      	bne.n	8002e9a <manage_tellers+0xa3a>
 8002e82:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <manage_tellers+0xadc>)
 8002e84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d105      	bne.n	8002e9a <manage_tellers+0xa3a>
 8002e8e:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <manage_tellers+0xadc>)
 8002e90:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d040      	beq.n	8002f1c <manage_tellers+0xabc>
					if(teller_wait[0].id == 0){
 8002e9a:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <manage_tellers+0xadc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10c      	bne.n	8002ebc <manage_tellers+0xa5c>
						teller_wait[0] = tellers[i];
 8002ea2:	4826      	ldr	r0, [pc, #152]	; (8002f3c <manage_tellers+0xadc>)
 8002ea4:	4a23      	ldr	r2, [pc, #140]	; (8002f34 <manage_tellers+0xad4>)
 8002ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea8:	21b0      	movs	r1, #176	; 0xb0
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	23b0      	movs	r3, #176	; 0xb0
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f006 fab5 	bl	8009424 <memcpy>
					break;
 8002eba:	e031      	b.n	8002f20 <manage_tellers+0xac0>
					else if(teller_wait[1].id == 0){
 8002ebc:	4b1f      	ldr	r3, [pc, #124]	; (8002f3c <manage_tellers+0xadc>)
 8002ebe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10d      	bne.n	8002ee2 <manage_tellers+0xa82>
						teller_wait[1] = tellers[i];
 8002ec6:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <manage_tellers+0xadc>)
 8002ec8:	491a      	ldr	r1, [pc, #104]	; (8002f34 <manage_tellers+0xad4>)
 8002eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ecc:	20b0      	movs	r0, #176	; 0xb0
 8002ece:	fb00 f303 	mul.w	r3, r0, r3
 8002ed2:	4419      	add	r1, r3
 8002ed4:	f102 03b0 	add.w	r3, r2, #176	; 0xb0
 8002ed8:	22b0      	movs	r2, #176	; 0xb0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f006 faa2 	bl	8009424 <memcpy>
					break;
 8002ee0:	e01e      	b.n	8002f20 <manage_tellers+0xac0>
					else if(teller_wait[2].id == 0){
 8002ee2:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <manage_tellers+0xadc>)
 8002ee4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d119      	bne.n	8002f20 <manage_tellers+0xac0>
						teller_wait[2] = tellers[i];
 8002eec:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <manage_tellers+0xadc>)
 8002eee:	4911      	ldr	r1, [pc, #68]	; (8002f34 <manage_tellers+0xad4>)
 8002ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef2:	20b0      	movs	r0, #176	; 0xb0
 8002ef4:	fb00 f303 	mul.w	r3, r0, r3
 8002ef8:	4419      	add	r1, r3
 8002efa:	f502 73b0 	add.w	r3, r2, #352	; 0x160
 8002efe:	22b0      	movs	r2, #176	; 0xb0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f006 fa8f 	bl	8009424 <memcpy>
					break;
 8002f06:	e00b      	b.n	8002f20 <manage_tellers+0xac0>
				break;
 8002f08:	bf00      	nop
 8002f0a:	e00d      	b.n	8002f28 <manage_tellers+0xac8>
			break;
 8002f0c:	bf00      	nop
 8002f0e:	e00b      	b.n	8002f28 <manage_tellers+0xac8>
					break;
 8002f10:	bf00      	nop
 8002f12:	e009      	b.n	8002f28 <manage_tellers+0xac8>
				break;
 8002f14:	bf00      	nop
 8002f16:	e007      	b.n	8002f28 <manage_tellers+0xac8>
			break;
 8002f18:	bf00      	nop
 8002f1a:	e005      	b.n	8002f28 <manage_tellers+0xac8>
				break;
 8002f1c:	bf00      	nop
 8002f1e:	e003      	b.n	8002f28 <manage_tellers+0xac8>
					break;
 8002f20:	bf00      	nop
			break;
 8002f22:	e001      	b.n	8002f28 <manage_tellers+0xac8>
	}

}
 8002f24:	bf00      	nop
 8002f26:	e000      	b.n	8002f2a <manage_tellers+0xaca>
			break;
 8002f28:	bf00      	nop
}
 8002f2a:	bf00      	nop
 8002f2c:	3750      	adds	r7, #80	; 0x50
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f34:	200003bc 	.word	0x200003bc
 8002f38:	20000000 	.word	0x20000000
 8002f3c:	2000072c 	.word	0x2000072c

08002f40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f44:	f7ff f8f4 	bl	8002130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f48:	480c      	ldr	r0, [pc, #48]	; (8002f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f4a:	490d      	ldr	r1, [pc, #52]	; (8002f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f4c:	4a0d      	ldr	r2, [pc, #52]	; (8002f84 <LoopForever+0xe>)
  movs r3, #0
 8002f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f50:	e002      	b.n	8002f58 <LoopCopyDataInit>

08002f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f56:	3304      	adds	r3, #4

08002f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f5c:	d3f9      	bcc.n	8002f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f60:	4c0a      	ldr	r4, [pc, #40]	; (8002f8c <LoopForever+0x16>)
  movs r3, #0
 8002f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f64:	e001      	b.n	8002f6a <LoopFillZerobss>

08002f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f68:	3204      	adds	r2, #4

08002f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f6c:	d3fb      	bcc.n	8002f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f6e:	f006 fa33 	bl	80093d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f72:	f7fe fc87 	bl	8001884 <main>

08002f76 <LoopForever>:

LoopForever:
    b LoopForever
 8002f76:	e7fe      	b.n	8002f76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f80:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002f84:	0800a10c 	.word	0x0800a10c
  ldr r2, =_sbss
 8002f88:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002f8c:	20007260 	.word	0x20007260

08002f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f90:	e7fe      	b.n	8002f90 <ADC1_2_IRQHandler>
	...

08002f94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <HAL_Init+0x3c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <HAL_Init+0x3c>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002faa:	2003      	movs	r0, #3
 8002fac:	f000 f93e 	bl	800322c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fb0:	200f      	movs	r0, #15
 8002fb2:	f000 f80f 	bl	8002fd4 <HAL_InitTick>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	71fb      	strb	r3, [r7, #7]
 8002fc0:	e001      	b.n	8002fc6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fc2:	f7fe ff51 	bl	8001e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40022000 	.word	0x40022000

08002fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002fe0:	4b17      	ldr	r3, [pc, #92]	; (8003040 <HAL_InitTick+0x6c>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d023      	beq.n	8003030 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002fe8:	4b16      	ldr	r3, [pc, #88]	; (8003044 <HAL_InitTick+0x70>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b14      	ldr	r3, [pc, #80]	; (8003040 <HAL_InitTick+0x6c>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 f949 	bl	8003296 <HAL_SYSTICK_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10f      	bne.n	800302a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b0f      	cmp	r3, #15
 800300e:	d809      	bhi.n	8003024 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003010:	2200      	movs	r2, #0
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	f04f 30ff 	mov.w	r0, #4294967295
 8003018:	f000 f913 	bl	8003242 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800301c:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <HAL_InitTick+0x74>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e007      	b.n	8003034 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
 8003028:	e004      	b.n	8003034 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
 800302e:	e001      	b.n	8003034 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000020 	.word	0x20000020
 8003044:	20000018 	.word	0x20000018
 8003048:	2000001c 	.word	0x2000001c

0800304c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_IncTick+0x20>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_IncTick+0x24>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4413      	add	r3, r2
 800305c:	4a04      	ldr	r2, [pc, #16]	; (8003070 <HAL_IncTick+0x24>)
 800305e:	6013      	str	r3, [r2, #0]
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000020 	.word	0x20000020
 8003070:	200009ec 	.word	0x200009ec

08003074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return uwTick;
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_GetTick+0x14>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	200009ec 	.word	0x200009ec

0800308c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a8:	4013      	ands	r3, r2
 80030aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030be:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	60d3      	str	r3, [r2, #12]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <__NVIC_GetPriorityGrouping+0x18>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	f003 0307 	and.w	r3, r3, #7
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	db0b      	blt.n	800311a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	f003 021f 	and.w	r2, r3, #31
 8003108:	4907      	ldr	r1, [pc, #28]	; (8003128 <__NVIC_EnableIRQ+0x38>)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	2001      	movs	r0, #1
 8003112:	fa00 f202 	lsl.w	r2, r0, r2
 8003116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	e000e100 	.word	0xe000e100

0800312c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	6039      	str	r1, [r7, #0]
 8003136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313c:	2b00      	cmp	r3, #0
 800313e:	db0a      	blt.n	8003156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	490c      	ldr	r1, [pc, #48]	; (8003178 <__NVIC_SetPriority+0x4c>)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	0112      	lsls	r2, r2, #4
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	440b      	add	r3, r1
 8003150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003154:	e00a      	b.n	800316c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4908      	ldr	r1, [pc, #32]	; (800317c <__NVIC_SetPriority+0x50>)
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	3b04      	subs	r3, #4
 8003164:	0112      	lsls	r2, r2, #4
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	440b      	add	r3, r1
 800316a:	761a      	strb	r2, [r3, #24]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000e100 	.word	0xe000e100
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003180:	b480      	push	{r7}
 8003182:	b089      	sub	sp, #36	; 0x24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f1c3 0307 	rsb	r3, r3, #7
 800319a:	2b04      	cmp	r3, #4
 800319c:	bf28      	it	cs
 800319e:	2304      	movcs	r3, #4
 80031a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3304      	adds	r3, #4
 80031a6:	2b06      	cmp	r3, #6
 80031a8:	d902      	bls.n	80031b0 <NVIC_EncodePriority+0x30>
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3b03      	subs	r3, #3
 80031ae:	e000      	b.n	80031b2 <NVIC_EncodePriority+0x32>
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	f04f 32ff 	mov.w	r2, #4294967295
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43da      	mvns	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	401a      	ands	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c8:	f04f 31ff 	mov.w	r1, #4294967295
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	43d9      	mvns	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d8:	4313      	orrs	r3, r2
         );
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3724      	adds	r7, #36	; 0x24
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031f8:	d301      	bcc.n	80031fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031fa:	2301      	movs	r3, #1
 80031fc:	e00f      	b.n	800321e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fe:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <SysTick_Config+0x40>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003206:	210f      	movs	r1, #15
 8003208:	f04f 30ff 	mov.w	r0, #4294967295
 800320c:	f7ff ff8e 	bl	800312c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <SysTick_Config+0x40>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003216:	4b04      	ldr	r3, [pc, #16]	; (8003228 <SysTick_Config+0x40>)
 8003218:	2207      	movs	r2, #7
 800321a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	e000e010 	.word	0xe000e010

0800322c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ff29 	bl	800308c <__NVIC_SetPriorityGrouping>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	4603      	mov	r3, r0
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003254:	f7ff ff3e 	bl	80030d4 <__NVIC_GetPriorityGrouping>
 8003258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	6978      	ldr	r0, [r7, #20]
 8003260:	f7ff ff8e 	bl	8003180 <NVIC_EncodePriority>
 8003264:	4602      	mov	r2, r0
 8003266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff5d 	bl	800312c <__NVIC_SetPriority>
}
 8003272:	bf00      	nop
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff31 	bl	80030f0 <__NVIC_EnableIRQ>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ffa2 	bl	80031e8 <SysTick_Config>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032be:	e17f      	b.n	80035c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	2101      	movs	r1, #1
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8171 	beq.w	80035ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d005      	beq.n	80032f0 <HAL_GPIO_Init+0x40>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d130      	bne.n	8003352 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	2203      	movs	r2, #3
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003326:	2201      	movs	r2, #1
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4013      	ands	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f003 0201 	and.w	r2, r3, #1
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b03      	cmp	r3, #3
 800335c:	d118      	bne.n	8003390 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003364:	2201      	movs	r2, #1
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	08db      	lsrs	r3, r3, #3
 800337a:	f003 0201 	and.w	r2, r3, #1
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	2b03      	cmp	r3, #3
 800339a:	d017      	beq.n	80033cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	2203      	movs	r2, #3
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d123      	bne.n	8003420 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	08da      	lsrs	r2, r3, #3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3208      	adds	r2, #8
 80033e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	220f      	movs	r2, #15
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	08da      	lsrs	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3208      	adds	r2, #8
 800341a:	6939      	ldr	r1, [r7, #16]
 800341c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	2203      	movs	r2, #3
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 0203 	and.w	r2, r3, #3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80ac 	beq.w	80035ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003462:	4b5f      	ldr	r3, [pc, #380]	; (80035e0 <HAL_GPIO_Init+0x330>)
 8003464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003466:	4a5e      	ldr	r2, [pc, #376]	; (80035e0 <HAL_GPIO_Init+0x330>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6613      	str	r3, [r2, #96]	; 0x60
 800346e:	4b5c      	ldr	r3, [pc, #368]	; (80035e0 <HAL_GPIO_Init+0x330>)
 8003470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800347a:	4a5a      	ldr	r2, [pc, #360]	; (80035e4 <HAL_GPIO_Init+0x334>)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	3302      	adds	r3, #2
 8003482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003486:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	220f      	movs	r2, #15
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034a4:	d025      	beq.n	80034f2 <HAL_GPIO_Init+0x242>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a4f      	ldr	r2, [pc, #316]	; (80035e8 <HAL_GPIO_Init+0x338>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01f      	beq.n	80034ee <HAL_GPIO_Init+0x23e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a4e      	ldr	r2, [pc, #312]	; (80035ec <HAL_GPIO_Init+0x33c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d019      	beq.n	80034ea <HAL_GPIO_Init+0x23a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4d      	ldr	r2, [pc, #308]	; (80035f0 <HAL_GPIO_Init+0x340>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d013      	beq.n	80034e6 <HAL_GPIO_Init+0x236>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4c      	ldr	r2, [pc, #304]	; (80035f4 <HAL_GPIO_Init+0x344>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00d      	beq.n	80034e2 <HAL_GPIO_Init+0x232>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4b      	ldr	r2, [pc, #300]	; (80035f8 <HAL_GPIO_Init+0x348>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d007      	beq.n	80034de <HAL_GPIO_Init+0x22e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4a      	ldr	r2, [pc, #296]	; (80035fc <HAL_GPIO_Init+0x34c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d101      	bne.n	80034da <HAL_GPIO_Init+0x22a>
 80034d6:	2306      	movs	r3, #6
 80034d8:	e00c      	b.n	80034f4 <HAL_GPIO_Init+0x244>
 80034da:	2307      	movs	r3, #7
 80034dc:	e00a      	b.n	80034f4 <HAL_GPIO_Init+0x244>
 80034de:	2305      	movs	r3, #5
 80034e0:	e008      	b.n	80034f4 <HAL_GPIO_Init+0x244>
 80034e2:	2304      	movs	r3, #4
 80034e4:	e006      	b.n	80034f4 <HAL_GPIO_Init+0x244>
 80034e6:	2303      	movs	r3, #3
 80034e8:	e004      	b.n	80034f4 <HAL_GPIO_Init+0x244>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e002      	b.n	80034f4 <HAL_GPIO_Init+0x244>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_GPIO_Init+0x244>
 80034f2:	2300      	movs	r3, #0
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	f002 0203 	and.w	r2, r2, #3
 80034fa:	0092      	lsls	r2, r2, #2
 80034fc:	4093      	lsls	r3, r2
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003504:	4937      	ldr	r1, [pc, #220]	; (80035e4 <HAL_GPIO_Init+0x334>)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	089b      	lsrs	r3, r3, #2
 800350a:	3302      	adds	r3, #2
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003512:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <HAL_GPIO_Init+0x350>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	43db      	mvns	r3, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003536:	4a32      	ldr	r2, [pc, #200]	; (8003600 <HAL_GPIO_Init+0x350>)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800353c:	4b30      	ldr	r3, [pc, #192]	; (8003600 <HAL_GPIO_Init+0x350>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	43db      	mvns	r3, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003560:	4a27      	ldr	r2, [pc, #156]	; (8003600 <HAL_GPIO_Init+0x350>)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003566:	4b26      	ldr	r3, [pc, #152]	; (8003600 <HAL_GPIO_Init+0x350>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	43db      	mvns	r3, r3
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4013      	ands	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800358a:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <HAL_GPIO_Init+0x350>)
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_GPIO_Init+0x350>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	43db      	mvns	r3, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4013      	ands	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035b4:	4a12      	ldr	r2, [pc, #72]	; (8003600 <HAL_GPIO_Init+0x350>)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3301      	adds	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f47f ae78 	bne.w	80032c0 <HAL_GPIO_Init+0x10>
  }
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40010000 	.word	0x40010000
 80035e8:	48000400 	.word	0x48000400
 80035ec:	48000800 	.word	0x48000800
 80035f0:	48000c00 	.word	0x48000c00
 80035f4:	48001000 	.word	0x48001000
 80035f8:	48001400 	.word	0x48001400
 80035fc:	48001800 	.word	0x48001800
 8003600:	40010400 	.word	0x40010400

08003604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e001      	b.n	8003626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003622:	2300      	movs	r3, #0
 8003624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003626:	7bfb      	ldrb	r3, [r7, #15]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
 8003640:	4613      	mov	r3, r2
 8003642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003644:	787b      	ldrb	r3, [r7, #1]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003650:	e002      	b.n	8003658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <HAL_PWREx_GetVoltageRange+0x18>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40007000 	.word	0x40007000

08003680 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368e:	d130      	bne.n	80036f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003690:	4b23      	ldr	r3, [pc, #140]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800369c:	d038      	beq.n	8003710 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800369e:	4b20      	ldr	r3, [pc, #128]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036a6:	4a1e      	ldr	r2, [pc, #120]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036ae:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2232      	movs	r2, #50	; 0x32
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	0c9b      	lsrs	r3, r3, #18
 80036c0:	3301      	adds	r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c4:	e002      	b.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036cc:	4b14      	ldr	r3, [pc, #80]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d8:	d102      	bne.n	80036e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f2      	bne.n	80036c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ec:	d110      	bne.n	8003710 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e00f      	b.n	8003712 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036f2:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fe:	d007      	beq.n	8003710 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003708:	4a05      	ldr	r2, [pc, #20]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800370a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800370e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40007000 	.word	0x40007000
 8003724:	20000018 	.word	0x20000018
 8003728:	431bde83 	.word	0x431bde83

0800372c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e3ca      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800373e:	4b97      	ldr	r3, [pc, #604]	; (800399c <HAL_RCC_OscConfig+0x270>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003748:	4b94      	ldr	r3, [pc, #592]	; (800399c <HAL_RCC_OscConfig+0x270>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80e4 	beq.w	8003928 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <HAL_RCC_OscConfig+0x4a>
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b0c      	cmp	r3, #12
 800376a:	f040 808b 	bne.w	8003884 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b01      	cmp	r3, #1
 8003772:	f040 8087 	bne.w	8003884 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003776:	4b89      	ldr	r3, [pc, #548]	; (800399c <HAL_RCC_OscConfig+0x270>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <HAL_RCC_OscConfig+0x62>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e3a2      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1a      	ldr	r2, [r3, #32]
 8003792:	4b82      	ldr	r3, [pc, #520]	; (800399c <HAL_RCC_OscConfig+0x270>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d004      	beq.n	80037a8 <HAL_RCC_OscConfig+0x7c>
 800379e:	4b7f      	ldr	r3, [pc, #508]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a6:	e005      	b.n	80037b4 <HAL_RCC_OscConfig+0x88>
 80037a8:	4b7c      	ldr	r3, [pc, #496]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80037aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ae:	091b      	lsrs	r3, r3, #4
 80037b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d223      	bcs.n	8003800 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fd55 	bl	800426c <RCC_SetFlashLatencyFromMSIRange>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e383      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037cc:	4b73      	ldr	r3, [pc, #460]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a72      	ldr	r2, [pc, #456]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80037d2:	f043 0308 	orr.w	r3, r3, #8
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b70      	ldr	r3, [pc, #448]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	496d      	ldr	r1, [pc, #436]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037ea:	4b6c      	ldr	r3, [pc, #432]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	4968      	ldr	r1, [pc, #416]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
 80037fe:	e025      	b.n	800384c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003800:	4b66      	ldr	r3, [pc, #408]	; (800399c <HAL_RCC_OscConfig+0x270>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a65      	ldr	r2, [pc, #404]	; (800399c <HAL_RCC_OscConfig+0x270>)
 8003806:	f043 0308 	orr.w	r3, r3, #8
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b63      	ldr	r3, [pc, #396]	; (800399c <HAL_RCC_OscConfig+0x270>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4960      	ldr	r1, [pc, #384]	; (800399c <HAL_RCC_OscConfig+0x270>)
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800381e:	4b5f      	ldr	r3, [pc, #380]	; (800399c <HAL_RCC_OscConfig+0x270>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	495b      	ldr	r1, [pc, #364]	; (800399c <HAL_RCC_OscConfig+0x270>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d109      	bne.n	800384c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fd15 	bl	800426c <RCC_SetFlashLatencyFromMSIRange>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e343      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800384c:	f000 fc4a 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b52      	ldr	r3, [pc, #328]	; (800399c <HAL_RCC_OscConfig+0x270>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	4950      	ldr	r1, [pc, #320]	; (80039a0 <HAL_RCC_OscConfig+0x274>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
 8003868:	4a4e      	ldr	r2, [pc, #312]	; (80039a4 <HAL_RCC_OscConfig+0x278>)
 800386a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800386c:	4b4e      	ldr	r3, [pc, #312]	; (80039a8 <HAL_RCC_OscConfig+0x27c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fbaf 	bl	8002fd4 <HAL_InitTick>
 8003876:	4603      	mov	r3, r0
 8003878:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d052      	beq.n	8003926 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	e327      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d032      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800388c:	4b43      	ldr	r3, [pc, #268]	; (800399c <HAL_RCC_OscConfig+0x270>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a42      	ldr	r2, [pc, #264]	; (800399c <HAL_RCC_OscConfig+0x270>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003898:	f7ff fbec 	bl	8003074 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038a0:	f7ff fbe8 	bl	8003074 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e310      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038b2:	4b3a      	ldr	r3, [pc, #232]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038be:	4b37      	ldr	r3, [pc, #220]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a36      	ldr	r2, [pc, #216]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b34      	ldr	r3, [pc, #208]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	4931      	ldr	r1, [pc, #196]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038dc:	4b2f      	ldr	r3, [pc, #188]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	492c      	ldr	r1, [pc, #176]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
 80038f0:	e01a      	b.n	8003928 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038f2:	4b2a      	ldr	r3, [pc, #168]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a29      	ldr	r2, [pc, #164]	; (800399c <HAL_RCC_OscConfig+0x270>)
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038fe:	f7ff fbb9 	bl	8003074 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003906:	f7ff fbb5 	bl	8003074 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e2dd      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003918:	4b20      	ldr	r3, [pc, #128]	; (800399c <HAL_RCC_OscConfig+0x270>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f0      	bne.n	8003906 <HAL_RCC_OscConfig+0x1da>
 8003924:	e000      	b.n	8003928 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003926:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	d074      	beq.n	8003a1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b08      	cmp	r3, #8
 8003938:	d005      	beq.n	8003946 <HAL_RCC_OscConfig+0x21a>
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b0c      	cmp	r3, #12
 800393e:	d10e      	bne.n	800395e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d10b      	bne.n	800395e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <HAL_RCC_OscConfig+0x270>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d064      	beq.n	8003a1c <HAL_RCC_OscConfig+0x2f0>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d160      	bne.n	8003a1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e2ba      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003966:	d106      	bne.n	8003976 <HAL_RCC_OscConfig+0x24a>
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <HAL_RCC_OscConfig+0x270>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0b      	ldr	r2, [pc, #44]	; (800399c <HAL_RCC_OscConfig+0x270>)
 800396e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	e026      	b.n	80039c4 <HAL_RCC_OscConfig+0x298>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800397e:	d115      	bne.n	80039ac <HAL_RCC_OscConfig+0x280>
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_RCC_OscConfig+0x270>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a05      	ldr	r2, [pc, #20]	; (800399c <HAL_RCC_OscConfig+0x270>)
 8003986:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <HAL_RCC_OscConfig+0x270>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a02      	ldr	r2, [pc, #8]	; (800399c <HAL_RCC_OscConfig+0x270>)
 8003992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	e014      	b.n	80039c4 <HAL_RCC_OscConfig+0x298>
 800399a:	bf00      	nop
 800399c:	40021000 	.word	0x40021000
 80039a0:	0800a080 	.word	0x0800a080
 80039a4:	20000018 	.word	0x20000018
 80039a8:	2000001c 	.word	0x2000001c
 80039ac:	4ba0      	ldr	r3, [pc, #640]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a9f      	ldr	r2, [pc, #636]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 80039b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	4b9d      	ldr	r3, [pc, #628]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a9c      	ldr	r2, [pc, #624]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 80039be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7ff fb52 	bl	8003074 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d4:	f7ff fb4e 	bl	8003074 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	; 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e276      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039e6:	4b92      	ldr	r3, [pc, #584]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0x2a8>
 80039f2:	e014      	b.n	8003a1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7ff fb3e 	bl	8003074 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039fc:	f7ff fb3a 	bl	8003074 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	; 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e262      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a0e:	4b88      	ldr	r3, [pc, #544]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0x2d0>
 8003a1a:	e000      	b.n	8003a1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d060      	beq.n	8003aec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_OscConfig+0x310>
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d119      	bne.n	8003a6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d116      	bne.n	8003a6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a3c:	4b7c      	ldr	r3, [pc, #496]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_OscConfig+0x328>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e23f      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a54:	4b76      	ldr	r3, [pc, #472]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	4973      	ldr	r1, [pc, #460]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a68:	e040      	b.n	8003aec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d023      	beq.n	8003aba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a72:	4b6f      	ldr	r3, [pc, #444]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a6e      	ldr	r2, [pc, #440]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7ff faf9 	bl	8003074 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a86:	f7ff faf5 	bl	8003074 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e21d      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a98:	4b65      	ldr	r3, [pc, #404]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa4:	4b62      	ldr	r3, [pc, #392]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	061b      	lsls	r3, r3, #24
 8003ab2:	495f      	ldr	r1, [pc, #380]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
 8003ab8:	e018      	b.n	8003aec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aba:	4b5d      	ldr	r3, [pc, #372]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a5c      	ldr	r2, [pc, #368]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003ac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac6:	f7ff fad5 	bl	8003074 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ace:	f7ff fad1 	bl	8003074 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e1f9      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ae0:	4b53      	ldr	r3, [pc, #332]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f0      	bne.n	8003ace <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d03c      	beq.n	8003b72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01c      	beq.n	8003b3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b00:	4b4b      	ldr	r3, [pc, #300]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b06:	4a4a      	ldr	r2, [pc, #296]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7ff fab0 	bl	8003074 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b18:	f7ff faac 	bl	8003074 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e1d4      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b2a:	4b41      	ldr	r3, [pc, #260]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0ef      	beq.n	8003b18 <HAL_RCC_OscConfig+0x3ec>
 8003b38:	e01b      	b.n	8003b72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b3a:	4b3d      	ldr	r3, [pc, #244]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b40:	4a3b      	ldr	r2, [pc, #236]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4a:	f7ff fa93 	bl	8003074 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b52:	f7ff fa8f 	bl	8003074 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e1b7      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b64:	4b32      	ldr	r3, [pc, #200]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1ef      	bne.n	8003b52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80a6 	beq.w	8003ccc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b80:	2300      	movs	r3, #0
 8003b82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b84:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10d      	bne.n	8003bac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b90:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	4a26      	ldr	r2, [pc, #152]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b9c:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bac:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <HAL_RCC_OscConfig+0x508>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d118      	bne.n	8003bea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb8:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <HAL_RCC_OscConfig+0x508>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <HAL_RCC_OscConfig+0x508>)
 8003bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc4:	f7ff fa56 	bl	8003074 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bcc:	f7ff fa52 	bl	8003074 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e17a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bde:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <HAL_RCC_OscConfig+0x508>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d108      	bne.n	8003c04 <HAL_RCC_OscConfig+0x4d8>
 8003bf2:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	4a0d      	ldr	r2, [pc, #52]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c02:	e029      	b.n	8003c58 <HAL_RCC_OscConfig+0x52c>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b05      	cmp	r3, #5
 8003c0a:	d115      	bne.n	8003c38 <HAL_RCC_OscConfig+0x50c>
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c12:	4a07      	ldr	r2, [pc, #28]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003c14:	f043 0304 	orr.w	r3, r3, #4
 8003c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	4a03      	ldr	r2, [pc, #12]	; (8003c30 <HAL_RCC_OscConfig+0x504>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c2c:	e014      	b.n	8003c58 <HAL_RCC_OscConfig+0x52c>
 8003c2e:	bf00      	nop
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40007000 	.word	0x40007000
 8003c38:	4b9c      	ldr	r3, [pc, #624]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	4a9b      	ldr	r2, [pc, #620]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003c40:	f023 0301 	bic.w	r3, r3, #1
 8003c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c48:	4b98      	ldr	r3, [pc, #608]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4e:	4a97      	ldr	r2, [pc, #604]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003c50:	f023 0304 	bic.w	r3, r3, #4
 8003c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d016      	beq.n	8003c8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c60:	f7ff fa08 	bl	8003074 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c68:	f7ff fa04 	bl	8003074 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e12a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c7e:	4b8b      	ldr	r3, [pc, #556]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0ed      	beq.n	8003c68 <HAL_RCC_OscConfig+0x53c>
 8003c8c:	e015      	b.n	8003cba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8e:	f7ff f9f1 	bl	8003074 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c94:	e00a      	b.n	8003cac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c96:	f7ff f9ed 	bl	8003074 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e113      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cac:	4b7f      	ldr	r3, [pc, #508]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1ed      	bne.n	8003c96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cba:	7ffb      	ldrb	r3, [r7, #31]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d105      	bne.n	8003ccc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc0:	4b7a      	ldr	r3, [pc, #488]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc4:	4a79      	ldr	r2, [pc, #484]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80fe 	beq.w	8003ed2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	f040 80d0 	bne.w	8003e80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ce0:	4b72      	ldr	r3, [pc, #456]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f003 0203 	and.w	r2, r3, #3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d130      	bne.n	8003d56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d127      	bne.n	8003d56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d11f      	bne.n	8003d56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d20:	2a07      	cmp	r2, #7
 8003d22:	bf14      	ite	ne
 8003d24:	2201      	movne	r2, #1
 8003d26:	2200      	moveq	r2, #0
 8003d28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d113      	bne.n	8003d56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d109      	bne.n	8003d56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	085b      	lsrs	r3, r3, #1
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d06e      	beq.n	8003e34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b0c      	cmp	r3, #12
 8003d5a:	d069      	beq.n	8003e30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d5c:	4b53      	ldr	r3, [pc, #332]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d105      	bne.n	8003d74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d68:	4b50      	ldr	r3, [pc, #320]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0ad      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d78:	4b4c      	ldr	r3, [pc, #304]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a4b      	ldr	r2, [pc, #300]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d84:	f7ff f976 	bl	8003074 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7ff f972 	bl	8003074 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e09a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d9e:	4b43      	ldr	r3, [pc, #268]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003daa:	4b40      	ldr	r3, [pc, #256]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	4b40      	ldr	r3, [pc, #256]	; (8003eb0 <HAL_RCC_OscConfig+0x784>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003dba:	3a01      	subs	r2, #1
 8003dbc:	0112      	lsls	r2, r2, #4
 8003dbe:	4311      	orrs	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dc4:	0212      	lsls	r2, r2, #8
 8003dc6:	4311      	orrs	r1, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dcc:	0852      	lsrs	r2, r2, #1
 8003dce:	3a01      	subs	r2, #1
 8003dd0:	0552      	lsls	r2, r2, #21
 8003dd2:	4311      	orrs	r1, r2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003dd8:	0852      	lsrs	r2, r2, #1
 8003dda:	3a01      	subs	r2, #1
 8003ddc:	0652      	lsls	r2, r2, #25
 8003dde:	4311      	orrs	r1, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003de4:	0912      	lsrs	r2, r2, #4
 8003de6:	0452      	lsls	r2, r2, #17
 8003de8:	430a      	orrs	r2, r1
 8003dea:	4930      	ldr	r1, [pc, #192]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003df0:	4b2e      	ldr	r3, [pc, #184]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a2d      	ldr	r2, [pc, #180]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dfa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dfc:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4a2a      	ldr	r2, [pc, #168]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e08:	f7ff f934 	bl	8003074 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e10:	f7ff f930 	bl	8003074 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e058      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e22:	4b22      	ldr	r3, [pc, #136]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e2e:	e050      	b.n	8003ed2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e04f      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e34:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d148      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e40:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a19      	ldr	r2, [pc, #100]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e4c:	4b17      	ldr	r3, [pc, #92]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	4a16      	ldr	r2, [pc, #88]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e58:	f7ff f90c 	bl	8003074 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e60:	f7ff f908 	bl	8003074 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e030      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e72:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x734>
 8003e7e:	e028      	b.n	8003ed2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	2b0c      	cmp	r3, #12
 8003e84:	d023      	beq.n	8003ece <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e86:	4b09      	ldr	r3, [pc, #36]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a08      	ldr	r2, [pc, #32]	; (8003eac <HAL_RCC_OscConfig+0x780>)
 8003e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7ff f8ef 	bl	8003074 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e98:	e00c      	b.n	8003eb4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9a:	f7ff f8eb 	bl	8003074 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d905      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e013      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <HAL_RCC_OscConfig+0x7b0>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1ec      	bne.n	8003e9a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ec0:	4b06      	ldr	r3, [pc, #24]	; (8003edc <HAL_RCC_OscConfig+0x7b0>)
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	4905      	ldr	r1, [pc, #20]	; (8003edc <HAL_RCC_OscConfig+0x7b0>)
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCC_OscConfig+0x7b4>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	60cb      	str	r3, [r1, #12]
 8003ecc:	e001      	b.n	8003ed2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	feeefffc 	.word	0xfeeefffc

08003ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0e7      	b.n	80040c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef8:	4b75      	ldr	r3, [pc, #468]	; (80040d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d910      	bls.n	8003f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f06:	4b72      	ldr	r3, [pc, #456]	; (80040d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f023 0207 	bic.w	r2, r3, #7
 8003f0e:	4970      	ldr	r1, [pc, #448]	; (80040d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f16:	4b6e      	ldr	r3, [pc, #440]	; (80040d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0cf      	b.n	80040c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d010      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	4b66      	ldr	r3, [pc, #408]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d908      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f44:	4b63      	ldr	r3, [pc, #396]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4960      	ldr	r1, [pc, #384]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d04c      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d107      	bne.n	8003f7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6a:	4b5a      	ldr	r3, [pc, #360]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d121      	bne.n	8003fba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e0a6      	b.n	80040c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d107      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f82:	4b54      	ldr	r3, [pc, #336]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d115      	bne.n	8003fba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e09a      	b.n	80040c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d107      	bne.n	8003faa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f9a:	4b4e      	ldr	r3, [pc, #312]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e08e      	b.n	80040c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003faa:	4b4a      	ldr	r3, [pc, #296]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e086      	b.n	80040c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fba:	4b46      	ldr	r3, [pc, #280]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f023 0203 	bic.w	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4943      	ldr	r1, [pc, #268]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fcc:	f7ff f852 	bl	8003074 <HAL_GetTick>
 8003fd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd4:	f7ff f84e 	bl	8003074 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e06e      	b.n	80040c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fea:	4b3a      	ldr	r3, [pc, #232]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 020c 	and.w	r2, r3, #12
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d1eb      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d010      	beq.n	800402a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	4b31      	ldr	r3, [pc, #196]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004014:	429a      	cmp	r2, r3
 8004016:	d208      	bcs.n	800402a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004018:	4b2e      	ldr	r3, [pc, #184]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	492b      	ldr	r1, [pc, #172]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800402a:	4b29      	ldr	r3, [pc, #164]	; (80040d0 <HAL_RCC_ClockConfig+0x1ec>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d210      	bcs.n	800405a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004038:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <HAL_RCC_ClockConfig+0x1ec>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f023 0207 	bic.w	r2, r3, #7
 8004040:	4923      	ldr	r1, [pc, #140]	; (80040d0 <HAL_RCC_ClockConfig+0x1ec>)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	4313      	orrs	r3, r2
 8004046:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004048:	4b21      	ldr	r3, [pc, #132]	; (80040d0 <HAL_RCC_ClockConfig+0x1ec>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d001      	beq.n	800405a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e036      	b.n	80040c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004066:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	4918      	ldr	r1, [pc, #96]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004074:	4313      	orrs	r3, r2
 8004076:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d009      	beq.n	8004098 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004084:	4b13      	ldr	r3, [pc, #76]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4910      	ldr	r1, [pc, #64]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 8004094:	4313      	orrs	r3, r2
 8004096:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004098:	f000 f824 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 800409c:	4602      	mov	r2, r0
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <HAL_RCC_ClockConfig+0x1f0>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	091b      	lsrs	r3, r3, #4
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	490b      	ldr	r1, [pc, #44]	; (80040d8 <HAL_RCC_ClockConfig+0x1f4>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
 80040b4:	4a09      	ldr	r2, [pc, #36]	; (80040dc <HAL_RCC_ClockConfig+0x1f8>)
 80040b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <HAL_RCC_ClockConfig+0x1fc>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fe ff89 	bl	8002fd4 <HAL_InitTick>
 80040c2:	4603      	mov	r3, r0
 80040c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80040c6:	7afb      	ldrb	r3, [r7, #11]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40022000 	.word	0x40022000
 80040d4:	40021000 	.word	0x40021000
 80040d8:	0800a080 	.word	0x0800a080
 80040dc:	20000018 	.word	0x20000018
 80040e0:	2000001c 	.word	0x2000001c

080040e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b089      	sub	sp, #36	; 0x24
 80040e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	2300      	movs	r3, #0
 80040f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f2:	4b3e      	ldr	r3, [pc, #248]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040fc:	4b3b      	ldr	r3, [pc, #236]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0x34>
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	2b0c      	cmp	r3, #12
 8004110:	d121      	bne.n	8004156 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d11e      	bne.n	8004156 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004118:	4b34      	ldr	r3, [pc, #208]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d107      	bne.n	8004134 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004124:	4b31      	ldr	r3, [pc, #196]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	e005      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004134:	4b2d      	ldr	r3, [pc, #180]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004140:	4a2b      	ldr	r2, [pc, #172]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004148:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10d      	bne.n	800416c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004154:	e00a      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b04      	cmp	r3, #4
 800415a:	d102      	bne.n	8004162 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800415c:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	e004      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b08      	cmp	r3, #8
 8004166:	d101      	bne.n	800416c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004168:	4b23      	ldr	r3, [pc, #140]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800416a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b0c      	cmp	r3, #12
 8004170:	d134      	bne.n	80041dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004172:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d003      	beq.n	800418a <HAL_RCC_GetSysClockFreq+0xa6>
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d003      	beq.n	8004190 <HAL_RCC_GetSysClockFreq+0xac>
 8004188:	e005      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800418a:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800418c:	617b      	str	r3, [r7, #20]
      break;
 800418e:	e005      	b.n	800419c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004190:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004192:	617b      	str	r3, [r7, #20]
      break;
 8004194:	e002      	b.n	800419c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	617b      	str	r3, [r7, #20]
      break;
 800419a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800419c:	4b13      	ldr	r3, [pc, #76]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	3301      	adds	r3, #1
 80041a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041aa:	4b10      	ldr	r3, [pc, #64]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	0a1b      	lsrs	r3, r3, #8
 80041b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	fb03 f202 	mul.w	r2, r3, r2
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041c2:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <HAL_RCC_GetSysClockFreq+0x108>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	0e5b      	lsrs	r3, r3, #25
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	3301      	adds	r3, #1
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041dc:	69bb      	ldr	r3, [r7, #24]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	; 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000
 80041f0:	0800a098 	.word	0x0800a098
 80041f4:	00f42400 	.word	0x00f42400
 80041f8:	007a1200 	.word	0x007a1200

080041fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004200:	4b03      	ldr	r3, [pc, #12]	; (8004210 <HAL_RCC_GetHCLKFreq+0x14>)
 8004202:	681b      	ldr	r3, [r3, #0]
}
 8004204:	4618      	mov	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	20000018 	.word	0x20000018

08004214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004218:	f7ff fff0 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 800421c:	4602      	mov	r2, r0
 800421e:	4b06      	ldr	r3, [pc, #24]	; (8004238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	4904      	ldr	r1, [pc, #16]	; (800423c <HAL_RCC_GetPCLK1Freq+0x28>)
 800422a:	5ccb      	ldrb	r3, [r1, r3]
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004234:	4618      	mov	r0, r3
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000
 800423c:	0800a090 	.word	0x0800a090

08004240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004244:	f7ff ffda 	bl	80041fc <HAL_RCC_GetHCLKFreq>
 8004248:	4602      	mov	r2, r0
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_RCC_GetPCLK2Freq+0x24>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	0adb      	lsrs	r3, r3, #11
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	4904      	ldr	r1, [pc, #16]	; (8004268 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004256:	5ccb      	ldrb	r3, [r1, r3]
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004260:	4618      	mov	r0, r3
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40021000 	.word	0x40021000
 8004268:	0800a090 	.word	0x0800a090

0800426c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004274:	2300      	movs	r3, #0
 8004276:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004278:	4b2a      	ldr	r3, [pc, #168]	; (8004324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004284:	f7ff f9ee 	bl	8003664 <HAL_PWREx_GetVoltageRange>
 8004288:	6178      	str	r0, [r7, #20]
 800428a:	e014      	b.n	80042b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800428c:	4b25      	ldr	r3, [pc, #148]	; (8004324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	4a24      	ldr	r2, [pc, #144]	; (8004324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004296:	6593      	str	r3, [r2, #88]	; 0x58
 8004298:	4b22      	ldr	r3, [pc, #136]	; (8004324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042a4:	f7ff f9de 	bl	8003664 <HAL_PWREx_GetVoltageRange>
 80042a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042aa:	4b1e      	ldr	r3, [pc, #120]	; (8004324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ae:	4a1d      	ldr	r2, [pc, #116]	; (8004324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042bc:	d10b      	bne.n	80042d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b80      	cmp	r3, #128	; 0x80
 80042c2:	d919      	bls.n	80042f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2ba0      	cmp	r3, #160	; 0xa0
 80042c8:	d902      	bls.n	80042d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042ca:	2302      	movs	r3, #2
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	e013      	b.n	80042f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042d0:	2301      	movs	r3, #1
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	e010      	b.n	80042f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b80      	cmp	r3, #128	; 0x80
 80042da:	d902      	bls.n	80042e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042dc:	2303      	movs	r3, #3
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	e00a      	b.n	80042f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b80      	cmp	r3, #128	; 0x80
 80042e6:	d102      	bne.n	80042ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042e8:	2302      	movs	r3, #2
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	e004      	b.n	80042f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b70      	cmp	r3, #112	; 0x70
 80042f2:	d101      	bne.n	80042f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042f4:	2301      	movs	r3, #1
 80042f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f023 0207 	bic.w	r2, r3, #7
 8004300:	4909      	ldr	r1, [pc, #36]	; (8004328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004308:	4b07      	ldr	r3, [pc, #28]	; (8004328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	429a      	cmp	r2, r3
 8004314:	d001      	beq.n	800431a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40021000 	.word	0x40021000
 8004328:	40022000 	.word	0x40022000

0800432c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004334:	2300      	movs	r3, #0
 8004336:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004338:	2300      	movs	r3, #0
 800433a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004344:	2b00      	cmp	r3, #0
 8004346:	d041      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800434c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004350:	d02a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004352:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004356:	d824      	bhi.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004358:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800435c:	d008      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800435e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004362:	d81e      	bhi.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800436c:	d010      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800436e:	e018      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004370:	4b86      	ldr	r3, [pc, #536]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a85      	ldr	r2, [pc, #532]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800437c:	e015      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3304      	adds	r3, #4
 8004382:	2100      	movs	r1, #0
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fabb 	bl	8004900 <RCCEx_PLLSAI1_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800438e:	e00c      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3320      	adds	r3, #32
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fba6 	bl	8004ae8 <RCCEx_PLLSAI2_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043a0:	e003      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	74fb      	strb	r3, [r7, #19]
      break;
 80043a6:	e000      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80043a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043aa:	7cfb      	ldrb	r3, [r7, #19]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043b0:	4b76      	ldr	r3, [pc, #472]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043be:	4973      	ldr	r1, [pc, #460]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043c6:	e001      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d041      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043e0:	d02a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80043e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043e6:	d824      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043ec:	d008      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043f2:	d81e      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80043f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043fc:	d010      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043fe:	e018      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004400:	4b62      	ldr	r3, [pc, #392]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4a61      	ldr	r2, [pc, #388]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800440c:	e015      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3304      	adds	r3, #4
 8004412:	2100      	movs	r1, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fa73 	bl	8004900 <RCCEx_PLLSAI1_Config>
 800441a:	4603      	mov	r3, r0
 800441c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800441e:	e00c      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3320      	adds	r3, #32
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fb5e 	bl	8004ae8 <RCCEx_PLLSAI2_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004430:	e003      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	74fb      	strb	r3, [r7, #19]
      break;
 8004436:	e000      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800443a:	7cfb      	ldrb	r3, [r7, #19]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004440:	4b52      	ldr	r3, [pc, #328]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800444e:	494f      	ldr	r1, [pc, #316]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004456:	e001      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80a0 	beq.w	80045aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446a:	2300      	movs	r3, #0
 800446c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800446e:	4b47      	ldr	r3, [pc, #284]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00d      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004484:	4b41      	ldr	r3, [pc, #260]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004488:	4a40      	ldr	r2, [pc, #256]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448e:	6593      	str	r3, [r2, #88]	; 0x58
 8004490:	4b3e      	ldr	r3, [pc, #248]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449c:	2301      	movs	r3, #1
 800449e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a0:	4b3b      	ldr	r3, [pc, #236]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a3a      	ldr	r2, [pc, #232]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044ac:	f7fe fde2 	bl	8003074 <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044b2:	e009      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b4:	f7fe fdde 	bl	8003074 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d902      	bls.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	74fb      	strb	r3, [r7, #19]
        break;
 80044c6:	e005      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044c8:	4b31      	ldr	r3, [pc, #196]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ef      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d15c      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044da:	4b2c      	ldr	r3, [pc, #176]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01f      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d019      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044f8:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004502:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004504:	4b21      	ldr	r3, [pc, #132]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	4a20      	ldr	r2, [pc, #128]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800450c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004514:	4b1d      	ldr	r3, [pc, #116]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	4a1c      	ldr	r2, [pc, #112]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004524:	4a19      	ldr	r2, [pc, #100]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d016      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004536:	f7fe fd9d 	bl	8003074 <HAL_GetTick>
 800453a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453c:	e00b      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fe fd99 	bl	8003074 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d902      	bls.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	74fb      	strb	r3, [r7, #19]
            break;
 8004554:	e006      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004556:	4b0d      	ldr	r3, [pc, #52]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0ec      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004564:	7cfb      	ldrb	r3, [r7, #19]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10c      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800456a:	4b08      	ldr	r3, [pc, #32]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800457a:	4904      	ldr	r1, [pc, #16]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004582:	e009      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	74bb      	strb	r3, [r7, #18]
 8004588:	e006      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800458a:	bf00      	nop
 800458c:	40021000 	.word	0x40021000
 8004590:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004598:	7c7b      	ldrb	r3, [r7, #17]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d105      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459e:	4b9e      	ldr	r3, [pc, #632]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	4a9d      	ldr	r2, [pc, #628]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045b6:	4b98      	ldr	r3, [pc, #608]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	f023 0203 	bic.w	r2, r3, #3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	4994      	ldr	r1, [pc, #592]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045d8:	4b8f      	ldr	r3, [pc, #572]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f023 020c 	bic.w	r2, r3, #12
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	498c      	ldr	r1, [pc, #560]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045fa:	4b87      	ldr	r3, [pc, #540]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	4983      	ldr	r1, [pc, #524]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800461c:	4b7e      	ldr	r3, [pc, #504]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	497b      	ldr	r1, [pc, #492]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800463e:	4b76      	ldr	r3, [pc, #472]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464c:	4972      	ldr	r1, [pc, #456]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004660:	4b6d      	ldr	r3, [pc, #436]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466e:	496a      	ldr	r1, [pc, #424]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004682:	4b65      	ldr	r3, [pc, #404]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004688:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004690:	4961      	ldr	r1, [pc, #388]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046a4:	4b5c      	ldr	r3, [pc, #368]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b2:	4959      	ldr	r1, [pc, #356]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046c6:	4b54      	ldr	r3, [pc, #336]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d4:	4950      	ldr	r1, [pc, #320]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046e8:	4b4b      	ldr	r3, [pc, #300]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f6:	4948      	ldr	r1, [pc, #288]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800470a:	4b43      	ldr	r3, [pc, #268]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004710:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004718:	493f      	ldr	r1, [pc, #252]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d028      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800472c:	4b3a      	ldr	r3, [pc, #232]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473a:	4937      	ldr	r1, [pc, #220]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800474a:	d106      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800474c:	4b32      	ldr	r3, [pc, #200]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4a31      	ldr	r2, [pc, #196]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004756:	60d3      	str	r3, [r2, #12]
 8004758:	e011      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004762:	d10c      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3304      	adds	r3, #4
 8004768:	2101      	movs	r1, #1
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f8c8 	bl	8004900 <RCCEx_PLLSAI1_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800477a:	7cfb      	ldrb	r3, [r7, #19]
 800477c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d028      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800478a:	4b23      	ldr	r3, [pc, #140]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004798:	491f      	ldr	r1, [pc, #124]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a8:	d106      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047aa:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	4a1a      	ldr	r2, [pc, #104]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b4:	60d3      	str	r3, [r2, #12]
 80047b6:	e011      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047c0:	d10c      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	2101      	movs	r1, #1
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f899 	bl	8004900 <RCCEx_PLLSAI1_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d2:	7cfb      	ldrb	r3, [r7, #19]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d02b      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f6:	4908      	ldr	r1, [pc, #32]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004806:	d109      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4a02      	ldr	r2, [pc, #8]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004812:	60d3      	str	r3, [r2, #12]
 8004814:	e014      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004820:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004824:	d10c      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	2101      	movs	r1, #1
 800482c:	4618      	mov	r0, r3
 800482e:	f000 f867 	bl	8004900 <RCCEx_PLLSAI1_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004836:	7cfb      	ldrb	r3, [r7, #19]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800483c:	7cfb      	ldrb	r3, [r7, #19]
 800483e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d02f      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800484c:	4b2b      	ldr	r3, [pc, #172]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004852:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800485a:	4928      	ldr	r1, [pc, #160]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800486a:	d10d      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	2102      	movs	r1, #2
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f844 	bl	8004900 <RCCEx_PLLSAI1_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800487c:	7cfb      	ldrb	r3, [r7, #19]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d014      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	74bb      	strb	r3, [r7, #18]
 8004886:	e011      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800488c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004890:	d10c      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3320      	adds	r3, #32
 8004896:	2102      	movs	r1, #2
 8004898:	4618      	mov	r0, r3
 800489a:	f000 f925 	bl	8004ae8 <RCCEx_PLLSAI2_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048a2:	7cfb      	ldrb	r3, [r7, #19]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048a8:	7cfb      	ldrb	r3, [r7, #19]
 80048aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048b8:	4b10      	ldr	r3, [pc, #64]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c6:	490d      	ldr	r1, [pc, #52]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048da:	4b08      	ldr	r3, [pc, #32]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ea:	4904      	ldr	r1, [pc, #16]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40021000 	.word	0x40021000

08004900 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800490e:	4b75      	ldr	r3, [pc, #468]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d018      	beq.n	800494c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800491a:	4b72      	ldr	r3, [pc, #456]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0203 	and.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d10d      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
       ||
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004932:	4b6c      	ldr	r3, [pc, #432]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
       ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d047      	beq.n	80049d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
 800494a:	e044      	b.n	80049d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d018      	beq.n	8004986 <RCCEx_PLLSAI1_Config+0x86>
 8004954:	2b03      	cmp	r3, #3
 8004956:	d825      	bhi.n	80049a4 <RCCEx_PLLSAI1_Config+0xa4>
 8004958:	2b01      	cmp	r3, #1
 800495a:	d002      	beq.n	8004962 <RCCEx_PLLSAI1_Config+0x62>
 800495c:	2b02      	cmp	r3, #2
 800495e:	d009      	beq.n	8004974 <RCCEx_PLLSAI1_Config+0x74>
 8004960:	e020      	b.n	80049a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004962:	4b60      	ldr	r3, [pc, #384]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d11d      	bne.n	80049aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004972:	e01a      	b.n	80049aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004974:	4b5b      	ldr	r3, [pc, #364]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497c:	2b00      	cmp	r3, #0
 800497e:	d116      	bne.n	80049ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004984:	e013      	b.n	80049ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004986:	4b57      	ldr	r3, [pc, #348]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10f      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004992:	4b54      	ldr	r3, [pc, #336]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049a2:	e006      	b.n	80049b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
      break;
 80049a8:	e004      	b.n	80049b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049aa:	bf00      	nop
 80049ac:	e002      	b.n	80049b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ae:	bf00      	nop
 80049b0:	e000      	b.n	80049b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10d      	bne.n	80049d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049ba:	4b4a      	ldr	r3, [pc, #296]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6819      	ldr	r1, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	430b      	orrs	r3, r1
 80049d0:	4944      	ldr	r1, [pc, #272]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d17d      	bne.n	8004ad8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049dc:	4b41      	ldr	r3, [pc, #260]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a40      	ldr	r2, [pc, #256]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e8:	f7fe fb44 	bl	8003074 <HAL_GetTick>
 80049ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049ee:	e009      	b.n	8004a04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049f0:	f7fe fb40 	bl	8003074 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d902      	bls.n	8004a04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	73fb      	strb	r3, [r7, #15]
        break;
 8004a02:	e005      	b.n	8004a10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a04:	4b37      	ldr	r3, [pc, #220]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1ef      	bne.n	80049f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d160      	bne.n	8004ad8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d111      	bne.n	8004a40 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a1c:	4b31      	ldr	r3, [pc, #196]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6892      	ldr	r2, [r2, #8]
 8004a2c:	0211      	lsls	r1, r2, #8
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	68d2      	ldr	r2, [r2, #12]
 8004a32:	0912      	lsrs	r2, r2, #4
 8004a34:	0452      	lsls	r2, r2, #17
 8004a36:	430a      	orrs	r2, r1
 8004a38:	492a      	ldr	r1, [pc, #168]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	610b      	str	r3, [r1, #16]
 8004a3e:	e027      	b.n	8004a90 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d112      	bne.n	8004a6c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a46:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6892      	ldr	r2, [r2, #8]
 8004a56:	0211      	lsls	r1, r2, #8
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6912      	ldr	r2, [r2, #16]
 8004a5c:	0852      	lsrs	r2, r2, #1
 8004a5e:	3a01      	subs	r2, #1
 8004a60:	0552      	lsls	r2, r2, #21
 8004a62:	430a      	orrs	r2, r1
 8004a64:	491f      	ldr	r1, [pc, #124]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	610b      	str	r3, [r1, #16]
 8004a6a:	e011      	b.n	8004a90 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6892      	ldr	r2, [r2, #8]
 8004a7c:	0211      	lsls	r1, r2, #8
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6952      	ldr	r2, [r2, #20]
 8004a82:	0852      	lsrs	r2, r2, #1
 8004a84:	3a01      	subs	r2, #1
 8004a86:	0652      	lsls	r2, r2, #25
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	4916      	ldr	r1, [pc, #88]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a90:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a13      	ldr	r2, [pc, #76]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9c:	f7fe faea 	bl	8003074 <HAL_GetTick>
 8004aa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aa2:	e009      	b.n	8004ab8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aa4:	f7fe fae6 	bl	8003074 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d902      	bls.n	8004ab8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ab6:	e005      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0ef      	beq.n	8004aa4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	4904      	ldr	r1, [pc, #16]	; (8004ae4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004af6:	4b6a      	ldr	r3, [pc, #424]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d018      	beq.n	8004b34 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b02:	4b67      	ldr	r3, [pc, #412]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f003 0203 	and.w	r2, r3, #3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d10d      	bne.n	8004b2e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
       ||
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b1a:	4b61      	ldr	r3, [pc, #388]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	091b      	lsrs	r3, r3, #4
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
       ||
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d047      	beq.n	8004bbe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	73fb      	strb	r3, [r7, #15]
 8004b32:	e044      	b.n	8004bbe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d018      	beq.n	8004b6e <RCCEx_PLLSAI2_Config+0x86>
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d825      	bhi.n	8004b8c <RCCEx_PLLSAI2_Config+0xa4>
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d002      	beq.n	8004b4a <RCCEx_PLLSAI2_Config+0x62>
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d009      	beq.n	8004b5c <RCCEx_PLLSAI2_Config+0x74>
 8004b48:	e020      	b.n	8004b8c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b4a:	4b55      	ldr	r3, [pc, #340]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d11d      	bne.n	8004b92 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b5a:	e01a      	b.n	8004b92 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b5c:	4b50      	ldr	r3, [pc, #320]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d116      	bne.n	8004b96 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b6c:	e013      	b.n	8004b96 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b6e:	4b4c      	ldr	r3, [pc, #304]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10f      	bne.n	8004b9a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b7a:	4b49      	ldr	r3, [pc, #292]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b8a:	e006      	b.n	8004b9a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b90:	e004      	b.n	8004b9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b92:	bf00      	nop
 8004b94:	e002      	b.n	8004b9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b96:	bf00      	nop
 8004b98:	e000      	b.n	8004b9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10d      	bne.n	8004bbe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ba2:	4b3f      	ldr	r3, [pc, #252]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6819      	ldr	r1, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	4939      	ldr	r1, [pc, #228]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d167      	bne.n	8004c94 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bc4:	4b36      	ldr	r3, [pc, #216]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a35      	ldr	r2, [pc, #212]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd0:	f7fe fa50 	bl	8003074 <HAL_GetTick>
 8004bd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bd6:	e009      	b.n	8004bec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bd8:	f7fe fa4c 	bl	8003074 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d902      	bls.n	8004bec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	73fb      	strb	r3, [r7, #15]
        break;
 8004bea:	e005      	b.n	8004bf8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bec:	4b2c      	ldr	r3, [pc, #176]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1ef      	bne.n	8004bd8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d14a      	bne.n	8004c94 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d111      	bne.n	8004c28 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c04:	4b26      	ldr	r3, [pc, #152]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6892      	ldr	r2, [r2, #8]
 8004c14:	0211      	lsls	r1, r2, #8
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68d2      	ldr	r2, [r2, #12]
 8004c1a:	0912      	lsrs	r2, r2, #4
 8004c1c:	0452      	lsls	r2, r2, #17
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	491f      	ldr	r1, [pc, #124]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	614b      	str	r3, [r1, #20]
 8004c26:	e011      	b.n	8004c4c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c28:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6892      	ldr	r2, [r2, #8]
 8004c38:	0211      	lsls	r1, r2, #8
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6912      	ldr	r2, [r2, #16]
 8004c3e:	0852      	lsrs	r2, r2, #1
 8004c40:	3a01      	subs	r2, #1
 8004c42:	0652      	lsls	r2, r2, #25
 8004c44:	430a      	orrs	r2, r1
 8004c46:	4916      	ldr	r1, [pc, #88]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c4c:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a13      	ldr	r2, [pc, #76]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c58:	f7fe fa0c 	bl	8003074 <HAL_GetTick>
 8004c5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c5e:	e009      	b.n	8004c74 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c60:	f7fe fa08 	bl	8003074 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d902      	bls.n	8004c74 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	73fb      	strb	r3, [r7, #15]
          break;
 8004c72:	e005      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0ef      	beq.n	8004c60 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c88:	695a      	ldr	r2, [r3, #20]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	4904      	ldr	r1, [pc, #16]	; (8004ca0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000

08004ca4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e049      	b.n	8004d4a <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	795b      	ldrb	r3, [r3, #5]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d105      	bne.n	8004ccc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fd f8f6 	bl	8001eb8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0204 	orr.w	r2, r2, #4
 8004ce0:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b40      	cmp	r3, #64	; 0x40
 8004cee:	d104      	bne.n	8004cfa <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e027      	b.n	8004d4a <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004cfa:	f7fe f9bb 	bl	8003074 <HAL_GetTick>
 8004cfe:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004d00:	e015      	b.n	8004d2e <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004d02:	f7fe f9b7 	bl	8003074 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d90e      	bls.n	8004d2e <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d107      	bne.n	8004d2e <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2204      	movs	r2, #4
 8004d22:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e00d      	b.n	8004d4a <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d0e2      	beq.n	8004d02 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	791b      	ldrb	r3, [r3, #4]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_RNG_GenerateRandomNumber+0x1a>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e044      	b.n	8004df6 <HAL_RNG_GenerateRandomNumber+0xa4>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	795b      	ldrb	r3, [r3, #5]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d133      	bne.n	8004de4 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d82:	f7fe f977 	bl	8003074 <HAL_GetTick>
 8004d86:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d88:	e018      	b.n	8004dbc <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004d8a:	f7fe f973 	bl	8003074 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d911      	bls.n	8004dbc <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d00a      	beq.n	8004dbc <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e01c      	b.n	8004df6 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d1df      	bne.n	8004d8a <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	715a      	strb	r2, [r3, #5]
 8004de2:	e004      	b.n	8004dee <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2204      	movs	r2, #4
 8004de8:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	711a      	strb	r2, [r3, #4]

  return status;
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b084      	sub	sp, #16
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2210      	movs	r2, #16
 8004e20:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004e22:	2301      	movs	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e01f      	b.n	8004e68 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01a      	beq.n	8004e68 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d108      	bne.n	8004e4e <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e4a:	605a      	str	r2, [r3, #4]
 8004e4c:	e00c      	b.n	8004e68 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2208      	movs	r2, #8
 8004e52:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 8004e54:	2301      	movs	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0208 	bic.w	r2, r2, #8
 8004e66:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d10b      	bne.n	8004e86 <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2204      	movs	r2, #4
 8004e72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f837 	bl	8004ee8 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8004e82:	605a      	str	r2, [r3, #4]

    return;
 8004e84:	e022      	b.n	8004ecc <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01d      	beq.n	8004ecc <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0208 	bic.w	r2, r2, #8
 8004e9e:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	795b      	ldrb	r3, [r3, #5]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d00b      	beq.n	8004ecc <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f803 	bl	8004ed2 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e049      	b.n	8004fa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fd f814 	bl	8001f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f000 f9d0 	bl	80052e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d001      	beq.n	8004fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e04f      	b.n	8005064 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a23      	ldr	r2, [pc, #140]	; (8005070 <HAL_TIM_Base_Start_IT+0xc4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01d      	beq.n	8005022 <HAL_TIM_Base_Start_IT+0x76>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fee:	d018      	beq.n	8005022 <HAL_TIM_Base_Start_IT+0x76>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a1f      	ldr	r2, [pc, #124]	; (8005074 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <HAL_TIM_Base_Start_IT+0x76>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1e      	ldr	r2, [pc, #120]	; (8005078 <HAL_TIM_Base_Start_IT+0xcc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00e      	beq.n	8005022 <HAL_TIM_Base_Start_IT+0x76>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1c      	ldr	r2, [pc, #112]	; (800507c <HAL_TIM_Base_Start_IT+0xd0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d009      	beq.n	8005022 <HAL_TIM_Base_Start_IT+0x76>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <HAL_TIM_Base_Start_IT+0xd4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d004      	beq.n	8005022 <HAL_TIM_Base_Start_IT+0x76>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a19      	ldr	r2, [pc, #100]	; (8005084 <HAL_TIM_Base_Start_IT+0xd8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d115      	bne.n	800504e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	4b17      	ldr	r3, [pc, #92]	; (8005088 <HAL_TIM_Base_Start_IT+0xdc>)
 800502a:	4013      	ands	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b06      	cmp	r3, #6
 8005032:	d015      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0xb4>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503a:	d011      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504c:	e008      	b.n	8005060 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 0201 	orr.w	r2, r2, #1
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e000      	b.n	8005062 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005060:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	40012c00 	.word	0x40012c00
 8005074:	40000400 	.word	0x40000400
 8005078:	40000800 	.word	0x40000800
 800507c:	40000c00 	.word	0x40000c00
 8005080:	40013400 	.word	0x40013400
 8005084:	40014000 	.word	0x40014000
 8005088:	00010007 	.word	0x00010007

0800508c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d020      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01b      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0202 	mvn.w	r2, #2
 80050c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f8e4 	bl	80052a4 <HAL_TIM_IC_CaptureCallback>
 80050dc:	e005      	b.n	80050ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f8d6 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f8e7 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d020      	beq.n	800513c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01b      	beq.n	800513c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0204 	mvn.w	r2, #4
 800510c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f8be 	bl	80052a4 <HAL_TIM_IC_CaptureCallback>
 8005128:	e005      	b.n	8005136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f8b0 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f8c1 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d020      	beq.n	8005188 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01b      	beq.n	8005188 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0208 	mvn.w	r2, #8
 8005158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2204      	movs	r2, #4
 800515e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f898 	bl	80052a4 <HAL_TIM_IC_CaptureCallback>
 8005174:	e005      	b.n	8005182 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f88a 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f89b 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	2b00      	cmp	r3, #0
 8005190:	d020      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01b      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0210 	mvn.w	r2, #16
 80051a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2208      	movs	r2, #8
 80051aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f872 	bl	80052a4 <HAL_TIM_IC_CaptureCallback>
 80051c0:	e005      	b.n	80051ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f864 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f875 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00c      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0201 	mvn.w	r2, #1
 80051f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7fc fd16 	bl	8001c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00c      	beq.n	800521c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005208:	2b00      	cmp	r3, #0
 800520a:	d007      	beq.n	800521c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f98e 	bl	8005538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00c      	beq.n	8005240 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f986 	bl	800554c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f834 	bl	80052cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0220 	mvn.w	r2, #32
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f94e 	bl	8005524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005288:	bf00      	nop
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a40      	ldr	r2, [pc, #256]	; (80053f4 <TIM_Base_SetConfig+0x114>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d013      	beq.n	8005320 <TIM_Base_SetConfig+0x40>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fe:	d00f      	beq.n	8005320 <TIM_Base_SetConfig+0x40>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a3d      	ldr	r2, [pc, #244]	; (80053f8 <TIM_Base_SetConfig+0x118>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00b      	beq.n	8005320 <TIM_Base_SetConfig+0x40>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a3c      	ldr	r2, [pc, #240]	; (80053fc <TIM_Base_SetConfig+0x11c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d007      	beq.n	8005320 <TIM_Base_SetConfig+0x40>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a3b      	ldr	r2, [pc, #236]	; (8005400 <TIM_Base_SetConfig+0x120>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_Base_SetConfig+0x40>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a3a      	ldr	r2, [pc, #232]	; (8005404 <TIM_Base_SetConfig+0x124>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d108      	bne.n	8005332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a2f      	ldr	r2, [pc, #188]	; (80053f4 <TIM_Base_SetConfig+0x114>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d01f      	beq.n	800537a <TIM_Base_SetConfig+0x9a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005340:	d01b      	beq.n	800537a <TIM_Base_SetConfig+0x9a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a2c      	ldr	r2, [pc, #176]	; (80053f8 <TIM_Base_SetConfig+0x118>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d017      	beq.n	800537a <TIM_Base_SetConfig+0x9a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a2b      	ldr	r2, [pc, #172]	; (80053fc <TIM_Base_SetConfig+0x11c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d013      	beq.n	800537a <TIM_Base_SetConfig+0x9a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a2a      	ldr	r2, [pc, #168]	; (8005400 <TIM_Base_SetConfig+0x120>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00f      	beq.n	800537a <TIM_Base_SetConfig+0x9a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a29      	ldr	r2, [pc, #164]	; (8005404 <TIM_Base_SetConfig+0x124>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00b      	beq.n	800537a <TIM_Base_SetConfig+0x9a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a28      	ldr	r2, [pc, #160]	; (8005408 <TIM_Base_SetConfig+0x128>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d007      	beq.n	800537a <TIM_Base_SetConfig+0x9a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a27      	ldr	r2, [pc, #156]	; (800540c <TIM_Base_SetConfig+0x12c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d003      	beq.n	800537a <TIM_Base_SetConfig+0x9a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a26      	ldr	r2, [pc, #152]	; (8005410 <TIM_Base_SetConfig+0x130>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d108      	bne.n	800538c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a10      	ldr	r2, [pc, #64]	; (80053f4 <TIM_Base_SetConfig+0x114>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00f      	beq.n	80053d8 <TIM_Base_SetConfig+0xf8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a12      	ldr	r2, [pc, #72]	; (8005404 <TIM_Base_SetConfig+0x124>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00b      	beq.n	80053d8 <TIM_Base_SetConfig+0xf8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a11      	ldr	r2, [pc, #68]	; (8005408 <TIM_Base_SetConfig+0x128>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d007      	beq.n	80053d8 <TIM_Base_SetConfig+0xf8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a10      	ldr	r2, [pc, #64]	; (800540c <TIM_Base_SetConfig+0x12c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d003      	beq.n	80053d8 <TIM_Base_SetConfig+0xf8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a0f      	ldr	r2, [pc, #60]	; (8005410 <TIM_Base_SetConfig+0x130>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d103      	bne.n	80053e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	615a      	str	r2, [r3, #20]
}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40012c00 	.word	0x40012c00
 80053f8:	40000400 	.word	0x40000400
 80053fc:	40000800 	.word	0x40000800
 8005400:	40000c00 	.word	0x40000c00
 8005404:	40013400 	.word	0x40013400
 8005408:	40014000 	.word	0x40014000
 800540c:	40014400 	.word	0x40014400
 8005410:	40014800 	.word	0x40014800

08005414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005428:	2302      	movs	r3, #2
 800542a:	e068      	b.n	80054fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a2e      	ldr	r2, [pc, #184]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d004      	beq.n	8005460 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a2d      	ldr	r2, [pc, #180]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d108      	bne.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005466:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005478:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1e      	ldr	r2, [pc, #120]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d01d      	beq.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549e:	d018      	beq.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1b      	ldr	r2, [pc, #108]	; (8005514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d013      	beq.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1a      	ldr	r2, [pc, #104]	; (8005518 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00e      	beq.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a18      	ldr	r2, [pc, #96]	; (800551c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d009      	beq.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a13      	ldr	r2, [pc, #76]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d004      	beq.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a14      	ldr	r2, [pc, #80]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d10c      	bne.n	80054ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40012c00 	.word	0x40012c00
 8005510:	40013400 	.word	0x40013400
 8005514:	40000400 	.word	0x40000400
 8005518:	40000800 	.word	0x40000800
 800551c:	40000c00 	.word	0x40000c00
 8005520:	40014000 	.word	0x40014000

08005524 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e040      	b.n	80055f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fc fd0a 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2224      	movs	r2, #36	; 0x24
 800558c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0201 	bic.w	r2, r2, #1
 800559c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fb6a 	bl	8005c80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f8af 	bl	8005710 <UART_SetConfig>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e01b      	b.n	80055f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fbe9 	bl	8005dc4 <UART_CheckIdleState>
 80055f2:	4603      	mov	r3, r0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	; 0x28
 8005600:	af02      	add	r7, sp, #8
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	4613      	mov	r3, r2
 800560a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005610:	2b20      	cmp	r3, #32
 8005612:	d178      	bne.n	8005706 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <HAL_UART_Transmit+0x24>
 800561a:	88fb      	ldrh	r3, [r7, #6]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e071      	b.n	8005708 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2221      	movs	r2, #33	; 0x21
 8005630:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005632:	f7fd fd1f 	bl	8003074 <HAL_GetTick>
 8005636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	88fa      	ldrh	r2, [r7, #6]
 800563c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	88fa      	ldrh	r2, [r7, #6]
 8005644:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005650:	d108      	bne.n	8005664 <HAL_UART_Transmit+0x68>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d104      	bne.n	8005664 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	e003      	b.n	800566c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005668:	2300      	movs	r3, #0
 800566a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800566c:	e030      	b.n	80056d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2200      	movs	r2, #0
 8005676:	2180      	movs	r1, #128	; 0x80
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 fc4b 	bl	8005f14 <UART_WaitOnFlagUntilTimeout>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e03c      	b.n	8005708 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10b      	bne.n	80056ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	881a      	ldrh	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056a0:	b292      	uxth	r2, r2
 80056a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	3302      	adds	r3, #2
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	e008      	b.n	80056be <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	781a      	ldrb	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	b292      	uxth	r2, r2
 80056b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	3301      	adds	r3, #1
 80056bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1c8      	bne.n	800566e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2200      	movs	r2, #0
 80056e4:	2140      	movs	r1, #64	; 0x40
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 fc14 	bl	8005f14 <UART_WaitOnFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d004      	beq.n	80056fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2220      	movs	r2, #32
 80056f6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e005      	b.n	8005708 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2220      	movs	r2, #32
 8005700:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	e000      	b.n	8005708 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005706:	2302      	movs	r3, #2
  }
}
 8005708:	4618      	mov	r0, r3
 800570a:	3720      	adds	r7, #32
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005714:	b08a      	sub	sp, #40	; 0x28
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	431a      	orrs	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	431a      	orrs	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	4313      	orrs	r3, r2
 8005736:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4ba4      	ldr	r3, [pc, #656]	; (80059d0 <UART_SetConfig+0x2c0>)
 8005740:	4013      	ands	r3, r2
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005748:	430b      	orrs	r3, r1
 800574a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a99      	ldr	r2, [pc, #612]	; (80059d4 <UART_SetConfig+0x2c4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d004      	beq.n	800577c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005778:	4313      	orrs	r3, r2
 800577a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578c:	430a      	orrs	r2, r1
 800578e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a90      	ldr	r2, [pc, #576]	; (80059d8 <UART_SetConfig+0x2c8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d126      	bne.n	80057e8 <UART_SetConfig+0xd8>
 800579a:	4b90      	ldr	r3, [pc, #576]	; (80059dc <UART_SetConfig+0x2cc>)
 800579c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d81b      	bhi.n	80057e0 <UART_SetConfig+0xd0>
 80057a8:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <UART_SetConfig+0xa0>)
 80057aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ae:	bf00      	nop
 80057b0:	080057c1 	.word	0x080057c1
 80057b4:	080057d1 	.word	0x080057d1
 80057b8:	080057c9 	.word	0x080057c9
 80057bc:	080057d9 	.word	0x080057d9
 80057c0:	2301      	movs	r3, #1
 80057c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c6:	e116      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80057c8:	2302      	movs	r3, #2
 80057ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ce:	e112      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80057d0:	2304      	movs	r3, #4
 80057d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057d6:	e10e      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80057d8:	2308      	movs	r3, #8
 80057da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057de:	e10a      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80057e0:	2310      	movs	r3, #16
 80057e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e6:	e106      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a7c      	ldr	r2, [pc, #496]	; (80059e0 <UART_SetConfig+0x2d0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d138      	bne.n	8005864 <UART_SetConfig+0x154>
 80057f2:	4b7a      	ldr	r3, [pc, #488]	; (80059dc <UART_SetConfig+0x2cc>)
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f8:	f003 030c 	and.w	r3, r3, #12
 80057fc:	2b0c      	cmp	r3, #12
 80057fe:	d82d      	bhi.n	800585c <UART_SetConfig+0x14c>
 8005800:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <UART_SetConfig+0xf8>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	0800583d 	.word	0x0800583d
 800580c:	0800585d 	.word	0x0800585d
 8005810:	0800585d 	.word	0x0800585d
 8005814:	0800585d 	.word	0x0800585d
 8005818:	0800584d 	.word	0x0800584d
 800581c:	0800585d 	.word	0x0800585d
 8005820:	0800585d 	.word	0x0800585d
 8005824:	0800585d 	.word	0x0800585d
 8005828:	08005845 	.word	0x08005845
 800582c:	0800585d 	.word	0x0800585d
 8005830:	0800585d 	.word	0x0800585d
 8005834:	0800585d 	.word	0x0800585d
 8005838:	08005855 	.word	0x08005855
 800583c:	2300      	movs	r3, #0
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005842:	e0d8      	b.n	80059f6 <UART_SetConfig+0x2e6>
 8005844:	2302      	movs	r3, #2
 8005846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800584a:	e0d4      	b.n	80059f6 <UART_SetConfig+0x2e6>
 800584c:	2304      	movs	r3, #4
 800584e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005852:	e0d0      	b.n	80059f6 <UART_SetConfig+0x2e6>
 8005854:	2308      	movs	r3, #8
 8005856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585a:	e0cc      	b.n	80059f6 <UART_SetConfig+0x2e6>
 800585c:	2310      	movs	r3, #16
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005862:	e0c8      	b.n	80059f6 <UART_SetConfig+0x2e6>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a5e      	ldr	r2, [pc, #376]	; (80059e4 <UART_SetConfig+0x2d4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d125      	bne.n	80058ba <UART_SetConfig+0x1aa>
 800586e:	4b5b      	ldr	r3, [pc, #364]	; (80059dc <UART_SetConfig+0x2cc>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005874:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005878:	2b30      	cmp	r3, #48	; 0x30
 800587a:	d016      	beq.n	80058aa <UART_SetConfig+0x19a>
 800587c:	2b30      	cmp	r3, #48	; 0x30
 800587e:	d818      	bhi.n	80058b2 <UART_SetConfig+0x1a2>
 8005880:	2b20      	cmp	r3, #32
 8005882:	d00a      	beq.n	800589a <UART_SetConfig+0x18a>
 8005884:	2b20      	cmp	r3, #32
 8005886:	d814      	bhi.n	80058b2 <UART_SetConfig+0x1a2>
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <UART_SetConfig+0x182>
 800588c:	2b10      	cmp	r3, #16
 800588e:	d008      	beq.n	80058a2 <UART_SetConfig+0x192>
 8005890:	e00f      	b.n	80058b2 <UART_SetConfig+0x1a2>
 8005892:	2300      	movs	r3, #0
 8005894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005898:	e0ad      	b.n	80059f6 <UART_SetConfig+0x2e6>
 800589a:	2302      	movs	r3, #2
 800589c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a0:	e0a9      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80058a2:	2304      	movs	r3, #4
 80058a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a8:	e0a5      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80058aa:	2308      	movs	r3, #8
 80058ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b0:	e0a1      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80058b2:	2310      	movs	r3, #16
 80058b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b8:	e09d      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a4a      	ldr	r2, [pc, #296]	; (80059e8 <UART_SetConfig+0x2d8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d125      	bne.n	8005910 <UART_SetConfig+0x200>
 80058c4:	4b45      	ldr	r3, [pc, #276]	; (80059dc <UART_SetConfig+0x2cc>)
 80058c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058ce:	2bc0      	cmp	r3, #192	; 0xc0
 80058d0:	d016      	beq.n	8005900 <UART_SetConfig+0x1f0>
 80058d2:	2bc0      	cmp	r3, #192	; 0xc0
 80058d4:	d818      	bhi.n	8005908 <UART_SetConfig+0x1f8>
 80058d6:	2b80      	cmp	r3, #128	; 0x80
 80058d8:	d00a      	beq.n	80058f0 <UART_SetConfig+0x1e0>
 80058da:	2b80      	cmp	r3, #128	; 0x80
 80058dc:	d814      	bhi.n	8005908 <UART_SetConfig+0x1f8>
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <UART_SetConfig+0x1d8>
 80058e2:	2b40      	cmp	r3, #64	; 0x40
 80058e4:	d008      	beq.n	80058f8 <UART_SetConfig+0x1e8>
 80058e6:	e00f      	b.n	8005908 <UART_SetConfig+0x1f8>
 80058e8:	2300      	movs	r3, #0
 80058ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ee:	e082      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80058f0:	2302      	movs	r3, #2
 80058f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058f6:	e07e      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80058f8:	2304      	movs	r3, #4
 80058fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058fe:	e07a      	b.n	80059f6 <UART_SetConfig+0x2e6>
 8005900:	2308      	movs	r3, #8
 8005902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005906:	e076      	b.n	80059f6 <UART_SetConfig+0x2e6>
 8005908:	2310      	movs	r3, #16
 800590a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800590e:	e072      	b.n	80059f6 <UART_SetConfig+0x2e6>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a35      	ldr	r2, [pc, #212]	; (80059ec <UART_SetConfig+0x2dc>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d12a      	bne.n	8005970 <UART_SetConfig+0x260>
 800591a:	4b30      	ldr	r3, [pc, #192]	; (80059dc <UART_SetConfig+0x2cc>)
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005928:	d01a      	beq.n	8005960 <UART_SetConfig+0x250>
 800592a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800592e:	d81b      	bhi.n	8005968 <UART_SetConfig+0x258>
 8005930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005934:	d00c      	beq.n	8005950 <UART_SetConfig+0x240>
 8005936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800593a:	d815      	bhi.n	8005968 <UART_SetConfig+0x258>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <UART_SetConfig+0x238>
 8005940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005944:	d008      	beq.n	8005958 <UART_SetConfig+0x248>
 8005946:	e00f      	b.n	8005968 <UART_SetConfig+0x258>
 8005948:	2300      	movs	r3, #0
 800594a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800594e:	e052      	b.n	80059f6 <UART_SetConfig+0x2e6>
 8005950:	2302      	movs	r3, #2
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005956:	e04e      	b.n	80059f6 <UART_SetConfig+0x2e6>
 8005958:	2304      	movs	r3, #4
 800595a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595e:	e04a      	b.n	80059f6 <UART_SetConfig+0x2e6>
 8005960:	2308      	movs	r3, #8
 8005962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005966:	e046      	b.n	80059f6 <UART_SetConfig+0x2e6>
 8005968:	2310      	movs	r3, #16
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596e:	e042      	b.n	80059f6 <UART_SetConfig+0x2e6>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a17      	ldr	r2, [pc, #92]	; (80059d4 <UART_SetConfig+0x2c4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d13a      	bne.n	80059f0 <UART_SetConfig+0x2e0>
 800597a:	4b18      	ldr	r3, [pc, #96]	; (80059dc <UART_SetConfig+0x2cc>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005980:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005984:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005988:	d01a      	beq.n	80059c0 <UART_SetConfig+0x2b0>
 800598a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800598e:	d81b      	bhi.n	80059c8 <UART_SetConfig+0x2b8>
 8005990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005994:	d00c      	beq.n	80059b0 <UART_SetConfig+0x2a0>
 8005996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599a:	d815      	bhi.n	80059c8 <UART_SetConfig+0x2b8>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <UART_SetConfig+0x298>
 80059a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a4:	d008      	beq.n	80059b8 <UART_SetConfig+0x2a8>
 80059a6:	e00f      	b.n	80059c8 <UART_SetConfig+0x2b8>
 80059a8:	2300      	movs	r3, #0
 80059aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ae:	e022      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80059b0:	2302      	movs	r3, #2
 80059b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b6:	e01e      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80059b8:	2304      	movs	r3, #4
 80059ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059be:	e01a      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80059c0:	2308      	movs	r3, #8
 80059c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c6:	e016      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80059c8:	2310      	movs	r3, #16
 80059ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ce:	e012      	b.n	80059f6 <UART_SetConfig+0x2e6>
 80059d0:	efff69f3 	.word	0xefff69f3
 80059d4:	40008000 	.word	0x40008000
 80059d8:	40013800 	.word	0x40013800
 80059dc:	40021000 	.word	0x40021000
 80059e0:	40004400 	.word	0x40004400
 80059e4:	40004800 	.word	0x40004800
 80059e8:	40004c00 	.word	0x40004c00
 80059ec:	40005000 	.word	0x40005000
 80059f0:	2310      	movs	r3, #16
 80059f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a9f      	ldr	r2, [pc, #636]	; (8005c78 <UART_SetConfig+0x568>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d17a      	bne.n	8005af6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d824      	bhi.n	8005a52 <UART_SetConfig+0x342>
 8005a08:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <UART_SetConfig+0x300>)
 8005a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0e:	bf00      	nop
 8005a10:	08005a35 	.word	0x08005a35
 8005a14:	08005a53 	.word	0x08005a53
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a53 	.word	0x08005a53
 8005a20:	08005a43 	.word	0x08005a43
 8005a24:	08005a53 	.word	0x08005a53
 8005a28:	08005a53 	.word	0x08005a53
 8005a2c:	08005a53 	.word	0x08005a53
 8005a30:	08005a4b 	.word	0x08005a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a34:	f7fe fbee 	bl	8004214 <HAL_RCC_GetPCLK1Freq>
 8005a38:	61f8      	str	r0, [r7, #28]
        break;
 8005a3a:	e010      	b.n	8005a5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a3c:	4b8f      	ldr	r3, [pc, #572]	; (8005c7c <UART_SetConfig+0x56c>)
 8005a3e:	61fb      	str	r3, [r7, #28]
        break;
 8005a40:	e00d      	b.n	8005a5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a42:	f7fe fb4f 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 8005a46:	61f8      	str	r0, [r7, #28]
        break;
 8005a48:	e009      	b.n	8005a5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4e:	61fb      	str	r3, [r7, #28]
        break;
 8005a50:	e005      	b.n	8005a5e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80fb 	beq.w	8005c5c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d305      	bcc.n	8005a82 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d903      	bls.n	8005a8a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a88:	e0e8      	b.n	8005c5c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	461c      	mov	r4, r3
 8005a90:	4615      	mov	r5, r2
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	022b      	lsls	r3, r5, #8
 8005a9c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005aa0:	0222      	lsls	r2, r4, #8
 8005aa2:	68f9      	ldr	r1, [r7, #12]
 8005aa4:	6849      	ldr	r1, [r1, #4]
 8005aa6:	0849      	lsrs	r1, r1, #1
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	4688      	mov	r8, r1
 8005aac:	4681      	mov	r9, r0
 8005aae:	eb12 0a08 	adds.w	sl, r2, r8
 8005ab2:	eb43 0b09 	adc.w	fp, r3, r9
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ac4:	4650      	mov	r0, sl
 8005ac6:	4659      	mov	r1, fp
 8005ac8:	f7fa fbda 	bl	8000280 <__aeabi_uldivmod>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ada:	d308      	bcc.n	8005aee <UART_SetConfig+0x3de>
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ae2:	d204      	bcs.n	8005aee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	60da      	str	r2, [r3, #12]
 8005aec:	e0b6      	b.n	8005c5c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005af4:	e0b2      	b.n	8005c5c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afe:	d15e      	bne.n	8005bbe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005b00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d828      	bhi.n	8005b5a <UART_SetConfig+0x44a>
 8005b08:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <UART_SetConfig+0x400>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b35 	.word	0x08005b35
 8005b14:	08005b3d 	.word	0x08005b3d
 8005b18:	08005b45 	.word	0x08005b45
 8005b1c:	08005b5b 	.word	0x08005b5b
 8005b20:	08005b4b 	.word	0x08005b4b
 8005b24:	08005b5b 	.word	0x08005b5b
 8005b28:	08005b5b 	.word	0x08005b5b
 8005b2c:	08005b5b 	.word	0x08005b5b
 8005b30:	08005b53 	.word	0x08005b53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b34:	f7fe fb6e 	bl	8004214 <HAL_RCC_GetPCLK1Freq>
 8005b38:	61f8      	str	r0, [r7, #28]
        break;
 8005b3a:	e014      	b.n	8005b66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b3c:	f7fe fb80 	bl	8004240 <HAL_RCC_GetPCLK2Freq>
 8005b40:	61f8      	str	r0, [r7, #28]
        break;
 8005b42:	e010      	b.n	8005b66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b44:	4b4d      	ldr	r3, [pc, #308]	; (8005c7c <UART_SetConfig+0x56c>)
 8005b46:	61fb      	str	r3, [r7, #28]
        break;
 8005b48:	e00d      	b.n	8005b66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b4a:	f7fe facb 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 8005b4e:	61f8      	str	r0, [r7, #28]
        break;
 8005b50:	e009      	b.n	8005b66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b56:	61fb      	str	r3, [r7, #28]
        break;
 8005b58:	e005      	b.n	8005b66 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d077      	beq.n	8005c5c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	005a      	lsls	r2, r3, #1
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	441a      	add	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b0f      	cmp	r3, #15
 8005b86:	d916      	bls.n	8005bb6 <UART_SetConfig+0x4a6>
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b8e:	d212      	bcs.n	8005bb6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	f023 030f 	bic.w	r3, r3, #15
 8005b98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	8afb      	ldrh	r3, [r7, #22]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	8afa      	ldrh	r2, [r7, #22]
 8005bb2:	60da      	str	r2, [r3, #12]
 8005bb4:	e052      	b.n	8005c5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bbc:	e04e      	b.n	8005c5c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d827      	bhi.n	8005c16 <UART_SetConfig+0x506>
 8005bc6:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <UART_SetConfig+0x4bc>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005bf1 	.word	0x08005bf1
 8005bd0:	08005bf9 	.word	0x08005bf9
 8005bd4:	08005c01 	.word	0x08005c01
 8005bd8:	08005c17 	.word	0x08005c17
 8005bdc:	08005c07 	.word	0x08005c07
 8005be0:	08005c17 	.word	0x08005c17
 8005be4:	08005c17 	.word	0x08005c17
 8005be8:	08005c17 	.word	0x08005c17
 8005bec:	08005c0f 	.word	0x08005c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf0:	f7fe fb10 	bl	8004214 <HAL_RCC_GetPCLK1Freq>
 8005bf4:	61f8      	str	r0, [r7, #28]
        break;
 8005bf6:	e014      	b.n	8005c22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bf8:	f7fe fb22 	bl	8004240 <HAL_RCC_GetPCLK2Freq>
 8005bfc:	61f8      	str	r0, [r7, #28]
        break;
 8005bfe:	e010      	b.n	8005c22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c00:	4b1e      	ldr	r3, [pc, #120]	; (8005c7c <UART_SetConfig+0x56c>)
 8005c02:	61fb      	str	r3, [r7, #28]
        break;
 8005c04:	e00d      	b.n	8005c22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c06:	f7fe fa6d 	bl	80040e4 <HAL_RCC_GetSysClockFreq>
 8005c0a:	61f8      	str	r0, [r7, #28]
        break;
 8005c0c:	e009      	b.n	8005c22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c12:	61fb      	str	r3, [r7, #28]
        break;
 8005c14:	e005      	b.n	8005c22 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c20:	bf00      	nop
    }

    if (pclk != 0U)
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d019      	beq.n	8005c5c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	085a      	lsrs	r2, r3, #1
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	441a      	add	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	2b0f      	cmp	r3, #15
 8005c40:	d909      	bls.n	8005c56 <UART_SetConfig+0x546>
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c48:	d205      	bcs.n	8005c56 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	60da      	str	r2, [r3, #12]
 8005c54:	e002      	b.n	8005c5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3728      	adds	r7, #40	; 0x28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c76:	bf00      	nop
 8005c78:	40008000 	.word	0x40008000
 8005c7c:	00f42400 	.word	0x00f42400

08005c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00a      	beq.n	8005cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	f003 0310 	and.w	r3, r3, #16
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01a      	beq.n	8005d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d7e:	d10a      	bne.n	8005d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	605a      	str	r2, [r3, #4]
  }
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b098      	sub	sp, #96	; 0x60
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dd4:	f7fd f94e 	bl	8003074 <HAL_GetTick>
 8005dd8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d12e      	bne.n	8005e46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005de8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df0:	2200      	movs	r2, #0
 8005df2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f88c 	bl	8005f14 <UART_WaitOnFlagUntilTimeout>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d021      	beq.n	8005e46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e16:	653b      	str	r3, [r7, #80]	; 0x50
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e20:	647b      	str	r3, [r7, #68]	; 0x44
 8005e22:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e28:	e841 2300 	strex	r3, r2, [r1]
 8005e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e6      	bne.n	8005e02 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2220      	movs	r2, #32
 8005e38:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e062      	b.n	8005f0c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d149      	bne.n	8005ee8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f856 	bl	8005f14 <UART_WaitOnFlagUntilTimeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d03c      	beq.n	8005ee8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e94:	e841 2300 	strex	r3, r2, [r1]
 8005e98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e6      	bne.n	8005e6e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	e853 3f00 	ldrex	r3, [r3]
 8005eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0301 	bic.w	r3, r3, #1
 8005eb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3308      	adds	r3, #8
 8005ebe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ec0:	61fa      	str	r2, [r7, #28]
 8005ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	69b9      	ldr	r1, [r7, #24]
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e5      	bne.n	8005ea0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e011      	b.n	8005f0c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3758      	adds	r7, #88	; 0x58
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	4613      	mov	r3, r2
 8005f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f24:	e049      	b.n	8005fba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2c:	d045      	beq.n	8005fba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2e:	f7fd f8a1 	bl	8003074 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d302      	bcc.n	8005f44 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e048      	b.n	8005fda <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d031      	beq.n	8005fba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d110      	bne.n	8005f86 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2208      	movs	r2, #8
 8005f6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 f838 	bl	8005fe2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2208      	movs	r2, #8
 8005f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e029      	b.n	8005fda <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f94:	d111      	bne.n	8005fba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 f81e 	bl	8005fe2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e00f      	b.n	8005fda <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	bf0c      	ite	eq
 8005fca:	2301      	moveq	r3, #1
 8005fcc:	2300      	movne	r3, #0
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	79fb      	ldrb	r3, [r7, #7]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d0a6      	beq.n	8005f26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b095      	sub	sp, #84	; 0x54
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006008:	643b      	str	r3, [r7, #64]	; 0x40
 800600a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800600e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e6      	bne.n	8005fea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3308      	adds	r3, #8
 8006022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	61fb      	str	r3, [r7, #28]
   return(result);
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	64bb      	str	r3, [r7, #72]	; 0x48
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3308      	adds	r3, #8
 800603a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800603c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e5      	bne.n	800601c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006054:	2b01      	cmp	r3, #1
 8006056:	d118      	bne.n	800608a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	60bb      	str	r3, [r7, #8]
   return(result);
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f023 0310 	bic.w	r3, r3, #16
 800606c:	647b      	str	r3, [r7, #68]	; 0x44
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	6979      	ldr	r1, [r7, #20]
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	613b      	str	r3, [r7, #16]
   return(result);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e6      	bne.n	8006058 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800609e:	bf00      	nop
 80060a0:	3754      	adds	r7, #84	; 0x54
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
	...

080060ac <__NVIC_SetPriority>:
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	4603      	mov	r3, r0
 80060b4:	6039      	str	r1, [r7, #0]
 80060b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	db0a      	blt.n	80060d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	490c      	ldr	r1, [pc, #48]	; (80060f8 <__NVIC_SetPriority+0x4c>)
 80060c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ca:	0112      	lsls	r2, r2, #4
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	440b      	add	r3, r1
 80060d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80060d4:	e00a      	b.n	80060ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	4908      	ldr	r1, [pc, #32]	; (80060fc <__NVIC_SetPriority+0x50>)
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	3b04      	subs	r3, #4
 80060e4:	0112      	lsls	r2, r2, #4
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	440b      	add	r3, r1
 80060ea:	761a      	strb	r2, [r3, #24]
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	e000e100 	.word	0xe000e100
 80060fc:	e000ed00 	.word	0xe000ed00

08006100 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006104:	2100      	movs	r1, #0
 8006106:	f06f 0004 	mvn.w	r0, #4
 800610a:	f7ff ffcf 	bl	80060ac <__NVIC_SetPriority>
#endif
}
 800610e:	bf00      	nop
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800611a:	f3ef 8305 	mrs	r3, IPSR
 800611e:	603b      	str	r3, [r7, #0]
  return(result);
 8006120:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006126:	f06f 0305 	mvn.w	r3, #5
 800612a:	607b      	str	r3, [r7, #4]
 800612c:	e00c      	b.n	8006148 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800612e:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <osKernelInitialize+0x44>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d105      	bne.n	8006142 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006136:	4b08      	ldr	r3, [pc, #32]	; (8006158 <osKernelInitialize+0x44>)
 8006138:	2201      	movs	r2, #1
 800613a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800613c:	2300      	movs	r3, #0
 800613e:	607b      	str	r3, [r7, #4]
 8006140:	e002      	b.n	8006148 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006142:	f04f 33ff 	mov.w	r3, #4294967295
 8006146:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006148:	687b      	ldr	r3, [r7, #4]
}
 800614a:	4618      	mov	r0, r3
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	200009f0 	.word	0x200009f0

0800615c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006162:	f3ef 8305 	mrs	r3, IPSR
 8006166:	603b      	str	r3, [r7, #0]
  return(result);
 8006168:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <osKernelStart+0x1a>
    stat = osErrorISR;
 800616e:	f06f 0305 	mvn.w	r3, #5
 8006172:	607b      	str	r3, [r7, #4]
 8006174:	e010      	b.n	8006198 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006176:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <osKernelStart+0x48>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d109      	bne.n	8006192 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800617e:	f7ff ffbf 	bl	8006100 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006182:	4b08      	ldr	r3, [pc, #32]	; (80061a4 <osKernelStart+0x48>)
 8006184:	2202      	movs	r2, #2
 8006186:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006188:	f001 fb38 	bl	80077fc <vTaskStartScheduler>
      stat = osOK;
 800618c:	2300      	movs	r3, #0
 800618e:	607b      	str	r3, [r7, #4]
 8006190:	e002      	b.n	8006198 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006192:	f04f 33ff 	mov.w	r3, #4294967295
 8006196:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006198:	687b      	ldr	r3, [r7, #4]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	200009f0 	.word	0x200009f0

080061a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08e      	sub	sp, #56	; 0x38
 80061ac:	af04      	add	r7, sp, #16
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80061b4:	2300      	movs	r3, #0
 80061b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061b8:	f3ef 8305 	mrs	r3, IPSR
 80061bc:	617b      	str	r3, [r7, #20]
  return(result);
 80061be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d17e      	bne.n	80062c2 <osThreadNew+0x11a>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d07b      	beq.n	80062c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80061ca:	2380      	movs	r3, #128	; 0x80
 80061cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80061ce:	2318      	movs	r3, #24
 80061d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80061d6:	f04f 33ff 	mov.w	r3, #4294967295
 80061da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d045      	beq.n	800626e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <osThreadNew+0x48>
        name = attr->name;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d008      	beq.n	8006216 <osThreadNew+0x6e>
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	2b38      	cmp	r3, #56	; 0x38
 8006208:	d805      	bhi.n	8006216 <osThreadNew+0x6e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <osThreadNew+0x72>
        return (NULL);
 8006216:	2300      	movs	r3, #0
 8006218:	e054      	b.n	80062c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	089b      	lsrs	r3, r3, #2
 8006228:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00e      	beq.n	8006250 <osThreadNew+0xa8>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	2b5b      	cmp	r3, #91	; 0x5b
 8006238:	d90a      	bls.n	8006250 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800623e:	2b00      	cmp	r3, #0
 8006240:	d006      	beq.n	8006250 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <osThreadNew+0xa8>
        mem = 1;
 800624a:	2301      	movs	r3, #1
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	e010      	b.n	8006272 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10c      	bne.n	8006272 <osThreadNew+0xca>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d108      	bne.n	8006272 <osThreadNew+0xca>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d104      	bne.n	8006272 <osThreadNew+0xca>
          mem = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	61bb      	str	r3, [r7, #24]
 800626c:	e001      	b.n	8006272 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d110      	bne.n	800629a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006280:	9202      	str	r2, [sp, #8]
 8006282:	9301      	str	r3, [sp, #4]
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6a3a      	ldr	r2, [r7, #32]
 800628c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f001 f912 	bl	80074b8 <xTaskCreateStatic>
 8006294:	4603      	mov	r3, r0
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	e013      	b.n	80062c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d110      	bne.n	80062c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	f107 0310 	add.w	r3, r7, #16
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f001 f95d 	bl	8007572 <xTaskCreate>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d001      	beq.n	80062c2 <osThreadNew+0x11a>
            hTask = NULL;
 80062be:	2300      	movs	r3, #0
 80062c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80062c2:	693b      	ldr	r3, [r7, #16]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3728      	adds	r7, #40	; 0x28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80062d4:	2300      	movs	r3, #0
 80062d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062d8:	f3ef 8305 	mrs	r3, IPSR
 80062dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80062de:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d174      	bne.n	80063ce <osMutexNew+0x102>
    if (attr != NULL) {
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <osMutexNew+0x26>
      type = attr->attr_bits;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	61bb      	str	r3, [r7, #24]
 80062f0:	e001      	b.n	80062f6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <osMutexNew+0x3a>
      rmtx = 1U;
 8006300:	2301      	movs	r3, #1
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e001      	b.n	800630a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b00      	cmp	r3, #0
 8006312:	d15c      	bne.n	80063ce <osMutexNew+0x102>
      mem = -1;
 8006314:	f04f 33ff 	mov.w	r3, #4294967295
 8006318:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d015      	beq.n	800634c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d006      	beq.n	8006336 <osMutexNew+0x6a>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	2b4f      	cmp	r3, #79	; 0x4f
 800632e:	d902      	bls.n	8006336 <osMutexNew+0x6a>
          mem = 1;
 8006330:	2301      	movs	r3, #1
 8006332:	613b      	str	r3, [r7, #16]
 8006334:	e00c      	b.n	8006350 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d108      	bne.n	8006350 <osMutexNew+0x84>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d104      	bne.n	8006350 <osMutexNew+0x84>
            mem = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	613b      	str	r3, [r7, #16]
 800634a:	e001      	b.n	8006350 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d112      	bne.n	800637c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d007      	beq.n	800636c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	4619      	mov	r1, r3
 8006362:	2004      	movs	r0, #4
 8006364:	f000 fb17 	bl	8006996 <xQueueCreateMutexStatic>
 8006368:	61f8      	str	r0, [r7, #28]
 800636a:	e016      	b.n	800639a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	4619      	mov	r1, r3
 8006372:	2001      	movs	r0, #1
 8006374:	f000 fb0f 	bl	8006996 <xQueueCreateMutexStatic>
 8006378:	61f8      	str	r0, [r7, #28]
 800637a:	e00e      	b.n	800639a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10b      	bne.n	800639a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d004      	beq.n	8006392 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006388:	2004      	movs	r0, #4
 800638a:	f000 faec 	bl	8006966 <xQueueCreateMutex>
 800638e:	61f8      	str	r0, [r7, #28]
 8006390:	e003      	b.n	800639a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006392:	2001      	movs	r0, #1
 8006394:	f000 fae7 	bl	8006966 <xQueueCreateMutex>
 8006398:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00c      	beq.n	80063ba <osMutexNew+0xee>
        if (attr != NULL) {
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <osMutexNew+0xe2>
          name = attr->name;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	e001      	b.n	80063b2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80063b2:	68f9      	ldr	r1, [r7, #12]
 80063b4:	69f8      	ldr	r0, [r7, #28]
 80063b6:	f001 f821 	bl	80073fc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d006      	beq.n	80063ce <osMutexNew+0x102>
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	f043 0301 	orr.w	r3, r3, #1
 80063cc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80063ce:	69fb      	ldr	r3, [r7, #28]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3720      	adds	r7, #32
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f023 0301 	bic.w	r3, r3, #1
 80063e8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063f6:	f3ef 8305 	mrs	r3, IPSR
 80063fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80063fc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006402:	f06f 0305 	mvn.w	r3, #5
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	e02c      	b.n	8006464 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d103      	bne.n	8006418 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006410:	f06f 0303 	mvn.w	r3, #3
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	e025      	b.n	8006464 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d011      	beq.n	8006442 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6938      	ldr	r0, [r7, #16]
 8006422:	f000 fb07 	bl	8006a34 <xQueueTakeMutexRecursive>
 8006426:	4603      	mov	r3, r0
 8006428:	2b01      	cmp	r3, #1
 800642a:	d01b      	beq.n	8006464 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006432:	f06f 0301 	mvn.w	r3, #1
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e014      	b.n	8006464 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800643a:	f06f 0302 	mvn.w	r3, #2
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	e010      	b.n	8006464 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6938      	ldr	r0, [r7, #16]
 8006446:	f000 fda5 	bl	8006f94 <xQueueSemaphoreTake>
 800644a:	4603      	mov	r3, r0
 800644c:	2b01      	cmp	r3, #1
 800644e:	d009      	beq.n	8006464 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006456:	f06f 0301 	mvn.w	r3, #1
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	e002      	b.n	8006464 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800645e:	f06f 0302 	mvn.w	r3, #2
 8006462:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006464:	697b      	ldr	r3, [r7, #20]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800646e:	b580      	push	{r7, lr}
 8006470:	b086      	sub	sp, #24
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800648a:	f3ef 8305 	mrs	r3, IPSR
 800648e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006490:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <osMutexRelease+0x30>
    stat = osErrorISR;
 8006496:	f06f 0305 	mvn.w	r3, #5
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	e01f      	b.n	80064de <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d103      	bne.n	80064ac <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80064a4:	f06f 0303 	mvn.w	r3, #3
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	e018      	b.n	80064de <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80064b2:	6938      	ldr	r0, [r7, #16]
 80064b4:	f000 fa8a 	bl	80069cc <xQueueGiveMutexRecursive>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d00f      	beq.n	80064de <osMutexRelease+0x70>
        stat = osErrorResource;
 80064be:	f06f 0302 	mvn.w	r3, #2
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	e00b      	b.n	80064de <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80064c6:	2300      	movs	r3, #0
 80064c8:	2200      	movs	r2, #0
 80064ca:	2100      	movs	r1, #0
 80064cc:	6938      	ldr	r0, [r7, #16]
 80064ce:	f000 fae7 	bl	8006aa0 <xQueueGenericSend>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d002      	beq.n	80064de <osMutexRelease+0x70>
        stat = osErrorResource;
 80064d8:	f06f 0302 	mvn.w	r3, #2
 80064dc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80064de:	697b      	ldr	r3, [r7, #20]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4a07      	ldr	r2, [pc, #28]	; (8006514 <vApplicationGetIdleTaskMemory+0x2c>)
 80064f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	4a06      	ldr	r2, [pc, #24]	; (8006518 <vApplicationGetIdleTaskMemory+0x30>)
 80064fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2280      	movs	r2, #128	; 0x80
 8006504:	601a      	str	r2, [r3, #0]
}
 8006506:	bf00      	nop
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	200009f4 	.word	0x200009f4
 8006518:	20000a50 	.word	0x20000a50

0800651c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4a07      	ldr	r2, [pc, #28]	; (8006548 <vApplicationGetTimerTaskMemory+0x2c>)
 800652c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	4a06      	ldr	r2, [pc, #24]	; (800654c <vApplicationGetTimerTaskMemory+0x30>)
 8006532:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800653a:	601a      	str	r2, [r3, #0]
}
 800653c:	bf00      	nop
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	20000c50 	.word	0x20000c50
 800654c:	20000cac 	.word	0x20000cac

08006550 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f103 0208 	add.w	r2, r3, #8
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f04f 32ff 	mov.w	r2, #4294967295
 8006568:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f103 0208 	add.w	r2, r3, #8
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f103 0208 	add.w	r2, r3, #8
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065aa:	b480      	push	{r7}
 80065ac:	b085      	sub	sp, #20
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	601a      	str	r2, [r3, #0]
}
 80065e6:	bf00      	nop
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065f2:	b480      	push	{r7}
 80065f4:	b085      	sub	sp, #20
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006608:	d103      	bne.n	8006612 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	e00c      	b.n	800662c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3308      	adds	r3, #8
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	e002      	b.n	8006620 <vListInsert+0x2e>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	429a      	cmp	r2, r3
 800662a:	d2f6      	bcs.n	800661a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	601a      	str	r2, [r3, #0]
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6892      	ldr	r2, [r2, #8]
 800667a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6852      	ldr	r2, [r2, #4]
 8006684:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	429a      	cmp	r2, r3
 800668e:	d103      	bne.n	8006698 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	1e5a      	subs	r2, r3, #1
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80066e2:	f002 fb3f 	bl	8008d64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ee:	68f9      	ldr	r1, [r7, #12]
 80066f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066f2:	fb01 f303 	mul.w	r3, r1, r3
 80066f6:	441a      	add	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006712:	3b01      	subs	r3, #1
 8006714:	68f9      	ldr	r1, [r7, #12]
 8006716:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006718:	fb01 f303 	mul.w	r3, r1, r3
 800671c:	441a      	add	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	22ff      	movs	r2, #255	; 0xff
 8006726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	22ff      	movs	r2, #255	; 0xff
 800672e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d114      	bne.n	8006762 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01a      	beq.n	8006776 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3310      	adds	r3, #16
 8006744:	4618      	mov	r0, r3
 8006746:	f001 fae3 	bl	8007d10 <xTaskRemoveFromEventList>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d012      	beq.n	8006776 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006750:	4b0c      	ldr	r3, [pc, #48]	; (8006784 <xQueueGenericReset+0xcc>)
 8006752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	e009      	b.n	8006776 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3310      	adds	r3, #16
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff fef2 	bl	8006550 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3324      	adds	r3, #36	; 0x24
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff feed 	bl	8006550 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006776:	f002 fb25 	bl	8008dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800677a:	2301      	movs	r3, #1
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	e000ed04 	.word	0xe000ed04

08006788 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006788:	b580      	push	{r7, lr}
 800678a:	b08e      	sub	sp, #56	; 0x38
 800678c:	af02      	add	r7, sp, #8
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10a      	bne.n	80067b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067ae:	bf00      	nop
 80067b0:	e7fe      	b.n	80067b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067ca:	bf00      	nop
 80067cc:	e7fe      	b.n	80067cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <xQueueGenericCreateStatic+0x52>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <xQueueGenericCreateStatic+0x56>
 80067da:	2301      	movs	r3, #1
 80067dc:	e000      	b.n	80067e0 <xQueueGenericCreateStatic+0x58>
 80067de:	2300      	movs	r3, #0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10a      	bne.n	80067fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	623b      	str	r3, [r7, #32]
}
 80067f6:	bf00      	nop
 80067f8:	e7fe      	b.n	80067f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d102      	bne.n	8006806 <xQueueGenericCreateStatic+0x7e>
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <xQueueGenericCreateStatic+0x82>
 8006806:	2301      	movs	r3, #1
 8006808:	e000      	b.n	800680c <xQueueGenericCreateStatic+0x84>
 800680a:	2300      	movs	r3, #0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	61fb      	str	r3, [r7, #28]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006826:	2350      	movs	r3, #80	; 0x50
 8006828:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2b50      	cmp	r3, #80	; 0x50
 800682e:	d00a      	beq.n	8006846 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	61bb      	str	r3, [r7, #24]
}
 8006842:	bf00      	nop
 8006844:	e7fe      	b.n	8006844 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006846:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00d      	beq.n	800686e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800685a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	4613      	mov	r3, r2
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	68b9      	ldr	r1, [r7, #8]
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f83f 	bl	80068ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006870:	4618      	mov	r0, r3
 8006872:	3730      	adds	r7, #48	; 0x30
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08a      	sub	sp, #40	; 0x28
 800687c:	af02      	add	r7, sp, #8
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	4613      	mov	r3, r2
 8006884:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	613b      	str	r3, [r7, #16]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	fb02 f303 	mul.w	r3, r2, r3
 80068aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	3350      	adds	r3, #80	; 0x50
 80068b0:	4618      	mov	r0, r3
 80068b2:	f002 fb79 	bl	8008fa8 <pvPortMalloc>
 80068b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d011      	beq.n	80068e2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	3350      	adds	r3, #80	; 0x50
 80068c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068d0:	79fa      	ldrb	r2, [r7, #7]
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	4613      	mov	r3, r2
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 f805 	bl	80068ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068e2:	69bb      	ldr	r3, [r7, #24]
	}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3720      	adds	r7, #32
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d103      	bne.n	8006908 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	e002      	b.n	800690e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800691a:	2101      	movs	r1, #1
 800691c:	69b8      	ldr	r0, [r7, #24]
 800691e:	f7ff fecb 	bl	80066b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	78fa      	ldrb	r2, [r7, #3]
 8006926:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800692a:	bf00      	nop
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00e      	beq.n	800695e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006952:	2300      	movs	r3, #0
 8006954:	2200      	movs	r2, #0
 8006956:	2100      	movs	r1, #0
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f8a1 	bl	8006aa0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006966:	b580      	push	{r7, lr}
 8006968:	b086      	sub	sp, #24
 800696a:	af00      	add	r7, sp, #0
 800696c:	4603      	mov	r3, r0
 800696e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006970:	2301      	movs	r3, #1
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	2300      	movs	r3, #0
 8006976:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	461a      	mov	r2, r3
 800697c:	6939      	ldr	r1, [r7, #16]
 800697e:	6978      	ldr	r0, [r7, #20]
 8006980:	f7ff ff7a 	bl	8006878 <xQueueGenericCreate>
 8006984:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7ff ffd3 	bl	8006932 <prvInitialiseMutex>

		return xNewQueue;
 800698c:	68fb      	ldr	r3, [r7, #12]
	}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006996:	b580      	push	{r7, lr}
 8006998:	b088      	sub	sp, #32
 800699a:	af02      	add	r7, sp, #8
 800699c:	4603      	mov	r3, r0
 800699e:	6039      	str	r1, [r7, #0]
 80069a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80069a2:	2301      	movs	r3, #1
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	2300      	movs	r3, #0
 80069a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80069aa:	79fb      	ldrb	r3, [r7, #7]
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2200      	movs	r2, #0
 80069b2:	6939      	ldr	r1, [r7, #16]
 80069b4:	6978      	ldr	r0, [r7, #20]
 80069b6:	f7ff fee7 	bl	8006788 <xQueueGenericCreateStatic>
 80069ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f7ff ffb8 	bl	8006932 <prvInitialiseMutex>

		return xNewQueue;
 80069c2:	68fb      	ldr	r3, [r7, #12]
	}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3718      	adds	r7, #24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80069cc:	b590      	push	{r4, r7, lr}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10a      	bne.n	80069f4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	60fb      	str	r3, [r7, #12]
}
 80069f0:	bf00      	nop
 80069f2:	e7fe      	b.n	80069f2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	689c      	ldr	r4, [r3, #8]
 80069f8:	f001 fb48 	bl	800808c <xTaskGetCurrentTaskHandle>
 80069fc:	4603      	mov	r3, r0
 80069fe:	429c      	cmp	r4, r3
 8006a00:	d111      	bne.n	8006a26 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	1e5a      	subs	r2, r3, #1
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d105      	bne.n	8006a20 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006a14:	2300      	movs	r3, #0
 8006a16:	2200      	movs	r2, #0
 8006a18:	2100      	movs	r1, #0
 8006a1a:	6938      	ldr	r0, [r7, #16]
 8006a1c:	f000 f840 	bl	8006aa0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006a20:	2301      	movs	r3, #1
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	e001      	b.n	8006a2a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006a2a:	697b      	ldr	r3, [r7, #20]
	}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd90      	pop	{r4, r7, pc}

08006a34 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006a34:	b590      	push	{r4, r7, lr}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10a      	bne.n	8006a5e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	60fb      	str	r3, [r7, #12]
}
 8006a5a:	bf00      	nop
 8006a5c:	e7fe      	b.n	8006a5c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	689c      	ldr	r4, [r3, #8]
 8006a62:	f001 fb13 	bl	800808c <xTaskGetCurrentTaskHandle>
 8006a66:	4603      	mov	r3, r0
 8006a68:	429c      	cmp	r4, r3
 8006a6a:	d107      	bne.n	8006a7c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006a76:	2301      	movs	r3, #1
 8006a78:	617b      	str	r3, [r7, #20]
 8006a7a:	e00c      	b.n	8006a96 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6938      	ldr	r0, [r7, #16]
 8006a80:	f000 fa88 	bl	8006f94 <xQueueSemaphoreTake>
 8006a84:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d004      	beq.n	8006a96 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006a96:	697b      	ldr	r3, [r7, #20]
	}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd90      	pop	{r4, r7, pc}

08006aa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08e      	sub	sp, #56	; 0x38
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <xQueueGenericSend+0x32>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d103      	bne.n	8006ae0 <xQueueGenericSend+0x40>
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <xQueueGenericSend+0x44>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e000      	b.n	8006ae6 <xQueueGenericSend+0x46>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10a      	bne.n	8006b00 <xQueueGenericSend+0x60>
	__asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006afc:	bf00      	nop
 8006afe:	e7fe      	b.n	8006afe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d103      	bne.n	8006b0e <xQueueGenericSend+0x6e>
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <xQueueGenericSend+0x72>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e000      	b.n	8006b14 <xQueueGenericSend+0x74>
 8006b12:	2300      	movs	r3, #0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10a      	bne.n	8006b2e <xQueueGenericSend+0x8e>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	623b      	str	r3, [r7, #32]
}
 8006b2a:	bf00      	nop
 8006b2c:	e7fe      	b.n	8006b2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b2e:	f001 fabd 	bl	80080ac <xTaskGetSchedulerState>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d102      	bne.n	8006b3e <xQueueGenericSend+0x9e>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <xQueueGenericSend+0xa2>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e000      	b.n	8006b44 <xQueueGenericSend+0xa4>
 8006b42:	2300      	movs	r3, #0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10a      	bne.n	8006b5e <xQueueGenericSend+0xbe>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	61fb      	str	r3, [r7, #28]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b5e:	f002 f901 	bl	8008d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d302      	bcc.n	8006b74 <xQueueGenericSend+0xd4>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d129      	bne.n	8006bc8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	68b9      	ldr	r1, [r7, #8]
 8006b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b7a:	f000 fb2f 	bl	80071dc <prvCopyDataToQueue>
 8006b7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d010      	beq.n	8006baa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	3324      	adds	r3, #36	; 0x24
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f001 f8bf 	bl	8007d10 <xTaskRemoveFromEventList>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d013      	beq.n	8006bc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b98:	4b3f      	ldr	r3, [pc, #252]	; (8006c98 <xQueueGenericSend+0x1f8>)
 8006b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	e00a      	b.n	8006bc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d007      	beq.n	8006bc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006bb0:	4b39      	ldr	r3, [pc, #228]	; (8006c98 <xQueueGenericSend+0x1f8>)
 8006bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006bc0:	f002 f900 	bl	8008dc4 <vPortExitCritical>
				return pdPASS;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e063      	b.n	8006c90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d103      	bne.n	8006bd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bce:	f002 f8f9 	bl	8008dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e05c      	b.n	8006c90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d106      	bne.n	8006bea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bdc:	f107 0314 	add.w	r3, r7, #20
 8006be0:	4618      	mov	r0, r3
 8006be2:	f001 f8f9 	bl	8007dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006be6:	2301      	movs	r3, #1
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bea:	f002 f8eb 	bl	8008dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bee:	f000 fe6b 	bl	80078c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bf2:	f002 f8b7 	bl	8008d64 <vPortEnterCritical>
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bfc:	b25b      	sxtb	r3, r3
 8006bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c02:	d103      	bne.n	8006c0c <xQueueGenericSend+0x16c>
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c12:	b25b      	sxtb	r3, r3
 8006c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c18:	d103      	bne.n	8006c22 <xQueueGenericSend+0x182>
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c22:	f002 f8cf 	bl	8008dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c26:	1d3a      	adds	r2, r7, #4
 8006c28:	f107 0314 	add.w	r3, r7, #20
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f001 f8e8 	bl	8007e04 <xTaskCheckForTimeOut>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d124      	bne.n	8006c84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c3c:	f000 fbc6 	bl	80073cc <prvIsQueueFull>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d018      	beq.n	8006c78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	3310      	adds	r3, #16
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 f80e 	bl	8007c70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c56:	f000 fb51 	bl	80072fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c5a:	f000 fe43 	bl	80078e4 <xTaskResumeAll>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f47f af7c 	bne.w	8006b5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c66:	4b0c      	ldr	r3, [pc, #48]	; (8006c98 <xQueueGenericSend+0x1f8>)
 8006c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	e772      	b.n	8006b5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c7a:	f000 fb3f 	bl	80072fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c7e:	f000 fe31 	bl	80078e4 <xTaskResumeAll>
 8006c82:	e76c      	b.n	8006b5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c86:	f000 fb39 	bl	80072fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c8a:	f000 fe2b 	bl	80078e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3738      	adds	r7, #56	; 0x38
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	e000ed04 	.word	0xe000ed04

08006c9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b090      	sub	sp, #64	; 0x40
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10a      	bne.n	8006cca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006cc6:	bf00      	nop
 8006cc8:	e7fe      	b.n	8006cc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d103      	bne.n	8006cd8 <xQueueGenericSendFromISR+0x3c>
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <xQueueGenericSendFromISR+0x40>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <xQueueGenericSendFromISR+0x42>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d103      	bne.n	8006d06 <xQueueGenericSendFromISR+0x6a>
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d101      	bne.n	8006d0a <xQueueGenericSendFromISR+0x6e>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <xQueueGenericSendFromISR+0x70>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10a      	bne.n	8006d26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	623b      	str	r3, [r7, #32]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d26:	f002 f8ff 	bl	8008f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d2a:	f3ef 8211 	mrs	r2, BASEPRI
 8006d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	61fa      	str	r2, [r7, #28]
 8006d40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d302      	bcc.n	8006d58 <xQueueGenericSendFromISR+0xbc>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d12f      	bne.n	8006db8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d6e:	f000 fa35 	bl	80071dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7a:	d112      	bne.n	8006da2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d016      	beq.n	8006db2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d86:	3324      	adds	r3, #36	; 0x24
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 ffc1 	bl	8007d10 <xTaskRemoveFromEventList>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00e      	beq.n	8006db2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00b      	beq.n	8006db2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	e007      	b.n	8006db2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006da2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006da6:	3301      	adds	r3, #1
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	b25a      	sxtb	r2, r3
 8006dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006db2:	2301      	movs	r3, #1
 8006db4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006db6:	e001      	b.n	8006dbc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006dc6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3740      	adds	r7, #64	; 0x40
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
	...

08006dd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08c      	sub	sp, #48	; 0x30
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006de0:	2300      	movs	r3, #0
 8006de2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <xQueueReceive+0x30>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	623b      	str	r3, [r7, #32]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d103      	bne.n	8006e12 <xQueueReceive+0x3e>
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <xQueueReceive+0x42>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <xQueueReceive+0x44>
 8006e16:	2300      	movs	r3, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <xQueueReceive+0x5e>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	61fb      	str	r3, [r7, #28]
}
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e32:	f001 f93b 	bl	80080ac <xTaskGetSchedulerState>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d102      	bne.n	8006e42 <xQueueReceive+0x6e>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <xQueueReceive+0x72>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e000      	b.n	8006e48 <xQueueReceive+0x74>
 8006e46:	2300      	movs	r3, #0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <xQueueReceive+0x8e>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	61bb      	str	r3, [r7, #24]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e62:	f001 ff7f 	bl	8008d64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d01f      	beq.n	8006eb2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e76:	f000 fa1b 	bl	80072b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	1e5a      	subs	r2, r3, #1
 8006e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00f      	beq.n	8006eaa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8c:	3310      	adds	r3, #16
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 ff3e 	bl	8007d10 <xTaskRemoveFromEventList>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d007      	beq.n	8006eaa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e9a:	4b3d      	ldr	r3, [pc, #244]	; (8006f90 <xQueueReceive+0x1bc>)
 8006e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006eaa:	f001 ff8b 	bl	8008dc4 <vPortExitCritical>
				return pdPASS;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e069      	b.n	8006f86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d103      	bne.n	8006ec0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006eb8:	f001 ff84 	bl	8008dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	e062      	b.n	8006f86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d106      	bne.n	8006ed4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ec6:	f107 0310 	add.w	r3, r7, #16
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 ff84 	bl	8007dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ed4:	f001 ff76 	bl	8008dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ed8:	f000 fcf6 	bl	80078c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006edc:	f001 ff42 	bl	8008d64 <vPortEnterCritical>
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ee6:	b25b      	sxtb	r3, r3
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eec:	d103      	bne.n	8006ef6 <xQueueReceive+0x122>
 8006eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006efc:	b25b      	sxtb	r3, r3
 8006efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f02:	d103      	bne.n	8006f0c <xQueueReceive+0x138>
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f0c:	f001 ff5a 	bl	8008dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f10:	1d3a      	adds	r2, r7, #4
 8006f12:	f107 0310 	add.w	r3, r7, #16
 8006f16:	4611      	mov	r1, r2
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 ff73 	bl	8007e04 <xTaskCheckForTimeOut>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d123      	bne.n	8006f6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f26:	f000 fa3b 	bl	80073a0 <prvIsQueueEmpty>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d017      	beq.n	8006f60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f32:	3324      	adds	r3, #36	; 0x24
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	4611      	mov	r1, r2
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 fe99 	bl	8007c70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f40:	f000 f9dc 	bl	80072fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f44:	f000 fcce 	bl	80078e4 <xTaskResumeAll>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d189      	bne.n	8006e62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006f4e:	4b10      	ldr	r3, [pc, #64]	; (8006f90 <xQueueReceive+0x1bc>)
 8006f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	e780      	b.n	8006e62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f62:	f000 f9cb 	bl	80072fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f66:	f000 fcbd 	bl	80078e4 <xTaskResumeAll>
 8006f6a:	e77a      	b.n	8006e62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f6e:	f000 f9c5 	bl	80072fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f72:	f000 fcb7 	bl	80078e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f78:	f000 fa12 	bl	80073a0 <prvIsQueueEmpty>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f43f af6f 	beq.w	8006e62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3730      	adds	r7, #48	; 0x30
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	e000ed04 	.word	0xe000ed04

08006f94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08e      	sub	sp, #56	; 0x38
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	623b      	str	r3, [r7, #32]
}
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	61fb      	str	r3, [r7, #28]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fe4:	f001 f862 	bl	80080ac <xTaskGetSchedulerState>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d102      	bne.n	8006ff4 <xQueueSemaphoreTake+0x60>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <xQueueSemaphoreTake+0x64>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e000      	b.n	8006ffa <xQueueSemaphoreTake+0x66>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	61bb      	str	r3, [r7, #24]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007014:	f001 fea6 	bl	8008d64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007020:	2b00      	cmp	r3, #0
 8007022:	d024      	beq.n	800706e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007026:	1e5a      	subs	r2, r3, #1
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d104      	bne.n	800703e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007034:	f001 f9b0 	bl	8008398 <pvTaskIncrementMutexHeldCount>
 8007038:	4602      	mov	r2, r0
 800703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00f      	beq.n	8007066 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	3310      	adds	r3, #16
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fe60 	bl	8007d10 <xTaskRemoveFromEventList>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d007      	beq.n	8007066 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007056:	4b54      	ldr	r3, [pc, #336]	; (80071a8 <xQueueSemaphoreTake+0x214>)
 8007058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007066:	f001 fead 	bl	8008dc4 <vPortExitCritical>
				return pdPASS;
 800706a:	2301      	movs	r3, #1
 800706c:	e097      	b.n	800719e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d111      	bne.n	8007098 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	617b      	str	r3, [r7, #20]
}
 800708c:	bf00      	nop
 800708e:	e7fe      	b.n	800708e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007090:	f001 fe98 	bl	8008dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007094:	2300      	movs	r3, #0
 8007096:	e082      	b.n	800719e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709a:	2b00      	cmp	r3, #0
 800709c:	d106      	bne.n	80070ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800709e:	f107 030c 	add.w	r3, r7, #12
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fe98 	bl	8007dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070a8:	2301      	movs	r3, #1
 80070aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070ac:	f001 fe8a 	bl	8008dc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070b0:	f000 fc0a 	bl	80078c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070b4:	f001 fe56 	bl	8008d64 <vPortEnterCritical>
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070be:	b25b      	sxtb	r3, r3
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c4:	d103      	bne.n	80070ce <xQueueSemaphoreTake+0x13a>
 80070c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070d4:	b25b      	sxtb	r3, r3
 80070d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070da:	d103      	bne.n	80070e4 <xQueueSemaphoreTake+0x150>
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070e4:	f001 fe6e 	bl	8008dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070e8:	463a      	mov	r2, r7
 80070ea:	f107 030c 	add.w	r3, r7, #12
 80070ee:	4611      	mov	r1, r2
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fe87 	bl	8007e04 <xTaskCheckForTimeOut>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d132      	bne.n	8007162 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070fe:	f000 f94f 	bl	80073a0 <prvIsQueueEmpty>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d026      	beq.n	8007156 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d109      	bne.n	8007124 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007110:	f001 fe28 	bl	8008d64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	4618      	mov	r0, r3
 800711a:	f000 ffe5 	bl	80080e8 <xTaskPriorityInherit>
 800711e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007120:	f001 fe50 	bl	8008dc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007126:	3324      	adds	r3, #36	; 0x24
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	4611      	mov	r1, r2
 800712c:	4618      	mov	r0, r3
 800712e:	f000 fd9f 	bl	8007c70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007134:	f000 f8e2 	bl	80072fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007138:	f000 fbd4 	bl	80078e4 <xTaskResumeAll>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	f47f af68 	bne.w	8007014 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007144:	4b18      	ldr	r3, [pc, #96]	; (80071a8 <xQueueSemaphoreTake+0x214>)
 8007146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	e75e      	b.n	8007014 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007158:	f000 f8d0 	bl	80072fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800715c:	f000 fbc2 	bl	80078e4 <xTaskResumeAll>
 8007160:	e758      	b.n	8007014 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007162:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007164:	f000 f8ca 	bl	80072fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007168:	f000 fbbc 	bl	80078e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800716c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800716e:	f000 f917 	bl	80073a0 <prvIsQueueEmpty>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	f43f af4d 	beq.w	8007014 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00d      	beq.n	800719c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007180:	f001 fdf0 	bl	8008d64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007184:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007186:	f000 f811 	bl	80071ac <prvGetDisinheritPriorityAfterTimeout>
 800718a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800718c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007192:	4618      	mov	r0, r3
 8007194:	f001 f87e 	bl	8008294 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007198:	f001 fe14 	bl	8008dc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800719c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3738      	adds	r7, #56	; 0x38
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	e000ed04 	.word	0xe000ed04

080071ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d006      	beq.n	80071ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	e001      	b.n	80071ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80071ca:	2300      	movs	r3, #0
 80071cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80071ce:	68fb      	ldr	r3, [r7, #12]
	}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071e8:	2300      	movs	r3, #0
 80071ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10d      	bne.n	8007216 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d14d      	bne.n	800729e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	4618      	mov	r0, r3
 8007208:	f000 ffd6 	bl	80081b8 <xTaskPriorityDisinherit>
 800720c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	609a      	str	r2, [r3, #8]
 8007214:	e043      	b.n	800729e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d119      	bne.n	8007250 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6858      	ldr	r0, [r3, #4]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007224:	461a      	mov	r2, r3
 8007226:	68b9      	ldr	r1, [r7, #8]
 8007228:	f002 f8fc 	bl	8009424 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007234:	441a      	add	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	429a      	cmp	r2, r3
 8007244:	d32b      	bcc.n	800729e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	e026      	b.n	800729e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	68d8      	ldr	r0, [r3, #12]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007258:	461a      	mov	r2, r3
 800725a:	68b9      	ldr	r1, [r7, #8]
 800725c:	f002 f8e2 	bl	8009424 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007268:	425b      	negs	r3, r3
 800726a:	441a      	add	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	429a      	cmp	r2, r3
 800727a:	d207      	bcs.n	800728c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007284:	425b      	negs	r3, r3
 8007286:	441a      	add	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b02      	cmp	r3, #2
 8007290:	d105      	bne.n	800729e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	3b01      	subs	r3, #1
 800729c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072a6:	697b      	ldr	r3, [r7, #20]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d018      	beq.n	80072f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	441a      	add	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68da      	ldr	r2, [r3, #12]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d303      	bcc.n	80072e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68d9      	ldr	r1, [r3, #12]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ec:	461a      	mov	r2, r3
 80072ee:	6838      	ldr	r0, [r7, #0]
 80072f0:	f002 f898 	bl	8009424 <memcpy>
	}
}
 80072f4:	bf00      	nop
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007304:	f001 fd2e 	bl	8008d64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800730e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007310:	e011      	b.n	8007336 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	2b00      	cmp	r3, #0
 8007318:	d012      	beq.n	8007340 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3324      	adds	r3, #36	; 0x24
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fcf6 	bl	8007d10 <xTaskRemoveFromEventList>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800732a:	f000 fdcd 	bl	8007ec8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	3b01      	subs	r3, #1
 8007332:	b2db      	uxtb	r3, r3
 8007334:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800733a:	2b00      	cmp	r3, #0
 800733c:	dce9      	bgt.n	8007312 <prvUnlockQueue+0x16>
 800733e:	e000      	b.n	8007342 <prvUnlockQueue+0x46>
					break;
 8007340:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	22ff      	movs	r2, #255	; 0xff
 8007346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800734a:	f001 fd3b 	bl	8008dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800734e:	f001 fd09 	bl	8008d64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007358:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800735a:	e011      	b.n	8007380 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d012      	beq.n	800738a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3310      	adds	r3, #16
 8007368:	4618      	mov	r0, r3
 800736a:	f000 fcd1 	bl	8007d10 <xTaskRemoveFromEventList>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007374:	f000 fda8 	bl	8007ec8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	3b01      	subs	r3, #1
 800737c:	b2db      	uxtb	r3, r3
 800737e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007380:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007384:	2b00      	cmp	r3, #0
 8007386:	dce9      	bgt.n	800735c <prvUnlockQueue+0x60>
 8007388:	e000      	b.n	800738c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800738a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	22ff      	movs	r2, #255	; 0xff
 8007390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007394:	f001 fd16 	bl	8008dc4 <vPortExitCritical>
}
 8007398:	bf00      	nop
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073a8:	f001 fcdc 	bl	8008d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d102      	bne.n	80073ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073b4:	2301      	movs	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	e001      	b.n	80073be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073be:	f001 fd01 	bl	8008dc4 <vPortExitCritical>

	return xReturn;
 80073c2:	68fb      	ldr	r3, [r7, #12]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073d4:	f001 fcc6 	bl	8008d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d102      	bne.n	80073ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073e4:	2301      	movs	r3, #1
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	e001      	b.n	80073ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073ee:	f001 fce9 	bl	8008dc4 <vPortExitCritical>

	return xReturn;
 80073f2:	68fb      	ldr	r3, [r7, #12]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007406:	2300      	movs	r3, #0
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	e014      	b.n	8007436 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800740c:	4a0f      	ldr	r2, [pc, #60]	; (800744c <vQueueAddToRegistry+0x50>)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10b      	bne.n	8007430 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007418:	490c      	ldr	r1, [pc, #48]	; (800744c <vQueueAddToRegistry+0x50>)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007422:	4a0a      	ldr	r2, [pc, #40]	; (800744c <vQueueAddToRegistry+0x50>)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	4413      	add	r3, r2
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800742e:	e006      	b.n	800743e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	3301      	adds	r3, #1
 8007434:	60fb      	str	r3, [r7, #12]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b07      	cmp	r3, #7
 800743a:	d9e7      	bls.n	800740c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800743c:	bf00      	nop
 800743e:	bf00      	nop
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	200010ac 	.word	0x200010ac

08007450 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007460:	f001 fc80 	bl	8008d64 <vPortEnterCritical>
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800746a:	b25b      	sxtb	r3, r3
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007470:	d103      	bne.n	800747a <vQueueWaitForMessageRestricted+0x2a>
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007480:	b25b      	sxtb	r3, r3
 8007482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007486:	d103      	bne.n	8007490 <vQueueWaitForMessageRestricted+0x40>
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007490:	f001 fc98 	bl	8008dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007498:	2b00      	cmp	r3, #0
 800749a:	d106      	bne.n	80074aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	3324      	adds	r3, #36	; 0x24
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	68b9      	ldr	r1, [r7, #8]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fc07 	bl	8007cb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074aa:	6978      	ldr	r0, [r7, #20]
 80074ac:	f7ff ff26 	bl	80072fc <prvUnlockQueue>
	}
 80074b0:	bf00      	nop
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b08e      	sub	sp, #56	; 0x38
 80074bc:	af04      	add	r7, sp, #16
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	623b      	str	r3, [r7, #32]
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10a      	bne.n	80074fe <xTaskCreateStatic+0x46>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	61fb      	str	r3, [r7, #28]
}
 80074fa:	bf00      	nop
 80074fc:	e7fe      	b.n	80074fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074fe:	235c      	movs	r3, #92	; 0x5c
 8007500:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	2b5c      	cmp	r3, #92	; 0x5c
 8007506:	d00a      	beq.n	800751e <xTaskCreateStatic+0x66>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	61bb      	str	r3, [r7, #24]
}
 800751a:	bf00      	nop
 800751c:	e7fe      	b.n	800751c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800751e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	2b00      	cmp	r3, #0
 8007524:	d01e      	beq.n	8007564 <xTaskCreateStatic+0xac>
 8007526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007528:	2b00      	cmp	r3, #0
 800752a:	d01b      	beq.n	8007564 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007534:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	2202      	movs	r2, #2
 800753a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800753e:	2300      	movs	r3, #0
 8007540:	9303      	str	r3, [sp, #12]
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	9302      	str	r3, [sp, #8]
 8007546:	f107 0314 	add.w	r3, r7, #20
 800754a:	9301      	str	r3, [sp, #4]
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 f850 	bl	80075fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800755c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800755e:	f000 f8dd 	bl	800771c <prvAddNewTaskToReadyList>
 8007562:	e001      	b.n	8007568 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007564:	2300      	movs	r3, #0
 8007566:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007568:	697b      	ldr	r3, [r7, #20]
	}
 800756a:	4618      	mov	r0, r3
 800756c:	3728      	adds	r7, #40	; 0x28
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007572:	b580      	push	{r7, lr}
 8007574:	b08c      	sub	sp, #48	; 0x30
 8007576:	af04      	add	r7, sp, #16
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	603b      	str	r3, [r7, #0]
 800757e:	4613      	mov	r3, r2
 8007580:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4618      	mov	r0, r3
 8007588:	f001 fd0e 	bl	8008fa8 <pvPortMalloc>
 800758c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00e      	beq.n	80075b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007594:	205c      	movs	r0, #92	; 0x5c
 8007596:	f001 fd07 	bl	8008fa8 <pvPortMalloc>
 800759a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	631a      	str	r2, [r3, #48]	; 0x30
 80075a8:	e005      	b.n	80075b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075aa:	6978      	ldr	r0, [r7, #20]
 80075ac:	f001 fdc8 	bl	8009140 <vPortFree>
 80075b0:	e001      	b.n	80075b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075b2:	2300      	movs	r3, #0
 80075b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d017      	beq.n	80075ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075c4:	88fa      	ldrh	r2, [r7, #6]
 80075c6:	2300      	movs	r3, #0
 80075c8:	9303      	str	r3, [sp, #12]
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	9302      	str	r3, [sp, #8]
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	9301      	str	r3, [sp, #4]
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 f80e 	bl	80075fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075e0:	69f8      	ldr	r0, [r7, #28]
 80075e2:	f000 f89b 	bl	800771c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075e6:	2301      	movs	r3, #1
 80075e8:	61bb      	str	r3, [r7, #24]
 80075ea:	e002      	b.n	80075f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075ec:	f04f 33ff 	mov.w	r3, #4294967295
 80075f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075f2:	69bb      	ldr	r3, [r7, #24]
	}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3720      	adds	r7, #32
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	461a      	mov	r2, r3
 8007614:	21a5      	movs	r1, #165	; 0xa5
 8007616:	f001 fed1 	bl	80093bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007624:	3b01      	subs	r3, #1
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	f023 0307 	bic.w	r3, r3, #7
 8007632:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <prvInitialiseNewTask+0x58>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	617b      	str	r3, [r7, #20]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d01f      	beq.n	800769a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800765a:	2300      	movs	r3, #0
 800765c:	61fb      	str	r3, [r7, #28]
 800765e:	e012      	b.n	8007686 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	4413      	add	r3, r2
 8007666:	7819      	ldrb	r1, [r3, #0]
 8007668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	4413      	add	r3, r2
 800766e:	3334      	adds	r3, #52	; 0x34
 8007670:	460a      	mov	r2, r1
 8007672:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	4413      	add	r3, r2
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d006      	beq.n	800768e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	3301      	adds	r3, #1
 8007684:	61fb      	str	r3, [r7, #28]
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	2b0f      	cmp	r3, #15
 800768a:	d9e9      	bls.n	8007660 <prvInitialiseNewTask+0x64>
 800768c:	e000      	b.n	8007690 <prvInitialiseNewTask+0x94>
			{
				break;
 800768e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007698:	e003      	b.n	80076a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	2b37      	cmp	r3, #55	; 0x37
 80076a6:	d901      	bls.n	80076ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076a8:	2337      	movs	r3, #55	; 0x37
 80076aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	2200      	movs	r2, #0
 80076bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	3304      	adds	r3, #4
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe ff64 	bl	8006590 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	3318      	adds	r3, #24
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fe ff5f 	bl	8006590 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	2200      	movs	r2, #0
 80076ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	68f9      	ldr	r1, [r7, #12]
 80076fa:	69b8      	ldr	r0, [r7, #24]
 80076fc:	f001 fa02 	bl	8008b04 <pxPortInitialiseStack>
 8007700:	4602      	mov	r2, r0
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800770c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007712:	bf00      	nop
 8007714:	3720      	adds	r7, #32
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007724:	f001 fb1e 	bl	8008d64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007728:	4b2d      	ldr	r3, [pc, #180]	; (80077e0 <prvAddNewTaskToReadyList+0xc4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3301      	adds	r3, #1
 800772e:	4a2c      	ldr	r2, [pc, #176]	; (80077e0 <prvAddNewTaskToReadyList+0xc4>)
 8007730:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007732:	4b2c      	ldr	r3, [pc, #176]	; (80077e4 <prvAddNewTaskToReadyList+0xc8>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d109      	bne.n	800774e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800773a:	4a2a      	ldr	r2, [pc, #168]	; (80077e4 <prvAddNewTaskToReadyList+0xc8>)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007740:	4b27      	ldr	r3, [pc, #156]	; (80077e0 <prvAddNewTaskToReadyList+0xc4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d110      	bne.n	800776a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007748:	f000 fbe2 	bl	8007f10 <prvInitialiseTaskLists>
 800774c:	e00d      	b.n	800776a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800774e:	4b26      	ldr	r3, [pc, #152]	; (80077e8 <prvAddNewTaskToReadyList+0xcc>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d109      	bne.n	800776a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007756:	4b23      	ldr	r3, [pc, #140]	; (80077e4 <prvAddNewTaskToReadyList+0xc8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	429a      	cmp	r2, r3
 8007762:	d802      	bhi.n	800776a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007764:	4a1f      	ldr	r2, [pc, #124]	; (80077e4 <prvAddNewTaskToReadyList+0xc8>)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800776a:	4b20      	ldr	r3, [pc, #128]	; (80077ec <prvAddNewTaskToReadyList+0xd0>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3301      	adds	r3, #1
 8007770:	4a1e      	ldr	r2, [pc, #120]	; (80077ec <prvAddNewTaskToReadyList+0xd0>)
 8007772:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007774:	4b1d      	ldr	r3, [pc, #116]	; (80077ec <prvAddNewTaskToReadyList+0xd0>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007780:	4b1b      	ldr	r3, [pc, #108]	; (80077f0 <prvAddNewTaskToReadyList+0xd4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d903      	bls.n	8007790 <prvAddNewTaskToReadyList+0x74>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	4a18      	ldr	r2, [pc, #96]	; (80077f0 <prvAddNewTaskToReadyList+0xd4>)
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	4613      	mov	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4a15      	ldr	r2, [pc, #84]	; (80077f4 <prvAddNewTaskToReadyList+0xd8>)
 800779e:	441a      	add	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3304      	adds	r3, #4
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	f7fe feff 	bl	80065aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077ac:	f001 fb0a 	bl	8008dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077b0:	4b0d      	ldr	r3, [pc, #52]	; (80077e8 <prvAddNewTaskToReadyList+0xcc>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00e      	beq.n	80077d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077b8:	4b0a      	ldr	r3, [pc, #40]	; (80077e4 <prvAddNewTaskToReadyList+0xc8>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d207      	bcs.n	80077d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077c6:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <prvAddNewTaskToReadyList+0xdc>)
 80077c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	200015c0 	.word	0x200015c0
 80077e4:	200010ec 	.word	0x200010ec
 80077e8:	200015cc 	.word	0x200015cc
 80077ec:	200015dc 	.word	0x200015dc
 80077f0:	200015c8 	.word	0x200015c8
 80077f4:	200010f0 	.word	0x200010f0
 80077f8:	e000ed04 	.word	0xe000ed04

080077fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b08a      	sub	sp, #40	; 0x28
 8007800:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007806:	2300      	movs	r3, #0
 8007808:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800780a:	463a      	mov	r2, r7
 800780c:	1d39      	adds	r1, r7, #4
 800780e:	f107 0308 	add.w	r3, r7, #8
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fe68 	bl	80064e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	9202      	str	r2, [sp, #8]
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	2300      	movs	r3, #0
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	2300      	movs	r3, #0
 8007828:	460a      	mov	r2, r1
 800782a:	4921      	ldr	r1, [pc, #132]	; (80078b0 <vTaskStartScheduler+0xb4>)
 800782c:	4821      	ldr	r0, [pc, #132]	; (80078b4 <vTaskStartScheduler+0xb8>)
 800782e:	f7ff fe43 	bl	80074b8 <xTaskCreateStatic>
 8007832:	4603      	mov	r3, r0
 8007834:	4a20      	ldr	r2, [pc, #128]	; (80078b8 <vTaskStartScheduler+0xbc>)
 8007836:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007838:	4b1f      	ldr	r3, [pc, #124]	; (80078b8 <vTaskStartScheduler+0xbc>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007840:	2301      	movs	r3, #1
 8007842:	617b      	str	r3, [r7, #20]
 8007844:	e001      	b.n	800784a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007846:	2300      	movs	r3, #0
 8007848:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d102      	bne.n	8007856 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007850:	f000 fe0a 	bl	8008468 <xTimerCreateTimerTask>
 8007854:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d116      	bne.n	800788a <vTaskStartScheduler+0x8e>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	613b      	str	r3, [r7, #16]
}
 800786e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007870:	4b12      	ldr	r3, [pc, #72]	; (80078bc <vTaskStartScheduler+0xc0>)
 8007872:	f04f 32ff 	mov.w	r2, #4294967295
 8007876:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007878:	4b11      	ldr	r3, [pc, #68]	; (80078c0 <vTaskStartScheduler+0xc4>)
 800787a:	2201      	movs	r2, #1
 800787c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800787e:	4b11      	ldr	r3, [pc, #68]	; (80078c4 <vTaskStartScheduler+0xc8>)
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007884:	f001 f9cc 	bl	8008c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007888:	e00e      	b.n	80078a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007890:	d10a      	bne.n	80078a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	60fb      	str	r3, [r7, #12]
}
 80078a4:	bf00      	nop
 80078a6:	e7fe      	b.n	80078a6 <vTaskStartScheduler+0xaa>
}
 80078a8:	bf00      	nop
 80078aa:	3718      	adds	r7, #24
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	08009fa4 	.word	0x08009fa4
 80078b4:	08007ee1 	.word	0x08007ee1
 80078b8:	200015e4 	.word	0x200015e4
 80078bc:	200015e0 	.word	0x200015e0
 80078c0:	200015cc 	.word	0x200015cc
 80078c4:	200015c4 	.word	0x200015c4

080078c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078c8:	b480      	push	{r7}
 80078ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078cc:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <vTaskSuspendAll+0x18>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3301      	adds	r3, #1
 80078d2:	4a03      	ldr	r2, [pc, #12]	; (80078e0 <vTaskSuspendAll+0x18>)
 80078d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078d6:	bf00      	nop
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	200015e8 	.word	0x200015e8

080078e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078f2:	4b42      	ldr	r3, [pc, #264]	; (80079fc <xTaskResumeAll+0x118>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10a      	bne.n	8007910 <xTaskResumeAll+0x2c>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	603b      	str	r3, [r7, #0]
}
 800790c:	bf00      	nop
 800790e:	e7fe      	b.n	800790e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007910:	f001 fa28 	bl	8008d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007914:	4b39      	ldr	r3, [pc, #228]	; (80079fc <xTaskResumeAll+0x118>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3b01      	subs	r3, #1
 800791a:	4a38      	ldr	r2, [pc, #224]	; (80079fc <xTaskResumeAll+0x118>)
 800791c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800791e:	4b37      	ldr	r3, [pc, #220]	; (80079fc <xTaskResumeAll+0x118>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d162      	bne.n	80079ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007926:	4b36      	ldr	r3, [pc, #216]	; (8007a00 <xTaskResumeAll+0x11c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d05e      	beq.n	80079ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800792e:	e02f      	b.n	8007990 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007930:	4b34      	ldr	r3, [pc, #208]	; (8007a04 <xTaskResumeAll+0x120>)
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3318      	adds	r3, #24
 800793c:	4618      	mov	r0, r3
 800793e:	f7fe fe91 	bl	8006664 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3304      	adds	r3, #4
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe fe8c 	bl	8006664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007950:	4b2d      	ldr	r3, [pc, #180]	; (8007a08 <xTaskResumeAll+0x124>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	d903      	bls.n	8007960 <xTaskResumeAll+0x7c>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	4a2a      	ldr	r2, [pc, #168]	; (8007a08 <xTaskResumeAll+0x124>)
 800795e:	6013      	str	r3, [r2, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007964:	4613      	mov	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4a27      	ldr	r2, [pc, #156]	; (8007a0c <xTaskResumeAll+0x128>)
 800796e:	441a      	add	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3304      	adds	r3, #4
 8007974:	4619      	mov	r1, r3
 8007976:	4610      	mov	r0, r2
 8007978:	f7fe fe17 	bl	80065aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007980:	4b23      	ldr	r3, [pc, #140]	; (8007a10 <xTaskResumeAll+0x12c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007986:	429a      	cmp	r2, r3
 8007988:	d302      	bcc.n	8007990 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800798a:	4b22      	ldr	r3, [pc, #136]	; (8007a14 <xTaskResumeAll+0x130>)
 800798c:	2201      	movs	r2, #1
 800798e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007990:	4b1c      	ldr	r3, [pc, #112]	; (8007a04 <xTaskResumeAll+0x120>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1cb      	bne.n	8007930 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800799e:	f000 fb55 	bl	800804c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079a2:	4b1d      	ldr	r3, [pc, #116]	; (8007a18 <xTaskResumeAll+0x134>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d010      	beq.n	80079d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079ae:	f000 f847 	bl	8007a40 <xTaskIncrementTick>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d002      	beq.n	80079be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80079b8:	4b16      	ldr	r3, [pc, #88]	; (8007a14 <xTaskResumeAll+0x130>)
 80079ba:	2201      	movs	r2, #1
 80079bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1f1      	bne.n	80079ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80079ca:	4b13      	ldr	r3, [pc, #76]	; (8007a18 <xTaskResumeAll+0x134>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079d0:	4b10      	ldr	r3, [pc, #64]	; (8007a14 <xTaskResumeAll+0x130>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d009      	beq.n	80079ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079d8:	2301      	movs	r3, #1
 80079da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079dc:	4b0f      	ldr	r3, [pc, #60]	; (8007a1c <xTaskResumeAll+0x138>)
 80079de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079ec:	f001 f9ea 	bl	8008dc4 <vPortExitCritical>

	return xAlreadyYielded;
 80079f0:	68bb      	ldr	r3, [r7, #8]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	200015e8 	.word	0x200015e8
 8007a00:	200015c0 	.word	0x200015c0
 8007a04:	20001580 	.word	0x20001580
 8007a08:	200015c8 	.word	0x200015c8
 8007a0c:	200010f0 	.word	0x200010f0
 8007a10:	200010ec 	.word	0x200010ec
 8007a14:	200015d4 	.word	0x200015d4
 8007a18:	200015d0 	.word	0x200015d0
 8007a1c:	e000ed04 	.word	0xe000ed04

08007a20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a26:	4b05      	ldr	r3, [pc, #20]	; (8007a3c <xTaskGetTickCount+0x1c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a2c:	687b      	ldr	r3, [r7, #4]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	200015c4 	.word	0x200015c4

08007a40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a46:	2300      	movs	r3, #0
 8007a48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a4a:	4b4f      	ldr	r3, [pc, #316]	; (8007b88 <xTaskIncrementTick+0x148>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f040 808f 	bne.w	8007b72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a54:	4b4d      	ldr	r3, [pc, #308]	; (8007b8c <xTaskIncrementTick+0x14c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a5c:	4a4b      	ldr	r2, [pc, #300]	; (8007b8c <xTaskIncrementTick+0x14c>)
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d120      	bne.n	8007aaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a68:	4b49      	ldr	r3, [pc, #292]	; (8007b90 <xTaskIncrementTick+0x150>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	603b      	str	r3, [r7, #0]
}
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <xTaskIncrementTick+0x46>
 8007a88:	4b41      	ldr	r3, [pc, #260]	; (8007b90 <xTaskIncrementTick+0x150>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	4b41      	ldr	r3, [pc, #260]	; (8007b94 <xTaskIncrementTick+0x154>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a3f      	ldr	r2, [pc, #252]	; (8007b90 <xTaskIncrementTick+0x150>)
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	4a3f      	ldr	r2, [pc, #252]	; (8007b94 <xTaskIncrementTick+0x154>)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	4b3e      	ldr	r3, [pc, #248]	; (8007b98 <xTaskIncrementTick+0x158>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	4a3d      	ldr	r2, [pc, #244]	; (8007b98 <xTaskIncrementTick+0x158>)
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	f000 fad1 	bl	800804c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007aaa:	4b3c      	ldr	r3, [pc, #240]	; (8007b9c <xTaskIncrementTick+0x15c>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d349      	bcc.n	8007b48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ab4:	4b36      	ldr	r3, [pc, #216]	; (8007b90 <xTaskIncrementTick+0x150>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d104      	bne.n	8007ac8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007abe:	4b37      	ldr	r3, [pc, #220]	; (8007b9c <xTaskIncrementTick+0x15c>)
 8007ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac4:	601a      	str	r2, [r3, #0]
					break;
 8007ac6:	e03f      	b.n	8007b48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ac8:	4b31      	ldr	r3, [pc, #196]	; (8007b90 <xTaskIncrementTick+0x150>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d203      	bcs.n	8007ae8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ae0:	4a2e      	ldr	r2, [pc, #184]	; (8007b9c <xTaskIncrementTick+0x15c>)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ae6:	e02f      	b.n	8007b48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	3304      	adds	r3, #4
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fe fdb9 	bl	8006664 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d004      	beq.n	8007b04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	3318      	adds	r3, #24
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fe fdb0 	bl	8006664 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b08:	4b25      	ldr	r3, [pc, #148]	; (8007ba0 <xTaskIncrementTick+0x160>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d903      	bls.n	8007b18 <xTaskIncrementTick+0xd8>
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	4a22      	ldr	r2, [pc, #136]	; (8007ba0 <xTaskIncrementTick+0x160>)
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4a1f      	ldr	r2, [pc, #124]	; (8007ba4 <xTaskIncrementTick+0x164>)
 8007b26:	441a      	add	r2, r3
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4610      	mov	r0, r2
 8007b30:	f7fe fd3b 	bl	80065aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b38:	4b1b      	ldr	r3, [pc, #108]	; (8007ba8 <xTaskIncrementTick+0x168>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d3b8      	bcc.n	8007ab4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b42:	2301      	movs	r3, #1
 8007b44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b46:	e7b5      	b.n	8007ab4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b48:	4b17      	ldr	r3, [pc, #92]	; (8007ba8 <xTaskIncrementTick+0x168>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4e:	4915      	ldr	r1, [pc, #84]	; (8007ba4 <xTaskIncrementTick+0x164>)
 8007b50:	4613      	mov	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	440b      	add	r3, r1
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d901      	bls.n	8007b64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b60:	2301      	movs	r3, #1
 8007b62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b64:	4b11      	ldr	r3, [pc, #68]	; (8007bac <xTaskIncrementTick+0x16c>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d007      	beq.n	8007b7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	617b      	str	r3, [r7, #20]
 8007b70:	e004      	b.n	8007b7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b72:	4b0f      	ldr	r3, [pc, #60]	; (8007bb0 <xTaskIncrementTick+0x170>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3301      	adds	r3, #1
 8007b78:	4a0d      	ldr	r2, [pc, #52]	; (8007bb0 <xTaskIncrementTick+0x170>)
 8007b7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b7c:	697b      	ldr	r3, [r7, #20]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	200015e8 	.word	0x200015e8
 8007b8c:	200015c4 	.word	0x200015c4
 8007b90:	20001578 	.word	0x20001578
 8007b94:	2000157c 	.word	0x2000157c
 8007b98:	200015d8 	.word	0x200015d8
 8007b9c:	200015e0 	.word	0x200015e0
 8007ba0:	200015c8 	.word	0x200015c8
 8007ba4:	200010f0 	.word	0x200010f0
 8007ba8:	200010ec 	.word	0x200010ec
 8007bac:	200015d4 	.word	0x200015d4
 8007bb0:	200015d0 	.word	0x200015d0

08007bb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bba:	4b28      	ldr	r3, [pc, #160]	; (8007c5c <vTaskSwitchContext+0xa8>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bc2:	4b27      	ldr	r3, [pc, #156]	; (8007c60 <vTaskSwitchContext+0xac>)
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bc8:	e041      	b.n	8007c4e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007bca:	4b25      	ldr	r3, [pc, #148]	; (8007c60 <vTaskSwitchContext+0xac>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd0:	4b24      	ldr	r3, [pc, #144]	; (8007c64 <vTaskSwitchContext+0xb0>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	e010      	b.n	8007bfa <vTaskSwitchContext+0x46>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10a      	bne.n	8007bf4 <vTaskSwitchContext+0x40>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	607b      	str	r3, [r7, #4]
}
 8007bf0:	bf00      	nop
 8007bf2:	e7fe      	b.n	8007bf2 <vTaskSwitchContext+0x3e>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	60fb      	str	r3, [r7, #12]
 8007bfa:	491b      	ldr	r1, [pc, #108]	; (8007c68 <vTaskSwitchContext+0xb4>)
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	440b      	add	r3, r1
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0e4      	beq.n	8007bd8 <vTaskSwitchContext+0x24>
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4a13      	ldr	r2, [pc, #76]	; (8007c68 <vTaskSwitchContext+0xb4>)
 8007c1a:	4413      	add	r3, r2
 8007c1c:	60bb      	str	r3, [r7, #8]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	605a      	str	r2, [r3, #4]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	3308      	adds	r3, #8
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d104      	bne.n	8007c3e <vTaskSwitchContext+0x8a>
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	605a      	str	r2, [r3, #4]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	4a09      	ldr	r2, [pc, #36]	; (8007c6c <vTaskSwitchContext+0xb8>)
 8007c46:	6013      	str	r3, [r2, #0]
 8007c48:	4a06      	ldr	r2, [pc, #24]	; (8007c64 <vTaskSwitchContext+0xb0>)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6013      	str	r3, [r2, #0]
}
 8007c4e:	bf00      	nop
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	200015e8 	.word	0x200015e8
 8007c60:	200015d4 	.word	0x200015d4
 8007c64:	200015c8 	.word	0x200015c8
 8007c68:	200010f0 	.word	0x200010f0
 8007c6c:	200010ec 	.word	0x200010ec

08007c70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	60fb      	str	r3, [r7, #12]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c96:	4b07      	ldr	r3, [pc, #28]	; (8007cb4 <vTaskPlaceOnEventList+0x44>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3318      	adds	r3, #24
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fe fca7 	bl	80065f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	6838      	ldr	r0, [r7, #0]
 8007ca8:	f000 fb8a 	bl	80083c0 <prvAddCurrentTaskToDelayedList>
}
 8007cac:	bf00      	nop
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	200010ec 	.word	0x200010ec

08007cb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10a      	bne.n	8007ce0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	617b      	str	r3, [r7, #20]
}
 8007cdc:	bf00      	nop
 8007cde:	e7fe      	b.n	8007cde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ce0:	4b0a      	ldr	r3, [pc, #40]	; (8007d0c <vTaskPlaceOnEventListRestricted+0x54>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3318      	adds	r3, #24
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7fe fc5e 	bl	80065aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	68b8      	ldr	r0, [r7, #8]
 8007cfe:	f000 fb5f 	bl	80083c0 <prvAddCurrentTaskToDelayedList>
	}
 8007d02:	bf00      	nop
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	200010ec 	.word	0x200010ec

08007d10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10a      	bne.n	8007d3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	60fb      	str	r3, [r7, #12]
}
 8007d38:	bf00      	nop
 8007d3a:	e7fe      	b.n	8007d3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	3318      	adds	r3, #24
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fe fc8f 	bl	8006664 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d46:	4b1e      	ldr	r3, [pc, #120]	; (8007dc0 <xTaskRemoveFromEventList+0xb0>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d11d      	bne.n	8007d8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	3304      	adds	r3, #4
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fe fc86 	bl	8006664 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5c:	4b19      	ldr	r3, [pc, #100]	; (8007dc4 <xTaskRemoveFromEventList+0xb4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d903      	bls.n	8007d6c <xTaskRemoveFromEventList+0x5c>
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	4a16      	ldr	r2, [pc, #88]	; (8007dc4 <xTaskRemoveFromEventList+0xb4>)
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d70:	4613      	mov	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4a13      	ldr	r2, [pc, #76]	; (8007dc8 <xTaskRemoveFromEventList+0xb8>)
 8007d7a:	441a      	add	r2, r3
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	4619      	mov	r1, r3
 8007d82:	4610      	mov	r0, r2
 8007d84:	f7fe fc11 	bl	80065aa <vListInsertEnd>
 8007d88:	e005      	b.n	8007d96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	3318      	adds	r3, #24
 8007d8e:	4619      	mov	r1, r3
 8007d90:	480e      	ldr	r0, [pc, #56]	; (8007dcc <xTaskRemoveFromEventList+0xbc>)
 8007d92:	f7fe fc0a 	bl	80065aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <xTaskRemoveFromEventList+0xc0>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d905      	bls.n	8007db0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007da4:	2301      	movs	r3, #1
 8007da6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007da8:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <xTaskRemoveFromEventList+0xc4>)
 8007daa:	2201      	movs	r2, #1
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	e001      	b.n	8007db4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007db4:	697b      	ldr	r3, [r7, #20]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3718      	adds	r7, #24
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	200015e8 	.word	0x200015e8
 8007dc4:	200015c8 	.word	0x200015c8
 8007dc8:	200010f0 	.word	0x200010f0
 8007dcc:	20001580 	.word	0x20001580
 8007dd0:	200010ec 	.word	0x200010ec
 8007dd4:	200015d4 	.word	0x200015d4

08007dd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007de0:	4b06      	ldr	r3, [pc, #24]	; (8007dfc <vTaskInternalSetTimeOutState+0x24>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007de8:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <vTaskInternalSetTimeOutState+0x28>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	605a      	str	r2, [r3, #4]
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	200015d8 	.word	0x200015d8
 8007e00:	200015c4 	.word	0x200015c4

08007e04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10a      	bne.n	8007e2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	613b      	str	r3, [r7, #16]
}
 8007e26:	bf00      	nop
 8007e28:	e7fe      	b.n	8007e28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10a      	bne.n	8007e46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	60fb      	str	r3, [r7, #12]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e46:	f000 ff8d 	bl	8008d64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e4a:	4b1d      	ldr	r3, [pc, #116]	; (8007ec0 <xTaskCheckForTimeOut+0xbc>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e62:	d102      	bne.n	8007e6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e64:	2300      	movs	r3, #0
 8007e66:	61fb      	str	r3, [r7, #28]
 8007e68:	e023      	b.n	8007eb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	4b15      	ldr	r3, [pc, #84]	; (8007ec4 <xTaskCheckForTimeOut+0xc0>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d007      	beq.n	8007e86 <xTaskCheckForTimeOut+0x82>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d302      	bcc.n	8007e86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e80:	2301      	movs	r3, #1
 8007e82:	61fb      	str	r3, [r7, #28]
 8007e84:	e015      	b.n	8007eb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d20b      	bcs.n	8007ea8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	1ad2      	subs	r2, r2, r3
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff ff9b 	bl	8007dd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	61fb      	str	r3, [r7, #28]
 8007ea6:	e004      	b.n	8007eb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007eb2:	f000 ff87 	bl	8008dc4 <vPortExitCritical>

	return xReturn;
 8007eb6:	69fb      	ldr	r3, [r7, #28]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3720      	adds	r7, #32
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	200015c4 	.word	0x200015c4
 8007ec4:	200015d8 	.word	0x200015d8

08007ec8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ec8:	b480      	push	{r7}
 8007eca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ecc:	4b03      	ldr	r3, [pc, #12]	; (8007edc <vTaskMissedYield+0x14>)
 8007ece:	2201      	movs	r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]
}
 8007ed2:	bf00      	nop
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	200015d4 	.word	0x200015d4

08007ee0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ee8:	f000 f852 	bl	8007f90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007eec:	4b06      	ldr	r3, [pc, #24]	; (8007f08 <prvIdleTask+0x28>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d9f9      	bls.n	8007ee8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ef4:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <prvIdleTask+0x2c>)
 8007ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f04:	e7f0      	b.n	8007ee8 <prvIdleTask+0x8>
 8007f06:	bf00      	nop
 8007f08:	200010f0 	.word	0x200010f0
 8007f0c:	e000ed04 	.word	0xe000ed04

08007f10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f16:	2300      	movs	r3, #0
 8007f18:	607b      	str	r3, [r7, #4]
 8007f1a:	e00c      	b.n	8007f36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4a12      	ldr	r2, [pc, #72]	; (8007f70 <prvInitialiseTaskLists+0x60>)
 8007f28:	4413      	add	r3, r2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fe fb10 	bl	8006550 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3301      	adds	r3, #1
 8007f34:	607b      	str	r3, [r7, #4]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b37      	cmp	r3, #55	; 0x37
 8007f3a:	d9ef      	bls.n	8007f1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f3c:	480d      	ldr	r0, [pc, #52]	; (8007f74 <prvInitialiseTaskLists+0x64>)
 8007f3e:	f7fe fb07 	bl	8006550 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f42:	480d      	ldr	r0, [pc, #52]	; (8007f78 <prvInitialiseTaskLists+0x68>)
 8007f44:	f7fe fb04 	bl	8006550 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f48:	480c      	ldr	r0, [pc, #48]	; (8007f7c <prvInitialiseTaskLists+0x6c>)
 8007f4a:	f7fe fb01 	bl	8006550 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f4e:	480c      	ldr	r0, [pc, #48]	; (8007f80 <prvInitialiseTaskLists+0x70>)
 8007f50:	f7fe fafe 	bl	8006550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f54:	480b      	ldr	r0, [pc, #44]	; (8007f84 <prvInitialiseTaskLists+0x74>)
 8007f56:	f7fe fafb 	bl	8006550 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <prvInitialiseTaskLists+0x78>)
 8007f5c:	4a05      	ldr	r2, [pc, #20]	; (8007f74 <prvInitialiseTaskLists+0x64>)
 8007f5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f60:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <prvInitialiseTaskLists+0x7c>)
 8007f62:	4a05      	ldr	r2, [pc, #20]	; (8007f78 <prvInitialiseTaskLists+0x68>)
 8007f64:	601a      	str	r2, [r3, #0]
}
 8007f66:	bf00      	nop
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	200010f0 	.word	0x200010f0
 8007f74:	20001550 	.word	0x20001550
 8007f78:	20001564 	.word	0x20001564
 8007f7c:	20001580 	.word	0x20001580
 8007f80:	20001594 	.word	0x20001594
 8007f84:	200015ac 	.word	0x200015ac
 8007f88:	20001578 	.word	0x20001578
 8007f8c:	2000157c 	.word	0x2000157c

08007f90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f96:	e019      	b.n	8007fcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f98:	f000 fee4 	bl	8008d64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f9c:	4b10      	ldr	r3, [pc, #64]	; (8007fe0 <prvCheckTasksWaitingTermination+0x50>)
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fe fb5b 	bl	8006664 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fae:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <prvCheckTasksWaitingTermination+0x54>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	4a0b      	ldr	r2, [pc, #44]	; (8007fe4 <prvCheckTasksWaitingTermination+0x54>)
 8007fb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fb8:	4b0b      	ldr	r3, [pc, #44]	; (8007fe8 <prvCheckTasksWaitingTermination+0x58>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	4a0a      	ldr	r2, [pc, #40]	; (8007fe8 <prvCheckTasksWaitingTermination+0x58>)
 8007fc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fc2:	f000 feff 	bl	8008dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f810 	bl	8007fec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fcc:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <prvCheckTasksWaitingTermination+0x58>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e1      	bne.n	8007f98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20001594 	.word	0x20001594
 8007fe4:	200015c0 	.word	0x200015c0
 8007fe8:	200015a8 	.word	0x200015a8

08007fec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d108      	bne.n	8008010 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	4618      	mov	r0, r3
 8008004:	f001 f89c 	bl	8009140 <vPortFree>
				vPortFree( pxTCB );
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f001 f899 	bl	8009140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800800e:	e018      	b.n	8008042 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008016:	2b01      	cmp	r3, #1
 8008018:	d103      	bne.n	8008022 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 f890 	bl	8009140 <vPortFree>
	}
 8008020:	e00f      	b.n	8008042 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008028:	2b02      	cmp	r3, #2
 800802a:	d00a      	beq.n	8008042 <prvDeleteTCB+0x56>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	60fb      	str	r3, [r7, #12]
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <prvDeleteTCB+0x54>
	}
 8008042:	bf00      	nop
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008052:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <prvResetNextTaskUnblockTime+0x38>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d104      	bne.n	8008066 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800805c:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <prvResetNextTaskUnblockTime+0x3c>)
 800805e:	f04f 32ff 	mov.w	r2, #4294967295
 8008062:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008064:	e008      	b.n	8008078 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008066:	4b07      	ldr	r3, [pc, #28]	; (8008084 <prvResetNextTaskUnblockTime+0x38>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	4a04      	ldr	r2, [pc, #16]	; (8008088 <prvResetNextTaskUnblockTime+0x3c>)
 8008076:	6013      	str	r3, [r2, #0]
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	20001578 	.word	0x20001578
 8008088:	200015e0 	.word	0x200015e0

0800808c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008092:	4b05      	ldr	r3, [pc, #20]	; (80080a8 <xTaskGetCurrentTaskHandle+0x1c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008098:	687b      	ldr	r3, [r7, #4]
	}
 800809a:	4618      	mov	r0, r3
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	200010ec 	.word	0x200010ec

080080ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080b2:	4b0b      	ldr	r3, [pc, #44]	; (80080e0 <xTaskGetSchedulerState+0x34>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d102      	bne.n	80080c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080ba:	2301      	movs	r3, #1
 80080bc:	607b      	str	r3, [r7, #4]
 80080be:	e008      	b.n	80080d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080c0:	4b08      	ldr	r3, [pc, #32]	; (80080e4 <xTaskGetSchedulerState+0x38>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d102      	bne.n	80080ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080c8:	2302      	movs	r3, #2
 80080ca:	607b      	str	r3, [r7, #4]
 80080cc:	e001      	b.n	80080d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080ce:	2300      	movs	r3, #0
 80080d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080d2:	687b      	ldr	r3, [r7, #4]
	}
 80080d4:	4618      	mov	r0, r3
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	200015cc 	.word	0x200015cc
 80080e4:	200015e8 	.word	0x200015e8

080080e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80080f4:	2300      	movs	r3, #0
 80080f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d051      	beq.n	80081a2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008102:	4b2a      	ldr	r3, [pc, #168]	; (80081ac <xTaskPriorityInherit+0xc4>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008108:	429a      	cmp	r2, r3
 800810a:	d241      	bcs.n	8008190 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	2b00      	cmp	r3, #0
 8008112:	db06      	blt.n	8008122 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008114:	4b25      	ldr	r3, [pc, #148]	; (80081ac <xTaskPriorityInherit+0xc4>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	6959      	ldr	r1, [r3, #20]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812a:	4613      	mov	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4a1f      	ldr	r2, [pc, #124]	; (80081b0 <xTaskPriorityInherit+0xc8>)
 8008134:	4413      	add	r3, r2
 8008136:	4299      	cmp	r1, r3
 8008138:	d122      	bne.n	8008180 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	3304      	adds	r3, #4
 800813e:	4618      	mov	r0, r3
 8008140:	f7fe fa90 	bl	8006664 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008144:	4b19      	ldr	r3, [pc, #100]	; (80081ac <xTaskPriorityInherit+0xc4>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008152:	4b18      	ldr	r3, [pc, #96]	; (80081b4 <xTaskPriorityInherit+0xcc>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	429a      	cmp	r2, r3
 8008158:	d903      	bls.n	8008162 <xTaskPriorityInherit+0x7a>
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815e:	4a15      	ldr	r2, [pc, #84]	; (80081b4 <xTaskPriorityInherit+0xcc>)
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008166:	4613      	mov	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4a10      	ldr	r2, [pc, #64]	; (80081b0 <xTaskPriorityInherit+0xc8>)
 8008170:	441a      	add	r2, r3
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	3304      	adds	r3, #4
 8008176:	4619      	mov	r1, r3
 8008178:	4610      	mov	r0, r2
 800817a:	f7fe fa16 	bl	80065aa <vListInsertEnd>
 800817e:	e004      	b.n	800818a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008180:	4b0a      	ldr	r3, [pc, #40]	; (80081ac <xTaskPriorityInherit+0xc4>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800818a:	2301      	movs	r3, #1
 800818c:	60fb      	str	r3, [r7, #12]
 800818e:	e008      	b.n	80081a2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008194:	4b05      	ldr	r3, [pc, #20]	; (80081ac <xTaskPriorityInherit+0xc4>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819a:	429a      	cmp	r2, r3
 800819c:	d201      	bcs.n	80081a2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800819e:	2301      	movs	r3, #1
 80081a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081a2:	68fb      	ldr	r3, [r7, #12]
	}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	200010ec 	.word	0x200010ec
 80081b0:	200010f0 	.word	0x200010f0
 80081b4:	200015c8 	.word	0x200015c8

080081b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d056      	beq.n	800827c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081ce:	4b2e      	ldr	r3, [pc, #184]	; (8008288 <xTaskPriorityDisinherit+0xd0>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d00a      	beq.n	80081ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	60fb      	str	r3, [r7, #12]
}
 80081ea:	bf00      	nop
 80081ec:	e7fe      	b.n	80081ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10a      	bne.n	800820c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	60bb      	str	r3, [r7, #8]
}
 8008208:	bf00      	nop
 800820a:	e7fe      	b.n	800820a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008210:	1e5a      	subs	r2, r3, #1
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800821e:	429a      	cmp	r2, r3
 8008220:	d02c      	beq.n	800827c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008226:	2b00      	cmp	r3, #0
 8008228:	d128      	bne.n	800827c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	3304      	adds	r3, #4
 800822e:	4618      	mov	r0, r3
 8008230:	f7fe fa18 	bl	8006664 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008240:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824c:	4b0f      	ldr	r3, [pc, #60]	; (800828c <xTaskPriorityDisinherit+0xd4>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	d903      	bls.n	800825c <xTaskPriorityDisinherit+0xa4>
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	4a0c      	ldr	r2, [pc, #48]	; (800828c <xTaskPriorityDisinherit+0xd4>)
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4a09      	ldr	r2, [pc, #36]	; (8008290 <xTaskPriorityDisinherit+0xd8>)
 800826a:	441a      	add	r2, r3
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	3304      	adds	r3, #4
 8008270:	4619      	mov	r1, r3
 8008272:	4610      	mov	r0, r2
 8008274:	f7fe f999 	bl	80065aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008278:	2301      	movs	r3, #1
 800827a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800827c:	697b      	ldr	r3, [r7, #20]
	}
 800827e:	4618      	mov	r0, r3
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	200010ec 	.word	0x200010ec
 800828c:	200015c8 	.word	0x200015c8
 8008290:	200010f0 	.word	0x200010f0

08008294 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80082a2:	2301      	movs	r3, #1
 80082a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d06a      	beq.n	8008382 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10a      	bne.n	80082ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	60fb      	str	r3, [r7, #12]
}
 80082c6:	bf00      	nop
 80082c8:	e7fe      	b.n	80082c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d902      	bls.n	80082da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	61fb      	str	r3, [r7, #28]
 80082d8:	e002      	b.n	80082e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	69fa      	ldr	r2, [r7, #28]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d04b      	beq.n	8008382 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d146      	bne.n	8008382 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80082f4:	4b25      	ldr	r3, [pc, #148]	; (800838c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d10a      	bne.n	8008314 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	60bb      	str	r3, [r7, #8]
}
 8008310:	bf00      	nop
 8008312:	e7fe      	b.n	8008312 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	69fa      	ldr	r2, [r7, #28]
 800831e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	db04      	blt.n	8008332 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	6959      	ldr	r1, [r3, #20]
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	4613      	mov	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4a13      	ldr	r2, [pc, #76]	; (8008390 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008342:	4413      	add	r3, r2
 8008344:	4299      	cmp	r1, r3
 8008346:	d11c      	bne.n	8008382 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	3304      	adds	r3, #4
 800834c:	4618      	mov	r0, r3
 800834e:	f7fe f989 	bl	8006664 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008356:	4b0f      	ldr	r3, [pc, #60]	; (8008394 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d903      	bls.n	8008366 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	4a0c      	ldr	r2, [pc, #48]	; (8008394 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836a:	4613      	mov	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4a07      	ldr	r2, [pc, #28]	; (8008390 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008374:	441a      	add	r2, r3
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	3304      	adds	r3, #4
 800837a:	4619      	mov	r1, r3
 800837c:	4610      	mov	r0, r2
 800837e:	f7fe f914 	bl	80065aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008382:	bf00      	nop
 8008384:	3720      	adds	r7, #32
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	200010ec 	.word	0x200010ec
 8008390:	200010f0 	.word	0x200010f0
 8008394:	200015c8 	.word	0x200015c8

08008398 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008398:	b480      	push	{r7}
 800839a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800839c:	4b07      	ldr	r3, [pc, #28]	; (80083bc <pvTaskIncrementMutexHeldCount+0x24>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d004      	beq.n	80083ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80083a4:	4b05      	ldr	r3, [pc, #20]	; (80083bc <pvTaskIncrementMutexHeldCount+0x24>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083aa:	3201      	adds	r2, #1
 80083ac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80083ae:	4b03      	ldr	r3, [pc, #12]	; (80083bc <pvTaskIncrementMutexHeldCount+0x24>)
 80083b0:	681b      	ldr	r3, [r3, #0]
	}
 80083b2:	4618      	mov	r0, r3
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	200010ec 	.word	0x200010ec

080083c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083ca:	4b21      	ldr	r3, [pc, #132]	; (8008450 <prvAddCurrentTaskToDelayedList+0x90>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083d0:	4b20      	ldr	r3, [pc, #128]	; (8008454 <prvAddCurrentTaskToDelayedList+0x94>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3304      	adds	r3, #4
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe f944 	bl	8006664 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e2:	d10a      	bne.n	80083fa <prvAddCurrentTaskToDelayedList+0x3a>
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ea:	4b1a      	ldr	r3, [pc, #104]	; (8008454 <prvAddCurrentTaskToDelayedList+0x94>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3304      	adds	r3, #4
 80083f0:	4619      	mov	r1, r3
 80083f2:	4819      	ldr	r0, [pc, #100]	; (8008458 <prvAddCurrentTaskToDelayedList+0x98>)
 80083f4:	f7fe f8d9 	bl	80065aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083f8:	e026      	b.n	8008448 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4413      	add	r3, r2
 8008400:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008402:	4b14      	ldr	r3, [pc, #80]	; (8008454 <prvAddCurrentTaskToDelayedList+0x94>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	429a      	cmp	r2, r3
 8008410:	d209      	bcs.n	8008426 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008412:	4b12      	ldr	r3, [pc, #72]	; (800845c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	4b0f      	ldr	r3, [pc, #60]	; (8008454 <prvAddCurrentTaskToDelayedList+0x94>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3304      	adds	r3, #4
 800841c:	4619      	mov	r1, r3
 800841e:	4610      	mov	r0, r2
 8008420:	f7fe f8e7 	bl	80065f2 <vListInsert>
}
 8008424:	e010      	b.n	8008448 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008426:	4b0e      	ldr	r3, [pc, #56]	; (8008460 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	4b0a      	ldr	r3, [pc, #40]	; (8008454 <prvAddCurrentTaskToDelayedList+0x94>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3304      	adds	r3, #4
 8008430:	4619      	mov	r1, r3
 8008432:	4610      	mov	r0, r2
 8008434:	f7fe f8dd 	bl	80065f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008438:	4b0a      	ldr	r3, [pc, #40]	; (8008464 <prvAddCurrentTaskToDelayedList+0xa4>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	429a      	cmp	r2, r3
 8008440:	d202      	bcs.n	8008448 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008442:	4a08      	ldr	r2, [pc, #32]	; (8008464 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	6013      	str	r3, [r2, #0]
}
 8008448:	bf00      	nop
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	200015c4 	.word	0x200015c4
 8008454:	200010ec 	.word	0x200010ec
 8008458:	200015ac 	.word	0x200015ac
 800845c:	2000157c 	.word	0x2000157c
 8008460:	20001578 	.word	0x20001578
 8008464:	200015e0 	.word	0x200015e0

08008468 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08a      	sub	sp, #40	; 0x28
 800846c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800846e:	2300      	movs	r3, #0
 8008470:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008472:	f000 fb07 	bl	8008a84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008476:	4b1c      	ldr	r3, [pc, #112]	; (80084e8 <xTimerCreateTimerTask+0x80>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d021      	beq.n	80084c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008486:	1d3a      	adds	r2, r7, #4
 8008488:	f107 0108 	add.w	r1, r7, #8
 800848c:	f107 030c 	add.w	r3, r7, #12
 8008490:	4618      	mov	r0, r3
 8008492:	f7fe f843 	bl	800651c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008496:	6879      	ldr	r1, [r7, #4]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	9202      	str	r2, [sp, #8]
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	2302      	movs	r3, #2
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	2300      	movs	r3, #0
 80084a6:	460a      	mov	r2, r1
 80084a8:	4910      	ldr	r1, [pc, #64]	; (80084ec <xTimerCreateTimerTask+0x84>)
 80084aa:	4811      	ldr	r0, [pc, #68]	; (80084f0 <xTimerCreateTimerTask+0x88>)
 80084ac:	f7ff f804 	bl	80074b8 <xTaskCreateStatic>
 80084b0:	4603      	mov	r3, r0
 80084b2:	4a10      	ldr	r2, [pc, #64]	; (80084f4 <xTimerCreateTimerTask+0x8c>)
 80084b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084b6:	4b0f      	ldr	r3, [pc, #60]	; (80084f4 <xTimerCreateTimerTask+0x8c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084be:	2301      	movs	r3, #1
 80084c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10a      	bne.n	80084de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	613b      	str	r3, [r7, #16]
}
 80084da:	bf00      	nop
 80084dc:	e7fe      	b.n	80084dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80084de:	697b      	ldr	r3, [r7, #20]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3718      	adds	r7, #24
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	2000161c 	.word	0x2000161c
 80084ec:	08009fac 	.word	0x08009fac
 80084f0:	0800862d 	.word	0x0800862d
 80084f4:	20001620 	.word	0x20001620

080084f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b08a      	sub	sp, #40	; 0x28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008506:	2300      	movs	r3, #0
 8008508:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	623b      	str	r3, [r7, #32]
}
 8008522:	bf00      	nop
 8008524:	e7fe      	b.n	8008524 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008526:	4b1a      	ldr	r3, [pc, #104]	; (8008590 <xTimerGenericCommand+0x98>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d02a      	beq.n	8008584 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2b05      	cmp	r3, #5
 800853e:	dc18      	bgt.n	8008572 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008540:	f7ff fdb4 	bl	80080ac <xTaskGetSchedulerState>
 8008544:	4603      	mov	r3, r0
 8008546:	2b02      	cmp	r3, #2
 8008548:	d109      	bne.n	800855e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800854a:	4b11      	ldr	r3, [pc, #68]	; (8008590 <xTimerGenericCommand+0x98>)
 800854c:	6818      	ldr	r0, [r3, #0]
 800854e:	f107 0110 	add.w	r1, r7, #16
 8008552:	2300      	movs	r3, #0
 8008554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008556:	f7fe faa3 	bl	8006aa0 <xQueueGenericSend>
 800855a:	6278      	str	r0, [r7, #36]	; 0x24
 800855c:	e012      	b.n	8008584 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800855e:	4b0c      	ldr	r3, [pc, #48]	; (8008590 <xTimerGenericCommand+0x98>)
 8008560:	6818      	ldr	r0, [r3, #0]
 8008562:	f107 0110 	add.w	r1, r7, #16
 8008566:	2300      	movs	r3, #0
 8008568:	2200      	movs	r2, #0
 800856a:	f7fe fa99 	bl	8006aa0 <xQueueGenericSend>
 800856e:	6278      	str	r0, [r7, #36]	; 0x24
 8008570:	e008      	b.n	8008584 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008572:	4b07      	ldr	r3, [pc, #28]	; (8008590 <xTimerGenericCommand+0x98>)
 8008574:	6818      	ldr	r0, [r3, #0]
 8008576:	f107 0110 	add.w	r1, r7, #16
 800857a:	2300      	movs	r3, #0
 800857c:	683a      	ldr	r2, [r7, #0]
 800857e:	f7fe fb8d 	bl	8006c9c <xQueueGenericSendFromISR>
 8008582:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008586:	4618      	mov	r0, r3
 8008588:	3728      	adds	r7, #40	; 0x28
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	2000161c 	.word	0x2000161c

08008594 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af02      	add	r7, sp, #8
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800859e:	4b22      	ldr	r3, [pc, #136]	; (8008628 <prvProcessExpiredTimer+0x94>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	3304      	adds	r3, #4
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fe f859 	bl	8006664 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085b8:	f003 0304 	and.w	r3, r3, #4
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d022      	beq.n	8008606 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	699a      	ldr	r2, [r3, #24]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	18d1      	adds	r1, r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	6978      	ldr	r0, [r7, #20]
 80085ce:	f000 f8d1 	bl	8008774 <prvInsertTimerInActiveList>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d01f      	beq.n	8008618 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085d8:	2300      	movs	r3, #0
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	2300      	movs	r3, #0
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	2100      	movs	r1, #0
 80085e2:	6978      	ldr	r0, [r7, #20]
 80085e4:	f7ff ff88 	bl	80084f8 <xTimerGenericCommand>
 80085e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d113      	bne.n	8008618 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	60fb      	str	r3, [r7, #12]
}
 8008602:	bf00      	nop
 8008604:	e7fe      	b.n	8008604 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800860c:	f023 0301 	bic.w	r3, r3, #1
 8008610:	b2da      	uxtb	r2, r3
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	6978      	ldr	r0, [r7, #20]
 800861e:	4798      	blx	r3
}
 8008620:	bf00      	nop
 8008622:	3718      	adds	r7, #24
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	20001614 	.word	0x20001614

0800862c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008634:	f107 0308 	add.w	r3, r7, #8
 8008638:	4618      	mov	r0, r3
 800863a:	f000 f857 	bl	80086ec <prvGetNextExpireTime>
 800863e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	4619      	mov	r1, r3
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 f803 	bl	8008650 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800864a:	f000 f8d5 	bl	80087f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800864e:	e7f1      	b.n	8008634 <prvTimerTask+0x8>

08008650 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800865a:	f7ff f935 	bl	80078c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800865e:	f107 0308 	add.w	r3, r7, #8
 8008662:	4618      	mov	r0, r3
 8008664:	f000 f866 	bl	8008734 <prvSampleTimeNow>
 8008668:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d130      	bne.n	80086d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10a      	bne.n	800868c <prvProcessTimerOrBlockTask+0x3c>
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	429a      	cmp	r2, r3
 800867c:	d806      	bhi.n	800868c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800867e:	f7ff f931 	bl	80078e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008682:	68f9      	ldr	r1, [r7, #12]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff ff85 	bl	8008594 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800868a:	e024      	b.n	80086d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d008      	beq.n	80086a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008692:	4b13      	ldr	r3, [pc, #76]	; (80086e0 <prvProcessTimerOrBlockTask+0x90>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <prvProcessTimerOrBlockTask+0x50>
 800869c:	2301      	movs	r3, #1
 800869e:	e000      	b.n	80086a2 <prvProcessTimerOrBlockTask+0x52>
 80086a0:	2300      	movs	r3, #0
 80086a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086a4:	4b0f      	ldr	r3, [pc, #60]	; (80086e4 <prvProcessTimerOrBlockTask+0x94>)
 80086a6:	6818      	ldr	r0, [r3, #0]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	4619      	mov	r1, r3
 80086b2:	f7fe fecd 	bl	8007450 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086b6:	f7ff f915 	bl	80078e4 <xTaskResumeAll>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10a      	bne.n	80086d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086c0:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <prvProcessTimerOrBlockTask+0x98>)
 80086c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	f3bf 8f6f 	isb	sy
}
 80086d0:	e001      	b.n	80086d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086d2:	f7ff f907 	bl	80078e4 <xTaskResumeAll>
}
 80086d6:	bf00      	nop
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20001618 	.word	0x20001618
 80086e4:	2000161c 	.word	0x2000161c
 80086e8:	e000ed04 	.word	0xe000ed04

080086ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80086f4:	4b0e      	ldr	r3, [pc, #56]	; (8008730 <prvGetNextExpireTime+0x44>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <prvGetNextExpireTime+0x16>
 80086fe:	2201      	movs	r2, #1
 8008700:	e000      	b.n	8008704 <prvGetNextExpireTime+0x18>
 8008702:	2200      	movs	r2, #0
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d105      	bne.n	800871c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008710:	4b07      	ldr	r3, [pc, #28]	; (8008730 <prvGetNextExpireTime+0x44>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	e001      	b.n	8008720 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008720:	68fb      	ldr	r3, [r7, #12]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	20001614 	.word	0x20001614

08008734 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800873c:	f7ff f970 	bl	8007a20 <xTaskGetTickCount>
 8008740:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008742:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <prvSampleTimeNow+0x3c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	429a      	cmp	r2, r3
 800874a:	d205      	bcs.n	8008758 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800874c:	f000 f936 	bl	80089bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	e002      	b.n	800875e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800875e:	4a04      	ldr	r2, [pc, #16]	; (8008770 <prvSampleTimeNow+0x3c>)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008764:	68fb      	ldr	r3, [r7, #12]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20001624 	.word	0x20001624

08008774 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008782:	2300      	movs	r3, #0
 8008784:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	429a      	cmp	r2, r3
 8008798:	d812      	bhi.n	80087c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	1ad2      	subs	r2, r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d302      	bcc.n	80087ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087a8:	2301      	movs	r3, #1
 80087aa:	617b      	str	r3, [r7, #20]
 80087ac:	e01b      	b.n	80087e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087ae:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <prvInsertTimerInActiveList+0x7c>)
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3304      	adds	r3, #4
 80087b6:	4619      	mov	r1, r3
 80087b8:	4610      	mov	r0, r2
 80087ba:	f7fd ff1a 	bl	80065f2 <vListInsert>
 80087be:	e012      	b.n	80087e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d206      	bcs.n	80087d6 <prvInsertTimerInActiveList+0x62>
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d302      	bcc.n	80087d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087d0:	2301      	movs	r3, #1
 80087d2:	617b      	str	r3, [r7, #20]
 80087d4:	e007      	b.n	80087e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087d6:	4b07      	ldr	r3, [pc, #28]	; (80087f4 <prvInsertTimerInActiveList+0x80>)
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	3304      	adds	r3, #4
 80087de:	4619      	mov	r1, r3
 80087e0:	4610      	mov	r0, r2
 80087e2:	f7fd ff06 	bl	80065f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80087e6:	697b      	ldr	r3, [r7, #20]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	20001618 	.word	0x20001618
 80087f4:	20001614 	.word	0x20001614

080087f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b08e      	sub	sp, #56	; 0x38
 80087fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087fe:	e0ca      	b.n	8008996 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	da18      	bge.n	8008838 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008806:	1d3b      	adds	r3, r7, #4
 8008808:	3304      	adds	r3, #4
 800880a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800880c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10a      	bne.n	8008828 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	61fb      	str	r3, [r7, #28]
}
 8008824:	bf00      	nop
 8008826:	e7fe      	b.n	8008826 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800882e:	6850      	ldr	r0, [r2, #4]
 8008830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008832:	6892      	ldr	r2, [r2, #8]
 8008834:	4611      	mov	r1, r2
 8008836:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	f2c0 80ab 	blt.w	8008996 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d004      	beq.n	8008856 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884e:	3304      	adds	r3, #4
 8008850:	4618      	mov	r0, r3
 8008852:	f7fd ff07 	bl	8006664 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008856:	463b      	mov	r3, r7
 8008858:	4618      	mov	r0, r3
 800885a:	f7ff ff6b 	bl	8008734 <prvSampleTimeNow>
 800885e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b09      	cmp	r3, #9
 8008864:	f200 8096 	bhi.w	8008994 <prvProcessReceivedCommands+0x19c>
 8008868:	a201      	add	r2, pc, #4	; (adr r2, 8008870 <prvProcessReceivedCommands+0x78>)
 800886a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886e:	bf00      	nop
 8008870:	08008899 	.word	0x08008899
 8008874:	08008899 	.word	0x08008899
 8008878:	08008899 	.word	0x08008899
 800887c:	0800890d 	.word	0x0800890d
 8008880:	08008921 	.word	0x08008921
 8008884:	0800896b 	.word	0x0800896b
 8008888:	08008899 	.word	0x08008899
 800888c:	08008899 	.word	0x08008899
 8008890:	0800890d 	.word	0x0800890d
 8008894:	08008921 	.word	0x08008921
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800889e:	f043 0301 	orr.w	r3, r3, #1
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	18d1      	adds	r1, r2, r3
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088b8:	f7ff ff5c 	bl	8008774 <prvInsertTimerInActiveList>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d069      	beq.n	8008996 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088d0:	f003 0304 	and.w	r3, r3, #4
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d05e      	beq.n	8008996 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	441a      	add	r2, r3
 80088e0:	2300      	movs	r3, #0
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	2300      	movs	r3, #0
 80088e6:	2100      	movs	r1, #0
 80088e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ea:	f7ff fe05 	bl	80084f8 <xTimerGenericCommand>
 80088ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d14f      	bne.n	8008996 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80088f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	61bb      	str	r3, [r7, #24]
}
 8008908:	bf00      	nop
 800890a:	e7fe      	b.n	800890a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008912:	f023 0301 	bic.w	r3, r3, #1
 8008916:	b2da      	uxtb	r2, r3
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800891e:	e03a      	b.n	8008996 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008926:	f043 0301 	orr.w	r3, r3, #1
 800892a:	b2da      	uxtb	r2, r3
 800892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008936:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10a      	bne.n	8008956 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	617b      	str	r3, [r7, #20]
}
 8008952:	bf00      	nop
 8008954:	e7fe      	b.n	8008954 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	699a      	ldr	r2, [r3, #24]
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	18d1      	adds	r1, r2, r3
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008964:	f7ff ff06 	bl	8008774 <prvInsertTimerInActiveList>
					break;
 8008968:	e015      	b.n	8008996 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800896a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b00      	cmp	r3, #0
 8008976:	d103      	bne.n	8008980 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800897a:	f000 fbe1 	bl	8009140 <vPortFree>
 800897e:	e00a      	b.n	8008996 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008986:	f023 0301 	bic.w	r3, r3, #1
 800898a:	b2da      	uxtb	r2, r3
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008992:	e000      	b.n	8008996 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008994:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008996:	4b08      	ldr	r3, [pc, #32]	; (80089b8 <prvProcessReceivedCommands+0x1c0>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	1d39      	adds	r1, r7, #4
 800899c:	2200      	movs	r2, #0
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fa18 	bl	8006dd4 <xQueueReceive>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f47f af2a 	bne.w	8008800 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80089ac:	bf00      	nop
 80089ae:	bf00      	nop
 80089b0:	3730      	adds	r7, #48	; 0x30
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	2000161c 	.word	0x2000161c

080089bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b088      	sub	sp, #32
 80089c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089c2:	e048      	b.n	8008a56 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089c4:	4b2d      	ldr	r3, [pc, #180]	; (8008a7c <prvSwitchTimerLists+0xc0>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089ce:	4b2b      	ldr	r3, [pc, #172]	; (8008a7c <prvSwitchTimerLists+0xc0>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3304      	adds	r3, #4
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fd fe41 	bl	8006664 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d02e      	beq.n	8008a56 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	4413      	add	r3, r2
 8008a00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d90e      	bls.n	8008a28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a16:	4b19      	ldr	r3, [pc, #100]	; (8008a7c <prvSwitchTimerLists+0xc0>)
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	4619      	mov	r1, r3
 8008a20:	4610      	mov	r0, r2
 8008a22:	f7fd fde6 	bl	80065f2 <vListInsert>
 8008a26:	e016      	b.n	8008a56 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a28:	2300      	movs	r3, #0
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	2100      	movs	r1, #0
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f7ff fd60 	bl	80084f8 <xTimerGenericCommand>
 8008a38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10a      	bne.n	8008a56 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	603b      	str	r3, [r7, #0]
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a56:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <prvSwitchTimerLists+0xc0>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1b1      	bne.n	80089c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a60:	4b06      	ldr	r3, [pc, #24]	; (8008a7c <prvSwitchTimerLists+0xc0>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a66:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <prvSwitchTimerLists+0xc4>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a04      	ldr	r2, [pc, #16]	; (8008a7c <prvSwitchTimerLists+0xc0>)
 8008a6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a6e:	4a04      	ldr	r2, [pc, #16]	; (8008a80 <prvSwitchTimerLists+0xc4>)
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	6013      	str	r3, [r2, #0]
}
 8008a74:	bf00      	nop
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	20001614 	.word	0x20001614
 8008a80:	20001618 	.word	0x20001618

08008a84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a8a:	f000 f96b 	bl	8008d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a8e:	4b15      	ldr	r3, [pc, #84]	; (8008ae4 <prvCheckForValidListAndQueue+0x60>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d120      	bne.n	8008ad8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a96:	4814      	ldr	r0, [pc, #80]	; (8008ae8 <prvCheckForValidListAndQueue+0x64>)
 8008a98:	f7fd fd5a 	bl	8006550 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a9c:	4813      	ldr	r0, [pc, #76]	; (8008aec <prvCheckForValidListAndQueue+0x68>)
 8008a9e:	f7fd fd57 	bl	8006550 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008aa2:	4b13      	ldr	r3, [pc, #76]	; (8008af0 <prvCheckForValidListAndQueue+0x6c>)
 8008aa4:	4a10      	ldr	r2, [pc, #64]	; (8008ae8 <prvCheckForValidListAndQueue+0x64>)
 8008aa6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008aa8:	4b12      	ldr	r3, [pc, #72]	; (8008af4 <prvCheckForValidListAndQueue+0x70>)
 8008aaa:	4a10      	ldr	r2, [pc, #64]	; (8008aec <prvCheckForValidListAndQueue+0x68>)
 8008aac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008aae:	2300      	movs	r3, #0
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	4b11      	ldr	r3, [pc, #68]	; (8008af8 <prvCheckForValidListAndQueue+0x74>)
 8008ab4:	4a11      	ldr	r2, [pc, #68]	; (8008afc <prvCheckForValidListAndQueue+0x78>)
 8008ab6:	2110      	movs	r1, #16
 8008ab8:	200a      	movs	r0, #10
 8008aba:	f7fd fe65 	bl	8006788 <xQueueGenericCreateStatic>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	4a08      	ldr	r2, [pc, #32]	; (8008ae4 <prvCheckForValidListAndQueue+0x60>)
 8008ac2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ac4:	4b07      	ldr	r3, [pc, #28]	; (8008ae4 <prvCheckForValidListAndQueue+0x60>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d005      	beq.n	8008ad8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008acc:	4b05      	ldr	r3, [pc, #20]	; (8008ae4 <prvCheckForValidListAndQueue+0x60>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	490b      	ldr	r1, [pc, #44]	; (8008b00 <prvCheckForValidListAndQueue+0x7c>)
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe fc92 	bl	80073fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ad8:	f000 f974 	bl	8008dc4 <vPortExitCritical>
}
 8008adc:	bf00      	nop
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	2000161c 	.word	0x2000161c
 8008ae8:	200015ec 	.word	0x200015ec
 8008aec:	20001600 	.word	0x20001600
 8008af0:	20001614 	.word	0x20001614
 8008af4:	20001618 	.word	0x20001618
 8008af8:	200016c8 	.word	0x200016c8
 8008afc:	20001628 	.word	0x20001628
 8008b00:	08009fb4 	.word	0x08009fb4

08008b04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3b04      	subs	r3, #4
 8008b14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3b04      	subs	r3, #4
 8008b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f023 0201 	bic.w	r2, r3, #1
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3b04      	subs	r3, #4
 8008b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b34:	4a0c      	ldr	r2, [pc, #48]	; (8008b68 <pxPortInitialiseStack+0x64>)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	3b14      	subs	r3, #20
 8008b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3b04      	subs	r3, #4
 8008b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f06f 0202 	mvn.w	r2, #2
 8008b52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3b20      	subs	r3, #32
 8008b58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	08008b6d 	.word	0x08008b6d

08008b6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b76:	4b12      	ldr	r3, [pc, #72]	; (8008bc0 <prvTaskExitError+0x54>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7e:	d00a      	beq.n	8008b96 <prvTaskExitError+0x2a>
	__asm volatile
 8008b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	60fb      	str	r3, [r7, #12]
}
 8008b92:	bf00      	nop
 8008b94:	e7fe      	b.n	8008b94 <prvTaskExitError+0x28>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	60bb      	str	r3, [r7, #8]
}
 8008ba8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008baa:	bf00      	nop
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0fc      	beq.n	8008bac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bb2:	bf00      	nop
 8008bb4:	bf00      	nop
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	20000024 	.word	0x20000024
	...

08008bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008bd0:	4b07      	ldr	r3, [pc, #28]	; (8008bf0 <pxCurrentTCBConst2>)
 8008bd2:	6819      	ldr	r1, [r3, #0]
 8008bd4:	6808      	ldr	r0, [r1, #0]
 8008bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bda:	f380 8809 	msr	PSP, r0
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f04f 0000 	mov.w	r0, #0
 8008be6:	f380 8811 	msr	BASEPRI, r0
 8008bea:	4770      	bx	lr
 8008bec:	f3af 8000 	nop.w

08008bf0 <pxCurrentTCBConst2>:
 8008bf0:	200010ec 	.word	0x200010ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop

08008bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008bf8:	4808      	ldr	r0, [pc, #32]	; (8008c1c <prvPortStartFirstTask+0x24>)
 8008bfa:	6800      	ldr	r0, [r0, #0]
 8008bfc:	6800      	ldr	r0, [r0, #0]
 8008bfe:	f380 8808 	msr	MSP, r0
 8008c02:	f04f 0000 	mov.w	r0, #0
 8008c06:	f380 8814 	msr	CONTROL, r0
 8008c0a:	b662      	cpsie	i
 8008c0c:	b661      	cpsie	f
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	df00      	svc	0
 8008c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c1a:	bf00      	nop
 8008c1c:	e000ed08 	.word	0xe000ed08

08008c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c26:	4b46      	ldr	r3, [pc, #280]	; (8008d40 <xPortStartScheduler+0x120>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a46      	ldr	r2, [pc, #280]	; (8008d44 <xPortStartScheduler+0x124>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d10a      	bne.n	8008c46 <xPortStartScheduler+0x26>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	613b      	str	r3, [r7, #16]
}
 8008c42:	bf00      	nop
 8008c44:	e7fe      	b.n	8008c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c46:	4b3e      	ldr	r3, [pc, #248]	; (8008d40 <xPortStartScheduler+0x120>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a3f      	ldr	r2, [pc, #252]	; (8008d48 <xPortStartScheduler+0x128>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d10a      	bne.n	8008c66 <xPortStartScheduler+0x46>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	60fb      	str	r3, [r7, #12]
}
 8008c62:	bf00      	nop
 8008c64:	e7fe      	b.n	8008c64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c66:	4b39      	ldr	r3, [pc, #228]	; (8008d4c <xPortStartScheduler+0x12c>)
 8008c68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	22ff      	movs	r2, #255	; 0xff
 8008c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c80:	78fb      	ldrb	r3, [r7, #3]
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	4b31      	ldr	r3, [pc, #196]	; (8008d50 <xPortStartScheduler+0x130>)
 8008c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c8e:	4b31      	ldr	r3, [pc, #196]	; (8008d54 <xPortStartScheduler+0x134>)
 8008c90:	2207      	movs	r2, #7
 8008c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c94:	e009      	b.n	8008caa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c96:	4b2f      	ldr	r3, [pc, #188]	; (8008d54 <xPortStartScheduler+0x134>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	4a2d      	ldr	r2, [pc, #180]	; (8008d54 <xPortStartScheduler+0x134>)
 8008c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ca0:	78fb      	ldrb	r3, [r7, #3]
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008caa:	78fb      	ldrb	r3, [r7, #3]
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb2:	2b80      	cmp	r3, #128	; 0x80
 8008cb4:	d0ef      	beq.n	8008c96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cb6:	4b27      	ldr	r3, [pc, #156]	; (8008d54 <xPortStartScheduler+0x134>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f1c3 0307 	rsb	r3, r3, #7
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	d00a      	beq.n	8008cd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	60bb      	str	r3, [r7, #8]
}
 8008cd4:	bf00      	nop
 8008cd6:	e7fe      	b.n	8008cd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cd8:	4b1e      	ldr	r3, [pc, #120]	; (8008d54 <xPortStartScheduler+0x134>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	021b      	lsls	r3, r3, #8
 8008cde:	4a1d      	ldr	r2, [pc, #116]	; (8008d54 <xPortStartScheduler+0x134>)
 8008ce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ce2:	4b1c      	ldr	r3, [pc, #112]	; (8008d54 <xPortStartScheduler+0x134>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cea:	4a1a      	ldr	r2, [pc, #104]	; (8008d54 <xPortStartScheduler+0x134>)
 8008cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008cf6:	4b18      	ldr	r3, [pc, #96]	; (8008d58 <xPortStartScheduler+0x138>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a17      	ldr	r2, [pc, #92]	; (8008d58 <xPortStartScheduler+0x138>)
 8008cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d02:	4b15      	ldr	r3, [pc, #84]	; (8008d58 <xPortStartScheduler+0x138>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a14      	ldr	r2, [pc, #80]	; (8008d58 <xPortStartScheduler+0x138>)
 8008d08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d0e:	f000 f8dd 	bl	8008ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d12:	4b12      	ldr	r3, [pc, #72]	; (8008d5c <xPortStartScheduler+0x13c>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d18:	f000 f8fc 	bl	8008f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d1c:	4b10      	ldr	r3, [pc, #64]	; (8008d60 <xPortStartScheduler+0x140>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a0f      	ldr	r2, [pc, #60]	; (8008d60 <xPortStartScheduler+0x140>)
 8008d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d28:	f7ff ff66 	bl	8008bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d2c:	f7fe ff42 	bl	8007bb4 <vTaskSwitchContext>
	prvTaskExitError();
 8008d30:	f7ff ff1c 	bl	8008b6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	e000ed00 	.word	0xe000ed00
 8008d44:	410fc271 	.word	0x410fc271
 8008d48:	410fc270 	.word	0x410fc270
 8008d4c:	e000e400 	.word	0xe000e400
 8008d50:	20001718 	.word	0x20001718
 8008d54:	2000171c 	.word	0x2000171c
 8008d58:	e000ed20 	.word	0xe000ed20
 8008d5c:	20000024 	.word	0x20000024
 8008d60:	e000ef34 	.word	0xe000ef34

08008d64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	607b      	str	r3, [r7, #4]
}
 8008d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d7e:	4b0f      	ldr	r3, [pc, #60]	; (8008dbc <vPortEnterCritical+0x58>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	4a0d      	ldr	r2, [pc, #52]	; (8008dbc <vPortEnterCritical+0x58>)
 8008d86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d88:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <vPortEnterCritical+0x58>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d10f      	bne.n	8008db0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d90:	4b0b      	ldr	r3, [pc, #44]	; (8008dc0 <vPortEnterCritical+0x5c>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	603b      	str	r3, [r7, #0]
}
 8008dac:	bf00      	nop
 8008dae:	e7fe      	b.n	8008dae <vPortEnterCritical+0x4a>
	}
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	20000024 	.word	0x20000024
 8008dc0:	e000ed04 	.word	0xe000ed04

08008dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dca:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <vPortExitCritical+0x50>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10a      	bne.n	8008de8 <vPortExitCritical+0x24>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	607b      	str	r3, [r7, #4]
}
 8008de4:	bf00      	nop
 8008de6:	e7fe      	b.n	8008de6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008de8:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <vPortExitCritical+0x50>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	4a09      	ldr	r2, [pc, #36]	; (8008e14 <vPortExitCritical+0x50>)
 8008df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008df2:	4b08      	ldr	r3, [pc, #32]	; (8008e14 <vPortExitCritical+0x50>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d105      	bne.n	8008e06 <vPortExitCritical+0x42>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	f383 8811 	msr	BASEPRI, r3
}
 8008e04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	20000024 	.word	0x20000024
	...

08008e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e20:	f3ef 8009 	mrs	r0, PSP
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	4b15      	ldr	r3, [pc, #84]	; (8008e80 <pxCurrentTCBConst>)
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	f01e 0f10 	tst.w	lr, #16
 8008e30:	bf08      	it	eq
 8008e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3a:	6010      	str	r0, [r2, #0]
 8008e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e44:	f380 8811 	msr	BASEPRI, r0
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f7fe feb0 	bl	8007bb4 <vTaskSwitchContext>
 8008e54:	f04f 0000 	mov.w	r0, #0
 8008e58:	f380 8811 	msr	BASEPRI, r0
 8008e5c:	bc09      	pop	{r0, r3}
 8008e5e:	6819      	ldr	r1, [r3, #0]
 8008e60:	6808      	ldr	r0, [r1, #0]
 8008e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e66:	f01e 0f10 	tst.w	lr, #16
 8008e6a:	bf08      	it	eq
 8008e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e70:	f380 8809 	msr	PSP, r0
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	f3af 8000 	nop.w

08008e80 <pxCurrentTCBConst>:
 8008e80:	200010ec 	.word	0x200010ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop

08008e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	607b      	str	r3, [r7, #4]
}
 8008ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ea2:	f7fe fdcd 	bl	8007a40 <xTaskIncrementTick>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008eac:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <xPortSysTickHandler+0x40>)
 8008eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	f383 8811 	msr	BASEPRI, r3
}
 8008ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ec0:	bf00      	nop
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	e000ed04 	.word	0xe000ed04

08008ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ed0:	4b0b      	ldr	r3, [pc, #44]	; (8008f00 <vPortSetupTimerInterrupt+0x34>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ed6:	4b0b      	ldr	r3, [pc, #44]	; (8008f04 <vPortSetupTimerInterrupt+0x38>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008edc:	4b0a      	ldr	r3, [pc, #40]	; (8008f08 <vPortSetupTimerInterrupt+0x3c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a0a      	ldr	r2, [pc, #40]	; (8008f0c <vPortSetupTimerInterrupt+0x40>)
 8008ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee6:	099b      	lsrs	r3, r3, #6
 8008ee8:	4a09      	ldr	r2, [pc, #36]	; (8008f10 <vPortSetupTimerInterrupt+0x44>)
 8008eea:	3b01      	subs	r3, #1
 8008eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008eee:	4b04      	ldr	r3, [pc, #16]	; (8008f00 <vPortSetupTimerInterrupt+0x34>)
 8008ef0:	2207      	movs	r2, #7
 8008ef2:	601a      	str	r2, [r3, #0]
}
 8008ef4:	bf00      	nop
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	e000e010 	.word	0xe000e010
 8008f04:	e000e018 	.word	0xe000e018
 8008f08:	20000018 	.word	0x20000018
 8008f0c:	10624dd3 	.word	0x10624dd3
 8008f10:	e000e014 	.word	0xe000e014

08008f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f24 <vPortEnableVFP+0x10>
 8008f18:	6801      	ldr	r1, [r0, #0]
 8008f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f1e:	6001      	str	r1, [r0, #0]
 8008f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f22:	bf00      	nop
 8008f24:	e000ed88 	.word	0xe000ed88

08008f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f2e:	f3ef 8305 	mrs	r3, IPSR
 8008f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b0f      	cmp	r3, #15
 8008f38:	d914      	bls.n	8008f64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f3a:	4a17      	ldr	r2, [pc, #92]	; (8008f98 <vPortValidateInterruptPriority+0x70>)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f44:	4b15      	ldr	r3, [pc, #84]	; (8008f9c <vPortValidateInterruptPriority+0x74>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	7afa      	ldrb	r2, [r7, #11]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d20a      	bcs.n	8008f64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	607b      	str	r3, [r7, #4]
}
 8008f60:	bf00      	nop
 8008f62:	e7fe      	b.n	8008f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f64:	4b0e      	ldr	r3, [pc, #56]	; (8008fa0 <vPortValidateInterruptPriority+0x78>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f6c:	4b0d      	ldr	r3, [pc, #52]	; (8008fa4 <vPortValidateInterruptPriority+0x7c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d90a      	bls.n	8008f8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	603b      	str	r3, [r7, #0]
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <vPortValidateInterruptPriority+0x60>
	}
 8008f8a:	bf00      	nop
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	e000e3f0 	.word	0xe000e3f0
 8008f9c:	20001718 	.word	0x20001718
 8008fa0:	e000ed0c 	.word	0xe000ed0c
 8008fa4:	2000171c 	.word	0x2000171c

08008fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08a      	sub	sp, #40	; 0x28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008fb4:	f7fe fc88 	bl	80078c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008fb8:	4b5b      	ldr	r3, [pc, #364]	; (8009128 <pvPortMalloc+0x180>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008fc0:	f000 f920 	bl	8009204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008fc4:	4b59      	ldr	r3, [pc, #356]	; (800912c <pvPortMalloc+0x184>)
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f040 8093 	bne.w	80090f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d01d      	beq.n	8009014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008fd8:	2208      	movs	r2, #8
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4413      	add	r3, r2
 8008fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d014      	beq.n	8009014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f023 0307 	bic.w	r3, r3, #7
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f003 0307 	and.w	r3, r3, #7
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00a      	beq.n	8009014 <pvPortMalloc+0x6c>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	617b      	str	r3, [r7, #20]
}
 8009010:	bf00      	nop
 8009012:	e7fe      	b.n	8009012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d06e      	beq.n	80090f8 <pvPortMalloc+0x150>
 800901a:	4b45      	ldr	r3, [pc, #276]	; (8009130 <pvPortMalloc+0x188>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	429a      	cmp	r2, r3
 8009022:	d869      	bhi.n	80090f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009024:	4b43      	ldr	r3, [pc, #268]	; (8009134 <pvPortMalloc+0x18c>)
 8009026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009028:	4b42      	ldr	r3, [pc, #264]	; (8009134 <pvPortMalloc+0x18c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800902e:	e004      	b.n	800903a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	429a      	cmp	r2, r3
 8009042:	d903      	bls.n	800904c <pvPortMalloc+0xa4>
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1f1      	bne.n	8009030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800904c:	4b36      	ldr	r3, [pc, #216]	; (8009128 <pvPortMalloc+0x180>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009052:	429a      	cmp	r2, r3
 8009054:	d050      	beq.n	80090f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2208      	movs	r2, #8
 800905c:	4413      	add	r3, r2
 800905e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	1ad2      	subs	r2, r2, r3
 8009070:	2308      	movs	r3, #8
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	429a      	cmp	r2, r3
 8009076:	d91f      	bls.n	80090b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4413      	add	r3, r2
 800907e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00a      	beq.n	80090a0 <pvPortMalloc+0xf8>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	613b      	str	r3, [r7, #16]
}
 800909c:	bf00      	nop
 800909e:	e7fe      	b.n	800909e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	1ad2      	subs	r2, r2, r3
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090b2:	69b8      	ldr	r0, [r7, #24]
 80090b4:	f000 f908 	bl	80092c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090b8:	4b1d      	ldr	r3, [pc, #116]	; (8009130 <pvPortMalloc+0x188>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	4a1b      	ldr	r2, [pc, #108]	; (8009130 <pvPortMalloc+0x188>)
 80090c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090c6:	4b1a      	ldr	r3, [pc, #104]	; (8009130 <pvPortMalloc+0x188>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	4b1b      	ldr	r3, [pc, #108]	; (8009138 <pvPortMalloc+0x190>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d203      	bcs.n	80090da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090d2:	4b17      	ldr	r3, [pc, #92]	; (8009130 <pvPortMalloc+0x188>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a18      	ldr	r2, [pc, #96]	; (8009138 <pvPortMalloc+0x190>)
 80090d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	4b13      	ldr	r3, [pc, #76]	; (800912c <pvPortMalloc+0x184>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	431a      	orrs	r2, r3
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80090ee:	4b13      	ldr	r3, [pc, #76]	; (800913c <pvPortMalloc+0x194>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3301      	adds	r3, #1
 80090f4:	4a11      	ldr	r2, [pc, #68]	; (800913c <pvPortMalloc+0x194>)
 80090f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090f8:	f7fe fbf4 	bl	80078e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	f003 0307 	and.w	r3, r3, #7
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00a      	beq.n	800911c <pvPortMalloc+0x174>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	60fb      	str	r3, [r7, #12]
}
 8009118:	bf00      	nop
 800911a:	e7fe      	b.n	800911a <pvPortMalloc+0x172>
	return pvReturn;
 800911c:	69fb      	ldr	r3, [r7, #28]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3728      	adds	r7, #40	; 0x28
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20007100 	.word	0x20007100
 800912c:	20007114 	.word	0x20007114
 8009130:	20007104 	.word	0x20007104
 8009134:	200070f8 	.word	0x200070f8
 8009138:	20007108 	.word	0x20007108
 800913c:	2000710c 	.word	0x2000710c

08009140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d04d      	beq.n	80091ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009152:	2308      	movs	r3, #8
 8009154:	425b      	negs	r3, r3
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	4413      	add	r3, r2
 800915a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	4b24      	ldr	r3, [pc, #144]	; (80091f8 <vPortFree+0xb8>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4013      	ands	r3, r2
 800916a:	2b00      	cmp	r3, #0
 800916c:	d10a      	bne.n	8009184 <vPortFree+0x44>
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	60fb      	str	r3, [r7, #12]
}
 8009180:	bf00      	nop
 8009182:	e7fe      	b.n	8009182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00a      	beq.n	80091a2 <vPortFree+0x62>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	60bb      	str	r3, [r7, #8]
}
 800919e:	bf00      	nop
 80091a0:	e7fe      	b.n	80091a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	4b14      	ldr	r3, [pc, #80]	; (80091f8 <vPortFree+0xb8>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4013      	ands	r3, r2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01e      	beq.n	80091ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d11a      	bne.n	80091ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	4b0e      	ldr	r3, [pc, #56]	; (80091f8 <vPortFree+0xb8>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	43db      	mvns	r3, r3
 80091c2:	401a      	ands	r2, r3
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80091c8:	f7fe fb7e 	bl	80078c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <vPortFree+0xbc>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4413      	add	r3, r2
 80091d6:	4a09      	ldr	r2, [pc, #36]	; (80091fc <vPortFree+0xbc>)
 80091d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091da:	6938      	ldr	r0, [r7, #16]
 80091dc:	f000 f874 	bl	80092c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80091e0:	4b07      	ldr	r3, [pc, #28]	; (8009200 <vPortFree+0xc0>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3301      	adds	r3, #1
 80091e6:	4a06      	ldr	r2, [pc, #24]	; (8009200 <vPortFree+0xc0>)
 80091e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80091ea:	f7fe fb7b 	bl	80078e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091ee:	bf00      	nop
 80091f0:	3718      	adds	r7, #24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20007114 	.word	0x20007114
 80091fc:	20007104 	.word	0x20007104
 8009200:	20007110 	.word	0x20007110

08009204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800920a:	f645 13d8 	movw	r3, #23000	; 0x59d8
 800920e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009210:	4b27      	ldr	r3, [pc, #156]	; (80092b0 <prvHeapInit+0xac>)
 8009212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f003 0307 	and.w	r3, r3, #7
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00c      	beq.n	8009238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3307      	adds	r3, #7
 8009222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0307 	bic.w	r3, r3, #7
 800922a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	4a1f      	ldr	r2, [pc, #124]	; (80092b0 <prvHeapInit+0xac>)
 8009234:	4413      	add	r3, r2
 8009236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800923c:	4a1d      	ldr	r2, [pc, #116]	; (80092b4 <prvHeapInit+0xb0>)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009242:	4b1c      	ldr	r3, [pc, #112]	; (80092b4 <prvHeapInit+0xb0>)
 8009244:	2200      	movs	r2, #0
 8009246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	4413      	add	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009250:	2208      	movs	r2, #8
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	1a9b      	subs	r3, r3, r2
 8009256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f023 0307 	bic.w	r3, r3, #7
 800925e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4a15      	ldr	r2, [pc, #84]	; (80092b8 <prvHeapInit+0xb4>)
 8009264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009266:	4b14      	ldr	r3, [pc, #80]	; (80092b8 <prvHeapInit+0xb4>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2200      	movs	r2, #0
 800926c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800926e:	4b12      	ldr	r3, [pc, #72]	; (80092b8 <prvHeapInit+0xb4>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	1ad2      	subs	r2, r2, r3
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009284:	4b0c      	ldr	r3, [pc, #48]	; (80092b8 <prvHeapInit+0xb4>)
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	4a0a      	ldr	r2, [pc, #40]	; (80092bc <prvHeapInit+0xb8>)
 8009292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	4a09      	ldr	r2, [pc, #36]	; (80092c0 <prvHeapInit+0xbc>)
 800929a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800929c:	4b09      	ldr	r3, [pc, #36]	; (80092c4 <prvHeapInit+0xc0>)
 800929e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092a2:	601a      	str	r2, [r3, #0]
}
 80092a4:	bf00      	nop
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	20001720 	.word	0x20001720
 80092b4:	200070f8 	.word	0x200070f8
 80092b8:	20007100 	.word	0x20007100
 80092bc:	20007108 	.word	0x20007108
 80092c0:	20007104 	.word	0x20007104
 80092c4:	20007114 	.word	0x20007114

080092c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092d0:	4b28      	ldr	r3, [pc, #160]	; (8009374 <prvInsertBlockIntoFreeList+0xac>)
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	e002      	b.n	80092dc <prvInsertBlockIntoFreeList+0x14>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d8f7      	bhi.n	80092d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	4413      	add	r3, r2
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d108      	bne.n	800930a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	441a      	add	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	441a      	add	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d118      	bne.n	8009350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	4b15      	ldr	r3, [pc, #84]	; (8009378 <prvInsertBlockIntoFreeList+0xb0>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d00d      	beq.n	8009346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	441a      	add	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	e008      	b.n	8009358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009346:	4b0c      	ldr	r3, [pc, #48]	; (8009378 <prvInsertBlockIntoFreeList+0xb0>)
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	e003      	b.n	8009358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	429a      	cmp	r2, r3
 800935e:	d002      	beq.n	8009366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009366:	bf00      	nop
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	200070f8 	.word	0x200070f8
 8009378:	20007100 	.word	0x20007100

0800937c <siprintf>:
 800937c:	b40e      	push	{r1, r2, r3}
 800937e:	b500      	push	{lr}
 8009380:	b09c      	sub	sp, #112	; 0x70
 8009382:	ab1d      	add	r3, sp, #116	; 0x74
 8009384:	9002      	str	r0, [sp, #8]
 8009386:	9006      	str	r0, [sp, #24]
 8009388:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800938c:	4809      	ldr	r0, [pc, #36]	; (80093b4 <siprintf+0x38>)
 800938e:	9107      	str	r1, [sp, #28]
 8009390:	9104      	str	r1, [sp, #16]
 8009392:	4909      	ldr	r1, [pc, #36]	; (80093b8 <siprintf+0x3c>)
 8009394:	f853 2b04 	ldr.w	r2, [r3], #4
 8009398:	9105      	str	r1, [sp, #20]
 800939a:	6800      	ldr	r0, [r0, #0]
 800939c:	9301      	str	r3, [sp, #4]
 800939e:	a902      	add	r1, sp, #8
 80093a0:	f000 f9a0 	bl	80096e4 <_svfiprintf_r>
 80093a4:	9b02      	ldr	r3, [sp, #8]
 80093a6:	2200      	movs	r2, #0
 80093a8:	701a      	strb	r2, [r3, #0]
 80093aa:	b01c      	add	sp, #112	; 0x70
 80093ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80093b0:	b003      	add	sp, #12
 80093b2:	4770      	bx	lr
 80093b4:	20000074 	.word	0x20000074
 80093b8:	ffff0208 	.word	0xffff0208

080093bc <memset>:
 80093bc:	4402      	add	r2, r0
 80093be:	4603      	mov	r3, r0
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d100      	bne.n	80093c6 <memset+0xa>
 80093c4:	4770      	bx	lr
 80093c6:	f803 1b01 	strb.w	r1, [r3], #1
 80093ca:	e7f9      	b.n	80093c0 <memset+0x4>

080093cc <__errno>:
 80093cc:	4b01      	ldr	r3, [pc, #4]	; (80093d4 <__errno+0x8>)
 80093ce:	6818      	ldr	r0, [r3, #0]
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	20000074 	.word	0x20000074

080093d8 <__libc_init_array>:
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	4d0d      	ldr	r5, [pc, #52]	; (8009410 <__libc_init_array+0x38>)
 80093dc:	4c0d      	ldr	r4, [pc, #52]	; (8009414 <__libc_init_array+0x3c>)
 80093de:	1b64      	subs	r4, r4, r5
 80093e0:	10a4      	asrs	r4, r4, #2
 80093e2:	2600      	movs	r6, #0
 80093e4:	42a6      	cmp	r6, r4
 80093e6:	d109      	bne.n	80093fc <__libc_init_array+0x24>
 80093e8:	4d0b      	ldr	r5, [pc, #44]	; (8009418 <__libc_init_array+0x40>)
 80093ea:	4c0c      	ldr	r4, [pc, #48]	; (800941c <__libc_init_array+0x44>)
 80093ec:	f000 fc6a 	bl	8009cc4 <_init>
 80093f0:	1b64      	subs	r4, r4, r5
 80093f2:	10a4      	asrs	r4, r4, #2
 80093f4:	2600      	movs	r6, #0
 80093f6:	42a6      	cmp	r6, r4
 80093f8:	d105      	bne.n	8009406 <__libc_init_array+0x2e>
 80093fa:	bd70      	pop	{r4, r5, r6, pc}
 80093fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009400:	4798      	blx	r3
 8009402:	3601      	adds	r6, #1
 8009404:	e7ee      	b.n	80093e4 <__libc_init_array+0xc>
 8009406:	f855 3b04 	ldr.w	r3, [r5], #4
 800940a:	4798      	blx	r3
 800940c:	3601      	adds	r6, #1
 800940e:	e7f2      	b.n	80093f6 <__libc_init_array+0x1e>
 8009410:	0800a104 	.word	0x0800a104
 8009414:	0800a104 	.word	0x0800a104
 8009418:	0800a104 	.word	0x0800a104
 800941c:	0800a108 	.word	0x0800a108

08009420 <__retarget_lock_acquire_recursive>:
 8009420:	4770      	bx	lr

08009422 <__retarget_lock_release_recursive>:
 8009422:	4770      	bx	lr

08009424 <memcpy>:
 8009424:	440a      	add	r2, r1
 8009426:	4291      	cmp	r1, r2
 8009428:	f100 33ff 	add.w	r3, r0, #4294967295
 800942c:	d100      	bne.n	8009430 <memcpy+0xc>
 800942e:	4770      	bx	lr
 8009430:	b510      	push	{r4, lr}
 8009432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800943a:	4291      	cmp	r1, r2
 800943c:	d1f9      	bne.n	8009432 <memcpy+0xe>
 800943e:	bd10      	pop	{r4, pc}

08009440 <_free_r>:
 8009440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009442:	2900      	cmp	r1, #0
 8009444:	d044      	beq.n	80094d0 <_free_r+0x90>
 8009446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800944a:	9001      	str	r0, [sp, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	f1a1 0404 	sub.w	r4, r1, #4
 8009452:	bfb8      	it	lt
 8009454:	18e4      	addlt	r4, r4, r3
 8009456:	f000 f8df 	bl	8009618 <__malloc_lock>
 800945a:	4a1e      	ldr	r2, [pc, #120]	; (80094d4 <_free_r+0x94>)
 800945c:	9801      	ldr	r0, [sp, #4]
 800945e:	6813      	ldr	r3, [r2, #0]
 8009460:	b933      	cbnz	r3, 8009470 <_free_r+0x30>
 8009462:	6063      	str	r3, [r4, #4]
 8009464:	6014      	str	r4, [r2, #0]
 8009466:	b003      	add	sp, #12
 8009468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800946c:	f000 b8da 	b.w	8009624 <__malloc_unlock>
 8009470:	42a3      	cmp	r3, r4
 8009472:	d908      	bls.n	8009486 <_free_r+0x46>
 8009474:	6825      	ldr	r5, [r4, #0]
 8009476:	1961      	adds	r1, r4, r5
 8009478:	428b      	cmp	r3, r1
 800947a:	bf01      	itttt	eq
 800947c:	6819      	ldreq	r1, [r3, #0]
 800947e:	685b      	ldreq	r3, [r3, #4]
 8009480:	1949      	addeq	r1, r1, r5
 8009482:	6021      	streq	r1, [r4, #0]
 8009484:	e7ed      	b.n	8009462 <_free_r+0x22>
 8009486:	461a      	mov	r2, r3
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	b10b      	cbz	r3, 8009490 <_free_r+0x50>
 800948c:	42a3      	cmp	r3, r4
 800948e:	d9fa      	bls.n	8009486 <_free_r+0x46>
 8009490:	6811      	ldr	r1, [r2, #0]
 8009492:	1855      	adds	r5, r2, r1
 8009494:	42a5      	cmp	r5, r4
 8009496:	d10b      	bne.n	80094b0 <_free_r+0x70>
 8009498:	6824      	ldr	r4, [r4, #0]
 800949a:	4421      	add	r1, r4
 800949c:	1854      	adds	r4, r2, r1
 800949e:	42a3      	cmp	r3, r4
 80094a0:	6011      	str	r1, [r2, #0]
 80094a2:	d1e0      	bne.n	8009466 <_free_r+0x26>
 80094a4:	681c      	ldr	r4, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	6053      	str	r3, [r2, #4]
 80094aa:	440c      	add	r4, r1
 80094ac:	6014      	str	r4, [r2, #0]
 80094ae:	e7da      	b.n	8009466 <_free_r+0x26>
 80094b0:	d902      	bls.n	80094b8 <_free_r+0x78>
 80094b2:	230c      	movs	r3, #12
 80094b4:	6003      	str	r3, [r0, #0]
 80094b6:	e7d6      	b.n	8009466 <_free_r+0x26>
 80094b8:	6825      	ldr	r5, [r4, #0]
 80094ba:	1961      	adds	r1, r4, r5
 80094bc:	428b      	cmp	r3, r1
 80094be:	bf04      	itt	eq
 80094c0:	6819      	ldreq	r1, [r3, #0]
 80094c2:	685b      	ldreq	r3, [r3, #4]
 80094c4:	6063      	str	r3, [r4, #4]
 80094c6:	bf04      	itt	eq
 80094c8:	1949      	addeq	r1, r1, r5
 80094ca:	6021      	streq	r1, [r4, #0]
 80094cc:	6054      	str	r4, [r2, #4]
 80094ce:	e7ca      	b.n	8009466 <_free_r+0x26>
 80094d0:	b003      	add	sp, #12
 80094d2:	bd30      	pop	{r4, r5, pc}
 80094d4:	20007258 	.word	0x20007258

080094d8 <sbrk_aligned>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	4e0e      	ldr	r6, [pc, #56]	; (8009514 <sbrk_aligned+0x3c>)
 80094dc:	460c      	mov	r4, r1
 80094de:	6831      	ldr	r1, [r6, #0]
 80094e0:	4605      	mov	r5, r0
 80094e2:	b911      	cbnz	r1, 80094ea <sbrk_aligned+0x12>
 80094e4:	f000 fba6 	bl	8009c34 <_sbrk_r>
 80094e8:	6030      	str	r0, [r6, #0]
 80094ea:	4621      	mov	r1, r4
 80094ec:	4628      	mov	r0, r5
 80094ee:	f000 fba1 	bl	8009c34 <_sbrk_r>
 80094f2:	1c43      	adds	r3, r0, #1
 80094f4:	d00a      	beq.n	800950c <sbrk_aligned+0x34>
 80094f6:	1cc4      	adds	r4, r0, #3
 80094f8:	f024 0403 	bic.w	r4, r4, #3
 80094fc:	42a0      	cmp	r0, r4
 80094fe:	d007      	beq.n	8009510 <sbrk_aligned+0x38>
 8009500:	1a21      	subs	r1, r4, r0
 8009502:	4628      	mov	r0, r5
 8009504:	f000 fb96 	bl	8009c34 <_sbrk_r>
 8009508:	3001      	adds	r0, #1
 800950a:	d101      	bne.n	8009510 <sbrk_aligned+0x38>
 800950c:	f04f 34ff 	mov.w	r4, #4294967295
 8009510:	4620      	mov	r0, r4
 8009512:	bd70      	pop	{r4, r5, r6, pc}
 8009514:	2000725c 	.word	0x2000725c

08009518 <_malloc_r>:
 8009518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800951c:	1ccd      	adds	r5, r1, #3
 800951e:	f025 0503 	bic.w	r5, r5, #3
 8009522:	3508      	adds	r5, #8
 8009524:	2d0c      	cmp	r5, #12
 8009526:	bf38      	it	cc
 8009528:	250c      	movcc	r5, #12
 800952a:	2d00      	cmp	r5, #0
 800952c:	4607      	mov	r7, r0
 800952e:	db01      	blt.n	8009534 <_malloc_r+0x1c>
 8009530:	42a9      	cmp	r1, r5
 8009532:	d905      	bls.n	8009540 <_malloc_r+0x28>
 8009534:	230c      	movs	r3, #12
 8009536:	603b      	str	r3, [r7, #0]
 8009538:	2600      	movs	r6, #0
 800953a:	4630      	mov	r0, r6
 800953c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009540:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009614 <_malloc_r+0xfc>
 8009544:	f000 f868 	bl	8009618 <__malloc_lock>
 8009548:	f8d8 3000 	ldr.w	r3, [r8]
 800954c:	461c      	mov	r4, r3
 800954e:	bb5c      	cbnz	r4, 80095a8 <_malloc_r+0x90>
 8009550:	4629      	mov	r1, r5
 8009552:	4638      	mov	r0, r7
 8009554:	f7ff ffc0 	bl	80094d8 <sbrk_aligned>
 8009558:	1c43      	adds	r3, r0, #1
 800955a:	4604      	mov	r4, r0
 800955c:	d155      	bne.n	800960a <_malloc_r+0xf2>
 800955e:	f8d8 4000 	ldr.w	r4, [r8]
 8009562:	4626      	mov	r6, r4
 8009564:	2e00      	cmp	r6, #0
 8009566:	d145      	bne.n	80095f4 <_malloc_r+0xdc>
 8009568:	2c00      	cmp	r4, #0
 800956a:	d048      	beq.n	80095fe <_malloc_r+0xe6>
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	4631      	mov	r1, r6
 8009570:	4638      	mov	r0, r7
 8009572:	eb04 0903 	add.w	r9, r4, r3
 8009576:	f000 fb5d 	bl	8009c34 <_sbrk_r>
 800957a:	4581      	cmp	r9, r0
 800957c:	d13f      	bne.n	80095fe <_malloc_r+0xe6>
 800957e:	6821      	ldr	r1, [r4, #0]
 8009580:	1a6d      	subs	r5, r5, r1
 8009582:	4629      	mov	r1, r5
 8009584:	4638      	mov	r0, r7
 8009586:	f7ff ffa7 	bl	80094d8 <sbrk_aligned>
 800958a:	3001      	adds	r0, #1
 800958c:	d037      	beq.n	80095fe <_malloc_r+0xe6>
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	442b      	add	r3, r5
 8009592:	6023      	str	r3, [r4, #0]
 8009594:	f8d8 3000 	ldr.w	r3, [r8]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d038      	beq.n	800960e <_malloc_r+0xf6>
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	42a2      	cmp	r2, r4
 80095a0:	d12b      	bne.n	80095fa <_malloc_r+0xe2>
 80095a2:	2200      	movs	r2, #0
 80095a4:	605a      	str	r2, [r3, #4]
 80095a6:	e00f      	b.n	80095c8 <_malloc_r+0xb0>
 80095a8:	6822      	ldr	r2, [r4, #0]
 80095aa:	1b52      	subs	r2, r2, r5
 80095ac:	d41f      	bmi.n	80095ee <_malloc_r+0xd6>
 80095ae:	2a0b      	cmp	r2, #11
 80095b0:	d917      	bls.n	80095e2 <_malloc_r+0xca>
 80095b2:	1961      	adds	r1, r4, r5
 80095b4:	42a3      	cmp	r3, r4
 80095b6:	6025      	str	r5, [r4, #0]
 80095b8:	bf18      	it	ne
 80095ba:	6059      	strne	r1, [r3, #4]
 80095bc:	6863      	ldr	r3, [r4, #4]
 80095be:	bf08      	it	eq
 80095c0:	f8c8 1000 	streq.w	r1, [r8]
 80095c4:	5162      	str	r2, [r4, r5]
 80095c6:	604b      	str	r3, [r1, #4]
 80095c8:	4638      	mov	r0, r7
 80095ca:	f104 060b 	add.w	r6, r4, #11
 80095ce:	f000 f829 	bl	8009624 <__malloc_unlock>
 80095d2:	f026 0607 	bic.w	r6, r6, #7
 80095d6:	1d23      	adds	r3, r4, #4
 80095d8:	1af2      	subs	r2, r6, r3
 80095da:	d0ae      	beq.n	800953a <_malloc_r+0x22>
 80095dc:	1b9b      	subs	r3, r3, r6
 80095de:	50a3      	str	r3, [r4, r2]
 80095e0:	e7ab      	b.n	800953a <_malloc_r+0x22>
 80095e2:	42a3      	cmp	r3, r4
 80095e4:	6862      	ldr	r2, [r4, #4]
 80095e6:	d1dd      	bne.n	80095a4 <_malloc_r+0x8c>
 80095e8:	f8c8 2000 	str.w	r2, [r8]
 80095ec:	e7ec      	b.n	80095c8 <_malloc_r+0xb0>
 80095ee:	4623      	mov	r3, r4
 80095f0:	6864      	ldr	r4, [r4, #4]
 80095f2:	e7ac      	b.n	800954e <_malloc_r+0x36>
 80095f4:	4634      	mov	r4, r6
 80095f6:	6876      	ldr	r6, [r6, #4]
 80095f8:	e7b4      	b.n	8009564 <_malloc_r+0x4c>
 80095fa:	4613      	mov	r3, r2
 80095fc:	e7cc      	b.n	8009598 <_malloc_r+0x80>
 80095fe:	230c      	movs	r3, #12
 8009600:	603b      	str	r3, [r7, #0]
 8009602:	4638      	mov	r0, r7
 8009604:	f000 f80e 	bl	8009624 <__malloc_unlock>
 8009608:	e797      	b.n	800953a <_malloc_r+0x22>
 800960a:	6025      	str	r5, [r4, #0]
 800960c:	e7dc      	b.n	80095c8 <_malloc_r+0xb0>
 800960e:	605b      	str	r3, [r3, #4]
 8009610:	deff      	udf	#255	; 0xff
 8009612:	bf00      	nop
 8009614:	20007258 	.word	0x20007258

08009618 <__malloc_lock>:
 8009618:	4801      	ldr	r0, [pc, #4]	; (8009620 <__malloc_lock+0x8>)
 800961a:	f7ff bf01 	b.w	8009420 <__retarget_lock_acquire_recursive>
 800961e:	bf00      	nop
 8009620:	20007254 	.word	0x20007254

08009624 <__malloc_unlock>:
 8009624:	4801      	ldr	r0, [pc, #4]	; (800962c <__malloc_unlock+0x8>)
 8009626:	f7ff befc 	b.w	8009422 <__retarget_lock_release_recursive>
 800962a:	bf00      	nop
 800962c:	20007254 	.word	0x20007254

08009630 <__ssputs_r>:
 8009630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009634:	688e      	ldr	r6, [r1, #8]
 8009636:	461f      	mov	r7, r3
 8009638:	42be      	cmp	r6, r7
 800963a:	680b      	ldr	r3, [r1, #0]
 800963c:	4682      	mov	sl, r0
 800963e:	460c      	mov	r4, r1
 8009640:	4690      	mov	r8, r2
 8009642:	d82c      	bhi.n	800969e <__ssputs_r+0x6e>
 8009644:	898a      	ldrh	r2, [r1, #12]
 8009646:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800964a:	d026      	beq.n	800969a <__ssputs_r+0x6a>
 800964c:	6965      	ldr	r5, [r4, #20]
 800964e:	6909      	ldr	r1, [r1, #16]
 8009650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009654:	eba3 0901 	sub.w	r9, r3, r1
 8009658:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800965c:	1c7b      	adds	r3, r7, #1
 800965e:	444b      	add	r3, r9
 8009660:	106d      	asrs	r5, r5, #1
 8009662:	429d      	cmp	r5, r3
 8009664:	bf38      	it	cc
 8009666:	461d      	movcc	r5, r3
 8009668:	0553      	lsls	r3, r2, #21
 800966a:	d527      	bpl.n	80096bc <__ssputs_r+0x8c>
 800966c:	4629      	mov	r1, r5
 800966e:	f7ff ff53 	bl	8009518 <_malloc_r>
 8009672:	4606      	mov	r6, r0
 8009674:	b360      	cbz	r0, 80096d0 <__ssputs_r+0xa0>
 8009676:	6921      	ldr	r1, [r4, #16]
 8009678:	464a      	mov	r2, r9
 800967a:	f7ff fed3 	bl	8009424 <memcpy>
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009688:	81a3      	strh	r3, [r4, #12]
 800968a:	6126      	str	r6, [r4, #16]
 800968c:	6165      	str	r5, [r4, #20]
 800968e:	444e      	add	r6, r9
 8009690:	eba5 0509 	sub.w	r5, r5, r9
 8009694:	6026      	str	r6, [r4, #0]
 8009696:	60a5      	str	r5, [r4, #8]
 8009698:	463e      	mov	r6, r7
 800969a:	42be      	cmp	r6, r7
 800969c:	d900      	bls.n	80096a0 <__ssputs_r+0x70>
 800969e:	463e      	mov	r6, r7
 80096a0:	6820      	ldr	r0, [r4, #0]
 80096a2:	4632      	mov	r2, r6
 80096a4:	4641      	mov	r1, r8
 80096a6:	f000 faab 	bl	8009c00 <memmove>
 80096aa:	68a3      	ldr	r3, [r4, #8]
 80096ac:	1b9b      	subs	r3, r3, r6
 80096ae:	60a3      	str	r3, [r4, #8]
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	4433      	add	r3, r6
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	2000      	movs	r0, #0
 80096b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096bc:	462a      	mov	r2, r5
 80096be:	f000 fac9 	bl	8009c54 <_realloc_r>
 80096c2:	4606      	mov	r6, r0
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d1e0      	bne.n	800968a <__ssputs_r+0x5a>
 80096c8:	6921      	ldr	r1, [r4, #16]
 80096ca:	4650      	mov	r0, sl
 80096cc:	f7ff feb8 	bl	8009440 <_free_r>
 80096d0:	230c      	movs	r3, #12
 80096d2:	f8ca 3000 	str.w	r3, [sl]
 80096d6:	89a3      	ldrh	r3, [r4, #12]
 80096d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096dc:	81a3      	strh	r3, [r4, #12]
 80096de:	f04f 30ff 	mov.w	r0, #4294967295
 80096e2:	e7e9      	b.n	80096b8 <__ssputs_r+0x88>

080096e4 <_svfiprintf_r>:
 80096e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e8:	4698      	mov	r8, r3
 80096ea:	898b      	ldrh	r3, [r1, #12]
 80096ec:	061b      	lsls	r3, r3, #24
 80096ee:	b09d      	sub	sp, #116	; 0x74
 80096f0:	4607      	mov	r7, r0
 80096f2:	460d      	mov	r5, r1
 80096f4:	4614      	mov	r4, r2
 80096f6:	d50e      	bpl.n	8009716 <_svfiprintf_r+0x32>
 80096f8:	690b      	ldr	r3, [r1, #16]
 80096fa:	b963      	cbnz	r3, 8009716 <_svfiprintf_r+0x32>
 80096fc:	2140      	movs	r1, #64	; 0x40
 80096fe:	f7ff ff0b 	bl	8009518 <_malloc_r>
 8009702:	6028      	str	r0, [r5, #0]
 8009704:	6128      	str	r0, [r5, #16]
 8009706:	b920      	cbnz	r0, 8009712 <_svfiprintf_r+0x2e>
 8009708:	230c      	movs	r3, #12
 800970a:	603b      	str	r3, [r7, #0]
 800970c:	f04f 30ff 	mov.w	r0, #4294967295
 8009710:	e0d0      	b.n	80098b4 <_svfiprintf_r+0x1d0>
 8009712:	2340      	movs	r3, #64	; 0x40
 8009714:	616b      	str	r3, [r5, #20]
 8009716:	2300      	movs	r3, #0
 8009718:	9309      	str	r3, [sp, #36]	; 0x24
 800971a:	2320      	movs	r3, #32
 800971c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009720:	f8cd 800c 	str.w	r8, [sp, #12]
 8009724:	2330      	movs	r3, #48	; 0x30
 8009726:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80098cc <_svfiprintf_r+0x1e8>
 800972a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800972e:	f04f 0901 	mov.w	r9, #1
 8009732:	4623      	mov	r3, r4
 8009734:	469a      	mov	sl, r3
 8009736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800973a:	b10a      	cbz	r2, 8009740 <_svfiprintf_r+0x5c>
 800973c:	2a25      	cmp	r2, #37	; 0x25
 800973e:	d1f9      	bne.n	8009734 <_svfiprintf_r+0x50>
 8009740:	ebba 0b04 	subs.w	fp, sl, r4
 8009744:	d00b      	beq.n	800975e <_svfiprintf_r+0x7a>
 8009746:	465b      	mov	r3, fp
 8009748:	4622      	mov	r2, r4
 800974a:	4629      	mov	r1, r5
 800974c:	4638      	mov	r0, r7
 800974e:	f7ff ff6f 	bl	8009630 <__ssputs_r>
 8009752:	3001      	adds	r0, #1
 8009754:	f000 80a9 	beq.w	80098aa <_svfiprintf_r+0x1c6>
 8009758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800975a:	445a      	add	r2, fp
 800975c:	9209      	str	r2, [sp, #36]	; 0x24
 800975e:	f89a 3000 	ldrb.w	r3, [sl]
 8009762:	2b00      	cmp	r3, #0
 8009764:	f000 80a1 	beq.w	80098aa <_svfiprintf_r+0x1c6>
 8009768:	2300      	movs	r3, #0
 800976a:	f04f 32ff 	mov.w	r2, #4294967295
 800976e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009772:	f10a 0a01 	add.w	sl, sl, #1
 8009776:	9304      	str	r3, [sp, #16]
 8009778:	9307      	str	r3, [sp, #28]
 800977a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800977e:	931a      	str	r3, [sp, #104]	; 0x68
 8009780:	4654      	mov	r4, sl
 8009782:	2205      	movs	r2, #5
 8009784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009788:	4850      	ldr	r0, [pc, #320]	; (80098cc <_svfiprintf_r+0x1e8>)
 800978a:	f7f6 fd29 	bl	80001e0 <memchr>
 800978e:	9a04      	ldr	r2, [sp, #16]
 8009790:	b9d8      	cbnz	r0, 80097ca <_svfiprintf_r+0xe6>
 8009792:	06d0      	lsls	r0, r2, #27
 8009794:	bf44      	itt	mi
 8009796:	2320      	movmi	r3, #32
 8009798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800979c:	0711      	lsls	r1, r2, #28
 800979e:	bf44      	itt	mi
 80097a0:	232b      	movmi	r3, #43	; 0x2b
 80097a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097a6:	f89a 3000 	ldrb.w	r3, [sl]
 80097aa:	2b2a      	cmp	r3, #42	; 0x2a
 80097ac:	d015      	beq.n	80097da <_svfiprintf_r+0xf6>
 80097ae:	9a07      	ldr	r2, [sp, #28]
 80097b0:	4654      	mov	r4, sl
 80097b2:	2000      	movs	r0, #0
 80097b4:	f04f 0c0a 	mov.w	ip, #10
 80097b8:	4621      	mov	r1, r4
 80097ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097be:	3b30      	subs	r3, #48	; 0x30
 80097c0:	2b09      	cmp	r3, #9
 80097c2:	d94d      	bls.n	8009860 <_svfiprintf_r+0x17c>
 80097c4:	b1b0      	cbz	r0, 80097f4 <_svfiprintf_r+0x110>
 80097c6:	9207      	str	r2, [sp, #28]
 80097c8:	e014      	b.n	80097f4 <_svfiprintf_r+0x110>
 80097ca:	eba0 0308 	sub.w	r3, r0, r8
 80097ce:	fa09 f303 	lsl.w	r3, r9, r3
 80097d2:	4313      	orrs	r3, r2
 80097d4:	9304      	str	r3, [sp, #16]
 80097d6:	46a2      	mov	sl, r4
 80097d8:	e7d2      	b.n	8009780 <_svfiprintf_r+0x9c>
 80097da:	9b03      	ldr	r3, [sp, #12]
 80097dc:	1d19      	adds	r1, r3, #4
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	9103      	str	r1, [sp, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	bfbb      	ittet	lt
 80097e6:	425b      	neglt	r3, r3
 80097e8:	f042 0202 	orrlt.w	r2, r2, #2
 80097ec:	9307      	strge	r3, [sp, #28]
 80097ee:	9307      	strlt	r3, [sp, #28]
 80097f0:	bfb8      	it	lt
 80097f2:	9204      	strlt	r2, [sp, #16]
 80097f4:	7823      	ldrb	r3, [r4, #0]
 80097f6:	2b2e      	cmp	r3, #46	; 0x2e
 80097f8:	d10c      	bne.n	8009814 <_svfiprintf_r+0x130>
 80097fa:	7863      	ldrb	r3, [r4, #1]
 80097fc:	2b2a      	cmp	r3, #42	; 0x2a
 80097fe:	d134      	bne.n	800986a <_svfiprintf_r+0x186>
 8009800:	9b03      	ldr	r3, [sp, #12]
 8009802:	1d1a      	adds	r2, r3, #4
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	9203      	str	r2, [sp, #12]
 8009808:	2b00      	cmp	r3, #0
 800980a:	bfb8      	it	lt
 800980c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009810:	3402      	adds	r4, #2
 8009812:	9305      	str	r3, [sp, #20]
 8009814:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80098dc <_svfiprintf_r+0x1f8>
 8009818:	7821      	ldrb	r1, [r4, #0]
 800981a:	2203      	movs	r2, #3
 800981c:	4650      	mov	r0, sl
 800981e:	f7f6 fcdf 	bl	80001e0 <memchr>
 8009822:	b138      	cbz	r0, 8009834 <_svfiprintf_r+0x150>
 8009824:	9b04      	ldr	r3, [sp, #16]
 8009826:	eba0 000a 	sub.w	r0, r0, sl
 800982a:	2240      	movs	r2, #64	; 0x40
 800982c:	4082      	lsls	r2, r0
 800982e:	4313      	orrs	r3, r2
 8009830:	3401      	adds	r4, #1
 8009832:	9304      	str	r3, [sp, #16]
 8009834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009838:	4825      	ldr	r0, [pc, #148]	; (80098d0 <_svfiprintf_r+0x1ec>)
 800983a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800983e:	2206      	movs	r2, #6
 8009840:	f7f6 fcce 	bl	80001e0 <memchr>
 8009844:	2800      	cmp	r0, #0
 8009846:	d038      	beq.n	80098ba <_svfiprintf_r+0x1d6>
 8009848:	4b22      	ldr	r3, [pc, #136]	; (80098d4 <_svfiprintf_r+0x1f0>)
 800984a:	bb1b      	cbnz	r3, 8009894 <_svfiprintf_r+0x1b0>
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	3307      	adds	r3, #7
 8009850:	f023 0307 	bic.w	r3, r3, #7
 8009854:	3308      	adds	r3, #8
 8009856:	9303      	str	r3, [sp, #12]
 8009858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800985a:	4433      	add	r3, r6
 800985c:	9309      	str	r3, [sp, #36]	; 0x24
 800985e:	e768      	b.n	8009732 <_svfiprintf_r+0x4e>
 8009860:	fb0c 3202 	mla	r2, ip, r2, r3
 8009864:	460c      	mov	r4, r1
 8009866:	2001      	movs	r0, #1
 8009868:	e7a6      	b.n	80097b8 <_svfiprintf_r+0xd4>
 800986a:	2300      	movs	r3, #0
 800986c:	3401      	adds	r4, #1
 800986e:	9305      	str	r3, [sp, #20]
 8009870:	4619      	mov	r1, r3
 8009872:	f04f 0c0a 	mov.w	ip, #10
 8009876:	4620      	mov	r0, r4
 8009878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800987c:	3a30      	subs	r2, #48	; 0x30
 800987e:	2a09      	cmp	r2, #9
 8009880:	d903      	bls.n	800988a <_svfiprintf_r+0x1a6>
 8009882:	2b00      	cmp	r3, #0
 8009884:	d0c6      	beq.n	8009814 <_svfiprintf_r+0x130>
 8009886:	9105      	str	r1, [sp, #20]
 8009888:	e7c4      	b.n	8009814 <_svfiprintf_r+0x130>
 800988a:	fb0c 2101 	mla	r1, ip, r1, r2
 800988e:	4604      	mov	r4, r0
 8009890:	2301      	movs	r3, #1
 8009892:	e7f0      	b.n	8009876 <_svfiprintf_r+0x192>
 8009894:	ab03      	add	r3, sp, #12
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	462a      	mov	r2, r5
 800989a:	4b0f      	ldr	r3, [pc, #60]	; (80098d8 <_svfiprintf_r+0x1f4>)
 800989c:	a904      	add	r1, sp, #16
 800989e:	4638      	mov	r0, r7
 80098a0:	f3af 8000 	nop.w
 80098a4:	1c42      	adds	r2, r0, #1
 80098a6:	4606      	mov	r6, r0
 80098a8:	d1d6      	bne.n	8009858 <_svfiprintf_r+0x174>
 80098aa:	89ab      	ldrh	r3, [r5, #12]
 80098ac:	065b      	lsls	r3, r3, #25
 80098ae:	f53f af2d 	bmi.w	800970c <_svfiprintf_r+0x28>
 80098b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098b4:	b01d      	add	sp, #116	; 0x74
 80098b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ba:	ab03      	add	r3, sp, #12
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	462a      	mov	r2, r5
 80098c0:	4b05      	ldr	r3, [pc, #20]	; (80098d8 <_svfiprintf_r+0x1f4>)
 80098c2:	a904      	add	r1, sp, #16
 80098c4:	4638      	mov	r0, r7
 80098c6:	f000 f879 	bl	80099bc <_printf_i>
 80098ca:	e7eb      	b.n	80098a4 <_svfiprintf_r+0x1c0>
 80098cc:	0800a0c8 	.word	0x0800a0c8
 80098d0:	0800a0d2 	.word	0x0800a0d2
 80098d4:	00000000 	.word	0x00000000
 80098d8:	08009631 	.word	0x08009631
 80098dc:	0800a0ce 	.word	0x0800a0ce

080098e0 <_printf_common>:
 80098e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e4:	4616      	mov	r6, r2
 80098e6:	4699      	mov	r9, r3
 80098e8:	688a      	ldr	r2, [r1, #8]
 80098ea:	690b      	ldr	r3, [r1, #16]
 80098ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098f0:	4293      	cmp	r3, r2
 80098f2:	bfb8      	it	lt
 80098f4:	4613      	movlt	r3, r2
 80098f6:	6033      	str	r3, [r6, #0]
 80098f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098fc:	4607      	mov	r7, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	b10a      	cbz	r2, 8009906 <_printf_common+0x26>
 8009902:	3301      	adds	r3, #1
 8009904:	6033      	str	r3, [r6, #0]
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	0699      	lsls	r1, r3, #26
 800990a:	bf42      	ittt	mi
 800990c:	6833      	ldrmi	r3, [r6, #0]
 800990e:	3302      	addmi	r3, #2
 8009910:	6033      	strmi	r3, [r6, #0]
 8009912:	6825      	ldr	r5, [r4, #0]
 8009914:	f015 0506 	ands.w	r5, r5, #6
 8009918:	d106      	bne.n	8009928 <_printf_common+0x48>
 800991a:	f104 0a19 	add.w	sl, r4, #25
 800991e:	68e3      	ldr	r3, [r4, #12]
 8009920:	6832      	ldr	r2, [r6, #0]
 8009922:	1a9b      	subs	r3, r3, r2
 8009924:	42ab      	cmp	r3, r5
 8009926:	dc26      	bgt.n	8009976 <_printf_common+0x96>
 8009928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800992c:	1e13      	subs	r3, r2, #0
 800992e:	6822      	ldr	r2, [r4, #0]
 8009930:	bf18      	it	ne
 8009932:	2301      	movne	r3, #1
 8009934:	0692      	lsls	r2, r2, #26
 8009936:	d42b      	bmi.n	8009990 <_printf_common+0xb0>
 8009938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800993c:	4649      	mov	r1, r9
 800993e:	4638      	mov	r0, r7
 8009940:	47c0      	blx	r8
 8009942:	3001      	adds	r0, #1
 8009944:	d01e      	beq.n	8009984 <_printf_common+0xa4>
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	6922      	ldr	r2, [r4, #16]
 800994a:	f003 0306 	and.w	r3, r3, #6
 800994e:	2b04      	cmp	r3, #4
 8009950:	bf02      	ittt	eq
 8009952:	68e5      	ldreq	r5, [r4, #12]
 8009954:	6833      	ldreq	r3, [r6, #0]
 8009956:	1aed      	subeq	r5, r5, r3
 8009958:	68a3      	ldr	r3, [r4, #8]
 800995a:	bf0c      	ite	eq
 800995c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009960:	2500      	movne	r5, #0
 8009962:	4293      	cmp	r3, r2
 8009964:	bfc4      	itt	gt
 8009966:	1a9b      	subgt	r3, r3, r2
 8009968:	18ed      	addgt	r5, r5, r3
 800996a:	2600      	movs	r6, #0
 800996c:	341a      	adds	r4, #26
 800996e:	42b5      	cmp	r5, r6
 8009970:	d11a      	bne.n	80099a8 <_printf_common+0xc8>
 8009972:	2000      	movs	r0, #0
 8009974:	e008      	b.n	8009988 <_printf_common+0xa8>
 8009976:	2301      	movs	r3, #1
 8009978:	4652      	mov	r2, sl
 800997a:	4649      	mov	r1, r9
 800997c:	4638      	mov	r0, r7
 800997e:	47c0      	blx	r8
 8009980:	3001      	adds	r0, #1
 8009982:	d103      	bne.n	800998c <_printf_common+0xac>
 8009984:	f04f 30ff 	mov.w	r0, #4294967295
 8009988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800998c:	3501      	adds	r5, #1
 800998e:	e7c6      	b.n	800991e <_printf_common+0x3e>
 8009990:	18e1      	adds	r1, r4, r3
 8009992:	1c5a      	adds	r2, r3, #1
 8009994:	2030      	movs	r0, #48	; 0x30
 8009996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800999a:	4422      	add	r2, r4
 800999c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099a4:	3302      	adds	r3, #2
 80099a6:	e7c7      	b.n	8009938 <_printf_common+0x58>
 80099a8:	2301      	movs	r3, #1
 80099aa:	4622      	mov	r2, r4
 80099ac:	4649      	mov	r1, r9
 80099ae:	4638      	mov	r0, r7
 80099b0:	47c0      	blx	r8
 80099b2:	3001      	adds	r0, #1
 80099b4:	d0e6      	beq.n	8009984 <_printf_common+0xa4>
 80099b6:	3601      	adds	r6, #1
 80099b8:	e7d9      	b.n	800996e <_printf_common+0x8e>
	...

080099bc <_printf_i>:
 80099bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	7e0f      	ldrb	r7, [r1, #24]
 80099c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099c4:	2f78      	cmp	r7, #120	; 0x78
 80099c6:	4691      	mov	r9, r2
 80099c8:	4680      	mov	r8, r0
 80099ca:	460c      	mov	r4, r1
 80099cc:	469a      	mov	sl, r3
 80099ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099d2:	d807      	bhi.n	80099e4 <_printf_i+0x28>
 80099d4:	2f62      	cmp	r7, #98	; 0x62
 80099d6:	d80a      	bhi.n	80099ee <_printf_i+0x32>
 80099d8:	2f00      	cmp	r7, #0
 80099da:	f000 80d4 	beq.w	8009b86 <_printf_i+0x1ca>
 80099de:	2f58      	cmp	r7, #88	; 0x58
 80099e0:	f000 80c0 	beq.w	8009b64 <_printf_i+0x1a8>
 80099e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099ec:	e03a      	b.n	8009a64 <_printf_i+0xa8>
 80099ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099f2:	2b15      	cmp	r3, #21
 80099f4:	d8f6      	bhi.n	80099e4 <_printf_i+0x28>
 80099f6:	a101      	add	r1, pc, #4	; (adr r1, 80099fc <_printf_i+0x40>)
 80099f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099fc:	08009a55 	.word	0x08009a55
 8009a00:	08009a69 	.word	0x08009a69
 8009a04:	080099e5 	.word	0x080099e5
 8009a08:	080099e5 	.word	0x080099e5
 8009a0c:	080099e5 	.word	0x080099e5
 8009a10:	080099e5 	.word	0x080099e5
 8009a14:	08009a69 	.word	0x08009a69
 8009a18:	080099e5 	.word	0x080099e5
 8009a1c:	080099e5 	.word	0x080099e5
 8009a20:	080099e5 	.word	0x080099e5
 8009a24:	080099e5 	.word	0x080099e5
 8009a28:	08009b6d 	.word	0x08009b6d
 8009a2c:	08009a95 	.word	0x08009a95
 8009a30:	08009b27 	.word	0x08009b27
 8009a34:	080099e5 	.word	0x080099e5
 8009a38:	080099e5 	.word	0x080099e5
 8009a3c:	08009b8f 	.word	0x08009b8f
 8009a40:	080099e5 	.word	0x080099e5
 8009a44:	08009a95 	.word	0x08009a95
 8009a48:	080099e5 	.word	0x080099e5
 8009a4c:	080099e5 	.word	0x080099e5
 8009a50:	08009b2f 	.word	0x08009b2f
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	1d1a      	adds	r2, r3, #4
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	602a      	str	r2, [r5, #0]
 8009a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a64:	2301      	movs	r3, #1
 8009a66:	e09f      	b.n	8009ba8 <_printf_i+0x1ec>
 8009a68:	6820      	ldr	r0, [r4, #0]
 8009a6a:	682b      	ldr	r3, [r5, #0]
 8009a6c:	0607      	lsls	r7, r0, #24
 8009a6e:	f103 0104 	add.w	r1, r3, #4
 8009a72:	6029      	str	r1, [r5, #0]
 8009a74:	d501      	bpl.n	8009a7a <_printf_i+0xbe>
 8009a76:	681e      	ldr	r6, [r3, #0]
 8009a78:	e003      	b.n	8009a82 <_printf_i+0xc6>
 8009a7a:	0646      	lsls	r6, r0, #25
 8009a7c:	d5fb      	bpl.n	8009a76 <_printf_i+0xba>
 8009a7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009a82:	2e00      	cmp	r6, #0
 8009a84:	da03      	bge.n	8009a8e <_printf_i+0xd2>
 8009a86:	232d      	movs	r3, #45	; 0x2d
 8009a88:	4276      	negs	r6, r6
 8009a8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a8e:	485a      	ldr	r0, [pc, #360]	; (8009bf8 <_printf_i+0x23c>)
 8009a90:	230a      	movs	r3, #10
 8009a92:	e012      	b.n	8009aba <_printf_i+0xfe>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	6820      	ldr	r0, [r4, #0]
 8009a98:	1d19      	adds	r1, r3, #4
 8009a9a:	6029      	str	r1, [r5, #0]
 8009a9c:	0605      	lsls	r5, r0, #24
 8009a9e:	d501      	bpl.n	8009aa4 <_printf_i+0xe8>
 8009aa0:	681e      	ldr	r6, [r3, #0]
 8009aa2:	e002      	b.n	8009aaa <_printf_i+0xee>
 8009aa4:	0641      	lsls	r1, r0, #25
 8009aa6:	d5fb      	bpl.n	8009aa0 <_printf_i+0xe4>
 8009aa8:	881e      	ldrh	r6, [r3, #0]
 8009aaa:	4853      	ldr	r0, [pc, #332]	; (8009bf8 <_printf_i+0x23c>)
 8009aac:	2f6f      	cmp	r7, #111	; 0x6f
 8009aae:	bf0c      	ite	eq
 8009ab0:	2308      	moveq	r3, #8
 8009ab2:	230a      	movne	r3, #10
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009aba:	6865      	ldr	r5, [r4, #4]
 8009abc:	60a5      	str	r5, [r4, #8]
 8009abe:	2d00      	cmp	r5, #0
 8009ac0:	bfa2      	ittt	ge
 8009ac2:	6821      	ldrge	r1, [r4, #0]
 8009ac4:	f021 0104 	bicge.w	r1, r1, #4
 8009ac8:	6021      	strge	r1, [r4, #0]
 8009aca:	b90e      	cbnz	r6, 8009ad0 <_printf_i+0x114>
 8009acc:	2d00      	cmp	r5, #0
 8009ace:	d04b      	beq.n	8009b68 <_printf_i+0x1ac>
 8009ad0:	4615      	mov	r5, r2
 8009ad2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ad6:	fb03 6711 	mls	r7, r3, r1, r6
 8009ada:	5dc7      	ldrb	r7, [r0, r7]
 8009adc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ae0:	4637      	mov	r7, r6
 8009ae2:	42bb      	cmp	r3, r7
 8009ae4:	460e      	mov	r6, r1
 8009ae6:	d9f4      	bls.n	8009ad2 <_printf_i+0x116>
 8009ae8:	2b08      	cmp	r3, #8
 8009aea:	d10b      	bne.n	8009b04 <_printf_i+0x148>
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	07de      	lsls	r6, r3, #31
 8009af0:	d508      	bpl.n	8009b04 <_printf_i+0x148>
 8009af2:	6923      	ldr	r3, [r4, #16]
 8009af4:	6861      	ldr	r1, [r4, #4]
 8009af6:	4299      	cmp	r1, r3
 8009af8:	bfde      	ittt	le
 8009afa:	2330      	movle	r3, #48	; 0x30
 8009afc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b04:	1b52      	subs	r2, r2, r5
 8009b06:	6122      	str	r2, [r4, #16]
 8009b08:	f8cd a000 	str.w	sl, [sp]
 8009b0c:	464b      	mov	r3, r9
 8009b0e:	aa03      	add	r2, sp, #12
 8009b10:	4621      	mov	r1, r4
 8009b12:	4640      	mov	r0, r8
 8009b14:	f7ff fee4 	bl	80098e0 <_printf_common>
 8009b18:	3001      	adds	r0, #1
 8009b1a:	d14a      	bne.n	8009bb2 <_printf_i+0x1f6>
 8009b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b20:	b004      	add	sp, #16
 8009b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	f043 0320 	orr.w	r3, r3, #32
 8009b2c:	6023      	str	r3, [r4, #0]
 8009b2e:	4833      	ldr	r0, [pc, #204]	; (8009bfc <_printf_i+0x240>)
 8009b30:	2778      	movs	r7, #120	; 0x78
 8009b32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	6829      	ldr	r1, [r5, #0]
 8009b3a:	061f      	lsls	r7, r3, #24
 8009b3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b40:	d402      	bmi.n	8009b48 <_printf_i+0x18c>
 8009b42:	065f      	lsls	r7, r3, #25
 8009b44:	bf48      	it	mi
 8009b46:	b2b6      	uxthmi	r6, r6
 8009b48:	07df      	lsls	r7, r3, #31
 8009b4a:	bf48      	it	mi
 8009b4c:	f043 0320 	orrmi.w	r3, r3, #32
 8009b50:	6029      	str	r1, [r5, #0]
 8009b52:	bf48      	it	mi
 8009b54:	6023      	strmi	r3, [r4, #0]
 8009b56:	b91e      	cbnz	r6, 8009b60 <_printf_i+0x1a4>
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	f023 0320 	bic.w	r3, r3, #32
 8009b5e:	6023      	str	r3, [r4, #0]
 8009b60:	2310      	movs	r3, #16
 8009b62:	e7a7      	b.n	8009ab4 <_printf_i+0xf8>
 8009b64:	4824      	ldr	r0, [pc, #144]	; (8009bf8 <_printf_i+0x23c>)
 8009b66:	e7e4      	b.n	8009b32 <_printf_i+0x176>
 8009b68:	4615      	mov	r5, r2
 8009b6a:	e7bd      	b.n	8009ae8 <_printf_i+0x12c>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	6826      	ldr	r6, [r4, #0]
 8009b70:	6961      	ldr	r1, [r4, #20]
 8009b72:	1d18      	adds	r0, r3, #4
 8009b74:	6028      	str	r0, [r5, #0]
 8009b76:	0635      	lsls	r5, r6, #24
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	d501      	bpl.n	8009b80 <_printf_i+0x1c4>
 8009b7c:	6019      	str	r1, [r3, #0]
 8009b7e:	e002      	b.n	8009b86 <_printf_i+0x1ca>
 8009b80:	0670      	lsls	r0, r6, #25
 8009b82:	d5fb      	bpl.n	8009b7c <_printf_i+0x1c0>
 8009b84:	8019      	strh	r1, [r3, #0]
 8009b86:	2300      	movs	r3, #0
 8009b88:	6123      	str	r3, [r4, #16]
 8009b8a:	4615      	mov	r5, r2
 8009b8c:	e7bc      	b.n	8009b08 <_printf_i+0x14c>
 8009b8e:	682b      	ldr	r3, [r5, #0]
 8009b90:	1d1a      	adds	r2, r3, #4
 8009b92:	602a      	str	r2, [r5, #0]
 8009b94:	681d      	ldr	r5, [r3, #0]
 8009b96:	6862      	ldr	r2, [r4, #4]
 8009b98:	2100      	movs	r1, #0
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f7f6 fb20 	bl	80001e0 <memchr>
 8009ba0:	b108      	cbz	r0, 8009ba6 <_printf_i+0x1ea>
 8009ba2:	1b40      	subs	r0, r0, r5
 8009ba4:	6060      	str	r0, [r4, #4]
 8009ba6:	6863      	ldr	r3, [r4, #4]
 8009ba8:	6123      	str	r3, [r4, #16]
 8009baa:	2300      	movs	r3, #0
 8009bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb0:	e7aa      	b.n	8009b08 <_printf_i+0x14c>
 8009bb2:	6923      	ldr	r3, [r4, #16]
 8009bb4:	462a      	mov	r2, r5
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	4640      	mov	r0, r8
 8009bba:	47d0      	blx	sl
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d0ad      	beq.n	8009b1c <_printf_i+0x160>
 8009bc0:	6823      	ldr	r3, [r4, #0]
 8009bc2:	079b      	lsls	r3, r3, #30
 8009bc4:	d413      	bmi.n	8009bee <_printf_i+0x232>
 8009bc6:	68e0      	ldr	r0, [r4, #12]
 8009bc8:	9b03      	ldr	r3, [sp, #12]
 8009bca:	4298      	cmp	r0, r3
 8009bcc:	bfb8      	it	lt
 8009bce:	4618      	movlt	r0, r3
 8009bd0:	e7a6      	b.n	8009b20 <_printf_i+0x164>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	4632      	mov	r2, r6
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	4640      	mov	r0, r8
 8009bda:	47d0      	blx	sl
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d09d      	beq.n	8009b1c <_printf_i+0x160>
 8009be0:	3501      	adds	r5, #1
 8009be2:	68e3      	ldr	r3, [r4, #12]
 8009be4:	9903      	ldr	r1, [sp, #12]
 8009be6:	1a5b      	subs	r3, r3, r1
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	dcf2      	bgt.n	8009bd2 <_printf_i+0x216>
 8009bec:	e7eb      	b.n	8009bc6 <_printf_i+0x20a>
 8009bee:	2500      	movs	r5, #0
 8009bf0:	f104 0619 	add.w	r6, r4, #25
 8009bf4:	e7f5      	b.n	8009be2 <_printf_i+0x226>
 8009bf6:	bf00      	nop
 8009bf8:	0800a0d9 	.word	0x0800a0d9
 8009bfc:	0800a0ea 	.word	0x0800a0ea

08009c00 <memmove>:
 8009c00:	4288      	cmp	r0, r1
 8009c02:	b510      	push	{r4, lr}
 8009c04:	eb01 0402 	add.w	r4, r1, r2
 8009c08:	d902      	bls.n	8009c10 <memmove+0x10>
 8009c0a:	4284      	cmp	r4, r0
 8009c0c:	4623      	mov	r3, r4
 8009c0e:	d807      	bhi.n	8009c20 <memmove+0x20>
 8009c10:	1e43      	subs	r3, r0, #1
 8009c12:	42a1      	cmp	r1, r4
 8009c14:	d008      	beq.n	8009c28 <memmove+0x28>
 8009c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c1e:	e7f8      	b.n	8009c12 <memmove+0x12>
 8009c20:	4402      	add	r2, r0
 8009c22:	4601      	mov	r1, r0
 8009c24:	428a      	cmp	r2, r1
 8009c26:	d100      	bne.n	8009c2a <memmove+0x2a>
 8009c28:	bd10      	pop	{r4, pc}
 8009c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c32:	e7f7      	b.n	8009c24 <memmove+0x24>

08009c34 <_sbrk_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4d06      	ldr	r5, [pc, #24]	; (8009c50 <_sbrk_r+0x1c>)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	602b      	str	r3, [r5, #0]
 8009c40:	f7f8 fa40 	bl	80020c4 <_sbrk>
 8009c44:	1c43      	adds	r3, r0, #1
 8009c46:	d102      	bne.n	8009c4e <_sbrk_r+0x1a>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	b103      	cbz	r3, 8009c4e <_sbrk_r+0x1a>
 8009c4c:	6023      	str	r3, [r4, #0]
 8009c4e:	bd38      	pop	{r3, r4, r5, pc}
 8009c50:	20007250 	.word	0x20007250

08009c54 <_realloc_r>:
 8009c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c58:	4680      	mov	r8, r0
 8009c5a:	4614      	mov	r4, r2
 8009c5c:	460e      	mov	r6, r1
 8009c5e:	b921      	cbnz	r1, 8009c6a <_realloc_r+0x16>
 8009c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c64:	4611      	mov	r1, r2
 8009c66:	f7ff bc57 	b.w	8009518 <_malloc_r>
 8009c6a:	b92a      	cbnz	r2, 8009c78 <_realloc_r+0x24>
 8009c6c:	f7ff fbe8 	bl	8009440 <_free_r>
 8009c70:	4625      	mov	r5, r4
 8009c72:	4628      	mov	r0, r5
 8009c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c78:	f000 f81b 	bl	8009cb2 <_malloc_usable_size_r>
 8009c7c:	4284      	cmp	r4, r0
 8009c7e:	4607      	mov	r7, r0
 8009c80:	d802      	bhi.n	8009c88 <_realloc_r+0x34>
 8009c82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c86:	d812      	bhi.n	8009cae <_realloc_r+0x5a>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	f7ff fc44 	bl	8009518 <_malloc_r>
 8009c90:	4605      	mov	r5, r0
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d0ed      	beq.n	8009c72 <_realloc_r+0x1e>
 8009c96:	42bc      	cmp	r4, r7
 8009c98:	4622      	mov	r2, r4
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	bf28      	it	cs
 8009c9e:	463a      	movcs	r2, r7
 8009ca0:	f7ff fbc0 	bl	8009424 <memcpy>
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	f7ff fbca 	bl	8009440 <_free_r>
 8009cac:	e7e1      	b.n	8009c72 <_realloc_r+0x1e>
 8009cae:	4635      	mov	r5, r6
 8009cb0:	e7df      	b.n	8009c72 <_realloc_r+0x1e>

08009cb2 <_malloc_usable_size_r>:
 8009cb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cb6:	1f18      	subs	r0, r3, #4
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	bfbc      	itt	lt
 8009cbc:	580b      	ldrlt	r3, [r1, r0]
 8009cbe:	18c0      	addlt	r0, r0, r3
 8009cc0:	4770      	bx	lr
	...

08009cc4 <_init>:
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	bf00      	nop
 8009cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cca:	bc08      	pop	{r3}
 8009ccc:	469e      	mov	lr, r3
 8009cce:	4770      	bx	lr

08009cd0 <_fini>:
 8009cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd2:	bf00      	nop
 8009cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cd6:	bc08      	pop	{r3}
 8009cd8:	469e      	mov	lr, r3
 8009cda:	4770      	bx	lr
