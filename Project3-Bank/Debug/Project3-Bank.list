
Project3-Bank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069d8  080069d8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080069d8  080069d8  000169d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069e0  080069e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069e4  080069e4  000169e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080069e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006854  20000010  080069f8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006864  080069f8  00026864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019adf  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035ba  00000000  00000000  00039b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  0003d120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011fa  00000000  00000000  0003e840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003490  00000000  00000000  0003fa3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019c2b  00000000  00000000  00042eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fca8e  00000000  00000000  0005caf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061d4  00000000  00000000  00159584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0015f758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006850 	.word	0x08006850

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006850 	.word	0x08006850

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <clock_increment>:
	Clock.hour = 9;
	Clock.minute = 0;
	Clock.second = 0;
}

void clock_increment(WallClock Clock){
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Check if second is full, if so then increment
	//minute count and reset second count to 0
	//if minute count full increment hour count and reset minutes to 0
	if(Clock.second >= 59){
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	2b3a      	cmp	r3, #58	; 0x3a
 80004dc:	dd10      	ble.n	8000500 <clock_increment+0x34>
		Clock.second -= 60;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	3b3c      	subs	r3, #60	; 0x3c
 80004e2:	60fb      	str	r3, [r7, #12]
		if(Clock.minute >= 59){
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	2b3a      	cmp	r3, #58	; 0x3a
 80004e8:	dd06      	ble.n	80004f8 <clock_increment+0x2c>
			Clock.minute -= 60;
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	3b3c      	subs	r3, #60	; 0x3c
 80004ee:	60bb      	str	r3, [r7, #8]
			Clock.hour += 1;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
		}
	}
	else{
		Clock.second += 1;
	}
}
 80004f6:	e006      	b.n	8000506 <clock_increment+0x3a>
			Clock.minute += 1;
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	3301      	adds	r3, #1
 80004fc:	60bb      	str	r3, [r7, #8]
}
 80004fe:	e002      	b.n	8000506 <clock_increment+0x3a>
		Clock.second += 1;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	3301      	adds	r3, #1
 8000504:	60fb      	str	r3, [r7, #12]
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb32 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f868 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f932 	bl	8000788 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f900 	bl	8000728 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000528:	f000 f8c8 	bl	80006bc <MX_TIM6_Init>
  MX_RNG_Init();
 800052c:	f000 f8b2 	bl	8000694 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f003 fa88 	bl	8003a44 <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 8000534:	481c      	ldr	r0, [pc, #112]	; (80005a8 <main+0x94>)
 8000536:	f003 fb7c 	bl	8003c32 <osMutexNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a1b      	ldr	r2, [pc, #108]	; (80005ac <main+0x98>)
 800053e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of TELLER */
  TELLERHandle = osMessageQueueNew (64, sizeof(uint64_t), &TELLER_attributes);
 8000540:	4a1b      	ldr	r2, [pc, #108]	; (80005b0 <main+0x9c>)
 8000542:	2108      	movs	r1, #8
 8000544:	2040      	movs	r0, #64	; 0x40
 8000546:	f003 fbfa 	bl	8003d3e <osMessageQueueNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a19      	ldr	r2, [pc, #100]	; (80005b4 <main+0xa0>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of CUSTOMER */
  CUSTOMERHandle = osMessageQueueNew (64, sizeof(uint64_t), &CUSTOMER_attributes);
 8000550:	4a19      	ldr	r2, [pc, #100]	; (80005b8 <main+0xa4>)
 8000552:	2108      	movs	r1, #8
 8000554:	2040      	movs	r0, #64	; 0x40
 8000556:	f003 fbf2 	bl	8003d3e <osMessageQueueNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a17      	ldr	r2, [pc, #92]	; (80005bc <main+0xa8>)
 800055e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tellers */
  TellersHandle = osThreadNew(StartTellers, NULL, &Tellers_attributes);
 8000560:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <main+0xac>)
 8000562:	2100      	movs	r1, #0
 8000564:	4817      	ldr	r0, [pc, #92]	; (80005c4 <main+0xb0>)
 8000566:	f003 fab7 	bl	8003ad8 <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <main+0xb4>)
 800056e:	6013      	str	r3, [r2, #0]

  /* creation of Customers */
  CustomersHandle = osThreadNew(StartCustomers, NULL, &Customers_attributes);
 8000570:	4a16      	ldr	r2, [pc, #88]	; (80005cc <main+0xb8>)
 8000572:	2100      	movs	r1, #0
 8000574:	4816      	ldr	r0, [pc, #88]	; (80005d0 <main+0xbc>)
 8000576:	f003 faaf 	bl	8003ad8 <osThreadNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <main+0xc0>)
 800057e:	6013      	str	r3, [r2, #0]

  /* creation of Clock */
  ClockHandle = osThreadNew(StartClock, NULL, &Clock_attributes);
 8000580:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <main+0xc4>)
 8000582:	2100      	movs	r1, #0
 8000584:	4815      	ldr	r0, [pc, #84]	; (80005dc <main+0xc8>)
 8000586:	f003 faa7 	bl	8003ad8 <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <main+0xcc>)
 800058e:	6013      	str	r3, [r2, #0]

  /* creation of Manager */
  ManagerHandle = osThreadNew(StartManager, NULL, &Manager_attributes);
 8000590:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <main+0xd0>)
 8000592:	2100      	movs	r1, #0
 8000594:	4814      	ldr	r0, [pc, #80]	; (80005e8 <main+0xd4>)
 8000596:	f003 fa9f 	bl	8003ad8 <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <main+0xd8>)
 800059e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a0:	f003 fa74 	bl	8003a8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <main+0x90>
 80005a6:	bf00      	nop
 80005a8:	08006980 	.word	0x08006980
 80005ac:	20000134 	.word	0x20000134
 80005b0:	08006950 	.word	0x08006950
 80005b4:	2000012c 	.word	0x2000012c
 80005b8:	08006968 	.word	0x08006968
 80005bc:	20000130 	.word	0x20000130
 80005c0:	080068c0 	.word	0x080068c0
 80005c4:	08000855 	.word	0x08000855
 80005c8:	2000011c 	.word	0x2000011c
 80005cc:	080068e4 	.word	0x080068e4
 80005d0:	08000865 	.word	0x08000865
 80005d4:	20000120 	.word	0x20000120
 80005d8:	08006908 	.word	0x08006908
 80005dc:	08000875 	.word	0x08000875
 80005e0:	20000124 	.word	0x20000124
 80005e4:	0800692c 	.word	0x0800692c
 80005e8:	08000885 	.word	0x08000885
 80005ec:	20000128 	.word	0x20000128

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f006 f8ec 	bl	80067dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f000 fe11 	bl	800123c <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 f938 	bl	8000894 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2310      	movs	r3, #16
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800063e:	230a      	movs	r3, #10
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000642:	2307      	movs	r3, #7
 8000644:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fe48 	bl	80012e8 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800065e:	f000 f919 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	2104      	movs	r1, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fa10 	bl	8001aa0 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000686:	f000 f905 	bl	8000894 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3758      	adds	r7, #88	; 0x58
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_RNG_Init+0x20>)
 800069a:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <MX_RNG_Init+0x24>)
 800069c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_RNG_Init+0x20>)
 80006a0:	f002 f8de 	bl	8002860 <HAL_RNG_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80006aa:	f000 f8f3 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000038 	.word	0x20000038
 80006b8:	50060800 	.word	0x50060800

080006bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_TIM6_Init+0x64>)
 80006ce:	4a15      	ldr	r2, [pc, #84]	; (8000724 <MX_TIM6_Init+0x68>)
 80006d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 600;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_TIM6_Init+0x64>)
 80006d4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80006d8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_TIM6_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 222;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_TIM6_Init+0x64>)
 80006e2:	22de      	movs	r2, #222	; 0xde
 80006e4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_TIM6_Init+0x64>)
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006ec:	480c      	ldr	r0, [pc, #48]	; (8000720 <MX_TIM6_Init+0x64>)
 80006ee:	f002 f98d 	bl	8002a0c <HAL_TIM_Base_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80006f8:	f000 f8cc 	bl	8000894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_TIM6_Init+0x64>)
 800070a:	f002 fba5 	bl	8002e58 <HAL_TIMEx_MasterConfigSynchronization>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000714:	f000 f8be 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000048 	.word	0x20000048
 8000724:	40001000 	.word	0x40001000

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_USART2_UART_Init+0x58>)
 800072e:	4a15      	ldr	r2, [pc, #84]	; (8000784 <MX_USART2_UART_Init+0x5c>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART2_UART_Init+0x58>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART2_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART2_UART_Init+0x58>)
 800076c:	f002 fc1a 	bl	8002fa4 <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000776:	f000 f88d 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000094 	.word	0x20000094
 8000784:	40004400 	.word	0x40004400

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b2b      	ldr	r3, [pc, #172]	; (800084c <MX_GPIO_Init+0xc4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a2a      	ldr	r2, [pc, #168]	; (800084c <MX_GPIO_Init+0xc4>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <MX_GPIO_Init+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	4b25      	ldr	r3, [pc, #148]	; (800084c <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a24      	ldr	r2, [pc, #144]	; (800084c <MX_GPIO_Init+0xc4>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b22      	ldr	r3, [pc, #136]	; (800084c <MX_GPIO_Init+0xc4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_GPIO_Init+0xc4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a1e      	ldr	r2, [pc, #120]	; (800084c <MX_GPIO_Init+0xc4>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_GPIO_Init+0xc4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_GPIO_Init+0xc4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a18      	ldr	r2, [pc, #96]	; (800084c <MX_GPIO_Init+0xc4>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_GPIO_Init+0xc4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2120      	movs	r1, #32
 8000802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000806:	f000 fcf3 	bl	80011f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800080a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000810:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <MX_GPIO_Init+0xc8>)
 8000822:	f000 fb3b 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000826:	2320      	movs	r3, #32
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000840:	f000 fb2c 	bl	8000e9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	48000800 	.word	0x48000800

08000854 <StartTellers>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTellers */
void StartTellers(void *argument)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Initialize 3 tellers
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f003 f9cd 	bl	8003bfc <osDelay>
 8000862:	e7fb      	b.n	800085c <StartTellers+0x8>

08000864 <StartCustomers>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCustomers */
void StartCustomers(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCustomers */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f003 f9c5 	bl	8003bfc <osDelay>
 8000872:	e7fb      	b.n	800086c <StartCustomers+0x8>

08000874 <StartClock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClock */
void StartClock(void *argument)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartClock */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f003 f9bd 	bl	8003bfc <osDelay>
 8000882:	e7fb      	b.n	800087c <StartClock+0x8>

08000884 <StartManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManager */
void StartManager(void *argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManager */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800088c:	2001      	movs	r0, #1
 800088e:	f003 f9b5 	bl	8003bfc <osDelay>
 8000892:	e7fb      	b.n	800088c <StartManager+0x8>

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_MspInit+0x4c>)
 80008a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008aa:	4a10      	ldr	r2, [pc, #64]	; (80008ec <HAL_MspInit+0x4c>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6613      	str	r3, [r2, #96]	; 0x60
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_MspInit+0x4c>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <HAL_MspInit+0x4c>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <HAL_MspInit+0x4c>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <HAL_MspInit+0x4c>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	210f      	movs	r1, #15
 80008da:	f06f 0001 	mvn.w	r0, #1
 80008de:	f000 faa6 	bl	8000e2e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0a6      	sub	sp, #152	; 0x98
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	2288      	movs	r2, #136	; 0x88
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f005 ff6b 	bl	80067dc <memset>
  if(hrng->Instance==RNG)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a1d      	ldr	r2, [pc, #116]	; (8000980 <HAL_RNG_MspInit+0x90>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d133      	bne.n	8000978 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000910:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000914:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000916:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800091a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800091e:	2302      	movs	r3, #2
 8000920:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000922:	2301      	movs	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000926:	2308      	movs	r3, #8
 8000928:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800092a:	2307      	movs	r3, #7
 800092c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800092e:	2302      	movs	r3, #2
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000932:	2302      	movs	r3, #2
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000936:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fad1 	bl	8001ee8 <HAL_RCCEx_PeriphCLKConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 800094c:	f7ff ffa2 	bl	8000894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_RNG_MspInit+0x94>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000954:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <HAL_RNG_MspInit+0x94>)
 8000956:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800095a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_RNG_MspInit+0x94>)
 800095e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 5, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2105      	movs	r1, #5
 800096c:	2050      	movs	r0, #80	; 0x50
 800096e:	f000 fa5e 	bl	8000e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8000972:	2050      	movs	r0, #80	; 0x50
 8000974:	f000 fa77 	bl	8000e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000978:	bf00      	nop
 800097a:	3798      	adds	r7, #152	; 0x98
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	50060800 	.word	0x50060800
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0d      	ldr	r2, [pc, #52]	; (80009cc <HAL_TIM_Base_MspInit+0x44>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d113      	bne.n	80009c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_TIM_Base_MspInit+0x48>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	4a0c      	ldr	r2, [pc, #48]	; (80009d0 <HAL_TIM_Base_MspInit+0x48>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	6593      	str	r3, [r2, #88]	; 0x58
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_TIM_Base_MspInit+0x48>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	f003 0310 	and.w	r3, r3, #16
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2105      	movs	r1, #5
 80009b6:	2036      	movs	r0, #54	; 0x36
 80009b8:	f000 fa39 	bl	8000e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009bc:	2036      	movs	r0, #54	; 0x36
 80009be:	f000 fa52 	bl	8000e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40001000 	.word	0x40001000
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b0ac      	sub	sp, #176	; 0xb0
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2288      	movs	r2, #136	; 0x88
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f005 fef1 	bl	80067dc <memset>
  if(huart->Instance==USART2)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a21      	ldr	r2, [pc, #132]	; (8000a84 <HAL_UART_MspInit+0xb0>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d13b      	bne.n	8000a7c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fa69 	bl	8001ee8 <HAL_RCCEx_PeriphCLKConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a1c:	f7ff ff3a 	bl	8000894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a20:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a24:	4a18      	ldr	r2, [pc, #96]	; (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3c:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_UART_MspInit+0xb4>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a50:	230c      	movs	r3, #12
 8000a52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a68:	2307      	movs	r3, #7
 8000a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f000 fa10 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	37b0      	adds	r7, #176	; 0xb0
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40004400 	.word	0x40004400
 8000a88:	40021000 	.word	0x40021000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f8bc 	bl	8000c38 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ac0:	f004 fe28 	bl	8005714 <xTaskGetSchedulerState>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d001      	beq.n	8000ace <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000aca:	f005 fc0d 	bl	80062e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	clock_increment(Clock);
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <TIM6_DAC_IRQHandler+0x18>)
 8000ada:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ade:	f7ff fcf5 	bl	80004cc <clock_increment>

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ae2:	4803      	ldr	r0, [pc, #12]	; (8000af0 <TIM6_DAC_IRQHandler+0x1c>)
 8000ae4:	f001 ffe9 	bl	8002aba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000002c 	.word	0x2000002c
 8000af0:	20000048 	.word	0x20000048

08000af4 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <RNG_IRQHandler+0x10>)
 8000afa:	f001 ff08 	bl	800290e <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000038 	.word	0x20000038

08000b08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <SystemInit+0x20>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <SystemInit+0x20>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b30:	f7ff ffea 	bl	8000b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	; (8000b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	; (8000b78 <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f005 fe47 	bl	80067ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5e:	f7ff fcd9 	bl	8000514 <main>

08000b62 <LoopForever>:

LoopForever:
    b LoopForever
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b70:	080069e8 	.word	0x080069e8
  ldr r2, =_sbss
 8000b74:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b78:	20006864 	.word	0x20006864

08000b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC1_2_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_Init+0x3c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <HAL_Init+0x3c>)
 8000b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b96:	2003      	movs	r0, #3
 8000b98:	f000 f93e 	bl	8000e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9c:	200f      	movs	r0, #15
 8000b9e:	f000 f80f 	bl	8000bc0 <HAL_InitTick>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	e001      	b.n	8000bb2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bae:	f7ff fe77 	bl	80008a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40022000 	.word	0x40022000

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_InitTick+0x6c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d023      	beq.n	8000c1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_InitTick+0x70>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_InitTick+0x6c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f949 	bl	8000e82 <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10f      	bne.n	8000c16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	d809      	bhi.n	8000c10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f000 f913 	bl	8000e2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_InitTick+0x74>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e007      	b.n	8000c20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	e004      	b.n	8000c20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	73fb      	strb	r3, [r7, #15]
 8000c1a:	e001      	b.n	8000c20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000000 	.word	0x20000000
 8000c34:	20000004 	.word	0x20000004

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000138 	.word	0x20000138

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000138 	.word	0x20000138

08000c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60d3      	str	r3, [r2, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	db0b      	blt.n	8000d06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f003 021f 	and.w	r2, r3, #31
 8000cf4:	4907      	ldr	r1, [pc, #28]	; (8000d14 <__NVIC_EnableIRQ+0x38>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	095b      	lsrs	r3, r3, #5
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de4:	d301      	bcc.n	8000dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00f      	b.n	8000e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <SysTick_Config+0x40>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df2:	210f      	movs	r1, #15
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f7ff ff8e 	bl	8000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <SysTick_Config+0x40>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SysTick_Config+0x40>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff29 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e40:	f7ff ff3e 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	6978      	ldr	r0, [r7, #20]
 8000e4c:	f7ff ff8e 	bl	8000d6c <NVIC_EncodePriority>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff5d 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff31 	bl	8000cdc <__NVIC_EnableIRQ>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffa2 	bl	8000dd4 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	e17f      	b.n	80011ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 8171 	beq.w	80011a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d005      	beq.n	8000edc <HAL_GPIO_Init+0x40>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d130      	bne.n	8000f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f12:	2201      	movs	r2, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	f003 0201 	and.w	r2, r3, #1
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d118      	bne.n	8000f7c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f50:	2201      	movs	r2, #1
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	08db      	lsrs	r3, r3, #3
 8000f66:	f003 0201 	and.w	r2, r3, #1
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d017      	beq.n	8000fb8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d123      	bne.n	800100c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3208      	adds	r2, #8
 8000fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	6939      	ldr	r1, [r7, #16]
 8001008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0203 	and.w	r2, r3, #3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 80ac 	beq.w	80011a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b5f      	ldr	r3, [pc, #380]	; (80011cc <HAL_GPIO_Init+0x330>)
 8001050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001052:	4a5e      	ldr	r2, [pc, #376]	; (80011cc <HAL_GPIO_Init+0x330>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6613      	str	r3, [r2, #96]	; 0x60
 800105a:	4b5c      	ldr	r3, [pc, #368]	; (80011cc <HAL_GPIO_Init+0x330>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001066:	4a5a      	ldr	r2, [pc, #360]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001090:	d025      	beq.n	80010de <HAL_GPIO_Init+0x242>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4f      	ldr	r2, [pc, #316]	; (80011d4 <HAL_GPIO_Init+0x338>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d01f      	beq.n	80010da <HAL_GPIO_Init+0x23e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4e      	ldr	r2, [pc, #312]	; (80011d8 <HAL_GPIO_Init+0x33c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d019      	beq.n	80010d6 <HAL_GPIO_Init+0x23a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4d      	ldr	r2, [pc, #308]	; (80011dc <HAL_GPIO_Init+0x340>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0x236>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4c      	ldr	r2, [pc, #304]	; (80011e0 <HAL_GPIO_Init+0x344>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00d      	beq.n	80010ce <HAL_GPIO_Init+0x232>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4b      	ldr	r2, [pc, #300]	; (80011e4 <HAL_GPIO_Init+0x348>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x22e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4a      	ldr	r2, [pc, #296]	; (80011e8 <HAL_GPIO_Init+0x34c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_GPIO_Init+0x22a>
 80010c2:	2306      	movs	r3, #6
 80010c4:	e00c      	b.n	80010e0 <HAL_GPIO_Init+0x244>
 80010c6:	2307      	movs	r3, #7
 80010c8:	e00a      	b.n	80010e0 <HAL_GPIO_Init+0x244>
 80010ca:	2305      	movs	r3, #5
 80010cc:	e008      	b.n	80010e0 <HAL_GPIO_Init+0x244>
 80010ce:	2304      	movs	r3, #4
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x244>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e004      	b.n	80010e0 <HAL_GPIO_Init+0x244>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e002      	b.n	80010e0 <HAL_GPIO_Init+0x244>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <HAL_GPIO_Init+0x244>
 80010de:	2300      	movs	r3, #0
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	f002 0203 	and.w	r2, r2, #3
 80010e6:	0092      	lsls	r2, r2, #2
 80010e8:	4093      	lsls	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f0:	4937      	ldr	r1, [pc, #220]	; (80011d0 <HAL_GPIO_Init+0x334>)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3302      	adds	r3, #2
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010fe:	4b3b      	ldr	r3, [pc, #236]	; (80011ec <HAL_GPIO_Init+0x350>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001122:	4a32      	ldr	r2, [pc, #200]	; (80011ec <HAL_GPIO_Init+0x350>)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001128:	4b30      	ldr	r3, [pc, #192]	; (80011ec <HAL_GPIO_Init+0x350>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800114c:	4a27      	ldr	r2, [pc, #156]	; (80011ec <HAL_GPIO_Init+0x350>)
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <HAL_GPIO_Init+0x350>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001176:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <HAL_GPIO_Init+0x350>)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <HAL_GPIO_Init+0x350>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <HAL_GPIO_Init+0x350>)
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa22 f303 	lsr.w	r3, r2, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f47f ae78 	bne.w	8000eac <HAL_GPIO_Init+0x10>
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	371c      	adds	r7, #28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010000 	.word	0x40010000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	48000800 	.word	0x48000800
 80011dc:	48000c00 	.word	0x48000c00
 80011e0:	48001000 	.word	0x48001000
 80011e4:	48001400 	.word	0x48001400
 80011e8:	48001800 	.word	0x48001800
 80011ec:	40010400 	.word	0x40010400

080011f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
 80011fc:	4613      	mov	r3, r2
 80011fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001200:	787b      	ldrb	r3, [r7, #1]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800120c:	e002      	b.n	8001214 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <HAL_PWREx_GetVoltageRange+0x18>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40007000 	.word	0x40007000

0800123c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800124a:	d130      	bne.n	80012ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800124c:	4b23      	ldr	r3, [pc, #140]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001258:	d038      	beq.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001262:	4a1e      	ldr	r2, [pc, #120]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001268:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2232      	movs	r2, #50	; 0x32
 8001270:	fb02 f303 	mul.w	r3, r2, r3
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	0c9b      	lsrs	r3, r3, #18
 800127c:	3301      	adds	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001280:	e002      	b.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3b01      	subs	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001294:	d102      	bne.n	800129c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f2      	bne.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a8:	d110      	bne.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e00f      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ba:	d007      	beq.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c4:	4a05      	ldr	r2, [pc, #20]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40007000 	.word	0x40007000
 80012e0:	20000000 	.word	0x20000000
 80012e4:	431bde83 	.word	0x431bde83

080012e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e3ca      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012fa:	4b97      	ldr	r3, [pc, #604]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001304:	4b94      	ldr	r3, [pc, #592]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 80e4 	beq.w	80014e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <HAL_RCC_OscConfig+0x4a>
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2b0c      	cmp	r3, #12
 8001326:	f040 808b 	bne.w	8001440 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b01      	cmp	r3, #1
 800132e:	f040 8087 	bne.w	8001440 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001332:	4b89      	ldr	r3, [pc, #548]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d005      	beq.n	800134a <HAL_RCC_OscConfig+0x62>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e3a2      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1a      	ldr	r2, [r3, #32]
 800134e:	4b82      	ldr	r3, [pc, #520]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	d004      	beq.n	8001364 <HAL_RCC_OscConfig+0x7c>
 800135a:	4b7f      	ldr	r3, [pc, #508]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001362:	e005      	b.n	8001370 <HAL_RCC_OscConfig+0x88>
 8001364:	4b7c      	ldr	r3, [pc, #496]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001370:	4293      	cmp	r3, r2
 8001372:	d223      	bcs.n	80013bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fd55 	bl	8001e28 <RCC_SetFlashLatencyFromMSIRange>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e383      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001388:	4b73      	ldr	r3, [pc, #460]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a72      	ldr	r2, [pc, #456]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b70      	ldr	r3, [pc, #448]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	496d      	ldr	r1, [pc, #436]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a6:	4b6c      	ldr	r3, [pc, #432]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	4968      	ldr	r1, [pc, #416]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]
 80013ba:	e025      	b.n	8001408 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013bc:	4b66      	ldr	r3, [pc, #408]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a65      	ldr	r2, [pc, #404]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b63      	ldr	r3, [pc, #396]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4960      	ldr	r1, [pc, #384]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013da:	4b5f      	ldr	r3, [pc, #380]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	495b      	ldr	r1, [pc, #364]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d109      	bne.n	8001408 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fd15 	bl	8001e28 <RCC_SetFlashLatencyFromMSIRange>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e343      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001408:	f000 fc4a 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 800140c:	4602      	mov	r2, r0
 800140e:	4b52      	ldr	r3, [pc, #328]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	4950      	ldr	r1, [pc, #320]	; (800155c <HAL_RCC_OscConfig+0x274>)
 800141a:	5ccb      	ldrb	r3, [r1, r3]
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
 8001424:	4a4e      	ldr	r2, [pc, #312]	; (8001560 <HAL_RCC_OscConfig+0x278>)
 8001426:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001428:	4b4e      	ldr	r3, [pc, #312]	; (8001564 <HAL_RCC_OscConfig+0x27c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fbc7 	bl	8000bc0 <HAL_InitTick>
 8001432:	4603      	mov	r3, r0
 8001434:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d052      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	e327      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d032      	beq.n	80014ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001448:	4b43      	ldr	r3, [pc, #268]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a42      	ldr	r2, [pc, #264]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001454:	f7ff fc04 	bl	8000c60 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800145c:	f7ff fc00 	bl	8000c60 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e310      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800146e:	4b3a      	ldr	r3, [pc, #232]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147a:	4b37      	ldr	r3, [pc, #220]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a36      	ldr	r2, [pc, #216]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4931      	ldr	r1, [pc, #196]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001494:	4313      	orrs	r3, r2
 8001496:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001498:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	492c      	ldr	r1, [pc, #176]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
 80014ac:	e01a      	b.n	80014e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a29      	ldr	r2, [pc, #164]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fbd1 	bl	8000c60 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c2:	f7ff fbcd 	bl	8000c60 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e2dd      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x1da>
 80014e0:	e000      	b.n	80014e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d074      	beq.n	80015da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d005      	beq.n	8001502 <HAL_RCC_OscConfig+0x21a>
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2b0c      	cmp	r3, #12
 80014fa:	d10e      	bne.n	800151a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d10b      	bne.n	800151a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d064      	beq.n	80015d8 <HAL_RCC_OscConfig+0x2f0>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d160      	bne.n	80015d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e2ba      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001522:	d106      	bne.n	8001532 <HAL_RCC_OscConfig+0x24a>
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800152a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	e026      	b.n	8001580 <HAL_RCC_OscConfig+0x298>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153a:	d115      	bne.n	8001568 <HAL_RCC_OscConfig+0x280>
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a05      	ldr	r2, [pc, #20]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 8001542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a02      	ldr	r2, [pc, #8]	; (8001558 <HAL_RCC_OscConfig+0x270>)
 800154e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e014      	b.n	8001580 <HAL_RCC_OscConfig+0x298>
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	08006990 	.word	0x08006990
 8001560:	20000000 	.word	0x20000000
 8001564:	20000004 	.word	0x20000004
 8001568:	4ba0      	ldr	r3, [pc, #640]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a9f      	ldr	r2, [pc, #636]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 800156e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b9d      	ldr	r3, [pc, #628]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a9c      	ldr	r2, [pc, #624]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fb6a 	bl	8000c60 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fb66 	bl	8000c60 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	; 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e276      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a2:	4b92      	ldr	r3, [pc, #584]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x2a8>
 80015ae:	e014      	b.n	80015da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fb56 	bl	8000c60 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fb52 	bl	8000c60 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e262      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ca:	4b88      	ldr	r3, [pc, #544]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x2d0>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d060      	beq.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_OscConfig+0x310>
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	d119      	bne.n	8001626 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d116      	bne.n	8001626 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f8:	4b7c      	ldr	r3, [pc, #496]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_OscConfig+0x328>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e23f      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b76      	ldr	r3, [pc, #472]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	061b      	lsls	r3, r3, #24
 800161e:	4973      	ldr	r1, [pc, #460]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001624:	e040      	b.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d023      	beq.n	8001676 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162e:	4b6f      	ldr	r3, [pc, #444]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6e      	ldr	r2, [pc, #440]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fb11 	bl	8000c60 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001642:	f7ff fb0d 	bl	8000c60 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e21d      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001654:	4b65      	ldr	r3, [pc, #404]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	4b62      	ldr	r3, [pc, #392]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	061b      	lsls	r3, r3, #24
 800166e:	495f      	ldr	r1, [pc, #380]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
 8001674:	e018      	b.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001676:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a5c      	ldr	r2, [pc, #368]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 800167c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7ff faed 	bl	8000c60 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff fae9 	bl	8000c60 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e1f9      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d03c      	beq.n	800172e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01c      	beq.n	80016f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016bc:	4b4b      	ldr	r3, [pc, #300]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80016be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c2:	4a4a      	ldr	r2, [pc, #296]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff fac8 	bl	8000c60 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff fac4 	bl	8000c60 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e1d4      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e6:	4b41      	ldr	r3, [pc, #260]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80016e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ef      	beq.n	80016d4 <HAL_RCC_OscConfig+0x3ec>
 80016f4:	e01b      	b.n	800172e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80016f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fc:	4a3b      	ldr	r2, [pc, #236]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001706:	f7ff faab 	bl	8000c60 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170e:	f7ff faa7 	bl	8000c60 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e1b7      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001720:	4b32      	ldr	r3, [pc, #200]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ef      	bne.n	800170e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 80a6 	beq.w	8001888 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001740:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10d      	bne.n	8001768 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	4a26      	ldr	r2, [pc, #152]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 8001752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001756:	6593      	str	r3, [r2, #88]	; 0x58
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001764:	2301      	movs	r3, #1
 8001766:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_RCC_OscConfig+0x508>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d118      	bne.n	80017a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <HAL_RCC_OscConfig+0x508>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <HAL_RCC_OscConfig+0x508>)
 800177a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001780:	f7ff fa6e 	bl	8000c60 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001788:	f7ff fa6a 	bl	8000c60 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e17a      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_RCC_OscConfig+0x508>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d108      	bne.n	80017c0 <HAL_RCC_OscConfig+0x4d8>
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80017b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b4:	4a0d      	ldr	r2, [pc, #52]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017be:	e029      	b.n	8001814 <HAL_RCC_OscConfig+0x52c>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d115      	bne.n	80017f4 <HAL_RCC_OscConfig+0x50c>
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80017ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ce:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	4a03      	ldr	r2, [pc, #12]	; (80017ec <HAL_RCC_OscConfig+0x504>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e8:	e014      	b.n	8001814 <HAL_RCC_OscConfig+0x52c>
 80017ea:	bf00      	nop
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40007000 	.word	0x40007000
 80017f4:	4b9c      	ldr	r3, [pc, #624]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fa:	4a9b      	ldr	r2, [pc, #620]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001804:	4b98      	ldr	r3, [pc, #608]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180a:	4a97      	ldr	r2, [pc, #604]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 800180c:	f023 0304 	bic.w	r3, r3, #4
 8001810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d016      	beq.n	800184a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff fa20 	bl	8000c60 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001822:	e00a      	b.n	800183a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001824:	f7ff fa1c 	bl	8000c60 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e12a      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800183a:	4b8b      	ldr	r3, [pc, #556]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 800183c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ed      	beq.n	8001824 <HAL_RCC_OscConfig+0x53c>
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7ff fa09 	bl	8000c60 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff fa05 	bl	8000c60 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e113      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001868:	4b7f      	ldr	r3, [pc, #508]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 800186a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1ed      	bne.n	8001852 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001876:	7ffb      	ldrb	r3, [r7, #31]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d105      	bne.n	8001888 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187c:	4b7a      	ldr	r3, [pc, #488]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 800187e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001880:	4a79      	ldr	r2, [pc, #484]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001886:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80fe 	beq.w	8001a8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	2b02      	cmp	r3, #2
 8001898:	f040 80d0 	bne.w	8001a3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800189c:	4b72      	ldr	r3, [pc, #456]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0203 	and.w	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d130      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	3b01      	subs	r3, #1
 80018bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d127      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d11f      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018dc:	2a07      	cmp	r2, #7
 80018de:	bf14      	ite	ne
 80018e0:	2201      	movne	r2, #1
 80018e2:	2200      	moveq	r2, #0
 80018e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d113      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	3b01      	subs	r3, #1
 80018f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d109      	bne.n	8001912 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	085b      	lsrs	r3, r3, #1
 800190a:	3b01      	subs	r3, #1
 800190c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d06e      	beq.n	80019f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b0c      	cmp	r3, #12
 8001916:	d069      	beq.n	80019ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001918:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d105      	bne.n	8001930 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0ad      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001934:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a4b      	ldr	r2, [pc, #300]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 800193a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001940:	f7ff f98e 	bl	8000c60 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff f98a 	bl	8000c60 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e09a      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195a:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001966:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <HAL_RCC_OscConfig+0x784>)
 800196c:	4013      	ands	r3, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001976:	3a01      	subs	r2, #1
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	4311      	orrs	r1, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001980:	0212      	lsls	r2, r2, #8
 8001982:	4311      	orrs	r1, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001988:	0852      	lsrs	r2, r2, #1
 800198a:	3a01      	subs	r2, #1
 800198c:	0552      	lsls	r2, r2, #21
 800198e:	4311      	orrs	r1, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001994:	0852      	lsrs	r2, r2, #1
 8001996:	3a01      	subs	r2, #1
 8001998:	0652      	lsls	r2, r2, #25
 800199a:	4311      	orrs	r1, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019a0:	0912      	lsrs	r2, r2, #4
 80019a2:	0452      	lsls	r2, r2, #17
 80019a4:	430a      	orrs	r2, r1
 80019a6:	4930      	ldr	r1, [pc, #192]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a2d      	ldr	r2, [pc, #180]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4a2a      	ldr	r2, [pc, #168]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019c4:	f7ff f94c 	bl	8000c60 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff f948 	bl	8000c60 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e058      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ea:	e050      	b.n	8001a8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e04f      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f0:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d148      	bne.n	8001a8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4a16      	ldr	r2, [pc, #88]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a14:	f7ff f924 	bl	8000c60 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff f920 	bl	8000c60 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e030      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x734>
 8001a3a:	e028      	b.n	8001a8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	d023      	beq.n	8001a8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <HAL_RCC_OscConfig+0x780>)
 8001a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff f907 	bl	8000c60 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a54:	e00c      	b.n	8001a70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a56:	f7ff f903 	bl	8000c60 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d905      	bls.n	8001a70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e013      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_RCC_OscConfig+0x7b0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ec      	bne.n	8001a56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_RCC_OscConfig+0x7b0>)
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	4905      	ldr	r1, [pc, #20]	; (8001a98 <HAL_RCC_OscConfig+0x7b0>)
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_RCC_OscConfig+0x7b4>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
 8001a88:	e001      	b.n	8001a8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	feeefffc 	.word	0xfeeefffc

08001aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0e7      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b75      	ldr	r3, [pc, #468]	; (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d910      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b72      	ldr	r3, [pc, #456]	; (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 0207 	bic.w	r2, r3, #7
 8001aca:	4970      	ldr	r1, [pc, #448]	; (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b6e      	ldr	r3, [pc, #440]	; (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0cf      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d010      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	4b66      	ldr	r3, [pc, #408]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d908      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b00:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4960      	ldr	r1, [pc, #384]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d04c      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b26:	4b5a      	ldr	r3, [pc, #360]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d121      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0a6      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3e:	4b54      	ldr	r3, [pc, #336]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d115      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e09a      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b56:	4b4e      	ldr	r3, [pc, #312]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e08e      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b66:	4b4a      	ldr	r3, [pc, #296]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e086      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b76:	4b46      	ldr	r3, [pc, #280]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 0203 	bic.w	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4943      	ldr	r1, [pc, #268]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b88:	f7ff f86a 	bl	8000c60 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b90:	f7ff f866 	bl	8000c60 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e06e      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba6:	4b3a      	ldr	r3, [pc, #232]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 020c 	and.w	r2, r3, #12
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1eb      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d010      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	4b31      	ldr	r3, [pc, #196]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d208      	bcs.n	8001be6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd4:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	492b      	ldr	r1, [pc, #172]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d210      	bcs.n	8001c16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f023 0207 	bic.w	r2, r3, #7
 8001bfc:	4923      	ldr	r1, [pc, #140]	; (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <HAL_RCC_ClockConfig+0x1ec>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e036      	b.n	8001c84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d008      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c22:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	4918      	ldr	r1, [pc, #96]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d009      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4910      	ldr	r1, [pc, #64]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c54:	f000 f824 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	490b      	ldr	r1, [pc, #44]	; (8001c94 <HAL_RCC_ClockConfig+0x1f4>)
 8001c66:	5ccb      	ldrb	r3, [r1, r3]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c70:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <HAL_RCC_ClockConfig+0x1f8>)
 8001c72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_RCC_ClockConfig+0x1fc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe ffa1 	bl	8000bc0 <HAL_InitTick>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c82:	7afb      	ldrb	r3, [r7, #11]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40022000 	.word	0x40022000
 8001c90:	40021000 	.word	0x40021000
 8001c94:	08006990 	.word	0x08006990
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000004 	.word	0x20000004

08001ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cae:	4b3e      	ldr	r3, [pc, #248]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb8:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	d121      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d11e      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cd4:	4b34      	ldr	r3, [pc, #208]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ce0:	4b31      	ldr	r3, [pc, #196]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	e005      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cfc:	4a2b      	ldr	r2, [pc, #172]	; (8001dac <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10d      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d102      	bne.n	8001d1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	e004      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d24:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d134      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d003      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d003      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0xac>
 8001d44:	e005      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d48:	617b      	str	r3, [r7, #20]
      break;
 8001d4a:	e005      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d4e:	617b      	str	r3, [r7, #20]
      break;
 8001d50:	e002      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	617b      	str	r3, [r7, #20]
      break;
 8001d56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d58:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	3301      	adds	r3, #1
 8001d64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	0a1b      	lsrs	r3, r3, #8
 8001d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	fb03 f202 	mul.w	r2, r3, r2
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	0e5b      	lsrs	r3, r3, #25
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	3301      	adds	r3, #1
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d98:	69bb      	ldr	r3, [r7, #24]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	; 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	080069a8 	.word	0x080069a8
 8001db0:	00f42400 	.word	0x00f42400
 8001db4:	007a1200 	.word	0x007a1200

08001db8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dd4:	f7ff fff0 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0a1b      	lsrs	r3, r3, #8
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4904      	ldr	r1, [pc, #16]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	080069a0 	.word	0x080069a0

08001dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e00:	f7ff ffda 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	0adb      	lsrs	r3, r3, #11
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	4904      	ldr	r1, [pc, #16]	; (8001e24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e12:	5ccb      	ldrb	r3, [r1, r3]
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000
 8001e24:	080069a0 	.word	0x080069a0

08001e28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e40:	f7ff f9ee 	bl	8001220 <HAL_PWREx_GetVoltageRange>
 8001e44:	6178      	str	r0, [r7, #20]
 8001e46:	e014      	b.n	8001e72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	4a24      	ldr	r2, [pc, #144]	; (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e52:	6593      	str	r3, [r2, #88]	; 0x58
 8001e54:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e60:	f7ff f9de 	bl	8001220 <HAL_PWREx_GetVoltageRange>
 8001e64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e78:	d10b      	bne.n	8001e92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b80      	cmp	r3, #128	; 0x80
 8001e7e:	d919      	bls.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2ba0      	cmp	r3, #160	; 0xa0
 8001e84:	d902      	bls.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e86:	2302      	movs	r3, #2
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	e013      	b.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	e010      	b.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b80      	cmp	r3, #128	; 0x80
 8001e96:	d902      	bls.n	8001e9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e98:	2303      	movs	r3, #3
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	e00a      	b.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b80      	cmp	r3, #128	; 0x80
 8001ea2:	d102      	bne.n	8001eaa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	e004      	b.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b70      	cmp	r3, #112	; 0x70
 8001eae:	d101      	bne.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 0207 	bic.w	r2, r3, #7
 8001ebc:	4909      	ldr	r1, [pc, #36]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d001      	beq.n	8001ed6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40022000 	.word	0x40022000

08001ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d041      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f0c:	d02a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f12:	d824      	bhi.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f18:	d008      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f1e:	d81e      	bhi.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00a      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f28:	d010      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f2a:	e018      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f2c:	4b86      	ldr	r3, [pc, #536]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4a85      	ldr	r2, [pc, #532]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f36:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f38:	e015      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fabb 	bl	80024bc <RCCEx_PLLSAI1_Config>
 8001f46:	4603      	mov	r3, r0
 8001f48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f4a:	e00c      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3320      	adds	r3, #32
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fba6 	bl	80026a4 <RCCEx_PLLSAI2_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f5c:	e003      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	74fb      	strb	r3, [r7, #19]
      break;
 8001f62:	e000      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f66:	7cfb      	ldrb	r3, [r7, #19]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10b      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f6c:	4b76      	ldr	r3, [pc, #472]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f7a:	4973      	ldr	r1, [pc, #460]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f82:	e001      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d041      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f9c:	d02a      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fa2:	d824      	bhi.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fa8:	d008      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fae:	d81e      	bhi.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb8:	d010      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fba:	e018      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fbc:	4b62      	ldr	r3, [pc, #392]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a61      	ldr	r2, [pc, #388]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fc8:	e015      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fa73 	bl	80024bc <RCCEx_PLLSAI1_Config>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fda:	e00c      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3320      	adds	r3, #32
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fb5e 	bl	80026a4 <RCCEx_PLLSAI2_Config>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fec:	e003      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ff6:	7cfb      	ldrb	r3, [r7, #19]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10b      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ffc:	4b52      	ldr	r3, [pc, #328]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800200a:	494f      	ldr	r1, [pc, #316]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002012:	e001      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80a0 	beq.w	8002166 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800202a:	4b47      	ldr	r3, [pc, #284]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800203a:	2300      	movs	r3, #0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00d      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002040:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	4a40      	ldr	r2, [pc, #256]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204a:	6593      	str	r3, [r2, #88]	; 0x58
 800204c:	4b3e      	ldr	r3, [pc, #248]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002058:	2301      	movs	r3, #1
 800205a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800205c:	4b3b      	ldr	r3, [pc, #236]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a3a      	ldr	r2, [pc, #232]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002066:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002068:	f7fe fdfa 	bl	8000c60 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800206e:	e009      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002070:	f7fe fdf6 	bl	8000c60 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d902      	bls.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	74fb      	strb	r3, [r7, #19]
        break;
 8002082:	e005      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002084:	4b31      	ldr	r3, [pc, #196]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0ef      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d15c      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01f      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d019      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020c0:	4b21      	ldr	r3, [pc, #132]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c6:	4a20      	ldr	r2, [pc, #128]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d6:	4a1c      	ldr	r2, [pc, #112]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020e0:	4a19      	ldr	r2, [pc, #100]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7fe fdb5 	bl	8000c60 <HAL_GetTick>
 80020f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f8:	e00b      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7fe fdb1 	bl	8000c60 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d902      	bls.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	74fb      	strb	r3, [r7, #19]
            break;
 8002110:	e006      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0ec      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10c      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002136:	4904      	ldr	r1, [pc, #16]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800213e:	e009      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	74bb      	strb	r3, [r7, #18]
 8002144:	e006      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002154:	7c7b      	ldrb	r3, [r7, #17]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b9e      	ldr	r3, [pc, #632]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	4a9d      	ldr	r2, [pc, #628]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002164:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002172:	4b98      	ldr	r3, [pc, #608]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002178:	f023 0203 	bic.w	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	4994      	ldr	r1, [pc, #592]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002194:	4b8f      	ldr	r3, [pc, #572]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	f023 020c 	bic.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a2:	498c      	ldr	r1, [pc, #560]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021b6:	4b87      	ldr	r3, [pc, #540]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	4983      	ldr	r1, [pc, #524]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021d8:	4b7e      	ldr	r3, [pc, #504]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	497b      	ldr	r1, [pc, #492]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021fa:	4b76      	ldr	r3, [pc, #472]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002208:	4972      	ldr	r1, [pc, #456]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800221c:	4b6d      	ldr	r3, [pc, #436]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	496a      	ldr	r1, [pc, #424]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800223e:	4b65      	ldr	r3, [pc, #404]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002244:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	4961      	ldr	r1, [pc, #388]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002260:	4b5c      	ldr	r3, [pc, #368]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226e:	4959      	ldr	r1, [pc, #356]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002282:	4b54      	ldr	r3, [pc, #336]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002290:	4950      	ldr	r1, [pc, #320]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022a4:	4b4b      	ldr	r3, [pc, #300]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b2:	4948      	ldr	r1, [pc, #288]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022c6:	4b43      	ldr	r3, [pc, #268]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	493f      	ldr	r1, [pc, #252]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d028      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022e8:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022f6:	4937      	ldr	r1, [pc, #220]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002306:	d106      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002308:	4b32      	ldr	r3, [pc, #200]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a31      	ldr	r2, [pc, #196]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002312:	60d3      	str	r3, [r2, #12]
 8002314:	e011      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800231a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800231e:	d10c      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3304      	adds	r3, #4
 8002324:	2101      	movs	r1, #1
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f8c8 	bl	80024bc <RCCEx_PLLSAI1_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d028      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002346:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	491f      	ldr	r1, [pc, #124]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002364:	d106      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002366:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002370:	60d3      	str	r3, [r2, #12]
 8002372:	e011      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002378:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800237c:	d10c      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3304      	adds	r3, #4
 8002382:	2101      	movs	r1, #1
 8002384:	4618      	mov	r0, r3
 8002386:	f000 f899 	bl	80024bc <RCCEx_PLLSAI1_Config>
 800238a:	4603      	mov	r3, r0
 800238c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002394:	7cfb      	ldrb	r3, [r7, #19]
 8002396:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d02b      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b2:	4908      	ldr	r1, [pc, #32]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c2:	d109      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a02      	ldr	r2, [pc, #8]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ce:	60d3      	str	r3, [r2, #12]
 80023d0:	e014      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2101      	movs	r1, #1
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 f867 	bl	80024bc <RCCEx_PLLSAI1_Config>
 80023ee:	4603      	mov	r3, r0
 80023f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d02f      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002416:	4928      	ldr	r1, [pc, #160]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002426:	d10d      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	2102      	movs	r1, #2
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f844 	bl	80024bc <RCCEx_PLLSAI1_Config>
 8002434:	4603      	mov	r3, r0
 8002436:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d014      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	74bb      	strb	r3, [r7, #18]
 8002442:	e011      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800244c:	d10c      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3320      	adds	r3, #32
 8002452:	2102      	movs	r1, #2
 8002454:	4618      	mov	r0, r3
 8002456:	f000 f925 	bl	80026a4 <RCCEx_PLLSAI2_Config>
 800245a:	4603      	mov	r3, r0
 800245c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002464:	7cfb      	ldrb	r3, [r7, #19]
 8002466:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002474:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002482:	490d      	ldr	r1, [pc, #52]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00b      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024a6:	4904      	ldr	r1, [pc, #16]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000

080024bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ca:	4b75      	ldr	r3, [pc, #468]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d018      	beq.n	8002508 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024d6:	4b72      	ldr	r3, [pc, #456]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0203 	and.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d10d      	bne.n	8002502 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
       ||
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024ee:	4b6c      	ldr	r3, [pc, #432]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
       ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d047      	beq.n	8002592 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	e044      	b.n	8002592 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d018      	beq.n	8002542 <RCCEx_PLLSAI1_Config+0x86>
 8002510:	2b03      	cmp	r3, #3
 8002512:	d825      	bhi.n	8002560 <RCCEx_PLLSAI1_Config+0xa4>
 8002514:	2b01      	cmp	r3, #1
 8002516:	d002      	beq.n	800251e <RCCEx_PLLSAI1_Config+0x62>
 8002518:	2b02      	cmp	r3, #2
 800251a:	d009      	beq.n	8002530 <RCCEx_PLLSAI1_Config+0x74>
 800251c:	e020      	b.n	8002560 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800251e:	4b60      	ldr	r3, [pc, #384]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d11d      	bne.n	8002566 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800252e:	e01a      	b.n	8002566 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002530:	4b5b      	ldr	r3, [pc, #364]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002538:	2b00      	cmp	r3, #0
 800253a:	d116      	bne.n	800256a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002540:	e013      	b.n	800256a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002542:	4b57      	ldr	r3, [pc, #348]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10f      	bne.n	800256e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800254e:	4b54      	ldr	r3, [pc, #336]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800255e:	e006      	b.n	800256e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
      break;
 8002564:	e004      	b.n	8002570 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002566:	bf00      	nop
 8002568:	e002      	b.n	8002570 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800256a:	bf00      	nop
 800256c:	e000      	b.n	8002570 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800256e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10d      	bne.n	8002592 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002576:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6819      	ldr	r1, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	430b      	orrs	r3, r1
 800258c:	4944      	ldr	r1, [pc, #272]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d17d      	bne.n	8002694 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002598:	4b41      	ldr	r3, [pc, #260]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a40      	ldr	r2, [pc, #256]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a4:	f7fe fb5c 	bl	8000c60 <HAL_GetTick>
 80025a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025aa:	e009      	b.n	80025c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025ac:	f7fe fb58 	bl	8000c60 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d902      	bls.n	80025c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	73fb      	strb	r3, [r7, #15]
        break;
 80025be:	e005      	b.n	80025cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025c0:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1ef      	bne.n	80025ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d160      	bne.n	8002694 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d111      	bne.n	80025fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025d8:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6892      	ldr	r2, [r2, #8]
 80025e8:	0211      	lsls	r1, r2, #8
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68d2      	ldr	r2, [r2, #12]
 80025ee:	0912      	lsrs	r2, r2, #4
 80025f0:	0452      	lsls	r2, r2, #17
 80025f2:	430a      	orrs	r2, r1
 80025f4:	492a      	ldr	r1, [pc, #168]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	610b      	str	r3, [r1, #16]
 80025fa:	e027      	b.n	800264c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d112      	bne.n	8002628 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002602:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800260a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6892      	ldr	r2, [r2, #8]
 8002612:	0211      	lsls	r1, r2, #8
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6912      	ldr	r2, [r2, #16]
 8002618:	0852      	lsrs	r2, r2, #1
 800261a:	3a01      	subs	r2, #1
 800261c:	0552      	lsls	r2, r2, #21
 800261e:	430a      	orrs	r2, r1
 8002620:	491f      	ldr	r1, [pc, #124]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	610b      	str	r3, [r1, #16]
 8002626:	e011      	b.n	800264c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002628:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002630:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6892      	ldr	r2, [r2, #8]
 8002638:	0211      	lsls	r1, r2, #8
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6952      	ldr	r2, [r2, #20]
 800263e:	0852      	lsrs	r2, r2, #1
 8002640:	3a01      	subs	r2, #1
 8002642:	0652      	lsls	r2, r2, #25
 8002644:	430a      	orrs	r2, r1
 8002646:	4916      	ldr	r1, [pc, #88]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002648:	4313      	orrs	r3, r2
 800264a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002652:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002656:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7fe fb02 	bl	8000c60 <HAL_GetTick>
 800265c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800265e:	e009      	b.n	8002674 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002660:	f7fe fafe 	bl	8000c60 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d902      	bls.n	8002674 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	73fb      	strb	r3, [r7, #15]
          break;
 8002672:	e005      	b.n	8002680 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ef      	beq.n	8002660 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	4904      	ldr	r1, [pc, #16]	; (80026a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002690:	4313      	orrs	r3, r2
 8002692:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000

080026a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026b2:	4b6a      	ldr	r3, [pc, #424]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d018      	beq.n	80026f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026be:	4b67      	ldr	r3, [pc, #412]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0203 	and.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d10d      	bne.n	80026ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
       ||
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026d6:	4b61      	ldr	r3, [pc, #388]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
       ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d047      	beq.n	800277a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
 80026ee:	e044      	b.n	800277a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d018      	beq.n	800272a <RCCEx_PLLSAI2_Config+0x86>
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d825      	bhi.n	8002748 <RCCEx_PLLSAI2_Config+0xa4>
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d002      	beq.n	8002706 <RCCEx_PLLSAI2_Config+0x62>
 8002700:	2b02      	cmp	r3, #2
 8002702:	d009      	beq.n	8002718 <RCCEx_PLLSAI2_Config+0x74>
 8002704:	e020      	b.n	8002748 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002706:	4b55      	ldr	r3, [pc, #340]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d11d      	bne.n	800274e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002716:	e01a      	b.n	800274e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002718:	4b50      	ldr	r3, [pc, #320]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002720:	2b00      	cmp	r3, #0
 8002722:	d116      	bne.n	8002752 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002728:	e013      	b.n	8002752 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800272a:	4b4c      	ldr	r3, [pc, #304]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10f      	bne.n	8002756 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002736:	4b49      	ldr	r3, [pc, #292]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002746:	e006      	b.n	8002756 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
      break;
 800274c:	e004      	b.n	8002758 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800274e:	bf00      	nop
 8002750:	e002      	b.n	8002758 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002752:	bf00      	nop
 8002754:	e000      	b.n	8002758 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002756:	bf00      	nop
    }

    if(status == HAL_OK)
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10d      	bne.n	800277a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800275e:	4b3f      	ldr	r3, [pc, #252]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6819      	ldr	r1, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	430b      	orrs	r3, r1
 8002774:	4939      	ldr	r1, [pc, #228]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002776:	4313      	orrs	r3, r2
 8002778:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d167      	bne.n	8002850 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002780:	4b36      	ldr	r3, [pc, #216]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a35      	ldr	r2, [pc, #212]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800278c:	f7fe fa68 	bl	8000c60 <HAL_GetTick>
 8002790:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002792:	e009      	b.n	80027a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002794:	f7fe fa64 	bl	8000c60 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d902      	bls.n	80027a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	73fb      	strb	r3, [r7, #15]
        break;
 80027a6:	e005      	b.n	80027b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027a8:	4b2c      	ldr	r3, [pc, #176]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1ef      	bne.n	8002794 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d14a      	bne.n	8002850 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d111      	bne.n	80027e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027c0:	4b26      	ldr	r3, [pc, #152]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6892      	ldr	r2, [r2, #8]
 80027d0:	0211      	lsls	r1, r2, #8
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68d2      	ldr	r2, [r2, #12]
 80027d6:	0912      	lsrs	r2, r2, #4
 80027d8:	0452      	lsls	r2, r2, #17
 80027da:	430a      	orrs	r2, r1
 80027dc:	491f      	ldr	r1, [pc, #124]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	614b      	str	r3, [r1, #20]
 80027e2:	e011      	b.n	8002808 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6892      	ldr	r2, [r2, #8]
 80027f4:	0211      	lsls	r1, r2, #8
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6912      	ldr	r2, [r2, #16]
 80027fa:	0852      	lsrs	r2, r2, #1
 80027fc:	3a01      	subs	r2, #1
 80027fe:	0652      	lsls	r2, r2, #25
 8002800:	430a      	orrs	r2, r1
 8002802:	4916      	ldr	r1, [pc, #88]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002804:	4313      	orrs	r3, r2
 8002806:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a13      	ldr	r2, [pc, #76]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 800280e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002812:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7fe fa24 	bl	8000c60 <HAL_GetTick>
 8002818:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800281a:	e009      	b.n	8002830 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800281c:	f7fe fa20 	bl	8000c60 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d902      	bls.n	8002830 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	73fb      	strb	r3, [r7, #15]
          break;
 800282e:	e005      	b.n	800283c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0ef      	beq.n	800281c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	4904      	ldr	r1, [pc, #16]	; (800285c <RCCEx_PLLSAI2_Config+0x1b8>)
 800284c:	4313      	orrs	r3, r2
 800284e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002850:	7bfb      	ldrb	r3, [r7, #15]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000

08002860 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e049      	b.n	8002906 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	795b      	ldrb	r3, [r3, #5]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe f834 	bl	80008f0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0204 	orr.w	r2, r2, #4
 800289c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d104      	bne.n	80028b6 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2204      	movs	r2, #4
 80028b0:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e027      	b.n	8002906 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80028b6:	f7fe f9d3 	bl	8000c60 <HAL_GetTick>
 80028ba:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80028bc:	e015      	b.n	80028ea <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80028be:	f7fe f9cf 	bl	8000c60 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d90e      	bls.n	80028ea <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d107      	bne.n	80028ea <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2204      	movs	r2, #4
 80028de:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00d      	b.n	8002906 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d0e2      	beq.n	80028be <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2210      	movs	r2, #16
 8002930:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8002932:	2301      	movs	r3, #1
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	e01f      	b.n	8002978 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01a      	beq.n	8002978 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d108      	bne.n	800295e <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	e00c      	b.n	8002978 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2208      	movs	r2, #8
 8002962:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 8002964:	2301      	movs	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0208 	bic.w	r2, r2, #8
 8002976:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d10b      	bne.n	8002996 <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2204      	movs	r2, #4
 8002982:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f837 	bl	80029f8 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8002992:	605a      	str	r2, [r3, #4]

    return;
 8002994:	e022      	b.n	80029dc <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01d      	beq.n	80029dc <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0208 	bic.w	r2, r2, #8
 80029ae:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	795b      	ldrb	r3, [r3, #5]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d00b      	beq.n	80029dc <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4619      	mov	r1, r3
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f803 	bl	80029e2 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e049      	b.n	8002ab2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fd ffa8 	bl	8000988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3304      	adds	r3, #4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	f000 f96a 	bl	8002d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01b      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f06f 0202 	mvn.w	r2, #2
 8002aee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f8ee 	bl	8002ce6 <HAL_TIM_IC_CaptureCallback>
 8002b0a:	e005      	b.n	8002b18 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f8e0 	bl	8002cd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f8f1 	bl	8002cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01b      	beq.n	8002b6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f06f 0204 	mvn.w	r2, #4
 8002b3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f8c8 	bl	8002ce6 <HAL_TIM_IC_CaptureCallback>
 8002b56:	e005      	b.n	8002b64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f8ba 	bl	8002cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f8cb 	bl	8002cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01b      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f06f 0208 	mvn.w	r2, #8
 8002b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f8a2 	bl	8002ce6 <HAL_TIM_IC_CaptureCallback>
 8002ba2:	e005      	b.n	8002bb0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f894 	bl	8002cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f8a5 	bl	8002cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 0310 	and.w	r3, r3, #16
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01b      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f06f 0210 	mvn.w	r2, #16
 8002bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2208      	movs	r2, #8
 8002bd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f87c 	bl	8002ce6 <HAL_TIM_IC_CaptureCallback>
 8002bee:	e005      	b.n	8002bfc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f86e 	bl	8002cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f87f 	bl	8002cfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00c      	beq.n	8002c26 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f06f 0201 	mvn.w	r2, #1
 8002c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f84c 	bl	8002cbe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00c      	beq.n	8002c4a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d007      	beq.n	8002c4a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f999 	bl	8002f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00c      	beq.n	8002c6e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f991 	bl	8002f90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00c      	beq.n	8002c92 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f83e 	bl	8002d0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00c      	beq.n	8002cb6 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f06f 0220 	mvn.w	r2, #32
 8002cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f959 	bl	8002f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a40      	ldr	r2, [pc, #256]	; (8002e38 <TIM_Base_SetConfig+0x114>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d42:	d00f      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a3d      	ldr	r2, [pc, #244]	; (8002e3c <TIM_Base_SetConfig+0x118>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00b      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a3c      	ldr	r2, [pc, #240]	; (8002e40 <TIM_Base_SetConfig+0x11c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d007      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a3b      	ldr	r2, [pc, #236]	; (8002e44 <TIM_Base_SetConfig+0x120>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d003      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a3a      	ldr	r2, [pc, #232]	; (8002e48 <TIM_Base_SetConfig+0x124>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d108      	bne.n	8002d76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a2f      	ldr	r2, [pc, #188]	; (8002e38 <TIM_Base_SetConfig+0x114>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01f      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d84:	d01b      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a2c      	ldr	r2, [pc, #176]	; (8002e3c <TIM_Base_SetConfig+0x118>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d017      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a2b      	ldr	r2, [pc, #172]	; (8002e40 <TIM_Base_SetConfig+0x11c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a2a      	ldr	r2, [pc, #168]	; (8002e44 <TIM_Base_SetConfig+0x120>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00f      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a29      	ldr	r2, [pc, #164]	; (8002e48 <TIM_Base_SetConfig+0x124>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00b      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a28      	ldr	r2, [pc, #160]	; (8002e4c <TIM_Base_SetConfig+0x128>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a27      	ldr	r2, [pc, #156]	; (8002e50 <TIM_Base_SetConfig+0x12c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d003      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a26      	ldr	r2, [pc, #152]	; (8002e54 <TIM_Base_SetConfig+0x130>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d108      	bne.n	8002dd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <TIM_Base_SetConfig+0x114>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00f      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <TIM_Base_SetConfig+0x124>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00b      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <TIM_Base_SetConfig+0x128>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d007      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a10      	ldr	r2, [pc, #64]	; (8002e50 <TIM_Base_SetConfig+0x12c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d003      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <TIM_Base_SetConfig+0x130>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d103      	bne.n	8002e24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	615a      	str	r2, [r3, #20]
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40000800 	.word	0x40000800
 8002e44:	40000c00 	.word	0x40000c00
 8002e48:	40013400 	.word	0x40013400
 8002e4c:	40014000 	.word	0x40014000
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40014800 	.word	0x40014800

08002e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e068      	b.n	8002f42 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a2e      	ldr	r2, [pc, #184]	; (8002f50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d004      	beq.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a2d      	ldr	r2, [pc, #180]	; (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d108      	bne.n	8002eb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002eaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01d      	beq.n	8002f16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d018      	beq.n	8002f16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1b      	ldr	r2, [pc, #108]	; (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1a      	ldr	r2, [pc, #104]	; (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00e      	beq.n	8002f16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d009      	beq.n	8002f16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d004      	beq.n	8002f16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a14      	ldr	r2, [pc, #80]	; (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d10c      	bne.n	8002f30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40013400 	.word	0x40013400
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800
 8002f60:	40000c00 	.word	0x40000c00
 8002f64:	40014000 	.word	0x40014000

08002f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e040      	b.n	8003038 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fd fd04 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2224      	movs	r2, #36	; 0x24
 8002fd0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0201 	bic.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fae0 	bl	80035b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f825 	bl	8003040 <UART_SetConfig>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e01b      	b.n	8003038 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800300e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800301e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fb5f 	bl	80036f4 <UART_CheckIdleState>
 8003036:	4603      	mov	r3, r0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003044:	b08a      	sub	sp, #40	; 0x28
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	431a      	orrs	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	431a      	orrs	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	4313      	orrs	r3, r2
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4ba4      	ldr	r3, [pc, #656]	; (8003300 <UART_SetConfig+0x2c0>)
 8003070:	4013      	ands	r3, r2
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003078:	430b      	orrs	r3, r1
 800307a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a99      	ldr	r2, [pc, #612]	; (8003304 <UART_SetConfig+0x2c4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d004      	beq.n	80030ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a8:	4313      	orrs	r3, r2
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030bc:	430a      	orrs	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a90      	ldr	r2, [pc, #576]	; (8003308 <UART_SetConfig+0x2c8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d126      	bne.n	8003118 <UART_SetConfig+0xd8>
 80030ca:	4b90      	ldr	r3, [pc, #576]	; (800330c <UART_SetConfig+0x2cc>)
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d81b      	bhi.n	8003110 <UART_SetConfig+0xd0>
 80030d8:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <UART_SetConfig+0xa0>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	080030f1 	.word	0x080030f1
 80030e4:	08003101 	.word	0x08003101
 80030e8:	080030f9 	.word	0x080030f9
 80030ec:	08003109 	.word	0x08003109
 80030f0:	2301      	movs	r3, #1
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f6:	e116      	b.n	8003326 <UART_SetConfig+0x2e6>
 80030f8:	2302      	movs	r3, #2
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fe:	e112      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003100:	2304      	movs	r3, #4
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003106:	e10e      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003108:	2308      	movs	r3, #8
 800310a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800310e:	e10a      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003110:	2310      	movs	r3, #16
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003116:	e106      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a7c      	ldr	r2, [pc, #496]	; (8003310 <UART_SetConfig+0x2d0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d138      	bne.n	8003194 <UART_SetConfig+0x154>
 8003122:	4b7a      	ldr	r3, [pc, #488]	; (800330c <UART_SetConfig+0x2cc>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b0c      	cmp	r3, #12
 800312e:	d82d      	bhi.n	800318c <UART_SetConfig+0x14c>
 8003130:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <UART_SetConfig+0xf8>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	0800316d 	.word	0x0800316d
 800313c:	0800318d 	.word	0x0800318d
 8003140:	0800318d 	.word	0x0800318d
 8003144:	0800318d 	.word	0x0800318d
 8003148:	0800317d 	.word	0x0800317d
 800314c:	0800318d 	.word	0x0800318d
 8003150:	0800318d 	.word	0x0800318d
 8003154:	0800318d 	.word	0x0800318d
 8003158:	08003175 	.word	0x08003175
 800315c:	0800318d 	.word	0x0800318d
 8003160:	0800318d 	.word	0x0800318d
 8003164:	0800318d 	.word	0x0800318d
 8003168:	08003185 	.word	0x08003185
 800316c:	2300      	movs	r3, #0
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003172:	e0d8      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003174:	2302      	movs	r3, #2
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317a:	e0d4      	b.n	8003326 <UART_SetConfig+0x2e6>
 800317c:	2304      	movs	r3, #4
 800317e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003182:	e0d0      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003184:	2308      	movs	r3, #8
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318a:	e0cc      	b.n	8003326 <UART_SetConfig+0x2e6>
 800318c:	2310      	movs	r3, #16
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003192:	e0c8      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a5e      	ldr	r2, [pc, #376]	; (8003314 <UART_SetConfig+0x2d4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d125      	bne.n	80031ea <UART_SetConfig+0x1aa>
 800319e:	4b5b      	ldr	r3, [pc, #364]	; (800330c <UART_SetConfig+0x2cc>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031a8:	2b30      	cmp	r3, #48	; 0x30
 80031aa:	d016      	beq.n	80031da <UART_SetConfig+0x19a>
 80031ac:	2b30      	cmp	r3, #48	; 0x30
 80031ae:	d818      	bhi.n	80031e2 <UART_SetConfig+0x1a2>
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d00a      	beq.n	80031ca <UART_SetConfig+0x18a>
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d814      	bhi.n	80031e2 <UART_SetConfig+0x1a2>
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <UART_SetConfig+0x182>
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d008      	beq.n	80031d2 <UART_SetConfig+0x192>
 80031c0:	e00f      	b.n	80031e2 <UART_SetConfig+0x1a2>
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c8:	e0ad      	b.n	8003326 <UART_SetConfig+0x2e6>
 80031ca:	2302      	movs	r3, #2
 80031cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d0:	e0a9      	b.n	8003326 <UART_SetConfig+0x2e6>
 80031d2:	2304      	movs	r3, #4
 80031d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d8:	e0a5      	b.n	8003326 <UART_SetConfig+0x2e6>
 80031da:	2308      	movs	r3, #8
 80031dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e0:	e0a1      	b.n	8003326 <UART_SetConfig+0x2e6>
 80031e2:	2310      	movs	r3, #16
 80031e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e8:	e09d      	b.n	8003326 <UART_SetConfig+0x2e6>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a4a      	ldr	r2, [pc, #296]	; (8003318 <UART_SetConfig+0x2d8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d125      	bne.n	8003240 <UART_SetConfig+0x200>
 80031f4:	4b45      	ldr	r3, [pc, #276]	; (800330c <UART_SetConfig+0x2cc>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003200:	d016      	beq.n	8003230 <UART_SetConfig+0x1f0>
 8003202:	2bc0      	cmp	r3, #192	; 0xc0
 8003204:	d818      	bhi.n	8003238 <UART_SetConfig+0x1f8>
 8003206:	2b80      	cmp	r3, #128	; 0x80
 8003208:	d00a      	beq.n	8003220 <UART_SetConfig+0x1e0>
 800320a:	2b80      	cmp	r3, #128	; 0x80
 800320c:	d814      	bhi.n	8003238 <UART_SetConfig+0x1f8>
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <UART_SetConfig+0x1d8>
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d008      	beq.n	8003228 <UART_SetConfig+0x1e8>
 8003216:	e00f      	b.n	8003238 <UART_SetConfig+0x1f8>
 8003218:	2300      	movs	r3, #0
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800321e:	e082      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003220:	2302      	movs	r3, #2
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003226:	e07e      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003228:	2304      	movs	r3, #4
 800322a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800322e:	e07a      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003230:	2308      	movs	r3, #8
 8003232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003236:	e076      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003238:	2310      	movs	r3, #16
 800323a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800323e:	e072      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a35      	ldr	r2, [pc, #212]	; (800331c <UART_SetConfig+0x2dc>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d12a      	bne.n	80032a0 <UART_SetConfig+0x260>
 800324a:	4b30      	ldr	r3, [pc, #192]	; (800330c <UART_SetConfig+0x2cc>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003254:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003258:	d01a      	beq.n	8003290 <UART_SetConfig+0x250>
 800325a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800325e:	d81b      	bhi.n	8003298 <UART_SetConfig+0x258>
 8003260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003264:	d00c      	beq.n	8003280 <UART_SetConfig+0x240>
 8003266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800326a:	d815      	bhi.n	8003298 <UART_SetConfig+0x258>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <UART_SetConfig+0x238>
 8003270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003274:	d008      	beq.n	8003288 <UART_SetConfig+0x248>
 8003276:	e00f      	b.n	8003298 <UART_SetConfig+0x258>
 8003278:	2300      	movs	r3, #0
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327e:	e052      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003280:	2302      	movs	r3, #2
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003286:	e04e      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003288:	2304      	movs	r3, #4
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328e:	e04a      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003290:	2308      	movs	r3, #8
 8003292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003296:	e046      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003298:	2310      	movs	r3, #16
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329e:	e042      	b.n	8003326 <UART_SetConfig+0x2e6>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a17      	ldr	r2, [pc, #92]	; (8003304 <UART_SetConfig+0x2c4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d13a      	bne.n	8003320 <UART_SetConfig+0x2e0>
 80032aa:	4b18      	ldr	r3, [pc, #96]	; (800330c <UART_SetConfig+0x2cc>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032b8:	d01a      	beq.n	80032f0 <UART_SetConfig+0x2b0>
 80032ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032be:	d81b      	bhi.n	80032f8 <UART_SetConfig+0x2b8>
 80032c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c4:	d00c      	beq.n	80032e0 <UART_SetConfig+0x2a0>
 80032c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ca:	d815      	bhi.n	80032f8 <UART_SetConfig+0x2b8>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <UART_SetConfig+0x298>
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d4:	d008      	beq.n	80032e8 <UART_SetConfig+0x2a8>
 80032d6:	e00f      	b.n	80032f8 <UART_SetConfig+0x2b8>
 80032d8:	2300      	movs	r3, #0
 80032da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032de:	e022      	b.n	8003326 <UART_SetConfig+0x2e6>
 80032e0:	2302      	movs	r3, #2
 80032e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e6:	e01e      	b.n	8003326 <UART_SetConfig+0x2e6>
 80032e8:	2304      	movs	r3, #4
 80032ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ee:	e01a      	b.n	8003326 <UART_SetConfig+0x2e6>
 80032f0:	2308      	movs	r3, #8
 80032f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f6:	e016      	b.n	8003326 <UART_SetConfig+0x2e6>
 80032f8:	2310      	movs	r3, #16
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fe:	e012      	b.n	8003326 <UART_SetConfig+0x2e6>
 8003300:	efff69f3 	.word	0xefff69f3
 8003304:	40008000 	.word	0x40008000
 8003308:	40013800 	.word	0x40013800
 800330c:	40021000 	.word	0x40021000
 8003310:	40004400 	.word	0x40004400
 8003314:	40004800 	.word	0x40004800
 8003318:	40004c00 	.word	0x40004c00
 800331c:	40005000 	.word	0x40005000
 8003320:	2310      	movs	r3, #16
 8003322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a9f      	ldr	r2, [pc, #636]	; (80035a8 <UART_SetConfig+0x568>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d17a      	bne.n	8003426 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003330:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003334:	2b08      	cmp	r3, #8
 8003336:	d824      	bhi.n	8003382 <UART_SetConfig+0x342>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <UART_SetConfig+0x300>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003365 	.word	0x08003365
 8003344:	08003383 	.word	0x08003383
 8003348:	0800336d 	.word	0x0800336d
 800334c:	08003383 	.word	0x08003383
 8003350:	08003373 	.word	0x08003373
 8003354:	08003383 	.word	0x08003383
 8003358:	08003383 	.word	0x08003383
 800335c:	08003383 	.word	0x08003383
 8003360:	0800337b 	.word	0x0800337b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003364:	f7fe fd34 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8003368:	61f8      	str	r0, [r7, #28]
        break;
 800336a:	e010      	b.n	800338e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800336c:	4b8f      	ldr	r3, [pc, #572]	; (80035ac <UART_SetConfig+0x56c>)
 800336e:	61fb      	str	r3, [r7, #28]
        break;
 8003370:	e00d      	b.n	800338e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003372:	f7fe fc95 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8003376:	61f8      	str	r0, [r7, #28]
        break;
 8003378:	e009      	b.n	800338e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800337a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337e:	61fb      	str	r3, [r7, #28]
        break;
 8003380:	e005      	b.n	800338e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800338c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80fb 	beq.w	800358c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	69fa      	ldr	r2, [r7, #28]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d305      	bcc.n	80033b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d903      	bls.n	80033ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033b8:	e0e8      	b.n	800358c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	2200      	movs	r2, #0
 80033be:	461c      	mov	r4, r3
 80033c0:	4615      	mov	r5, r2
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	022b      	lsls	r3, r5, #8
 80033cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033d0:	0222      	lsls	r2, r4, #8
 80033d2:	68f9      	ldr	r1, [r7, #12]
 80033d4:	6849      	ldr	r1, [r1, #4]
 80033d6:	0849      	lsrs	r1, r1, #1
 80033d8:	2000      	movs	r0, #0
 80033da:	4688      	mov	r8, r1
 80033dc:	4681      	mov	r9, r0
 80033de:	eb12 0a08 	adds.w	sl, r2, r8
 80033e2:	eb43 0b09 	adc.w	fp, r3, r9
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	603b      	str	r3, [r7, #0]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033f4:	4650      	mov	r0, sl
 80033f6:	4659      	mov	r1, fp
 80033f8:	f7fc feea 	bl	80001d0 <__aeabi_uldivmod>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4613      	mov	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800340a:	d308      	bcc.n	800341e <UART_SetConfig+0x3de>
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003412:	d204      	bcs.n	800341e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	60da      	str	r2, [r3, #12]
 800341c:	e0b6      	b.n	800358c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003424:	e0b2      	b.n	800358c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342e:	d15e      	bne.n	80034ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003430:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003434:	2b08      	cmp	r3, #8
 8003436:	d828      	bhi.n	800348a <UART_SetConfig+0x44a>
 8003438:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <UART_SetConfig+0x400>)
 800343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343e:	bf00      	nop
 8003440:	08003465 	.word	0x08003465
 8003444:	0800346d 	.word	0x0800346d
 8003448:	08003475 	.word	0x08003475
 800344c:	0800348b 	.word	0x0800348b
 8003450:	0800347b 	.word	0x0800347b
 8003454:	0800348b 	.word	0x0800348b
 8003458:	0800348b 	.word	0x0800348b
 800345c:	0800348b 	.word	0x0800348b
 8003460:	08003483 	.word	0x08003483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003464:	f7fe fcb4 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8003468:	61f8      	str	r0, [r7, #28]
        break;
 800346a:	e014      	b.n	8003496 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800346c:	f7fe fcc6 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
 8003470:	61f8      	str	r0, [r7, #28]
        break;
 8003472:	e010      	b.n	8003496 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003474:	4b4d      	ldr	r3, [pc, #308]	; (80035ac <UART_SetConfig+0x56c>)
 8003476:	61fb      	str	r3, [r7, #28]
        break;
 8003478:	e00d      	b.n	8003496 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800347a:	f7fe fc11 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 800347e:	61f8      	str	r0, [r7, #28]
        break;
 8003480:	e009      	b.n	8003496 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003486:	61fb      	str	r3, [r7, #28]
        break;
 8003488:	e005      	b.n	8003496 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003494:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d077      	beq.n	800358c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005a      	lsls	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	441a      	add	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2b0f      	cmp	r3, #15
 80034b6:	d916      	bls.n	80034e6 <UART_SetConfig+0x4a6>
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034be:	d212      	bcs.n	80034e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	f023 030f 	bic.w	r3, r3, #15
 80034c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	085b      	lsrs	r3, r3, #1
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	8afb      	ldrh	r3, [r7, #22]
 80034d8:	4313      	orrs	r3, r2
 80034da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	8afa      	ldrh	r2, [r7, #22]
 80034e2:	60da      	str	r2, [r3, #12]
 80034e4:	e052      	b.n	800358c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034ec:	e04e      	b.n	800358c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d827      	bhi.n	8003546 <UART_SetConfig+0x506>
 80034f6:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <UART_SetConfig+0x4bc>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003529 	.word	0x08003529
 8003504:	08003531 	.word	0x08003531
 8003508:	08003547 	.word	0x08003547
 800350c:	08003537 	.word	0x08003537
 8003510:	08003547 	.word	0x08003547
 8003514:	08003547 	.word	0x08003547
 8003518:	08003547 	.word	0x08003547
 800351c:	0800353f 	.word	0x0800353f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7fe fc56 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8003524:	61f8      	str	r0, [r7, #28]
        break;
 8003526:	e014      	b.n	8003552 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7fe fc68 	bl	8001dfc <HAL_RCC_GetPCLK2Freq>
 800352c:	61f8      	str	r0, [r7, #28]
        break;
 800352e:	e010      	b.n	8003552 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003530:	4b1e      	ldr	r3, [pc, #120]	; (80035ac <UART_SetConfig+0x56c>)
 8003532:	61fb      	str	r3, [r7, #28]
        break;
 8003534:	e00d      	b.n	8003552 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7fe fbb3 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 800353a:	61f8      	str	r0, [r7, #28]
        break;
 800353c:	e009      	b.n	8003552 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003542:	61fb      	str	r3, [r7, #28]
        break;
 8003544:	e005      	b.n	8003552 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003550:	bf00      	nop
    }

    if (pclk != 0U)
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d019      	beq.n	800358c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	085a      	lsrs	r2, r3, #1
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	441a      	add	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	fbb2 f3f3 	udiv	r3, r2, r3
 800356a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	d909      	bls.n	8003586 <UART_SetConfig+0x546>
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d205      	bcs.n	8003586 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60da      	str	r2, [r3, #12]
 8003584:	e002      	b.n	800358c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003598:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800359c:	4618      	mov	r0, r3
 800359e:	3728      	adds	r7, #40	; 0x28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a6:	bf00      	nop
 80035a8:	40008000 	.word	0x40008000
 80035ac:	00f42400 	.word	0x00f42400

080035b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01a      	beq.n	80036c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ae:	d10a      	bne.n	80036c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	605a      	str	r2, [r3, #4]
  }
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b098      	sub	sp, #96	; 0x60
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003704:	f7fd faac 	bl	8000c60 <HAL_GetTick>
 8003708:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b08      	cmp	r3, #8
 8003716:	d12e      	bne.n	8003776 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003720:	2200      	movs	r2, #0
 8003722:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f88c 	bl	8003844 <UART_WaitOnFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d021      	beq.n	8003776 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373a:	e853 3f00 	ldrex	r3, [r3]
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003746:	653b      	str	r3, [r7, #80]	; 0x50
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003750:	647b      	str	r3, [r7, #68]	; 0x44
 8003752:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800375e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e6      	bne.n	8003732 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e062      	b.n	800383c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b04      	cmp	r3, #4
 8003782:	d149      	bne.n	8003818 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800378c:	2200      	movs	r2, #0
 800378e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f856 	bl	8003844 <UART_WaitOnFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d03c      	beq.n	8003818 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	e853 3f00 	ldrex	r3, [r3]
 80037aa:	623b      	str	r3, [r7, #32]
   return(result);
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037bc:	633b      	str	r3, [r7, #48]	; 0x30
 80037be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c4:	e841 2300 	strex	r3, r2, [r1]
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e6      	bne.n	800379e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3308      	adds	r3, #8
 80037d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	e853 3f00 	ldrex	r3, [r3]
 80037de:	60fb      	str	r3, [r7, #12]
   return(result);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0301 	bic.w	r3, r3, #1
 80037e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3308      	adds	r3, #8
 80037ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f0:	61fa      	str	r2, [r7, #28]
 80037f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	69b9      	ldr	r1, [r7, #24]
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	617b      	str	r3, [r7, #20]
   return(result);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e5      	bne.n	80037d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e011      	b.n	800383c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3758      	adds	r7, #88	; 0x58
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003854:	e049      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d045      	beq.n	80038ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385e:	f7fd f9ff 	bl	8000c60 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	429a      	cmp	r2, r3
 800386c:	d302      	bcc.n	8003874 <UART_WaitOnFlagUntilTimeout+0x30>
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e048      	b.n	800390a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	d031      	beq.n	80038ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b08      	cmp	r3, #8
 8003892:	d110      	bne.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2208      	movs	r2, #8
 800389a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f838 	bl	8003912 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2208      	movs	r2, #8
 80038a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e029      	b.n	800390a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c4:	d111      	bne.n	80038ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f81e 	bl	8003912 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e00f      	b.n	800390a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	429a      	cmp	r2, r3
 8003906:	d0a6      	beq.n	8003856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003912:	b480      	push	{r7}
 8003914:	b095      	sub	sp, #84	; 0x54
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800392e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003938:	643b      	str	r3, [r7, #64]	; 0x40
 800393a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800393e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e6      	bne.n	800391a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3308      	adds	r3, #8
 8003952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	61fb      	str	r3, [r7, #28]
   return(result);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f023 0301 	bic.w	r3, r3, #1
 8003962:	64bb      	str	r3, [r7, #72]	; 0x48
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3308      	adds	r3, #8
 800396a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800396c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003974:	e841 2300 	strex	r3, r2, [r1]
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e5      	bne.n	800394c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003984:	2b01      	cmp	r3, #1
 8003986:	d118      	bne.n	80039ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	60bb      	str	r3, [r7, #8]
   return(result);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f023 0310 	bic.w	r3, r3, #16
 800399c:	647b      	str	r3, [r7, #68]	; 0x44
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6979      	ldr	r1, [r7, #20]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	613b      	str	r3, [r7, #16]
   return(result);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e6      	bne.n	8003988 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80039ce:	bf00      	nop
 80039d0:	3754      	adds	r7, #84	; 0x54
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
	...

080039dc <__NVIC_SetPriority>:
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	6039      	str	r1, [r7, #0]
 80039e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	db0a      	blt.n	8003a06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	490c      	ldr	r1, [pc, #48]	; (8003a28 <__NVIC_SetPriority+0x4c>)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	0112      	lsls	r2, r2, #4
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	440b      	add	r3, r1
 8003a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a04:	e00a      	b.n	8003a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4908      	ldr	r1, [pc, #32]	; (8003a2c <__NVIC_SetPriority+0x50>)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	3b04      	subs	r3, #4
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	440b      	add	r3, r1
 8003a1a:	761a      	strb	r2, [r3, #24]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	e000e100 	.word	0xe000e100
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a34:	2100      	movs	r1, #0
 8003a36:	f06f 0004 	mvn.w	r0, #4
 8003a3a:	f7ff ffcf 	bl	80039dc <__NVIC_SetPriority>
#endif
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a4a:	f3ef 8305 	mrs	r3, IPSR
 8003a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a56:	f06f 0305 	mvn.w	r3, #5
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	e00c      	b.n	8003a78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <osKernelInitialize+0x44>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d105      	bne.n	8003a72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a66:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <osKernelInitialize+0x44>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	e002      	b.n	8003a78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295
 8003a76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a78:	687b      	ldr	r3, [r7, #4]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	2000013c 	.word	0x2000013c

08003a8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a92:	f3ef 8305 	mrs	r3, IPSR
 8003a96:	603b      	str	r3, [r7, #0]
  return(result);
 8003a98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a9e:	f06f 0305 	mvn.w	r3, #5
 8003aa2:	607b      	str	r3, [r7, #4]
 8003aa4:	e010      	b.n	8003ac8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <osKernelStart+0x48>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d109      	bne.n	8003ac2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003aae:	f7ff ffbf 	bl	8003a30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ab2:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <osKernelStart+0x48>)
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ab8:	f001 f9e4 	bl	8004e84 <vTaskStartScheduler>
      stat = osOK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	e002      	b.n	8003ac8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ac8:	687b      	ldr	r3, [r7, #4]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	2000013c 	.word	0x2000013c

08003ad8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08e      	sub	sp, #56	; 0x38
 8003adc:	af04      	add	r7, sp, #16
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae8:	f3ef 8305 	mrs	r3, IPSR
 8003aec:	617b      	str	r3, [r7, #20]
  return(result);
 8003aee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d17e      	bne.n	8003bf2 <osThreadNew+0x11a>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d07b      	beq.n	8003bf2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003afe:	2318      	movs	r3, #24
 8003b00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003b06:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d045      	beq.n	8003b9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <osThreadNew+0x48>
        name = attr->name;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <osThreadNew+0x6e>
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b38      	cmp	r3, #56	; 0x38
 8003b38:	d805      	bhi.n	8003b46 <osThreadNew+0x6e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <osThreadNew+0x72>
        return (NULL);
 8003b46:	2300      	movs	r3, #0
 8003b48:	e054      	b.n	8003bf4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	089b      	lsrs	r3, r3, #2
 8003b58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00e      	beq.n	8003b80 <osThreadNew+0xa8>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b5b      	cmp	r3, #91	; 0x5b
 8003b68:	d90a      	bls.n	8003b80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d006      	beq.n	8003b80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <osThreadNew+0xa8>
        mem = 1;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	e010      	b.n	8003ba2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10c      	bne.n	8003ba2 <osThreadNew+0xca>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d108      	bne.n	8003ba2 <osThreadNew+0xca>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d104      	bne.n	8003ba2 <osThreadNew+0xca>
          mem = 0;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	e001      	b.n	8003ba2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d110      	bne.n	8003bca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bb0:	9202      	str	r2, [sp, #8]
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	6a3a      	ldr	r2, [r7, #32]
 8003bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 ff8a 	bl	8004ad8 <xTaskCreateStatic>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	e013      	b.n	8003bf2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d110      	bne.n	8003bf2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	f107 0310 	add.w	r3, r7, #16
 8003bd8:	9301      	str	r3, [sp, #4]
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 ffd5 	bl	8004b92 <xTaskCreate>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d001      	beq.n	8003bf2 <osThreadNew+0x11a>
            hTask = NULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bf2:	693b      	ldr	r3, [r7, #16]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3728      	adds	r7, #40	; 0x28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c04:	f3ef 8305 	mrs	r3, IPSR
 8003c08:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <osDelay+0x1c>
    stat = osErrorISR;
 8003c10:	f06f 0305 	mvn.w	r3, #5
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	e007      	b.n	8003c28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f001 f8fa 	bl	8004e1c <vTaskDelay>
    }
  }

  return (stat);
 8003c28:	68fb      	ldr	r3, [r7, #12]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b088      	sub	sp, #32
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c3e:	f3ef 8305 	mrs	r3, IPSR
 8003c42:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c44:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d174      	bne.n	8003d34 <osMutexNew+0x102>
    if (attr != NULL) {
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	e001      	b.n	8003c5c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <osMutexNew+0x3a>
      rmtx = 1U;
 8003c66:	2301      	movs	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	e001      	b.n	8003c70 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d15c      	bne.n	8003d34 <osMutexNew+0x102>
      mem = -1;
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d015      	beq.n	8003cb2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d006      	beq.n	8003c9c <osMutexNew+0x6a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	2b4f      	cmp	r3, #79	; 0x4f
 8003c94:	d902      	bls.n	8003c9c <osMutexNew+0x6a>
          mem = 1;
 8003c96:	2301      	movs	r3, #1
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	e00c      	b.n	8003cb6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d108      	bne.n	8003cb6 <osMutexNew+0x84>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d104      	bne.n	8003cb6 <osMutexNew+0x84>
            mem = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	e001      	b.n	8003cb6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d112      	bne.n	8003ce2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	2004      	movs	r0, #4
 8003cca:	f000 fb02 	bl	80042d2 <xQueueCreateMutexStatic>
 8003cce:	61f8      	str	r0, [r7, #28]
 8003cd0:	e016      	b.n	8003d00 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	2001      	movs	r0, #1
 8003cda:	f000 fafa 	bl	80042d2 <xQueueCreateMutexStatic>
 8003cde:	61f8      	str	r0, [r7, #28]
 8003ce0:	e00e      	b.n	8003d00 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003cee:	2004      	movs	r0, #4
 8003cf0:	f000 fad7 	bl	80042a2 <xQueueCreateMutex>
 8003cf4:	61f8      	str	r0, [r7, #28]
 8003cf6:	e003      	b.n	8003d00 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f000 fad2 	bl	80042a2 <xQueueCreateMutex>
 8003cfe:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00c      	beq.n	8003d20 <osMutexNew+0xee>
        if (attr != NULL) {
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <osMutexNew+0xe2>
          name = attr->name;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	e001      	b.n	8003d18 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003d18:	68f9      	ldr	r1, [r7, #12]
 8003d1a:	69f8      	ldr	r0, [r7, #28]
 8003d1c:	f000 fe7e 	bl	8004a1c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d006      	beq.n	8003d34 <osMutexNew+0x102>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003d34:	69fb      	ldr	r3, [r7, #28]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3720      	adds	r7, #32
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b08a      	sub	sp, #40	; 0x28
 8003d42:	af02      	add	r7, sp, #8
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d4e:	f3ef 8305 	mrs	r3, IPSR
 8003d52:	613b      	str	r3, [r7, #16]
  return(result);
 8003d54:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d15f      	bne.n	8003e1a <osMessageQueueNew+0xdc>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d05c      	beq.n	8003e1a <osMessageQueueNew+0xdc>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d059      	beq.n	8003e1a <osMessageQueueNew+0xdc>
    mem = -1;
 8003d66:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d029      	beq.n	8003dc6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d012      	beq.n	8003da0 <osMessageQueueNew+0x62>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2b4f      	cmp	r3, #79	; 0x4f
 8003d80:	d90e      	bls.n	8003da0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695a      	ldr	r2, [r3, #20]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d302      	bcc.n	8003da0 <osMessageQueueNew+0x62>
        mem = 1;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	e014      	b.n	8003dca <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d110      	bne.n	8003dca <osMessageQueueNew+0x8c>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10c      	bne.n	8003dca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d108      	bne.n	8003dca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d104      	bne.n	8003dca <osMessageQueueNew+0x8c>
          mem = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	e001      	b.n	8003dca <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d10b      	bne.n	8003de8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2100      	movs	r1, #0
 8003dda:	9100      	str	r1, [sp, #0]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f970 	bl	80040c4 <xQueueGenericCreateStatic>
 8003de4:	61f8      	str	r0, [r7, #28]
 8003de6:	e008      	b.n	8003dfa <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d105      	bne.n	8003dfa <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003dee:	2200      	movs	r2, #0
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f9de 	bl	80041b4 <xQueueGenericCreate>
 8003df8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00c      	beq.n	8003e1a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <osMessageQueueNew+0xd0>
        name = attr->name;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	e001      	b.n	8003e12 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003e12:	6979      	ldr	r1, [r7, #20]
 8003e14:	69f8      	ldr	r0, [r7, #28]
 8003e16:	f000 fe01 	bl	8004a1c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003e1a:	69fb      	ldr	r3, [r7, #28]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3720      	adds	r7, #32
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	4a06      	ldr	r2, [pc, #24]	; (8003e54 <vApplicationGetIdleTaskMemory+0x30>)
 8003e3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	601a      	str	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20000140 	.word	0x20000140
 8003e54:	2000019c 	.word	0x2000019c

08003e58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4a07      	ldr	r2, [pc, #28]	; (8003e84 <vApplicationGetTimerTaskMemory+0x2c>)
 8003e68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4a06      	ldr	r2, [pc, #24]	; (8003e88 <vApplicationGetTimerTaskMemory+0x30>)
 8003e6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e76:	601a      	str	r2, [r3, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	2000039c 	.word	0x2000039c
 8003e88:	200003f8 	.word	0x200003f8

08003e8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f103 0208 	add.w	r2, r3, #8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f103 0208 	add.w	r2, r3, #8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f103 0208 	add.w	r2, r3, #8
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b085      	sub	sp, #20
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d103      	bne.n	8003f4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	e00c      	b.n	8003f68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3308      	adds	r3, #8
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e002      	b.n	8003f5c <vListInsert+0x2e>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d2f6      	bcs.n	8003f56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	601a      	str	r2, [r3, #0]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6892      	ldr	r2, [r2, #8]
 8003fb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6852      	ldr	r2, [r2, #4]
 8003fc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d103      	bne.n	8003fd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	1e5a      	subs	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800401e:	f002 f8d1 	bl	80061c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402a:	68f9      	ldr	r1, [r7, #12]
 800402c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800402e:	fb01 f303 	mul.w	r3, r1, r3
 8004032:	441a      	add	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	3b01      	subs	r3, #1
 8004050:	68f9      	ldr	r1, [r7, #12]
 8004052:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	441a      	add	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	22ff      	movs	r2, #255	; 0xff
 8004062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	22ff      	movs	r2, #255	; 0xff
 800406a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d114      	bne.n	800409e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01a      	beq.n	80040b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3310      	adds	r3, #16
 8004080:	4618      	mov	r0, r3
 8004082:	f001 f989 	bl	8005398 <xTaskRemoveFromEventList>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d012      	beq.n	80040b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800408c:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <xQueueGenericReset+0xcc>)
 800408e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	e009      	b.n	80040b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3310      	adds	r3, #16
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff fef2 	bl	8003e8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3324      	adds	r3, #36	; 0x24
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff feed 	bl	8003e8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040b2:	f002 f8b7 	bl	8006224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040b6:	2301      	movs	r3, #1
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	e000ed04 	.word	0xe000ed04

080040c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08e      	sub	sp, #56	; 0x38
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <xQueueGenericCreateStatic+0x52>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <xQueueGenericCreateStatic+0x56>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <xQueueGenericCreateStatic+0x58>
 800411a:	2300      	movs	r3, #0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	623b      	str	r3, [r7, #32]
}
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <xQueueGenericCreateStatic+0x7e>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <xQueueGenericCreateStatic+0x82>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <xQueueGenericCreateStatic+0x84>
 8004146:	2300      	movs	r3, #0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	61fb      	str	r3, [r7, #28]
}
 800415e:	bf00      	nop
 8004160:	e7fe      	b.n	8004160 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004162:	2350      	movs	r3, #80	; 0x50
 8004164:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b50      	cmp	r3, #80	; 0x50
 800416a:	d00a      	beq.n	8004182 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	61bb      	str	r3, [r7, #24]
}
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004182:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00d      	beq.n	80041aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004196:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	4613      	mov	r3, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	68b9      	ldr	r1, [r7, #8]
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f83f 	bl	8004228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3730      	adds	r7, #48	; 0x30
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08a      	sub	sp, #40	; 0x28
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	4613      	mov	r3, r2
 80041c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <xQueueGenericCreate+0x2a>
	__asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	613b      	str	r3, [r7, #16]
}
 80041da:	bf00      	nop
 80041dc:	e7fe      	b.n	80041dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	3350      	adds	r3, #80	; 0x50
 80041ec:	4618      	mov	r0, r3
 80041ee:	f002 f90b 	bl	8006408 <pvPortMalloc>
 80041f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d011      	beq.n	800421e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	3350      	adds	r3, #80	; 0x50
 8004202:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800420c:	79fa      	ldrb	r2, [r7, #7]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	4613      	mov	r3, r2
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f805 	bl	8004228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800421e:	69bb      	ldr	r3, [r7, #24]
	}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d103      	bne.n	8004244 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e002      	b.n	800424a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004256:	2101      	movs	r1, #1
 8004258:	69b8      	ldr	r0, [r7, #24]
 800425a:	f7ff fecb 	bl	8003ff4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00e      	beq.n	800429a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800428e:	2300      	movs	r3, #0
 8004290:	2200      	movs	r2, #0
 8004292:	2100      	movs	r1, #0
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f837 	bl	8004308 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b086      	sub	sp, #24
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	4603      	mov	r3, r0
 80042aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80042ac:	2301      	movs	r3, #1
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	461a      	mov	r2, r3
 80042b8:	6939      	ldr	r1, [r7, #16]
 80042ba:	6978      	ldr	r0, [r7, #20]
 80042bc:	f7ff ff7a 	bl	80041b4 <xQueueGenericCreate>
 80042c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f7ff ffd3 	bl	800426e <prvInitialiseMutex>

		return xNewQueue;
 80042c8:	68fb      	ldr	r3, [r7, #12]
	}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b088      	sub	sp, #32
 80042d6:	af02      	add	r7, sp, #8
 80042d8:	4603      	mov	r3, r0
 80042da:	6039      	str	r1, [r7, #0]
 80042dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80042de:	2301      	movs	r3, #1
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2200      	movs	r2, #0
 80042ee:	6939      	ldr	r1, [r7, #16]
 80042f0:	6978      	ldr	r0, [r7, #20]
 80042f2:	f7ff fee7 	bl	80040c4 <xQueueGenericCreateStatic>
 80042f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff ffb8 	bl	800426e <prvInitialiseMutex>

		return xNewQueue;
 80042fe:	68fb      	ldr	r3, [r7, #12]
	}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08e      	sub	sp, #56	; 0x38
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004316:	2300      	movs	r3, #0
 8004318:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <xQueueGenericSend+0x32>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004336:	bf00      	nop
 8004338:	e7fe      	b.n	8004338 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d103      	bne.n	8004348 <xQueueGenericSend+0x40>
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <xQueueGenericSend+0x44>
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <xQueueGenericSend+0x46>
 800434c:	2300      	movs	r3, #0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10a      	bne.n	8004368 <xQueueGenericSend+0x60>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004364:	bf00      	nop
 8004366:	e7fe      	b.n	8004366 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d103      	bne.n	8004376 <xQueueGenericSend+0x6e>
 800436e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	2b01      	cmp	r3, #1
 8004374:	d101      	bne.n	800437a <xQueueGenericSend+0x72>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <xQueueGenericSend+0x74>
 800437a:	2300      	movs	r3, #0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <xQueueGenericSend+0x8e>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	623b      	str	r3, [r7, #32]
}
 8004392:	bf00      	nop
 8004394:	e7fe      	b.n	8004394 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004396:	f001 f9bd 	bl	8005714 <xTaskGetSchedulerState>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d102      	bne.n	80043a6 <xQueueGenericSend+0x9e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <xQueueGenericSend+0xa2>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <xQueueGenericSend+0xa4>
 80043aa:	2300      	movs	r3, #0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	61fb      	str	r3, [r7, #28]
}
 80043c2:	bf00      	nop
 80043c4:	e7fe      	b.n	80043c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043c6:	f001 fefd 	bl	80061c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <xQueueGenericSend+0xd4>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d129      	bne.n	8004430 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	68b9      	ldr	r1, [r7, #8]
 80043e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043e2:	f000 fa0b 	bl	80047fc <prvCopyDataToQueue>
 80043e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d010      	beq.n	8004412 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	3324      	adds	r3, #36	; 0x24
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 ffcf 	bl	8005398 <xTaskRemoveFromEventList>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d013      	beq.n	8004428 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004400:	4b3f      	ldr	r3, [pc, #252]	; (8004500 <xQueueGenericSend+0x1f8>)
 8004402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	e00a      	b.n	8004428 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d007      	beq.n	8004428 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004418:	4b39      	ldr	r3, [pc, #228]	; (8004500 <xQueueGenericSend+0x1f8>)
 800441a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004428:	f001 fefc 	bl	8006224 <vPortExitCritical>
				return pdPASS;
 800442c:	2301      	movs	r3, #1
 800442e:	e063      	b.n	80044f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d103      	bne.n	800443e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004436:	f001 fef5 	bl	8006224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800443a:	2300      	movs	r3, #0
 800443c:	e05c      	b.n	80044f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800443e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004440:	2b00      	cmp	r3, #0
 8004442:	d106      	bne.n	8004452 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004444:	f107 0314 	add.w	r3, r7, #20
 8004448:	4618      	mov	r0, r3
 800444a:	f001 f809 	bl	8005460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800444e:	2301      	movs	r3, #1
 8004450:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004452:	f001 fee7 	bl	8006224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004456:	f000 fd7b 	bl	8004f50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800445a:	f001 feb3 	bl	80061c4 <vPortEnterCritical>
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004464:	b25b      	sxtb	r3, r3
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d103      	bne.n	8004474 <xQueueGenericSend+0x16c>
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800447a:	b25b      	sxtb	r3, r3
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d103      	bne.n	800448a <xQueueGenericSend+0x182>
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800448a:	f001 fecb 	bl	8006224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800448e:	1d3a      	adds	r2, r7, #4
 8004490:	f107 0314 	add.w	r3, r7, #20
 8004494:	4611      	mov	r1, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fff8 	bl	800548c <xTaskCheckForTimeOut>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d124      	bne.n	80044ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044a4:	f000 faa2 	bl	80049ec <prvIsQueueFull>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d018      	beq.n	80044e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	3310      	adds	r3, #16
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4611      	mov	r1, r2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 ff1e 	bl	80052f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044be:	f000 fa2d 	bl	800491c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044c2:	f000 fd53 	bl	8004f6c <xTaskResumeAll>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f47f af7c 	bne.w	80043c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80044ce:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <xQueueGenericSend+0x1f8>)
 80044d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	e772      	b.n	80043c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044e2:	f000 fa1b 	bl	800491c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044e6:	f000 fd41 	bl	8004f6c <xTaskResumeAll>
 80044ea:	e76c      	b.n	80043c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ee:	f000 fa15 	bl	800491c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044f2:	f000 fd3b 	bl	8004f6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3738      	adds	r7, #56	; 0x38
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b090      	sub	sp, #64	; 0x40
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d103      	bne.n	8004540 <xQueueGenericSendFromISR+0x3c>
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <xQueueGenericSendFromISR+0x40>
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <xQueueGenericSendFromISR+0x42>
 8004544:	2300      	movs	r3, #0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800455c:	bf00      	nop
 800455e:	e7fe      	b.n	800455e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d103      	bne.n	800456e <xQueueGenericSendFromISR+0x6a>
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <xQueueGenericSendFromISR+0x6e>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <xQueueGenericSendFromISR+0x70>
 8004572:	2300      	movs	r3, #0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	623b      	str	r3, [r7, #32]
}
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800458e:	f001 fefb 	bl	8006388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004592:	f3ef 8211 	mrs	r2, BASEPRI
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	61fa      	str	r2, [r7, #28]
 80045a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <xQueueGenericSendFromISR+0xbc>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d12f      	bne.n	8004620 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	68b9      	ldr	r1, [r7, #8]
 80045d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80045d6:	f000 f911 	bl	80047fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d112      	bne.n	800460a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d016      	beq.n	800461a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ee:	3324      	adds	r3, #36	; 0x24
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fed1 	bl	8005398 <xTaskRemoveFromEventList>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00e      	beq.n	800461a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e007      	b.n	800461a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800460a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800460e:	3301      	adds	r3, #1
 8004610:	b2db      	uxtb	r3, r3
 8004612:	b25a      	sxtb	r2, r3
 8004614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800461a:	2301      	movs	r3, #1
 800461c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800461e:	e001      	b.n	8004624 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004620:	2300      	movs	r3, #0
 8004622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004626:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800462e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004632:	4618      	mov	r0, r3
 8004634:	3740      	adds	r7, #64	; 0x40
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08c      	sub	sp, #48	; 0x30
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004648:	2300      	movs	r3, #0
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <xQueueReceive+0x30>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	623b      	str	r3, [r7, #32]
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d103      	bne.n	800467a <xQueueReceive+0x3e>
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <xQueueReceive+0x42>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <xQueueReceive+0x44>
 800467e:	2300      	movs	r3, #0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <xQueueReceive+0x5e>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	61fb      	str	r3, [r7, #28]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800469a:	f001 f83b 	bl	8005714 <xTaskGetSchedulerState>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <xQueueReceive+0x6e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <xQueueReceive+0x72>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <xQueueReceive+0x74>
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <xQueueReceive+0x8e>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	61bb      	str	r3, [r7, #24]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046ca:	f001 fd7b 	bl	80061c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01f      	beq.n	800471a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046de:	f000 f8f7 	bl	80048d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	1e5a      	subs	r2, r3, #1
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00f      	beq.n	8004712 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	3310      	adds	r3, #16
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fe4e 	bl	8005398 <xTaskRemoveFromEventList>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004702:	4b3d      	ldr	r3, [pc, #244]	; (80047f8 <xQueueReceive+0x1bc>)
 8004704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004712:	f001 fd87 	bl	8006224 <vPortExitCritical>
				return pdPASS;
 8004716:	2301      	movs	r3, #1
 8004718:	e069      	b.n	80047ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d103      	bne.n	8004728 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004720:	f001 fd80 	bl	8006224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004724:	2300      	movs	r3, #0
 8004726:	e062      	b.n	80047ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800472e:	f107 0310 	add.w	r3, r7, #16
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fe94 	bl	8005460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004738:	2301      	movs	r3, #1
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800473c:	f001 fd72 	bl	8006224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004740:	f000 fc06 	bl	8004f50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004744:	f001 fd3e 	bl	80061c4 <vPortEnterCritical>
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800474e:	b25b      	sxtb	r3, r3
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d103      	bne.n	800475e <xQueueReceive+0x122>
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004764:	b25b      	sxtb	r3, r3
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d103      	bne.n	8004774 <xQueueReceive+0x138>
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004774:	f001 fd56 	bl	8006224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004778:	1d3a      	adds	r2, r7, #4
 800477a:	f107 0310 	add.w	r3, r7, #16
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fe83 	bl	800548c <xTaskCheckForTimeOut>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d123      	bne.n	80047d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800478c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800478e:	f000 f917 	bl	80049c0 <prvIsQueueEmpty>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d017      	beq.n	80047c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	3324      	adds	r3, #36	; 0x24
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	4611      	mov	r1, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fda9 	bl	80052f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a8:	f000 f8b8 	bl	800491c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047ac:	f000 fbde 	bl	8004f6c <xTaskResumeAll>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d189      	bne.n	80046ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <xQueueReceive+0x1bc>)
 80047b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	e780      	b.n	80046ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ca:	f000 f8a7 	bl	800491c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047ce:	f000 fbcd 	bl	8004f6c <xTaskResumeAll>
 80047d2:	e77a      	b.n	80046ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047d6:	f000 f8a1 	bl	800491c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047da:	f000 fbc7 	bl	8004f6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e0:	f000 f8ee 	bl	80049c0 <prvIsQueueEmpty>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f43f af6f 	beq.w	80046ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3730      	adds	r7, #48	; 0x30
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10d      	bne.n	8004836 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d14d      	bne.n	80048be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 ff92 	bl	8005750 <xTaskPriorityDisinherit>
 800482c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	e043      	b.n	80048be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d119      	bne.n	8004870 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6858      	ldr	r0, [r3, #4]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	461a      	mov	r2, r3
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	f001 fff4 	bl	8006834 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	441a      	add	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	429a      	cmp	r2, r3
 8004864:	d32b      	bcc.n	80048be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	e026      	b.n	80048be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68d8      	ldr	r0, [r3, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	461a      	mov	r2, r3
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	f001 ffda 	bl	8006834 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	425b      	negs	r3, r3
 800488a:	441a      	add	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d207      	bcs.n	80048ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	425b      	negs	r3, r3
 80048a6:	441a      	add	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d105      	bne.n	80048be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048c6:	697b      	ldr	r3, [r7, #20]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d018      	beq.n	8004914 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	441a      	add	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d303      	bcc.n	8004904 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68d9      	ldr	r1, [r3, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	461a      	mov	r2, r3
 800490e:	6838      	ldr	r0, [r7, #0]
 8004910:	f001 ff90 	bl	8006834 <memcpy>
	}
}
 8004914:	bf00      	nop
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004924:	f001 fc4e 	bl	80061c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800492e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004930:	e011      	b.n	8004956 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	2b00      	cmp	r3, #0
 8004938:	d012      	beq.n	8004960 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3324      	adds	r3, #36	; 0x24
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fd2a 	bl	8005398 <xTaskRemoveFromEventList>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800494a:	f000 fe01 	bl	8005550 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	3b01      	subs	r3, #1
 8004952:	b2db      	uxtb	r3, r3
 8004954:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800495a:	2b00      	cmp	r3, #0
 800495c:	dce9      	bgt.n	8004932 <prvUnlockQueue+0x16>
 800495e:	e000      	b.n	8004962 <prvUnlockQueue+0x46>
					break;
 8004960:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	22ff      	movs	r2, #255	; 0xff
 8004966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800496a:	f001 fc5b 	bl	8006224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800496e:	f001 fc29 	bl	80061c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004978:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800497a:	e011      	b.n	80049a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d012      	beq.n	80049aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3310      	adds	r3, #16
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fd05 	bl	8005398 <xTaskRemoveFromEventList>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004994:	f000 fddc 	bl	8005550 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004998:	7bbb      	ldrb	r3, [r7, #14]
 800499a:	3b01      	subs	r3, #1
 800499c:	b2db      	uxtb	r3, r3
 800499e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	dce9      	bgt.n	800497c <prvUnlockQueue+0x60>
 80049a8:	e000      	b.n	80049ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	22ff      	movs	r2, #255	; 0xff
 80049b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049b4:	f001 fc36 	bl	8006224 <vPortExitCritical>
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049c8:	f001 fbfc 	bl	80061c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d102      	bne.n	80049da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80049d4:	2301      	movs	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e001      	b.n	80049de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049de:	f001 fc21 	bl	8006224 <vPortExitCritical>

	return xReturn;
 80049e2:	68fb      	ldr	r3, [r7, #12]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049f4:	f001 fbe6 	bl	80061c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d102      	bne.n	8004a0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a04:	2301      	movs	r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	e001      	b.n	8004a0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a0e:	f001 fc09 	bl	8006224 <vPortExitCritical>

	return xReturn;
 8004a12:	68fb      	ldr	r3, [r7, #12]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	e014      	b.n	8004a56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a2c:	4a0f      	ldr	r2, [pc, #60]	; (8004a6c <vQueueAddToRegistry+0x50>)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10b      	bne.n	8004a50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a38:	490c      	ldr	r1, [pc, #48]	; (8004a6c <vQueueAddToRegistry+0x50>)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a42:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <vQueueAddToRegistry+0x50>)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a4e:	e006      	b.n	8004a5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	3301      	adds	r3, #1
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b07      	cmp	r3, #7
 8004a5a:	d9e7      	bls.n	8004a2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	200007f8 	.word	0x200007f8

08004a70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a80:	f001 fba0 	bl	80061c4 <vPortEnterCritical>
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a8a:	b25b      	sxtb	r3, r3
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d103      	bne.n	8004a9a <vQueueWaitForMessageRestricted+0x2a>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aa0:	b25b      	sxtb	r3, r3
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa6:	d103      	bne.n	8004ab0 <vQueueWaitForMessageRestricted+0x40>
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab0:	f001 fbb8 	bl	8006224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	3324      	adds	r3, #36	; 0x24
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fc3b 	bl	8005340 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004aca:	6978      	ldr	r0, [r7, #20]
 8004acc:	f7ff ff26 	bl	800491c <prvUnlockQueue>
	}
 8004ad0:	bf00      	nop
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08e      	sub	sp, #56	; 0x38
 8004adc:	af04      	add	r7, sp, #16
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	623b      	str	r3, [r7, #32]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <xTaskCreateStatic+0x46>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	61fb      	str	r3, [r7, #28]
}
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b1e:	235c      	movs	r3, #92	; 0x5c
 8004b20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b5c      	cmp	r3, #92	; 0x5c
 8004b26:	d00a      	beq.n	8004b3e <xTaskCreateStatic+0x66>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	61bb      	str	r3, [r7, #24]
}
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d01e      	beq.n	8004b84 <xTaskCreateStatic+0xac>
 8004b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01b      	beq.n	8004b84 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	2202      	movs	r2, #2
 8004b5a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9303      	str	r3, [sp, #12]
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	9302      	str	r3, [sp, #8]
 8004b66:	f107 0314 	add.w	r3, r7, #20
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 f850 	bl	8004c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b7e:	f000 f8dd 	bl	8004d3c <prvAddNewTaskToReadyList>
 8004b82:	e001      	b.n	8004b88 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b88:	697b      	ldr	r3, [r7, #20]
	}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3728      	adds	r7, #40	; 0x28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b08c      	sub	sp, #48	; 0x30
 8004b96:	af04      	add	r7, sp, #16
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	603b      	str	r3, [r7, #0]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f001 fc2e 	bl	8006408 <pvPortMalloc>
 8004bac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00e      	beq.n	8004bd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bb4:	205c      	movs	r0, #92	; 0x5c
 8004bb6:	f001 fc27 	bl	8006408 <pvPortMalloc>
 8004bba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8004bc8:	e005      	b.n	8004bd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004bca:	6978      	ldr	r0, [r7, #20]
 8004bcc:	f001 fce8 	bl	80065a0 <vPortFree>
 8004bd0:	e001      	b.n	8004bd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d017      	beq.n	8004c0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004be4:	88fa      	ldrh	r2, [r7, #6]
 8004be6:	2300      	movs	r3, #0
 8004be8:	9303      	str	r3, [sp, #12]
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	9302      	str	r3, [sp, #8]
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	9301      	str	r3, [sp, #4]
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f80e 	bl	8004c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c00:	69f8      	ldr	r0, [r7, #28]
 8004c02:	f000 f89b 	bl	8004d3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c06:	2301      	movs	r3, #1
 8004c08:	61bb      	str	r3, [r7, #24]
 8004c0a:	e002      	b.n	8004c12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c12:	69bb      	ldr	r3, [r7, #24]
	}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3720      	adds	r7, #32
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	461a      	mov	r2, r3
 8004c34:	21a5      	movs	r1, #165	; 0xa5
 8004c36:	f001 fdd1 	bl	80067dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c44:	3b01      	subs	r3, #1
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	f023 0307 	bic.w	r3, r3, #7
 8004c52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	617b      	str	r3, [r7, #20]
}
 8004c70:	bf00      	nop
 8004c72:	e7fe      	b.n	8004c72 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01f      	beq.n	8004cba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61fb      	str	r3, [r7, #28]
 8004c7e:	e012      	b.n	8004ca6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	7819      	ldrb	r1, [r3, #0]
 8004c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	3334      	adds	r3, #52	; 0x34
 8004c90:	460a      	mov	r2, r1
 8004c92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	4413      	add	r3, r2
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d006      	beq.n	8004cae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	61fb      	str	r3, [r7, #28]
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	2b0f      	cmp	r3, #15
 8004caa:	d9e9      	bls.n	8004c80 <prvInitialiseNewTask+0x64>
 8004cac:	e000      	b.n	8004cb0 <prvInitialiseNewTask+0x94>
			{
				break;
 8004cae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb8:	e003      	b.n	8004cc2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	2b37      	cmp	r3, #55	; 0x37
 8004cc6:	d901      	bls.n	8004ccc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cc8:	2337      	movs	r3, #55	; 0x37
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	2200      	movs	r2, #0
 8004cdc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff f8f2 	bl	8003ecc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	3318      	adds	r3, #24
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff f8ed 	bl	8003ecc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	68f9      	ldr	r1, [r7, #12]
 8004d1a:	69b8      	ldr	r0, [r7, #24]
 8004d1c:	f001 f928 	bl	8005f70 <pxPortInitialiseStack>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d32:	bf00      	nop
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d44:	f001 fa3e 	bl	80061c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d48:	4b2d      	ldr	r3, [pc, #180]	; (8004e00 <prvAddNewTaskToReadyList+0xc4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	4a2c      	ldr	r2, [pc, #176]	; (8004e00 <prvAddNewTaskToReadyList+0xc4>)
 8004d50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d52:	4b2c      	ldr	r3, [pc, #176]	; (8004e04 <prvAddNewTaskToReadyList+0xc8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d5a:	4a2a      	ldr	r2, [pc, #168]	; (8004e04 <prvAddNewTaskToReadyList+0xc8>)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d60:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <prvAddNewTaskToReadyList+0xc4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d110      	bne.n	8004d8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d68:	f000 fc16 	bl	8005598 <prvInitialiseTaskLists>
 8004d6c:	e00d      	b.n	8004d8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d6e:	4b26      	ldr	r3, [pc, #152]	; (8004e08 <prvAddNewTaskToReadyList+0xcc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d109      	bne.n	8004d8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d76:	4b23      	ldr	r3, [pc, #140]	; (8004e04 <prvAddNewTaskToReadyList+0xc8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d802      	bhi.n	8004d8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d84:	4a1f      	ldr	r2, [pc, #124]	; (8004e04 <prvAddNewTaskToReadyList+0xc8>)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d8a:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <prvAddNewTaskToReadyList+0xd0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	4a1e      	ldr	r2, [pc, #120]	; (8004e0c <prvAddNewTaskToReadyList+0xd0>)
 8004d92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d94:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <prvAddNewTaskToReadyList+0xd0>)
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da0:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <prvAddNewTaskToReadyList+0xd4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d903      	bls.n	8004db0 <prvAddNewTaskToReadyList+0x74>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dac:	4a18      	ldr	r2, [pc, #96]	; (8004e10 <prvAddNewTaskToReadyList+0xd4>)
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <prvAddNewTaskToReadyList+0xd8>)
 8004dbe:	441a      	add	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f7ff f88d 	bl	8003ee6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004dcc:	f001 fa2a 	bl	8006224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004dd0:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <prvAddNewTaskToReadyList+0xcc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00e      	beq.n	8004df6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004dd8:	4b0a      	ldr	r3, [pc, #40]	; (8004e04 <prvAddNewTaskToReadyList+0xc8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d207      	bcs.n	8004df6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <prvAddNewTaskToReadyList+0xdc>)
 8004de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000d0c 	.word	0x20000d0c
 8004e04:	20000838 	.word	0x20000838
 8004e08:	20000d18 	.word	0x20000d18
 8004e0c:	20000d28 	.word	0x20000d28
 8004e10:	20000d14 	.word	0x20000d14
 8004e14:	2000083c 	.word	0x2000083c
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d017      	beq.n	8004e5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e2e:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <vTaskDelay+0x60>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <vTaskDelay+0x30>
	__asm volatile
 8004e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	60bb      	str	r3, [r7, #8]
}
 8004e48:	bf00      	nop
 8004e4a:	e7fe      	b.n	8004e4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e4c:	f000 f880 	bl	8004f50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e50:	2100      	movs	r1, #0
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fcea 	bl	800582c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e58:	f000 f888 	bl	8004f6c <xTaskResumeAll>
 8004e5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d107      	bne.n	8004e74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <vTaskDelay+0x64>)
 8004e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20000d34 	.word	0x20000d34
 8004e80:	e000ed04 	.word	0xe000ed04

08004e84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	; 0x28
 8004e88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e92:	463a      	mov	r2, r7
 8004e94:	1d39      	adds	r1, r7, #4
 8004e96:	f107 0308 	add.w	r3, r7, #8
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe ffc2 	bl	8003e24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	9202      	str	r2, [sp, #8]
 8004ea8:	9301      	str	r3, [sp, #4]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	460a      	mov	r2, r1
 8004eb2:	4921      	ldr	r1, [pc, #132]	; (8004f38 <vTaskStartScheduler+0xb4>)
 8004eb4:	4821      	ldr	r0, [pc, #132]	; (8004f3c <vTaskStartScheduler+0xb8>)
 8004eb6:	f7ff fe0f 	bl	8004ad8 <xTaskCreateStatic>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	4a20      	ldr	r2, [pc, #128]	; (8004f40 <vTaskStartScheduler+0xbc>)
 8004ebe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ec0:	4b1f      	ldr	r3, [pc, #124]	; (8004f40 <vTaskStartScheduler+0xbc>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	e001      	b.n	8004ed2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d102      	bne.n	8004ede <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ed8:	f000 fcfc 	bl	80058d4 <xTimerCreateTimerTask>
 8004edc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d116      	bne.n	8004f12 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	613b      	str	r3, [r7, #16]
}
 8004ef6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ef8:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <vTaskStartScheduler+0xc0>)
 8004efa:	f04f 32ff 	mov.w	r2, #4294967295
 8004efe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f00:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <vTaskStartScheduler+0xc4>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f06:	4b11      	ldr	r3, [pc, #68]	; (8004f4c <vTaskStartScheduler+0xc8>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f0c:	f001 f8b8 	bl	8006080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f10:	e00e      	b.n	8004f30 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d10a      	bne.n	8004f30 <vTaskStartScheduler+0xac>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	60fb      	str	r3, [r7, #12]
}
 8004f2c:	bf00      	nop
 8004f2e:	e7fe      	b.n	8004f2e <vTaskStartScheduler+0xaa>
}
 8004f30:	bf00      	nop
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	080068a8 	.word	0x080068a8
 8004f3c:	08005569 	.word	0x08005569
 8004f40:	20000d30 	.word	0x20000d30
 8004f44:	20000d2c 	.word	0x20000d2c
 8004f48:	20000d18 	.word	0x20000d18
 8004f4c:	20000d10 	.word	0x20000d10

08004f50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f54:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <vTaskSuspendAll+0x18>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	4a03      	ldr	r2, [pc, #12]	; (8004f68 <vTaskSuspendAll+0x18>)
 8004f5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f5e:	bf00      	nop
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	20000d34 	.word	0x20000d34

08004f6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f7a:	4b42      	ldr	r3, [pc, #264]	; (8005084 <xTaskResumeAll+0x118>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <xTaskResumeAll+0x2c>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	603b      	str	r3, [r7, #0]
}
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f98:	f001 f914 	bl	80061c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f9c:	4b39      	ldr	r3, [pc, #228]	; (8005084 <xTaskResumeAll+0x118>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	4a38      	ldr	r2, [pc, #224]	; (8005084 <xTaskResumeAll+0x118>)
 8004fa4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fa6:	4b37      	ldr	r3, [pc, #220]	; (8005084 <xTaskResumeAll+0x118>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d162      	bne.n	8005074 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004fae:	4b36      	ldr	r3, [pc, #216]	; (8005088 <xTaskResumeAll+0x11c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d05e      	beq.n	8005074 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fb6:	e02f      	b.n	8005018 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb8:	4b34      	ldr	r3, [pc, #208]	; (800508c <xTaskResumeAll+0x120>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3318      	adds	r3, #24
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fe ffeb 	bl	8003fa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe ffe6 	bl	8003fa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd8:	4b2d      	ldr	r3, [pc, #180]	; (8005090 <xTaskResumeAll+0x124>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d903      	bls.n	8004fe8 <xTaskResumeAll+0x7c>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	4a2a      	ldr	r2, [pc, #168]	; (8005090 <xTaskResumeAll+0x124>)
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4a27      	ldr	r2, [pc, #156]	; (8005094 <xTaskResumeAll+0x128>)
 8004ff6:	441a      	add	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f7fe ff71 	bl	8003ee6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005008:	4b23      	ldr	r3, [pc, #140]	; (8005098 <xTaskResumeAll+0x12c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	429a      	cmp	r2, r3
 8005010:	d302      	bcc.n	8005018 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005012:	4b22      	ldr	r3, [pc, #136]	; (800509c <xTaskResumeAll+0x130>)
 8005014:	2201      	movs	r2, #1
 8005016:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005018:	4b1c      	ldr	r3, [pc, #112]	; (800508c <xTaskResumeAll+0x120>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1cb      	bne.n	8004fb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005026:	f000 fb55 	bl	80056d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800502a:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <xTaskResumeAll+0x134>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d010      	beq.n	8005058 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005036:	f000 f847 	bl	80050c8 <xTaskIncrementTick>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005040:	4b16      	ldr	r3, [pc, #88]	; (800509c <xTaskResumeAll+0x130>)
 8005042:	2201      	movs	r2, #1
 8005044:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3b01      	subs	r3, #1
 800504a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f1      	bne.n	8005036 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005052:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <xTaskResumeAll+0x134>)
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005058:	4b10      	ldr	r3, [pc, #64]	; (800509c <xTaskResumeAll+0x130>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d009      	beq.n	8005074 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005060:	2301      	movs	r3, #1
 8005062:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005064:	4b0f      	ldr	r3, [pc, #60]	; (80050a4 <xTaskResumeAll+0x138>)
 8005066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005074:	f001 f8d6 	bl	8006224 <vPortExitCritical>

	return xAlreadyYielded;
 8005078:	68bb      	ldr	r3, [r7, #8]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000d34 	.word	0x20000d34
 8005088:	20000d0c 	.word	0x20000d0c
 800508c:	20000ccc 	.word	0x20000ccc
 8005090:	20000d14 	.word	0x20000d14
 8005094:	2000083c 	.word	0x2000083c
 8005098:	20000838 	.word	0x20000838
 800509c:	20000d20 	.word	0x20000d20
 80050a0:	20000d1c 	.word	0x20000d1c
 80050a4:	e000ed04 	.word	0xe000ed04

080050a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <xTaskGetTickCount+0x1c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050b4:	687b      	ldr	r3, [r7, #4]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	20000d10 	.word	0x20000d10

080050c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050d2:	4b4f      	ldr	r3, [pc, #316]	; (8005210 <xTaskIncrementTick+0x148>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f040 808f 	bne.w	80051fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050dc:	4b4d      	ldr	r3, [pc, #308]	; (8005214 <xTaskIncrementTick+0x14c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3301      	adds	r3, #1
 80050e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050e4:	4a4b      	ldr	r2, [pc, #300]	; (8005214 <xTaskIncrementTick+0x14c>)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d120      	bne.n	8005132 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80050f0:	4b49      	ldr	r3, [pc, #292]	; (8005218 <xTaskIncrementTick+0x150>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <xTaskIncrementTick+0x48>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	603b      	str	r3, [r7, #0]
}
 800510c:	bf00      	nop
 800510e:	e7fe      	b.n	800510e <xTaskIncrementTick+0x46>
 8005110:	4b41      	ldr	r3, [pc, #260]	; (8005218 <xTaskIncrementTick+0x150>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	4b41      	ldr	r3, [pc, #260]	; (800521c <xTaskIncrementTick+0x154>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a3f      	ldr	r2, [pc, #252]	; (8005218 <xTaskIncrementTick+0x150>)
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	4a3f      	ldr	r2, [pc, #252]	; (800521c <xTaskIncrementTick+0x154>)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	4b3e      	ldr	r3, [pc, #248]	; (8005220 <xTaskIncrementTick+0x158>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3301      	adds	r3, #1
 800512a:	4a3d      	ldr	r2, [pc, #244]	; (8005220 <xTaskIncrementTick+0x158>)
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	f000 fad1 	bl	80056d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005132:	4b3c      	ldr	r3, [pc, #240]	; (8005224 <xTaskIncrementTick+0x15c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	429a      	cmp	r2, r3
 800513a:	d349      	bcc.n	80051d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800513c:	4b36      	ldr	r3, [pc, #216]	; (8005218 <xTaskIncrementTick+0x150>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d104      	bne.n	8005150 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005146:	4b37      	ldr	r3, [pc, #220]	; (8005224 <xTaskIncrementTick+0x15c>)
 8005148:	f04f 32ff 	mov.w	r2, #4294967295
 800514c:	601a      	str	r2, [r3, #0]
					break;
 800514e:	e03f      	b.n	80051d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005150:	4b31      	ldr	r3, [pc, #196]	; (8005218 <xTaskIncrementTick+0x150>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	429a      	cmp	r2, r3
 8005166:	d203      	bcs.n	8005170 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005168:	4a2e      	ldr	r2, [pc, #184]	; (8005224 <xTaskIncrementTick+0x15c>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800516e:	e02f      	b.n	80051d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	3304      	adds	r3, #4
 8005174:	4618      	mov	r0, r3
 8005176:	f7fe ff13 	bl	8003fa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	2b00      	cmp	r3, #0
 8005180:	d004      	beq.n	800518c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	3318      	adds	r3, #24
 8005186:	4618      	mov	r0, r3
 8005188:	f7fe ff0a 	bl	8003fa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005190:	4b25      	ldr	r3, [pc, #148]	; (8005228 <xTaskIncrementTick+0x160>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d903      	bls.n	80051a0 <xTaskIncrementTick+0xd8>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	4a22      	ldr	r2, [pc, #136]	; (8005228 <xTaskIncrementTick+0x160>)
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4a1f      	ldr	r2, [pc, #124]	; (800522c <xTaskIncrementTick+0x164>)
 80051ae:	441a      	add	r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	3304      	adds	r3, #4
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f7fe fe95 	bl	8003ee6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c0:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <xTaskIncrementTick+0x168>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d3b8      	bcc.n	800513c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80051ca:	2301      	movs	r3, #1
 80051cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ce:	e7b5      	b.n	800513c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80051d0:	4b17      	ldr	r3, [pc, #92]	; (8005230 <xTaskIncrementTick+0x168>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d6:	4915      	ldr	r1, [pc, #84]	; (800522c <xTaskIncrementTick+0x164>)
 80051d8:	4613      	mov	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d901      	bls.n	80051ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80051e8:	2301      	movs	r3, #1
 80051ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80051ec:	4b11      	ldr	r3, [pc, #68]	; (8005234 <xTaskIncrementTick+0x16c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	e004      	b.n	8005204 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80051fa:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <xTaskIncrementTick+0x170>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3301      	adds	r3, #1
 8005200:	4a0d      	ldr	r2, [pc, #52]	; (8005238 <xTaskIncrementTick+0x170>)
 8005202:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005204:	697b      	ldr	r3, [r7, #20]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000d34 	.word	0x20000d34
 8005214:	20000d10 	.word	0x20000d10
 8005218:	20000cc4 	.word	0x20000cc4
 800521c:	20000cc8 	.word	0x20000cc8
 8005220:	20000d24 	.word	0x20000d24
 8005224:	20000d2c 	.word	0x20000d2c
 8005228:	20000d14 	.word	0x20000d14
 800522c:	2000083c 	.word	0x2000083c
 8005230:	20000838 	.word	0x20000838
 8005234:	20000d20 	.word	0x20000d20
 8005238:	20000d1c 	.word	0x20000d1c

0800523c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005242:	4b28      	ldr	r3, [pc, #160]	; (80052e4 <vTaskSwitchContext+0xa8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800524a:	4b27      	ldr	r3, [pc, #156]	; (80052e8 <vTaskSwitchContext+0xac>)
 800524c:	2201      	movs	r2, #1
 800524e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005250:	e041      	b.n	80052d6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005252:	4b25      	ldr	r3, [pc, #148]	; (80052e8 <vTaskSwitchContext+0xac>)
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005258:	4b24      	ldr	r3, [pc, #144]	; (80052ec <vTaskSwitchContext+0xb0>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	e010      	b.n	8005282 <vTaskSwitchContext+0x46>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10a      	bne.n	800527c <vTaskSwitchContext+0x40>
	__asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	607b      	str	r3, [r7, #4]
}
 8005278:	bf00      	nop
 800527a:	e7fe      	b.n	800527a <vTaskSwitchContext+0x3e>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3b01      	subs	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	491b      	ldr	r1, [pc, #108]	; (80052f0 <vTaskSwitchContext+0xb4>)
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	440b      	add	r3, r1
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0e4      	beq.n	8005260 <vTaskSwitchContext+0x24>
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4a13      	ldr	r2, [pc, #76]	; (80052f0 <vTaskSwitchContext+0xb4>)
 80052a2:	4413      	add	r3, r2
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	605a      	str	r2, [r3, #4]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	3308      	adds	r3, #8
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d104      	bne.n	80052c6 <vTaskSwitchContext+0x8a>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	605a      	str	r2, [r3, #4]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	4a09      	ldr	r2, [pc, #36]	; (80052f4 <vTaskSwitchContext+0xb8>)
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	4a06      	ldr	r2, [pc, #24]	; (80052ec <vTaskSwitchContext+0xb0>)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6013      	str	r3, [r2, #0]
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	20000d34 	.word	0x20000d34
 80052e8:	20000d20 	.word	0x20000d20
 80052ec:	20000d14 	.word	0x20000d14
 80052f0:	2000083c 	.word	0x2000083c
 80052f4:	20000838 	.word	0x20000838

080052f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10a      	bne.n	800531e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	60fb      	str	r3, [r7, #12]
}
 800531a:	bf00      	nop
 800531c:	e7fe      	b.n	800531c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800531e:	4b07      	ldr	r3, [pc, #28]	; (800533c <vTaskPlaceOnEventList+0x44>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3318      	adds	r3, #24
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fe fe01 	bl	8003f2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800532c:	2101      	movs	r1, #1
 800532e:	6838      	ldr	r0, [r7, #0]
 8005330:	f000 fa7c 	bl	800582c <prvAddCurrentTaskToDelayedList>
}
 8005334:	bf00      	nop
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	20000838 	.word	0x20000838

08005340 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	617b      	str	r3, [r7, #20]
}
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <vTaskPlaceOnEventListRestricted+0x54>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3318      	adds	r3, #24
 800536e:	4619      	mov	r1, r3
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f7fe fdb8 	bl	8003ee6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800537c:	f04f 33ff 	mov.w	r3, #4294967295
 8005380:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	68b8      	ldr	r0, [r7, #8]
 8005386:	f000 fa51 	bl	800582c <prvAddCurrentTaskToDelayedList>
	}
 800538a:	bf00      	nop
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20000838 	.word	0x20000838

08005398 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	60fb      	str	r3, [r7, #12]
}
 80053c0:	bf00      	nop
 80053c2:	e7fe      	b.n	80053c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	3318      	adds	r3, #24
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fe fde9 	bl	8003fa0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053ce:	4b1e      	ldr	r3, [pc, #120]	; (8005448 <xTaskRemoveFromEventList+0xb0>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d11d      	bne.n	8005412 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	3304      	adds	r3, #4
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fe fde0 	bl	8003fa0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e4:	4b19      	ldr	r3, [pc, #100]	; (800544c <xTaskRemoveFromEventList+0xb4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d903      	bls.n	80053f4 <xTaskRemoveFromEventList+0x5c>
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	4a16      	ldr	r2, [pc, #88]	; (800544c <xTaskRemoveFromEventList+0xb4>)
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4a13      	ldr	r2, [pc, #76]	; (8005450 <xTaskRemoveFromEventList+0xb8>)
 8005402:	441a      	add	r2, r3
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	3304      	adds	r3, #4
 8005408:	4619      	mov	r1, r3
 800540a:	4610      	mov	r0, r2
 800540c:	f7fe fd6b 	bl	8003ee6 <vListInsertEnd>
 8005410:	e005      	b.n	800541e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3318      	adds	r3, #24
 8005416:	4619      	mov	r1, r3
 8005418:	480e      	ldr	r0, [pc, #56]	; (8005454 <xTaskRemoveFromEventList+0xbc>)
 800541a:	f7fe fd64 	bl	8003ee6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <xTaskRemoveFromEventList+0xc0>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005428:	429a      	cmp	r2, r3
 800542a:	d905      	bls.n	8005438 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800542c:	2301      	movs	r3, #1
 800542e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005430:	4b0a      	ldr	r3, [pc, #40]	; (800545c <xTaskRemoveFromEventList+0xc4>)
 8005432:	2201      	movs	r2, #1
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	e001      	b.n	800543c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800543c:	697b      	ldr	r3, [r7, #20]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000d34 	.word	0x20000d34
 800544c:	20000d14 	.word	0x20000d14
 8005450:	2000083c 	.word	0x2000083c
 8005454:	20000ccc 	.word	0x20000ccc
 8005458:	20000838 	.word	0x20000838
 800545c:	20000d20 	.word	0x20000d20

08005460 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005468:	4b06      	ldr	r3, [pc, #24]	; (8005484 <vTaskInternalSetTimeOutState+0x24>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <vTaskInternalSetTimeOutState+0x28>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	605a      	str	r2, [r3, #4]
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	20000d24 	.word	0x20000d24
 8005488:	20000d10 	.word	0x20000d10

0800548c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	613b      	str	r3, [r7, #16]
}
 80054ae:	bf00      	nop
 80054b0:	e7fe      	b.n	80054b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10a      	bne.n	80054ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	60fb      	str	r3, [r7, #12]
}
 80054ca:	bf00      	nop
 80054cc:	e7fe      	b.n	80054cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80054ce:	f000 fe79 	bl	80061c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054d2:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <xTaskCheckForTimeOut+0xbc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ea:	d102      	bne.n	80054f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	e023      	b.n	800553a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	4b15      	ldr	r3, [pc, #84]	; (800554c <xTaskCheckForTimeOut+0xc0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d007      	beq.n	800550e <xTaskCheckForTimeOut+0x82>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	429a      	cmp	r2, r3
 8005506:	d302      	bcc.n	800550e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005508:	2301      	movs	r3, #1
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	e015      	b.n	800553a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	429a      	cmp	r2, r3
 8005516:	d20b      	bcs.n	8005530 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	1ad2      	subs	r2, r2, r3
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff ff9b 	bl	8005460 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800552a:	2300      	movs	r3, #0
 800552c:	61fb      	str	r3, [r7, #28]
 800552e:	e004      	b.n	800553a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005536:	2301      	movs	r3, #1
 8005538:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800553a:	f000 fe73 	bl	8006224 <vPortExitCritical>

	return xReturn;
 800553e:	69fb      	ldr	r3, [r7, #28]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3720      	adds	r7, #32
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20000d10 	.word	0x20000d10
 800554c:	20000d24 	.word	0x20000d24

08005550 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005554:	4b03      	ldr	r3, [pc, #12]	; (8005564 <vTaskMissedYield+0x14>)
 8005556:	2201      	movs	r2, #1
 8005558:	601a      	str	r2, [r3, #0]
}
 800555a:	bf00      	nop
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	20000d20 	.word	0x20000d20

08005568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005570:	f000 f852 	bl	8005618 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005574:	4b06      	ldr	r3, [pc, #24]	; (8005590 <prvIdleTask+0x28>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d9f9      	bls.n	8005570 <prvIdleTask+0x8>
			{
				taskYIELD();
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <prvIdleTask+0x2c>)
 800557e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800558c:	e7f0      	b.n	8005570 <prvIdleTask+0x8>
 800558e:	bf00      	nop
 8005590:	2000083c 	.word	0x2000083c
 8005594:	e000ed04 	.word	0xe000ed04

08005598 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800559e:	2300      	movs	r3, #0
 80055a0:	607b      	str	r3, [r7, #4]
 80055a2:	e00c      	b.n	80055be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4a12      	ldr	r2, [pc, #72]	; (80055f8 <prvInitialiseTaskLists+0x60>)
 80055b0:	4413      	add	r3, r2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe fc6a 	bl	8003e8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3301      	adds	r3, #1
 80055bc:	607b      	str	r3, [r7, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b37      	cmp	r3, #55	; 0x37
 80055c2:	d9ef      	bls.n	80055a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055c4:	480d      	ldr	r0, [pc, #52]	; (80055fc <prvInitialiseTaskLists+0x64>)
 80055c6:	f7fe fc61 	bl	8003e8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055ca:	480d      	ldr	r0, [pc, #52]	; (8005600 <prvInitialiseTaskLists+0x68>)
 80055cc:	f7fe fc5e 	bl	8003e8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055d0:	480c      	ldr	r0, [pc, #48]	; (8005604 <prvInitialiseTaskLists+0x6c>)
 80055d2:	f7fe fc5b 	bl	8003e8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055d6:	480c      	ldr	r0, [pc, #48]	; (8005608 <prvInitialiseTaskLists+0x70>)
 80055d8:	f7fe fc58 	bl	8003e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055dc:	480b      	ldr	r0, [pc, #44]	; (800560c <prvInitialiseTaskLists+0x74>)
 80055de:	f7fe fc55 	bl	8003e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055e2:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <prvInitialiseTaskLists+0x78>)
 80055e4:	4a05      	ldr	r2, [pc, #20]	; (80055fc <prvInitialiseTaskLists+0x64>)
 80055e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055e8:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <prvInitialiseTaskLists+0x7c>)
 80055ea:	4a05      	ldr	r2, [pc, #20]	; (8005600 <prvInitialiseTaskLists+0x68>)
 80055ec:	601a      	str	r2, [r3, #0]
}
 80055ee:	bf00      	nop
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	2000083c 	.word	0x2000083c
 80055fc:	20000c9c 	.word	0x20000c9c
 8005600:	20000cb0 	.word	0x20000cb0
 8005604:	20000ccc 	.word	0x20000ccc
 8005608:	20000ce0 	.word	0x20000ce0
 800560c:	20000cf8 	.word	0x20000cf8
 8005610:	20000cc4 	.word	0x20000cc4
 8005614:	20000cc8 	.word	0x20000cc8

08005618 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800561e:	e019      	b.n	8005654 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005620:	f000 fdd0 	bl	80061c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005624:	4b10      	ldr	r3, [pc, #64]	; (8005668 <prvCheckTasksWaitingTermination+0x50>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	4618      	mov	r0, r3
 8005632:	f7fe fcb5 	bl	8003fa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005636:	4b0d      	ldr	r3, [pc, #52]	; (800566c <prvCheckTasksWaitingTermination+0x54>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3b01      	subs	r3, #1
 800563c:	4a0b      	ldr	r2, [pc, #44]	; (800566c <prvCheckTasksWaitingTermination+0x54>)
 800563e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005640:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <prvCheckTasksWaitingTermination+0x58>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3b01      	subs	r3, #1
 8005646:	4a0a      	ldr	r2, [pc, #40]	; (8005670 <prvCheckTasksWaitingTermination+0x58>)
 8005648:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800564a:	f000 fdeb 	bl	8006224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f810 	bl	8005674 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005654:	4b06      	ldr	r3, [pc, #24]	; (8005670 <prvCheckTasksWaitingTermination+0x58>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e1      	bne.n	8005620 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800565c:	bf00      	nop
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000ce0 	.word	0x20000ce0
 800566c:	20000d0c 	.word	0x20000d0c
 8005670:	20000cf4 	.word	0x20000cf4

08005674 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005682:	2b00      	cmp	r3, #0
 8005684:	d108      	bne.n	8005698 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	4618      	mov	r0, r3
 800568c:	f000 ff88 	bl	80065a0 <vPortFree>
				vPortFree( pxTCB );
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 ff85 	bl	80065a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005696:	e018      	b.n	80056ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d103      	bne.n	80056aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 ff7c 	bl	80065a0 <vPortFree>
	}
 80056a8:	e00f      	b.n	80056ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d00a      	beq.n	80056ca <prvDeleteTCB+0x56>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	60fb      	str	r3, [r7, #12]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <prvDeleteTCB+0x54>
	}
 80056ca:	bf00      	nop
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056da:	4b0c      	ldr	r3, [pc, #48]	; (800570c <prvResetNextTaskUnblockTime+0x38>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056e4:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <prvResetNextTaskUnblockTime+0x3c>)
 80056e6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056ec:	e008      	b.n	8005700 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ee:	4b07      	ldr	r3, [pc, #28]	; (800570c <prvResetNextTaskUnblockTime+0x38>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4a04      	ldr	r2, [pc, #16]	; (8005710 <prvResetNextTaskUnblockTime+0x3c>)
 80056fe:	6013      	str	r3, [r2, #0]
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	20000cc4 	.word	0x20000cc4
 8005710:	20000d2c 	.word	0x20000d2c

08005714 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800571a:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <xTaskGetSchedulerState+0x34>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d102      	bne.n	8005728 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005722:	2301      	movs	r3, #1
 8005724:	607b      	str	r3, [r7, #4]
 8005726:	e008      	b.n	800573a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005728:	4b08      	ldr	r3, [pc, #32]	; (800574c <xTaskGetSchedulerState+0x38>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d102      	bne.n	8005736 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005730:	2302      	movs	r3, #2
 8005732:	607b      	str	r3, [r7, #4]
 8005734:	e001      	b.n	800573a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800573a:	687b      	ldr	r3, [r7, #4]
	}
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	20000d18 	.word	0x20000d18
 800574c:	20000d34 	.word	0x20000d34

08005750 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d056      	beq.n	8005814 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005766:	4b2e      	ldr	r3, [pc, #184]	; (8005820 <xTaskPriorityDisinherit+0xd0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	429a      	cmp	r2, r3
 800576e:	d00a      	beq.n	8005786 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	60fb      	str	r3, [r7, #12]
}
 8005782:	bf00      	nop
 8005784:	e7fe      	b.n	8005784 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	60bb      	str	r3, [r7, #8]
}
 80057a0:	bf00      	nop
 80057a2:	e7fe      	b.n	80057a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a8:	1e5a      	subs	r2, r3, #1
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d02c      	beq.n	8005814 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d128      	bne.n	8005814 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	3304      	adds	r3, #4
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe fbea 	bl	8003fa0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e4:	4b0f      	ldr	r3, [pc, #60]	; (8005824 <xTaskPriorityDisinherit+0xd4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d903      	bls.n	80057f4 <xTaskPriorityDisinherit+0xa4>
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	4a0c      	ldr	r2, [pc, #48]	; (8005824 <xTaskPriorityDisinherit+0xd4>)
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4a09      	ldr	r2, [pc, #36]	; (8005828 <xTaskPriorityDisinherit+0xd8>)
 8005802:	441a      	add	r2, r3
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	3304      	adds	r3, #4
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f7fe fb6b 	bl	8003ee6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005810:	2301      	movs	r3, #1
 8005812:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005814:	697b      	ldr	r3, [r7, #20]
	}
 8005816:	4618      	mov	r0, r3
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20000838 	.word	0x20000838
 8005824:	20000d14 	.word	0x20000d14
 8005828:	2000083c 	.word	0x2000083c

0800582c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005836:	4b21      	ldr	r3, [pc, #132]	; (80058bc <prvAddCurrentTaskToDelayedList+0x90>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800583c:	4b20      	ldr	r3, [pc, #128]	; (80058c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3304      	adds	r3, #4
 8005842:	4618      	mov	r0, r3
 8005844:	f7fe fbac 	bl	8003fa0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584e:	d10a      	bne.n	8005866 <prvAddCurrentTaskToDelayedList+0x3a>
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d007      	beq.n	8005866 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005856:	4b1a      	ldr	r3, [pc, #104]	; (80058c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3304      	adds	r3, #4
 800585c:	4619      	mov	r1, r3
 800585e:	4819      	ldr	r0, [pc, #100]	; (80058c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005860:	f7fe fb41 	bl	8003ee6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005864:	e026      	b.n	80058b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4413      	add	r3, r2
 800586c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800586e:	4b14      	ldr	r3, [pc, #80]	; (80058c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	429a      	cmp	r2, r3
 800587c:	d209      	bcs.n	8005892 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800587e:	4b12      	ldr	r3, [pc, #72]	; (80058c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3304      	adds	r3, #4
 8005888:	4619      	mov	r1, r3
 800588a:	4610      	mov	r0, r2
 800588c:	f7fe fb4f 	bl	8003f2e <vListInsert>
}
 8005890:	e010      	b.n	80058b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005892:	4b0e      	ldr	r3, [pc, #56]	; (80058cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	4b0a      	ldr	r3, [pc, #40]	; (80058c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3304      	adds	r3, #4
 800589c:	4619      	mov	r1, r3
 800589e:	4610      	mov	r0, r2
 80058a0:	f7fe fb45 	bl	8003f2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058a4:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d202      	bcs.n	80058b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058ae:	4a08      	ldr	r2, [pc, #32]	; (80058d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	6013      	str	r3, [r2, #0]
}
 80058b4:	bf00      	nop
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20000d10 	.word	0x20000d10
 80058c0:	20000838 	.word	0x20000838
 80058c4:	20000cf8 	.word	0x20000cf8
 80058c8:	20000cc8 	.word	0x20000cc8
 80058cc:	20000cc4 	.word	0x20000cc4
 80058d0:	20000d2c 	.word	0x20000d2c

080058d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08a      	sub	sp, #40	; 0x28
 80058d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80058de:	f000 fb07 	bl	8005ef0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80058e2:	4b1c      	ldr	r3, [pc, #112]	; (8005954 <xTimerCreateTimerTask+0x80>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d021      	beq.n	800592e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80058f2:	1d3a      	adds	r2, r7, #4
 80058f4:	f107 0108 	add.w	r1, r7, #8
 80058f8:	f107 030c 	add.w	r3, r7, #12
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fe faab 	bl	8003e58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	9202      	str	r2, [sp, #8]
 800590a:	9301      	str	r3, [sp, #4]
 800590c:	2302      	movs	r3, #2
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	2300      	movs	r3, #0
 8005912:	460a      	mov	r2, r1
 8005914:	4910      	ldr	r1, [pc, #64]	; (8005958 <xTimerCreateTimerTask+0x84>)
 8005916:	4811      	ldr	r0, [pc, #68]	; (800595c <xTimerCreateTimerTask+0x88>)
 8005918:	f7ff f8de 	bl	8004ad8 <xTaskCreateStatic>
 800591c:	4603      	mov	r3, r0
 800591e:	4a10      	ldr	r2, [pc, #64]	; (8005960 <xTimerCreateTimerTask+0x8c>)
 8005920:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005922:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <xTimerCreateTimerTask+0x8c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800592a:	2301      	movs	r3, #1
 800592c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10a      	bne.n	800594a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	613b      	str	r3, [r7, #16]
}
 8005946:	bf00      	nop
 8005948:	e7fe      	b.n	8005948 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800594a:	697b      	ldr	r3, [r7, #20]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000d68 	.word	0x20000d68
 8005958:	080068b0 	.word	0x080068b0
 800595c:	08005a99 	.word	0x08005a99
 8005960:	20000d6c 	.word	0x20000d6c

08005964 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08a      	sub	sp, #40	; 0x28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005972:	2300      	movs	r3, #0
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <xTimerGenericCommand+0x2e>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	623b      	str	r3, [r7, #32]
}
 800598e:	bf00      	nop
 8005990:	e7fe      	b.n	8005990 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005992:	4b1a      	ldr	r3, [pc, #104]	; (80059fc <xTimerGenericCommand+0x98>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d02a      	beq.n	80059f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b05      	cmp	r3, #5
 80059aa:	dc18      	bgt.n	80059de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059ac:	f7ff feb2 	bl	8005714 <xTaskGetSchedulerState>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d109      	bne.n	80059ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059b6:	4b11      	ldr	r3, [pc, #68]	; (80059fc <xTimerGenericCommand+0x98>)
 80059b8:	6818      	ldr	r0, [r3, #0]
 80059ba:	f107 0110 	add.w	r1, r7, #16
 80059be:	2300      	movs	r3, #0
 80059c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059c2:	f7fe fca1 	bl	8004308 <xQueueGenericSend>
 80059c6:	6278      	str	r0, [r7, #36]	; 0x24
 80059c8:	e012      	b.n	80059f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059ca:	4b0c      	ldr	r3, [pc, #48]	; (80059fc <xTimerGenericCommand+0x98>)
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	f107 0110 	add.w	r1, r7, #16
 80059d2:	2300      	movs	r3, #0
 80059d4:	2200      	movs	r2, #0
 80059d6:	f7fe fc97 	bl	8004308 <xQueueGenericSend>
 80059da:	6278      	str	r0, [r7, #36]	; 0x24
 80059dc:	e008      	b.n	80059f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80059de:	4b07      	ldr	r3, [pc, #28]	; (80059fc <xTimerGenericCommand+0x98>)
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	f107 0110 	add.w	r1, r7, #16
 80059e6:	2300      	movs	r3, #0
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	f7fe fd8b 	bl	8004504 <xQueueGenericSendFromISR>
 80059ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3728      	adds	r7, #40	; 0x28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000d68 	.word	0x20000d68

08005a00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a0a:	4b22      	ldr	r3, [pc, #136]	; (8005a94 <prvProcessExpiredTimer+0x94>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fe fac1 	bl	8003fa0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d022      	beq.n	8005a72 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	699a      	ldr	r2, [r3, #24]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	18d1      	adds	r1, r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	6978      	ldr	r0, [r7, #20]
 8005a3a:	f000 f8d1 	bl	8005be0 <prvInsertTimerInActiveList>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d01f      	beq.n	8005a84 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a44:	2300      	movs	r3, #0
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	2300      	movs	r3, #0
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	6978      	ldr	r0, [r7, #20]
 8005a50:	f7ff ff88 	bl	8005964 <xTimerGenericCommand>
 8005a54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d113      	bne.n	8005a84 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	60fb      	str	r3, [r7, #12]
}
 8005a6e:	bf00      	nop
 8005a70:	e7fe      	b.n	8005a70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a78:	f023 0301 	bic.w	r3, r3, #1
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	6978      	ldr	r0, [r7, #20]
 8005a8a:	4798      	blx	r3
}
 8005a8c:	bf00      	nop
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20000d60 	.word	0x20000d60

08005a98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005aa0:	f107 0308 	add.w	r3, r7, #8
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 f857 	bl	8005b58 <prvGetNextExpireTime>
 8005aaa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 f803 	bl	8005abc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ab6:	f000 f8d5 	bl	8005c64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005aba:	e7f1      	b.n	8005aa0 <prvTimerTask+0x8>

08005abc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ac6:	f7ff fa43 	bl	8004f50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005aca:	f107 0308 	add.w	r3, r7, #8
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 f866 	bl	8005ba0 <prvSampleTimeNow>
 8005ad4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d130      	bne.n	8005b3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <prvProcessTimerOrBlockTask+0x3c>
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d806      	bhi.n	8005af8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005aea:	f7ff fa3f 	bl	8004f6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005aee:	68f9      	ldr	r1, [r7, #12]
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff ff85 	bl	8005a00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005af6:	e024      	b.n	8005b42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d008      	beq.n	8005b10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005afe:	4b13      	ldr	r3, [pc, #76]	; (8005b4c <prvProcessTimerOrBlockTask+0x90>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <prvProcessTimerOrBlockTask+0x50>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <prvProcessTimerOrBlockTask+0x52>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b10:	4b0f      	ldr	r3, [pc, #60]	; (8005b50 <prvProcessTimerOrBlockTask+0x94>)
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	f7fe ffa7 	bl	8004a70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b22:	f7ff fa23 	bl	8004f6c <xTaskResumeAll>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b2c:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <prvProcessTimerOrBlockTask+0x98>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	f3bf 8f6f 	isb	sy
}
 8005b3c:	e001      	b.n	8005b42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b3e:	f7ff fa15 	bl	8004f6c <xTaskResumeAll>
}
 8005b42:	bf00      	nop
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000d64 	.word	0x20000d64
 8005b50:	20000d68 	.word	0x20000d68
 8005b54:	e000ed04 	.word	0xe000ed04

08005b58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b60:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <prvGetNextExpireTime+0x44>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <prvGetNextExpireTime+0x16>
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	e000      	b.n	8005b70 <prvGetNextExpireTime+0x18>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d105      	bne.n	8005b88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b7c:	4b07      	ldr	r3, [pc, #28]	; (8005b9c <prvGetNextExpireTime+0x44>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	e001      	b.n	8005b8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	20000d60 	.word	0x20000d60

08005ba0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ba8:	f7ff fa7e 	bl	80050a8 <xTaskGetTickCount>
 8005bac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005bae:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <prvSampleTimeNow+0x3c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d205      	bcs.n	8005bc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005bb8:	f000 f936 	bl	8005e28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	e002      	b.n	8005bca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005bca:	4a04      	ldr	r2, [pc, #16]	; (8005bdc <prvSampleTimeNow+0x3c>)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000d70 	.word	0x20000d70

08005be0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d812      	bhi.n	8005c2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	1ad2      	subs	r2, r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d302      	bcc.n	8005c1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c14:	2301      	movs	r3, #1
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	e01b      	b.n	8005c52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c1a:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <prvInsertTimerInActiveList+0x7c>)
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3304      	adds	r3, #4
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f7fe f982 	bl	8003f2e <vListInsert>
 8005c2a:	e012      	b.n	8005c52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d206      	bcs.n	8005c42 <prvInsertTimerInActiveList+0x62>
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d302      	bcc.n	8005c42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e007      	b.n	8005c52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c42:	4b07      	ldr	r3, [pc, #28]	; (8005c60 <prvInsertTimerInActiveList+0x80>)
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	f7fe f96e 	bl	8003f2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c52:	697b      	ldr	r3, [r7, #20]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20000d64 	.word	0x20000d64
 8005c60:	20000d60 	.word	0x20000d60

08005c64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08e      	sub	sp, #56	; 0x38
 8005c68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c6a:	e0ca      	b.n	8005e02 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	da18      	bge.n	8005ca4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c72:	1d3b      	adds	r3, r7, #4
 8005c74:	3304      	adds	r3, #4
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	61fb      	str	r3, [r7, #28]
}
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c9a:	6850      	ldr	r0, [r2, #4]
 8005c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c9e:	6892      	ldr	r2, [r2, #8]
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f2c0 80ab 	blt.w	8005e02 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d004      	beq.n	8005cc2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fe f96f 	bl	8003fa0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff ff6b 	bl	8005ba0 <prvSampleTimeNow>
 8005cca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b09      	cmp	r3, #9
 8005cd0:	f200 8096 	bhi.w	8005e00 <prvProcessReceivedCommands+0x19c>
 8005cd4:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <prvProcessReceivedCommands+0x78>)
 8005cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cda:	bf00      	nop
 8005cdc:	08005d05 	.word	0x08005d05
 8005ce0:	08005d05 	.word	0x08005d05
 8005ce4:	08005d05 	.word	0x08005d05
 8005ce8:	08005d79 	.word	0x08005d79
 8005cec:	08005d8d 	.word	0x08005d8d
 8005cf0:	08005dd7 	.word	0x08005dd7
 8005cf4:	08005d05 	.word	0x08005d05
 8005cf8:	08005d05 	.word	0x08005d05
 8005cfc:	08005d79 	.word	0x08005d79
 8005d00:	08005d8d 	.word	0x08005d8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	18d1      	adds	r1, r2, r3
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d24:	f7ff ff5c 	bl	8005be0 <prvInsertTimerInActiveList>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d069      	beq.n	8005e02 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d05e      	beq.n	8005e02 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	441a      	add	r2, r3
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	2300      	movs	r3, #0
 8005d52:	2100      	movs	r1, #0
 8005d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d56:	f7ff fe05 	bl	8005964 <xTimerGenericCommand>
 8005d5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d14f      	bne.n	8005e02 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	61bb      	str	r3, [r7, #24]
}
 8005d74:	bf00      	nop
 8005d76:	e7fe      	b.n	8005d76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d7e:	f023 0301 	bic.w	r3, r3, #1
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005d8a:	e03a      	b.n	8005e02 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d92:	f043 0301 	orr.w	r3, r3, #1
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	617b      	str	r3, [r7, #20]
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	18d1      	adds	r1, r2, r3
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dd0:	f7ff ff06 	bl	8005be0 <prvInsertTimerInActiveList>
					break;
 8005dd4:	e015      	b.n	8005e02 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d103      	bne.n	8005dec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005de6:	f000 fbdb 	bl	80065a0 <vPortFree>
 8005dea:	e00a      	b.n	8005e02 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005df2:	f023 0301 	bic.w	r3, r3, #1
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005dfe:	e000      	b.n	8005e02 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005e00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e02:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <prvProcessReceivedCommands+0x1c0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	1d39      	adds	r1, r7, #4
 8005e08:	2200      	movs	r2, #0
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fe fc16 	bl	800463c <xQueueReceive>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f47f af2a 	bne.w	8005c6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005e18:	bf00      	nop
 8005e1a:	bf00      	nop
 8005e1c:	3730      	adds	r7, #48	; 0x30
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000d68 	.word	0x20000d68

08005e28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e2e:	e048      	b.n	8005ec2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e30:	4b2d      	ldr	r3, [pc, #180]	; (8005ee8 <prvSwitchTimerLists+0xc0>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e3a:	4b2b      	ldr	r3, [pc, #172]	; (8005ee8 <prvSwitchTimerLists+0xc0>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3304      	adds	r3, #4
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fe f8a9 	bl	8003fa0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d02e      	beq.n	8005ec2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d90e      	bls.n	8005e94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e82:	4b19      	ldr	r3, [pc, #100]	; (8005ee8 <prvSwitchTimerLists+0xc0>)
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	f7fe f84e 	bl	8003f2e <vListInsert>
 8005e92:	e016      	b.n	8005ec2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e94:	2300      	movs	r3, #0
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f7ff fd60 	bl	8005964 <xTimerGenericCommand>
 8005ea4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	603b      	str	r3, [r7, #0]
}
 8005ebe:	bf00      	nop
 8005ec0:	e7fe      	b.n	8005ec0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ec2:	4b09      	ldr	r3, [pc, #36]	; (8005ee8 <prvSwitchTimerLists+0xc0>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1b1      	bne.n	8005e30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ecc:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <prvSwitchTimerLists+0xc0>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ed2:	4b06      	ldr	r3, [pc, #24]	; (8005eec <prvSwitchTimerLists+0xc4>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a04      	ldr	r2, [pc, #16]	; (8005ee8 <prvSwitchTimerLists+0xc0>)
 8005ed8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005eda:	4a04      	ldr	r2, [pc, #16]	; (8005eec <prvSwitchTimerLists+0xc4>)
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	6013      	str	r3, [r2, #0]
}
 8005ee0:	bf00      	nop
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	20000d60 	.word	0x20000d60
 8005eec:	20000d64 	.word	0x20000d64

08005ef0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ef6:	f000 f965 	bl	80061c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005efa:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <prvCheckForValidListAndQueue+0x60>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d120      	bne.n	8005f44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f02:	4814      	ldr	r0, [pc, #80]	; (8005f54 <prvCheckForValidListAndQueue+0x64>)
 8005f04:	f7fd ffc2 	bl	8003e8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f08:	4813      	ldr	r0, [pc, #76]	; (8005f58 <prvCheckForValidListAndQueue+0x68>)
 8005f0a:	f7fd ffbf 	bl	8003e8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f0e:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <prvCheckForValidListAndQueue+0x6c>)
 8005f10:	4a10      	ldr	r2, [pc, #64]	; (8005f54 <prvCheckForValidListAndQueue+0x64>)
 8005f12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f14:	4b12      	ldr	r3, [pc, #72]	; (8005f60 <prvCheckForValidListAndQueue+0x70>)
 8005f16:	4a10      	ldr	r2, [pc, #64]	; (8005f58 <prvCheckForValidListAndQueue+0x68>)
 8005f18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <prvCheckForValidListAndQueue+0x74>)
 8005f20:	4a11      	ldr	r2, [pc, #68]	; (8005f68 <prvCheckForValidListAndQueue+0x78>)
 8005f22:	2110      	movs	r1, #16
 8005f24:	200a      	movs	r0, #10
 8005f26:	f7fe f8cd 	bl	80040c4 <xQueueGenericCreateStatic>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	4a08      	ldr	r2, [pc, #32]	; (8005f50 <prvCheckForValidListAndQueue+0x60>)
 8005f2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f30:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <prvCheckForValidListAndQueue+0x60>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f38:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <prvCheckForValidListAndQueue+0x60>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	490b      	ldr	r1, [pc, #44]	; (8005f6c <prvCheckForValidListAndQueue+0x7c>)
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe fd6c 	bl	8004a1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f44:	f000 f96e 	bl	8006224 <vPortExitCritical>
}
 8005f48:	bf00      	nop
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000d68 	.word	0x20000d68
 8005f54:	20000d38 	.word	0x20000d38
 8005f58:	20000d4c 	.word	0x20000d4c
 8005f5c:	20000d60 	.word	0x20000d60
 8005f60:	20000d64 	.word	0x20000d64
 8005f64:	20000e14 	.word	0x20000e14
 8005f68:	20000d74 	.word	0x20000d74
 8005f6c:	080068b8 	.word	0x080068b8

08005f70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3b04      	subs	r3, #4
 8005f80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3b04      	subs	r3, #4
 8005f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f023 0201 	bic.w	r2, r3, #1
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3b04      	subs	r3, #4
 8005f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fa0:	4a0c      	ldr	r2, [pc, #48]	; (8005fd4 <pxPortInitialiseStack+0x64>)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3b14      	subs	r3, #20
 8005faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3b04      	subs	r3, #4
 8005fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f06f 0202 	mvn.w	r2, #2
 8005fbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3b20      	subs	r3, #32
 8005fc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	08005fd9 	.word	0x08005fd9

08005fd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fe2:	4b12      	ldr	r3, [pc, #72]	; (800602c <prvTaskExitError+0x54>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fea:	d00a      	beq.n	8006002 <prvTaskExitError+0x2a>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	60fb      	str	r3, [r7, #12]
}
 8005ffe:	bf00      	nop
 8006000:	e7fe      	b.n	8006000 <prvTaskExitError+0x28>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	60bb      	str	r3, [r7, #8]
}
 8006014:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006016:	bf00      	nop
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0fc      	beq.n	8006018 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800601e:	bf00      	nop
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	2000000c 	.word	0x2000000c

08006030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006030:	4b07      	ldr	r3, [pc, #28]	; (8006050 <pxCurrentTCBConst2>)
 8006032:	6819      	ldr	r1, [r3, #0]
 8006034:	6808      	ldr	r0, [r1, #0]
 8006036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603a:	f380 8809 	msr	PSP, r0
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f04f 0000 	mov.w	r0, #0
 8006046:	f380 8811 	msr	BASEPRI, r0
 800604a:	4770      	bx	lr
 800604c:	f3af 8000 	nop.w

08006050 <pxCurrentTCBConst2>:
 8006050:	20000838 	.word	0x20000838
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop

08006058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006058:	4808      	ldr	r0, [pc, #32]	; (800607c <prvPortStartFirstTask+0x24>)
 800605a:	6800      	ldr	r0, [r0, #0]
 800605c:	6800      	ldr	r0, [r0, #0]
 800605e:	f380 8808 	msr	MSP, r0
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f380 8814 	msr	CONTROL, r0
 800606a:	b662      	cpsie	i
 800606c:	b661      	cpsie	f
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	df00      	svc	0
 8006078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800607a:	bf00      	nop
 800607c:	e000ed08 	.word	0xe000ed08

08006080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006086:	4b46      	ldr	r3, [pc, #280]	; (80061a0 <xPortStartScheduler+0x120>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a46      	ldr	r2, [pc, #280]	; (80061a4 <xPortStartScheduler+0x124>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10a      	bne.n	80060a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	613b      	str	r3, [r7, #16]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060a6:	4b3e      	ldr	r3, [pc, #248]	; (80061a0 <xPortStartScheduler+0x120>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a3f      	ldr	r2, [pc, #252]	; (80061a8 <xPortStartScheduler+0x128>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10a      	bne.n	80060c6 <xPortStartScheduler+0x46>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	60fb      	str	r3, [r7, #12]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060c6:	4b39      	ldr	r3, [pc, #228]	; (80061ac <xPortStartScheduler+0x12c>)
 80060c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	22ff      	movs	r2, #255	; 0xff
 80060d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	4b31      	ldr	r3, [pc, #196]	; (80061b0 <xPortStartScheduler+0x130>)
 80060ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060ee:	4b31      	ldr	r3, [pc, #196]	; (80061b4 <xPortStartScheduler+0x134>)
 80060f0:	2207      	movs	r2, #7
 80060f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060f4:	e009      	b.n	800610a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80060f6:	4b2f      	ldr	r3, [pc, #188]	; (80061b4 <xPortStartScheduler+0x134>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	4a2d      	ldr	r2, [pc, #180]	; (80061b4 <xPortStartScheduler+0x134>)
 80060fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	b2db      	uxtb	r3, r3
 8006108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d0ef      	beq.n	80060f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006116:	4b27      	ldr	r3, [pc, #156]	; (80061b4 <xPortStartScheduler+0x134>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f1c3 0307 	rsb	r3, r3, #7
 800611e:	2b04      	cmp	r3, #4
 8006120:	d00a      	beq.n	8006138 <xPortStartScheduler+0xb8>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	60bb      	str	r3, [r7, #8]
}
 8006134:	bf00      	nop
 8006136:	e7fe      	b.n	8006136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006138:	4b1e      	ldr	r3, [pc, #120]	; (80061b4 <xPortStartScheduler+0x134>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	021b      	lsls	r3, r3, #8
 800613e:	4a1d      	ldr	r2, [pc, #116]	; (80061b4 <xPortStartScheduler+0x134>)
 8006140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006142:	4b1c      	ldr	r3, [pc, #112]	; (80061b4 <xPortStartScheduler+0x134>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800614a:	4a1a      	ldr	r2, [pc, #104]	; (80061b4 <xPortStartScheduler+0x134>)
 800614c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	b2da      	uxtb	r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006156:	4b18      	ldr	r3, [pc, #96]	; (80061b8 <xPortStartScheduler+0x138>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <xPortStartScheduler+0x138>)
 800615c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <xPortStartScheduler+0x138>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a14      	ldr	r2, [pc, #80]	; (80061b8 <xPortStartScheduler+0x138>)
 8006168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800616c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800616e:	f000 f8dd 	bl	800632c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006172:	4b12      	ldr	r3, [pc, #72]	; (80061bc <xPortStartScheduler+0x13c>)
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006178:	f000 f8fc 	bl	8006374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800617c:	4b10      	ldr	r3, [pc, #64]	; (80061c0 <xPortStartScheduler+0x140>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a0f      	ldr	r2, [pc, #60]	; (80061c0 <xPortStartScheduler+0x140>)
 8006182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006188:	f7ff ff66 	bl	8006058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800618c:	f7ff f856 	bl	800523c <vTaskSwitchContext>
	prvTaskExitError();
 8006190:	f7ff ff22 	bl	8005fd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	e000ed00 	.word	0xe000ed00
 80061a4:	410fc271 	.word	0x410fc271
 80061a8:	410fc270 	.word	0x410fc270
 80061ac:	e000e400 	.word	0xe000e400
 80061b0:	20000e64 	.word	0x20000e64
 80061b4:	20000e68 	.word	0x20000e68
 80061b8:	e000ed20 	.word	0xe000ed20
 80061bc:	2000000c 	.word	0x2000000c
 80061c0:	e000ef34 	.word	0xe000ef34

080061c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	607b      	str	r3, [r7, #4]
}
 80061dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061de:	4b0f      	ldr	r3, [pc, #60]	; (800621c <vPortEnterCritical+0x58>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3301      	adds	r3, #1
 80061e4:	4a0d      	ldr	r2, [pc, #52]	; (800621c <vPortEnterCritical+0x58>)
 80061e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061e8:	4b0c      	ldr	r3, [pc, #48]	; (800621c <vPortEnterCritical+0x58>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10f      	bne.n	8006210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <vPortEnterCritical+0x5c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <vPortEnterCritical+0x4c>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	603b      	str	r3, [r7, #0]
}
 800620c:	bf00      	nop
 800620e:	e7fe      	b.n	800620e <vPortEnterCritical+0x4a>
	}
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	2000000c 	.word	0x2000000c
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <vPortExitCritical+0x50>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <vPortExitCritical+0x24>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	607b      	str	r3, [r7, #4]
}
 8006244:	bf00      	nop
 8006246:	e7fe      	b.n	8006246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006248:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <vPortExitCritical+0x50>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3b01      	subs	r3, #1
 800624e:	4a09      	ldr	r2, [pc, #36]	; (8006274 <vPortExitCritical+0x50>)
 8006250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006252:	4b08      	ldr	r3, [pc, #32]	; (8006274 <vPortExitCritical+0x50>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d105      	bne.n	8006266 <vPortExitCritical+0x42>
 800625a:	2300      	movs	r3, #0
 800625c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	f383 8811 	msr	BASEPRI, r3
}
 8006264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	2000000c 	.word	0x2000000c
	...

08006280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006280:	f3ef 8009 	mrs	r0, PSP
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <pxCurrentTCBConst>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	f01e 0f10 	tst.w	lr, #16
 8006290:	bf08      	it	eq
 8006292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629a:	6010      	str	r0, [r2, #0]
 800629c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062a4:	f380 8811 	msr	BASEPRI, r0
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f7fe ffc4 	bl	800523c <vTaskSwitchContext>
 80062b4:	f04f 0000 	mov.w	r0, #0
 80062b8:	f380 8811 	msr	BASEPRI, r0
 80062bc:	bc09      	pop	{r0, r3}
 80062be:	6819      	ldr	r1, [r3, #0]
 80062c0:	6808      	ldr	r0, [r1, #0]
 80062c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c6:	f01e 0f10 	tst.w	lr, #16
 80062ca:	bf08      	it	eq
 80062cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062d0:	f380 8809 	msr	PSP, r0
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	f3af 8000 	nop.w

080062e0 <pxCurrentTCBConst>:
 80062e0:	20000838 	.word	0x20000838
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop

080062e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	607b      	str	r3, [r7, #4]
}
 8006300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006302:	f7fe fee1 	bl	80050c8 <xTaskIncrementTick>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800630c:	4b06      	ldr	r3, [pc, #24]	; (8006328 <xPortSysTickHandler+0x40>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	2300      	movs	r3, #0
 8006316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f383 8811 	msr	BASEPRI, r3
}
 800631e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800632c:	b480      	push	{r7}
 800632e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <vPortSetupTimerInterrupt+0x34>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006336:	4b0b      	ldr	r3, [pc, #44]	; (8006364 <vPortSetupTimerInterrupt+0x38>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800633c:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <vPortSetupTimerInterrupt+0x3c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a0a      	ldr	r2, [pc, #40]	; (800636c <vPortSetupTimerInterrupt+0x40>)
 8006342:	fba2 2303 	umull	r2, r3, r2, r3
 8006346:	099b      	lsrs	r3, r3, #6
 8006348:	4a09      	ldr	r2, [pc, #36]	; (8006370 <vPortSetupTimerInterrupt+0x44>)
 800634a:	3b01      	subs	r3, #1
 800634c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800634e:	4b04      	ldr	r3, [pc, #16]	; (8006360 <vPortSetupTimerInterrupt+0x34>)
 8006350:	2207      	movs	r2, #7
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	e000e010 	.word	0xe000e010
 8006364:	e000e018 	.word	0xe000e018
 8006368:	20000000 	.word	0x20000000
 800636c:	10624dd3 	.word	0x10624dd3
 8006370:	e000e014 	.word	0xe000e014

08006374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006384 <vPortEnableVFP+0x10>
 8006378:	6801      	ldr	r1, [r0, #0]
 800637a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800637e:	6001      	str	r1, [r0, #0]
 8006380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006382:	bf00      	nop
 8006384:	e000ed88 	.word	0xe000ed88

08006388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800638e:	f3ef 8305 	mrs	r3, IPSR
 8006392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b0f      	cmp	r3, #15
 8006398:	d914      	bls.n	80063c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800639a:	4a17      	ldr	r2, [pc, #92]	; (80063f8 <vPortValidateInterruptPriority+0x70>)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063a4:	4b15      	ldr	r3, [pc, #84]	; (80063fc <vPortValidateInterruptPriority+0x74>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	7afa      	ldrb	r2, [r7, #11]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d20a      	bcs.n	80063c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	607b      	str	r3, [r7, #4]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063c4:	4b0e      	ldr	r3, [pc, #56]	; (8006400 <vPortValidateInterruptPriority+0x78>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063cc:	4b0d      	ldr	r3, [pc, #52]	; (8006404 <vPortValidateInterruptPriority+0x7c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d90a      	bls.n	80063ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	603b      	str	r3, [r7, #0]
}
 80063e6:	bf00      	nop
 80063e8:	e7fe      	b.n	80063e8 <vPortValidateInterruptPriority+0x60>
	}
 80063ea:	bf00      	nop
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	e000e3f0 	.word	0xe000e3f0
 80063fc:	20000e64 	.word	0x20000e64
 8006400:	e000ed0c 	.word	0xe000ed0c
 8006404:	20000e68 	.word	0x20000e68

08006408 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08a      	sub	sp, #40	; 0x28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006410:	2300      	movs	r3, #0
 8006412:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006414:	f7fe fd9c 	bl	8004f50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006418:	4b5b      	ldr	r3, [pc, #364]	; (8006588 <pvPortMalloc+0x180>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006420:	f000 f920 	bl	8006664 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006424:	4b59      	ldr	r3, [pc, #356]	; (800658c <pvPortMalloc+0x184>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4013      	ands	r3, r2
 800642c:	2b00      	cmp	r3, #0
 800642e:	f040 8093 	bne.w	8006558 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01d      	beq.n	8006474 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006438:	2208      	movs	r2, #8
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4413      	add	r3, r2
 800643e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	2b00      	cmp	r3, #0
 8006448:	d014      	beq.n	8006474 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f023 0307 	bic.w	r3, r3, #7
 8006450:	3308      	adds	r3, #8
 8006452:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <pvPortMalloc+0x6c>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	617b      	str	r3, [r7, #20]
}
 8006470:	bf00      	nop
 8006472:	e7fe      	b.n	8006472 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d06e      	beq.n	8006558 <pvPortMalloc+0x150>
 800647a:	4b45      	ldr	r3, [pc, #276]	; (8006590 <pvPortMalloc+0x188>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	429a      	cmp	r2, r3
 8006482:	d869      	bhi.n	8006558 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006484:	4b43      	ldr	r3, [pc, #268]	; (8006594 <pvPortMalloc+0x18c>)
 8006486:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006488:	4b42      	ldr	r3, [pc, #264]	; (8006594 <pvPortMalloc+0x18c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800648e:	e004      	b.n	800649a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d903      	bls.n	80064ac <pvPortMalloc+0xa4>
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1f1      	bne.n	8006490 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064ac:	4b36      	ldr	r3, [pc, #216]	; (8006588 <pvPortMalloc+0x180>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d050      	beq.n	8006558 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2208      	movs	r2, #8
 80064bc:	4413      	add	r3, r2
 80064be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	1ad2      	subs	r2, r2, r3
 80064d0:	2308      	movs	r3, #8
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d91f      	bls.n	8006518 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4413      	add	r3, r2
 80064de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	f003 0307 	and.w	r3, r3, #7
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <pvPortMalloc+0xf8>
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	613b      	str	r3, [r7, #16]
}
 80064fc:	bf00      	nop
 80064fe:	e7fe      	b.n	80064fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	1ad2      	subs	r2, r2, r3
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006512:	69b8      	ldr	r0, [r7, #24]
 8006514:	f000 f908 	bl	8006728 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006518:	4b1d      	ldr	r3, [pc, #116]	; (8006590 <pvPortMalloc+0x188>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	4a1b      	ldr	r2, [pc, #108]	; (8006590 <pvPortMalloc+0x188>)
 8006524:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006526:	4b1a      	ldr	r3, [pc, #104]	; (8006590 <pvPortMalloc+0x188>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4b1b      	ldr	r3, [pc, #108]	; (8006598 <pvPortMalloc+0x190>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d203      	bcs.n	800653a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006532:	4b17      	ldr	r3, [pc, #92]	; (8006590 <pvPortMalloc+0x188>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a18      	ldr	r2, [pc, #96]	; (8006598 <pvPortMalloc+0x190>)
 8006538:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	4b13      	ldr	r3, [pc, #76]	; (800658c <pvPortMalloc+0x184>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	431a      	orrs	r2, r3
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800654e:	4b13      	ldr	r3, [pc, #76]	; (800659c <pvPortMalloc+0x194>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3301      	adds	r3, #1
 8006554:	4a11      	ldr	r2, [pc, #68]	; (800659c <pvPortMalloc+0x194>)
 8006556:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006558:	f7fe fd08 	bl	8004f6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <pvPortMalloc+0x174>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	60fb      	str	r3, [r7, #12]
}
 8006578:	bf00      	nop
 800657a:	e7fe      	b.n	800657a <pvPortMalloc+0x172>
	return pvReturn;
 800657c:	69fb      	ldr	r3, [r7, #28]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3728      	adds	r7, #40	; 0x28
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	2000684c 	.word	0x2000684c
 800658c:	20006860 	.word	0x20006860
 8006590:	20006850 	.word	0x20006850
 8006594:	20006844 	.word	0x20006844
 8006598:	20006854 	.word	0x20006854
 800659c:	20006858 	.word	0x20006858

080065a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d04d      	beq.n	800664e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065b2:	2308      	movs	r3, #8
 80065b4:	425b      	negs	r3, r3
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	4413      	add	r3, r2
 80065ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	4b24      	ldr	r3, [pc, #144]	; (8006658 <vPortFree+0xb8>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4013      	ands	r3, r2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <vPortFree+0x44>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	60fb      	str	r3, [r7, #12]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <vPortFree+0x62>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	60bb      	str	r3, [r7, #8]
}
 80065fe:	bf00      	nop
 8006600:	e7fe      	b.n	8006600 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	4b14      	ldr	r3, [pc, #80]	; (8006658 <vPortFree+0xb8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4013      	ands	r3, r2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01e      	beq.n	800664e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d11a      	bne.n	800664e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	4b0e      	ldr	r3, [pc, #56]	; (8006658 <vPortFree+0xb8>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	43db      	mvns	r3, r3
 8006622:	401a      	ands	r2, r3
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006628:	f7fe fc92 	bl	8004f50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	4b0a      	ldr	r3, [pc, #40]	; (800665c <vPortFree+0xbc>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4413      	add	r3, r2
 8006636:	4a09      	ldr	r2, [pc, #36]	; (800665c <vPortFree+0xbc>)
 8006638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800663a:	6938      	ldr	r0, [r7, #16]
 800663c:	f000 f874 	bl	8006728 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006640:	4b07      	ldr	r3, [pc, #28]	; (8006660 <vPortFree+0xc0>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3301      	adds	r3, #1
 8006646:	4a06      	ldr	r2, [pc, #24]	; (8006660 <vPortFree+0xc0>)
 8006648:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800664a:	f7fe fc8f 	bl	8004f6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800664e:	bf00      	nop
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20006860 	.word	0x20006860
 800665c:	20006850 	.word	0x20006850
 8006660:	2000685c 	.word	0x2000685c

08006664 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800666a:	f645 13d8 	movw	r3, #23000	; 0x59d8
 800666e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006670:	4b27      	ldr	r3, [pc, #156]	; (8006710 <prvHeapInit+0xac>)
 8006672:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00c      	beq.n	8006698 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3307      	adds	r3, #7
 8006682:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f023 0307 	bic.w	r3, r3, #7
 800668a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	4a1f      	ldr	r2, [pc, #124]	; (8006710 <prvHeapInit+0xac>)
 8006694:	4413      	add	r3, r2
 8006696:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800669c:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <prvHeapInit+0xb0>)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066a2:	4b1c      	ldr	r3, [pc, #112]	; (8006714 <prvHeapInit+0xb0>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	4413      	add	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066b0:	2208      	movs	r2, #8
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0307 	bic.w	r3, r3, #7
 80066be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4a15      	ldr	r2, [pc, #84]	; (8006718 <prvHeapInit+0xb4>)
 80066c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066c6:	4b14      	ldr	r3, [pc, #80]	; (8006718 <prvHeapInit+0xb4>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2200      	movs	r2, #0
 80066cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066ce:	4b12      	ldr	r3, [pc, #72]	; (8006718 <prvHeapInit+0xb4>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	1ad2      	subs	r2, r2, r3
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066e4:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <prvHeapInit+0xb4>)
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	4a0a      	ldr	r2, [pc, #40]	; (800671c <prvHeapInit+0xb8>)
 80066f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	4a09      	ldr	r2, [pc, #36]	; (8006720 <prvHeapInit+0xbc>)
 80066fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066fc:	4b09      	ldr	r3, [pc, #36]	; (8006724 <prvHeapInit+0xc0>)
 80066fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006702:	601a      	str	r2, [r3, #0]
}
 8006704:	bf00      	nop
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	20000e6c 	.word	0x20000e6c
 8006714:	20006844 	.word	0x20006844
 8006718:	2000684c 	.word	0x2000684c
 800671c:	20006854 	.word	0x20006854
 8006720:	20006850 	.word	0x20006850
 8006724:	20006860 	.word	0x20006860

08006728 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006730:	4b28      	ldr	r3, [pc, #160]	; (80067d4 <prvInsertBlockIntoFreeList+0xac>)
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	e002      	b.n	800673c <prvInsertBlockIntoFreeList+0x14>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	429a      	cmp	r2, r3
 8006744:	d8f7      	bhi.n	8006736 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	4413      	add	r3, r2
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	429a      	cmp	r2, r3
 8006756:	d108      	bne.n	800676a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	441a      	add	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	441a      	add	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	d118      	bne.n	80067b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	4b15      	ldr	r3, [pc, #84]	; (80067d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d00d      	beq.n	80067a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	441a      	add	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	e008      	b.n	80067b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067a6:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <prvInsertBlockIntoFreeList+0xb0>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	e003      	b.n	80067b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d002      	beq.n	80067c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067c6:	bf00      	nop
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20006844 	.word	0x20006844
 80067d8:	2000684c 	.word	0x2000684c

080067dc <memset>:
 80067dc:	4402      	add	r2, r0
 80067de:	4603      	mov	r3, r0
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d100      	bne.n	80067e6 <memset+0xa>
 80067e4:	4770      	bx	lr
 80067e6:	f803 1b01 	strb.w	r1, [r3], #1
 80067ea:	e7f9      	b.n	80067e0 <memset+0x4>

080067ec <__libc_init_array>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	4d0d      	ldr	r5, [pc, #52]	; (8006824 <__libc_init_array+0x38>)
 80067f0:	4c0d      	ldr	r4, [pc, #52]	; (8006828 <__libc_init_array+0x3c>)
 80067f2:	1b64      	subs	r4, r4, r5
 80067f4:	10a4      	asrs	r4, r4, #2
 80067f6:	2600      	movs	r6, #0
 80067f8:	42a6      	cmp	r6, r4
 80067fa:	d109      	bne.n	8006810 <__libc_init_array+0x24>
 80067fc:	4d0b      	ldr	r5, [pc, #44]	; (800682c <__libc_init_array+0x40>)
 80067fe:	4c0c      	ldr	r4, [pc, #48]	; (8006830 <__libc_init_array+0x44>)
 8006800:	f000 f826 	bl	8006850 <_init>
 8006804:	1b64      	subs	r4, r4, r5
 8006806:	10a4      	asrs	r4, r4, #2
 8006808:	2600      	movs	r6, #0
 800680a:	42a6      	cmp	r6, r4
 800680c:	d105      	bne.n	800681a <__libc_init_array+0x2e>
 800680e:	bd70      	pop	{r4, r5, r6, pc}
 8006810:	f855 3b04 	ldr.w	r3, [r5], #4
 8006814:	4798      	blx	r3
 8006816:	3601      	adds	r6, #1
 8006818:	e7ee      	b.n	80067f8 <__libc_init_array+0xc>
 800681a:	f855 3b04 	ldr.w	r3, [r5], #4
 800681e:	4798      	blx	r3
 8006820:	3601      	adds	r6, #1
 8006822:	e7f2      	b.n	800680a <__libc_init_array+0x1e>
 8006824:	080069e0 	.word	0x080069e0
 8006828:	080069e0 	.word	0x080069e0
 800682c:	080069e0 	.word	0x080069e0
 8006830:	080069e4 	.word	0x080069e4

08006834 <memcpy>:
 8006834:	440a      	add	r2, r1
 8006836:	4291      	cmp	r1, r2
 8006838:	f100 33ff 	add.w	r3, r0, #4294967295
 800683c:	d100      	bne.n	8006840 <memcpy+0xc>
 800683e:	4770      	bx	lr
 8006840:	b510      	push	{r4, lr}
 8006842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800684a:	4291      	cmp	r1, r2
 800684c:	d1f9      	bne.n	8006842 <memcpy+0xe>
 800684e:	bd10      	pop	{r4, pc}

08006850 <_init>:
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	bf00      	nop
 8006854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006856:	bc08      	pop	{r3}
 8006858:	469e      	mov	lr, r3
 800685a:	4770      	bx	lr

0800685c <_fini>:
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	bf00      	nop
 8006860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006862:	bc08      	pop	{r3}
 8006864:	469e      	mov	lr, r3
 8006866:	4770      	bx	lr
