
Project3-Bank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08009e9c  08009e9c  00019e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2c8  0800a2c8  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2c8  0800a2c8  0001a2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2d0  0800a2d0  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2d0  0800a2d0  0001a2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2d4  0800a2d4  0001a2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800a2d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000071ec  200000b0  0800a388  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000729c  0800a388  0002729c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bd48  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e04  00000000  00000000  0003be6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001808  00000000  00000000  0003fc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000129a  00000000  00000000  00041478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000298c9  00000000  00000000  00042712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c3b5  00000000  00000000  0006bfdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdd2e  00000000  00000000  00088390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069ac  00000000  00000000  001860c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0018ca6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e84 	.word	0x08009e84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08009e84 	.word	0x08009e84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <init_breaker>:
uint32_t* random2;
uint32_t* random3;



void init_breaker(void){
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b09d      	sub	sp, #116	; 0x74
 8000580:	af04      	add	r7, sp, #16

	//What time the variable for going on break will be assigned
	breaker.start_break[0] = 0;
 8000582:	4bbc      	ldr	r3, [pc, #752]	; (8000874 <init_breaker+0x2f8>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
	breaker.start_break[1] = 0;
 8000588:	4bba      	ldr	r3, [pc, #744]	; (8000874 <init_breaker+0x2f8>)
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random1);
 800058e:	4bba      	ldr	r3, [pc, #744]	; (8000878 <init_breaker+0x2fc>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4619      	mov	r1, r3
 8000594:	48b9      	ldr	r0, [pc, #740]	; (800087c <init_breaker+0x300>)
 8000596:	f004 fc64 	bl	8004e62 <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock1 = { .hour = 9, .minute = (30 + (*random1 - 30) % 31), .second = (*random1 % 60)};
 800059a:	2309      	movs	r3, #9
 800059c:	657b      	str	r3, [r7, #84]	; 0x54
 800059e:	4bb6      	ldr	r3, [pc, #728]	; (8000878 <init_breaker+0x2fc>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f1a3 011e 	sub.w	r1, r3, #30
 80005a8:	4bb5      	ldr	r3, [pc, #724]	; (8000880 <init_breaker+0x304>)
 80005aa:	fba3 2301 	umull	r2, r3, r3, r1
 80005ae:	1aca      	subs	r2, r1, r3
 80005b0:	0852      	lsrs	r2, r2, #1
 80005b2:	4413      	add	r3, r2
 80005b4:	091a      	lsrs	r2, r3, #4
 80005b6:	4613      	mov	r3, r2
 80005b8:	015b      	lsls	r3, r3, #5
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	1aca      	subs	r2, r1, r3
 80005be:	f102 031e 	add.w	r3, r2, #30
 80005c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80005c4:	4bac      	ldr	r3, [pc, #688]	; (8000878 <init_breaker+0x2fc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6819      	ldr	r1, [r3, #0]
 80005ca:	4bae      	ldr	r3, [pc, #696]	; (8000884 <init_breaker+0x308>)
 80005cc:	fba3 2301 	umull	r2, r3, r3, r1
 80005d0:	095a      	lsrs	r2, r3, #5
 80005d2:	4613      	mov	r3, r2
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	1a9b      	subs	r3, r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	1aca      	subs	r2, r1, r3
 80005dc:	4613      	mov	r3, r2
 80005de:	65fb      	str	r3, [r7, #92]	; 0x5c
	WallClock temp_clock11 = { .hour = 0, .minute = (*random1 % 5), .second = (*random1 % 60)};
 80005e0:	2300      	movs	r3, #0
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80005e4:	4ba4      	ldr	r3, [pc, #656]	; (8000878 <init_breaker+0x2fc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	6819      	ldr	r1, [r3, #0]
 80005ea:	4ba7      	ldr	r3, [pc, #668]	; (8000888 <init_breaker+0x30c>)
 80005ec:	fba3 2301 	umull	r2, r3, r3, r1
 80005f0:	089a      	lsrs	r2, r3, #2
 80005f2:	4613      	mov	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	1aca      	subs	r2, r1, r3
 80005fa:	4613      	mov	r3, r2
 80005fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005fe:	4b9e      	ldr	r3, [pc, #632]	; (8000878 <init_breaker+0x2fc>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6819      	ldr	r1, [r3, #0]
 8000604:	4b9f      	ldr	r3, [pc, #636]	; (8000884 <init_breaker+0x308>)
 8000606:	fba3 2301 	umull	r2, r3, r3, r1
 800060a:	095a      	lsrs	r2, r3, #5
 800060c:	4613      	mov	r3, r2
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	1aca      	subs	r2, r1, r3
 8000616:	4613      	mov	r3, r2
 8000618:	653b      	str	r3, [r7, #80]	; 0x50
	breaker.break_time1 = add_clocks(breaker.break_time1,temp_clock1);
 800061a:	4e96      	ldr	r6, [pc, #600]	; (8000874 <init_breaker+0x2f8>)
 800061c:	f107 0508 	add.w	r5, r7, #8
 8000620:	4b94      	ldr	r3, [pc, #592]	; (8000874 <init_breaker+0x2f8>)
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	466c      	mov	r4, sp
 8000626:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800062a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800062e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	330c      	adds	r3, #12
 8000636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000638:	4628      	mov	r0, r5
 800063a:	f000 fbe1 	bl	8000e00 <add_clocks>
 800063e:	f106 030c 	add.w	r3, r6, #12
 8000642:	f107 0208 	add.w	r2, r7, #8
 8000646:	ca07      	ldmia	r2, {r0, r1, r2}
 8000648:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration1 = add_clocks(breaker.break_duration1,temp_clock11);
 800064c:	4e89      	ldr	r6, [pc, #548]	; (8000874 <init_breaker+0x2f8>)
 800064e:	f107 0508 	add.w	r5, r7, #8
 8000652:	4b88      	ldr	r3, [pc, #544]	; (8000874 <init_breaker+0x2f8>)
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	466c      	mov	r4, sp
 8000658:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800065c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3318      	adds	r3, #24
 8000668:	cb0e      	ldmia	r3, {r1, r2, r3}
 800066a:	4628      	mov	r0, r5
 800066c:	f000 fbc8 	bl	8000e00 <add_clocks>
 8000670:	f106 0318 	add.w	r3, r6, #24
 8000674:	f107 0208 	add.w	r2, r7, #8
 8000678:	ca07      	ldmia	r2, {r0, r1, r2}
 800067a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//What time the variable for going on break will be assigned
	breaker.start_break[2] = 0;
 800067e:	4b7d      	ldr	r3, [pc, #500]	; (8000874 <init_breaker+0x2f8>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random2);
 8000684:	4b81      	ldr	r3, [pc, #516]	; (800088c <init_breaker+0x310>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4619      	mov	r1, r3
 800068a:	487c      	ldr	r0, [pc, #496]	; (800087c <init_breaker+0x300>)
 800068c:	f004 fbe9 	bl	8004e62 <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock2 = { .hour = 9, .minute = (30 + (*random2 - 30) % 31), .second = (*random2 % 60)};
 8000690:	2309      	movs	r3, #9
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000694:	4b7d      	ldr	r3, [pc, #500]	; (800088c <init_breaker+0x310>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f1a3 011e 	sub.w	r1, r3, #30
 800069e:	4b78      	ldr	r3, [pc, #480]	; (8000880 <init_breaker+0x304>)
 80006a0:	fba3 2301 	umull	r2, r3, r3, r1
 80006a4:	1aca      	subs	r2, r1, r3
 80006a6:	0852      	lsrs	r2, r2, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	091a      	lsrs	r2, r3, #4
 80006ac:	4613      	mov	r3, r2
 80006ae:	015b      	lsls	r3, r3, #5
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	1aca      	subs	r2, r1, r3
 80006b4:	f102 031e 	add.w	r3, r2, #30
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
 80006ba:	4b74      	ldr	r3, [pc, #464]	; (800088c <init_breaker+0x310>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	6819      	ldr	r1, [r3, #0]
 80006c0:	4b70      	ldr	r3, [pc, #448]	; (8000884 <init_breaker+0x308>)
 80006c2:	fba3 2301 	umull	r2, r3, r3, r1
 80006c6:	095a      	lsrs	r2, r3, #5
 80006c8:	4613      	mov	r3, r2
 80006ca:	011b      	lsls	r3, r3, #4
 80006cc:	1a9b      	subs	r3, r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	1aca      	subs	r2, r1, r3
 80006d2:	4613      	mov	r3, r2
 80006d4:	647b      	str	r3, [r7, #68]	; 0x44
	WallClock temp_clock22 = { .hour = 0, .minute = (*random2 % 5), .second = (*random2 % 60)};
 80006d6:	2300      	movs	r3, #0
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <init_breaker+0x310>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6819      	ldr	r1, [r3, #0]
 80006e0:	4b69      	ldr	r3, [pc, #420]	; (8000888 <init_breaker+0x30c>)
 80006e2:	fba3 2301 	umull	r2, r3, r3, r1
 80006e6:	089a      	lsrs	r2, r3, #2
 80006e8:	4613      	mov	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4413      	add	r3, r2
 80006ee:	1aca      	subs	r2, r1, r3
 80006f0:	4613      	mov	r3, r2
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
 80006f4:	4b65      	ldr	r3, [pc, #404]	; (800088c <init_breaker+0x310>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6819      	ldr	r1, [r3, #0]
 80006fa:	4b62      	ldr	r3, [pc, #392]	; (8000884 <init_breaker+0x308>)
 80006fc:	fba3 2301 	umull	r2, r3, r3, r1
 8000700:	095a      	lsrs	r2, r3, #5
 8000702:	4613      	mov	r3, r2
 8000704:	011b      	lsls	r3, r3, #4
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	1aca      	subs	r2, r1, r3
 800070c:	4613      	mov	r3, r2
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
	breaker.break_time2 = add_clocks(breaker.break_time2,temp_clock2);
 8000710:	4e58      	ldr	r6, [pc, #352]	; (8000874 <init_breaker+0x2f8>)
 8000712:	f107 0508 	add.w	r5, r7, #8
 8000716:	4b57      	ldr	r3, [pc, #348]	; (8000874 <init_breaker+0x2f8>)
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	466c      	mov	r4, sp
 800071c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000720:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3324      	adds	r3, #36	; 0x24
 800072c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800072e:	4628      	mov	r0, r5
 8000730:	f000 fb66 	bl	8000e00 <add_clocks>
 8000734:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000738:	f107 0208 	add.w	r2, r7, #8
 800073c:	ca07      	ldmia	r2, {r0, r1, r2}
 800073e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration2 = add_clocks(breaker.break_duration2,temp_clock22);
 8000742:	4e4c      	ldr	r6, [pc, #304]	; (8000874 <init_breaker+0x2f8>)
 8000744:	f107 0508 	add.w	r5, r7, #8
 8000748:	4b4a      	ldr	r3, [pc, #296]	; (8000874 <init_breaker+0x2f8>)
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	466c      	mov	r4, sp
 800074e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000752:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	3330      	adds	r3, #48	; 0x30
 800075e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000760:	4628      	mov	r0, r5
 8000762:	f000 fb4d 	bl	8000e00 <add_clocks>
 8000766:	f106 0330 	add.w	r3, r6, #48	; 0x30
 800076a:	f107 0208 	add.w	r2, r7, #8
 800076e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000770:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//What time the variable for going on break will be assigned
	breaker.start_break[3] = 0;
 8000774:	4b3f      	ldr	r3, [pc, #252]	; (8000874 <init_breaker+0x2f8>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random3);
 800077a:	4b45      	ldr	r3, [pc, #276]	; (8000890 <init_breaker+0x314>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	483e      	ldr	r0, [pc, #248]	; (800087c <init_breaker+0x300>)
 8000782:	f004 fb6e 	bl	8004e62 <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock3 = { .hour = 9, .minute = (30 + (*random3 - 30) % 31), .second = (*random3 % 60)};
 8000786:	2309      	movs	r3, #9
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
 800078a:	4b41      	ldr	r3, [pc, #260]	; (8000890 <init_breaker+0x314>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f1a3 011e 	sub.w	r1, r3, #30
 8000794:	4b3a      	ldr	r3, [pc, #232]	; (8000880 <init_breaker+0x304>)
 8000796:	fba3 2301 	umull	r2, r3, r3, r1
 800079a:	1aca      	subs	r2, r1, r3
 800079c:	0852      	lsrs	r2, r2, #1
 800079e:	4413      	add	r3, r2
 80007a0:	091a      	lsrs	r2, r3, #4
 80007a2:	4613      	mov	r3, r2
 80007a4:	015b      	lsls	r3, r3, #5
 80007a6:	1a9b      	subs	r3, r3, r2
 80007a8:	1aca      	subs	r2, r1, r3
 80007aa:	f102 031e 	add.w	r3, r2, #30
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80007b0:	4b37      	ldr	r3, [pc, #220]	; (8000890 <init_breaker+0x314>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6819      	ldr	r1, [r3, #0]
 80007b6:	4b33      	ldr	r3, [pc, #204]	; (8000884 <init_breaker+0x308>)
 80007b8:	fba3 2301 	umull	r2, r3, r3, r1
 80007bc:	095a      	lsrs	r2, r3, #5
 80007be:	4613      	mov	r3, r2
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	1a9b      	subs	r3, r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	1aca      	subs	r2, r1, r3
 80007c8:	4613      	mov	r3, r2
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	WallClock temp_clock33 = { .hour = 0, .minute = (*random3 % 5), .second = (*random3 % 60)};
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <init_breaker+0x314>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6819      	ldr	r1, [r3, #0]
 80007d6:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <init_breaker+0x30c>)
 80007d8:	fba3 2301 	umull	r2, r3, r3, r1
 80007dc:	089a      	lsrs	r2, r3, #2
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	1aca      	subs	r2, r1, r3
 80007e6:	4613      	mov	r3, r2
 80007e8:	61fb      	str	r3, [r7, #28]
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <init_breaker+0x314>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	4b24      	ldr	r3, [pc, #144]	; (8000884 <init_breaker+0x308>)
 80007f2:	fba3 2301 	umull	r2, r3, r3, r1
 80007f6:	095a      	lsrs	r2, r3, #5
 80007f8:	4613      	mov	r3, r2
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	1a9b      	subs	r3, r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	1aca      	subs	r2, r1, r3
 8000802:	4613      	mov	r3, r2
 8000804:	623b      	str	r3, [r7, #32]
	breaker.break_time3 = add_clocks(breaker.break_time3,temp_clock3);
 8000806:	4e1b      	ldr	r6, [pc, #108]	; (8000874 <init_breaker+0x2f8>)
 8000808:	f107 0508 	add.w	r5, r7, #8
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <init_breaker+0x2f8>)
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	466c      	mov	r4, sp
 8000812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000816:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800081a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	333c      	adds	r3, #60	; 0x3c
 8000822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000824:	4628      	mov	r0, r5
 8000826:	f000 faeb 	bl	8000e00 <add_clocks>
 800082a:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 800082e:	f107 0208 	add.w	r2, r7, #8
 8000832:	ca07      	ldmia	r2, {r0, r1, r2}
 8000834:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration3 =  add_clocks(breaker.break_duration3,temp_clock33);
 8000838:	4e0e      	ldr	r6, [pc, #56]	; (8000874 <init_breaker+0x2f8>)
 800083a:	f107 0508 	add.w	r5, r7, #8
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <init_breaker+0x2f8>)
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	466c      	mov	r4, sp
 8000844:	f107 0318 	add.w	r3, r7, #24
 8000848:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800084c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3348      	adds	r3, #72	; 0x48
 8000854:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000856:	4628      	mov	r0, r5
 8000858:	f000 fad2 	bl	8000e00 <add_clocks>
 800085c:	f106 0348 	add.w	r3, r6, #72	; 0x48
 8000860:	f107 0208 	add.w	r2, r7, #8
 8000864:	ca07      	ldmia	r2, {r0, r1, r2}
 8000866:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800086a:	bf00      	nop
 800086c:	3764      	adds	r7, #100	; 0x64
 800086e:	46bd      	mov	sp, r7
 8000870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000872:	bf00      	nop
 8000874:	200000cc 	.word	0x200000cc
 8000878:	20000120 	.word	0x20000120
 800087c:	200002f4 	.word	0x200002f4
 8000880:	08421085 	.word	0x08421085
 8000884:	88888889 	.word	0x88888889
 8000888:	cccccccd 	.word	0xcccccccd
 800088c:	20000124 	.word	0x20000124
 8000890:	20000128 	.word	0x20000128

08000894 <run_breaker>:

void run_breaker(){
 8000894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000896:	b09d      	sub	sp, #116	; 0x74
 8000898:	af04      	add	r7, sp, #16
	if(breaker.break_time1.hour == 0){
 800089a:	4bbd      	ldr	r3, [pc, #756]	; (8000b90 <run_breaker+0x2fc>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d102      	bne.n	80008a8 <run_breaker+0x14>
		breaker.break_time1.hour = 9;
 80008a2:	4bbb      	ldr	r3, [pc, #748]	; (8000b90 <run_breaker+0x2fc>)
 80008a4:	2209      	movs	r2, #9
 80008a6:	60da      	str	r2, [r3, #12]
	}
	if((!HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)) == 1 ){
 80008a8:	2102      	movs	r1, #2
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ae:	f002 ff31 	bl	8003714 <HAL_GPIO_ReadPin>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d103      	bne.n	80008c0 <run_breaker+0x2c>
			  tellers[1].take_break = 1;
 80008b8:	4bb6      	ldr	r3, [pc, #728]	; (8000b94 <run_breaker+0x300>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	}
	if((!HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin)) == 1 ){
 80008c0:	2110      	movs	r1, #16
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f002 ff25 	bl	8003714 <HAL_GPIO_ReadPin>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d103      	bne.n	80008d8 <run_breaker+0x44>
			  tellers[2].take_break = 2;
 80008d0:	4bb0      	ldr	r3, [pc, #704]	; (8000b94 <run_breaker+0x300>)
 80008d2:	2202      	movs	r2, #2
 80008d4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	}
	if((!HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch2_Pin)) == 1 ){
 80008d8:	2110      	movs	r1, #16
 80008da:	48af      	ldr	r0, [pc, #700]	; (8000b98 <run_breaker+0x304>)
 80008dc:	f002 ff1a 	bl	8003714 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d103      	bne.n	80008ee <run_breaker+0x5a>
			  tellers[3].take_break = 3;
 80008e6:	4bab      	ldr	r3, [pc, #684]	; (8000b94 <run_breaker+0x300>)
 80008e8:	2203      	movs	r2, #3
 80008ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	}
	if(clock_compare(Clock, breaker.break_time1) == 1){
 80008ee:	4ba8      	ldr	r3, [pc, #672]	; (8000b90 <run_breaker+0x2fc>)
 80008f0:	4aaa      	ldr	r2, [pc, #680]	; (8000b9c <run_breaker+0x308>)
 80008f2:	466c      	mov	r4, sp
 80008f4:	f103 0110 	add.w	r1, r3, #16
 80008f8:	c903      	ldmia	r1, {r0, r1}
 80008fa:	e884 0003 	stmia.w	r4, {r0, r1}
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	ca07      	ldmia	r2, {r0, r1, r2}
 8000902:	f000 fab7 	bl	8000e74 <clock_compare>
 8000906:	4603      	mov	r3, r0
 8000908:	2b01      	cmp	r3, #1
 800090a:	d103      	bne.n	8000914 <run_breaker+0x80>
		tellers[1].take_break = 1;
 800090c:	4ba1      	ldr	r3, [pc, #644]	; (8000b94 <run_breaker+0x300>)
 800090e:	2201      	movs	r2, #1
 8000910:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	}
	if(clock_compare(Clock, breaker.break_time2) == 1){
 8000914:	4b9e      	ldr	r3, [pc, #632]	; (8000b90 <run_breaker+0x2fc>)
 8000916:	4aa1      	ldr	r2, [pc, #644]	; (8000b9c <run_breaker+0x308>)
 8000918:	466c      	mov	r4, sp
 800091a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800091e:	c903      	ldmia	r1, {r0, r1}
 8000920:	e884 0003 	stmia.w	r4, {r0, r1}
 8000924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000926:	ca07      	ldmia	r2, {r0, r1, r2}
 8000928:	f000 faa4 	bl	8000e74 <clock_compare>
 800092c:	4603      	mov	r3, r0
 800092e:	2b01      	cmp	r3, #1
 8000930:	d103      	bne.n	800093a <run_breaker+0xa6>
		tellers[2].take_break = 1;
 8000932:	4b98      	ldr	r3, [pc, #608]	; (8000b94 <run_breaker+0x300>)
 8000934:	2201      	movs	r2, #1
 8000936:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	}
	if(clock_compare(Clock, breaker.break_time3) == 1){
 800093a:	4b95      	ldr	r3, [pc, #596]	; (8000b90 <run_breaker+0x2fc>)
 800093c:	4a97      	ldr	r2, [pc, #604]	; (8000b9c <run_breaker+0x308>)
 800093e:	466c      	mov	r4, sp
 8000940:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000944:	c903      	ldmia	r1, {r0, r1}
 8000946:	e884 0003 	stmia.w	r4, {r0, r1}
 800094a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800094c:	ca07      	ldmia	r2, {r0, r1, r2}
 800094e:	f000 fa91 	bl	8000e74 <clock_compare>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	d103      	bne.n	8000960 <run_breaker+0xcc>
		tellers[3].take_break = 1;
 8000958:	4b8e      	ldr	r3, [pc, #568]	; (8000b94 <run_breaker+0x300>)
 800095a:	2201      	movs	r2, #1
 800095c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	}
	if(breaker.start_break[1] == 1){
 8000960:	4b8b      	ldr	r3, [pc, #556]	; (8000b90 <run_breaker+0x2fc>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2b01      	cmp	r3, #1
 8000966:	f040 8094 	bne.w	8000a92 <run_breaker+0x1fe>
		breaker.start_break[1] = 0;
 800096a:	4b89      	ldr	r3, [pc, #548]	; (8000b90 <run_breaker+0x2fc>)
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
		HAL_RNG_Init(&hrng);
 8000970:	488b      	ldr	r0, [pc, #556]	; (8000ba0 <run_breaker+0x30c>)
 8000972:	f004 fa1f 	bl	8004db4 <HAL_RNG_Init>
		HAL_RNG_GenerateRandomNumber(&hrng,random1);
 8000976:	4b8b      	ldr	r3, [pc, #556]	; (8000ba4 <run_breaker+0x310>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	4888      	ldr	r0, [pc, #544]	; (8000ba0 <run_breaker+0x30c>)
 800097e:	f004 fa70 	bl	8004e62 <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock1 = { .hour = 0, .minute = (30 + (*random1 - 30) % 31), .second = (*random1 % 60)};
 8000982:	2300      	movs	r3, #0
 8000984:	657b      	str	r3, [r7, #84]	; 0x54
 8000986:	4b87      	ldr	r3, [pc, #540]	; (8000ba4 <run_breaker+0x310>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f1a3 011e 	sub.w	r1, r3, #30
 8000990:	4b85      	ldr	r3, [pc, #532]	; (8000ba8 <run_breaker+0x314>)
 8000992:	fba3 2301 	umull	r2, r3, r3, r1
 8000996:	1aca      	subs	r2, r1, r3
 8000998:	0852      	lsrs	r2, r2, #1
 800099a:	4413      	add	r3, r2
 800099c:	091a      	lsrs	r2, r3, #4
 800099e:	4613      	mov	r3, r2
 80009a0:	015b      	lsls	r3, r3, #5
 80009a2:	1a9b      	subs	r3, r3, r2
 80009a4:	1aca      	subs	r2, r1, r3
 80009a6:	f102 031e 	add.w	r3, r2, #30
 80009aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80009ac:	4b7d      	ldr	r3, [pc, #500]	; (8000ba4 <run_breaker+0x310>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	4b7e      	ldr	r3, [pc, #504]	; (8000bac <run_breaker+0x318>)
 80009b4:	fba3 2301 	umull	r2, r3, r3, r1
 80009b8:	095a      	lsrs	r2, r3, #5
 80009ba:	4613      	mov	r3, r2
 80009bc:	011b      	lsls	r3, r3, #4
 80009be:	1a9b      	subs	r3, r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	1aca      	subs	r2, r1, r3
 80009c4:	4613      	mov	r3, r2
 80009c6:	65fb      	str	r3, [r7, #92]	; 0x5c
		WallClock temp_clock11 = { .hour = 0, .minute = (*random1 % 5), .second = (*random1 % 60)};
 80009c8:	2300      	movs	r3, #0
 80009ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80009cc:	4b75      	ldr	r3, [pc, #468]	; (8000ba4 <run_breaker+0x310>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6819      	ldr	r1, [r3, #0]
 80009d2:	4b77      	ldr	r3, [pc, #476]	; (8000bb0 <run_breaker+0x31c>)
 80009d4:	fba3 2301 	umull	r2, r3, r3, r1
 80009d8:	089a      	lsrs	r2, r3, #2
 80009da:	4613      	mov	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	1aca      	subs	r2, r1, r3
 80009e2:	4613      	mov	r3, r2
 80009e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009e6:	4b6f      	ldr	r3, [pc, #444]	; (8000ba4 <run_breaker+0x310>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6819      	ldr	r1, [r3, #0]
 80009ec:	4b6f      	ldr	r3, [pc, #444]	; (8000bac <run_breaker+0x318>)
 80009ee:	fba3 2301 	umull	r2, r3, r3, r1
 80009f2:	095a      	lsrs	r2, r3, #5
 80009f4:	4613      	mov	r3, r2
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	1a9b      	subs	r3, r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	1aca      	subs	r2, r1, r3
 80009fe:	4613      	mov	r3, r2
 8000a00:	653b      	str	r3, [r7, #80]	; 0x50
		breaker.break_time1 = add_clocks(breaker.break_time1,Clock);
 8000a02:	4d63      	ldr	r5, [pc, #396]	; (8000b90 <run_breaker+0x2fc>)
 8000a04:	f107 0408 	add.w	r4, r7, #8
 8000a08:	4e61      	ldr	r6, [pc, #388]	; (8000b90 <run_breaker+0x2fc>)
 8000a0a:	4a64      	ldr	r2, [pc, #400]	; (8000b9c <run_breaker+0x308>)
 8000a0c:	466b      	mov	r3, sp
 8000a0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000a14:	f106 030c 	add.w	r3, r6, #12
 8000a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f000 f9f0 	bl	8000e00 <add_clocks>
 8000a20:	f105 030c 	add.w	r3, r5, #12
 8000a24:	f107 0208 	add.w	r2, r7, #8
 8000a28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time1 = add_clocks(breaker.break_time1,temp_clock1);
 8000a2e:	4e58      	ldr	r6, [pc, #352]	; (8000b90 <run_breaker+0x2fc>)
 8000a30:	f107 0508 	add.w	r5, r7, #8
 8000a34:	4b56      	ldr	r3, [pc, #344]	; (8000b90 <run_breaker+0x2fc>)
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	466c      	mov	r4, sp
 8000a3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	330c      	adds	r3, #12
 8000a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	f000 f9d7 	bl	8000e00 <add_clocks>
 8000a52:	f106 030c 	add.w	r3, r6, #12
 8000a56:	f107 0208 	add.w	r2, r7, #8
 8000a5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration1 = add_clocks(breaker.break_duration1,temp_clock11);
 8000a60:	4e4b      	ldr	r6, [pc, #300]	; (8000b90 <run_breaker+0x2fc>)
 8000a62:	f107 0508 	add.w	r5, r7, #8
 8000a66:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <run_breaker+0x2fc>)
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	466c      	mov	r4, sp
 8000a6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a7e:	4628      	mov	r0, r5
 8000a80:	f000 f9be 	bl	8000e00 <add_clocks>
 8000a84:	f106 0318 	add.w	r3, r6, #24
 8000a88:	f107 0208 	add.w	r2, r7, #8
 8000a8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
	if(breaker.start_break[2] == 1){
 8000a92:	4b3f      	ldr	r3, [pc, #252]	; (8000b90 <run_breaker+0x2fc>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	f040 80aa 	bne.w	8000bf0 <run_breaker+0x35c>
		breaker.start_break[2] = 0;
 8000a9c:	4b3c      	ldr	r3, [pc, #240]	; (8000b90 <run_breaker+0x2fc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
		HAL_RNG_Init(&hrng);
 8000aa2:	483f      	ldr	r0, [pc, #252]	; (8000ba0 <run_breaker+0x30c>)
 8000aa4:	f004 f986 	bl	8004db4 <HAL_RNG_Init>
		HAL_RNG_GenerateRandomNumber(&hrng,random2);
 8000aa8:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <run_breaker+0x320>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	483c      	ldr	r0, [pc, #240]	; (8000ba0 <run_breaker+0x30c>)
 8000ab0:	f004 f9d7 	bl	8004e62 <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock2 = { .hour = 0, .minute = (30 + (*random2 - 30) % 31), .second = (*random2 % 60)};
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ab8:	4b3e      	ldr	r3, [pc, #248]	; (8000bb4 <run_breaker+0x320>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f1a3 011e 	sub.w	r1, r3, #30
 8000ac2:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <run_breaker+0x314>)
 8000ac4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ac8:	1aca      	subs	r2, r1, r3
 8000aca:	0852      	lsrs	r2, r2, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	091a      	lsrs	r2, r3, #4
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	015b      	lsls	r3, r3, #5
 8000ad4:	1a9b      	subs	r3, r3, r2
 8000ad6:	1aca      	subs	r2, r1, r3
 8000ad8:	f102 031e 	add.w	r3, r2, #30
 8000adc:	643b      	str	r3, [r7, #64]	; 0x40
 8000ade:	4b35      	ldr	r3, [pc, #212]	; (8000bb4 <run_breaker+0x320>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6819      	ldr	r1, [r3, #0]
 8000ae4:	4b31      	ldr	r3, [pc, #196]	; (8000bac <run_breaker+0x318>)
 8000ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8000aea:	095a      	lsrs	r2, r3, #5
 8000aec:	4613      	mov	r3, r2
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	1a9b      	subs	r3, r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	1aca      	subs	r2, r1, r3
 8000af6:	4613      	mov	r3, r2
 8000af8:	647b      	str	r3, [r7, #68]	; 0x44
		WallClock temp_clock22 = { .hour = 0, .minute = (*random2 % 5), .second = (*random2 % 60)};
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <run_breaker+0x320>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	6819      	ldr	r1, [r3, #0]
 8000b04:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <run_breaker+0x31c>)
 8000b06:	fba3 2301 	umull	r2, r3, r3, r1
 8000b0a:	089a      	lsrs	r2, r3, #2
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	1aca      	subs	r2, r1, r3
 8000b14:	4613      	mov	r3, r2
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <run_breaker+0x320>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	4b23      	ldr	r3, [pc, #140]	; (8000bac <run_breaker+0x318>)
 8000b20:	fba3 2301 	umull	r2, r3, r3, r1
 8000b24:	095a      	lsrs	r2, r3, #5
 8000b26:	4613      	mov	r3, r2
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	1a9b      	subs	r3, r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	1aca      	subs	r2, r1, r3
 8000b30:	4613      	mov	r3, r2
 8000b32:	63bb      	str	r3, [r7, #56]	; 0x38
		breaker.break_time2 = add_clocks(breaker.break_time2,Clock);
 8000b34:	4d16      	ldr	r5, [pc, #88]	; (8000b90 <run_breaker+0x2fc>)
 8000b36:	f107 0408 	add.w	r4, r7, #8
 8000b3a:	4e15      	ldr	r6, [pc, #84]	; (8000b90 <run_breaker+0x2fc>)
 8000b3c:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <run_breaker+0x308>)
 8000b3e:	466b      	mov	r3, sp
 8000b40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000b46:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000b4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	f000 f957 	bl	8000e00 <add_clocks>
 8000b52:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8000b56:	f107 0208 	add.w	r2, r7, #8
 8000b5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time2 = add_clocks(breaker.break_time2,temp_clock2);
 8000b60:	4e0b      	ldr	r6, [pc, #44]	; (8000b90 <run_breaker+0x2fc>)
 8000b62:	f107 0508 	add.w	r5, r7, #8
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <run_breaker+0x2fc>)
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	466c      	mov	r4, sp
 8000b6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3324      	adds	r3, #36	; 0x24
 8000b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b7e:	4628      	mov	r0, r5
 8000b80:	f000 f93e 	bl	8000e00 <add_clocks>
 8000b84:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000b88:	f107 0208 	add.w	r2, r7, #8
 8000b8c:	e014      	b.n	8000bb8 <run_breaker+0x324>
 8000b8e:	bf00      	nop
 8000b90:	200000cc 	.word	0x200000cc
 8000b94:	200003f8 	.word	0x200003f8
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	200002f4 	.word	0x200002f4
 8000ba4:	20000120 	.word	0x20000120
 8000ba8:	08421085 	.word	0x08421085
 8000bac:	88888889 	.word	0x88888889
 8000bb0:	cccccccd 	.word	0xcccccccd
 8000bb4:	20000124 	.word	0x20000124
 8000bb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration2 = add_clocks(breaker.break_duration2,temp_clock22);
 8000bbe:	4e5b      	ldr	r6, [pc, #364]	; (8000d2c <run_breaker+0x498>)
 8000bc0:	f107 0508 	add.w	r5, r7, #8
 8000bc4:	4b59      	ldr	r3, [pc, #356]	; (8000d2c <run_breaker+0x498>)
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	466c      	mov	r4, sp
 8000bca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3330      	adds	r3, #48	; 0x30
 8000bda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f000 f90f 	bl	8000e00 <add_clocks>
 8000be2:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8000be6:	f107 0208 	add.w	r2, r7, #8
 8000bea:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
	if(breaker.start_break[3] == 1){
 8000bf0:	4b4e      	ldr	r3, [pc, #312]	; (8000d2c <run_breaker+0x498>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	f040 8094 	bne.w	8000d22 <run_breaker+0x48e>
		breaker.start_break[3] = 0;
 8000bfa:	4b4c      	ldr	r3, [pc, #304]	; (8000d2c <run_breaker+0x498>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
		HAL_RNG_Init(&hrng);
 8000c00:	484b      	ldr	r0, [pc, #300]	; (8000d30 <run_breaker+0x49c>)
 8000c02:	f004 f8d7 	bl	8004db4 <HAL_RNG_Init>
		HAL_RNG_GenerateRandomNumber(&hrng,random3);
 8000c06:	4b4b      	ldr	r3, [pc, #300]	; (8000d34 <run_breaker+0x4a0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4848      	ldr	r0, [pc, #288]	; (8000d30 <run_breaker+0x49c>)
 8000c0e:	f004 f928 	bl	8004e62 <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock3 = { .hour = 0, .minute = (30 + (*random3 - 30) % 31), .second = (*random3 % 60)};
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
 8000c16:	4b47      	ldr	r3, [pc, #284]	; (8000d34 <run_breaker+0x4a0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f1a3 011e 	sub.w	r1, r3, #30
 8000c20:	4b45      	ldr	r3, [pc, #276]	; (8000d38 <run_breaker+0x4a4>)
 8000c22:	fba3 2301 	umull	r2, r3, r3, r1
 8000c26:	1aca      	subs	r2, r1, r3
 8000c28:	0852      	lsrs	r2, r2, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	091a      	lsrs	r2, r3, #4
 8000c2e:	4613      	mov	r3, r2
 8000c30:	015b      	lsls	r3, r3, #5
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	1aca      	subs	r2, r1, r3
 8000c36:	f102 031e 	add.w	r3, r2, #30
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c3c:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <run_breaker+0x4a0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	6819      	ldr	r1, [r3, #0]
 8000c42:	4b3e      	ldr	r3, [pc, #248]	; (8000d3c <run_breaker+0x4a8>)
 8000c44:	fba3 2301 	umull	r2, r3, r3, r1
 8000c48:	095a      	lsrs	r2, r3, #5
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	1aca      	subs	r2, r1, r3
 8000c54:	4613      	mov	r3, r2
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
		WallClock temp_clock33 = { .hour = 0, .minute = (*random3 % 5), .second = (*random3 % 60)};
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	4b35      	ldr	r3, [pc, #212]	; (8000d34 <run_breaker+0x4a0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6819      	ldr	r1, [r3, #0]
 8000c62:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <run_breaker+0x4ac>)
 8000c64:	fba3 2301 	umull	r2, r3, r3, r1
 8000c68:	089a      	lsrs	r2, r3, #2
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	1aca      	subs	r2, r1, r3
 8000c72:	4613      	mov	r3, r2
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <run_breaker+0x4a0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6819      	ldr	r1, [r3, #0]
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <run_breaker+0x4a8>)
 8000c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8000c82:	095a      	lsrs	r2, r3, #5
 8000c84:	4613      	mov	r3, r2
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	1a9b      	subs	r3, r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	1aca      	subs	r2, r1, r3
 8000c8e:	4613      	mov	r3, r2
 8000c90:	623b      	str	r3, [r7, #32]
		breaker.break_time3 = add_clocks(breaker.break_time3,Clock);
 8000c92:	4d26      	ldr	r5, [pc, #152]	; (8000d2c <run_breaker+0x498>)
 8000c94:	f107 0408 	add.w	r4, r7, #8
 8000c98:	4e24      	ldr	r6, [pc, #144]	; (8000d2c <run_breaker+0x498>)
 8000c9a:	4a2a      	ldr	r2, [pc, #168]	; (8000d44 <run_breaker+0x4b0>)
 8000c9c:	466b      	mov	r3, sp
 8000c9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ca0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ca4:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 8000ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000caa:	4620      	mov	r0, r4
 8000cac:	f000 f8a8 	bl	8000e00 <add_clocks>
 8000cb0:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8000cb4:	f107 0208 	add.w	r2, r7, #8
 8000cb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time3 = add_clocks(breaker.break_time3,temp_clock3);
 8000cbe:	4e1b      	ldr	r6, [pc, #108]	; (8000d2c <run_breaker+0x498>)
 8000cc0:	f107 0508 	add.w	r5, r7, #8
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <run_breaker+0x498>)
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	466c      	mov	r4, sp
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	333c      	adds	r3, #60	; 0x3c
 8000cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cdc:	4628      	mov	r0, r5
 8000cde:	f000 f88f 	bl	8000e00 <add_clocks>
 8000ce2:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 8000ce6:	f107 0208 	add.w	r2, r7, #8
 8000cea:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration3 =  add_clocks(breaker.break_duration3,temp_clock33);
 8000cf0:	4e0e      	ldr	r6, [pc, #56]	; (8000d2c <run_breaker+0x498>)
 8000cf2:	f107 0508 	add.w	r5, r7, #8
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <run_breaker+0x498>)
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	466c      	mov	r4, sp
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3348      	adds	r3, #72	; 0x48
 8000d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d0e:	4628      	mov	r0, r5
 8000d10:	f000 f876 	bl	8000e00 <add_clocks>
 8000d14:	f106 0348 	add.w	r3, r6, #72	; 0x48
 8000d18:	f107 0208 	add.w	r2, r7, #8
 8000d1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}

}
 8000d22:	bf00      	nop
 8000d24:	3764      	adds	r7, #100	; 0x64
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200000cc 	.word	0x200000cc
 8000d30:	200002f4 	.word	0x200002f4
 8000d34:	20000128 	.word	0x20000128
 8000d38:	08421085 	.word	0x08421085
 8000d3c:	88888889 	.word	0x88888889
 8000d40:	cccccccd 	.word	0xcccccccd
 8000d44:	20000000 	.word	0x20000000

08000d48 <clock_init>:
//The main clock to be checked by the program
//Declare extern within the header file
WallClock Clock = {.hour = 9, .minute = 0, .second = 0};


WallClock clock_init(WallClock the_clock) {
 8000d48:	b490      	push	{r4, r7}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	4638      	mov	r0, r7
 8000d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Initialize the main clock
	the_clock.hour = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
	the_clock.minute = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
	the_clock.second = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]

	return the_clock;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	461c      	mov	r4, r3
 8000d66:	463b      	mov	r3, r7
 8000d68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000d70:	68f8      	ldr	r0, [r7, #12]
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc90      	pop	{r4, r7}
 8000d78:	4770      	bx	lr

08000d7a <day_init>:

WallClock day_init(WallClock the_clock) {
 8000d7a:	b490      	push	{r4, r7}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	4638      	mov	r0, r7
 8000d84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Initialize the main clock
	the_clock.hour = 9;
 8000d88:	2309      	movs	r3, #9
 8000d8a:	603b      	str	r3, [r7, #0]
	the_clock.minute = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
	the_clock.second = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]

	return the_clock;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	461c      	mov	r4, r3
 8000d98:	463b      	mov	r3, r7
 8000d9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc90      	pop	{r4, r7}
 8000daa:	4770      	bx	lr

08000dac <clock_increment>:

WallClock clock_increment(WallClock the_clock){
 8000dac:	b490      	push	{r4, r7}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	4638      	mov	r0, r7
 8000db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Check if second is full, if so then increment
	//minute count and reset second count to 0
	//if minute count full increment hour count and reset minutes to 0
	if(the_clock.second >= 59){
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	2b3a      	cmp	r3, #58	; 0x3a
 8000dbe:	dd10      	ble.n	8000de2 <clock_increment+0x36>
		the_clock.second -= 59;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	3b3b      	subs	r3, #59	; 0x3b
 8000dc4:	60bb      	str	r3, [r7, #8]
		if(the_clock.minute >= 59){
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b3a      	cmp	r3, #58	; 0x3a
 8000dca:	dd06      	ble.n	8000dda <clock_increment+0x2e>
			the_clock.minute -= 59;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b3b      	subs	r3, #59	; 0x3b
 8000dd0:	607b      	str	r3, [r7, #4]
			the_clock.hour += 1;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	e006      	b.n	8000de8 <clock_increment+0x3c>
		}
		else{
			the_clock.minute += 1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	e002      	b.n	8000de8 <clock_increment+0x3c>
		}
	}
	else{
		the_clock.second += 1;
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
	}
	return the_clock;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	461c      	mov	r4, r3
 8000dec:	463b      	mov	r3, r7
 8000dee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000df2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc90      	pop	{r4, r7}
 8000dfe:	4770      	bx	lr

08000e00 <add_clocks>:

WallClock add_clocks(WallClock Clock1, WallClock Clock2){
 8000e00:	b490      	push	{r4, r7}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	4638      	mov	r0, r7
 8000e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Adds seconds then minutes then hours, accounting for overflows as needed
	//Add seconds and account overflow
	Clock1.second += Clock2.second;
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	6a3b      	ldr	r3, [r7, #32]
 8000e12:	4413      	add	r3, r2
 8000e14:	60bb      	str	r3, [r7, #8]
	if(Clock1.second >= 60){
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	2b3b      	cmp	r3, #59	; 0x3b
 8000e1a:	dd0e      	ble.n	8000e3a <add_clocks+0x3a>
		Clock1.minute += 1;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
		Clock1.second -= 60;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	3b3c      	subs	r3, #60	; 0x3c
 8000e26:	60bb      	str	r3, [r7, #8]
		if(Clock1.minute >= 60){
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b3b      	cmp	r3, #59	; 0x3b
 8000e2c:	dd05      	ble.n	8000e3a <add_clocks+0x3a>
			Clock1.hour += 1;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	603b      	str	r3, [r7, #0]
			Clock1.minute -= 60;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b3c      	subs	r3, #60	; 0x3c
 8000e38:	607b      	str	r3, [r7, #4]
		}
	}
	//Add minutes and account overflow
	Clock1.minute += Clock2.minute;
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	4413      	add	r3, r2
 8000e40:	607b      	str	r3, [r7, #4]
	if(Clock1.minute >= 60){
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b3b      	cmp	r3, #59	; 0x3b
 8000e46:	dd05      	ble.n	8000e54 <add_clocks+0x54>
		Clock1.hour += 1;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	603b      	str	r3, [r7, #0]
		Clock1.minute -= 60;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3b3c      	subs	r3, #60	; 0x3c
 8000e52:	607b      	str	r3, [r7, #4]
	}
	//Add hours, don't account overflow as impossible
	Clock1.hour += Clock2.hour;
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4413      	add	r3, r2
 8000e5a:	603b      	str	r3, [r7, #0]

	return Clock1;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	461c      	mov	r4, r3
 8000e60:	463b      	mov	r3, r7
 8000e62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc90      	pop	{r4, r7}
 8000e72:	4770      	bx	lr

08000e74 <clock_compare>:

//if clock 1 is greater than clock 2(later) then return 0
//if clock 1 is less than clock 2(earlier) then return 2
int clock_compare(WallClock Clock1, WallClock Clock2){
 8000e74:	b082      	sub	sp, #8
 8000e76:	b490      	push	{r4, r7}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	1d3c      	adds	r4, r7, #4
 8000e7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e82:	61fb      	str	r3, [r7, #28]
	if(Clock1.hour == Clock2.hour){
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d121      	bne.n	8000ed0 <clock_compare+0x5c>
		if(Clock1.minute == Clock2.minute){
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d111      	bne.n	8000eb8 <clock_compare+0x44>
			if(Clock1.second == Clock2.second){
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d101      	bne.n	8000ea0 <clock_compare+0x2c>
				return 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e024      	b.n	8000eea <clock_compare+0x76>
			}
			else if(Clock1.second > Clock2.second){
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dd01      	ble.n	8000eac <clock_compare+0x38>
				return 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e01e      	b.n	8000eea <clock_compare+0x76>
			}
			else if(Clock1.second < Clock2.second){
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	da19      	bge.n	8000ee8 <clock_compare+0x74>
				return 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e018      	b.n	8000eea <clock_compare+0x76>
			}
		}
		else if(Clock1.minute > Clock2.minute){
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	6a3b      	ldr	r3, [r7, #32]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dd01      	ble.n	8000ec4 <clock_compare+0x50>
			return 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e012      	b.n	8000eea <clock_compare+0x76>
		}
		else if(Clock1.minute < Clock2.minute){
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	6a3b      	ldr	r3, [r7, #32]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	da0d      	bge.n	8000ee8 <clock_compare+0x74>
			return 2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e00c      	b.n	8000eea <clock_compare+0x76>
		}
	}
	else if(Clock1.hour > Clock2.hour){
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dd01      	ble.n	8000edc <clock_compare+0x68>
		return 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e006      	b.n	8000eea <clock_compare+0x76>
	}
	else if(Clock1.hour < Clock2.hour){
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	da01      	bge.n	8000ee8 <clock_compare+0x74>
		return 2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e000      	b.n	8000eea <clock_compare+0x76>
	}
	return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc90      	pop	{r4, r7}
 8000ef2:	b002      	add	sp, #8
 8000ef4:	4770      	bx	lr
	...

08000ef8 <subtract_Clocks>:

WallClock subtract_Clocks(WallClock clock1, WallClock clock2) {
 8000ef8:	b490      	push	{r4, r7}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	4638      	mov	r0, r7
 8000f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    WallClock result;

    // Convert both clocks to total seconds
    int totalSeconds1 = clock1.hour * 3600 + clock1.minute * 60 + clock1.second;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f0c:	fb02 f103 	mul.w	r1, r2, r3
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	1a9b      	subs	r3, r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	18ca      	adds	r2, r1, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4413      	add	r3, r2
 8000f20:	623b      	str	r3, [r7, #32]
    int totalSeconds2 = clock2.hour * 3600 + clock2.minute * 60 + clock2.second;
 8000f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f24:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f28:	fb02 f103 	mul.w	r1, r2, r3
 8000f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f2e:	4613      	mov	r3, r2
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	1a9b      	subs	r3, r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	18ca      	adds	r2, r1, r3
 8000f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f3a:	4413      	add	r3, r2
 8000f3c:	61fb      	str	r3, [r7, #28]

    // Calculate the difference in total seconds
    int diffSeconds = totalSeconds1 - totalSeconds2;
 8000f3e:	6a3a      	ldr	r2, [r7, #32]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24

    // Handle negative differences
    if (diffSeconds < 0) {
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da05      	bge.n	8000f58 <subtract_Clocks+0x60>
        diffSeconds += 24 * 3600; // Assuming clocks are within a 24-hour period
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8000f52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Convert difference back to clock format
    result.hour = diffSeconds / 3600;
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	4a1d      	ldr	r2, [pc, #116]	; (8000fd0 <subtract_Clocks+0xd8>)
 8000f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f60:	441a      	add	r2, r3
 8000f62:	12d2      	asrs	r2, r2, #11
 8000f64:	17db      	asrs	r3, r3, #31
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	613b      	str	r3, [r7, #16]
    diffSeconds %= 3600;
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <subtract_Clocks+0xd8>)
 8000f6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f72:	441a      	add	r2, r3
 8000f74:	12d1      	asrs	r1, r2, #11
 8000f76:	17da      	asrs	r2, r3, #31
 8000f78:	1a8a      	subs	r2, r1, r2
 8000f7a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000f7e:	fb01 f202 	mul.w	r2, r1, r2
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    result.minute = diffSeconds / 60;
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <subtract_Clocks+0xdc>)
 8000f8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f8e:	441a      	add	r2, r3
 8000f90:	1152      	asrs	r2, r2, #5
 8000f92:	17db      	asrs	r3, r3, #31
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	617b      	str	r3, [r7, #20]
    result.second = diffSeconds % 60;
 8000f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <subtract_Clocks+0xdc>)
 8000f9c:	fb83 1302 	smull	r1, r3, r3, r2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	1159      	asrs	r1, r3, #5
 8000fa4:	17d3      	asrs	r3, r2, #31
 8000fa6:	1ac9      	subs	r1, r1, r3
 8000fa8:	460b      	mov	r3, r1
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	1a5b      	subs	r3, r3, r1
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	1ad1      	subs	r1, r2, r3
 8000fb2:	61b9      	str	r1, [r7, #24]

    return result;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	461c      	mov	r4, r3
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc90      	pop	{r4, r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	91a2b3c5 	.word	0x91a2b3c5
 8000fd4:	88888889 	.word	0x88888889

08000fd8 <init_GPIO>:
WallClock max_customer_wait;
int total_customers;
WallClock fiveOclockSomewhere = {.hour = 17, .minute = 0, .second = 0};


void init_GPIO(){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <init_GPIO+0xac>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4a28      	ldr	r2, [pc, #160]	; (8001084 <init_GPIO+0xac>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <init_GPIO+0xac>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	4b23      	ldr	r3, [pc, #140]	; (8001084 <init_GPIO+0xac>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a22      	ldr	r2, [pc, #136]	; (8001084 <init_GPIO+0xac>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <init_GPIO+0xac>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pins : SHLD_D13_Pin SHLD_D12_Pin SHLD_D11_Pin SHLD_D7_SEG7_Clock_Pin */
	GPIO_InitStruct.Pin = SHLD_D13_Pin|SHLD_D12_Pin|SHLD_D11_Pin|SHLD_D7_SEG7_Clock_Pin;
 800101e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001022:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4619      	mov	r1, r3
 8001036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103a:	f002 f9c1 	bl	80033c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SHLD_D8_SEG7_Data_Pin */
	GPIO_InitStruct.Pin = SHLD_D8_SEG7_Data_Pin;
 800103e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001042:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800104c:	2301      	movs	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SHLD_D8_SEG7_Data_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4619      	mov	r1, r3
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f002 f9b1 	bl	80033c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
	GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 800105e:	2320      	movs	r3, #32
 8001060:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	4619      	mov	r1, r3
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <init_GPIO+0xb0>)
 8001076:	f002 f9a3 	bl	80033c0 <HAL_GPIO_Init>
}
 800107a:	bf00      	nop
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000
 8001088:	48000400 	.word	0x48000400

0800108c <init_customer>:

void init_customer(){
 800108c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af04      	add	r7, sp, #16
	total_customers = 0;
 8001092:	4b3f      	ldr	r3, [pc, #252]	; (8001190 <init_customer+0x104>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
	total_customer_wait = clock_init(total_customer_wait);
 8001098:	4c3e      	ldr	r4, [pc, #248]	; (8001194 <init_customer+0x108>)
 800109a:	4638      	mov	r0, r7
 800109c:	4b3d      	ldr	r3, [pc, #244]	; (8001194 <init_customer+0x108>)
 800109e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010a0:	f7ff fe52 	bl	8000d48 <clock_init>
 80010a4:	463b      	mov	r3, r7
 80010a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	max_customer_waiting = 0;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <init_customer+0x10c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
	max_customer_wait = clock_init(max_customer_wait);
 80010b4:	4c39      	ldr	r4, [pc, #228]	; (800119c <init_customer+0x110>)
 80010b6:	4638      	mov	r0, r7
 80010b8:	4b38      	ldr	r3, [pc, #224]	; (800119c <init_customer+0x110>)
 80010ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010bc:	f7ff fe44 	bl	8000d48 <clock_init>
 80010c0:	463b      	mov	r3, r7
 80010c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	waiting_customers = 0;
 80010ca:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <init_customer+0x114>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
	HAL_RNG_GenerateRandomNumber(&hrng, random_new_customer);
 80010d0:	4b34      	ldr	r3, [pc, #208]	; (80011a4 <init_customer+0x118>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	4834      	ldr	r0, [pc, #208]	; (80011a8 <init_customer+0x11c>)
 80010d8:	f003 fec3 	bl	8004e62 <HAL_RNG_GenerateRandomNumber>
	new_customer_time.hour = 0;
 80010dc:	4b33      	ldr	r3, [pc, #204]	; (80011ac <init_customer+0x120>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
	new_customer_time.minute = (*random_new_customer % 5);
 80010e2:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <init_customer+0x118>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6819      	ldr	r1, [r3, #0]
 80010e8:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <init_customer+0x124>)
 80010ea:	fba3 2301 	umull	r2, r3, r3, r1
 80010ee:	089a      	lsrs	r2, r3, #2
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	1aca      	subs	r2, r1, r3
 80010f8:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <init_customer+0x120>)
 80010fa:	605a      	str	r2, [r3, #4]
	new_customer_time.second = (*random_new_customer % 60);
 80010fc:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <init_customer+0x118>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6819      	ldr	r1, [r3, #0]
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <init_customer+0x128>)
 8001104:	fba3 2301 	umull	r2, r3, r3, r1
 8001108:	095a      	lsrs	r2, r3, #5
 800110a:	4613      	mov	r3, r2
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	1a9b      	subs	r3, r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	1aca      	subs	r2, r1, r3
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <init_customer+0x120>)
 8001116:	609a      	str	r2, [r3, #8]
	new_customer_time = add_clocks(new_customer_time, Clock);
 8001118:	4e24      	ldr	r6, [pc, #144]	; (80011ac <init_customer+0x120>)
 800111a:	463d      	mov	r5, r7
 800111c:	4c23      	ldr	r4, [pc, #140]	; (80011ac <init_customer+0x120>)
 800111e:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <init_customer+0x12c>)
 8001120:	466b      	mov	r3, sp
 8001122:	ca07      	ldmia	r2, {r0, r1, r2}
 8001124:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001128:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800112c:	4628      	mov	r0, r5
 800112e:	f7ff fe67 	bl	8000e00 <add_clocks>
 8001132:	4634      	mov	r4, r6
 8001134:	463b      	mov	r3, r7
 8001136:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800113a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	init_GPIO();
 800113e:	f7ff ff4b 	bl	8000fd8 <init_GPIO>
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2120      	movs	r1, #32
 8001146:	481d      	ldr	r0, [pc, #116]	; (80011bc <init_customer+0x130>)
 8001148:	f002 fafc 	bl	8003744 <HAL_GPIO_WritePin>
			shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, 0);
 800114c:	2300      	movs	r3, #0
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001154:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001158:	f44f 7100 	mov.w	r1, #512	; 0x200
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f000 fed6 	bl	8001f10 <shiftOut>
			shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, 0);
 8001164:	2300      	movs	r3, #0
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f000 feca 	bl	8001f10 <shiftOut>
			HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	2120      	movs	r1, #32
 8001180:	480e      	ldr	r0, [pc, #56]	; (80011bc <init_customer+0x130>)
 8001182:	f002 fadf 	bl	8003744 <HAL_GPIO_WritePin>

}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800118e:	bf00      	nop
 8001190:	200002f0 	.word	0x200002f0
 8001194:	200002d8 	.word	0x200002d8
 8001198:	2000012c 	.word	0x2000012c
 800119c:	200002e4 	.word	0x200002e4
 80011a0:	20000130 	.word	0x20000130
 80011a4:	200002d4 	.word	0x200002d4
 80011a8:	200002f4 	.word	0x200002f4
 80011ac:	200002c4 	.word	0x200002c4
 80011b0:	cccccccd 	.word	0xcccccccd
 80011b4:	88888889 	.word	0x88888889
 80011b8:	20000000 	.word	0x20000000
 80011bc:	48000400 	.word	0x48000400

080011c0 <run_customer>:



void run_customer(){
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	b093      	sub	sp, #76	; 0x4c
 80011c4:	af04      	add	r7, sp, #16
	// shift customers if first customers want to
	if((waiting[0] == NULL) && waiting[1] != NULL){
 80011c6:	4b6c      	ldr	r3, [pc, #432]	; (8001378 <run_customer+0x1b8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d11c      	bne.n	8001208 <run_customer+0x48>
 80011ce:	4b6a      	ldr	r3, [pc, #424]	; (8001378 <run_customer+0x1b8>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d018      	beq.n	8001208 <run_customer+0x48>
		for (int i = 0; i < waiting_customers; i++){
 80011d6:	2300      	movs	r3, #0
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
 80011da:	e00b      	b.n	80011f4 <run_customer+0x34>
			waiting[i] = waiting[i+1];
 80011dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011de:	3301      	adds	r3, #1
 80011e0:	4a65      	ldr	r2, [pc, #404]	; (8001378 <run_customer+0x1b8>)
 80011e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011e6:	4964      	ldr	r1, [pc, #400]	; (8001378 <run_customer+0x1b8>)
 80011e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < waiting_customers; i++){
 80011ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f0:	3301      	adds	r3, #1
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
 80011f4:	4b61      	ldr	r3, [pc, #388]	; (800137c <run_customer+0x1bc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011fa:	429a      	cmp	r2, r3
 80011fc:	dbee      	blt.n	80011dc <run_customer+0x1c>
//			waiting[i]->id = waiting[i+1]->id;
//			waiting[i]->left_queue_time = waiting[i+1]->left_queue_time;
//			waiting[i]->service_time = waiting[i+1]->service_time;
//			waiting[i]->total_queue_time = waiting[i+1]->total_queue_time;
		}
		waiting_customers--;
 80011fe:	4b5f      	ldr	r3, [pc, #380]	; (800137c <run_customer+0x1bc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3b01      	subs	r3, #1
 8001204:	4a5d      	ldr	r2, [pc, #372]	; (800137c <run_customer+0x1bc>)
 8001206:	6013      	str	r3, [r2, #0]
	}

	for (int i = 0; i < waiting_customers; i++){
 8001208:	2300      	movs	r3, #0
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
 800120c:	e015      	b.n	800123a <run_customer+0x7a>
		waiting[i]->total_queue_time = clock_increment(waiting[i]->total_queue_time);
 800120e:	4a5a      	ldr	r2, [pc, #360]	; (8001378 <run_customer+0x1b8>)
 8001210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001216:	4958      	ldr	r1, [pc, #352]	; (8001378 <run_customer+0x1b8>)
 8001218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800121a:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 800121e:	4638      	mov	r0, r7
 8001220:	3328      	adds	r3, #40	; 0x28
 8001222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001224:	f7ff fdc2 	bl	8000dac <clock_increment>
 8001228:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800122c:	463a      	mov	r2, r7
 800122e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001230:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < waiting_customers; i++){
 8001234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001236:	3301      	adds	r3, #1
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
 800123a:	4b50      	ldr	r3, [pc, #320]	; (800137c <run_customer+0x1bc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001240:	429a      	cmp	r2, r3
 8001242:	dbe4      	blt.n	800120e <run_customer+0x4e>
	}

	// add new customer if enough time has passed
	if (clock_compare(Clock, new_customer_time) == 1 && clock_compare(Clock, fiveOclockSomewhere) == 2){
 8001244:	4b4e      	ldr	r3, [pc, #312]	; (8001380 <run_customer+0x1c0>)
 8001246:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <run_customer+0x1c4>)
 8001248:	466c      	mov	r4, sp
 800124a:	1d19      	adds	r1, r3, #4
 800124c:	c903      	ldmia	r1, {r0, r1}
 800124e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	ca07      	ldmia	r2, {r0, r1, r2}
 8001256:	f7ff fe0d 	bl	8000e74 <clock_compare>
 800125a:	4603      	mov	r3, r0
 800125c:	2b01      	cmp	r3, #1
 800125e:	d17d      	bne.n	800135c <run_customer+0x19c>
 8001260:	4b49      	ldr	r3, [pc, #292]	; (8001388 <run_customer+0x1c8>)
 8001262:	4a48      	ldr	r2, [pc, #288]	; (8001384 <run_customer+0x1c4>)
 8001264:	466c      	mov	r4, sp
 8001266:	1d19      	adds	r1, r3, #4
 8001268:	c903      	ldmia	r1, {r0, r1}
 800126a:	e884 0003 	stmia.w	r4, {r0, r1}
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	ca07      	ldmia	r2, {r0, r1, r2}
 8001272:	f7ff fdff 	bl	8000e74 <clock_compare>
 8001276:	4603      	mov	r3, r0
 8001278:	2b02      	cmp	r3, #2
 800127a:	d16f      	bne.n	800135c <run_customer+0x19c>
//		char buf[20];
//				sprintf(buf, "\r\n\r\n%d\r\n\r\n", waiting[1]->id);
//				HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), 100);
		HAL_RNG_GenerateRandomNumber(&hrng, random_service_time);
 800127c:	4b43      	ldr	r3, [pc, #268]	; (800138c <run_customer+0x1cc>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	4843      	ldr	r0, [pc, #268]	; (8001390 <run_customer+0x1d0>)
 8001284:	f003 fded 	bl	8004e62 <HAL_RNG_GenerateRandomNumber>
//		WallClock service_time = { .hour = 0, .minute = (*random_service_time % 7), .second = (*random_service_time % 60)};
		WallClock service_time = { .hour = 0, .minute = 2, .second = 31};
 8001288:	4a42      	ldr	r2, [pc, #264]	; (8001394 <run_customer+0x1d4>)
 800128a:	f107 0320 	add.w	r3, r7, #32
 800128e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001290:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Customer *c = malloc(sizeof(Customer));
 8001294:	2034      	movs	r0, #52	; 0x34
 8001296:	f008 f949 	bl	800952c <malloc>
 800129a:	4603      	mov	r3, r0
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
		c->service_time = service_time;
 800129e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a0:	3304      	adds	r3, #4
 80012a2:	f107 0220 	add.w	r2, r7, #32
 80012a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		c->id = ++total_customers;
 80012ac:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <run_customer+0x1d8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	4a39      	ldr	r2, [pc, #228]	; (8001398 <run_customer+0x1d8>)
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b38      	ldr	r3, [pc, #224]	; (8001398 <run_customer+0x1d8>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012bc:	601a      	str	r2, [r3, #0]
		c->entered_queue_time = Clock;
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	4a30      	ldr	r2, [pc, #192]	; (8001384 <run_customer+0x1c4>)
 80012c2:	3310      	adds	r3, #16
 80012c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80012c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		c->total_queue_time = (WallClock) {.hour = 0, .minute = 0, .second = 0};
 80012ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
 80012d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d2:	2200      	movs	r2, #0
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80012d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d8:	2200      	movs	r2, #0
 80012da:	631a      	str	r2, [r3, #48]	; 0x30
		waiting[waiting_customers++] = c;
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <run_customer+0x1bc>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	4926      	ldr	r1, [pc, #152]	; (800137c <run_customer+0x1bc>)
 80012e4:	600a      	str	r2, [r1, #0]
 80012e6:	4924      	ldr	r1, [pc, #144]	; (8001378 <run_customer+0x1b8>)
 80012e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_RNG_GenerateRandomNumber(&hrng, random_new_customer);
 80012ee:	4b2b      	ldr	r3, [pc, #172]	; (800139c <run_customer+0x1dc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4619      	mov	r1, r3
 80012f4:	4826      	ldr	r0, [pc, #152]	; (8001390 <run_customer+0x1d0>)
 80012f6:	f003 fdb4 	bl	8004e62 <HAL_RNG_GenerateRandomNumber>
		new_customer_time.hour = 0;
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <run_customer+0x1c0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
		new_customer_time.minute = (*random_new_customer % 5);
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <run_customer+0x1dc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6819      	ldr	r1, [r3, #0]
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <run_customer+0x1e0>)
 8001308:	fba3 2301 	umull	r2, r3, r3, r1
 800130c:	089a      	lsrs	r2, r3, #2
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	1aca      	subs	r2, r1, r3
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <run_customer+0x1c0>)
 8001318:	605a      	str	r2, [r3, #4]
		new_customer_time.second = (*random_new_customer % 60);
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <run_customer+0x1dc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6819      	ldr	r1, [r3, #0]
 8001320:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <run_customer+0x1e4>)
 8001322:	fba3 2301 	umull	r2, r3, r3, r1
 8001326:	095a      	lsrs	r2, r3, #5
 8001328:	4613      	mov	r3, r2
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	1aca      	subs	r2, r1, r3
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <run_customer+0x1c0>)
 8001334:	609a      	str	r2, [r3, #8]
		new_customer_time = add_clocks(new_customer_time, Clock);
 8001336:	4e12      	ldr	r6, [pc, #72]	; (8001380 <run_customer+0x1c0>)
 8001338:	463d      	mov	r5, r7
 800133a:	4c11      	ldr	r4, [pc, #68]	; (8001380 <run_customer+0x1c0>)
 800133c:	4a11      	ldr	r2, [pc, #68]	; (8001384 <run_customer+0x1c4>)
 800133e:	466b      	mov	r3, sp
 8001340:	ca07      	ldmia	r2, {r0, r1, r2}
 8001342:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001346:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800134a:	4628      	mov	r0, r5
 800134c:	f7ff fd58 	bl	8000e00 <add_clocks>
 8001350:	4634      	mov	r4, r6
 8001352:	463b      	mov	r3, r7
 8001354:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//		sprintf(buf, "\r\n\r\n%d:%d:%d\r\n\r\n", &waiting[0]->service_time.hour, &waiting[0]->service_time.minute, &waiting[0]->service_time.second);
//				print(buf);
	}

	// update max customers waiting
	if (max_customer_waiting < waiting_customers){
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <run_customer+0x1e8>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <run_customer+0x1bc>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	da03      	bge.n	8001370 <run_customer+0x1b0>
		max_customer_waiting = waiting_customers;
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <run_customer+0x1bc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <run_customer+0x1e8>)
 800136e:	6013      	str	r3, [r2, #0]

//	uint32_t display_num = 0;



}
 8001370:	bf00      	nop
 8001372:	373c      	adds	r7, #60	; 0x3c
 8001374:	46bd      	mov	sp, r7
 8001376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001378:	20000134 	.word	0x20000134
 800137c:	20000130 	.word	0x20000130
 8001380:	200002c4 	.word	0x200002c4
 8001384:	20000000 	.word	0x20000000
 8001388:	2000000c 	.word	0x2000000c
 800138c:	200002d0 	.word	0x200002d0
 8001390:	200002f4 	.word	0x200002f4
 8001394:	08009e9c 	.word	0x08009e9c
 8001398:	200002f0 	.word	0x200002f0
 800139c:	200002d4 	.word	0x200002d4
 80013a0:	cccccccd 	.word	0xcccccccd
 80013a4:	88888889 	.word	0x88888889
 80013a8:	2000012c 	.word	0x2000012c

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b0:	f001 fe78 	bl	80030a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b4:	f000 f862 	bl	800147c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b8:	f000 f92c 	bl	8001614 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013bc:	f000 f8fa 	bl	80015b4 <MX_USART2_UART_Init>
  MX_RNG_Init();
 80013c0:	f000 f8ae 	bl	8001520 <MX_RNG_Init>
  MX_TIM6_Init();
 80013c4:	f000 f8c0 	bl	8001548 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80013c8:	481a      	ldr	r0, [pc, #104]	; (8001434 <main+0x88>)
 80013ca:	f003 fe77 	bl	80050bc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013ce:	f004 ff29 	bl	8006224 <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 80013d2:	4819      	ldr	r0, [pc, #100]	; (8001438 <main+0x8c>)
 80013d4:	f005 f81d 	bl	8006412 <osMutexNew>
 80013d8:	4603      	mov	r3, r0
 80013da:	4a18      	ldr	r2, [pc, #96]	; (800143c <main+0x90>)
 80013dc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tellers */
  TellersHandle = osThreadNew(StartTellers, NULL, &Tellers_attributes);
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <main+0x94>)
 80013e0:	2100      	movs	r1, #0
 80013e2:	4818      	ldr	r0, [pc, #96]	; (8001444 <main+0x98>)
 80013e4:	f004 ff68 	bl	80062b8 <osThreadNew>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a17      	ldr	r2, [pc, #92]	; (8001448 <main+0x9c>)
 80013ec:	6013      	str	r3, [r2, #0]

  /* creation of Customers */
  CustomersHandle = osThreadNew(StartCustomers, NULL, &Customers_attributes);
 80013ee:	4a17      	ldr	r2, [pc, #92]	; (800144c <main+0xa0>)
 80013f0:	2100      	movs	r1, #0
 80013f2:	4817      	ldr	r0, [pc, #92]	; (8001450 <main+0xa4>)
 80013f4:	f004 ff60 	bl	80062b8 <osThreadNew>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a16      	ldr	r2, [pc, #88]	; (8001454 <main+0xa8>)
 80013fc:	6013      	str	r3, [r2, #0]

  /* creation of Clock */
  ClockHandle = osThreadNew(StartClock, NULL, &Clock_attributes);
 80013fe:	4a16      	ldr	r2, [pc, #88]	; (8001458 <main+0xac>)
 8001400:	2100      	movs	r1, #0
 8001402:	4816      	ldr	r0, [pc, #88]	; (800145c <main+0xb0>)
 8001404:	f004 ff58 	bl	80062b8 <osThreadNew>
 8001408:	4603      	mov	r3, r0
 800140a:	4a15      	ldr	r2, [pc, #84]	; (8001460 <main+0xb4>)
 800140c:	6013      	str	r3, [r2, #0]

  /* creation of Manager */
  ManagerHandle = osThreadNew(StartManager, NULL, &Manager_attributes);
 800140e:	4a15      	ldr	r2, [pc, #84]	; (8001464 <main+0xb8>)
 8001410:	2100      	movs	r1, #0
 8001412:	4815      	ldr	r0, [pc, #84]	; (8001468 <main+0xbc>)
 8001414:	f004 ff50 	bl	80062b8 <osThreadNew>
 8001418:	4603      	mov	r3, r0
 800141a:	4a14      	ldr	r2, [pc, #80]	; (800146c <main+0xc0>)
 800141c:	6013      	str	r3, [r2, #0]

  /* creation of Breaker */
  BreakerHandle = osThreadNew(StartBreaker, NULL, &Breaker_attributes);
 800141e:	4a14      	ldr	r2, [pc, #80]	; (8001470 <main+0xc4>)
 8001420:	2100      	movs	r1, #0
 8001422:	4814      	ldr	r0, [pc, #80]	; (8001474 <main+0xc8>)
 8001424:	f004 ff48 	bl	80062b8 <osThreadNew>
 8001428:	4603      	mov	r3, r0
 800142a:	4a13      	ldr	r2, [pc, #76]	; (8001478 <main+0xcc>)
 800142c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800142e:	f004 ff1d 	bl	800626c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001432:	e7fe      	b.n	8001432 <main+0x86>
 8001434:	20000304 	.word	0x20000304
 8001438:	0800a23c 	.word	0x0800a23c
 800143c:	200003ec 	.word	0x200003ec
 8001440:	0800a188 	.word	0x0800a188
 8001444:	0800176d 	.word	0x0800176d
 8001448:	200003d8 	.word	0x200003d8
 800144c:	0800a1ac 	.word	0x0800a1ac
 8001450:	0800179d 	.word	0x0800179d
 8001454:	200003dc 	.word	0x200003dc
 8001458:	0800a1d0 	.word	0x0800a1d0
 800145c:	080017cd 	.word	0x080017cd
 8001460:	200003e0 	.word	0x200003e0
 8001464:	0800a1f4 	.word	0x0800a1f4
 8001468:	08001931 	.word	0x08001931
 800146c:	200003e4 	.word	0x200003e4
 8001470:	0800a218 	.word	0x0800a218
 8001474:	0800195d 	.word	0x0800195d
 8001478:	200003e8 	.word	0x200003e8

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b096      	sub	sp, #88	; 0x58
 8001480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	2244      	movs	r2, #68	; 0x44
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f008 f922 	bl	80096d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001490:	463b      	mov	r3, r7
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800149e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014a2:	f002 f975 	bl	8003790 <HAL_PWREx_ControlVoltageScaling>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014ac:	f000 fa6e 	bl	800198c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b0:	2302      	movs	r3, #2
 80014b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ba:	2310      	movs	r3, #16
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014be:	2302      	movs	r3, #2
 80014c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014c2:	2302      	movs	r3, #2
 80014c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014c6:	2301      	movs	r3, #1
 80014c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014ca:	230a      	movs	r3, #10
 80014cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014ce:	2307      	movs	r3, #7
 80014d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 f9ac 	bl	800383c <HAL_RCC_OscConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80014ea:	f000 fa4f 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ee:	230f      	movs	r3, #15
 80014f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f2:	2303      	movs	r3, #3
 80014f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001502:	463b      	mov	r3, r7
 8001504:	2104      	movs	r1, #4
 8001506:	4618      	mov	r0, r3
 8001508:	f002 fd74 	bl	8003ff4 <HAL_RCC_ClockConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001512:	f000 fa3b 	bl	800198c <Error_Handler>
  }
}
 8001516:	bf00      	nop
 8001518:	3758      	adds	r7, #88	; 0x58
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_RNG_Init+0x20>)
 8001526:	4a07      	ldr	r2, [pc, #28]	; (8001544 <MX_RNG_Init+0x24>)
 8001528:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_RNG_Init+0x20>)
 800152c:	f003 fc42 	bl	8004db4 <HAL_RNG_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001536:	f000 fa29 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200002f4 	.word	0x200002f4
 8001544:	50060800 	.word	0x50060800

08001548 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <MX_TIM6_Init+0x64>)
 800155a:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <MX_TIM6_Init+0x68>)
 800155c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 125;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <MX_TIM6_Init+0x64>)
 8001560:	227d      	movs	r2, #125	; 0x7d
 8001562:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_TIM6_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_TIM6_Init+0x64>)
 800156c:	2264      	movs	r2, #100	; 0x64
 800156e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_TIM6_Init+0x64>)
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001576:	480d      	ldr	r0, [pc, #52]	; (80015ac <MX_TIM6_Init+0x64>)
 8001578:	f003 fd48 	bl	800500c <HAL_TIM_Base_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001582:	f000 fa03 	bl	800198c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <MX_TIM6_Init+0x64>)
 8001594:	f003 ffc6 	bl	8005524 <HAL_TIMEx_MasterConfigSynchronization>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800159e:	f000 f9f5 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000304 	.word	0x20000304
 80015b0:	40001000 	.word	0x40001000

080015b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015ba:	4a15      	ldr	r2, [pc, #84]	; (8001610 <MX_USART2_UART_Init+0x5c>)
 80015bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015da:	220c      	movs	r2, #12
 80015dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_USART2_UART_Init+0x58>)
 80015f8:	f004 f83a 	bl	8005670 <HAL_UART_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001602:	f000 f9c3 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000350 	.word	0x20000350
 8001610:	40004400 	.word	0x40004400

08001614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162a:	4b45      	ldr	r3, [pc, #276]	; (8001740 <MX_GPIO_Init+0x12c>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	4a44      	ldr	r2, [pc, #272]	; (8001740 <MX_GPIO_Init+0x12c>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001636:	4b42      	ldr	r3, [pc, #264]	; (8001740 <MX_GPIO_Init+0x12c>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001642:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <MX_GPIO_Init+0x12c>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	4a3e      	ldr	r2, [pc, #248]	; (8001740 <MX_GPIO_Init+0x12c>)
 8001648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800164c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164e:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <MX_GPIO_Init+0x12c>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	4b39      	ldr	r3, [pc, #228]	; (8001740 <MX_GPIO_Init+0x12c>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	4a38      	ldr	r2, [pc, #224]	; (8001740 <MX_GPIO_Init+0x12c>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001666:	4b36      	ldr	r3, [pc, #216]	; (8001740 <MX_GPIO_Init+0x12c>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	4b33      	ldr	r3, [pc, #204]	; (8001740 <MX_GPIO_Init+0x12c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	4a32      	ldr	r2, [pc, #200]	; (8001740 <MX_GPIO_Init+0x12c>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167e:	4b30      	ldr	r3, [pc, #192]	; (8001740 <MX_GPIO_Init+0x12c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	2120      	movs	r1, #32
 800168e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001692:	f002 f857 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800169a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800169c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4825      	ldr	r0, [pc, #148]	; (8001744 <MX_GPIO_Init+0x130>)
 80016ae:	f001 fe87 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016b2:	2303      	movs	r3, #3
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b6:	2303      	movs	r3, #3
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	481f      	ldr	r0, [pc, #124]	; (8001744 <MX_GPIO_Init+0x130>)
 80016c6:	f001 fe7b 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 Switch1_Pin Switch2_Pin PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Switch1_Pin|Switch2_Pin|GPIO_PIN_10;
 80016ca:	f240 4313 	movw	r3, #1043	; 0x413
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f001 fe6d 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016e6:	2320      	movs	r3, #32
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001700:	f001 fe5e 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch3_Pin PB10 PB4 */
  GPIO_InitStruct.Pin = Switch3_Pin|GPIO_PIN_10|GPIO_PIN_4;
 8001704:	f240 4311 	movw	r3, #1041	; 0x411
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	480b      	ldr	r0, [pc, #44]	; (8001748 <MX_GPIO_Init+0x134>)
 800171a:	f001 fe51 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <MX_GPIO_Init+0x130>)
 8001732:	f001 fe45 	bl	80033c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	; 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	48000800 	.word	0x48000800
 8001748:	48000400 	.word	0x48000400

0800174c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	update_flag = 1;
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	200003f0 	.word	0x200003f0

0800176c <StartTellers>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTellers */
void StartTellers(void *argument)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Initialize 3 tellers
  /* Infinite loop */
	initialize_tellers();
 8001774:	f000 fd76 	bl	8002264 <initialize_tellers>
  for(;;)
  {
    osMutexAcquire(MUTEXHandle, osWaitForever);
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <StartTellers+0x2c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001780:	4618      	mov	r0, r3
 8001782:	f004 fecc 	bl	800651e <osMutexAcquire>
    manage_tellers();
 8001786:	f000 fef3 	bl	8002570 <manage_tellers>
    osMutexRelease(MUTEXHandle);
 800178a:	4b03      	ldr	r3, [pc, #12]	; (8001798 <StartTellers+0x2c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f004 ff10 	bl	80065b4 <osMutexRelease>
    osMutexAcquire(MUTEXHandle, osWaitForever);
 8001794:	e7f0      	b.n	8001778 <StartTellers+0xc>
 8001796:	bf00      	nop
 8001798:	200003ec 	.word	0x200003ec

0800179c <StartCustomers>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCustomers */
void StartCustomers(void *argument)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCustomers */
  /* Infinite loop */
  init_customer();
 80017a4:	f7ff fc72 	bl	800108c <init_customer>
  for(;;)
  {

	osMutexAcquire(MUTEXHandle, osWaitForever);
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <StartCustomers+0x2c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017b0:	4618      	mov	r0, r3
 80017b2:	f004 feb4 	bl	800651e <osMutexAcquire>
	run_customer();
 80017b6:	f7ff fd03 	bl	80011c0 <run_customer>
	osMutexRelease(MUTEXHandle);
 80017ba:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <StartCustomers+0x2c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f004 fef8 	bl	80065b4 <osMutexRelease>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 80017c4:	e7f0      	b.n	80017a8 <StartCustomers+0xc>
 80017c6:	bf00      	nop
 80017c8:	200003ec 	.word	0x200003ec

080017cc <StartClock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClock */
void StartClock(void *argument)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b0c9      	sub	sp, #292	; 0x124
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017da:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartClock */
  /* Infinite loop */
	Clock = day_init(Clock);
 80017dc:	4c4a      	ldr	r4, [pc, #296]	; (8001908 <StartClock+0x13c>)
 80017de:	4638      	mov	r0, r7
 80017e0:	4b49      	ldr	r3, [pc, #292]	; (8001908 <StartClock+0x13c>)
 80017e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e4:	f7ff fac9 	bl	8000d7a <day_init>
 80017e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017ec:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 80017f0:	4623      	mov	r3, r4
 80017f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80017f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for(;;)
  {
	if(update_flag == 1){
 80017f8:	4b44      	ldr	r3, [pc, #272]	; (800190c <StartClock+0x140>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d17b      	bne.n	80018f8 <StartClock+0x12c>
	char buffer[256];
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001800:	4b43      	ldr	r3, [pc, #268]	; (8001910 <StartClock+0x144>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001808:	4618      	mov	r0, r3
 800180a:	f004 fe88 	bl	800651e <osMutexAcquire>
    Clock = clock_increment(Clock);
 800180e:	4c3e      	ldr	r4, [pc, #248]	; (8001908 <StartClock+0x13c>)
 8001810:	4638      	mov	r0, r7
 8001812:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <StartClock+0x13c>)
 8001814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001816:	f7ff fac9 	bl	8000dac <clock_increment>
 800181a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800181e:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8001822:	4623      	mov	r3, r4
 8001824:	ca07      	ldmia	r2, {r0, r1, r2}
 8001826:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    osMutexRelease(MUTEXHandle);
 800182a:	4b39      	ldr	r3, [pc, #228]	; (8001910 <StartClock+0x144>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f004 fec0 	bl	80065b4 <osMutexRelease>
	if((Clock.minute  % 2) == 0 && (Clock.second % 60) == 30){
 8001834:	4b34      	ldr	r3, [pc, #208]	; (8001908 <StartClock+0x13c>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d15b      	bne.n	80018f8 <StartClock+0x12c>
 8001840:	4b31      	ldr	r3, [pc, #196]	; (8001908 <StartClock+0x13c>)
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	4b33      	ldr	r3, [pc, #204]	; (8001914 <StartClock+0x148>)
 8001846:	fb83 1302 	smull	r1, r3, r3, r2
 800184a:	4413      	add	r3, r2
 800184c:	1159      	asrs	r1, r3, #5
 800184e:	17d3      	asrs	r3, r2, #31
 8001850:	1ac9      	subs	r1, r1, r3
 8001852:	460b      	mov	r3, r1
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	1a5b      	subs	r3, r3, r1
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	1ad1      	subs	r1, r2, r3
 800185c:	291e      	cmp	r1, #30
 800185e:	d14b      	bne.n	80018f8 <StartClock+0x12c>
		sprintf(buffer, "Current time: %d:%d:%d \r\n", Clock.hour, Clock.minute, Clock.second);
 8001860:	4b29      	ldr	r3, [pc, #164]	; (8001908 <StartClock+0x13c>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b28      	ldr	r3, [pc, #160]	; (8001908 <StartClock+0x13c>)
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <StartClock+0x13c>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f107 0018 	add.w	r0, r7, #24
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	460b      	mov	r3, r1
 8001874:	4928      	ldr	r1, [pc, #160]	; (8001918 <StartClock+0x14c>)
 8001876:	f007 ff0d 	bl	8009694 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fca6 	bl	80001d0 <strlen>
 8001884:	4603      	mov	r3, r0
 8001886:	b29a      	uxth	r2, r3
 8001888:	f107 0118 	add.w	r1, r7, #24
 800188c:	2364      	movs	r3, #100	; 0x64
 800188e:	4823      	ldr	r0, [pc, #140]	; (800191c <StartClock+0x150>)
 8001890:	f003 ff3c 	bl	800570c <HAL_UART_Transmit>
		sprintf(buffer,"Customers waiting in Queue: %d \r\n", waiting_customers);
 8001894:	4b22      	ldr	r3, [pc, #136]	; (8001920 <StartClock+0x154>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	f107 0318 	add.w	r3, r7, #24
 800189c:	4921      	ldr	r1, [pc, #132]	; (8001924 <StartClock+0x158>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f007 fef8 	bl	8009694 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fc91 	bl	80001d0 <strlen>
 80018ae:	4603      	mov	r3, r0
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	f107 0118 	add.w	r1, r7, #24
 80018b6:	2364      	movs	r3, #100	; 0x64
 80018b8:	4818      	ldr	r0, [pc, #96]	; (800191c <StartClock+0x150>)
 80018ba:	f003 ff27 	bl	800570c <HAL_UART_Transmit>
		sprintf(buffer,"Teller 1: %d Teller 2: %d Teller 3: %d \r\n", tellers[1].status,tellers[2].status,tellers[3].status);
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <StartClock+0x15c>)
 80018c0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80018c4:	4b18      	ldr	r3, [pc, #96]	; (8001928 <StartClock+0x15c>)
 80018c6:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 80018ca:	4b17      	ldr	r3, [pc, #92]	; (8001928 <StartClock+0x15c>)
 80018cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80018d0:	f107 0018 	add.w	r0, r7, #24
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	460b      	mov	r3, r1
 80018d8:	4914      	ldr	r1, [pc, #80]	; (800192c <StartClock+0x160>)
 80018da:	f007 fedb 	bl	8009694 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80018de:	f107 0318 	add.w	r3, r7, #24
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fc74 	bl	80001d0 <strlen>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f107 0118 	add.w	r1, r7, #24
 80018f0:	2364      	movs	r3, #100	; 0x64
 80018f2:	480a      	ldr	r0, [pc, #40]	; (800191c <StartClock+0x150>)
 80018f4:	f003 ff0a 	bl	800570c <HAL_UART_Transmit>
	}
	}
    update_flag = 0;
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <StartClock+0x140>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
    osDelay(1);
 80018fe:	2001      	movs	r0, #1
 8001900:	f004 fd6c 	bl	80063dc <osDelay>
	if(update_flag == 1){
 8001904:	e778      	b.n	80017f8 <StartClock+0x2c>
 8001906:	bf00      	nop
 8001908:	20000000 	.word	0x20000000
 800190c:	200003f0 	.word	0x200003f0
 8001910:	200003ec 	.word	0x200003ec
 8001914:	88888889 	.word	0x88888889
 8001918:	08009edc 	.word	0x08009edc
 800191c:	20000350 	.word	0x20000350
 8001920:	20000130 	.word	0x20000130
 8001924:	08009ef8 	.word	0x08009ef8
 8001928:	200003f8 	.word	0x200003f8
 800192c:	08009f1c 	.word	0x08009f1c

08001930 <StartManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManager */
void StartManager(void *argument)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManager */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <StartManager+0x28>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001940:	4618      	mov	r0, r3
 8001942:	f004 fdec 	bl	800651e <osMutexAcquire>
	  run_manager();
 8001946:	f000 f827 	bl	8001998 <run_manager>
	  osMutexRelease(MUTEXHandle);
 800194a:	4b03      	ldr	r3, [pc, #12]	; (8001958 <StartManager+0x28>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f004 fe30 	bl	80065b4 <osMutexRelease>
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 8001954:	e7f0      	b.n	8001938 <StartManager+0x8>
 8001956:	bf00      	nop
 8001958:	200003ec 	.word	0x200003ec

0800195c <StartBreaker>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBreaker */
void StartBreaker(void *argument)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBreaker */
  /* Infinite loop */
	init_breaker();
 8001964:	f7fe fe0a 	bl	800057c <init_breaker>
  for(;;)
  {
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <StartBreaker+0x2c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001970:	4618      	mov	r0, r3
 8001972:	f004 fdd4 	bl	800651e <osMutexAcquire>
	run_breaker();
 8001976:	f7fe ff8d 	bl	8000894 <run_breaker>
	osMutexRelease(MUTEXHandle);
 800197a:	4b03      	ldr	r3, [pc, #12]	; (8001988 <StartBreaker+0x2c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f004 fe18 	bl	80065b4 <osMutexRelease>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001984:	e7f0      	b.n	8001968 <StartBreaker+0xc>
 8001986:	bf00      	nop
 8001988:	200003ec 	.word	0x200003ec

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001994:	e7fe      	b.n	8001994 <Error_Handler+0x8>
	...

08001998 <run_manager>:
#include "string.h"

int num[] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0X80, 0X90};
int seg[] = {0xF1, 0xF2, 0xF4, 0xF8};

void run_manager(){
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b0d6      	sub	sp, #344	; 0x158
 800199c:	af04      	add	r7, sp, #16
//			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
//			sprintf(buffer,"Teller 1: %d Teller 2: %d Teller 3: %d \r\n", tellers[1].status,tellers[2].status,tellers[3].status);
//			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
//		}

	if (clock_compare(Clock, fiveOclockSomewhere) == 1 && waiting_customers == 0 && tellers[3].status == 0 && tellers[1].status == 0 && tellers[2].status == 0){
 800199e:	4b9a      	ldr	r3, [pc, #616]	; (8001c08 <run_manager+0x270>)
 80019a0:	4a9a      	ldr	r2, [pc, #616]	; (8001c0c <run_manager+0x274>)
 80019a2:	466c      	mov	r4, sp
 80019a4:	1d19      	adds	r1, r3, #4
 80019a6:	c903      	ldmia	r1, {r0, r1}
 80019a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80019b0:	f7ff fa60 	bl	8000e74 <clock_compare>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	f040 81f5 	bne.w	8001da6 <run_manager+0x40e>
 80019bc:	4b94      	ldr	r3, [pc, #592]	; (8001c10 <run_manager+0x278>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f040 81f0 	bne.w	8001da6 <run_manager+0x40e>
 80019c6:	4b93      	ldr	r3, [pc, #588]	; (8001c14 <run_manager+0x27c>)
 80019c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f040 81ea 	bne.w	8001da6 <run_manager+0x40e>
 80019d2:	4b90      	ldr	r3, [pc, #576]	; (8001c14 <run_manager+0x27c>)
 80019d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f040 81e4 	bne.w	8001da6 <run_manager+0x40e>
 80019de:	4b8d      	ldr	r3, [pc, #564]	; (8001c14 <run_manager+0x27c>)
 80019e0:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f040 81de 	bne.w	8001da6 <run_manager+0x40e>
		// Everyone stats
		int total_customers = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		WallClock total_service_time = {.hour = 0, .minute = 0, .second = 0};
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80019fc:	2300      	movs	r3, #0
 80019fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		WallClock avg_wait_time_customer = {.hour = 0, .minute = 0, .second = 0};
 8001a02:	2300      	movs	r3, #0
 8001a04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		WallClock avg_time_with_teller = {.hour = 0, .minute = 0, .second = 0};
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		WallClock avg_wait_time_teller = {.hour = 0, .minute = 0, .second = 0};
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		//WallClock max_queue_time = {.hour = 0, .minute = 0, .second = 0};
		// Individual Teller stats
		for (int i = 1; i < 4; i++){
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001a3e:	e028      	b.n	8001a92 <run_manager+0xfa>
			total_customers += tellers[i].customers_served;
 8001a40:	4a74      	ldr	r2, [pc, #464]	; (8001c14 <run_manager+0x27c>)
 8001a42:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001a46:	21b0      	movs	r1, #176	; 0xb0
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3318      	adds	r3, #24
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001a56:	4413      	add	r3, r2
 8001a58:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			total_service_time = add_clocks(total_service_time, tellers[i].total_time_working);
 8001a5c:	f507 7594 	add.w	r5, r7, #296	; 0x128
 8001a60:	4a6c      	ldr	r2, [pc, #432]	; (8001c14 <run_manager+0x27c>)
 8001a62:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001a66:	21b0      	movs	r1, #176	; 0xb0
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3318      	adds	r3, #24
 8001a70:	466c      	mov	r4, sp
 8001a72:	3304      	adds	r3, #4
 8001a74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a7c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a82:	4628      	mov	r0, r5
 8001a84:	f7ff f9bc 	bl	8000e00 <add_clocks>
		for (int i = 1; i < 4; i++){
 8001a88:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001a92:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	ddd2      	ble.n	8001a40 <run_manager+0xa8>
		}

		char buffer[256];
		sprintf(buffer, "\r\n-------------------- End of Day Report ---------------------\r\n");
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	495e      	ldr	r1, [pc, #376]	; (8001c18 <run_manager+0x280>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f007 fdf8 	bl	8009694 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fb92 	bl	80001d0 <strlen>
 8001aac:	4603      	mov	r3, r0
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	1d39      	adds	r1, r7, #4
 8001ab2:	2364      	movs	r3, #100	; 0x64
 8001ab4:	4859      	ldr	r0, [pc, #356]	; (8001c1c <run_manager+0x284>)
 8001ab6:	f003 fe29 	bl	800570c <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced: %d\r\n", total_customers);
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001ac0:	4957      	ldr	r1, [pc, #348]	; (8001c20 <run_manager+0x288>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f007 fde6 	bl	8009694 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fb80 	bl	80001d0 <strlen>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	1d39      	adds	r1, r7, #4
 8001ad6:	2364      	movs	r3, #100	; 0x64
 8001ad8:	4850      	ldr	r0, [pc, #320]	; (8001c1c <run_manager+0x284>)
 8001ada:	f003 fe17 	bl	800570c <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced by Teller 1: %d\r\n", tellers[1].customers_served);
 8001ade:	4b4d      	ldr	r3, [pc, #308]	; (8001c14 <run_manager+0x27c>)
 8001ae0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	494f      	ldr	r1, [pc, #316]	; (8001c24 <run_manager+0x28c>)
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f007 fdd3 	bl	8009694 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fb6d 	bl	80001d0 <strlen>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	1d39      	adds	r1, r7, #4
 8001afc:	2364      	movs	r3, #100	; 0x64
 8001afe:	4847      	ldr	r0, [pc, #284]	; (8001c1c <run_manager+0x284>)
 8001b00:	f003 fe04 	bl	800570c <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced by Teller 2: %d\r\n", tellers[2].customers_served);
 8001b04:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <run_manager+0x27c>)
 8001b06:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	4946      	ldr	r1, [pc, #280]	; (8001c28 <run_manager+0x290>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f007 fdc0 	bl	8009694 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fb5a 	bl	80001d0 <strlen>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	1d39      	adds	r1, r7, #4
 8001b22:	2364      	movs	r3, #100	; 0x64
 8001b24:	483d      	ldr	r0, [pc, #244]	; (8001c1c <run_manager+0x284>)
 8001b26:	f003 fdf1 	bl	800570c <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced by Teller 3: %d\r\n", tellers[3].customers_served);
 8001b2a:	4b3a      	ldr	r3, [pc, #232]	; (8001c14 <run_manager+0x27c>)
 8001b2c:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	493e      	ldr	r1, [pc, #248]	; (8001c2c <run_manager+0x294>)
 8001b34:	4618      	mov	r0, r3
 8001b36:	f007 fdad 	bl	8009694 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fb47 	bl	80001d0 <strlen>
 8001b42:	4603      	mov	r3, r0
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	1d39      	adds	r1, r7, #4
 8001b48:	2364      	movs	r3, #100	; 0x64
 8001b4a:	4834      	ldr	r0, [pc, #208]	; (8001c1c <run_manager+0x284>)
 8001b4c:	f003 fdde 	bl	800570c <HAL_UART_Transmit>

		sprintf(buffer, "Average customer wait time: %d:%d:%d\r\n", avg_wait_time_customer.hour, avg_wait_time_customer.minute, avg_wait_time_customer.second);
 8001b50:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001b54:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8001b58:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b5c:	1d38      	adds	r0, r7, #4
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	460b      	mov	r3, r1
 8001b62:	4933      	ldr	r1, [pc, #204]	; (8001c30 <run_manager+0x298>)
 8001b64:	f007 fd96 	bl	8009694 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fb30 	bl	80001d0 <strlen>
 8001b70:	4603      	mov	r3, r0
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	1d39      	adds	r1, r7, #4
 8001b76:	2364      	movs	r3, #100	; 0x64
 8001b78:	4828      	ldr	r0, [pc, #160]	; (8001c1c <run_manager+0x284>)
 8001b7a:	f003 fdc7 	bl	800570c <HAL_UART_Transmit>
		sprintf(buffer, "Average customer time with Tellers: %d:%d:%d\r\n", avg_time_with_teller.hour, avg_time_with_teller.minute, avg_time_with_teller.second);
 8001b7e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001b82:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001b86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001b8a:	1d38      	adds	r0, r7, #4
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4928      	ldr	r1, [pc, #160]	; (8001c34 <run_manager+0x29c>)
 8001b92:	f007 fd7f 	bl	8009694 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fb19 	bl	80001d0 <strlen>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	1d39      	adds	r1, r7, #4
 8001ba4:	2364      	movs	r3, #100	; 0x64
 8001ba6:	481d      	ldr	r0, [pc, #116]	; (8001c1c <run_manager+0x284>)
 8001ba8:	f003 fdb0 	bl	800570c <HAL_UART_Transmit>
		sprintf(buffer, "Average teller wait time: %d:%d:%d\r\n", avg_wait_time_teller.hour, avg_wait_time_teller.minute, avg_wait_time_teller.second);
 8001bac:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001bb0:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8001bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001bb8:	1d38      	adds	r0, r7, #4
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	491e      	ldr	r1, [pc, #120]	; (8001c38 <run_manager+0x2a0>)
 8001bc0:	f007 fd68 	bl	8009694 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fb02 	bl	80001d0 <strlen>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	1d39      	adds	r1, r7, #4
 8001bd2:	2364      	movs	r3, #100	; 0x64
 8001bd4:	4811      	ldr	r0, [pc, #68]	; (8001c1c <run_manager+0x284>)
 8001bd6:	f003 fd99 	bl	800570c <HAL_UART_Transmit>
		sprintf(buffer, "Max customers in queue: %d\r\n", max_customer_waiting);
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <run_manager+0x2a4>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	4917      	ldr	r1, [pc, #92]	; (8001c40 <run_manager+0x2a8>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f007 fd56 	bl	8009694 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe faf0 	bl	80001d0 <strlen>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	1d39      	adds	r1, r7, #4
 8001bf6:	2364      	movs	r3, #100	; 0x64
 8001bf8:	4808      	ldr	r0, [pc, #32]	; (8001c1c <run_manager+0x284>)
 8001bfa:	f003 fd87 	bl	800570c <HAL_UART_Transmit>

		for (int i = 1; i < 4; i++){
 8001bfe:	2301      	movs	r3, #1
 8001c00:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001c04:	e0ca      	b.n	8001d9c <run_manager+0x404>
 8001c06:	bf00      	nop
 8001c08:	2000000c 	.word	0x2000000c
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	20000130 	.word	0x20000130
 8001c14:	200003f8 	.word	0x200003f8
 8001c18:	08009f48 	.word	0x08009f48
 8001c1c:	20000350 	.word	0x20000350
 8001c20:	08009f8c 	.word	0x08009f8c
 8001c24:	08009fa8 	.word	0x08009fa8
 8001c28:	08009fd0 	.word	0x08009fd0
 8001c2c:	08009ff8 	.word	0x08009ff8
 8001c30:	0800a020 	.word	0x0800a020
 8001c34:	0800a048 	.word	0x0800a048
 8001c38:	0800a078 	.word	0x0800a078
 8001c3c:	2000012c 	.word	0x2000012c
 8001c40:	0800a0a0 	.word	0x0800a0a0
			sprintf(buffer, "Number of breaks for Teller %d: %d\r\n", i, tellers[i].num_breaks);
 8001c44:	4a7c      	ldr	r2, [pc, #496]	; (8001e38 <run_manager+0x4a0>)
 8001c46:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c4a:	21b0      	movs	r1, #176	; 0xb0
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	3388      	adds	r3, #136	; 0x88
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	1d38      	adds	r0, r7, #4
 8001c58:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001c5c:	4977      	ldr	r1, [pc, #476]	; (8001e3c <run_manager+0x4a4>)
 8001c5e:	f007 fd19 	bl	8009694 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fab3 	bl	80001d0 <strlen>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	1d39      	adds	r1, r7, #4
 8001c70:	2364      	movs	r3, #100	; 0x64
 8001c72:	4873      	ldr	r0, [pc, #460]	; (8001e40 <run_manager+0x4a8>)
 8001c74:	f003 fd4a 	bl	800570c <HAL_UART_Transmit>
			sprintf(buffer, "Average break time for Teller %d: %d:%d:%d\r\n", i, tellers[i].current_break.hour, tellers[i].current_break.minute, tellers[i].current_break.second); //calculate avg
 8001c78:	4a6f      	ldr	r2, [pc, #444]	; (8001e38 <run_manager+0x4a0>)
 8001c7a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c7e:	21b0      	movs	r1, #176	; 0xb0
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	337c      	adds	r3, #124	; 0x7c
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	4a6b      	ldr	r2, [pc, #428]	; (8001e38 <run_manager+0x4a0>)
 8001c8c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c90:	20b0      	movs	r0, #176	; 0xb0
 8001c92:	fb00 f303 	mul.w	r3, r0, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	3380      	adds	r3, #128	; 0x80
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4866      	ldr	r0, [pc, #408]	; (8001e38 <run_manager+0x4a0>)
 8001c9e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001ca2:	24b0      	movs	r4, #176	; 0xb0
 8001ca4:	fb04 f202 	mul.w	r2, r4, r2
 8001ca8:	4402      	add	r2, r0
 8001caa:	3284      	adds	r2, #132	; 0x84
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	1d38      	adds	r0, r7, #4
 8001cb0:	9201      	str	r2, [sp, #4]
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001cba:	4962      	ldr	r1, [pc, #392]	; (8001e44 <run_manager+0x4ac>)
 8001cbc:	f007 fcea 	bl	8009694 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fa84 	bl	80001d0 <strlen>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	1d39      	adds	r1, r7, #4
 8001cce:	2364      	movs	r3, #100	; 0x64
 8001cd0:	485b      	ldr	r0, [pc, #364]	; (8001e40 <run_manager+0x4a8>)
 8001cd2:	f003 fd1b 	bl	800570c <HAL_UART_Transmit>
			sprintf(buffer, "Max break time for Teller %d: %d:%d:%d\r\n", i, tellers[i].max_break.hour, tellers[i].max_break.minute, tellers[i].max_break.second);
 8001cd6:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <run_manager+0x4a0>)
 8001cd8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001cdc:	21b0      	movs	r1, #176	; 0xb0
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	338c      	adds	r3, #140	; 0x8c
 8001ce6:	6819      	ldr	r1, [r3, #0]
 8001ce8:	4a53      	ldr	r2, [pc, #332]	; (8001e38 <run_manager+0x4a0>)
 8001cea:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001cee:	20b0      	movs	r0, #176	; 0xb0
 8001cf0:	fb00 f303 	mul.w	r3, r0, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3390      	adds	r3, #144	; 0x90
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	484f      	ldr	r0, [pc, #316]	; (8001e38 <run_manager+0x4a0>)
 8001cfc:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001d00:	24b0      	movs	r4, #176	; 0xb0
 8001d02:	fb04 f202 	mul.w	r2, r4, r2
 8001d06:	4402      	add	r2, r0
 8001d08:	3294      	adds	r2, #148	; 0x94
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	1d38      	adds	r0, r7, #4
 8001d0e:	9201      	str	r2, [sp, #4]
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	460b      	mov	r3, r1
 8001d14:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001d18:	494b      	ldr	r1, [pc, #300]	; (8001e48 <run_manager+0x4b0>)
 8001d1a:	f007 fcbb 	bl	8009694 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fa55 	bl	80001d0 <strlen>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	1d39      	adds	r1, r7, #4
 8001d2c:	2364      	movs	r3, #100	; 0x64
 8001d2e:	4844      	ldr	r0, [pc, #272]	; (8001e40 <run_manager+0x4a8>)
 8001d30:	f003 fcec 	bl	800570c <HAL_UART_Transmit>
			sprintf(buffer, "Min break time for Teller %d: %d:%d:%d\r\n", i, tellers[i].min_break.hour, tellers[i].min_break.minute, tellers[i].min_break.second);
 8001d34:	4a40      	ldr	r2, [pc, #256]	; (8001e38 <run_manager+0x4a0>)
 8001d36:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d3a:	21b0      	movs	r1, #176	; 0xb0
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3398      	adds	r3, #152	; 0x98
 8001d44:	6819      	ldr	r1, [r3, #0]
 8001d46:	4a3c      	ldr	r2, [pc, #240]	; (8001e38 <run_manager+0x4a0>)
 8001d48:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d4c:	20b0      	movs	r0, #176	; 0xb0
 8001d4e:	fb00 f303 	mul.w	r3, r0, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	339c      	adds	r3, #156	; 0x9c
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4837      	ldr	r0, [pc, #220]	; (8001e38 <run_manager+0x4a0>)
 8001d5a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001d5e:	24b0      	movs	r4, #176	; 0xb0
 8001d60:	fb04 f202 	mul.w	r2, r4, r2
 8001d64:	4402      	add	r2, r0
 8001d66:	32a0      	adds	r2, #160	; 0xa0
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	1d38      	adds	r0, r7, #4
 8001d6c:	9201      	str	r2, [sp, #4]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	460b      	mov	r3, r1
 8001d72:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001d76:	4935      	ldr	r1, [pc, #212]	; (8001e4c <run_manager+0x4b4>)
 8001d78:	f007 fc8c 	bl	8009694 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fa26 	bl	80001d0 <strlen>
 8001d84:	4603      	mov	r3, r0
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	1d39      	adds	r1, r7, #4
 8001d8a:	2364      	movs	r3, #100	; 0x64
 8001d8c:	482c      	ldr	r0, [pc, #176]	; (8001e40 <run_manager+0x4a8>)
 8001d8e:	f003 fcbd 	bl	800570c <HAL_UART_Transmit>
		for (int i = 1; i < 4; i++){
 8001d92:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d96:	3301      	adds	r3, #1
 8001d98:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001d9c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	f77f af4f 	ble.w	8001c44 <run_manager+0x2ac>
		}
	}

	for (int i = 0; i < 4; i++){
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001dac:	e039      	b.n	8001e22 <run_manager+0x48a>
			int digit = updateDigit(i, waiting_customers);
 8001dae:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <run_manager+0x4b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4619      	mov	r1, r3
 8001db4:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8001db8:	f000 f852 	bl	8001e60 <updateDigit>
 8001dbc:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
			HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2120      	movs	r1, #32
 8001dc4:	4823      	ldr	r0, [pc, #140]	; (8001e54 <run_manager+0x4bc>)
 8001dc6:	f001 fcbd 	bl	8003744 <HAL_GPIO_WritePin>
			shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, num[digit]);
 8001dca:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <run_manager+0x4c0>)
 8001dcc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ddc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de8:	f000 f892 	bl	8001f10 <shiftOut>
			shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, seg[i]);
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <run_manager+0x4c4>)
 8001dee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dfe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0a:	f000 f881 	bl	8001f10 <shiftOut>
			HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 8001e0e:	2201      	movs	r2, #1
 8001e10:	2120      	movs	r1, #32
 8001e12:	4810      	ldr	r0, [pc, #64]	; (8001e54 <run_manager+0x4bc>)
 8001e14:	f001 fc96 	bl	8003744 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++){
 8001e18:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001e22:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	ddc1      	ble.n	8001dae <run_manager+0x416>
		}
}
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
 8001e2e:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bdb0      	pop	{r4, r5, r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200003f8 	.word	0x200003f8
 8001e3c:	0800a0c0 	.word	0x0800a0c0
 8001e40:	20000350 	.word	0x20000350
 8001e44:	0800a0e8 	.word	0x0800a0e8
 8001e48:	0800a118 	.word	0x0800a118
 8001e4c:	0800a144 	.word	0x0800a144
 8001e50:	20000130 	.word	0x20000130
 8001e54:	48000400 	.word	0x48000400
 8001e58:	20000018 	.word	0x20000018
 8001e5c:	20000040 	.word	0x20000040

08001e60 <updateDigit>:

int updateDigit(int spot, int num){
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
	if (spot == 0){
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d107      	bne.n	8001e80 <updateDigit+0x20>
		return num / 1000;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <updateDigit+0xa4>)
 8001e74:	fb82 1203 	smull	r1, r2, r2, r3
 8001e78:	1192      	asrs	r2, r2, #6
 8001e7a:	17db      	asrs	r3, r3, #31
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	e03a      	b.n	8001ef6 <updateDigit+0x96>
	} else if (spot == 1){
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d113      	bne.n	8001eae <updateDigit+0x4e>
		return (num / 100) % 10;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <updateDigit+0xa8>)
 8001e8a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e8e:	1152      	asrs	r2, r2, #5
 8001e90:	17db      	asrs	r3, r3, #31
 8001e92:	1ad1      	subs	r1, r2, r3
 8001e94:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <updateDigit+0xac>)
 8001e96:	fb83 2301 	smull	r2, r3, r3, r1
 8001e9a:	109a      	asrs	r2, r3, #2
 8001e9c:	17cb      	asrs	r3, r1, #31
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	441a      	add	r2, r3
 8001ea6:	0053      	lsls	r3, r2, #1
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	1a8b      	subs	r3, r1, r2
 8001eac:	e023      	b.n	8001ef6 <updateDigit+0x96>
	} else if (spot == 2){
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d113      	bne.n	8001edc <updateDigit+0x7c>
		return (num / 10) % 10;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <updateDigit+0xac>)
 8001eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8001ebc:	1092      	asrs	r2, r2, #2
 8001ebe:	17db      	asrs	r3, r3, #31
 8001ec0:	1ad1      	subs	r1, r2, r3
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <updateDigit+0xac>)
 8001ec4:	fb83 2301 	smull	r2, r3, r3, r1
 8001ec8:	109a      	asrs	r2, r3, #2
 8001eca:	17cb      	asrs	r3, r1, #31
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	0092      	lsls	r2, r2, #2
 8001ed2:	441a      	add	r2, r3
 8001ed4:	0053      	lsls	r3, r2, #1
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	1a8b      	subs	r3, r1, r2
 8001eda:	e00c      	b.n	8001ef6 <updateDigit+0x96>
	} else {
		return num % 10;
 8001edc:	6839      	ldr	r1, [r7, #0]
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <updateDigit+0xac>)
 8001ee0:	fb83 2301 	smull	r2, r3, r3, r1
 8001ee4:	109a      	asrs	r2, r3, #2
 8001ee6:	17cb      	asrs	r3, r1, #31
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	0092      	lsls	r2, r2, #2
 8001eee:	441a      	add	r2, r3
 8001ef0:	0053      	lsls	r3, r2, #1
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	1a8b      	subs	r3, r1, r2
	}
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	10624dd3 	.word	0x10624dd3
 8001f08:	51eb851f 	.word	0x51eb851f
 8001f0c:	66666667 	.word	0x66666667

08001f10 <shiftOut>:

void shiftOut(GPIO_TypeDef* data_port, uint16_t data_pin, GPIO_TypeDef* clock_port, uint16_t clock_pin, uint8_t value) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	817b      	strh	r3, [r7, #10]
 8001f20:	4613      	mov	r3, r2
 8001f22:	813b      	strh	r3, [r7, #8]
	for(int ii=0x80; ii; ii>>=1) {
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	e01d      	b.n	8001f66 <shiftOut+0x56>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_RESET);
 8001f2a:	893b      	ldrh	r3, [r7, #8]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	4619      	mov	r1, r3
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f001 fc07 	bl	8003744 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pin, (value&ii)!=0);
 8001f36:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	bf14      	ite	ne
 8001f42:	2301      	movne	r3, #1
 8001f44:	2300      	moveq	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	897b      	ldrh	r3, [r7, #10]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f001 fbf8 	bl	8003744 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_SET);
 8001f54:	893b      	ldrh	r3, [r7, #8]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f001 fbf2 	bl	8003744 <HAL_GPIO_WritePin>
	for(int ii=0x80; ii; ii>>=1) {
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	105b      	asrs	r3, r3, #1
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1de      	bne.n	8001f2a <shiftOut+0x1a>
	}
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6613      	str	r3, [r2, #96]	; 0x60
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	210f      	movs	r1, #15
 8001fb2:	f06f 0001 	mvn.w	r0, #1
 8001fb6:	f001 f9cc 	bl	8003352 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b0a6      	sub	sp, #152	; 0x98
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd0:	f107 0310 	add.w	r3, r7, #16
 8001fd4:	2288      	movs	r2, #136	; 0x88
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f007 fb7b 	bl	80096d4 <memset>
  if(hrng->Instance==RNG)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a1d      	ldr	r2, [pc, #116]	; (8002058 <HAL_RNG_MspInit+0x90>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d133      	bne.n	8002050 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001fe8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001fee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ff2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001ffe:	2308      	movs	r3, #8
 8002000:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002002:	2307      	movs	r3, #7
 8002004:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8002006:	2304      	movs	r3, #4
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800200a:	2302      	movs	r3, #2
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800200e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	4618      	mov	r0, r3
 800201a:	f002 fa0f 	bl	800443c <HAL_RCCEx_PeriphCLKConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8002024:	f7ff fcb2 	bl	800198c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <HAL_RNG_MspInit+0x94>)
 800202a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <HAL_RNG_MspInit+0x94>)
 800202e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_RNG_MspInit+0x94>)
 8002036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 5, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2105      	movs	r1, #5
 8002044:	2050      	movs	r0, #80	; 0x50
 8002046:	f001 f984 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 800204a:	2050      	movs	r0, #80	; 0x50
 800204c:	f001 f99d 	bl	800338a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002050:	bf00      	nop
 8002052:	3798      	adds	r7, #152	; 0x98
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	50060800 	.word	0x50060800
 800205c:	40021000 	.word	0x40021000

08002060 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <HAL_TIM_Base_MspInit+0x44>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d113      	bne.n	800209a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <HAL_TIM_Base_MspInit+0x48>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <HAL_TIM_Base_MspInit+0x48>)
 8002078:	f043 0310 	orr.w	r3, r3, #16
 800207c:	6593      	str	r3, [r2, #88]	; 0x58
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_TIM_Base_MspInit+0x48>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2105      	movs	r1, #5
 800208e:	2036      	movs	r0, #54	; 0x36
 8002090:	f001 f95f 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002094:	2036      	movs	r0, #54	; 0x36
 8002096:	f001 f978 	bl	800338a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40001000 	.word	0x40001000
 80020a8:	40021000 	.word	0x40021000

080020ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0ac      	sub	sp, #176	; 0xb0
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	2288      	movs	r2, #136	; 0x88
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f007 fb01 	bl	80096d4 <memset>
  if(huart->Instance==USART2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a21      	ldr	r2, [pc, #132]	; (800215c <HAL_UART_MspInit+0xb0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d13b      	bne.n	8002154 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020dc:	2302      	movs	r3, #2
 80020de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4618      	mov	r0, r3
 80020ea:	f002 f9a7 	bl	800443c <HAL_RCCEx_PeriphCLKConfig>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020f4:	f7ff fc4a 	bl	800198c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_UART_MspInit+0xb4>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	4a18      	ldr	r2, [pc, #96]	; (8002160 <HAL_UART_MspInit+0xb4>)
 80020fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002102:	6593      	str	r3, [r2, #88]	; 0x58
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_UART_MspInit+0xb4>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_UART_MspInit+0xb4>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	4a12      	ldr	r2, [pc, #72]	; (8002160 <HAL_UART_MspInit+0xb4>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211c:	4b10      	ldr	r3, [pc, #64]	; (8002160 <HAL_UART_MspInit+0xb4>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002128:	230c      	movs	r3, #12
 800212a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002140:	2307      	movs	r3, #7
 8002142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800214a:	4619      	mov	r1, r3
 800214c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002150:	f001 f936 	bl	80033c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002154:	bf00      	nop
 8002156:	37b0      	adds	r7, #176	; 0xb0
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40004400 	.word	0x40004400
 8002160:	40021000 	.word	0x40021000

08002164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002168:	e7fe      	b.n	8002168 <NMI_Handler+0x4>

0800216a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <HardFault_Handler+0x4>

08002170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <MemManage_Handler+0x4>

08002176 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <BusFault_Handler+0x4>

0800217c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <UsageFault_Handler+0x4>

08002182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002194:	f000 ffe2 	bl	800315c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002198:	f006 f860 	bl	800825c <xTaskGetSchedulerState>
 800219c:	4603      	mov	r3, r0
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d001      	beq.n	80021a6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80021a2:	f006 ff49 	bl	8009038 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <TIM6_DAC_IRQHandler+0x10>)
 80021b2:	f002 fff3 	bl	800519c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000304 	.word	0x20000304

080021c0 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <RNG_IRQHandler+0x10>)
 80021c6:	f002 fea2 	bl	8004f0e <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200002f4 	.word	0x200002f4

080021d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021dc:	4a14      	ldr	r2, [pc, #80]	; (8002230 <_sbrk+0x5c>)
 80021de:	4b15      	ldr	r3, [pc, #84]	; (8002234 <_sbrk+0x60>)
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e8:	4b13      	ldr	r3, [pc, #76]	; (8002238 <_sbrk+0x64>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <_sbrk+0x64>)
 80021f2:	4a12      	ldr	r2, [pc, #72]	; (800223c <_sbrk+0x68>)
 80021f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f6:	4b10      	ldr	r3, [pc, #64]	; (8002238 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	429a      	cmp	r2, r3
 8002202:	d207      	bcs.n	8002214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002204:	f007 fa7e 	bl	8009704 <__errno>
 8002208:	4603      	mov	r3, r0
 800220a:	220c      	movs	r2, #12
 800220c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800220e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002212:	e009      	b.n	8002228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002214:	4b08      	ldr	r3, [pc, #32]	; (8002238 <_sbrk+0x64>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800221a:	4b07      	ldr	r3, [pc, #28]	; (8002238 <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	4a05      	ldr	r2, [pc, #20]	; (8002238 <_sbrk+0x64>)
 8002224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002226:	68fb      	ldr	r3, [r7, #12]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20018000 	.word	0x20018000
 8002234:	00000400 	.word	0x00000400
 8002238:	200003f4 	.word	0x200003f4
 800223c:	200072a0 	.word	0x200072a0

08002240 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <SystemInit+0x20>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <SystemInit+0x20>)
 800224c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <initialize_tellers>:

Teller VOID_TELLER;
//fix this
Teller teller_wait[4];

void initialize_tellers(void) {
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
    for (int i = 1; i < 4; i++) {
 800226a:	2301      	movs	r3, #1
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	e168      	b.n	8002542 <initialize_tellers+0x2de>
    	//Initialize ID
        tellers[i].id = i;
 8002270:	4abc      	ldr	r2, [pc, #752]	; (8002564 <initialize_tellers+0x300>)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	21b0      	movs	r1, #176	; 0xb0
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	601a      	str	r2, [r3, #0]
        // Initialize statuses
        tellers[i].status = 0;
 8002280:	4ab8      	ldr	r2, [pc, #736]	; (8002564 <initialize_tellers+0x300>)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	21b0      	movs	r1, #176	; 0xb0
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3304      	adds	r3, #4
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
        tellers[i].take_break = 0;
 8002292:	4ab4      	ldr	r2, [pc, #720]	; (8002564 <initialize_tellers+0x300>)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	21b0      	movs	r1, #176	; 0xb0
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	3308      	adds	r3, #8
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
        //service function
        tellers[i].service_end_time = clock_init(tellers[i].service_end_time);
 80022a4:	4aaf      	ldr	r2, [pc, #700]	; (8002564 <initialize_tellers+0x300>)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	21b0      	movs	r1, #176	; 0xb0
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	f103 0408 	add.w	r4, r3, #8
 80022b4:	4638      	mov	r0, r7
 80022b6:	4aab      	ldr	r2, [pc, #684]	; (8002564 <initialize_tellers+0x300>)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	21b0      	movs	r1, #176	; 0xb0
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	3308      	adds	r3, #8
 80022c4:	3304      	adds	r3, #4
 80022c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c8:	f7fe fd3e 	bl	8000d48 <clock_init>
 80022cc:	1d23      	adds	r3, r4, #4
 80022ce:	463a      	mov	r2, r7
 80022d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80022d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize metrics
        tellers[i].customers_served = 0;
 80022d6:	4aa3      	ldr	r2, [pc, #652]	; (8002564 <initialize_tellers+0x300>)
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	21b0      	movs	r1, #176	; 0xb0
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	3318      	adds	r3, #24
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
        tellers[i].total_time_working = clock_init(tellers[i].total_time_working);
 80022e8:	4a9e      	ldr	r2, [pc, #632]	; (8002564 <initialize_tellers+0x300>)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	21b0      	movs	r1, #176	; 0xb0
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	f103 0418 	add.w	r4, r3, #24
 80022f8:	4638      	mov	r0, r7
 80022fa:	4a9a      	ldr	r2, [pc, #616]	; (8002564 <initialize_tellers+0x300>)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	21b0      	movs	r1, #176	; 0xb0
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	3318      	adds	r3, #24
 8002308:	3304      	adds	r3, #4
 800230a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800230c:	f7fe fd1c 	bl	8000d48 <clock_init>
 8002310:	1d23      	adds	r3, r4, #4
 8002312:	463a      	mov	r2, r7
 8002314:	ca07      	ldmia	r2, {r0, r1, r2}
 8002316:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].total_time_waiting = clock_init(tellers[i].total_time_waiting);
 800231a:	4a92      	ldr	r2, [pc, #584]	; (8002564 <initialize_tellers+0x300>)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	21b0      	movs	r1, #176	; 0xb0
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800232a:	4638      	mov	r0, r7
 800232c:	4a8d      	ldr	r2, [pc, #564]	; (8002564 <initialize_tellers+0x300>)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	21b0      	movs	r1, #176	; 0xb0
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3328      	adds	r3, #40	; 0x28
 800233a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800233c:	f7fe fd04 	bl	8000d48 <clock_init>
 8002340:	463b      	mov	r3, r7
 8002342:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002346:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].current_time_working = clock_init(tellers[i].current_time_working);
 800234a:	4a86      	ldr	r2, [pc, #536]	; (8002564 <initialize_tellers+0x300>)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	21b0      	movs	r1, #176	; 0xb0
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800235a:	4638      	mov	r0, r7
 800235c:	4a81      	ldr	r2, [pc, #516]	; (8002564 <initialize_tellers+0x300>)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	21b0      	movs	r1, #176	; 0xb0
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	3330      	adds	r3, #48	; 0x30
 800236a:	3304      	adds	r3, #4
 800236c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800236e:	f7fe fceb 	bl	8000d48 <clock_init>
 8002372:	1d23      	adds	r3, r4, #4
 8002374:	463a      	mov	r2, r7
 8002376:	ca07      	ldmia	r2, {r0, r1, r2}
 8002378:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 800237c:	4a79      	ldr	r2, [pc, #484]	; (8002564 <initialize_tellers+0x300>)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	21b0      	movs	r1, #176	; 0xb0
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800238c:	4638      	mov	r0, r7
 800238e:	4a75      	ldr	r2, [pc, #468]	; (8002564 <initialize_tellers+0x300>)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	21b0      	movs	r1, #176	; 0xb0
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	3340      	adds	r3, #64	; 0x40
 800239c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800239e:	f7fe fcd3 	bl	8000d48 <clock_init>
 80023a2:	463b      	mov	r3, r7
 80023a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].max_time_working = clock_init(tellers[i].max_time_working);
 80023ac:	4a6d      	ldr	r2, [pc, #436]	; (8002564 <initialize_tellers+0x300>)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	21b0      	movs	r1, #176	; 0xb0
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80023bc:	4638      	mov	r0, r7
 80023be:	4a69      	ldr	r2, [pc, #420]	; (8002564 <initialize_tellers+0x300>)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	21b0      	movs	r1, #176	; 0xb0
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	3348      	adds	r3, #72	; 0x48
 80023cc:	3304      	adds	r3, #4
 80023ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d0:	f7fe fcba 	bl	8000d48 <clock_init>
 80023d4:	1d23      	adds	r3, r4, #4
 80023d6:	463a      	mov	r2, r7
 80023d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80023da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].max_time_working = clock_init(tellers[i].max_time_working);
 80023de:	4a61      	ldr	r2, [pc, #388]	; (8002564 <initialize_tellers+0x300>)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	21b0      	movs	r1, #176	; 0xb0
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	f103 0448 	add.w	r4, r3, #72	; 0x48
 80023ee:	4638      	mov	r0, r7
 80023f0:	4a5c      	ldr	r2, [pc, #368]	; (8002564 <initialize_tellers+0x300>)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	21b0      	movs	r1, #176	; 0xb0
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	3348      	adds	r3, #72	; 0x48
 80023fe:	3304      	adds	r3, #4
 8002400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002402:	f7fe fca1 	bl	8000d48 <clock_init>
 8002406:	1d23      	adds	r3, r4, #4
 8002408:	463a      	mov	r2, r7
 800240a:	ca07      	ldmia	r2, {r0, r1, r2}
 800240c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize break taking
        tellers[i].break_end = clock_init(tellers[i].break_end);
 8002410:	4a54      	ldr	r2, [pc, #336]	; (8002564 <initialize_tellers+0x300>)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	21b0      	movs	r1, #176	; 0xb0
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8002420:	4638      	mov	r0, r7
 8002422:	4a50      	ldr	r2, [pc, #320]	; (8002564 <initialize_tellers+0x300>)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	21b0      	movs	r1, #176	; 0xb0
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	3370      	adds	r3, #112	; 0x70
 8002430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002432:	f7fe fc89 	bl	8000d48 <clock_init>
 8002436:	463b      	mov	r3, r7
 8002438:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800243c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].current_break = clock_init(tellers[i].current_break);
 8002440:	4a48      	ldr	r2, [pc, #288]	; (8002564 <initialize_tellers+0x300>)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	21b0      	movs	r1, #176	; 0xb0
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8002450:	4638      	mov	r0, r7
 8002452:	4a44      	ldr	r2, [pc, #272]	; (8002564 <initialize_tellers+0x300>)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	21b0      	movs	r1, #176	; 0xb0
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	3378      	adds	r3, #120	; 0x78
 8002460:	3304      	adds	r3, #4
 8002462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002464:	f7fe fc70 	bl	8000d48 <clock_init>
 8002468:	1d23      	adds	r3, r4, #4
 800246a:	463a      	mov	r2, r7
 800246c:	ca07      	ldmia	r2, {r0, r1, r2}
 800246e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize break metrics
        tellers[i].num_breaks = 0;
 8002472:	4a3c      	ldr	r2, [pc, #240]	; (8002564 <initialize_tellers+0x300>)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	21b0      	movs	r1, #176	; 0xb0
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	3388      	adds	r3, #136	; 0x88
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
        tellers[i].max_break = clock_init(tellers[i].max_break);
 8002484:	4a37      	ldr	r2, [pc, #220]	; (8002564 <initialize_tellers+0x300>)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	21b0      	movs	r1, #176	; 0xb0
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8002494:	4638      	mov	r0, r7
 8002496:	4a33      	ldr	r2, [pc, #204]	; (8002564 <initialize_tellers+0x300>)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	21b0      	movs	r1, #176	; 0xb0
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3388      	adds	r3, #136	; 0x88
 80024a4:	3304      	adds	r3, #4
 80024a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a8:	f7fe fc4e 	bl	8000d48 <clock_init>
 80024ac:	1d23      	adds	r3, r4, #4
 80024ae:	463a      	mov	r2, r7
 80024b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80024b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].min_break = clock_init(tellers[i].min_break);
 80024b6:	4a2b      	ldr	r2, [pc, #172]	; (8002564 <initialize_tellers+0x300>)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	21b0      	movs	r1, #176	; 0xb0
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	4413      	add	r3, r2
 80024c2:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80024c6:	4638      	mov	r0, r7
 80024c8:	4a26      	ldr	r2, [pc, #152]	; (8002564 <initialize_tellers+0x300>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	21b0      	movs	r1, #176	; 0xb0
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3398      	adds	r3, #152	; 0x98
 80024d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024d8:	f7fe fc36 	bl	8000d48 <clock_init>
 80024dc:	463b      	mov	r3, r7
 80024de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].total_break = clock_init(tellers[i].total_break);
 80024e6:	4a1f      	ldr	r2, [pc, #124]	; (8002564 <initialize_tellers+0x300>)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	21b0      	movs	r1, #176	; 0xb0
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80024f6:	4638      	mov	r0, r7
 80024f8:	4a1a      	ldr	r2, [pc, #104]	; (8002564 <initialize_tellers+0x300>)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	21b0      	movs	r1, #176	; 0xb0
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	33a0      	adds	r3, #160	; 0xa0
 8002506:	3304      	adds	r3, #4
 8002508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800250a:	f7fe fc1d 	bl	8000d48 <clock_init>
 800250e:	1d23      	adds	r3, r4, #4
 8002510:	463a      	mov	r2, r7
 8002512:	ca07      	ldmia	r2, {r0, r1, r2}
 8002514:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        //initialize tellers in Queue
        teller_wait[i-1] = tellers[i];
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3b01      	subs	r3, #1
 800251c:	4a12      	ldr	r2, [pc, #72]	; (8002568 <initialize_tellers+0x304>)
 800251e:	21b0      	movs	r1, #176	; 0xb0
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	18d0      	adds	r0, r2, r3
 8002526:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <initialize_tellers+0x300>)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	21b0      	movs	r1, #176	; 0xb0
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	4619      	mov	r1, r3
 8002534:	23b0      	movs	r3, #176	; 0xb0
 8002536:	461a      	mov	r2, r3
 8002538:	f007 f910 	bl	800975c <memcpy>
    for (int i = 1; i < 4; i++) {
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	3301      	adds	r3, #1
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b03      	cmp	r3, #3
 8002546:	f77f ae93 	ble.w	8002270 <initialize_tellers+0xc>

    }
    	teller_wait[0] = VOID_TELLER;
 800254a:	4a07      	ldr	r2, [pc, #28]	; (8002568 <initialize_tellers+0x304>)
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <initialize_tellers+0x308>)
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	23b0      	movs	r3, #176	; 0xb0
 8002554:	461a      	mov	r2, r3
 8002556:	f007 f901 	bl	800975c <memcpy>
}
 800255a:	bf00      	nop
 800255c:	371c      	adds	r7, #28
 800255e:	46bd      	mov	sp, r7
 8002560:	bd90      	pop	{r4, r7, pc}
 8002562:	bf00      	nop
 8002564:	200003f8 	.word	0x200003f8
 8002568:	20000768 	.word	0x20000768
 800256c:	200006b8 	.word	0x200006b8

08002570 <manage_tellers>:

//Maybe Put entire thing inside a case statement if at all possible,
//Would Simplify logic and speed it up
void manage_tellers(void){
 8002570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002574:	b098      	sub	sp, #96	; 0x60
 8002576:	af04      	add	r7, sp, #16
	int i;
	for (i = 1; i < 4; i++) {
 8002578:	2301      	movs	r3, #1
 800257a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800257c:	bf00      	nop
 800257e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002580:	2b03      	cmp	r3, #3
 8002582:	f300 8557 	bgt.w	8003034 <manage_tellers+0xac4>
		switch (tellers[i].status){
 8002586:	4aa3      	ldr	r2, [pc, #652]	; (8002814 <manage_tellers+0x2a4>)
 8002588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258a:	21b0      	movs	r1, #176	; 0xb0
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	3304      	adds	r3, #4
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d00a      	beq.n	80025b0 <manage_tellers+0x40>
 800259a:	2b02      	cmp	r3, #2
 800259c:	f300 854c 	bgt.w	8003038 <manage_tellers+0xac8>
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 813d 	beq.w	8002820 <manage_tellers+0x2b0>
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	f000 840a 	beq.w	8002dc0 <manage_tellers+0x850>
				}
				break;
			}
		}
			//Case Break
			break;
 80025ac:	f000 bd44 	b.w	8003038 <manage_tellers+0xac8>
			if(clock_compare(Clock,tellers[i].break_end) != 1){
 80025b0:	4a98      	ldr	r2, [pc, #608]	; (8002814 <manage_tellers+0x2a4>)
 80025b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b4:	21b0      	movs	r1, #176	; 0xb0
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3370      	adds	r3, #112	; 0x70
 80025be:	4a96      	ldr	r2, [pc, #600]	; (8002818 <manage_tellers+0x2a8>)
 80025c0:	466c      	mov	r4, sp
 80025c2:	1d19      	adds	r1, r3, #4
 80025c4:	c903      	ldmia	r1, {r0, r1}
 80025c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80025ce:	f7fe fc51 	bl	8000e74 <clock_compare>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	f040 851f 	bne.w	8003018 <manage_tellers+0xaa8>
			if(clock_compare(Clock,tellers[i].break_end) == 1){
 80025da:	4a8e      	ldr	r2, [pc, #568]	; (8002814 <manage_tellers+0x2a4>)
 80025dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025de:	21b0      	movs	r1, #176	; 0xb0
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	3370      	adds	r3, #112	; 0x70
 80025e8:	4a8b      	ldr	r2, [pc, #556]	; (8002818 <manage_tellers+0x2a8>)
 80025ea:	466c      	mov	r4, sp
 80025ec:	1d19      	adds	r1, r3, #4
 80025ee:	c903      	ldmia	r1, {r0, r1}
 80025f0:	e884 0003 	stmia.w	r4, {r0, r1}
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80025f8:	f7fe fc3c 	bl	8000e74 <clock_compare>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b01      	cmp	r3, #1
 8002600:	f040 850c 	bne.w	800301c <manage_tellers+0xaac>
				if(clock_compare(tellers[i].current_break,tellers[i].max_break) == 0){
 8002604:	4a83      	ldr	r2, [pc, #524]	; (8002814 <manage_tellers+0x2a4>)
 8002606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002608:	21b0      	movs	r1, #176	; 0xb0
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3388      	adds	r3, #136	; 0x88
 8002612:	4980      	ldr	r1, [pc, #512]	; (8002814 <manage_tellers+0x2a4>)
 8002614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002616:	20b0      	movs	r0, #176	; 0xb0
 8002618:	fb00 f202 	mul.w	r2, r0, r2
 800261c:	440a      	add	r2, r1
 800261e:	3278      	adds	r2, #120	; 0x78
 8002620:	466c      	mov	r4, sp
 8002622:	f103 0108 	add.w	r1, r3, #8
 8002626:	c903      	ldmia	r1, {r0, r1}
 8002628:	e884 0003 	stmia.w	r4, {r0, r1}
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	3204      	adds	r2, #4
 8002630:	ca07      	ldmia	r2, {r0, r1, r2}
 8002632:	f7fe fc1f 	bl	8000e74 <clock_compare>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d112      	bne.n	8002662 <manage_tellers+0xf2>
					tellers[i].max_break = tellers[i].current_break;
 800263c:	4a75      	ldr	r2, [pc, #468]	; (8002814 <manage_tellers+0x2a4>)
 800263e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002640:	21b0      	movs	r1, #176	; 0xb0
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3388      	adds	r3, #136	; 0x88
 800264a:	4972      	ldr	r1, [pc, #456]	; (8002814 <manage_tellers+0x2a4>)
 800264c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800264e:	20b0      	movs	r0, #176	; 0xb0
 8002650:	fb00 f202 	mul.w	r2, r0, r2
 8002654:	440a      	add	r2, r1
 8002656:	3278      	adds	r2, #120	; 0x78
 8002658:	3304      	adds	r3, #4
 800265a:	3204      	adds	r2, #4
 800265c:	ca07      	ldmia	r2, {r0, r1, r2}
 800265e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				if(clock_compare(tellers[i].current_break,tellers[i].min_break) == 2){
 8002662:	4a6c      	ldr	r2, [pc, #432]	; (8002814 <manage_tellers+0x2a4>)
 8002664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002666:	21b0      	movs	r1, #176	; 0xb0
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4413      	add	r3, r2
 800266e:	3398      	adds	r3, #152	; 0x98
 8002670:	4968      	ldr	r1, [pc, #416]	; (8002814 <manage_tellers+0x2a4>)
 8002672:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002674:	20b0      	movs	r0, #176	; 0xb0
 8002676:	fb00 f202 	mul.w	r2, r0, r2
 800267a:	440a      	add	r2, r1
 800267c:	3278      	adds	r2, #120	; 0x78
 800267e:	466c      	mov	r4, sp
 8002680:	1d19      	adds	r1, r3, #4
 8002682:	c903      	ldmia	r1, {r0, r1}
 8002684:	e884 0003 	stmia.w	r4, {r0, r1}
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3204      	adds	r2, #4
 800268c:	ca07      	ldmia	r2, {r0, r1, r2}
 800268e:	f7fe fbf1 	bl	8000e74 <clock_compare>
 8002692:	4603      	mov	r3, r0
 8002694:	2b02      	cmp	r3, #2
 8002696:	d114      	bne.n	80026c2 <manage_tellers+0x152>
					tellers[i].min_break = tellers[i].current_break;
 8002698:	4a5e      	ldr	r2, [pc, #376]	; (8002814 <manage_tellers+0x2a4>)
 800269a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800269c:	21b0      	movs	r1, #176	; 0xb0
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80026a8:	4a5a      	ldr	r2, [pc, #360]	; (8002814 <manage_tellers+0x2a4>)
 80026aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ac:	21b0      	movs	r1, #176	; 0xb0
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	3378      	adds	r3, #120	; 0x78
 80026b6:	4604      	mov	r4, r0
 80026b8:	3304      	adds	r3, #4
 80026ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				tellers[i].total_break = add_clocks(tellers[i].total_break, tellers[i].current_break);
 80026c2:	4a54      	ldr	r2, [pc, #336]	; (8002814 <manage_tellers+0x2a4>)
 80026c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c6:	21b0      	movs	r1, #176	; 0xb0
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
 80026d2:	f107 0c08 	add.w	ip, r7, #8
 80026d6:	4a4f      	ldr	r2, [pc, #316]	; (8002814 <manage_tellers+0x2a4>)
 80026d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026da:	21b0      	movs	r1, #176	; 0xb0
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	f103 06a0 	add.w	r6, r3, #160	; 0xa0
 80026e6:	4a4b      	ldr	r2, [pc, #300]	; (8002814 <manage_tellers+0x2a4>)
 80026e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ea:	21b0      	movs	r1, #176	; 0xb0
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3378      	adds	r3, #120	; 0x78
 80026f4:	466c      	mov	r4, sp
 80026f6:	3304      	adds	r3, #4
 80026f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002700:	1d33      	adds	r3, r6, #4
 8002702:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002704:	4660      	mov	r0, ip
 8002706:	f7fe fb7b 	bl	8000e00 <add_clocks>
 800270a:	1d2b      	adds	r3, r5, #4
 800270c:	f107 0208 	add.w	r2, r7, #8
 8002710:	ca07      	ldmia	r2, {r0, r1, r2}
 8002712:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].current_break = clock_init(tellers[i].current_break);
 8002716:	4a3f      	ldr	r2, [pc, #252]	; (8002814 <manage_tellers+0x2a4>)
 8002718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800271a:	21b0      	movs	r1, #176	; 0xb0
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8002726:	f107 0008 	add.w	r0, r7, #8
 800272a:	4a3a      	ldr	r2, [pc, #232]	; (8002814 <manage_tellers+0x2a4>)
 800272c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800272e:	21b0      	movs	r1, #176	; 0xb0
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	3378      	adds	r3, #120	; 0x78
 8002738:	3304      	adds	r3, #4
 800273a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800273c:	f7fe fb04 	bl	8000d48 <clock_init>
 8002740:	1d23      	adds	r3, r4, #4
 8002742:	f107 0208 	add.w	r2, r7, #8
 8002746:	ca07      	ldmia	r2, {r0, r1, r2}
 8002748:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].status = 0;
 800274c:	4a31      	ldr	r2, [pc, #196]	; (8002814 <manage_tellers+0x2a4>)
 800274e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002750:	21b0      	movs	r1, #176	; 0xb0
 8002752:	fb01 f303 	mul.w	r3, r1, r3
 8002756:	4413      	add	r3, r2
 8002758:	3304      	adds	r3, #4
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
				if(!((teller_wait[0].id == i) && (teller_wait[1].id == i) && (teller_wait[2].id == i))){
 800275e:	4b2f      	ldr	r3, [pc, #188]	; (800281c <manage_tellers+0x2ac>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002764:	429a      	cmp	r2, r3
 8002766:	d10b      	bne.n	8002780 <manage_tellers+0x210>
 8002768:	4b2c      	ldr	r3, [pc, #176]	; (800281c <manage_tellers+0x2ac>)
 800276a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800276e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002770:	429a      	cmp	r2, r3
 8002772:	d105      	bne.n	8002780 <manage_tellers+0x210>
 8002774:	4b29      	ldr	r3, [pc, #164]	; (800281c <manage_tellers+0x2ac>)
 8002776:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800277a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800277c:	429a      	cmp	r2, r3
 800277e:	d03a      	beq.n	80027f6 <manage_tellers+0x286>
					if(teller_wait[0].id == 0){
 8002780:	4b26      	ldr	r3, [pc, #152]	; (800281c <manage_tellers+0x2ac>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10d      	bne.n	80027a4 <manage_tellers+0x234>
						teller_wait[0] = tellers[i];
 8002788:	4824      	ldr	r0, [pc, #144]	; (800281c <manage_tellers+0x2ac>)
 800278a:	4a22      	ldr	r2, [pc, #136]	; (8002814 <manage_tellers+0x2a4>)
 800278c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278e:	21b0      	movs	r1, #176	; 0xb0
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	4619      	mov	r1, r3
 8002798:	23b0      	movs	r3, #176	; 0xb0
 800279a:	461a      	mov	r2, r3
 800279c:	f006 ffde 	bl	800975c <memcpy>
					break;
 80027a0:	f000 bc3e 	b.w	8003020 <manage_tellers+0xab0>
					else if(teller_wait[1].id == 0){
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <manage_tellers+0x2ac>)
 80027a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10e      	bne.n	80027cc <manage_tellers+0x25c>
						teller_wait[1] = tellers[i];
 80027ae:	4a1b      	ldr	r2, [pc, #108]	; (800281c <manage_tellers+0x2ac>)
 80027b0:	4918      	ldr	r1, [pc, #96]	; (8002814 <manage_tellers+0x2a4>)
 80027b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b4:	20b0      	movs	r0, #176	; 0xb0
 80027b6:	fb00 f303 	mul.w	r3, r0, r3
 80027ba:	4419      	add	r1, r3
 80027bc:	f102 03b0 	add.w	r3, r2, #176	; 0xb0
 80027c0:	22b0      	movs	r2, #176	; 0xb0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f006 ffca 	bl	800975c <memcpy>
					break;
 80027c8:	f000 bc2a 	b.w	8003020 <manage_tellers+0xab0>
					else if(teller_wait[2].id == 0){
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <manage_tellers+0x2ac>)
 80027ce:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 8424 	bne.w	8003020 <manage_tellers+0xab0>
						teller_wait[2] = tellers[i];
 80027d8:	4a10      	ldr	r2, [pc, #64]	; (800281c <manage_tellers+0x2ac>)
 80027da:	490e      	ldr	r1, [pc, #56]	; (8002814 <manage_tellers+0x2a4>)
 80027dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027de:	20b0      	movs	r0, #176	; 0xb0
 80027e0:	fb00 f303 	mul.w	r3, r0, r3
 80027e4:	4419      	add	r1, r3
 80027e6:	f502 73b0 	add.w	r3, r2, #352	; 0x160
 80027ea:	22b0      	movs	r2, #176	; 0xb0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f006 ffb5 	bl	800975c <memcpy>
					break;
 80027f2:	f000 bc15 	b.w	8003020 <manage_tellers+0xab0>
				tellers[i].teller_start_wait = Clock;
 80027f6:	4a07      	ldr	r2, [pc, #28]	; (8002814 <manage_tellers+0x2a4>)
 80027f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027fa:	21b0      	movs	r1, #176	; 0xb0
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	3360      	adds	r3, #96	; 0x60
 8002804:	4a04      	ldr	r2, [pc, #16]	; (8002818 <manage_tellers+0x2a8>)
 8002806:	3304      	adds	r3, #4
 8002808:	ca07      	ldmia	r2, {r0, r1, r2}
 800280a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			break;
 800280e:	f000 bc05 	b.w	800301c <manage_tellers+0xaac>
 8002812:	bf00      	nop
 8002814:	200003f8 	.word	0x200003f8
 8002818:	20000000 	.word	0x20000000
 800281c:	20000768 	.word	0x20000768
			if(tellers[i].take_break == 0){
 8002820:	4abf      	ldr	r2, [pc, #764]	; (8002b20 <manage_tellers+0x5b0>)
 8002822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002824:	21b0      	movs	r1, #176	; 0xb0
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3308      	adds	r3, #8
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f040 80ee 	bne.w	8002a12 <manage_tellers+0x4a2>
				  if((waiting[0] != NULL) && (tellers[i].id == teller_wait[0].id)){
 8002836:	4bbb      	ldr	r3, [pc, #748]	; (8002b24 <manage_tellers+0x5b4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 83f2 	beq.w	8003024 <manage_tellers+0xab4>
 8002840:	4ab7      	ldr	r2, [pc, #732]	; (8002b20 <manage_tellers+0x5b0>)
 8002842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002844:	21b0      	movs	r1, #176	; 0xb0
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4bb6      	ldr	r3, [pc, #728]	; (8002b28 <manage_tellers+0x5b8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	f040 83e6 	bne.w	8003024 <manage_tellers+0xab4>
					tellers[i].current_time_waiting = subtract_Clocks(Clock,tellers[i].teller_start_wait);
 8002858:	4ab1      	ldr	r2, [pc, #708]	; (8002b20 <manage_tellers+0x5b0>)
 800285a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285c:	21b0      	movs	r1, #176	; 0xb0
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	f103 0840 	add.w	r8, r3, #64	; 0x40
 8002868:	f107 0608 	add.w	r6, r7, #8
 800286c:	4daf      	ldr	r5, [pc, #700]	; (8002b2c <manage_tellers+0x5bc>)
 800286e:	4aac      	ldr	r2, [pc, #688]	; (8002b20 <manage_tellers+0x5b0>)
 8002870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002872:	21b0      	movs	r1, #176	; 0xb0
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3360      	adds	r3, #96	; 0x60
 800287c:	466c      	mov	r4, sp
 800287e:	3304      	adds	r3, #4
 8002880:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002884:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002888:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800288c:	4630      	mov	r0, r6
 800288e:	f7fe fb33 	bl	8000ef8 <subtract_Clocks>
 8002892:	4644      	mov	r4, r8
 8002894:	f107 0308 	add.w	r3, r7, #8
 8002898:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800289c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Customer customer = *waiting[0];
 80028a0:	4ba0      	ldr	r3, [pc, #640]	; (8002b24 <manage_tellers+0x5b4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f107 0418 	add.w	r4, r7, #24
 80028a8:	461d      	mov	r5, r3
 80028aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b6:	682b      	ldr	r3, [r5, #0]
 80028b8:	6023      	str	r3, [r4, #0]
					waiting[0] = NULL;
 80028ba:	4b9a      	ldr	r3, [pc, #616]	; (8002b24 <manage_tellers+0x5b4>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
				  	tellers[i].service_end_time = customer.service_time;
 80028c0:	4a97      	ldr	r2, [pc, #604]	; (8002b20 <manage_tellers+0x5b0>)
 80028c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c4:	21b0      	movs	r1, #176	; 0xb0
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	3308      	adds	r3, #8
 80028ce:	3304      	adds	r3, #4
 80028d0:	f107 021c 	add.w	r2, r7, #28
 80028d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80028d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  	total_customer_wait = add_clocks(total_customer_wait, customer.total_queue_time);
 80028da:	4b95      	ldr	r3, [pc, #596]	; (8002b30 <manage_tellers+0x5c0>)
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	f107 0608 	add.w	r6, r7, #8
 80028e2:	4d93      	ldr	r5, [pc, #588]	; (8002b30 <manage_tellers+0x5c0>)
 80028e4:	466c      	mov	r4, sp
 80028e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028f2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80028f6:	4630      	mov	r0, r6
 80028f8:	f7fe fa82 	bl	8000e00 <add_clocks>
 80028fc:	687c      	ldr	r4, [r7, #4]
 80028fe:	f107 0308 	add.w	r3, r7, #8
 8002902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				  	if(clock_compare(customer.total_queue_time,max_customer_wait) == 0){
 800290a:	4b8a      	ldr	r3, [pc, #552]	; (8002b34 <manage_tellers+0x5c4>)
 800290c:	466c      	mov	r4, sp
 800290e:	1d1a      	adds	r2, r3, #4
 8002910:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002914:	e884 0003 	stmia.w	r4, {r0, r1}
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800291e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002920:	f7fe faa8 	bl	8000e74 <clock_compare>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d107      	bne.n	800293a <manage_tellers+0x3ca>
				  		max_customer_wait = customer.total_queue_time;
 800292a:	4b82      	ldr	r3, [pc, #520]	; (8002b34 <manage_tellers+0x5c4>)
 800292c:	461c      	mov	r4, r3
 800292e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				  	tellers[i].status = 1;
 800293a:	4a79      	ldr	r2, [pc, #484]	; (8002b20 <manage_tellers+0x5b0>)
 800293c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800293e:	21b0      	movs	r1, #176	; 0xb0
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3304      	adds	r3, #4
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]
				  	if(clock_compare(tellers[i].current_time_waiting,tellers[i].max_time_waiting) == 0){
 800294c:	4a74      	ldr	r2, [pc, #464]	; (8002b20 <manage_tellers+0x5b0>)
 800294e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002950:	21b0      	movs	r1, #176	; 0xb0
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3358      	adds	r3, #88	; 0x58
 800295a:	4971      	ldr	r1, [pc, #452]	; (8002b20 <manage_tellers+0x5b0>)
 800295c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800295e:	20b0      	movs	r0, #176	; 0xb0
 8002960:	fb00 f202 	mul.w	r2, r0, r2
 8002964:	440a      	add	r2, r1
 8002966:	3240      	adds	r2, #64	; 0x40
 8002968:	466c      	mov	r4, sp
 800296a:	1d19      	adds	r1, r3, #4
 800296c:	c903      	ldmia	r1, {r0, r1}
 800296e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	ca07      	ldmia	r2, {r0, r1, r2}
 8002976:	f7fe fa7d 	bl	8000e74 <clock_compare>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d12d      	bne.n	80029dc <manage_tellers+0x46c>
				 	tellers[i].max_time_waiting = tellers[i].current_time_waiting;
 8002980:	4a67      	ldr	r2, [pc, #412]	; (8002b20 <manage_tellers+0x5b0>)
 8002982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002984:	21b0      	movs	r1, #176	; 0xb0
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8002990:	4a63      	ldr	r2, [pc, #396]	; (8002b20 <manage_tellers+0x5b0>)
 8002992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002994:	21b0      	movs	r1, #176	; 0xb0
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80029a0:	4603      	mov	r3, r0
 80029a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80029a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				 	teller_wait[0] = teller_wait[1];
 80029a8:	4a5f      	ldr	r2, [pc, #380]	; (8002b28 <manage_tellers+0x5b8>)
 80029aa:	4b5f      	ldr	r3, [pc, #380]	; (8002b28 <manage_tellers+0x5b8>)
 80029ac:	4610      	mov	r0, r2
 80029ae:	33b0      	adds	r3, #176	; 0xb0
 80029b0:	22b0      	movs	r2, #176	; 0xb0
 80029b2:	4619      	mov	r1, r3
 80029b4:	f006 fed2 	bl	800975c <memcpy>
				 	teller_wait[1] = teller_wait[2];
 80029b8:	4b5b      	ldr	r3, [pc, #364]	; (8002b28 <manage_tellers+0x5b8>)
 80029ba:	4a5b      	ldr	r2, [pc, #364]	; (8002b28 <manage_tellers+0x5b8>)
 80029bc:	33b0      	adds	r3, #176	; 0xb0
 80029be:	f502 71b0 	add.w	r1, r2, #352	; 0x160
 80029c2:	22b0      	movs	r2, #176	; 0xb0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f006 fec9 	bl	800975c <memcpy>
				 	teller_wait[4] = VOID_TELLER;
 80029ca:	4b57      	ldr	r3, [pc, #348]	; (8002b28 <manage_tellers+0x5b8>)
 80029cc:	4a5a      	ldr	r2, [pc, #360]	; (8002b38 <manage_tellers+0x5c8>)
 80029ce:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80029d2:	4611      	mov	r1, r2
 80029d4:	22b0      	movs	r2, #176	; 0xb0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f006 fec0 	bl	800975c <memcpy>
				  	tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 80029dc:	4a50      	ldr	r2, [pc, #320]	; (8002b20 <manage_tellers+0x5b0>)
 80029de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e0:	21b0      	movs	r1, #176	; 0xb0
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80029ec:	f107 0008 	add.w	r0, r7, #8
 80029f0:	4a4b      	ldr	r2, [pc, #300]	; (8002b20 <manage_tellers+0x5b0>)
 80029f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f4:	21b0      	movs	r1, #176	; 0xb0
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3340      	adds	r3, #64	; 0x40
 80029fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a00:	f7fe f9a2 	bl	8000d48 <clock_init>
 8002a04:	f107 0308 	add.w	r3, r7, #8
 8002a08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				break;
 8002a10:	e308      	b.n	8003024 <manage_tellers+0xab4>
			if(tellers[i].take_break == 1){
 8002a12:	4a43      	ldr	r2, [pc, #268]	; (8002b20 <manage_tellers+0x5b0>)
 8002a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a16:	21b0      	movs	r1, #176	; 0xb0
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3308      	adds	r3, #8
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	f040 8300 	bne.w	8003028 <manage_tellers+0xab8>
				tellers[i].status = 2;
 8002a28:	4a3d      	ldr	r2, [pc, #244]	; (8002b20 <manage_tellers+0x5b0>)
 8002a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2c:	21b0      	movs	r1, #176	; 0xb0
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3304      	adds	r3, #4
 8002a36:	2202      	movs	r2, #2
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	f000 80e2 	beq.w	8002c06 <manage_tellers+0x696>
 8002a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	f300 8141 	bgt.w	8002ccc <manage_tellers+0x75c>
 8002a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d003      	beq.n	8002a58 <manage_tellers+0x4e8>
 8002a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d074      	beq.n	8002b40 <manage_tellers+0x5d0>
					break;
 8002a56:	e139      	b.n	8002ccc <manage_tellers+0x75c>
					breaker.start_break[i] = 1;
 8002a58:	4a38      	ldr	r2, [pc, #224]	; (8002b3c <manage_tellers+0x5cc>)
 8002a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration1;
 8002a62:	4a2f      	ldr	r2, [pc, #188]	; (8002b20 <manage_tellers+0x5b0>)
 8002a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a66:	21b0      	movs	r1, #176	; 0xb0
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002a72:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <manage_tellers+0x5cc>)
 8002a74:	4614      	mov	r4, r2
 8002a76:	3318      	adds	r3, #24
 8002a78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					tellers[i].current_break = breaker.break_duration1;
 8002a80:	4a27      	ldr	r2, [pc, #156]	; (8002b20 <manage_tellers+0x5b0>)
 8002a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a84:	21b0      	movs	r1, #176	; 0xb0
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3378      	adds	r3, #120	; 0x78
 8002a8e:	4a2b      	ldr	r2, [pc, #172]	; (8002b3c <manage_tellers+0x5cc>)
 8002a90:	3304      	adds	r3, #4
 8002a92:	3218      	adds	r2, #24
 8002a94:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_duration1 = clock_init(breaker.break_duration1);
 8002a9a:	4c28      	ldr	r4, [pc, #160]	; (8002b3c <manage_tellers+0x5cc>)
 8002a9c:	f107 0008 	add.w	r0, r7, #8
 8002aa0:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <manage_tellers+0x5cc>)
 8002aa2:	3318      	adds	r3, #24
 8002aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa6:	f7fe f94f 	bl	8000d48 <clock_init>
 8002aaa:	f104 0318 	add.w	r3, r4, #24
 8002aae:	f107 0208 	add.w	r2, r7, #8
 8002ab2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ab4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_time1 = clock_init(breaker.break_time1);
 8002ab8:	4c20      	ldr	r4, [pc, #128]	; (8002b3c <manage_tellers+0x5cc>)
 8002aba:	f107 0008 	add.w	r0, r7, #8
 8002abe:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <manage_tellers+0x5cc>)
 8002ac0:	330c      	adds	r3, #12
 8002ac2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ac4:	f7fe f940 	bl	8000d48 <clock_init>
 8002ac8:	f104 030c 	add.w	r3, r4, #12
 8002acc:	f107 0208 	add.w	r2, r7, #8
 8002ad0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ad2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					tellers[i].break_end = add_clocks(Clock, tellers[i].break_end);
 8002ad6:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <manage_tellers+0x5b0>)
 8002ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ada:	21b0      	movs	r1, #176	; 0xb0
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f103 0670 	add.w	r6, r3, #112	; 0x70
 8002ae6:	f107 0508 	add.w	r5, r7, #8
 8002aea:	4c10      	ldr	r4, [pc, #64]	; (8002b2c <manage_tellers+0x5bc>)
 8002aec:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <manage_tellers+0x5b0>)
 8002aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af0:	21b0      	movs	r1, #176	; 0xb0
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002afc:	466b      	mov	r3, sp
 8002afe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b04:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002b08:	4628      	mov	r0, r5
 8002b0a:	f7fe f979 	bl	8000e00 <add_clocks>
 8002b0e:	4634      	mov	r4, r6
 8002b10:	f107 0308 	add.w	r3, r7, #8
 8002b14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					break;
 8002b1c:	e0d7      	b.n	8002cce <manage_tellers+0x75e>
 8002b1e:	bf00      	nop
 8002b20:	200003f8 	.word	0x200003f8
 8002b24:	20000134 	.word	0x20000134
 8002b28:	20000768 	.word	0x20000768
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	200002d8 	.word	0x200002d8
 8002b34:	200002e4 	.word	0x200002e4
 8002b38:	200006b8 	.word	0x200006b8
 8002b3c:	200000cc 	.word	0x200000cc
					breaker.start_break[i] = 1;
 8002b40:	4abb      	ldr	r2, [pc, #748]	; (8002e30 <manage_tellers+0x8c0>)
 8002b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b44:	2101      	movs	r1, #1
 8002b46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration2;
 8002b4a:	4aba      	ldr	r2, [pc, #744]	; (8002e34 <manage_tellers+0x8c4>)
 8002b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4e:	21b0      	movs	r1, #176	; 0xb0
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002b5a:	4bb5      	ldr	r3, [pc, #724]	; (8002e30 <manage_tellers+0x8c0>)
 8002b5c:	4614      	mov	r4, r2
 8002b5e:	3330      	adds	r3, #48	; 0x30
 8002b60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					tellers[i].current_break = breaker.break_duration2;
 8002b68:	4ab2      	ldr	r2, [pc, #712]	; (8002e34 <manage_tellers+0x8c4>)
 8002b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6c:	21b0      	movs	r1, #176	; 0xb0
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3378      	adds	r3, #120	; 0x78
 8002b76:	4aae      	ldr	r2, [pc, #696]	; (8002e30 <manage_tellers+0x8c0>)
 8002b78:	3304      	adds	r3, #4
 8002b7a:	3230      	adds	r2, #48	; 0x30
 8002b7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_duration2 = clock_init(breaker.break_duration2);
 8002b82:	4cab      	ldr	r4, [pc, #684]	; (8002e30 <manage_tellers+0x8c0>)
 8002b84:	f107 0008 	add.w	r0, r7, #8
 8002b88:	4ba9      	ldr	r3, [pc, #676]	; (8002e30 <manage_tellers+0x8c0>)
 8002b8a:	3330      	adds	r3, #48	; 0x30
 8002b8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b8e:	f7fe f8db 	bl	8000d48 <clock_init>
 8002b92:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8002b96:	f107 0208 	add.w	r2, r7, #8
 8002b9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_time2 = clock_init(breaker.break_time2);
 8002ba0:	4ca3      	ldr	r4, [pc, #652]	; (8002e30 <manage_tellers+0x8c0>)
 8002ba2:	f107 0008 	add.w	r0, r7, #8
 8002ba6:	4ba2      	ldr	r3, [pc, #648]	; (8002e30 <manage_tellers+0x8c0>)
 8002ba8:	3324      	adds	r3, #36	; 0x24
 8002baa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bac:	f7fe f8cc 	bl	8000d48 <clock_init>
 8002bb0:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8002bb4:	f107 0208 	add.w	r2, r7, #8
 8002bb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					tellers[i].break_end = add_clocks(Clock, tellers[i].break_end);
 8002bbe:	4a9d      	ldr	r2, [pc, #628]	; (8002e34 <manage_tellers+0x8c4>)
 8002bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc2:	21b0      	movs	r1, #176	; 0xb0
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	f103 0670 	add.w	r6, r3, #112	; 0x70
 8002bce:	f107 0508 	add.w	r5, r7, #8
 8002bd2:	4c99      	ldr	r4, [pc, #612]	; (8002e38 <manage_tellers+0x8c8>)
 8002bd4:	4a97      	ldr	r2, [pc, #604]	; (8002e34 <manage_tellers+0x8c4>)
 8002bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd8:	21b0      	movs	r1, #176	; 0xb0
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002be4:	466b      	mov	r3, sp
 8002be6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002be8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002bec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	f7fe f905 	bl	8000e00 <add_clocks>
 8002bf6:	4634      	mov	r4, r6
 8002bf8:	f107 0308 	add.w	r3, r7, #8
 8002bfc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					break;
 8002c04:	e063      	b.n	8002cce <manage_tellers+0x75e>
					breaker.start_break[i] = 1;
 8002c06:	4a8a      	ldr	r2, [pc, #552]	; (8002e30 <manage_tellers+0x8c0>)
 8002c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration3;
 8002c10:	4a88      	ldr	r2, [pc, #544]	; (8002e34 <manage_tellers+0x8c4>)
 8002c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c14:	21b0      	movs	r1, #176	; 0xb0
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002c20:	4b83      	ldr	r3, [pc, #524]	; (8002e30 <manage_tellers+0x8c0>)
 8002c22:	4614      	mov	r4, r2
 8002c24:	3348      	adds	r3, #72	; 0x48
 8002c26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					tellers[i].current_break = breaker.break_duration3;
 8002c2e:	4a81      	ldr	r2, [pc, #516]	; (8002e34 <manage_tellers+0x8c4>)
 8002c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c32:	21b0      	movs	r1, #176	; 0xb0
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3378      	adds	r3, #120	; 0x78
 8002c3c:	4a7c      	ldr	r2, [pc, #496]	; (8002e30 <manage_tellers+0x8c0>)
 8002c3e:	3304      	adds	r3, #4
 8002c40:	3248      	adds	r2, #72	; 0x48
 8002c42:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_duration3 = clock_init(breaker.break_duration3);
 8002c48:	4c79      	ldr	r4, [pc, #484]	; (8002e30 <manage_tellers+0x8c0>)
 8002c4a:	f107 0008 	add.w	r0, r7, #8
 8002c4e:	4b78      	ldr	r3, [pc, #480]	; (8002e30 <manage_tellers+0x8c0>)
 8002c50:	3348      	adds	r3, #72	; 0x48
 8002c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c54:	f7fe f878 	bl	8000d48 <clock_init>
 8002c58:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002c5c:	f107 0208 	add.w	r2, r7, #8
 8002c60:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_time3 = clock_init(breaker.break_time3);
 8002c66:	4c72      	ldr	r4, [pc, #456]	; (8002e30 <manage_tellers+0x8c0>)
 8002c68:	f107 0008 	add.w	r0, r7, #8
 8002c6c:	4b70      	ldr	r3, [pc, #448]	; (8002e30 <manage_tellers+0x8c0>)
 8002c6e:	333c      	adds	r3, #60	; 0x3c
 8002c70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c72:	f7fe f869 	bl	8000d48 <clock_init>
 8002c76:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8002c7a:	f107 0208 	add.w	r2, r7, #8
 8002c7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					tellers[i].break_end = add_clocks(Clock, tellers[i].break_end);
 8002c84:	4a6b      	ldr	r2, [pc, #428]	; (8002e34 <manage_tellers+0x8c4>)
 8002c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c88:	21b0      	movs	r1, #176	; 0xb0
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	f103 0670 	add.w	r6, r3, #112	; 0x70
 8002c94:	f107 0508 	add.w	r5, r7, #8
 8002c98:	4c67      	ldr	r4, [pc, #412]	; (8002e38 <manage_tellers+0x8c8>)
 8002c9a:	4a66      	ldr	r2, [pc, #408]	; (8002e34 <manage_tellers+0x8c4>)
 8002c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c9e:	21b0      	movs	r1, #176	; 0xb0
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002caa:	466b      	mov	r3, sp
 8002cac:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002cb2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	f7fe f8a2 	bl	8000e00 <add_clocks>
 8002cbc:	4634      	mov	r4, r6
 8002cbe:	f107 0308 	add.w	r3, r7, #8
 8002cc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					break;
 8002cca:	e000      	b.n	8002cce <manage_tellers+0x75e>
					break;
 8002ccc:	bf00      	nop
				tellers[i].take_break = 0;
 8002cce:	4a59      	ldr	r2, [pc, #356]	; (8002e34 <manage_tellers+0x8c4>)
 8002cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd2:	21b0      	movs	r1, #176	; 0xb0
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	3308      	adds	r3, #8
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
				if(clock_compare(tellers[i].current_time_waiting,tellers[i].max_time_waiting) == 0){
 8002ce0:	4a54      	ldr	r2, [pc, #336]	; (8002e34 <manage_tellers+0x8c4>)
 8002ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce4:	21b0      	movs	r1, #176	; 0xb0
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3358      	adds	r3, #88	; 0x58
 8002cee:	4951      	ldr	r1, [pc, #324]	; (8002e34 <manage_tellers+0x8c4>)
 8002cf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cf2:	20b0      	movs	r0, #176	; 0xb0
 8002cf4:	fb00 f202 	mul.w	r2, r0, r2
 8002cf8:	440a      	add	r2, r1
 8002cfa:	3240      	adds	r2, #64	; 0x40
 8002cfc:	466c      	mov	r4, sp
 8002cfe:	1d19      	adds	r1, r3, #4
 8002d00:	c903      	ldmia	r1, {r0, r1}
 8002d02:	e884 0003 	stmia.w	r4, {r0, r1}
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d0a:	f7fe f8b3 	bl	8000e74 <clock_compare>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d113      	bne.n	8002d3c <manage_tellers+0x7cc>
					tellers[i].max_time_waiting = tellers[i].current_time_waiting;
 8002d14:	4a47      	ldr	r2, [pc, #284]	; (8002e34 <manage_tellers+0x8c4>)
 8002d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d18:	21b0      	movs	r1, #176	; 0xb0
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8002d24:	4a43      	ldr	r2, [pc, #268]	; (8002e34 <manage_tellers+0x8c4>)
 8002d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d28:	21b0      	movs	r1, #176	; 0xb0
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002d34:	4603      	mov	r3, r0
 8002d36:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].total_time_waiting = add_clocks(tellers[i].total_time_waiting,tellers[i].current_time_waiting);
 8002d3c:	4a3d      	ldr	r2, [pc, #244]	; (8002e34 <manage_tellers+0x8c4>)
 8002d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d40:	21b0      	movs	r1, #176	; 0xb0
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8002d4c:	f107 0508 	add.w	r5, r7, #8
 8002d50:	4a38      	ldr	r2, [pc, #224]	; (8002e34 <manage_tellers+0x8c4>)
 8002d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d54:	21b0      	movs	r1, #176	; 0xb0
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3328      	adds	r3, #40	; 0x28
 8002d5e:	4935      	ldr	r1, [pc, #212]	; (8002e34 <manage_tellers+0x8c4>)
 8002d60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d62:	20b0      	movs	r0, #176	; 0xb0
 8002d64:	fb00 f202 	mul.w	r2, r0, r2
 8002d68:	440a      	add	r2, r1
 8002d6a:	3240      	adds	r2, #64	; 0x40
 8002d6c:	466c      	mov	r4, sp
 8002d6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d76:	4628      	mov	r0, r5
 8002d78:	f7fe f842 	bl	8000e00 <add_clocks>
 8002d7c:	4634      	mov	r4, r6
 8002d7e:	f107 0308 	add.w	r3, r7, #8
 8002d82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 8002d8a:	4a2a      	ldr	r2, [pc, #168]	; (8002e34 <manage_tellers+0x8c4>)
 8002d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d8e:	21b0      	movs	r1, #176	; 0xb0
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002d9a:	f107 0008 	add.w	r0, r7, #8
 8002d9e:	4a25      	ldr	r2, [pc, #148]	; (8002e34 <manage_tellers+0x8c4>)
 8002da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da2:	21b0      	movs	r1, #176	; 0xb0
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	3340      	adds	r3, #64	; 0x40
 8002dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dae:	f7fd ffcb 	bl	8000d48 <clock_init>
 8002db2:	f107 0308 	add.w	r3, r7, #8
 8002db6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002dba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			break;
 8002dbe:	e133      	b.n	8003028 <manage_tellers+0xab8>
			if(clock_compare(tellers[i].current_time_working,tellers[i].service_end_time) == 1){
 8002dc0:	4a1c      	ldr	r2, [pc, #112]	; (8002e34 <manage_tellers+0x8c4>)
 8002dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc4:	21b0      	movs	r1, #176	; 0xb0
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	3308      	adds	r3, #8
 8002dce:	4919      	ldr	r1, [pc, #100]	; (8002e34 <manage_tellers+0x8c4>)
 8002dd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dd2:	20b0      	movs	r0, #176	; 0xb0
 8002dd4:	fb00 f202 	mul.w	r2, r0, r2
 8002dd8:	440a      	add	r2, r1
 8002dda:	3230      	adds	r2, #48	; 0x30
 8002ddc:	466c      	mov	r4, sp
 8002dde:	f103 0108 	add.w	r1, r3, #8
 8002de2:	c903      	ldmia	r1, {r0, r1}
 8002de4:	e884 0003 	stmia.w	r4, {r0, r1}
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	3204      	adds	r2, #4
 8002dec:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dee:	f7fe f841 	bl	8000e74 <clock_compare>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d121      	bne.n	8002e3c <manage_tellers+0x8cc>
				tellers[i].current_time_working = clock_increment(tellers[i].current_time_working);
 8002df8:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <manage_tellers+0x8c4>)
 8002dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfc:	21b0      	movs	r1, #176	; 0xb0
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002e08:	f107 0008 	add.w	r0, r7, #8
 8002e0c:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <manage_tellers+0x8c4>)
 8002e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e10:	21b0      	movs	r1, #176	; 0xb0
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3330      	adds	r3, #48	; 0x30
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e1e:	f7fd ffc5 	bl	8000dac <clock_increment>
 8002e22:	1d23      	adds	r3, r4, #4
 8002e24:	f107 0208 	add.w	r2, r7, #8
 8002e28:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				break;
 8002e2e:	e100      	b.n	8003032 <manage_tellers+0xac2>
 8002e30:	200000cc 	.word	0x200000cc
 8002e34:	200003f8 	.word	0x200003f8
 8002e38:	20000000 	.word	0x20000000
			if(clock_compare(tellers[i].current_time_working,tellers[i].service_end_time) == 1){
 8002e3c:	4a81      	ldr	r2, [pc, #516]	; (8003044 <manage_tellers+0xad4>)
 8002e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e40:	21b0      	movs	r1, #176	; 0xb0
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	3308      	adds	r3, #8
 8002e4a:	497e      	ldr	r1, [pc, #504]	; (8003044 <manage_tellers+0xad4>)
 8002e4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e4e:	20b0      	movs	r0, #176	; 0xb0
 8002e50:	fb00 f202 	mul.w	r2, r0, r2
 8002e54:	440a      	add	r2, r1
 8002e56:	3230      	adds	r2, #48	; 0x30
 8002e58:	466c      	mov	r4, sp
 8002e5a:	f103 0108 	add.w	r1, r3, #8
 8002e5e:	c903      	ldmia	r1, {r0, r1}
 8002e60:	e884 0003 	stmia.w	r4, {r0, r1}
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	3204      	adds	r2, #4
 8002e68:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e6a:	f7fe f803 	bl	8000e74 <clock_compare>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	f040 80e1 	bne.w	8003038 <manage_tellers+0xac8>
				if(clock_compare(tellers[i].current_time_working,tellers[i].max_time_working) == 0){
 8002e76:	4a73      	ldr	r2, [pc, #460]	; (8003044 <manage_tellers+0xad4>)
 8002e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7a:	21b0      	movs	r1, #176	; 0xb0
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	3348      	adds	r3, #72	; 0x48
 8002e84:	496f      	ldr	r1, [pc, #444]	; (8003044 <manage_tellers+0xad4>)
 8002e86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e88:	20b0      	movs	r0, #176	; 0xb0
 8002e8a:	fb00 f202 	mul.w	r2, r0, r2
 8002e8e:	440a      	add	r2, r1
 8002e90:	3230      	adds	r2, #48	; 0x30
 8002e92:	466c      	mov	r4, sp
 8002e94:	f103 0108 	add.w	r1, r3, #8
 8002e98:	c903      	ldmia	r1, {r0, r1}
 8002e9a:	e884 0003 	stmia.w	r4, {r0, r1}
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	3204      	adds	r2, #4
 8002ea2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ea4:	f7fd ffe6 	bl	8000e74 <clock_compare>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d112      	bne.n	8002ed4 <manage_tellers+0x964>
					tellers[i].max_time_working = tellers[i].current_time_working;
 8002eae:	4a65      	ldr	r2, [pc, #404]	; (8003044 <manage_tellers+0xad4>)
 8002eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb2:	21b0      	movs	r1, #176	; 0xb0
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	3348      	adds	r3, #72	; 0x48
 8002ebc:	4961      	ldr	r1, [pc, #388]	; (8003044 <manage_tellers+0xad4>)
 8002ebe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ec0:	20b0      	movs	r0, #176	; 0xb0
 8002ec2:	fb00 f202 	mul.w	r2, r0, r2
 8002ec6:	440a      	add	r2, r1
 8002ec8:	3230      	adds	r2, #48	; 0x30
 8002eca:	3304      	adds	r3, #4
 8002ecc:	3204      	adds	r2, #4
 8002ece:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ed0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].total_time_working = add_clocks(tellers[i].total_time_working,tellers[i].current_time_working);
 8002ed4:	4a5b      	ldr	r2, [pc, #364]	; (8003044 <manage_tellers+0xad4>)
 8002ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed8:	21b0      	movs	r1, #176	; 0xb0
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	f103 0518 	add.w	r5, r3, #24
 8002ee4:	f107 0c08 	add.w	ip, r7, #8
 8002ee8:	4a56      	ldr	r2, [pc, #344]	; (8003044 <manage_tellers+0xad4>)
 8002eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eec:	21b0      	movs	r1, #176	; 0xb0
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f103 0618 	add.w	r6, r3, #24
 8002ef8:	4a52      	ldr	r2, [pc, #328]	; (8003044 <manage_tellers+0xad4>)
 8002efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efc:	21b0      	movs	r1, #176	; 0xb0
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	3330      	adds	r3, #48	; 0x30
 8002f06:	466c      	mov	r4, sp
 8002f08:	3304      	adds	r3, #4
 8002f0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f12:	1d33      	adds	r3, r6, #4
 8002f14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f16:	4660      	mov	r0, ip
 8002f18:	f7fd ff72 	bl	8000e00 <add_clocks>
 8002f1c:	1d2b      	adds	r3, r5, #4
 8002f1e:	f107 0208 	add.w	r2, r7, #8
 8002f22:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].current_time_working = clock_init(tellers[i].current_time_working);
 8002f28:	4a46      	ldr	r2, [pc, #280]	; (8003044 <manage_tellers+0xad4>)
 8002f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2c:	21b0      	movs	r1, #176	; 0xb0
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002f38:	f107 0008 	add.w	r0, r7, #8
 8002f3c:	4a41      	ldr	r2, [pc, #260]	; (8003044 <manage_tellers+0xad4>)
 8002f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f40:	21b0      	movs	r1, #176	; 0xb0
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	3330      	adds	r3, #48	; 0x30
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f4e:	f7fd fefb 	bl	8000d48 <clock_init>
 8002f52:	1d23      	adds	r3, r4, #4
 8002f54:	f107 0208 	add.w	r2, r7, #8
 8002f58:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].status = 0;
 8002f5e:	4a39      	ldr	r2, [pc, #228]	; (8003044 <manage_tellers+0xad4>)
 8002f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f62:	21b0      	movs	r1, #176	; 0xb0
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
				tellers[i].teller_start_wait = Clock;
 8002f70:	4a34      	ldr	r2, [pc, #208]	; (8003044 <manage_tellers+0xad4>)
 8002f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f74:	21b0      	movs	r1, #176	; 0xb0
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3360      	adds	r3, #96	; 0x60
 8002f7e:	4a32      	ldr	r2, [pc, #200]	; (8003048 <manage_tellers+0xad8>)
 8002f80:	3304      	adds	r3, #4
 8002f82:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				if(!((teller_wait[0].id == i) && (teller_wait[1].id == i) && (teller_wait[2].id == i))){
 8002f88:	4b30      	ldr	r3, [pc, #192]	; (800304c <manage_tellers+0xadc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d10b      	bne.n	8002faa <manage_tellers+0xa3a>
 8002f92:	4b2e      	ldr	r3, [pc, #184]	; (800304c <manage_tellers+0xadc>)
 8002f94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d105      	bne.n	8002faa <manage_tellers+0xa3a>
 8002f9e:	4b2b      	ldr	r3, [pc, #172]	; (800304c <manage_tellers+0xadc>)
 8002fa0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002fa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d040      	beq.n	800302c <manage_tellers+0xabc>
					if(teller_wait[0].id == 0){
 8002faa:	4b28      	ldr	r3, [pc, #160]	; (800304c <manage_tellers+0xadc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10c      	bne.n	8002fcc <manage_tellers+0xa5c>
						teller_wait[0] = tellers[i];
 8002fb2:	4826      	ldr	r0, [pc, #152]	; (800304c <manage_tellers+0xadc>)
 8002fb4:	4a23      	ldr	r2, [pc, #140]	; (8003044 <manage_tellers+0xad4>)
 8002fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb8:	21b0      	movs	r1, #176	; 0xb0
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	23b0      	movs	r3, #176	; 0xb0
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	f006 fbc9 	bl	800975c <memcpy>
					break;
 8002fca:	e031      	b.n	8003030 <manage_tellers+0xac0>
					else if(teller_wait[1].id == 0){
 8002fcc:	4b1f      	ldr	r3, [pc, #124]	; (800304c <manage_tellers+0xadc>)
 8002fce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10d      	bne.n	8002ff2 <manage_tellers+0xa82>
						teller_wait[1] = tellers[i];
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	; (800304c <manage_tellers+0xadc>)
 8002fd8:	491a      	ldr	r1, [pc, #104]	; (8003044 <manage_tellers+0xad4>)
 8002fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fdc:	20b0      	movs	r0, #176	; 0xb0
 8002fde:	fb00 f303 	mul.w	r3, r0, r3
 8002fe2:	4419      	add	r1, r3
 8002fe4:	f102 03b0 	add.w	r3, r2, #176	; 0xb0
 8002fe8:	22b0      	movs	r2, #176	; 0xb0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f006 fbb6 	bl	800975c <memcpy>
					break;
 8002ff0:	e01e      	b.n	8003030 <manage_tellers+0xac0>
					else if(teller_wait[2].id == 0){
 8002ff2:	4b16      	ldr	r3, [pc, #88]	; (800304c <manage_tellers+0xadc>)
 8002ff4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d119      	bne.n	8003030 <manage_tellers+0xac0>
						teller_wait[2] = tellers[i];
 8002ffc:	4a13      	ldr	r2, [pc, #76]	; (800304c <manage_tellers+0xadc>)
 8002ffe:	4911      	ldr	r1, [pc, #68]	; (8003044 <manage_tellers+0xad4>)
 8003000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003002:	20b0      	movs	r0, #176	; 0xb0
 8003004:	fb00 f303 	mul.w	r3, r0, r3
 8003008:	4419      	add	r1, r3
 800300a:	f502 73b0 	add.w	r3, r2, #352	; 0x160
 800300e:	22b0      	movs	r2, #176	; 0xb0
 8003010:	4618      	mov	r0, r3
 8003012:	f006 fba3 	bl	800975c <memcpy>
					break;
 8003016:	e00b      	b.n	8003030 <manage_tellers+0xac0>
				break;
 8003018:	bf00      	nop
 800301a:	e00d      	b.n	8003038 <manage_tellers+0xac8>
			break;
 800301c:	bf00      	nop
 800301e:	e00b      	b.n	8003038 <manage_tellers+0xac8>
					break;
 8003020:	bf00      	nop
 8003022:	e009      	b.n	8003038 <manage_tellers+0xac8>
				break;
 8003024:	bf00      	nop
 8003026:	e007      	b.n	8003038 <manage_tellers+0xac8>
			break;
 8003028:	bf00      	nop
 800302a:	e005      	b.n	8003038 <manage_tellers+0xac8>
				break;
 800302c:	bf00      	nop
 800302e:	e003      	b.n	8003038 <manage_tellers+0xac8>
					break;
 8003030:	bf00      	nop
			break;
 8003032:	e001      	b.n	8003038 <manage_tellers+0xac8>
	}

}
 8003034:	bf00      	nop
 8003036:	e000      	b.n	800303a <manage_tellers+0xaca>
			break;
 8003038:	bf00      	nop
}
 800303a:	bf00      	nop
 800303c:	3750      	adds	r7, #80	; 0x50
 800303e:	46bd      	mov	sp, r7
 8003040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003044:	200003f8 	.word	0x200003f8
 8003048:	20000000 	.word	0x20000000
 800304c:	20000768 	.word	0x20000768

08003050 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003088 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003054:	f7ff f8f4 	bl	8002240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003058:	480c      	ldr	r0, [pc, #48]	; (800308c <LoopForever+0x6>)
  ldr r1, =_edata
 800305a:	490d      	ldr	r1, [pc, #52]	; (8003090 <LoopForever+0xa>)
  ldr r2, =_sidata
 800305c:	4a0d      	ldr	r2, [pc, #52]	; (8003094 <LoopForever+0xe>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003060:	e002      	b.n	8003068 <LoopCopyDataInit>

08003062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003066:	3304      	adds	r3, #4

08003068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800306a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800306c:	d3f9      	bcc.n	8003062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306e:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003070:	4c0a      	ldr	r4, [pc, #40]	; (800309c <LoopForever+0x16>)
  movs r3, #0
 8003072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003074:	e001      	b.n	800307a <LoopFillZerobss>

08003076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003078:	3204      	adds	r2, #4

0800307a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800307a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800307c:	d3fb      	bcc.n	8003076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800307e:	f006 fb47 	bl	8009710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003082:	f7fe f993 	bl	80013ac <main>

08003086 <LoopForever>:

LoopForever:
    b LoopForever
 8003086:	e7fe      	b.n	8003086 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003088:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800308c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003090:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8003094:	0800a2d8 	.word	0x0800a2d8
  ldr r2, =_sbss
 8003098:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 800309c:	2000729c 	.word	0x2000729c

080030a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030a0:	e7fe      	b.n	80030a0 <ADC1_2_IRQHandler>
	...

080030a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030ae:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <HAL_Init+0x3c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a0b      	ldr	r2, [pc, #44]	; (80030e0 <HAL_Init+0x3c>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ba:	2003      	movs	r0, #3
 80030bc:	f000 f93e 	bl	800333c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030c0:	200f      	movs	r0, #15
 80030c2:	f000 f80f 	bl	80030e4 <HAL_InitTick>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	71fb      	strb	r3, [r7, #7]
 80030d0:	e001      	b.n	80030d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030d2:	f7fe ff51 	bl	8001f78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030d6:	79fb      	ldrb	r3, [r7, #7]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40022000 	.word	0x40022000

080030e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80030f0:	4b17      	ldr	r3, [pc, #92]	; (8003150 <HAL_InitTick+0x6c>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d023      	beq.n	8003140 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80030f8:	4b16      	ldr	r3, [pc, #88]	; (8003154 <HAL_InitTick+0x70>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b14      	ldr	r3, [pc, #80]	; (8003150 <HAL_InitTick+0x6c>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	4619      	mov	r1, r3
 8003102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003106:	fbb3 f3f1 	udiv	r3, r3, r1
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	4618      	mov	r0, r3
 8003110:	f000 f949 	bl	80033a6 <HAL_SYSTICK_Config>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10f      	bne.n	800313a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b0f      	cmp	r3, #15
 800311e:	d809      	bhi.n	8003134 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003120:	2200      	movs	r2, #0
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003128:	f000 f913 	bl	8003352 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800312c:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <HAL_InitTick+0x74>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e007      	b.n	8003144 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
 8003138:	e004      	b.n	8003144 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
 800313e:	e001      	b.n	8003144 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000058 	.word	0x20000058
 8003154:	20000050 	.word	0x20000050
 8003158:	20000054 	.word	0x20000054

0800315c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_IncTick+0x20>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_IncTick+0x24>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4413      	add	r3, r2
 800316c:	4a04      	ldr	r2, [pc, #16]	; (8003180 <HAL_IncTick+0x24>)
 800316e:	6013      	str	r3, [r2, #0]
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000058 	.word	0x20000058
 8003180:	20000a28 	.word	0x20000a28

08003184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return uwTick;
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <HAL_GetTick+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000a28 	.word	0x20000a28

0800319c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ce:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	60d3      	str	r3, [r2, #12]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <__NVIC_GetPriorityGrouping+0x18>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	f003 0307 	and.w	r3, r3, #7
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320e:	2b00      	cmp	r3, #0
 8003210:	db0b      	blt.n	800322a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	f003 021f 	and.w	r2, r3, #31
 8003218:	4907      	ldr	r1, [pc, #28]	; (8003238 <__NVIC_EnableIRQ+0x38>)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	2001      	movs	r0, #1
 8003222:	fa00 f202 	lsl.w	r2, r0, r2
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	e000e100 	.word	0xe000e100

0800323c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	6039      	str	r1, [r7, #0]
 8003246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324c:	2b00      	cmp	r3, #0
 800324e:	db0a      	blt.n	8003266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	b2da      	uxtb	r2, r3
 8003254:	490c      	ldr	r1, [pc, #48]	; (8003288 <__NVIC_SetPriority+0x4c>)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	0112      	lsls	r2, r2, #4
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	440b      	add	r3, r1
 8003260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003264:	e00a      	b.n	800327c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	4908      	ldr	r1, [pc, #32]	; (800328c <__NVIC_SetPriority+0x50>)
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	3b04      	subs	r3, #4
 8003274:	0112      	lsls	r2, r2, #4
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	440b      	add	r3, r1
 800327a:	761a      	strb	r2, [r3, #24]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000e100 	.word	0xe000e100
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003290:	b480      	push	{r7}
 8003292:	b089      	sub	sp, #36	; 0x24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f1c3 0307 	rsb	r3, r3, #7
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	bf28      	it	cs
 80032ae:	2304      	movcs	r3, #4
 80032b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3304      	adds	r3, #4
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d902      	bls.n	80032c0 <NVIC_EncodePriority+0x30>
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3b03      	subs	r3, #3
 80032be:	e000      	b.n	80032c2 <NVIC_EncodePriority+0x32>
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43da      	mvns	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	401a      	ands	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	fa01 f303 	lsl.w	r3, r1, r3
 80032e2:	43d9      	mvns	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e8:	4313      	orrs	r3, r2
         );
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3724      	adds	r7, #36	; 0x24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003308:	d301      	bcc.n	800330e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800330a:	2301      	movs	r3, #1
 800330c:	e00f      	b.n	800332e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <SysTick_Config+0x40>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003316:	210f      	movs	r1, #15
 8003318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800331c:	f7ff ff8e 	bl	800323c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <SysTick_Config+0x40>)
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003326:	4b04      	ldr	r3, [pc, #16]	; (8003338 <SysTick_Config+0x40>)
 8003328:	2207      	movs	r2, #7
 800332a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	e000e010 	.word	0xe000e010

0800333c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff ff29 	bl	800319c <__NVIC_SetPriorityGrouping>
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003364:	f7ff ff3e 	bl	80031e4 <__NVIC_GetPriorityGrouping>
 8003368:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	6978      	ldr	r0, [r7, #20]
 8003370:	f7ff ff8e 	bl	8003290 <NVIC_EncodePriority>
 8003374:	4602      	mov	r2, r0
 8003376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff5d 	bl	800323c <__NVIC_SetPriority>
}
 8003382:	bf00      	nop
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	4603      	mov	r3, r0
 8003392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff31 	bl	8003200 <__NVIC_EnableIRQ>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff ffa2 	bl	80032f8 <SysTick_Config>
 80033b4:	4603      	mov	r3, r0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ce:	e17f      	b.n	80036d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2101      	movs	r1, #1
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	4013      	ands	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8171 	beq.w	80036ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d005      	beq.n	8003400 <HAL_GPIO_Init+0x40>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d130      	bne.n	8003462 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	2203      	movs	r2, #3
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003436:	2201      	movs	r2, #1
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 0201 	and.w	r2, r3, #1
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b03      	cmp	r3, #3
 800346c:	d118      	bne.n	80034a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003474:	2201      	movs	r2, #1
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4013      	ands	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	08db      	lsrs	r3, r3, #3
 800348a:	f003 0201 	and.w	r2, r3, #1
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d017      	beq.n	80034dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	2203      	movs	r2, #3
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d123      	bne.n	8003530 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	08da      	lsrs	r2, r3, #3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3208      	adds	r2, #8
 80034f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	220f      	movs	r2, #15
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	08da      	lsrs	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3208      	adds	r2, #8
 800352a:	6939      	ldr	r1, [r7, #16]
 800352c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	2203      	movs	r2, #3
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 0203 	and.w	r2, r3, #3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80ac 	beq.w	80036ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003572:	4b5f      	ldr	r3, [pc, #380]	; (80036f0 <HAL_GPIO_Init+0x330>)
 8003574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003576:	4a5e      	ldr	r2, [pc, #376]	; (80036f0 <HAL_GPIO_Init+0x330>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6613      	str	r3, [r2, #96]	; 0x60
 800357e:	4b5c      	ldr	r3, [pc, #368]	; (80036f0 <HAL_GPIO_Init+0x330>)
 8003580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800358a:	4a5a      	ldr	r2, [pc, #360]	; (80036f4 <HAL_GPIO_Init+0x334>)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	3302      	adds	r3, #2
 8003592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003596:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	220f      	movs	r2, #15
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4013      	ands	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035b4:	d025      	beq.n	8003602 <HAL_GPIO_Init+0x242>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4f      	ldr	r2, [pc, #316]	; (80036f8 <HAL_GPIO_Init+0x338>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d01f      	beq.n	80035fe <HAL_GPIO_Init+0x23e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4e      	ldr	r2, [pc, #312]	; (80036fc <HAL_GPIO_Init+0x33c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d019      	beq.n	80035fa <HAL_GPIO_Init+0x23a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a4d      	ldr	r2, [pc, #308]	; (8003700 <HAL_GPIO_Init+0x340>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <HAL_GPIO_Init+0x236>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4c      	ldr	r2, [pc, #304]	; (8003704 <HAL_GPIO_Init+0x344>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00d      	beq.n	80035f2 <HAL_GPIO_Init+0x232>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a4b      	ldr	r2, [pc, #300]	; (8003708 <HAL_GPIO_Init+0x348>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d007      	beq.n	80035ee <HAL_GPIO_Init+0x22e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a4a      	ldr	r2, [pc, #296]	; (800370c <HAL_GPIO_Init+0x34c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d101      	bne.n	80035ea <HAL_GPIO_Init+0x22a>
 80035e6:	2306      	movs	r3, #6
 80035e8:	e00c      	b.n	8003604 <HAL_GPIO_Init+0x244>
 80035ea:	2307      	movs	r3, #7
 80035ec:	e00a      	b.n	8003604 <HAL_GPIO_Init+0x244>
 80035ee:	2305      	movs	r3, #5
 80035f0:	e008      	b.n	8003604 <HAL_GPIO_Init+0x244>
 80035f2:	2304      	movs	r3, #4
 80035f4:	e006      	b.n	8003604 <HAL_GPIO_Init+0x244>
 80035f6:	2303      	movs	r3, #3
 80035f8:	e004      	b.n	8003604 <HAL_GPIO_Init+0x244>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e002      	b.n	8003604 <HAL_GPIO_Init+0x244>
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <HAL_GPIO_Init+0x244>
 8003602:	2300      	movs	r3, #0
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	f002 0203 	and.w	r2, r2, #3
 800360a:	0092      	lsls	r2, r2, #2
 800360c:	4093      	lsls	r3, r2
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003614:	4937      	ldr	r1, [pc, #220]	; (80036f4 <HAL_GPIO_Init+0x334>)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	089b      	lsrs	r3, r3, #2
 800361a:	3302      	adds	r3, #2
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003622:	4b3b      	ldr	r3, [pc, #236]	; (8003710 <HAL_GPIO_Init+0x350>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	43db      	mvns	r3, r3
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4013      	ands	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003646:	4a32      	ldr	r2, [pc, #200]	; (8003710 <HAL_GPIO_Init+0x350>)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800364c:	4b30      	ldr	r3, [pc, #192]	; (8003710 <HAL_GPIO_Init+0x350>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	43db      	mvns	r3, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003670:	4a27      	ldr	r2, [pc, #156]	; (8003710 <HAL_GPIO_Init+0x350>)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003676:	4b26      	ldr	r3, [pc, #152]	; (8003710 <HAL_GPIO_Init+0x350>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	43db      	mvns	r3, r3
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4013      	ands	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800369a:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <HAL_GPIO_Init+0x350>)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036a0:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_GPIO_Init+0x350>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4013      	ands	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036c4:	4a12      	ldr	r2, [pc, #72]	; (8003710 <HAL_GPIO_Init+0x350>)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	3301      	adds	r3, #1
 80036ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	fa22 f303 	lsr.w	r3, r2, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f47f ae78 	bne.w	80033d0 <HAL_GPIO_Init+0x10>
  }
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40010000 	.word	0x40010000
 80036f8:	48000400 	.word	0x48000400
 80036fc:	48000800 	.word	0x48000800
 8003700:	48000c00 	.word	0x48000c00
 8003704:	48001000 	.word	0x48001000
 8003708:	48001400 	.word	0x48001400
 800370c:	48001800 	.word	0x48001800
 8003710:	40010400 	.word	0x40010400

08003714 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	887b      	ldrh	r3, [r7, #2]
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
 8003730:	e001      	b.n	8003736 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003736:	7bfb      	ldrb	r3, [r7, #15]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
 8003750:	4613      	mov	r3, r2
 8003752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003754:	787b      	ldrb	r3, [r7, #1]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003760:	e002      	b.n	8003768 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <HAL_PWREx_GetVoltageRange+0x18>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40007000 	.word	0x40007000

08003790 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800379e:	d130      	bne.n	8003802 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037a0:	4b23      	ldr	r3, [pc, #140]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ac:	d038      	beq.n	8003820 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037b6:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037be:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2232      	movs	r2, #50	; 0x32
 80037c4:	fb02 f303 	mul.w	r3, r2, r3
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0c9b      	lsrs	r3, r3, #18
 80037d0:	3301      	adds	r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037d4:	e002      	b.n	80037dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3b01      	subs	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037dc:	4b14      	ldr	r3, [pc, #80]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e8:	d102      	bne.n	80037f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f2      	bne.n	80037d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fc:	d110      	bne.n	8003820 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e00f      	b.n	8003822 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380e:	d007      	beq.n	8003820 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003818:	4a05      	ldr	r2, [pc, #20]	; (8003830 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800381e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40007000 	.word	0x40007000
 8003834:	20000050 	.word	0x20000050
 8003838:	431bde83 	.word	0x431bde83

0800383c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e3ca      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800384e:	4b97      	ldr	r3, [pc, #604]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003858:	4b94      	ldr	r3, [pc, #592]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80e4 	beq.w	8003a38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <HAL_RCC_OscConfig+0x4a>
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b0c      	cmp	r3, #12
 800387a:	f040 808b 	bne.w	8003994 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b01      	cmp	r3, #1
 8003882:	f040 8087 	bne.w	8003994 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003886:	4b89      	ldr	r3, [pc, #548]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_RCC_OscConfig+0x62>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e3a2      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1a      	ldr	r2, [r3, #32]
 80038a2:	4b82      	ldr	r3, [pc, #520]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <HAL_RCC_OscConfig+0x7c>
 80038ae:	4b7f      	ldr	r3, [pc, #508]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b6:	e005      	b.n	80038c4 <HAL_RCC_OscConfig+0x88>
 80038b8:	4b7c      	ldr	r3, [pc, #496]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d223      	bcs.n	8003910 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fd55 	bl	800437c <RCC_SetFlashLatencyFromMSIRange>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e383      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038dc:	4b73      	ldr	r3, [pc, #460]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a72      	ldr	r2, [pc, #456]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038e2:	f043 0308 	orr.w	r3, r3, #8
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b70      	ldr	r3, [pc, #448]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	496d      	ldr	r1, [pc, #436]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038fa:	4b6c      	ldr	r3, [pc, #432]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	4968      	ldr	r1, [pc, #416]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800390a:	4313      	orrs	r3, r2
 800390c:	604b      	str	r3, [r1, #4]
 800390e:	e025      	b.n	800395c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003910:	4b66      	ldr	r3, [pc, #408]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a65      	ldr	r2, [pc, #404]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003916:	f043 0308 	orr.w	r3, r3, #8
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	4b63      	ldr	r3, [pc, #396]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	4960      	ldr	r1, [pc, #384]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800392e:	4b5f      	ldr	r3, [pc, #380]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	495b      	ldr	r1, [pc, #364]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fd15 	bl	800437c <RCC_SetFlashLatencyFromMSIRange>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e343      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800395c:	f000 fc4a 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b52      	ldr	r3, [pc, #328]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	4950      	ldr	r1, [pc, #320]	; (8003ab0 <HAL_RCC_OscConfig+0x274>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
 8003978:	4a4e      	ldr	r2, [pc, #312]	; (8003ab4 <HAL_RCC_OscConfig+0x278>)
 800397a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800397c:	4b4e      	ldr	r3, [pc, #312]	; (8003ab8 <HAL_RCC_OscConfig+0x27c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fbaf 	bl	80030e4 <HAL_InitTick>
 8003986:	4603      	mov	r3, r0
 8003988:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d052      	beq.n	8003a36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	e327      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d032      	beq.n	8003a02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800399c:	4b43      	ldr	r3, [pc, #268]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a42      	ldr	r2, [pc, #264]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039a8:	f7ff fbec 	bl	8003184 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039b0:	f7ff fbe8 	bl	8003184 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e310      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039c2:	4b3a      	ldr	r3, [pc, #232]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ce:	4b37      	ldr	r3, [pc, #220]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a36      	ldr	r2, [pc, #216]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039d4:	f043 0308 	orr.w	r3, r3, #8
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b34      	ldr	r3, [pc, #208]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	4931      	ldr	r1, [pc, #196]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039ec:	4b2f      	ldr	r3, [pc, #188]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	492c      	ldr	r1, [pc, #176]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
 8003a00:	e01a      	b.n	8003a38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a02:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a29      	ldr	r2, [pc, #164]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a0e:	f7ff fbb9 	bl	8003184 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a16:	f7ff fbb5 	bl	8003184 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e2dd      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a28:	4b20      	ldr	r3, [pc, #128]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f0      	bne.n	8003a16 <HAL_RCC_OscConfig+0x1da>
 8003a34:	e000      	b.n	8003a38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d074      	beq.n	8003b2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d005      	beq.n	8003a56 <HAL_RCC_OscConfig+0x21a>
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b0c      	cmp	r3, #12
 8003a4e:	d10e      	bne.n	8003a6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d10b      	bne.n	8003a6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a56:	4b15      	ldr	r3, [pc, #84]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d064      	beq.n	8003b2c <HAL_RCC_OscConfig+0x2f0>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d160      	bne.n	8003b2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e2ba      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a76:	d106      	bne.n	8003a86 <HAL_RCC_OscConfig+0x24a>
 8003a78:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0b      	ldr	r2, [pc, #44]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	e026      	b.n	8003ad4 <HAL_RCC_OscConfig+0x298>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a8e:	d115      	bne.n	8003abc <HAL_RCC_OscConfig+0x280>
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a05      	ldr	r2, [pc, #20]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a02      	ldr	r2, [pc, #8]	; (8003aac <HAL_RCC_OscConfig+0x270>)
 8003aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	e014      	b.n	8003ad4 <HAL_RCC_OscConfig+0x298>
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	0800a24c 	.word	0x0800a24c
 8003ab4:	20000050 	.word	0x20000050
 8003ab8:	20000054 	.word	0x20000054
 8003abc:	4ba0      	ldr	r3, [pc, #640]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a9f      	ldr	r2, [pc, #636]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b9d      	ldr	r3, [pc, #628]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a9c      	ldr	r2, [pc, #624]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d013      	beq.n	8003b04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7ff fb52 	bl	8003184 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7ff fb4e 	bl	8003184 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e276      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003af6:	4b92      	ldr	r3, [pc, #584]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x2a8>
 8003b02:	e014      	b.n	8003b2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7ff fb3e 	bl	8003184 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7ff fb3a 	bl	8003184 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e262      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b1e:	4b88      	ldr	r3, [pc, #544]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x2d0>
 8003b2a:	e000      	b.n	8003b2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d060      	beq.n	8003bfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_OscConfig+0x310>
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b0c      	cmp	r3, #12
 8003b44:	d119      	bne.n	8003b7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d116      	bne.n	8003b7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b4c:	4b7c      	ldr	r3, [pc, #496]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_RCC_OscConfig+0x328>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e23f      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b64:	4b76      	ldr	r3, [pc, #472]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	061b      	lsls	r3, r3, #24
 8003b72:	4973      	ldr	r1, [pc, #460]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b78:	e040      	b.n	8003bfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d023      	beq.n	8003bca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b82:	4b6f      	ldr	r3, [pc, #444]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a6e      	ldr	r2, [pc, #440]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8e:	f7ff faf9 	bl	8003184 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b96:	f7ff faf5 	bl	8003184 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e21d      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ba8:	4b65      	ldr	r3, [pc, #404]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb4:	4b62      	ldr	r3, [pc, #392]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	061b      	lsls	r3, r3, #24
 8003bc2:	495f      	ldr	r1, [pc, #380]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
 8003bc8:	e018      	b.n	8003bfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bca:	4b5d      	ldr	r3, [pc, #372]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a5c      	ldr	r2, [pc, #368]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd6:	f7ff fad5 	bl	8003184 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bde:	f7ff fad1 	bl	8003184 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e1f9      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bf0:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f0      	bne.n	8003bde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d03c      	beq.n	8003c82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01c      	beq.n	8003c4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c10:	4b4b      	ldr	r3, [pc, #300]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c16:	4a4a      	ldr	r2, [pc, #296]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7ff fab0 	bl	8003184 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c28:	f7ff faac 	bl	8003184 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e1d4      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c3a:	4b41      	ldr	r3, [pc, #260]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0ef      	beq.n	8003c28 <HAL_RCC_OscConfig+0x3ec>
 8003c48:	e01b      	b.n	8003c82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4a:	4b3d      	ldr	r3, [pc, #244]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c50:	4a3b      	ldr	r2, [pc, #236]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5a:	f7ff fa93 	bl	8003184 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c62:	f7ff fa8f 	bl	8003184 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e1b7      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c74:	4b32      	ldr	r3, [pc, #200]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1ef      	bne.n	8003c62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80a6 	beq.w	8003ddc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c90:	2300      	movs	r3, #0
 8003c92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c94:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10d      	bne.n	8003cbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	4a26      	ldr	r2, [pc, #152]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003caa:	6593      	str	r3, [r2, #88]	; 0x58
 8003cac:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cbc:	4b21      	ldr	r3, [pc, #132]	; (8003d44 <HAL_RCC_OscConfig+0x508>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d118      	bne.n	8003cfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc8:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <HAL_RCC_OscConfig+0x508>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <HAL_RCC_OscConfig+0x508>)
 8003cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd4:	f7ff fa56 	bl	8003184 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cdc:	f7ff fa52 	bl	8003184 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e17a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_RCC_OscConfig+0x508>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d108      	bne.n	8003d14 <HAL_RCC_OscConfig+0x4d8>
 8003d02:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d08:	4a0d      	ldr	r2, [pc, #52]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d12:	e029      	b.n	8003d68 <HAL_RCC_OscConfig+0x52c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b05      	cmp	r3, #5
 8003d1a:	d115      	bne.n	8003d48 <HAL_RCC_OscConfig+0x50c>
 8003d1c:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d24:	f043 0304 	orr.w	r3, r3, #4
 8003d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	4a03      	ldr	r2, [pc, #12]	; (8003d40 <HAL_RCC_OscConfig+0x504>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d3c:	e014      	b.n	8003d68 <HAL_RCC_OscConfig+0x52c>
 8003d3e:	bf00      	nop
 8003d40:	40021000 	.word	0x40021000
 8003d44:	40007000 	.word	0x40007000
 8003d48:	4b9c      	ldr	r3, [pc, #624]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	4a9b      	ldr	r2, [pc, #620]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d58:	4b98      	ldr	r3, [pc, #608]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5e:	4a97      	ldr	r2, [pc, #604]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003d60:	f023 0304 	bic.w	r3, r3, #4
 8003d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d016      	beq.n	8003d9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7ff fa08 	bl	8003184 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7ff fa04 	bl	8003184 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e12a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d8e:	4b8b      	ldr	r3, [pc, #556]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0ed      	beq.n	8003d78 <HAL_RCC_OscConfig+0x53c>
 8003d9c:	e015      	b.n	8003dca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9e:	f7ff f9f1 	bl	8003184 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da4:	e00a      	b.n	8003dbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f7ff f9ed 	bl	8003184 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e113      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dbc:	4b7f      	ldr	r3, [pc, #508]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1ed      	bne.n	8003da6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dca:	7ffb      	ldrb	r3, [r7, #31]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d105      	bne.n	8003ddc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd0:	4b7a      	ldr	r3, [pc, #488]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	4a79      	ldr	r2, [pc, #484]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80fe 	beq.w	8003fe2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	f040 80d0 	bne.w	8003f90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003df0:	4b72      	ldr	r3, [pc, #456]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f003 0203 	and.w	r2, r3, #3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d130      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d127      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d11f      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e30:	2a07      	cmp	r2, #7
 8003e32:	bf14      	ite	ne
 8003e34:	2201      	movne	r2, #1
 8003e36:	2200      	moveq	r2, #0
 8003e38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d113      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d109      	bne.n	8003e66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	085b      	lsrs	r3, r3, #1
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d06e      	beq.n	8003f44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b0c      	cmp	r3, #12
 8003e6a:	d069      	beq.n	8003f40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e6c:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d105      	bne.n	8003e84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e78:	4b50      	ldr	r3, [pc, #320]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0ad      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e88:	4b4c      	ldr	r3, [pc, #304]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a4b      	ldr	r2, [pc, #300]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e94:	f7ff f976 	bl	8003184 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7ff f972 	bl	8003184 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e09a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eae:	4b43      	ldr	r3, [pc, #268]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eba:	4b40      	ldr	r3, [pc, #256]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	4b40      	ldr	r3, [pc, #256]	; (8003fc0 <HAL_RCC_OscConfig+0x784>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003eca:	3a01      	subs	r2, #1
 8003ecc:	0112      	lsls	r2, r2, #4
 8003ece:	4311      	orrs	r1, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ed4:	0212      	lsls	r2, r2, #8
 8003ed6:	4311      	orrs	r1, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003edc:	0852      	lsrs	r2, r2, #1
 8003ede:	3a01      	subs	r2, #1
 8003ee0:	0552      	lsls	r2, r2, #21
 8003ee2:	4311      	orrs	r1, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ee8:	0852      	lsrs	r2, r2, #1
 8003eea:	3a01      	subs	r2, #1
 8003eec:	0652      	lsls	r2, r2, #25
 8003eee:	4311      	orrs	r1, r2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ef4:	0912      	lsrs	r2, r2, #4
 8003ef6:	0452      	lsls	r2, r2, #17
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	4930      	ldr	r1, [pc, #192]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f00:	4b2e      	ldr	r3, [pc, #184]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a2d      	ldr	r2, [pc, #180]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a2a      	ldr	r2, [pc, #168]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f18:	f7ff f934 	bl	8003184 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f20:	f7ff f930 	bl	8003184 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e058      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f32:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f3e:	e050      	b.n	8003fe2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e04f      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d148      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f50:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4a16      	ldr	r2, [pc, #88]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f68:	f7ff f90c 	bl	8003184 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f70:	f7ff f908 	bl	8003184 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e030      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f82:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x734>
 8003f8e:	e028      	b.n	8003fe2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	2b0c      	cmp	r3, #12
 8003f94:	d023      	beq.n	8003fde <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <HAL_RCC_OscConfig+0x780>)
 8003f9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa2:	f7ff f8ef 	bl	8003184 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa8:	e00c      	b.n	8003fc4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003faa:	f7ff f8eb 	bl	8003184 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d905      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e013      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc4:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_RCC_OscConfig+0x7b0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1ec      	bne.n	8003faa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_RCC_OscConfig+0x7b0>)
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	4905      	ldr	r1, [pc, #20]	; (8003fec <HAL_RCC_OscConfig+0x7b0>)
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_RCC_OscConfig+0x7b4>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60cb      	str	r3, [r1, #12]
 8003fdc:	e001      	b.n	8003fe2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3720      	adds	r7, #32
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	feeefffc 	.word	0xfeeefffc

08003ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0e7      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004008:	4b75      	ldr	r3, [pc, #468]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d910      	bls.n	8004038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004016:	4b72      	ldr	r3, [pc, #456]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 0207 	bic.w	r2, r3, #7
 800401e:	4970      	ldr	r1, [pc, #448]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004026:	4b6e      	ldr	r3, [pc, #440]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0cf      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d010      	beq.n	8004066 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	4b66      	ldr	r3, [pc, #408]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004050:	429a      	cmp	r2, r3
 8004052:	d908      	bls.n	8004066 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004054:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4960      	ldr	r1, [pc, #384]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004062:	4313      	orrs	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d04c      	beq.n	800410c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b03      	cmp	r3, #3
 8004078:	d107      	bne.n	800408a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800407a:	4b5a      	ldr	r3, [pc, #360]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d121      	bne.n	80040ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e0a6      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004092:	4b54      	ldr	r3, [pc, #336]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d115      	bne.n	80040ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e09a      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040aa:	4b4e      	ldr	r3, [pc, #312]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e08e      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ba:	4b4a      	ldr	r3, [pc, #296]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e086      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040ca:	4b46      	ldr	r3, [pc, #280]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 0203 	bic.w	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4943      	ldr	r1, [pc, #268]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040dc:	f7ff f852 	bl	8003184 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e4:	f7ff f84e 	bl	8003184 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e06e      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	4b3a      	ldr	r3, [pc, #232]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 020c 	and.w	r2, r3, #12
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	429a      	cmp	r2, r3
 800410a:	d1eb      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d010      	beq.n	800413a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004124:	429a      	cmp	r2, r3
 8004126:	d208      	bcs.n	800413a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004128:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	492b      	ldr	r1, [pc, #172]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800413a:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d210      	bcs.n	800416a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004148:	4b25      	ldr	r3, [pc, #148]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f023 0207 	bic.w	r2, r3, #7
 8004150:	4923      	ldr	r1, [pc, #140]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	4313      	orrs	r3, r2
 8004156:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004158:	4b21      	ldr	r3, [pc, #132]	; (80041e0 <HAL_RCC_ClockConfig+0x1ec>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d001      	beq.n	800416a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e036      	b.n	80041d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004176:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	4918      	ldr	r1, [pc, #96]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004184:	4313      	orrs	r3, r2
 8004186:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d009      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004194:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4910      	ldr	r1, [pc, #64]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041a8:	f000 f824 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <HAL_RCC_ClockConfig+0x1f0>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	490b      	ldr	r1, [pc, #44]	; (80041e8 <HAL_RCC_ClockConfig+0x1f4>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	4a09      	ldr	r2, [pc, #36]	; (80041ec <HAL_RCC_ClockConfig+0x1f8>)
 80041c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041c8:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <HAL_RCC_ClockConfig+0x1fc>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fe ff89 	bl	80030e4 <HAL_InitTick>
 80041d2:	4603      	mov	r3, r0
 80041d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80041d6:	7afb      	ldrb	r3, [r7, #11]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40022000 	.word	0x40022000
 80041e4:	40021000 	.word	0x40021000
 80041e8:	0800a24c 	.word	0x0800a24c
 80041ec:	20000050 	.word	0x20000050
 80041f0:	20000054 	.word	0x20000054

080041f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b089      	sub	sp, #36	; 0x24
 80041f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61fb      	str	r3, [r7, #28]
 80041fe:	2300      	movs	r3, #0
 8004200:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004202:	4b3e      	ldr	r3, [pc, #248]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800420c:	4b3b      	ldr	r3, [pc, #236]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0x34>
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d121      	bne.n	8004266 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d11e      	bne.n	8004266 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004228:	4b34      	ldr	r3, [pc, #208]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d107      	bne.n	8004244 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004234:	4b31      	ldr	r3, [pc, #196]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	e005      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004244:	4b2d      	ldr	r3, [pc, #180]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004250:	4a2b      	ldr	r2, [pc, #172]	; (8004300 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004258:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10d      	bne.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004264:	e00a      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b04      	cmp	r3, #4
 800426a:	d102      	bne.n	8004272 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800426c:	4b25      	ldr	r3, [pc, #148]	; (8004304 <HAL_RCC_GetSysClockFreq+0x110>)
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	e004      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d101      	bne.n	800427c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004278:	4b23      	ldr	r3, [pc, #140]	; (8004308 <HAL_RCC_GetSysClockFreq+0x114>)
 800427a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d134      	bne.n	80042ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004282:	4b1e      	ldr	r3, [pc, #120]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d003      	beq.n	800429a <HAL_RCC_GetSysClockFreq+0xa6>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d003      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0xac>
 8004298:	e005      	b.n	80042a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800429a:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <HAL_RCC_GetSysClockFreq+0x110>)
 800429c:	617b      	str	r3, [r7, #20]
      break;
 800429e:	e005      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042a0:	4b19      	ldr	r3, [pc, #100]	; (8004308 <HAL_RCC_GetSysClockFreq+0x114>)
 80042a2:	617b      	str	r3, [r7, #20]
      break;
 80042a4:	e002      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	617b      	str	r3, [r7, #20]
      break;
 80042aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042ac:	4b13      	ldr	r3, [pc, #76]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	3301      	adds	r3, #1
 80042b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042ba:	4b10      	ldr	r3, [pc, #64]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	fb03 f202 	mul.w	r2, r3, r2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <HAL_RCC_GetSysClockFreq+0x108>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	0e5b      	lsrs	r3, r3, #25
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	3301      	adds	r3, #1
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042ec:	69bb      	ldr	r3, [r7, #24]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3724      	adds	r7, #36	; 0x24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000
 8004300:	0800a264 	.word	0x0800a264
 8004304:	00f42400 	.word	0x00f42400
 8004308:	007a1200 	.word	0x007a1200

0800430c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <HAL_RCC_GetHCLKFreq+0x14>)
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000050 	.word	0x20000050

08004324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004328:	f7ff fff0 	bl	800430c <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4904      	ldr	r1, [pc, #16]	; (800434c <HAL_RCC_GetPCLK1Freq+0x28>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	0800a25c 	.word	0x0800a25c

08004350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004354:	f7ff ffda 	bl	800430c <HAL_RCC_GetHCLKFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	0adb      	lsrs	r3, r3, #11
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	4904      	ldr	r1, [pc, #16]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004370:	4618      	mov	r0, r3
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40021000 	.word	0x40021000
 8004378:	0800a25c 	.word	0x0800a25c

0800437c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004388:	4b2a      	ldr	r3, [pc, #168]	; (8004434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004394:	f7ff f9ee 	bl	8003774 <HAL_PWREx_GetVoltageRange>
 8004398:	6178      	str	r0, [r7, #20]
 800439a:	e014      	b.n	80043c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800439c:	4b25      	ldr	r3, [pc, #148]	; (8004434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	4a24      	ldr	r2, [pc, #144]	; (8004434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a6:	6593      	str	r3, [r2, #88]	; 0x58
 80043a8:	4b22      	ldr	r3, [pc, #136]	; (8004434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043b4:	f7ff f9de 	bl	8003774 <HAL_PWREx_GetVoltageRange>
 80043b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043ba:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043cc:	d10b      	bne.n	80043e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b80      	cmp	r3, #128	; 0x80
 80043d2:	d919      	bls.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2ba0      	cmp	r3, #160	; 0xa0
 80043d8:	d902      	bls.n	80043e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043da:	2302      	movs	r3, #2
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	e013      	b.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043e0:	2301      	movs	r3, #1
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	e010      	b.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b80      	cmp	r3, #128	; 0x80
 80043ea:	d902      	bls.n	80043f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043ec:	2303      	movs	r3, #3
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	e00a      	b.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b80      	cmp	r3, #128	; 0x80
 80043f6:	d102      	bne.n	80043fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043f8:	2302      	movs	r3, #2
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	e004      	b.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b70      	cmp	r3, #112	; 0x70
 8004402:	d101      	bne.n	8004408 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004404:	2301      	movs	r3, #1
 8004406:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f023 0207 	bic.w	r2, r3, #7
 8004410:	4909      	ldr	r1, [pc, #36]	; (8004438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004418:	4b07      	ldr	r3, [pc, #28]	; (8004438 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	429a      	cmp	r2, r3
 8004424:	d001      	beq.n	800442a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	40022000 	.word	0x40022000

0800443c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004444:	2300      	movs	r3, #0
 8004446:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004448:	2300      	movs	r3, #0
 800444a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004454:	2b00      	cmp	r3, #0
 8004456:	d041      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800445c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004460:	d02a      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004462:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004466:	d824      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004468:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800446c:	d008      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800446e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004472:	d81e      	bhi.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800447c:	d010      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800447e:	e018      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004480:	4b86      	ldr	r3, [pc, #536]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4a85      	ldr	r2, [pc, #532]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800448c:	e015      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3304      	adds	r3, #4
 8004492:	2100      	movs	r1, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fabb 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800449e:	e00c      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3320      	adds	r3, #32
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fba6 	bl	8004bf8 <RCCEx_PLLSAI2_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044b0:	e003      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	74fb      	strb	r3, [r7, #19]
      break;
 80044b6:	e000      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ba:	7cfb      	ldrb	r3, [r7, #19]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044c0:	4b76      	ldr	r3, [pc, #472]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ce:	4973      	ldr	r1, [pc, #460]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044d6:	e001      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d8:	7cfb      	ldrb	r3, [r7, #19]
 80044da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d041      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044f0:	d02a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80044f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044f6:	d824      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044fc:	d008      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004502:	d81e      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800450c:	d010      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800450e:	e018      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004510:	4b62      	ldr	r3, [pc, #392]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4a61      	ldr	r2, [pc, #388]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800451c:	e015      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3304      	adds	r3, #4
 8004522:	2100      	movs	r1, #0
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fa73 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800452e:	e00c      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3320      	adds	r3, #32
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fb5e 	bl	8004bf8 <RCCEx_PLLSAI2_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004540:	e003      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	74fb      	strb	r3, [r7, #19]
      break;
 8004546:	e000      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004550:	4b52      	ldr	r3, [pc, #328]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800455e:	494f      	ldr	r1, [pc, #316]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004566:	e001      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004568:	7cfb      	ldrb	r3, [r7, #19]
 800456a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80a0 	beq.w	80046ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457a:	2300      	movs	r3, #0
 800457c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800457e:	4b47      	ldr	r3, [pc, #284]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00d      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004594:	4b41      	ldr	r3, [pc, #260]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	4a40      	ldr	r2, [pc, #256]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459e:	6593      	str	r3, [r2, #88]	; 0x58
 80045a0:	4b3e      	ldr	r3, [pc, #248]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ac:	2301      	movs	r3, #1
 80045ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b0:	4b3b      	ldr	r3, [pc, #236]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a3a      	ldr	r2, [pc, #232]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045bc:	f7fe fde2 	bl	8003184 <HAL_GetTick>
 80045c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045c2:	e009      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c4:	f7fe fdde 	bl	8003184 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d902      	bls.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	74fb      	strb	r3, [r7, #19]
        break;
 80045d6:	e005      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045d8:	4b31      	ldr	r3, [pc, #196]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ef      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80045e4:	7cfb      	ldrb	r3, [r7, #19]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d15c      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045ea:	4b2c      	ldr	r3, [pc, #176]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01f      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	429a      	cmp	r2, r3
 8004606:	d019      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004608:	4b24      	ldr	r3, [pc, #144]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004612:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004614:	4b21      	ldr	r3, [pc, #132]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	4a20      	ldr	r2, [pc, #128]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004624:	4b1d      	ldr	r3, [pc, #116]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462a:	4a1c      	ldr	r2, [pc, #112]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004634:	4a19      	ldr	r2, [pc, #100]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d016      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fe fd9d 	bl	8003184 <HAL_GetTick>
 800464a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464c:	e00b      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464e:	f7fe fd99 	bl	8003184 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d902      	bls.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	74fb      	strb	r3, [r7, #19]
            break;
 8004664:	e006      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0ec      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10c      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800467a:	4b08      	ldr	r3, [pc, #32]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800468a:	4904      	ldr	r1, [pc, #16]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004692:	e009      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004694:	7cfb      	ldrb	r3, [r7, #19]
 8004696:	74bb      	strb	r3, [r7, #18]
 8004698:	e006      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046a8:	7c7b      	ldrb	r3, [r7, #17]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d105      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ae:	4b9e      	ldr	r3, [pc, #632]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b2:	4a9d      	ldr	r2, [pc, #628]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046c6:	4b98      	ldr	r3, [pc, #608]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	f023 0203 	bic.w	r2, r3, #3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	4994      	ldr	r1, [pc, #592]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046e8:	4b8f      	ldr	r3, [pc, #572]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	f023 020c 	bic.w	r2, r3, #12
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	498c      	ldr	r1, [pc, #560]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800470a:	4b87      	ldr	r3, [pc, #540]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004710:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	4983      	ldr	r1, [pc, #524]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800472c:	4b7e      	ldr	r3, [pc, #504]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004732:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	497b      	ldr	r1, [pc, #492]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800474e:	4b76      	ldr	r3, [pc, #472]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800475c:	4972      	ldr	r1, [pc, #456]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004770:	4b6d      	ldr	r3, [pc, #436]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477e:	496a      	ldr	r1, [pc, #424]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004792:	4b65      	ldr	r3, [pc, #404]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004798:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a0:	4961      	ldr	r1, [pc, #388]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047b4:	4b5c      	ldr	r3, [pc, #368]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c2:	4959      	ldr	r1, [pc, #356]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047d6:	4b54      	ldr	r3, [pc, #336]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e4:	4950      	ldr	r1, [pc, #320]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047f8:	4b4b      	ldr	r3, [pc, #300]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004806:	4948      	ldr	r1, [pc, #288]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800481a:	4b43      	ldr	r3, [pc, #268]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004828:	493f      	ldr	r1, [pc, #252]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d028      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800483c:	4b3a      	ldr	r3, [pc, #232]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004842:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800484a:	4937      	ldr	r1, [pc, #220]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004856:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800485a:	d106      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800485c:	4b32      	ldr	r3, [pc, #200]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4a31      	ldr	r2, [pc, #196]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004866:	60d3      	str	r3, [r2, #12]
 8004868:	e011      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800486e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004872:	d10c      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	2101      	movs	r1, #1
 800487a:	4618      	mov	r0, r3
 800487c:	f000 f8c8 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004884:	7cfb      	ldrb	r3, [r7, #19]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800488a:	7cfb      	ldrb	r3, [r7, #19]
 800488c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d028      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800489a:	4b23      	ldr	r3, [pc, #140]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a8:	491f      	ldr	r1, [pc, #124]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048b8:	d106      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ba:	4b1b      	ldr	r3, [pc, #108]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	4a1a      	ldr	r2, [pc, #104]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048c4:	60d3      	str	r3, [r2, #12]
 80048c6:	e011      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048d0:	d10c      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	2101      	movs	r1, #1
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 f899 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048e2:	7cfb      	ldrb	r3, [r7, #19]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80048e8:	7cfb      	ldrb	r3, [r7, #19]
 80048ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d02b      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048f8:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004906:	4908      	ldr	r1, [pc, #32]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004916:	d109      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4a02      	ldr	r2, [pc, #8]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004922:	60d3      	str	r3, [r2, #12]
 8004924:	e014      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004934:	d10c      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3304      	adds	r3, #4
 800493a:	2101      	movs	r1, #1
 800493c:	4618      	mov	r0, r3
 800493e:	f000 f867 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 8004942:	4603      	mov	r3, r0
 8004944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004946:	7cfb      	ldrb	r3, [r7, #19]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800494c:	7cfb      	ldrb	r3, [r7, #19]
 800494e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d02f      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800495c:	4b2b      	ldr	r3, [pc, #172]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800496a:	4928      	ldr	r1, [pc, #160]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800497a:	d10d      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3304      	adds	r3, #4
 8004980:	2102      	movs	r1, #2
 8004982:	4618      	mov	r0, r3
 8004984:	f000 f844 	bl	8004a10 <RCCEx_PLLSAI1_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800498c:	7cfb      	ldrb	r3, [r7, #19]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d014      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004992:	7cfb      	ldrb	r3, [r7, #19]
 8004994:	74bb      	strb	r3, [r7, #18]
 8004996:	e011      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800499c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a0:	d10c      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3320      	adds	r3, #32
 80049a6:	2102      	movs	r1, #2
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 f925 	bl	8004bf8 <RCCEx_PLLSAI2_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049b2:	7cfb      	ldrb	r3, [r7, #19]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049c8:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049d6:	490d      	ldr	r1, [pc, #52]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00b      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049ea:	4b08      	ldr	r3, [pc, #32]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049fa:	4904      	ldr	r1, [pc, #16]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a02:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000

08004a10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a1e:	4b75      	ldr	r3, [pc, #468]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d018      	beq.n	8004a5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a2a:	4b72      	ldr	r3, [pc, #456]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0203 	and.w	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d10d      	bne.n	8004a56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a42:	4b6c      	ldr	r3, [pc, #432]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
       ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d047      	beq.n	8004ae6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
 8004a5a:	e044      	b.n	8004ae6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d018      	beq.n	8004a96 <RCCEx_PLLSAI1_Config+0x86>
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d825      	bhi.n	8004ab4 <RCCEx_PLLSAI1_Config+0xa4>
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d002      	beq.n	8004a72 <RCCEx_PLLSAI1_Config+0x62>
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d009      	beq.n	8004a84 <RCCEx_PLLSAI1_Config+0x74>
 8004a70:	e020      	b.n	8004ab4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a72:	4b60      	ldr	r3, [pc, #384]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d11d      	bne.n	8004aba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a82:	e01a      	b.n	8004aba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a84:	4b5b      	ldr	r3, [pc, #364]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d116      	bne.n	8004abe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a94:	e013      	b.n	8004abe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a96:	4b57      	ldr	r3, [pc, #348]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10f      	bne.n	8004ac2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aa2:	4b54      	ldr	r3, [pc, #336]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d109      	bne.n	8004ac2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ab2:	e006      	b.n	8004ac2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ab8:	e004      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aba:	bf00      	nop
 8004abc:	e002      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004abe:	bf00      	nop
 8004ac0:	e000      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ac2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10d      	bne.n	8004ae6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004aca:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6819      	ldr	r1, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	4944      	ldr	r1, [pc, #272]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d17d      	bne.n	8004be8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004aec:	4b41      	ldr	r3, [pc, #260]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a40      	ldr	r2, [pc, #256]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af8:	f7fe fb44 	bl	8003184 <HAL_GetTick>
 8004afc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004afe:	e009      	b.n	8004b14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b00:	f7fe fb40 	bl	8003184 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d902      	bls.n	8004b14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	73fb      	strb	r3, [r7, #15]
        break;
 8004b12:	e005      	b.n	8004b20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b14:	4b37      	ldr	r3, [pc, #220]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1ef      	bne.n	8004b00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d160      	bne.n	8004be8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d111      	bne.n	8004b50 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b2c:	4b31      	ldr	r3, [pc, #196]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6892      	ldr	r2, [r2, #8]
 8004b3c:	0211      	lsls	r1, r2, #8
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68d2      	ldr	r2, [r2, #12]
 8004b42:	0912      	lsrs	r2, r2, #4
 8004b44:	0452      	lsls	r2, r2, #17
 8004b46:	430a      	orrs	r2, r1
 8004b48:	492a      	ldr	r1, [pc, #168]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	610b      	str	r3, [r1, #16]
 8004b4e:	e027      	b.n	8004ba0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d112      	bne.n	8004b7c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b56:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6892      	ldr	r2, [r2, #8]
 8004b66:	0211      	lsls	r1, r2, #8
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6912      	ldr	r2, [r2, #16]
 8004b6c:	0852      	lsrs	r2, r2, #1
 8004b6e:	3a01      	subs	r2, #1
 8004b70:	0552      	lsls	r2, r2, #21
 8004b72:	430a      	orrs	r2, r1
 8004b74:	491f      	ldr	r1, [pc, #124]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	610b      	str	r3, [r1, #16]
 8004b7a:	e011      	b.n	8004ba0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b7c:	4b1d      	ldr	r3, [pc, #116]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6892      	ldr	r2, [r2, #8]
 8004b8c:	0211      	lsls	r1, r2, #8
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	6952      	ldr	r2, [r2, #20]
 8004b92:	0852      	lsrs	r2, r2, #1
 8004b94:	3a01      	subs	r2, #1
 8004b96:	0652      	lsls	r2, r2, #25
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	4916      	ldr	r1, [pc, #88]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ba0:	4b14      	ldr	r3, [pc, #80]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004baa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fe faea 	bl	8003184 <HAL_GetTick>
 8004bb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bb2:	e009      	b.n	8004bc8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bb4:	f7fe fae6 	bl	8003184 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d902      	bls.n	8004bc8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	73fb      	strb	r3, [r7, #15]
          break;
 8004bc6:	e005      	b.n	8004bd4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ef      	beq.n	8004bb4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bdc:	691a      	ldr	r2, [r3, #16]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	4904      	ldr	r1, [pc, #16]	; (8004bf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40021000 	.word	0x40021000

08004bf8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c06:	4b6a      	ldr	r3, [pc, #424]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d018      	beq.n	8004c44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c12:	4b67      	ldr	r3, [pc, #412]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0203 	and.w	r2, r3, #3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d10d      	bne.n	8004c3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
       ||
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c2a:	4b61      	ldr	r3, [pc, #388]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	091b      	lsrs	r3, r3, #4
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
       ||
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d047      	beq.n	8004cce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	73fb      	strb	r3, [r7, #15]
 8004c42:	e044      	b.n	8004cce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d018      	beq.n	8004c7e <RCCEx_PLLSAI2_Config+0x86>
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d825      	bhi.n	8004c9c <RCCEx_PLLSAI2_Config+0xa4>
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d002      	beq.n	8004c5a <RCCEx_PLLSAI2_Config+0x62>
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d009      	beq.n	8004c6c <RCCEx_PLLSAI2_Config+0x74>
 8004c58:	e020      	b.n	8004c9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c5a:	4b55      	ldr	r3, [pc, #340]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d11d      	bne.n	8004ca2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c6a:	e01a      	b.n	8004ca2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c6c:	4b50      	ldr	r3, [pc, #320]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d116      	bne.n	8004ca6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c7c:	e013      	b.n	8004ca6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c7e:	4b4c      	ldr	r3, [pc, #304]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10f      	bne.n	8004caa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c8a:	4b49      	ldr	r3, [pc, #292]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c9a:	e006      	b.n	8004caa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca0:	e004      	b.n	8004cac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ca2:	bf00      	nop
 8004ca4:	e002      	b.n	8004cac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ca6:	bf00      	nop
 8004ca8:	e000      	b.n	8004cac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004caa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10d      	bne.n	8004cce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cb2:	4b3f      	ldr	r3, [pc, #252]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6819      	ldr	r1, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	430b      	orrs	r3, r1
 8004cc8:	4939      	ldr	r1, [pc, #228]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d167      	bne.n	8004da4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004cd4:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a35      	ldr	r2, [pc, #212]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce0:	f7fe fa50 	bl	8003184 <HAL_GetTick>
 8004ce4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ce6:	e009      	b.n	8004cfc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ce8:	f7fe fa4c 	bl	8003184 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d902      	bls.n	8004cfc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	73fb      	strb	r3, [r7, #15]
        break;
 8004cfa:	e005      	b.n	8004d08 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cfc:	4b2c      	ldr	r3, [pc, #176]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1ef      	bne.n	8004ce8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d14a      	bne.n	8004da4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d111      	bne.n	8004d38 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d14:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6892      	ldr	r2, [r2, #8]
 8004d24:	0211      	lsls	r1, r2, #8
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68d2      	ldr	r2, [r2, #12]
 8004d2a:	0912      	lsrs	r2, r2, #4
 8004d2c:	0452      	lsls	r2, r2, #17
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	491f      	ldr	r1, [pc, #124]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	614b      	str	r3, [r1, #20]
 8004d36:	e011      	b.n	8004d5c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d38:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6892      	ldr	r2, [r2, #8]
 8004d48:	0211      	lsls	r1, r2, #8
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6912      	ldr	r2, [r2, #16]
 8004d4e:	0852      	lsrs	r2, r2, #1
 8004d50:	3a01      	subs	r2, #1
 8004d52:	0652      	lsls	r2, r2, #25
 8004d54:	430a      	orrs	r2, r1
 8004d56:	4916      	ldr	r1, [pc, #88]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d5c:	4b14      	ldr	r3, [pc, #80]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d68:	f7fe fa0c 	bl	8003184 <HAL_GetTick>
 8004d6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d6e:	e009      	b.n	8004d84 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d70:	f7fe fa08 	bl	8003184 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d902      	bls.n	8004d84 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	73fb      	strb	r3, [r7, #15]
          break;
 8004d82:	e005      	b.n	8004d90 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0ef      	beq.n	8004d70 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	4904      	ldr	r1, [pc, #16]	; (8004db0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40021000 	.word	0x40021000

08004db4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e049      	b.n	8004e5a <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	795b      	ldrb	r3, [r3, #5]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d105      	bne.n	8004ddc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fd f8f6 	bl	8001fc8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0204 	orr.w	r2, r2, #4
 8004df0:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d104      	bne.n	8004e0a <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2204      	movs	r2, #4
 8004e04:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e027      	b.n	8004e5a <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004e0a:	f7fe f9bb 	bl	8003184 <HAL_GetTick>
 8004e0e:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004e10:	e015      	b.n	8004e3e <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004e12:	f7fe f9b7 	bl	8003184 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d90e      	bls.n	8004e3e <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d107      	bne.n	8004e3e <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2204      	movs	r2, #4
 8004e32:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e00d      	b.n	8004e5a <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d0e2      	beq.n	8004e12 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	791b      	ldrb	r3, [r3, #4]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <HAL_RNG_GenerateRandomNumber+0x1a>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e044      	b.n	8004f06 <HAL_RNG_GenerateRandomNumber+0xa4>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	795b      	ldrb	r3, [r3, #5]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d133      	bne.n	8004ef4 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e92:	f7fe f977 	bl	8003184 <HAL_GetTick>
 8004e96:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004e98:	e018      	b.n	8004ecc <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004e9a:	f7fe f973 	bl	8003184 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d911      	bls.n	8004ecc <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e01c      	b.n	8004f06 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d1df      	bne.n	8004e9a <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	715a      	strb	r2, [r3, #5]
 8004ef2:	e004      	b.n	8004efe <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	711a      	strb	r2, [r3, #4]

  return status;
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2210      	movs	r2, #16
 8004f30:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004f32:	2301      	movs	r3, #1
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	e01f      	b.n	8004f78 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01a      	beq.n	8004f78 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d108      	bne.n	8004f5e <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f5a:	605a      	str	r2, [r3, #4]
 8004f5c:	e00c      	b.n	8004f78 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2208      	movs	r2, #8
 8004f62:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 8004f64:	2301      	movs	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0208 	bic.w	r2, r2, #8
 8004f76:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d10b      	bne.n	8004f96 <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2204      	movs	r2, #4
 8004f82:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f837 	bl	8004ff8 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8004f92:	605a      	str	r2, [r3, #4]

    return;
 8004f94:	e022      	b.n	8004fdc <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01d      	beq.n	8004fdc <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0208 	bic.w	r2, r2, #8
 8004fae:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	795b      	ldrb	r3, [r3, #5]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d00b      	beq.n	8004fdc <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f803 	bl	8004fe2 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e049      	b.n	80050b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fd f814 	bl	8002060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3304      	adds	r3, #4
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f000 f9d0 	bl	80053f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d001      	beq.n	80050d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e04f      	b.n	8005174 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a23      	ldr	r2, [pc, #140]	; (8005180 <HAL_TIM_Base_Start_IT+0xc4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d01d      	beq.n	8005132 <HAL_TIM_Base_Start_IT+0x76>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fe:	d018      	beq.n	8005132 <HAL_TIM_Base_Start_IT+0x76>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1f      	ldr	r2, [pc, #124]	; (8005184 <HAL_TIM_Base_Start_IT+0xc8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d013      	beq.n	8005132 <HAL_TIM_Base_Start_IT+0x76>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1e      	ldr	r2, [pc, #120]	; (8005188 <HAL_TIM_Base_Start_IT+0xcc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00e      	beq.n	8005132 <HAL_TIM_Base_Start_IT+0x76>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1c      	ldr	r2, [pc, #112]	; (800518c <HAL_TIM_Base_Start_IT+0xd0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d009      	beq.n	8005132 <HAL_TIM_Base_Start_IT+0x76>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1b      	ldr	r2, [pc, #108]	; (8005190 <HAL_TIM_Base_Start_IT+0xd4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d004      	beq.n	8005132 <HAL_TIM_Base_Start_IT+0x76>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a19      	ldr	r2, [pc, #100]	; (8005194 <HAL_TIM_Base_Start_IT+0xd8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d115      	bne.n	800515e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	4b17      	ldr	r3, [pc, #92]	; (8005198 <HAL_TIM_Base_Start_IT+0xdc>)
 800513a:	4013      	ands	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b06      	cmp	r3, #6
 8005142:	d015      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0xb4>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514a:	d011      	beq.n	8005170 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515c:	e008      	b.n	8005170 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e000      	b.n	8005172 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005170:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	40012c00 	.word	0x40012c00
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800
 800518c:	40000c00 	.word	0x40000c00
 8005190:	40013400 	.word	0x40013400
 8005194:	40014000 	.word	0x40014000
 8005198:	00010007 	.word	0x00010007

0800519c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d020      	beq.n	8005200 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01b      	beq.n	8005200 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0202 	mvn.w	r2, #2
 80051d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f8e4 	bl	80053b4 <HAL_TIM_IC_CaptureCallback>
 80051ec:	e005      	b.n	80051fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f8d6 	bl	80053a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f8e7 	bl	80053c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d020      	beq.n	800524c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01b      	beq.n	800524c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0204 	mvn.w	r2, #4
 800521c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2202      	movs	r2, #2
 8005222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f8be 	bl	80053b4 <HAL_TIM_IC_CaptureCallback>
 8005238:	e005      	b.n	8005246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f8b0 	bl	80053a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f8c1 	bl	80053c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d020      	beq.n	8005298 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01b      	beq.n	8005298 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0208 	mvn.w	r2, #8
 8005268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2204      	movs	r2, #4
 800526e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f898 	bl	80053b4 <HAL_TIM_IC_CaptureCallback>
 8005284:	e005      	b.n	8005292 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f88a 	bl	80053a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f89b 	bl	80053c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d020      	beq.n	80052e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01b      	beq.n	80052e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0210 	mvn.w	r2, #16
 80052b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2208      	movs	r2, #8
 80052ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f872 	bl	80053b4 <HAL_TIM_IC_CaptureCallback>
 80052d0:	e005      	b.n	80052de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f864 	bl	80053a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f875 	bl	80053c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00c      	beq.n	8005308 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d007      	beq.n	8005308 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0201 	mvn.w	r2, #1
 8005300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fc fa22 	bl	800174c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00c      	beq.n	800532c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f98e 	bl	8005648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00c      	beq.n	8005350 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533c:	2b00      	cmp	r3, #0
 800533e:	d007      	beq.n	8005350 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f986 	bl	800565c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00c      	beq.n	8005374 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d007      	beq.n	8005374 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800536c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f834 	bl	80053dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00c      	beq.n	8005398 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d007      	beq.n	8005398 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0220 	mvn.w	r2, #32
 8005390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f94e 	bl	8005634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005398:	bf00      	nop
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a40      	ldr	r2, [pc, #256]	; (8005504 <TIM_Base_SetConfig+0x114>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d013      	beq.n	8005430 <TIM_Base_SetConfig+0x40>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800540e:	d00f      	beq.n	8005430 <TIM_Base_SetConfig+0x40>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a3d      	ldr	r2, [pc, #244]	; (8005508 <TIM_Base_SetConfig+0x118>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00b      	beq.n	8005430 <TIM_Base_SetConfig+0x40>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a3c      	ldr	r2, [pc, #240]	; (800550c <TIM_Base_SetConfig+0x11c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d007      	beq.n	8005430 <TIM_Base_SetConfig+0x40>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a3b      	ldr	r2, [pc, #236]	; (8005510 <TIM_Base_SetConfig+0x120>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d003      	beq.n	8005430 <TIM_Base_SetConfig+0x40>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a3a      	ldr	r2, [pc, #232]	; (8005514 <TIM_Base_SetConfig+0x124>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d108      	bne.n	8005442 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a2f      	ldr	r2, [pc, #188]	; (8005504 <TIM_Base_SetConfig+0x114>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d01f      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005450:	d01b      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a2c      	ldr	r2, [pc, #176]	; (8005508 <TIM_Base_SetConfig+0x118>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d017      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a2b      	ldr	r2, [pc, #172]	; (800550c <TIM_Base_SetConfig+0x11c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a2a      	ldr	r2, [pc, #168]	; (8005510 <TIM_Base_SetConfig+0x120>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00f      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a29      	ldr	r2, [pc, #164]	; (8005514 <TIM_Base_SetConfig+0x124>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00b      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a28      	ldr	r2, [pc, #160]	; (8005518 <TIM_Base_SetConfig+0x128>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d007      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a27      	ldr	r2, [pc, #156]	; (800551c <TIM_Base_SetConfig+0x12c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d003      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a26      	ldr	r2, [pc, #152]	; (8005520 <TIM_Base_SetConfig+0x130>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d108      	bne.n	800549c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a10      	ldr	r2, [pc, #64]	; (8005504 <TIM_Base_SetConfig+0x114>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00f      	beq.n	80054e8 <TIM_Base_SetConfig+0xf8>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a12      	ldr	r2, [pc, #72]	; (8005514 <TIM_Base_SetConfig+0x124>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00b      	beq.n	80054e8 <TIM_Base_SetConfig+0xf8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a11      	ldr	r2, [pc, #68]	; (8005518 <TIM_Base_SetConfig+0x128>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d007      	beq.n	80054e8 <TIM_Base_SetConfig+0xf8>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a10      	ldr	r2, [pc, #64]	; (800551c <TIM_Base_SetConfig+0x12c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d003      	beq.n	80054e8 <TIM_Base_SetConfig+0xf8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a0f      	ldr	r2, [pc, #60]	; (8005520 <TIM_Base_SetConfig+0x130>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d103      	bne.n	80054f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	615a      	str	r2, [r3, #20]
}
 80054f6:	bf00      	nop
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800
 8005510:	40000c00 	.word	0x40000c00
 8005514:	40013400 	.word	0x40013400
 8005518:	40014000 	.word	0x40014000
 800551c:	40014400 	.word	0x40014400
 8005520:	40014800 	.word	0x40014800

08005524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005538:	2302      	movs	r3, #2
 800553a:	e068      	b.n	800560e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a2e      	ldr	r2, [pc, #184]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2d      	ldr	r2, [pc, #180]	; (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d108      	bne.n	8005582 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005576:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005588:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1e      	ldr	r2, [pc, #120]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01d      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ae:	d018      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1b      	ldr	r2, [pc, #108]	; (8005624 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1a      	ldr	r2, [pc, #104]	; (8005628 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00e      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a18      	ldr	r2, [pc, #96]	; (800562c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d009      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a13      	ldr	r2, [pc, #76]	; (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a14      	ldr	r2, [pc, #80]	; (8005630 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d10c      	bne.n	80055fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40013400 	.word	0x40013400
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800
 800562c:	40000c00 	.word	0x40000c00
 8005630:	40014000 	.word	0x40014000

08005634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e040      	b.n	8005704 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fc fd0a 	bl	80020ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2224      	movs	r2, #36	; 0x24
 800569c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0201 	bic.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fb6a 	bl	8005d90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f8af 	bl	8005820 <UART_SetConfig>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e01b      	b.n	8005704 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fbe9 	bl	8005ed4 <UART_CheckIdleState>
 8005702:	4603      	mov	r3, r0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b08a      	sub	sp, #40	; 0x28
 8005710:	af02      	add	r7, sp, #8
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	4613      	mov	r3, r2
 800571a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005720:	2b20      	cmp	r3, #32
 8005722:	d178      	bne.n	8005816 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <HAL_UART_Transmit+0x24>
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e071      	b.n	8005818 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2221      	movs	r2, #33	; 0x21
 8005740:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005742:	f7fd fd1f 	bl	8003184 <HAL_GetTick>
 8005746:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	88fa      	ldrh	r2, [r7, #6]
 800574c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	88fa      	ldrh	r2, [r7, #6]
 8005754:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005760:	d108      	bne.n	8005774 <HAL_UART_Transmit+0x68>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d104      	bne.n	8005774 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	e003      	b.n	800577c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005778:	2300      	movs	r3, #0
 800577a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800577c:	e030      	b.n	80057e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2200      	movs	r2, #0
 8005786:	2180      	movs	r1, #128	; 0x80
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 fc4b 	bl	8006024 <UART_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d004      	beq.n	800579e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2220      	movs	r2, #32
 8005798:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e03c      	b.n	8005818 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10b      	bne.n	80057bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	881a      	ldrh	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057b0:	b292      	uxth	r2, r2
 80057b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	3302      	adds	r3, #2
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	e008      	b.n	80057ce <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	781a      	ldrb	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	b292      	uxth	r2, r2
 80057c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	3301      	adds	r3, #1
 80057cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1c8      	bne.n	800577e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	2200      	movs	r2, #0
 80057f4:	2140      	movs	r1, #64	; 0x40
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 fc14 	bl	8006024 <UART_WaitOnFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2220      	movs	r2, #32
 8005806:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e005      	b.n	8005818 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	e000      	b.n	8005818 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005816:	2302      	movs	r3, #2
  }
}
 8005818:	4618      	mov	r0, r3
 800581a:	3720      	adds	r7, #32
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005824:	b08a      	sub	sp, #40	; 0x28
 8005826:	af00      	add	r7, sp, #0
 8005828:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	431a      	orrs	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	431a      	orrs	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	4313      	orrs	r3, r2
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4ba4      	ldr	r3, [pc, #656]	; (8005ae0 <UART_SetConfig+0x2c0>)
 8005850:	4013      	ands	r3, r2
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005858:	430b      	orrs	r3, r1
 800585a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a99      	ldr	r2, [pc, #612]	; (8005ae4 <UART_SetConfig+0x2c4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d004      	beq.n	800588c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005888:	4313      	orrs	r3, r2
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589c:	430a      	orrs	r2, r1
 800589e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a90      	ldr	r2, [pc, #576]	; (8005ae8 <UART_SetConfig+0x2c8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d126      	bne.n	80058f8 <UART_SetConfig+0xd8>
 80058aa:	4b90      	ldr	r3, [pc, #576]	; (8005aec <UART_SetConfig+0x2cc>)
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b0:	f003 0303 	and.w	r3, r3, #3
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d81b      	bhi.n	80058f0 <UART_SetConfig+0xd0>
 80058b8:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <UART_SetConfig+0xa0>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	080058d1 	.word	0x080058d1
 80058c4:	080058e1 	.word	0x080058e1
 80058c8:	080058d9 	.word	0x080058d9
 80058cc:	080058e9 	.word	0x080058e9
 80058d0:	2301      	movs	r3, #1
 80058d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058d6:	e116      	b.n	8005b06 <UART_SetConfig+0x2e6>
 80058d8:	2302      	movs	r3, #2
 80058da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058de:	e112      	b.n	8005b06 <UART_SetConfig+0x2e6>
 80058e0:	2304      	movs	r3, #4
 80058e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e6:	e10e      	b.n	8005b06 <UART_SetConfig+0x2e6>
 80058e8:	2308      	movs	r3, #8
 80058ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ee:	e10a      	b.n	8005b06 <UART_SetConfig+0x2e6>
 80058f0:	2310      	movs	r3, #16
 80058f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058f6:	e106      	b.n	8005b06 <UART_SetConfig+0x2e6>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a7c      	ldr	r2, [pc, #496]	; (8005af0 <UART_SetConfig+0x2d0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d138      	bne.n	8005974 <UART_SetConfig+0x154>
 8005902:	4b7a      	ldr	r3, [pc, #488]	; (8005aec <UART_SetConfig+0x2cc>)
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005908:	f003 030c 	and.w	r3, r3, #12
 800590c:	2b0c      	cmp	r3, #12
 800590e:	d82d      	bhi.n	800596c <UART_SetConfig+0x14c>
 8005910:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <UART_SetConfig+0xf8>)
 8005912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005916:	bf00      	nop
 8005918:	0800594d 	.word	0x0800594d
 800591c:	0800596d 	.word	0x0800596d
 8005920:	0800596d 	.word	0x0800596d
 8005924:	0800596d 	.word	0x0800596d
 8005928:	0800595d 	.word	0x0800595d
 800592c:	0800596d 	.word	0x0800596d
 8005930:	0800596d 	.word	0x0800596d
 8005934:	0800596d 	.word	0x0800596d
 8005938:	08005955 	.word	0x08005955
 800593c:	0800596d 	.word	0x0800596d
 8005940:	0800596d 	.word	0x0800596d
 8005944:	0800596d 	.word	0x0800596d
 8005948:	08005965 	.word	0x08005965
 800594c:	2300      	movs	r3, #0
 800594e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005952:	e0d8      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005954:	2302      	movs	r3, #2
 8005956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595a:	e0d4      	b.n	8005b06 <UART_SetConfig+0x2e6>
 800595c:	2304      	movs	r3, #4
 800595e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005962:	e0d0      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005964:	2308      	movs	r3, #8
 8005966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596a:	e0cc      	b.n	8005b06 <UART_SetConfig+0x2e6>
 800596c:	2310      	movs	r3, #16
 800596e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005972:	e0c8      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a5e      	ldr	r2, [pc, #376]	; (8005af4 <UART_SetConfig+0x2d4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d125      	bne.n	80059ca <UART_SetConfig+0x1aa>
 800597e:	4b5b      	ldr	r3, [pc, #364]	; (8005aec <UART_SetConfig+0x2cc>)
 8005980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005984:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005988:	2b30      	cmp	r3, #48	; 0x30
 800598a:	d016      	beq.n	80059ba <UART_SetConfig+0x19a>
 800598c:	2b30      	cmp	r3, #48	; 0x30
 800598e:	d818      	bhi.n	80059c2 <UART_SetConfig+0x1a2>
 8005990:	2b20      	cmp	r3, #32
 8005992:	d00a      	beq.n	80059aa <UART_SetConfig+0x18a>
 8005994:	2b20      	cmp	r3, #32
 8005996:	d814      	bhi.n	80059c2 <UART_SetConfig+0x1a2>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <UART_SetConfig+0x182>
 800599c:	2b10      	cmp	r3, #16
 800599e:	d008      	beq.n	80059b2 <UART_SetConfig+0x192>
 80059a0:	e00f      	b.n	80059c2 <UART_SetConfig+0x1a2>
 80059a2:	2300      	movs	r3, #0
 80059a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059a8:	e0ad      	b.n	8005b06 <UART_SetConfig+0x2e6>
 80059aa:	2302      	movs	r3, #2
 80059ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b0:	e0a9      	b.n	8005b06 <UART_SetConfig+0x2e6>
 80059b2:	2304      	movs	r3, #4
 80059b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b8:	e0a5      	b.n	8005b06 <UART_SetConfig+0x2e6>
 80059ba:	2308      	movs	r3, #8
 80059bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c0:	e0a1      	b.n	8005b06 <UART_SetConfig+0x2e6>
 80059c2:	2310      	movs	r3, #16
 80059c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c8:	e09d      	b.n	8005b06 <UART_SetConfig+0x2e6>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a4a      	ldr	r2, [pc, #296]	; (8005af8 <UART_SetConfig+0x2d8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d125      	bne.n	8005a20 <UART_SetConfig+0x200>
 80059d4:	4b45      	ldr	r3, [pc, #276]	; (8005aec <UART_SetConfig+0x2cc>)
 80059d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059de:	2bc0      	cmp	r3, #192	; 0xc0
 80059e0:	d016      	beq.n	8005a10 <UART_SetConfig+0x1f0>
 80059e2:	2bc0      	cmp	r3, #192	; 0xc0
 80059e4:	d818      	bhi.n	8005a18 <UART_SetConfig+0x1f8>
 80059e6:	2b80      	cmp	r3, #128	; 0x80
 80059e8:	d00a      	beq.n	8005a00 <UART_SetConfig+0x1e0>
 80059ea:	2b80      	cmp	r3, #128	; 0x80
 80059ec:	d814      	bhi.n	8005a18 <UART_SetConfig+0x1f8>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <UART_SetConfig+0x1d8>
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d008      	beq.n	8005a08 <UART_SetConfig+0x1e8>
 80059f6:	e00f      	b.n	8005a18 <UART_SetConfig+0x1f8>
 80059f8:	2300      	movs	r3, #0
 80059fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059fe:	e082      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005a00:	2302      	movs	r3, #2
 8005a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a06:	e07e      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005a08:	2304      	movs	r3, #4
 8005a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0e:	e07a      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005a10:	2308      	movs	r3, #8
 8005a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a16:	e076      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005a18:	2310      	movs	r3, #16
 8005a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1e:	e072      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a35      	ldr	r2, [pc, #212]	; (8005afc <UART_SetConfig+0x2dc>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d12a      	bne.n	8005a80 <UART_SetConfig+0x260>
 8005a2a:	4b30      	ldr	r3, [pc, #192]	; (8005aec <UART_SetConfig+0x2cc>)
 8005a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a38:	d01a      	beq.n	8005a70 <UART_SetConfig+0x250>
 8005a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a3e:	d81b      	bhi.n	8005a78 <UART_SetConfig+0x258>
 8005a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a44:	d00c      	beq.n	8005a60 <UART_SetConfig+0x240>
 8005a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a4a:	d815      	bhi.n	8005a78 <UART_SetConfig+0x258>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <UART_SetConfig+0x238>
 8005a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a54:	d008      	beq.n	8005a68 <UART_SetConfig+0x248>
 8005a56:	e00f      	b.n	8005a78 <UART_SetConfig+0x258>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a5e:	e052      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005a60:	2302      	movs	r3, #2
 8005a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a66:	e04e      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005a68:	2304      	movs	r3, #4
 8005a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a6e:	e04a      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005a70:	2308      	movs	r3, #8
 8005a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a76:	e046      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005a78:	2310      	movs	r3, #16
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7e:	e042      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a17      	ldr	r2, [pc, #92]	; (8005ae4 <UART_SetConfig+0x2c4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d13a      	bne.n	8005b00 <UART_SetConfig+0x2e0>
 8005a8a:	4b18      	ldr	r3, [pc, #96]	; (8005aec <UART_SetConfig+0x2cc>)
 8005a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a98:	d01a      	beq.n	8005ad0 <UART_SetConfig+0x2b0>
 8005a9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a9e:	d81b      	bhi.n	8005ad8 <UART_SetConfig+0x2b8>
 8005aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa4:	d00c      	beq.n	8005ac0 <UART_SetConfig+0x2a0>
 8005aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aaa:	d815      	bhi.n	8005ad8 <UART_SetConfig+0x2b8>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <UART_SetConfig+0x298>
 8005ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab4:	d008      	beq.n	8005ac8 <UART_SetConfig+0x2a8>
 8005ab6:	e00f      	b.n	8005ad8 <UART_SetConfig+0x2b8>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005abe:	e022      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac6:	e01e      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ace:	e01a      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad6:	e016      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005ad8:	2310      	movs	r3, #16
 8005ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ade:	e012      	b.n	8005b06 <UART_SetConfig+0x2e6>
 8005ae0:	efff69f3 	.word	0xefff69f3
 8005ae4:	40008000 	.word	0x40008000
 8005ae8:	40013800 	.word	0x40013800
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40004400 	.word	0x40004400
 8005af4:	40004800 	.word	0x40004800
 8005af8:	40004c00 	.word	0x40004c00
 8005afc:	40005000 	.word	0x40005000
 8005b00:	2310      	movs	r3, #16
 8005b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a9f      	ldr	r2, [pc, #636]	; (8005d88 <UART_SetConfig+0x568>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d17a      	bne.n	8005c06 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d824      	bhi.n	8005b62 <UART_SetConfig+0x342>
 8005b18:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <UART_SetConfig+0x300>)
 8005b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005b45 	.word	0x08005b45
 8005b24:	08005b63 	.word	0x08005b63
 8005b28:	08005b4d 	.word	0x08005b4d
 8005b2c:	08005b63 	.word	0x08005b63
 8005b30:	08005b53 	.word	0x08005b53
 8005b34:	08005b63 	.word	0x08005b63
 8005b38:	08005b63 	.word	0x08005b63
 8005b3c:	08005b63 	.word	0x08005b63
 8005b40:	08005b5b 	.word	0x08005b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b44:	f7fe fbee 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005b48:	61f8      	str	r0, [r7, #28]
        break;
 8005b4a:	e010      	b.n	8005b6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b4c:	4b8f      	ldr	r3, [pc, #572]	; (8005d8c <UART_SetConfig+0x56c>)
 8005b4e:	61fb      	str	r3, [r7, #28]
        break;
 8005b50:	e00d      	b.n	8005b6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b52:	f7fe fb4f 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8005b56:	61f8      	str	r0, [r7, #28]
        break;
 8005b58:	e009      	b.n	8005b6e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b5e:	61fb      	str	r3, [r7, #28]
        break;
 8005b60:	e005      	b.n	8005b6e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 80fb 	beq.w	8005d6c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	4413      	add	r3, r2
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d305      	bcc.n	8005b92 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d903      	bls.n	8005b9a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b98:	e0e8      	b.n	8005d6c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	461c      	mov	r4, r3
 8005ba0:	4615      	mov	r5, r2
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	f04f 0300 	mov.w	r3, #0
 8005baa:	022b      	lsls	r3, r5, #8
 8005bac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005bb0:	0222      	lsls	r2, r4, #8
 8005bb2:	68f9      	ldr	r1, [r7, #12]
 8005bb4:	6849      	ldr	r1, [r1, #4]
 8005bb6:	0849      	lsrs	r1, r1, #1
 8005bb8:	2000      	movs	r0, #0
 8005bba:	4688      	mov	r8, r1
 8005bbc:	4681      	mov	r9, r0
 8005bbe:	eb12 0a08 	adds.w	sl, r2, r8
 8005bc2:	eb43 0b09 	adc.w	fp, r3, r9
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd4:	4650      	mov	r0, sl
 8005bd6:	4659      	mov	r1, fp
 8005bd8:	f7fa fb52 	bl	8000280 <__aeabi_uldivmod>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	4613      	mov	r3, r2
 8005be2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bea:	d308      	bcc.n	8005bfe <UART_SetConfig+0x3de>
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf2:	d204      	bcs.n	8005bfe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	60da      	str	r2, [r3, #12]
 8005bfc:	e0b6      	b.n	8005d6c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c04:	e0b2      	b.n	8005d6c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c0e:	d15e      	bne.n	8005cce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005c10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d828      	bhi.n	8005c6a <UART_SetConfig+0x44a>
 8005c18:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <UART_SetConfig+0x400>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c45 	.word	0x08005c45
 8005c24:	08005c4d 	.word	0x08005c4d
 8005c28:	08005c55 	.word	0x08005c55
 8005c2c:	08005c6b 	.word	0x08005c6b
 8005c30:	08005c5b 	.word	0x08005c5b
 8005c34:	08005c6b 	.word	0x08005c6b
 8005c38:	08005c6b 	.word	0x08005c6b
 8005c3c:	08005c6b 	.word	0x08005c6b
 8005c40:	08005c63 	.word	0x08005c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c44:	f7fe fb6e 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005c48:	61f8      	str	r0, [r7, #28]
        break;
 8005c4a:	e014      	b.n	8005c76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c4c:	f7fe fb80 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 8005c50:	61f8      	str	r0, [r7, #28]
        break;
 8005c52:	e010      	b.n	8005c76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c54:	4b4d      	ldr	r3, [pc, #308]	; (8005d8c <UART_SetConfig+0x56c>)
 8005c56:	61fb      	str	r3, [r7, #28]
        break;
 8005c58:	e00d      	b.n	8005c76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5a:	f7fe facb 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8005c5e:	61f8      	str	r0, [r7, #28]
        break;
 8005c60:	e009      	b.n	8005c76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c66:	61fb      	str	r3, [r7, #28]
        break;
 8005c68:	e005      	b.n	8005c76 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d077      	beq.n	8005d6c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	005a      	lsls	r2, r3, #1
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	441a      	add	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b0f      	cmp	r3, #15
 8005c96:	d916      	bls.n	8005cc6 <UART_SetConfig+0x4a6>
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c9e:	d212      	bcs.n	8005cc6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f023 030f 	bic.w	r3, r3, #15
 8005ca8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	085b      	lsrs	r3, r3, #1
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	8afb      	ldrh	r3, [r7, #22]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	8afa      	ldrh	r2, [r7, #22]
 8005cc2:	60da      	str	r2, [r3, #12]
 8005cc4:	e052      	b.n	8005d6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ccc:	e04e      	b.n	8005d6c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cd2:	2b08      	cmp	r3, #8
 8005cd4:	d827      	bhi.n	8005d26 <UART_SetConfig+0x506>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <UART_SetConfig+0x4bc>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005d01 	.word	0x08005d01
 8005ce0:	08005d09 	.word	0x08005d09
 8005ce4:	08005d11 	.word	0x08005d11
 8005ce8:	08005d27 	.word	0x08005d27
 8005cec:	08005d17 	.word	0x08005d17
 8005cf0:	08005d27 	.word	0x08005d27
 8005cf4:	08005d27 	.word	0x08005d27
 8005cf8:	08005d27 	.word	0x08005d27
 8005cfc:	08005d1f 	.word	0x08005d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d00:	f7fe fb10 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005d04:	61f8      	str	r0, [r7, #28]
        break;
 8005d06:	e014      	b.n	8005d32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d08:	f7fe fb22 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 8005d0c:	61f8      	str	r0, [r7, #28]
        break;
 8005d0e:	e010      	b.n	8005d32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d10:	4b1e      	ldr	r3, [pc, #120]	; (8005d8c <UART_SetConfig+0x56c>)
 8005d12:	61fb      	str	r3, [r7, #28]
        break;
 8005d14:	e00d      	b.n	8005d32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d16:	f7fe fa6d 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 8005d1a:	61f8      	str	r0, [r7, #28]
        break;
 8005d1c:	e009      	b.n	8005d32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d22:	61fb      	str	r3, [r7, #28]
        break;
 8005d24:	e005      	b.n	8005d32 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d30:	bf00      	nop
    }

    if (pclk != 0U)
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d019      	beq.n	8005d6c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	085a      	lsrs	r2, r3, #1
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	441a      	add	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	2b0f      	cmp	r3, #15
 8005d50:	d909      	bls.n	8005d66 <UART_SetConfig+0x546>
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d58:	d205      	bcs.n	8005d66 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60da      	str	r2, [r3, #12]
 8005d64:	e002      	b.n	8005d6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3728      	adds	r7, #40	; 0x28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d86:	bf00      	nop
 8005d88:	40008000 	.word	0x40008000
 8005d8c:	00f42400 	.word	0x00f42400

08005d90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	f003 0310 	and.w	r3, r3, #16
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00a      	beq.n	8005e42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01a      	beq.n	8005ea6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e8e:	d10a      	bne.n	8005ea6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
  }
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b098      	sub	sp, #96	; 0x60
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ee4:	f7fd f94e 	bl	8003184 <HAL_GetTick>
 8005ee8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b08      	cmp	r3, #8
 8005ef6:	d12e      	bne.n	8005f56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f00:	2200      	movs	r2, #0
 8005f02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f88c 	bl	8006024 <UART_WaitOnFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d021      	beq.n	8005f56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f26:	653b      	str	r3, [r7, #80]	; 0x50
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f30:	647b      	str	r3, [r7, #68]	; 0x44
 8005f32:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e6      	bne.n	8005f12 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2220      	movs	r2, #32
 8005f48:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e062      	b.n	800601c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d149      	bne.n	8005ff8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f856 	bl	8006024 <UART_WaitOnFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d03c      	beq.n	8005ff8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e6      	bne.n	8005f7e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd0:	61fa      	str	r2, [r7, #28]
 8005fd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	69b9      	ldr	r1, [r7, #24]
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	617b      	str	r3, [r7, #20]
   return(result);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e5      	bne.n	8005fb0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e011      	b.n	800601c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3758      	adds	r7, #88	; 0x58
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006034:	e049      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800603c:	d045      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603e:	f7fd f8a1 	bl	8003184 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	429a      	cmp	r2, r3
 800604c:	d302      	bcc.n	8006054 <UART_WaitOnFlagUntilTimeout+0x30>
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e048      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d031      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b08      	cmp	r3, #8
 8006072:	d110      	bne.n	8006096 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2208      	movs	r2, #8
 800607a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 f838 	bl	80060f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2208      	movs	r2, #8
 8006086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e029      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a4:	d111      	bne.n	80060ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f81e 	bl	80060f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e00f      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4013      	ands	r3, r2
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	bf0c      	ite	eq
 80060da:	2301      	moveq	r3, #1
 80060dc:	2300      	movne	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d0a6      	beq.n	8006036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b095      	sub	sp, #84	; 0x54
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006102:	e853 3f00 	ldrex	r3, [r3]
 8006106:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800610e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006118:	643b      	str	r3, [r7, #64]	; 0x40
 800611a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800611e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006120:	e841 2300 	strex	r3, r2, [r1]
 8006124:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1e6      	bne.n	80060fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3308      	adds	r3, #8
 8006132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	61fb      	str	r3, [r7, #28]
   return(result);
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f023 0301 	bic.w	r3, r3, #1
 8006142:	64bb      	str	r3, [r7, #72]	; 0x48
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3308      	adds	r3, #8
 800614a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800614c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800614e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006154:	e841 2300 	strex	r3, r2, [r1]
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e5      	bne.n	800612c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006164:	2b01      	cmp	r3, #1
 8006166:	d118      	bne.n	800619a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	60bb      	str	r3, [r7, #8]
   return(result);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f023 0310 	bic.w	r3, r3, #16
 800617c:	647b      	str	r3, [r7, #68]	; 0x44
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006186:	61bb      	str	r3, [r7, #24]
 8006188:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	6979      	ldr	r1, [r7, #20]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	613b      	str	r3, [r7, #16]
   return(result);
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e6      	bne.n	8006168 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	669a      	str	r2, [r3, #104]	; 0x68
}
 80061ae:	bf00      	nop
 80061b0:	3754      	adds	r7, #84	; 0x54
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
	...

080061bc <__NVIC_SetPriority>:
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	6039      	str	r1, [r7, #0]
 80061c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	db0a      	blt.n	80061e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	490c      	ldr	r1, [pc, #48]	; (8006208 <__NVIC_SetPriority+0x4c>)
 80061d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061da:	0112      	lsls	r2, r2, #4
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	440b      	add	r3, r1
 80061e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80061e4:	e00a      	b.n	80061fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	4908      	ldr	r1, [pc, #32]	; (800620c <__NVIC_SetPriority+0x50>)
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	3b04      	subs	r3, #4
 80061f4:	0112      	lsls	r2, r2, #4
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	440b      	add	r3, r1
 80061fa:	761a      	strb	r2, [r3, #24]
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	e000e100 	.word	0xe000e100
 800620c:	e000ed00 	.word	0xe000ed00

08006210 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006214:	2100      	movs	r1, #0
 8006216:	f06f 0004 	mvn.w	r0, #4
 800621a:	f7ff ffcf 	bl	80061bc <__NVIC_SetPriority>
#endif
}
 800621e:	bf00      	nop
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800622a:	f3ef 8305 	mrs	r3, IPSR
 800622e:	603b      	str	r3, [r7, #0]
  return(result);
 8006230:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006236:	f06f 0305 	mvn.w	r3, #5
 800623a:	607b      	str	r3, [r7, #4]
 800623c:	e00c      	b.n	8006258 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800623e:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <osKernelInitialize+0x44>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d105      	bne.n	8006252 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006246:	4b08      	ldr	r3, [pc, #32]	; (8006268 <osKernelInitialize+0x44>)
 8006248:	2201      	movs	r2, #1
 800624a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800624c:	2300      	movs	r3, #0
 800624e:	607b      	str	r3, [r7, #4]
 8006250:	e002      	b.n	8006258 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006256:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006258:	687b      	ldr	r3, [r7, #4]
}
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	20000a2c 	.word	0x20000a2c

0800626c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006272:	f3ef 8305 	mrs	r3, IPSR
 8006276:	603b      	str	r3, [r7, #0]
  return(result);
 8006278:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <osKernelStart+0x1a>
    stat = osErrorISR;
 800627e:	f06f 0305 	mvn.w	r3, #5
 8006282:	607b      	str	r3, [r7, #4]
 8006284:	e010      	b.n	80062a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006286:	4b0b      	ldr	r3, [pc, #44]	; (80062b4 <osKernelStart+0x48>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d109      	bne.n	80062a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800628e:	f7ff ffbf 	bl	8006210 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006292:	4b08      	ldr	r3, [pc, #32]	; (80062b4 <osKernelStart+0x48>)
 8006294:	2202      	movs	r2, #2
 8006296:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006298:	f001 fb88 	bl	80079ac <vTaskStartScheduler>
      stat = osOK;
 800629c:	2300      	movs	r3, #0
 800629e:	607b      	str	r3, [r7, #4]
 80062a0:	e002      	b.n	80062a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80062a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80062a8:	687b      	ldr	r3, [r7, #4]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20000a2c 	.word	0x20000a2c

080062b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08e      	sub	sp, #56	; 0x38
 80062bc:	af04      	add	r7, sp, #16
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c8:	f3ef 8305 	mrs	r3, IPSR
 80062cc:	617b      	str	r3, [r7, #20]
  return(result);
 80062ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d17e      	bne.n	80063d2 <osThreadNew+0x11a>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d07b      	beq.n	80063d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80062da:	2380      	movs	r3, #128	; 0x80
 80062dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80062de:	2318      	movs	r3, #24
 80062e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80062e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d045      	beq.n	800637e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <osThreadNew+0x48>
        name = attr->name;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d008      	beq.n	8006326 <osThreadNew+0x6e>
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	2b38      	cmp	r3, #56	; 0x38
 8006318:	d805      	bhi.n	8006326 <osThreadNew+0x6e>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <osThreadNew+0x72>
        return (NULL);
 8006326:	2300      	movs	r3, #0
 8006328:	e054      	b.n	80063d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	089b      	lsrs	r3, r3, #2
 8006338:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00e      	beq.n	8006360 <osThreadNew+0xa8>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	2b5b      	cmp	r3, #91	; 0x5b
 8006348:	d90a      	bls.n	8006360 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800634e:	2b00      	cmp	r3, #0
 8006350:	d006      	beq.n	8006360 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <osThreadNew+0xa8>
        mem = 1;
 800635a:	2301      	movs	r3, #1
 800635c:	61bb      	str	r3, [r7, #24]
 800635e:	e010      	b.n	8006382 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10c      	bne.n	8006382 <osThreadNew+0xca>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d108      	bne.n	8006382 <osThreadNew+0xca>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d104      	bne.n	8006382 <osThreadNew+0xca>
          mem = 0;
 8006378:	2300      	movs	r3, #0
 800637a:	61bb      	str	r3, [r7, #24]
 800637c:	e001      	b.n	8006382 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800637e:	2300      	movs	r3, #0
 8006380:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d110      	bne.n	80063aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006390:	9202      	str	r2, [sp, #8]
 8006392:	9301      	str	r3, [sp, #4]
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6a3a      	ldr	r2, [r7, #32]
 800639c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f001 f92e 	bl	8007600 <xTaskCreateStatic>
 80063a4:	4603      	mov	r3, r0
 80063a6:	613b      	str	r3, [r7, #16]
 80063a8:	e013      	b.n	80063d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d110      	bne.n	80063d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	f107 0310 	add.w	r3, r7, #16
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f001 f979 	bl	80076ba <xTaskCreate>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d001      	beq.n	80063d2 <osThreadNew+0x11a>
            hTask = NULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063d2:	693b      	ldr	r3, [r7, #16]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3728      	adds	r7, #40	; 0x28
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063e4:	f3ef 8305 	mrs	r3, IPSR
 80063e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80063ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <osDelay+0x1c>
    stat = osErrorISR;
 80063f0:	f06f 0305 	mvn.w	r3, #5
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	e007      	b.n	8006408 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 fa9e 	bl	8007944 <vTaskDelay>
    }
  }

  return (stat);
 8006408:	68fb      	ldr	r3, [r7, #12]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006412:	b580      	push	{r7, lr}
 8006414:	b088      	sub	sp, #32
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800641e:	f3ef 8305 	mrs	r3, IPSR
 8006422:	60bb      	str	r3, [r7, #8]
  return(result);
 8006424:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006426:	2b00      	cmp	r3, #0
 8006428:	d174      	bne.n	8006514 <osMutexNew+0x102>
    if (attr != NULL) {
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	e001      	b.n	800643c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <osMutexNew+0x3a>
      rmtx = 1U;
 8006446:	2301      	movs	r3, #1
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	e001      	b.n	8006450 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	f003 0308 	and.w	r3, r3, #8
 8006456:	2b00      	cmp	r3, #0
 8006458:	d15c      	bne.n	8006514 <osMutexNew+0x102>
      mem = -1;
 800645a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800645e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d015      	beq.n	8006492 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d006      	beq.n	800647c <osMutexNew+0x6a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	2b4f      	cmp	r3, #79	; 0x4f
 8006474:	d902      	bls.n	800647c <osMutexNew+0x6a>
          mem = 1;
 8006476:	2301      	movs	r3, #1
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	e00c      	b.n	8006496 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d108      	bne.n	8006496 <osMutexNew+0x84>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <osMutexNew+0x84>
            mem = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	e001      	b.n	8006496 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d112      	bne.n	80064c2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	4619      	mov	r1, r3
 80064a8:	2004      	movs	r0, #4
 80064aa:	f000 fb18 	bl	8006ade <xQueueCreateMutexStatic>
 80064ae:	61f8      	str	r0, [r7, #28]
 80064b0:	e016      	b.n	80064e0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	4619      	mov	r1, r3
 80064b8:	2001      	movs	r0, #1
 80064ba:	f000 fb10 	bl	8006ade <xQueueCreateMutexStatic>
 80064be:	61f8      	str	r0, [r7, #28]
 80064c0:	e00e      	b.n	80064e0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10b      	bne.n	80064e0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d004      	beq.n	80064d8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80064ce:	2004      	movs	r0, #4
 80064d0:	f000 faed 	bl	8006aae <xQueueCreateMutex>
 80064d4:	61f8      	str	r0, [r7, #28]
 80064d6:	e003      	b.n	80064e0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80064d8:	2001      	movs	r0, #1
 80064da:	f000 fae8 	bl	8006aae <xQueueCreateMutex>
 80064de:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00c      	beq.n	8006500 <osMutexNew+0xee>
        if (attr != NULL) {
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <osMutexNew+0xe2>
          name = attr->name;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	e001      	b.n	80064f8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80064f8:	68f9      	ldr	r1, [r7, #12]
 80064fa:	69f8      	ldr	r0, [r7, #28]
 80064fc:	f001 f822 	bl	8007544 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d006      	beq.n	8006514 <osMutexNew+0x102>
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	f043 0301 	orr.w	r3, r3, #1
 8006512:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006514:	69fb      	ldr	r3, [r7, #28]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3720      	adds	r7, #32
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800651e:	b580      	push	{r7, lr}
 8006520:	b086      	sub	sp, #24
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f023 0301 	bic.w	r3, r3, #1
 800652e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800653c:	f3ef 8305 	mrs	r3, IPSR
 8006540:	60bb      	str	r3, [r7, #8]
  return(result);
 8006542:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006548:	f06f 0305 	mvn.w	r3, #5
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	e02c      	b.n	80065aa <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d103      	bne.n	800655e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006556:	f06f 0303 	mvn.w	r3, #3
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e025      	b.n	80065aa <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d011      	beq.n	8006588 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	6938      	ldr	r0, [r7, #16]
 8006568:	f000 fb08 	bl	8006b7c <xQueueTakeMutexRecursive>
 800656c:	4603      	mov	r3, r0
 800656e:	2b01      	cmp	r3, #1
 8006570:	d01b      	beq.n	80065aa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006578:	f06f 0301 	mvn.w	r3, #1
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	e014      	b.n	80065aa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006580:	f06f 0302 	mvn.w	r3, #2
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	e010      	b.n	80065aa <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6938      	ldr	r0, [r7, #16]
 800658c:	f000 fda6 	bl	80070dc <xQueueSemaphoreTake>
 8006590:	4603      	mov	r3, r0
 8006592:	2b01      	cmp	r3, #1
 8006594:	d009      	beq.n	80065aa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800659c:	f06f 0301 	mvn.w	r3, #1
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	e002      	b.n	80065aa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80065a4:	f06f 0302 	mvn.w	r3, #2
 80065a8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80065aa:	697b      	ldr	r3, [r7, #20]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f023 0301 	bic.w	r3, r3, #1
 80065c2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065d0:	f3ef 8305 	mrs	r3, IPSR
 80065d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80065d6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <osMutexRelease+0x30>
    stat = osErrorISR;
 80065dc:	f06f 0305 	mvn.w	r3, #5
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	e01f      	b.n	8006624 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d103      	bne.n	80065f2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80065ea:	f06f 0303 	mvn.w	r3, #3
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	e018      	b.n	8006624 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d009      	beq.n	800660c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80065f8:	6938      	ldr	r0, [r7, #16]
 80065fa:	f000 fa8b 	bl	8006b14 <xQueueGiveMutexRecursive>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b01      	cmp	r3, #1
 8006602:	d00f      	beq.n	8006624 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006604:	f06f 0302 	mvn.w	r3, #2
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	e00b      	b.n	8006624 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800660c:	2300      	movs	r3, #0
 800660e:	2200      	movs	r2, #0
 8006610:	2100      	movs	r1, #0
 8006612:	6938      	ldr	r0, [r7, #16]
 8006614:	f000 fae8 	bl	8006be8 <xQueueGenericSend>
 8006618:	4603      	mov	r3, r0
 800661a:	2b01      	cmp	r3, #1
 800661c:	d002      	beq.n	8006624 <osMutexRelease+0x70>
        stat = osErrorResource;
 800661e:	f06f 0302 	mvn.w	r3, #2
 8006622:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006624:	697b      	ldr	r3, [r7, #20]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4a07      	ldr	r2, [pc, #28]	; (800665c <vApplicationGetIdleTaskMemory+0x2c>)
 8006640:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	4a06      	ldr	r2, [pc, #24]	; (8006660 <vApplicationGetIdleTaskMemory+0x30>)
 8006646:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2280      	movs	r2, #128	; 0x80
 800664c:	601a      	str	r2, [r3, #0]
}
 800664e:	bf00      	nop
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20000a30 	.word	0x20000a30
 8006660:	20000a8c 	.word	0x20000a8c

08006664 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4a07      	ldr	r2, [pc, #28]	; (8006690 <vApplicationGetTimerTaskMemory+0x2c>)
 8006674:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	4a06      	ldr	r2, [pc, #24]	; (8006694 <vApplicationGetTimerTaskMemory+0x30>)
 800667a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006682:	601a      	str	r2, [r3, #0]
}
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	20000c8c 	.word	0x20000c8c
 8006694:	20000ce8 	.word	0x20000ce8

08006698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f103 0208 	add.w	r2, r3, #8
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f103 0208 	add.w	r2, r3, #8
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f103 0208 	add.w	r2, r3, #8
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066f2:	b480      	push	{r7}
 80066f4:	b085      	sub	sp, #20
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	601a      	str	r2, [r3, #0]
}
 800672e:	bf00      	nop
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800673a:	b480      	push	{r7}
 800673c:	b085      	sub	sp, #20
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006750:	d103      	bne.n	800675a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	e00c      	b.n	8006774 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3308      	adds	r3, #8
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	e002      	b.n	8006768 <vListInsert+0x2e>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	429a      	cmp	r2, r3
 8006772:	d2f6      	bcs.n	8006762 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	601a      	str	r2, [r3, #0]
}
 80067a0:	bf00      	nop
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6892      	ldr	r2, [r2, #8]
 80067c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6852      	ldr	r2, [r2, #4]
 80067cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d103      	bne.n	80067e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	1e5a      	subs	r2, r3, #1
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10a      	bne.n	800682a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006826:	bf00      	nop
 8006828:	e7fe      	b.n	8006828 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800682a:	f002 fb73 	bl	8008f14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006836:	68f9      	ldr	r1, [r7, #12]
 8006838:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800683a:	fb01 f303 	mul.w	r3, r1, r3
 800683e:	441a      	add	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685a:	3b01      	subs	r3, #1
 800685c:	68f9      	ldr	r1, [r7, #12]
 800685e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006860:	fb01 f303 	mul.w	r3, r1, r3
 8006864:	441a      	add	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	22ff      	movs	r2, #255	; 0xff
 800686e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	22ff      	movs	r2, #255	; 0xff
 8006876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d114      	bne.n	80068aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d01a      	beq.n	80068be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3310      	adds	r3, #16
 800688c:	4618      	mov	r0, r3
 800688e:	f001 fb17 	bl	8007ec0 <xTaskRemoveFromEventList>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d012      	beq.n	80068be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006898:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <xQueueGenericReset+0xcc>)
 800689a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	e009      	b.n	80068be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3310      	adds	r3, #16
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff fef2 	bl	8006698 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3324      	adds	r3, #36	; 0x24
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff feed 	bl	8006698 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068be:	f002 fb59 	bl	8008f74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068c2:	2301      	movs	r3, #1
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	e000ed04 	.word	0xe000ed04

080068d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08e      	sub	sp, #56	; 0x38
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10a      	bne.n	80068fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068f6:	bf00      	nop
 80068f8:	e7fe      	b.n	80068f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10a      	bne.n	8006916 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006912:	bf00      	nop
 8006914:	e7fe      	b.n	8006914 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <xQueueGenericCreateStatic+0x52>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <xQueueGenericCreateStatic+0x56>
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <xQueueGenericCreateStatic+0x58>
 8006926:	2300      	movs	r3, #0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10a      	bne.n	8006942 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	623b      	str	r3, [r7, #32]
}
 800693e:	bf00      	nop
 8006940:	e7fe      	b.n	8006940 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d102      	bne.n	800694e <xQueueGenericCreateStatic+0x7e>
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <xQueueGenericCreateStatic+0x82>
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <xQueueGenericCreateStatic+0x84>
 8006952:	2300      	movs	r3, #0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	61fb      	str	r3, [r7, #28]
}
 800696a:	bf00      	nop
 800696c:	e7fe      	b.n	800696c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800696e:	2350      	movs	r3, #80	; 0x50
 8006970:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b50      	cmp	r3, #80	; 0x50
 8006976:	d00a      	beq.n	800698e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	61bb      	str	r3, [r7, #24]
}
 800698a:	bf00      	nop
 800698c:	e7fe      	b.n	800698c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800698e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00d      	beq.n	80069b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	4613      	mov	r3, r2
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	68b9      	ldr	r1, [r7, #8]
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 f83f 	bl	8006a34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3730      	adds	r7, #48	; 0x30
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08a      	sub	sp, #40	; 0x28
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	4613      	mov	r3, r2
 80069cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10a      	bne.n	80069ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	613b      	str	r3, [r7, #16]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	fb02 f303 	mul.w	r3, r2, r3
 80069f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	3350      	adds	r3, #80	; 0x50
 80069f8:	4618      	mov	r0, r3
 80069fa:	f002 fbad 	bl	8009158 <pvPortMalloc>
 80069fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d011      	beq.n	8006a2a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	3350      	adds	r3, #80	; 0x50
 8006a0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a18:	79fa      	ldrb	r2, [r7, #7]
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 f805 	bl	8006a34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a2a:	69bb      	ldr	r3, [r7, #24]
	}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3720      	adds	r7, #32
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d103      	bne.n	8006a50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	e002      	b.n	8006a56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a62:	2101      	movs	r1, #1
 8006a64:	69b8      	ldr	r0, [r7, #24]
 8006a66:	f7ff fecb 	bl	8006800 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	78fa      	ldrb	r2, [r7, #3]
 8006a6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00e      	beq.n	8006aa6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f8a1 	bl	8006be8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006aa6:	bf00      	nop
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b086      	sub	sp, #24
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	2300      	movs	r3, #0
 8006abe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006ac0:	79fb      	ldrb	r3, [r7, #7]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6939      	ldr	r1, [r7, #16]
 8006ac6:	6978      	ldr	r0, [r7, #20]
 8006ac8:	f7ff ff7a 	bl	80069c0 <xQueueGenericCreate>
 8006acc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f7ff ffd3 	bl	8006a7a <prvInitialiseMutex>

		return xNewQueue;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
	}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b088      	sub	sp, #32
 8006ae2:	af02      	add	r7, sp, #8
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	6039      	str	r1, [r7, #0]
 8006ae8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006aea:	2301      	movs	r3, #1
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	2300      	movs	r3, #0
 8006af0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006af2:	79fb      	ldrb	r3, [r7, #7]
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2200      	movs	r2, #0
 8006afa:	6939      	ldr	r1, [r7, #16]
 8006afc:	6978      	ldr	r0, [r7, #20]
 8006afe:	f7ff fee7 	bl	80068d0 <xQueueGenericCreateStatic>
 8006b02:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f7ff ffb8 	bl	8006a7a <prvInitialiseMutex>

		return xNewQueue;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
	}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006b14:	b590      	push	{r4, r7, lr}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10a      	bne.n	8006b3c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	60fb      	str	r3, [r7, #12]
}
 8006b38:	bf00      	nop
 8006b3a:	e7fe      	b.n	8006b3a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	689c      	ldr	r4, [r3, #8]
 8006b40:	f001 fb7c 	bl	800823c <xTaskGetCurrentTaskHandle>
 8006b44:	4603      	mov	r3, r0
 8006b46:	429c      	cmp	r4, r3
 8006b48:	d111      	bne.n	8006b6e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	1e5a      	subs	r2, r3, #1
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d105      	bne.n	8006b68 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2100      	movs	r1, #0
 8006b62:	6938      	ldr	r0, [r7, #16]
 8006b64:	f000 f840 	bl	8006be8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	617b      	str	r3, [r7, #20]
 8006b6c:	e001      	b.n	8006b72 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006b72:	697b      	ldr	r3, [r7, #20]
	}
 8006b74:	4618      	mov	r0, r3
 8006b76:	371c      	adds	r7, #28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd90      	pop	{r4, r7, pc}

08006b7c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006b7c:	b590      	push	{r4, r7, lr}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10a      	bne.n	8006ba6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	60fb      	str	r3, [r7, #12]
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	689c      	ldr	r4, [r3, #8]
 8006baa:	f001 fb47 	bl	800823c <xTaskGetCurrentTaskHandle>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	429c      	cmp	r4, r3
 8006bb2:	d107      	bne.n	8006bc4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	e00c      	b.n	8006bde <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6938      	ldr	r0, [r7, #16]
 8006bc8:	f000 fa88 	bl	80070dc <xQueueSemaphoreTake>
 8006bcc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d004      	beq.n	8006bde <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006bde:	697b      	ldr	r3, [r7, #20]
	}
 8006be0:	4618      	mov	r0, r3
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd90      	pop	{r4, r7, pc}

08006be8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08e      	sub	sp, #56	; 0x38
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10a      	bne.n	8006c1a <xQueueGenericSend+0x32>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c16:	bf00      	nop
 8006c18:	e7fe      	b.n	8006c18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d103      	bne.n	8006c28 <xQueueGenericSend+0x40>
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <xQueueGenericSend+0x44>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e000      	b.n	8006c2e <xQueueGenericSend+0x46>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <xQueueGenericSend+0x60>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c44:	bf00      	nop
 8006c46:	e7fe      	b.n	8006c46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d103      	bne.n	8006c56 <xQueueGenericSend+0x6e>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <xQueueGenericSend+0x72>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <xQueueGenericSend+0x74>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <xQueueGenericSend+0x8e>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	623b      	str	r3, [r7, #32]
}
 8006c72:	bf00      	nop
 8006c74:	e7fe      	b.n	8006c74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c76:	f001 faf1 	bl	800825c <xTaskGetSchedulerState>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d102      	bne.n	8006c86 <xQueueGenericSend+0x9e>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <xQueueGenericSend+0xa2>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <xQueueGenericSend+0xa4>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10a      	bne.n	8006ca6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	61fb      	str	r3, [r7, #28]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ca6:	f002 f935 	bl	8008f14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d302      	bcc.n	8006cbc <xQueueGenericSend+0xd4>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d129      	bne.n	8006d10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cc2:	f000 fb2f 	bl	8007324 <prvCopyDataToQueue>
 8006cc6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d010      	beq.n	8006cf2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	3324      	adds	r3, #36	; 0x24
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f001 f8f3 	bl	8007ec0 <xTaskRemoveFromEventList>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d013      	beq.n	8006d08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ce0:	4b3f      	ldr	r3, [pc, #252]	; (8006de0 <xQueueGenericSend+0x1f8>)
 8006ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	e00a      	b.n	8006d08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d007      	beq.n	8006d08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006cf8:	4b39      	ldr	r3, [pc, #228]	; (8006de0 <xQueueGenericSend+0x1f8>)
 8006cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d08:	f002 f934 	bl	8008f74 <vPortExitCritical>
				return pdPASS;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e063      	b.n	8006dd8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d16:	f002 f92d 	bl	8008f74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e05c      	b.n	8006dd8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d106      	bne.n	8006d32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d24:	f107 0314 	add.w	r3, r7, #20
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f001 f92d 	bl	8007f88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d32:	f002 f91f 	bl	8008f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d36:	f000 fe9f 	bl	8007a78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d3a:	f002 f8eb 	bl	8008f14 <vPortEnterCritical>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d44:	b25b      	sxtb	r3, r3
 8006d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d4a:	d103      	bne.n	8006d54 <xQueueGenericSend+0x16c>
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d5a:	b25b      	sxtb	r3, r3
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d60:	d103      	bne.n	8006d6a <xQueueGenericSend+0x182>
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d6a:	f002 f903 	bl	8008f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d6e:	1d3a      	adds	r2, r7, #4
 8006d70:	f107 0314 	add.w	r3, r7, #20
 8006d74:	4611      	mov	r1, r2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f001 f91c 	bl	8007fb4 <xTaskCheckForTimeOut>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d124      	bne.n	8006dcc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d84:	f000 fbc6 	bl	8007514 <prvIsQueueFull>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d018      	beq.n	8006dc0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	3310      	adds	r3, #16
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	4611      	mov	r1, r2
 8006d96:	4618      	mov	r0, r3
 8006d98:	f001 f842 	bl	8007e20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d9e:	f000 fb51 	bl	8007444 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006da2:	f000 fe77 	bl	8007a94 <xTaskResumeAll>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f47f af7c 	bne.w	8006ca6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006dae:	4b0c      	ldr	r3, [pc, #48]	; (8006de0 <xQueueGenericSend+0x1f8>)
 8006db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	e772      	b.n	8006ca6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dc2:	f000 fb3f 	bl	8007444 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dc6:	f000 fe65 	bl	8007a94 <xTaskResumeAll>
 8006dca:	e76c      	b.n	8006ca6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dce:	f000 fb39 	bl	8007444 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dd2:	f000 fe5f 	bl	8007a94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3738      	adds	r7, #56	; 0x38
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	e000ed04 	.word	0xe000ed04

08006de4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b090      	sub	sp, #64	; 0x40
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d103      	bne.n	8006e20 <xQueueGenericSendFromISR+0x3c>
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <xQueueGenericSendFromISR+0x40>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e000      	b.n	8006e26 <xQueueGenericSendFromISR+0x42>
 8006e24:	2300      	movs	r3, #0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e3c:	bf00      	nop
 8006e3e:	e7fe      	b.n	8006e3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d103      	bne.n	8006e4e <xQueueGenericSendFromISR+0x6a>
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <xQueueGenericSendFromISR+0x6e>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e000      	b.n	8006e54 <xQueueGenericSendFromISR+0x70>
 8006e52:	2300      	movs	r3, #0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10a      	bne.n	8006e6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	623b      	str	r3, [r7, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	e7fe      	b.n	8006e6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e6e:	f002 f933 	bl	80090d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e72:	f3ef 8211 	mrs	r2, BASEPRI
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	61fa      	str	r2, [r7, #28]
 8006e88:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d302      	bcc.n	8006ea0 <xQueueGenericSendFromISR+0xbc>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d12f      	bne.n	8006f00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006eb6:	f000 fa35 	bl	8007324 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006eba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ec2:	d112      	bne.n	8006eea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d016      	beq.n	8006efa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	3324      	adds	r3, #36	; 0x24
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fff5 	bl	8007ec0 <xTaskRemoveFromEventList>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00e      	beq.n	8006efa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00b      	beq.n	8006efa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	e007      	b.n	8006efa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006eea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006eee:	3301      	adds	r3, #1
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	b25a      	sxtb	r2, r3
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006efa:	2301      	movs	r3, #1
 8006efc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006efe:	e001      	b.n	8006f04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3740      	adds	r7, #64	; 0x40
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08c      	sub	sp, #48	; 0x30
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10a      	bne.n	8006f4c <xQueueReceive+0x30>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	623b      	str	r3, [r7, #32]
}
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d103      	bne.n	8006f5a <xQueueReceive+0x3e>
 8006f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <xQueueReceive+0x42>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <xQueueReceive+0x44>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <xQueueReceive+0x5e>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	61fb      	str	r3, [r7, #28]
}
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f7a:	f001 f96f 	bl	800825c <xTaskGetSchedulerState>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d102      	bne.n	8006f8a <xQueueReceive+0x6e>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <xQueueReceive+0x72>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <xQueueReceive+0x74>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <xQueueReceive+0x8e>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	61bb      	str	r3, [r7, #24]
}
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006faa:	f001 ffb3 	bl	8008f14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d01f      	beq.n	8006ffa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fba:	68b9      	ldr	r1, [r7, #8]
 8006fbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fbe:	f000 fa1b 	bl	80073f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	1e5a      	subs	r2, r3, #1
 8006fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00f      	beq.n	8006ff2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	3310      	adds	r3, #16
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 ff72 	bl	8007ec0 <xTaskRemoveFromEventList>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d007      	beq.n	8006ff2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fe2:	4b3d      	ldr	r3, [pc, #244]	; (80070d8 <xQueueReceive+0x1bc>)
 8006fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ff2:	f001 ffbf 	bl	8008f74 <vPortExitCritical>
				return pdPASS;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e069      	b.n	80070ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d103      	bne.n	8007008 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007000:	f001 ffb8 	bl	8008f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007004:	2300      	movs	r3, #0
 8007006:	e062      	b.n	80070ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d106      	bne.n	800701c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800700e:	f107 0310 	add.w	r3, r7, #16
 8007012:	4618      	mov	r0, r3
 8007014:	f000 ffb8 	bl	8007f88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007018:	2301      	movs	r3, #1
 800701a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800701c:	f001 ffaa 	bl	8008f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007020:	f000 fd2a 	bl	8007a78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007024:	f001 ff76 	bl	8008f14 <vPortEnterCritical>
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800702e:	b25b      	sxtb	r3, r3
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007034:	d103      	bne.n	800703e <xQueueReceive+0x122>
 8007036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007044:	b25b      	sxtb	r3, r3
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800704a:	d103      	bne.n	8007054 <xQueueReceive+0x138>
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007054:	f001 ff8e 	bl	8008f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007058:	1d3a      	adds	r2, r7, #4
 800705a:	f107 0310 	add.w	r3, r7, #16
 800705e:	4611      	mov	r1, r2
 8007060:	4618      	mov	r0, r3
 8007062:	f000 ffa7 	bl	8007fb4 <xTaskCheckForTimeOut>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d123      	bne.n	80070b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800706c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800706e:	f000 fa3b 	bl	80074e8 <prvIsQueueEmpty>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d017      	beq.n	80070a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707a:	3324      	adds	r3, #36	; 0x24
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	4611      	mov	r1, r2
 8007080:	4618      	mov	r0, r3
 8007082:	f000 fecd 	bl	8007e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007088:	f000 f9dc 	bl	8007444 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800708c:	f000 fd02 	bl	8007a94 <xTaskResumeAll>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d189      	bne.n	8006faa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007096:	4b10      	ldr	r3, [pc, #64]	; (80070d8 <xQueueReceive+0x1bc>)
 8007098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	e780      	b.n	8006faa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070aa:	f000 f9cb 	bl	8007444 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070ae:	f000 fcf1 	bl	8007a94 <xTaskResumeAll>
 80070b2:	e77a      	b.n	8006faa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80070b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070b6:	f000 f9c5 	bl	8007444 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070ba:	f000 fceb 	bl	8007a94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070c0:	f000 fa12 	bl	80074e8 <prvIsQueueEmpty>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f43f af6f 	beq.w	8006faa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3730      	adds	r7, #48	; 0x30
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	e000ed04 	.word	0xe000ed04

080070dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08e      	sub	sp, #56	; 0x38
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10a      	bne.n	800710e <xQueueSemaphoreTake+0x32>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	623b      	str	r3, [r7, #32]
}
 800710a:	bf00      	nop
 800710c:	e7fe      	b.n	800710c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	61fb      	str	r3, [r7, #28]
}
 8007128:	bf00      	nop
 800712a:	e7fe      	b.n	800712a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800712c:	f001 f896 	bl	800825c <xTaskGetSchedulerState>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d102      	bne.n	800713c <xQueueSemaphoreTake+0x60>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <xQueueSemaphoreTake+0x64>
 800713c:	2301      	movs	r3, #1
 800713e:	e000      	b.n	8007142 <xQueueSemaphoreTake+0x66>
 8007140:	2300      	movs	r3, #0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10a      	bne.n	800715c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	61bb      	str	r3, [r7, #24]
}
 8007158:	bf00      	nop
 800715a:	e7fe      	b.n	800715a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800715c:	f001 feda 	bl	8008f14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007164:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007168:	2b00      	cmp	r3, #0
 800716a:	d024      	beq.n	80071b6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	1e5a      	subs	r2, r3, #1
 8007170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007172:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800717c:	f001 f9e4 	bl	8008548 <pvTaskIncrementMutexHeldCount>
 8007180:	4602      	mov	r2, r0
 8007182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007184:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00f      	beq.n	80071ae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007190:	3310      	adds	r3, #16
 8007192:	4618      	mov	r0, r3
 8007194:	f000 fe94 	bl	8007ec0 <xTaskRemoveFromEventList>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d007      	beq.n	80071ae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800719e:	4b54      	ldr	r3, [pc, #336]	; (80072f0 <xQueueSemaphoreTake+0x214>)
 80071a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071ae:	f001 fee1 	bl	8008f74 <vPortExitCritical>
				return pdPASS;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e097      	b.n	80072e6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d111      	bne.n	80071e0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80071bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00a      	beq.n	80071d8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	617b      	str	r3, [r7, #20]
}
 80071d4:	bf00      	nop
 80071d6:	e7fe      	b.n	80071d6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80071d8:	f001 fecc 	bl	8008f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071dc:	2300      	movs	r3, #0
 80071de:	e082      	b.n	80072e6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d106      	bne.n	80071f4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071e6:	f107 030c 	add.w	r3, r7, #12
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fecc 	bl	8007f88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071f0:	2301      	movs	r3, #1
 80071f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071f4:	f001 febe 	bl	8008f74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071f8:	f000 fc3e 	bl	8007a78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071fc:	f001 fe8a 	bl	8008f14 <vPortEnterCritical>
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007206:	b25b      	sxtb	r3, r3
 8007208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800720c:	d103      	bne.n	8007216 <xQueueSemaphoreTake+0x13a>
 800720e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007218:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800721c:	b25b      	sxtb	r3, r3
 800721e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007222:	d103      	bne.n	800722c <xQueueSemaphoreTake+0x150>
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800722c:	f001 fea2 	bl	8008f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007230:	463a      	mov	r2, r7
 8007232:	f107 030c 	add.w	r3, r7, #12
 8007236:	4611      	mov	r1, r2
 8007238:	4618      	mov	r0, r3
 800723a:	f000 febb 	bl	8007fb4 <xTaskCheckForTimeOut>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d132      	bne.n	80072aa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007246:	f000 f94f 	bl	80074e8 <prvIsQueueEmpty>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d026      	beq.n	800729e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d109      	bne.n	800726c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007258:	f001 fe5c 	bl	8008f14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800725c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	4618      	mov	r0, r3
 8007262:	f001 f819 	bl	8008298 <xTaskPriorityInherit>
 8007266:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007268:	f001 fe84 	bl	8008f74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726e:	3324      	adds	r3, #36	; 0x24
 8007270:	683a      	ldr	r2, [r7, #0]
 8007272:	4611      	mov	r1, r2
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fdd3 	bl	8007e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800727a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800727c:	f000 f8e2 	bl	8007444 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007280:	f000 fc08 	bl	8007a94 <xTaskResumeAll>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	f47f af68 	bne.w	800715c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800728c:	4b18      	ldr	r3, [pc, #96]	; (80072f0 <xQueueSemaphoreTake+0x214>)
 800728e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	e75e      	b.n	800715c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800729e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072a0:	f000 f8d0 	bl	8007444 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072a4:	f000 fbf6 	bl	8007a94 <xTaskResumeAll>
 80072a8:	e758      	b.n	800715c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80072aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072ac:	f000 f8ca 	bl	8007444 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072b0:	f000 fbf0 	bl	8007a94 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072b6:	f000 f917 	bl	80074e8 <prvIsQueueEmpty>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f43f af4d 	beq.w	800715c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00d      	beq.n	80072e4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80072c8:	f001 fe24 	bl	8008f14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80072cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072ce:	f000 f811 	bl	80072f4 <prvGetDisinheritPriorityAfterTimeout>
 80072d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072da:	4618      	mov	r0, r3
 80072dc:	f001 f8b2 	bl	8008444 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80072e0:	f001 fe48 	bl	8008f74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3738      	adds	r7, #56	; 0x38
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	e000ed04 	.word	0xe000ed04

080072f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	2b00      	cmp	r3, #0
 8007302:	d006      	beq.n	8007312 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	e001      	b.n	8007316 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007316:	68fb      	ldr	r3, [r7, #12]
	}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007330:	2300      	movs	r3, #0
 8007332:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10d      	bne.n	800735e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d14d      	bne.n	80073e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	4618      	mov	r0, r3
 8007350:	f001 f80a 	bl	8008368 <xTaskPriorityDisinherit>
 8007354:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	609a      	str	r2, [r3, #8]
 800735c:	e043      	b.n	80073e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d119      	bne.n	8007398 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6858      	ldr	r0, [r3, #4]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	461a      	mov	r2, r3
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	f002 f9f4 	bl	800975c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737c:	441a      	add	r2, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	429a      	cmp	r2, r3
 800738c:	d32b      	bcc.n	80073e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	605a      	str	r2, [r3, #4]
 8007396:	e026      	b.n	80073e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	68d8      	ldr	r0, [r3, #12]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a0:	461a      	mov	r2, r3
 80073a2:	68b9      	ldr	r1, [r7, #8]
 80073a4:	f002 f9da 	bl	800975c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b0:	425b      	negs	r3, r3
 80073b2:	441a      	add	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	68da      	ldr	r2, [r3, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d207      	bcs.n	80073d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073cc:	425b      	negs	r3, r3
 80073ce:	441a      	add	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d105      	bne.n	80073e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80073ee:	697b      	ldr	r3, [r7, #20]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d018      	beq.n	800743c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	441a      	add	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	429a      	cmp	r2, r3
 8007422:	d303      	bcc.n	800742c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68d9      	ldr	r1, [r3, #12]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007434:	461a      	mov	r2, r3
 8007436:	6838      	ldr	r0, [r7, #0]
 8007438:	f002 f990 	bl	800975c <memcpy>
	}
}
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800744c:	f001 fd62 	bl	8008f14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007456:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007458:	e011      	b.n	800747e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	2b00      	cmp	r3, #0
 8007460:	d012      	beq.n	8007488 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	3324      	adds	r3, #36	; 0x24
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fd2a 	bl	8007ec0 <xTaskRemoveFromEventList>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007472:	f000 fe01 	bl	8008078 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	3b01      	subs	r3, #1
 800747a:	b2db      	uxtb	r3, r3
 800747c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800747e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007482:	2b00      	cmp	r3, #0
 8007484:	dce9      	bgt.n	800745a <prvUnlockQueue+0x16>
 8007486:	e000      	b.n	800748a <prvUnlockQueue+0x46>
					break;
 8007488:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	22ff      	movs	r2, #255	; 0xff
 800748e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007492:	f001 fd6f 	bl	8008f74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007496:	f001 fd3d 	bl	8008f14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074a2:	e011      	b.n	80074c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d012      	beq.n	80074d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3310      	adds	r3, #16
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 fd05 	bl	8007ec0 <xTaskRemoveFromEventList>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074bc:	f000 fddc 	bl	8008078 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dce9      	bgt.n	80074a4 <prvUnlockQueue+0x60>
 80074d0:	e000      	b.n	80074d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	22ff      	movs	r2, #255	; 0xff
 80074d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80074dc:	f001 fd4a 	bl	8008f74 <vPortExitCritical>
}
 80074e0:	bf00      	nop
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074f0:	f001 fd10 	bl	8008f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d102      	bne.n	8007502 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074fc:	2301      	movs	r3, #1
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	e001      	b.n	8007506 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007502:	2300      	movs	r3, #0
 8007504:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007506:	f001 fd35 	bl	8008f74 <vPortExitCritical>

	return xReturn;
 800750a:	68fb      	ldr	r3, [r7, #12]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800751c:	f001 fcfa 	bl	8008f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007528:	429a      	cmp	r2, r3
 800752a:	d102      	bne.n	8007532 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800752c:	2301      	movs	r3, #1
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	e001      	b.n	8007536 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007536:	f001 fd1d 	bl	8008f74 <vPortExitCritical>

	return xReturn;
 800753a:	68fb      	ldr	r3, [r7, #12]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800754e:	2300      	movs	r3, #0
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	e014      	b.n	800757e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007554:	4a0f      	ldr	r2, [pc, #60]	; (8007594 <vQueueAddToRegistry+0x50>)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10b      	bne.n	8007578 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007560:	490c      	ldr	r1, [pc, #48]	; (8007594 <vQueueAddToRegistry+0x50>)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800756a:	4a0a      	ldr	r2, [pc, #40]	; (8007594 <vQueueAddToRegistry+0x50>)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	4413      	add	r3, r2
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007576:	e006      	b.n	8007586 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	3301      	adds	r3, #1
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b07      	cmp	r3, #7
 8007582:	d9e7      	bls.n	8007554 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	200010e8 	.word	0x200010e8

08007598 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075a8:	f001 fcb4 	bl	8008f14 <vPortEnterCritical>
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075b2:	b25b      	sxtb	r3, r3
 80075b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075b8:	d103      	bne.n	80075c2 <vQueueWaitForMessageRestricted+0x2a>
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075c8:	b25b      	sxtb	r3, r3
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ce:	d103      	bne.n	80075d8 <vQueueWaitForMessageRestricted+0x40>
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075d8:	f001 fccc 	bl	8008f74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d106      	bne.n	80075f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	3324      	adds	r3, #36	; 0x24
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	68b9      	ldr	r1, [r7, #8]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 fc3b 	bl	8007e68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80075f2:	6978      	ldr	r0, [r7, #20]
 80075f4:	f7ff ff26 	bl	8007444 <prvUnlockQueue>
	}
 80075f8:	bf00      	nop
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08e      	sub	sp, #56	; 0x38
 8007604:	af04      	add	r7, sp, #16
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
 800760c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800760e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10a      	bne.n	800762a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	623b      	str	r3, [r7, #32]
}
 8007626:	bf00      	nop
 8007628:	e7fe      	b.n	8007628 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <xTaskCreateStatic+0x46>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	61fb      	str	r3, [r7, #28]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007646:	235c      	movs	r3, #92	; 0x5c
 8007648:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b5c      	cmp	r3, #92	; 0x5c
 800764e:	d00a      	beq.n	8007666 <xTaskCreateStatic+0x66>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	61bb      	str	r3, [r7, #24]
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007666:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766a:	2b00      	cmp	r3, #0
 800766c:	d01e      	beq.n	80076ac <xTaskCreateStatic+0xac>
 800766e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01b      	beq.n	80076ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800767c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	2202      	movs	r2, #2
 8007682:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007686:	2300      	movs	r3, #0
 8007688:	9303      	str	r3, [sp, #12]
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	9302      	str	r3, [sp, #8]
 800768e:	f107 0314 	add.w	r3, r7, #20
 8007692:	9301      	str	r3, [sp, #4]
 8007694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	68b9      	ldr	r1, [r7, #8]
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 f850 	bl	8007744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076a6:	f000 f8dd 	bl	8007864 <prvAddNewTaskToReadyList>
 80076aa:	e001      	b.n	80076b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076b0:	697b      	ldr	r3, [r7, #20]
	}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3728      	adds	r7, #40	; 0x28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b08c      	sub	sp, #48	; 0x30
 80076be:	af04      	add	r7, sp, #16
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	603b      	str	r3, [r7, #0]
 80076c6:	4613      	mov	r3, r2
 80076c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076ca:	88fb      	ldrh	r3, [r7, #6]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4618      	mov	r0, r3
 80076d0:	f001 fd42 	bl	8009158 <pvPortMalloc>
 80076d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00e      	beq.n	80076fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076dc:	205c      	movs	r0, #92	; 0x5c
 80076de:	f001 fd3b 	bl	8009158 <pvPortMalloc>
 80076e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	631a      	str	r2, [r3, #48]	; 0x30
 80076f0:	e005      	b.n	80076fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076f2:	6978      	ldr	r0, [r7, #20]
 80076f4:	f001 fdfc 	bl	80092f0 <vPortFree>
 80076f8:	e001      	b.n	80076fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d017      	beq.n	8007734 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800770c:	88fa      	ldrh	r2, [r7, #6]
 800770e:	2300      	movs	r3, #0
 8007710:	9303      	str	r3, [sp, #12]
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	9302      	str	r3, [sp, #8]
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	9301      	str	r3, [sp, #4]
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68b9      	ldr	r1, [r7, #8]
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 f80e 	bl	8007744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007728:	69f8      	ldr	r0, [r7, #28]
 800772a:	f000 f89b 	bl	8007864 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800772e:	2301      	movs	r3, #1
 8007730:	61bb      	str	r3, [r7, #24]
 8007732:	e002      	b.n	800773a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007738:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800773a:	69bb      	ldr	r3, [r7, #24]
	}
 800773c:	4618      	mov	r0, r3
 800773e:	3720      	adds	r7, #32
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b088      	sub	sp, #32
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	461a      	mov	r2, r3
 800775c:	21a5      	movs	r1, #165	; 0xa5
 800775e:	f001 ffb9 	bl	80096d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800776c:	3b01      	subs	r3, #1
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	f023 0307 	bic.w	r3, r3, #7
 800777a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00a      	beq.n	800779c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	617b      	str	r3, [r7, #20]
}
 8007798:	bf00      	nop
 800779a:	e7fe      	b.n	800779a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d01f      	beq.n	80077e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077a2:	2300      	movs	r3, #0
 80077a4:	61fb      	str	r3, [r7, #28]
 80077a6:	e012      	b.n	80077ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	4413      	add	r3, r2
 80077ae:	7819      	ldrb	r1, [r3, #0]
 80077b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	4413      	add	r3, r2
 80077b6:	3334      	adds	r3, #52	; 0x34
 80077b8:	460a      	mov	r2, r1
 80077ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	4413      	add	r3, r2
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d006      	beq.n	80077d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	3301      	adds	r3, #1
 80077cc:	61fb      	str	r3, [r7, #28]
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	2b0f      	cmp	r3, #15
 80077d2:	d9e9      	bls.n	80077a8 <prvInitialiseNewTask+0x64>
 80077d4:	e000      	b.n	80077d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80077d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077e0:	e003      	b.n	80077ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	2b37      	cmp	r3, #55	; 0x37
 80077ee:	d901      	bls.n	80077f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077f0:	2337      	movs	r3, #55	; 0x37
 80077f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007802:	2200      	movs	r2, #0
 8007804:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007808:	3304      	adds	r3, #4
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe ff64 	bl	80066d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007812:	3318      	adds	r3, #24
 8007814:	4618      	mov	r0, r3
 8007816:	f7fe ff5f 	bl	80066d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007828:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800782e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	2200      	movs	r2, #0
 8007834:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	68f9      	ldr	r1, [r7, #12]
 8007842:	69b8      	ldr	r0, [r7, #24]
 8007844:	f001 fa36 	bl	8008cb4 <pxPortInitialiseStack>
 8007848:	4602      	mov	r2, r0
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007858:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800785a:	bf00      	nop
 800785c:	3720      	adds	r7, #32
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800786c:	f001 fb52 	bl	8008f14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007870:	4b2d      	ldr	r3, [pc, #180]	; (8007928 <prvAddNewTaskToReadyList+0xc4>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3301      	adds	r3, #1
 8007876:	4a2c      	ldr	r2, [pc, #176]	; (8007928 <prvAddNewTaskToReadyList+0xc4>)
 8007878:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800787a:	4b2c      	ldr	r3, [pc, #176]	; (800792c <prvAddNewTaskToReadyList+0xc8>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d109      	bne.n	8007896 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007882:	4a2a      	ldr	r2, [pc, #168]	; (800792c <prvAddNewTaskToReadyList+0xc8>)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007888:	4b27      	ldr	r3, [pc, #156]	; (8007928 <prvAddNewTaskToReadyList+0xc4>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d110      	bne.n	80078b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007890:	f000 fc16 	bl	80080c0 <prvInitialiseTaskLists>
 8007894:	e00d      	b.n	80078b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007896:	4b26      	ldr	r3, [pc, #152]	; (8007930 <prvAddNewTaskToReadyList+0xcc>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d109      	bne.n	80078b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800789e:	4b23      	ldr	r3, [pc, #140]	; (800792c <prvAddNewTaskToReadyList+0xc8>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d802      	bhi.n	80078b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078ac:	4a1f      	ldr	r2, [pc, #124]	; (800792c <prvAddNewTaskToReadyList+0xc8>)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078b2:	4b20      	ldr	r3, [pc, #128]	; (8007934 <prvAddNewTaskToReadyList+0xd0>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3301      	adds	r3, #1
 80078b8:	4a1e      	ldr	r2, [pc, #120]	; (8007934 <prvAddNewTaskToReadyList+0xd0>)
 80078ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80078bc:	4b1d      	ldr	r3, [pc, #116]	; (8007934 <prvAddNewTaskToReadyList+0xd0>)
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c8:	4b1b      	ldr	r3, [pc, #108]	; (8007938 <prvAddNewTaskToReadyList+0xd4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d903      	bls.n	80078d8 <prvAddNewTaskToReadyList+0x74>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d4:	4a18      	ldr	r2, [pc, #96]	; (8007938 <prvAddNewTaskToReadyList+0xd4>)
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4a15      	ldr	r2, [pc, #84]	; (800793c <prvAddNewTaskToReadyList+0xd8>)
 80078e6:	441a      	add	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3304      	adds	r3, #4
 80078ec:	4619      	mov	r1, r3
 80078ee:	4610      	mov	r0, r2
 80078f0:	f7fe feff 	bl	80066f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80078f4:	f001 fb3e 	bl	8008f74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078f8:	4b0d      	ldr	r3, [pc, #52]	; (8007930 <prvAddNewTaskToReadyList+0xcc>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00e      	beq.n	800791e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007900:	4b0a      	ldr	r3, [pc, #40]	; (800792c <prvAddNewTaskToReadyList+0xc8>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790a:	429a      	cmp	r2, r3
 800790c:	d207      	bcs.n	800791e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800790e:	4b0c      	ldr	r3, [pc, #48]	; (8007940 <prvAddNewTaskToReadyList+0xdc>)
 8007910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800791e:	bf00      	nop
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	200015fc 	.word	0x200015fc
 800792c:	20001128 	.word	0x20001128
 8007930:	20001608 	.word	0x20001608
 8007934:	20001618 	.word	0x20001618
 8007938:	20001604 	.word	0x20001604
 800793c:	2000112c 	.word	0x2000112c
 8007940:	e000ed04 	.word	0xe000ed04

08007944 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d017      	beq.n	8007986 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007956:	4b13      	ldr	r3, [pc, #76]	; (80079a4 <vTaskDelay+0x60>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <vTaskDelay+0x30>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	60bb      	str	r3, [r7, #8]
}
 8007970:	bf00      	nop
 8007972:	e7fe      	b.n	8007972 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007974:	f000 f880 	bl	8007a78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007978:	2100      	movs	r1, #0
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fdf8 	bl	8008570 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007980:	f000 f888 	bl	8007a94 <xTaskResumeAll>
 8007984:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d107      	bne.n	800799c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800798c:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <vTaskDelay+0x64>)
 800798e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800799c:	bf00      	nop
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	20001624 	.word	0x20001624
 80079a8:	e000ed04 	.word	0xe000ed04

080079ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08a      	sub	sp, #40	; 0x28
 80079b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079b6:	2300      	movs	r3, #0
 80079b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079ba:	463a      	mov	r2, r7
 80079bc:	1d39      	adds	r1, r7, #4
 80079be:	f107 0308 	add.w	r3, r7, #8
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fe fe34 	bl	8006630 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	9202      	str	r2, [sp, #8]
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	2300      	movs	r3, #0
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	2300      	movs	r3, #0
 80079d8:	460a      	mov	r2, r1
 80079da:	4921      	ldr	r1, [pc, #132]	; (8007a60 <vTaskStartScheduler+0xb4>)
 80079dc:	4821      	ldr	r0, [pc, #132]	; (8007a64 <vTaskStartScheduler+0xb8>)
 80079de:	f7ff fe0f 	bl	8007600 <xTaskCreateStatic>
 80079e2:	4603      	mov	r3, r0
 80079e4:	4a20      	ldr	r2, [pc, #128]	; (8007a68 <vTaskStartScheduler+0xbc>)
 80079e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079e8:	4b1f      	ldr	r3, [pc, #124]	; (8007a68 <vTaskStartScheduler+0xbc>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80079f0:	2301      	movs	r3, #1
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	e001      	b.n	80079fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80079f6:	2300      	movs	r3, #0
 80079f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d102      	bne.n	8007a06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a00:	f000 fe0a 	bl	8008618 <xTimerCreateTimerTask>
 8007a04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d116      	bne.n	8007a3a <vTaskStartScheduler+0x8e>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	613b      	str	r3, [r7, #16]
}
 8007a1e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a20:	4b12      	ldr	r3, [pc, #72]	; (8007a6c <vTaskStartScheduler+0xc0>)
 8007a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a28:	4b11      	ldr	r3, [pc, #68]	; (8007a70 <vTaskStartScheduler+0xc4>)
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a2e:	4b11      	ldr	r3, [pc, #68]	; (8007a74 <vTaskStartScheduler+0xc8>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a34:	f001 f9cc 	bl	8008dd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a38:	e00e      	b.n	8007a58 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a40:	d10a      	bne.n	8007a58 <vTaskStartScheduler+0xac>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	60fb      	str	r3, [r7, #12]
}
 8007a54:	bf00      	nop
 8007a56:	e7fe      	b.n	8007a56 <vTaskStartScheduler+0xaa>
}
 8007a58:	bf00      	nop
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	0800a170 	.word	0x0800a170
 8007a64:	08008091 	.word	0x08008091
 8007a68:	20001620 	.word	0x20001620
 8007a6c:	2000161c 	.word	0x2000161c
 8007a70:	20001608 	.word	0x20001608
 8007a74:	20001600 	.word	0x20001600

08007a78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a7c:	4b04      	ldr	r3, [pc, #16]	; (8007a90 <vTaskSuspendAll+0x18>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3301      	adds	r3, #1
 8007a82:	4a03      	ldr	r2, [pc, #12]	; (8007a90 <vTaskSuspendAll+0x18>)
 8007a84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a86:	bf00      	nop
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	20001624 	.word	0x20001624

08007a94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007aa2:	4b42      	ldr	r3, [pc, #264]	; (8007bac <xTaskResumeAll+0x118>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <xTaskResumeAll+0x2c>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	603b      	str	r3, [r7, #0]
}
 8007abc:	bf00      	nop
 8007abe:	e7fe      	b.n	8007abe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ac0:	f001 fa28 	bl	8008f14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ac4:	4b39      	ldr	r3, [pc, #228]	; (8007bac <xTaskResumeAll+0x118>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	4a38      	ldr	r2, [pc, #224]	; (8007bac <xTaskResumeAll+0x118>)
 8007acc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ace:	4b37      	ldr	r3, [pc, #220]	; (8007bac <xTaskResumeAll+0x118>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d162      	bne.n	8007b9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ad6:	4b36      	ldr	r3, [pc, #216]	; (8007bb0 <xTaskResumeAll+0x11c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d05e      	beq.n	8007b9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ade:	e02f      	b.n	8007b40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ae0:	4b34      	ldr	r3, [pc, #208]	; (8007bb4 <xTaskResumeAll+0x120>)
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3318      	adds	r3, #24
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fe fe5d 	bl	80067ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3304      	adds	r3, #4
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fe58 	bl	80067ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b00:	4b2d      	ldr	r3, [pc, #180]	; (8007bb8 <xTaskResumeAll+0x124>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d903      	bls.n	8007b10 <xTaskResumeAll+0x7c>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	4a2a      	ldr	r2, [pc, #168]	; (8007bb8 <xTaskResumeAll+0x124>)
 8007b0e:	6013      	str	r3, [r2, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b14:	4613      	mov	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4a27      	ldr	r2, [pc, #156]	; (8007bbc <xTaskResumeAll+0x128>)
 8007b1e:	441a      	add	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3304      	adds	r3, #4
 8007b24:	4619      	mov	r1, r3
 8007b26:	4610      	mov	r0, r2
 8007b28:	f7fe fde3 	bl	80066f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b30:	4b23      	ldr	r3, [pc, #140]	; (8007bc0 <xTaskResumeAll+0x12c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d302      	bcc.n	8007b40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007b3a:	4b22      	ldr	r3, [pc, #136]	; (8007bc4 <xTaskResumeAll+0x130>)
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b40:	4b1c      	ldr	r3, [pc, #112]	; (8007bb4 <xTaskResumeAll+0x120>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1cb      	bne.n	8007ae0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b4e:	f000 fb55 	bl	80081fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b52:	4b1d      	ldr	r3, [pc, #116]	; (8007bc8 <xTaskResumeAll+0x134>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d010      	beq.n	8007b80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b5e:	f000 f847 	bl	8007bf0 <xTaskIncrementTick>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007b68:	4b16      	ldr	r3, [pc, #88]	; (8007bc4 <xTaskResumeAll+0x130>)
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1f1      	bne.n	8007b5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007b7a:	4b13      	ldr	r3, [pc, #76]	; (8007bc8 <xTaskResumeAll+0x134>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b80:	4b10      	ldr	r3, [pc, #64]	; (8007bc4 <xTaskResumeAll+0x130>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d009      	beq.n	8007b9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b8c:	4b0f      	ldr	r3, [pc, #60]	; (8007bcc <xTaskResumeAll+0x138>)
 8007b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b9c:	f001 f9ea 	bl	8008f74 <vPortExitCritical>

	return xAlreadyYielded;
 8007ba0:	68bb      	ldr	r3, [r7, #8]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20001624 	.word	0x20001624
 8007bb0:	200015fc 	.word	0x200015fc
 8007bb4:	200015bc 	.word	0x200015bc
 8007bb8:	20001604 	.word	0x20001604
 8007bbc:	2000112c 	.word	0x2000112c
 8007bc0:	20001128 	.word	0x20001128
 8007bc4:	20001610 	.word	0x20001610
 8007bc8:	2000160c 	.word	0x2000160c
 8007bcc:	e000ed04 	.word	0xe000ed04

08007bd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007bd6:	4b05      	ldr	r3, [pc, #20]	; (8007bec <xTaskGetTickCount+0x1c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007bdc:	687b      	ldr	r3, [r7, #4]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	20001600 	.word	0x20001600

08007bf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bfa:	4b4f      	ldr	r3, [pc, #316]	; (8007d38 <xTaskIncrementTick+0x148>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f040 808f 	bne.w	8007d22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c04:	4b4d      	ldr	r3, [pc, #308]	; (8007d3c <xTaskIncrementTick+0x14c>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c0c:	4a4b      	ldr	r2, [pc, #300]	; (8007d3c <xTaskIncrementTick+0x14c>)
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d120      	bne.n	8007c5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c18:	4b49      	ldr	r3, [pc, #292]	; (8007d40 <xTaskIncrementTick+0x150>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <xTaskIncrementTick+0x48>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	603b      	str	r3, [r7, #0]
}
 8007c34:	bf00      	nop
 8007c36:	e7fe      	b.n	8007c36 <xTaskIncrementTick+0x46>
 8007c38:	4b41      	ldr	r3, [pc, #260]	; (8007d40 <xTaskIncrementTick+0x150>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	60fb      	str	r3, [r7, #12]
 8007c3e:	4b41      	ldr	r3, [pc, #260]	; (8007d44 <xTaskIncrementTick+0x154>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a3f      	ldr	r2, [pc, #252]	; (8007d40 <xTaskIncrementTick+0x150>)
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	4a3f      	ldr	r2, [pc, #252]	; (8007d44 <xTaskIncrementTick+0x154>)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	4b3e      	ldr	r3, [pc, #248]	; (8007d48 <xTaskIncrementTick+0x158>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3301      	adds	r3, #1
 8007c52:	4a3d      	ldr	r2, [pc, #244]	; (8007d48 <xTaskIncrementTick+0x158>)
 8007c54:	6013      	str	r3, [r2, #0]
 8007c56:	f000 fad1 	bl	80081fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c5a:	4b3c      	ldr	r3, [pc, #240]	; (8007d4c <xTaskIncrementTick+0x15c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d349      	bcc.n	8007cf8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c64:	4b36      	ldr	r3, [pc, #216]	; (8007d40 <xTaskIncrementTick+0x150>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d104      	bne.n	8007c78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c6e:	4b37      	ldr	r3, [pc, #220]	; (8007d4c <xTaskIncrementTick+0x15c>)
 8007c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c74:	601a      	str	r2, [r3, #0]
					break;
 8007c76:	e03f      	b.n	8007cf8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c78:	4b31      	ldr	r3, [pc, #196]	; (8007d40 <xTaskIncrementTick+0x150>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d203      	bcs.n	8007c98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c90:	4a2e      	ldr	r2, [pc, #184]	; (8007d4c <xTaskIncrementTick+0x15c>)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c96:	e02f      	b.n	8007cf8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fe fd85 	bl	80067ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d004      	beq.n	8007cb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	3318      	adds	r3, #24
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fe fd7c 	bl	80067ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb8:	4b25      	ldr	r3, [pc, #148]	; (8007d50 <xTaskIncrementTick+0x160>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d903      	bls.n	8007cc8 <xTaskIncrementTick+0xd8>
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	4a22      	ldr	r2, [pc, #136]	; (8007d50 <xTaskIncrementTick+0x160>)
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ccc:	4613      	mov	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4a1f      	ldr	r2, [pc, #124]	; (8007d54 <xTaskIncrementTick+0x164>)
 8007cd6:	441a      	add	r2, r3
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	3304      	adds	r3, #4
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4610      	mov	r0, r2
 8007ce0:	f7fe fd07 	bl	80066f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce8:	4b1b      	ldr	r3, [pc, #108]	; (8007d58 <xTaskIncrementTick+0x168>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d3b8      	bcc.n	8007c64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cf6:	e7b5      	b.n	8007c64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007cf8:	4b17      	ldr	r3, [pc, #92]	; (8007d58 <xTaskIncrementTick+0x168>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfe:	4915      	ldr	r1, [pc, #84]	; (8007d54 <xTaskIncrementTick+0x164>)
 8007d00:	4613      	mov	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d901      	bls.n	8007d14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007d10:	2301      	movs	r3, #1
 8007d12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d14:	4b11      	ldr	r3, [pc, #68]	; (8007d5c <xTaskIncrementTick+0x16c>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d007      	beq.n	8007d2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	617b      	str	r3, [r7, #20]
 8007d20:	e004      	b.n	8007d2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d22:	4b0f      	ldr	r3, [pc, #60]	; (8007d60 <xTaskIncrementTick+0x170>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3301      	adds	r3, #1
 8007d28:	4a0d      	ldr	r2, [pc, #52]	; (8007d60 <xTaskIncrementTick+0x170>)
 8007d2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d2c:	697b      	ldr	r3, [r7, #20]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20001624 	.word	0x20001624
 8007d3c:	20001600 	.word	0x20001600
 8007d40:	200015b4 	.word	0x200015b4
 8007d44:	200015b8 	.word	0x200015b8
 8007d48:	20001614 	.word	0x20001614
 8007d4c:	2000161c 	.word	0x2000161c
 8007d50:	20001604 	.word	0x20001604
 8007d54:	2000112c 	.word	0x2000112c
 8007d58:	20001128 	.word	0x20001128
 8007d5c:	20001610 	.word	0x20001610
 8007d60:	2000160c 	.word	0x2000160c

08007d64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d6a:	4b28      	ldr	r3, [pc, #160]	; (8007e0c <vTaskSwitchContext+0xa8>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d72:	4b27      	ldr	r3, [pc, #156]	; (8007e10 <vTaskSwitchContext+0xac>)
 8007d74:	2201      	movs	r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d78:	e041      	b.n	8007dfe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007d7a:	4b25      	ldr	r3, [pc, #148]	; (8007e10 <vTaskSwitchContext+0xac>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d80:	4b24      	ldr	r3, [pc, #144]	; (8007e14 <vTaskSwitchContext+0xb0>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	e010      	b.n	8007daa <vTaskSwitchContext+0x46>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10a      	bne.n	8007da4 <vTaskSwitchContext+0x40>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	607b      	str	r3, [r7, #4]
}
 8007da0:	bf00      	nop
 8007da2:	e7fe      	b.n	8007da2 <vTaskSwitchContext+0x3e>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	491b      	ldr	r1, [pc, #108]	; (8007e18 <vTaskSwitchContext+0xb4>)
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4613      	mov	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	440b      	add	r3, r1
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0e4      	beq.n	8007d88 <vTaskSwitchContext+0x24>
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4a13      	ldr	r2, [pc, #76]	; (8007e18 <vTaskSwitchContext+0xb4>)
 8007dca:	4413      	add	r3, r2
 8007dcc:	60bb      	str	r3, [r7, #8]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	605a      	str	r2, [r3, #4]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	3308      	adds	r3, #8
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d104      	bne.n	8007dee <vTaskSwitchContext+0x8a>
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	685a      	ldr	r2, [r3, #4]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	605a      	str	r2, [r3, #4]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	4a09      	ldr	r2, [pc, #36]	; (8007e1c <vTaskSwitchContext+0xb8>)
 8007df6:	6013      	str	r3, [r2, #0]
 8007df8:	4a06      	ldr	r2, [pc, #24]	; (8007e14 <vTaskSwitchContext+0xb0>)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6013      	str	r3, [r2, #0]
}
 8007dfe:	bf00      	nop
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	20001624 	.word	0x20001624
 8007e10:	20001610 	.word	0x20001610
 8007e14:	20001604 	.word	0x20001604
 8007e18:	2000112c 	.word	0x2000112c
 8007e1c:	20001128 	.word	0x20001128

08007e20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10a      	bne.n	8007e46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	60fb      	str	r3, [r7, #12]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e46:	4b07      	ldr	r3, [pc, #28]	; (8007e64 <vTaskPlaceOnEventList+0x44>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3318      	adds	r3, #24
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7fe fc73 	bl	800673a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e54:	2101      	movs	r1, #1
 8007e56:	6838      	ldr	r0, [r7, #0]
 8007e58:	f000 fb8a 	bl	8008570 <prvAddCurrentTaskToDelayedList>
}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	20001128 	.word	0x20001128

08007e68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10a      	bne.n	8007e90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	617b      	str	r3, [r7, #20]
}
 8007e8c:	bf00      	nop
 8007e8e:	e7fe      	b.n	8007e8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e90:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <vTaskPlaceOnEventListRestricted+0x54>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	3318      	adds	r3, #24
 8007e96:	4619      	mov	r1, r3
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7fe fc2a 	bl	80066f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ea8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	68b8      	ldr	r0, [r7, #8]
 8007eae:	f000 fb5f 	bl	8008570 <prvAddCurrentTaskToDelayedList>
	}
 8007eb2:	bf00      	nop
 8007eb4:	3718      	adds	r7, #24
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	20001128 	.word	0x20001128

08007ec0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10a      	bne.n	8007eec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	60fb      	str	r3, [r7, #12]
}
 8007ee8:	bf00      	nop
 8007eea:	e7fe      	b.n	8007eea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	3318      	adds	r3, #24
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fe fc5b 	bl	80067ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ef6:	4b1e      	ldr	r3, [pc, #120]	; (8007f70 <xTaskRemoveFromEventList+0xb0>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d11d      	bne.n	8007f3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	3304      	adds	r3, #4
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fc52 	bl	80067ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f0c:	4b19      	ldr	r3, [pc, #100]	; (8007f74 <xTaskRemoveFromEventList+0xb4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d903      	bls.n	8007f1c <xTaskRemoveFromEventList+0x5c>
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f18:	4a16      	ldr	r2, [pc, #88]	; (8007f74 <xTaskRemoveFromEventList+0xb4>)
 8007f1a:	6013      	str	r3, [r2, #0]
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f20:	4613      	mov	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4a13      	ldr	r2, [pc, #76]	; (8007f78 <xTaskRemoveFromEventList+0xb8>)
 8007f2a:	441a      	add	r2, r3
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	f7fe fbdd 	bl	80066f2 <vListInsertEnd>
 8007f38:	e005      	b.n	8007f46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	3318      	adds	r3, #24
 8007f3e:	4619      	mov	r1, r3
 8007f40:	480e      	ldr	r0, [pc, #56]	; (8007f7c <xTaskRemoveFromEventList+0xbc>)
 8007f42:	f7fe fbd6 	bl	80066f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f4a:	4b0d      	ldr	r3, [pc, #52]	; (8007f80 <xTaskRemoveFromEventList+0xc0>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d905      	bls.n	8007f60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f54:	2301      	movs	r3, #1
 8007f56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f58:	4b0a      	ldr	r3, [pc, #40]	; (8007f84 <xTaskRemoveFromEventList+0xc4>)
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	e001      	b.n	8007f64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007f60:	2300      	movs	r3, #0
 8007f62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007f64:	697b      	ldr	r3, [r7, #20]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20001624 	.word	0x20001624
 8007f74:	20001604 	.word	0x20001604
 8007f78:	2000112c 	.word	0x2000112c
 8007f7c:	200015bc 	.word	0x200015bc
 8007f80:	20001128 	.word	0x20001128
 8007f84:	20001610 	.word	0x20001610

08007f88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f90:	4b06      	ldr	r3, [pc, #24]	; (8007fac <vTaskInternalSetTimeOutState+0x24>)
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f98:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <vTaskInternalSetTimeOutState+0x28>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	605a      	str	r2, [r3, #4]
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	20001614 	.word	0x20001614
 8007fb0:	20001600 	.word	0x20001600

08007fb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10a      	bne.n	8007fda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	613b      	str	r3, [r7, #16]
}
 8007fd6:	bf00      	nop
 8007fd8:	e7fe      	b.n	8007fd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	60fb      	str	r3, [r7, #12]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ff6:	f000 ff8d 	bl	8008f14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ffa:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <xTaskCheckForTimeOut+0xbc>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008012:	d102      	bne.n	800801a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008014:	2300      	movs	r3, #0
 8008016:	61fb      	str	r3, [r7, #28]
 8008018:	e023      	b.n	8008062 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4b15      	ldr	r3, [pc, #84]	; (8008074 <xTaskCheckForTimeOut+0xc0>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	429a      	cmp	r2, r3
 8008024:	d007      	beq.n	8008036 <xTaskCheckForTimeOut+0x82>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	429a      	cmp	r2, r3
 800802e:	d302      	bcc.n	8008036 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008030:	2301      	movs	r3, #1
 8008032:	61fb      	str	r3, [r7, #28]
 8008034:	e015      	b.n	8008062 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	429a      	cmp	r2, r3
 800803e:	d20b      	bcs.n	8008058 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	1ad2      	subs	r2, r2, r3
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff ff9b 	bl	8007f88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008052:	2300      	movs	r3, #0
 8008054:	61fb      	str	r3, [r7, #28]
 8008056:	e004      	b.n	8008062 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800805e:	2301      	movs	r3, #1
 8008060:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008062:	f000 ff87 	bl	8008f74 <vPortExitCritical>

	return xReturn;
 8008066:	69fb      	ldr	r3, [r7, #28]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3720      	adds	r7, #32
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20001600 	.word	0x20001600
 8008074:	20001614 	.word	0x20001614

08008078 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008078:	b480      	push	{r7}
 800807a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800807c:	4b03      	ldr	r3, [pc, #12]	; (800808c <vTaskMissedYield+0x14>)
 800807e:	2201      	movs	r2, #1
 8008080:	601a      	str	r2, [r3, #0]
}
 8008082:	bf00      	nop
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	20001610 	.word	0x20001610

08008090 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008098:	f000 f852 	bl	8008140 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800809c:	4b06      	ldr	r3, [pc, #24]	; (80080b8 <prvIdleTask+0x28>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d9f9      	bls.n	8008098 <prvIdleTask+0x8>
			{
				taskYIELD();
 80080a4:	4b05      	ldr	r3, [pc, #20]	; (80080bc <prvIdleTask+0x2c>)
 80080a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80080b4:	e7f0      	b.n	8008098 <prvIdleTask+0x8>
 80080b6:	bf00      	nop
 80080b8:	2000112c 	.word	0x2000112c
 80080bc:	e000ed04 	.word	0xe000ed04

080080c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080c6:	2300      	movs	r3, #0
 80080c8:	607b      	str	r3, [r7, #4]
 80080ca:	e00c      	b.n	80080e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	4613      	mov	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4a12      	ldr	r2, [pc, #72]	; (8008120 <prvInitialiseTaskLists+0x60>)
 80080d8:	4413      	add	r3, r2
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe fadc 	bl	8006698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3301      	adds	r3, #1
 80080e4:	607b      	str	r3, [r7, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b37      	cmp	r3, #55	; 0x37
 80080ea:	d9ef      	bls.n	80080cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80080ec:	480d      	ldr	r0, [pc, #52]	; (8008124 <prvInitialiseTaskLists+0x64>)
 80080ee:	f7fe fad3 	bl	8006698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080f2:	480d      	ldr	r0, [pc, #52]	; (8008128 <prvInitialiseTaskLists+0x68>)
 80080f4:	f7fe fad0 	bl	8006698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80080f8:	480c      	ldr	r0, [pc, #48]	; (800812c <prvInitialiseTaskLists+0x6c>)
 80080fa:	f7fe facd 	bl	8006698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80080fe:	480c      	ldr	r0, [pc, #48]	; (8008130 <prvInitialiseTaskLists+0x70>)
 8008100:	f7fe faca 	bl	8006698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008104:	480b      	ldr	r0, [pc, #44]	; (8008134 <prvInitialiseTaskLists+0x74>)
 8008106:	f7fe fac7 	bl	8006698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800810a:	4b0b      	ldr	r3, [pc, #44]	; (8008138 <prvInitialiseTaskLists+0x78>)
 800810c:	4a05      	ldr	r2, [pc, #20]	; (8008124 <prvInitialiseTaskLists+0x64>)
 800810e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008110:	4b0a      	ldr	r3, [pc, #40]	; (800813c <prvInitialiseTaskLists+0x7c>)
 8008112:	4a05      	ldr	r2, [pc, #20]	; (8008128 <prvInitialiseTaskLists+0x68>)
 8008114:	601a      	str	r2, [r3, #0]
}
 8008116:	bf00      	nop
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	2000112c 	.word	0x2000112c
 8008124:	2000158c 	.word	0x2000158c
 8008128:	200015a0 	.word	0x200015a0
 800812c:	200015bc 	.word	0x200015bc
 8008130:	200015d0 	.word	0x200015d0
 8008134:	200015e8 	.word	0x200015e8
 8008138:	200015b4 	.word	0x200015b4
 800813c:	200015b8 	.word	0x200015b8

08008140 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008146:	e019      	b.n	800817c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008148:	f000 fee4 	bl	8008f14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800814c:	4b10      	ldr	r3, [pc, #64]	; (8008190 <prvCheckTasksWaitingTermination+0x50>)
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	3304      	adds	r3, #4
 8008158:	4618      	mov	r0, r3
 800815a:	f7fe fb27 	bl	80067ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800815e:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <prvCheckTasksWaitingTermination+0x54>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3b01      	subs	r3, #1
 8008164:	4a0b      	ldr	r2, [pc, #44]	; (8008194 <prvCheckTasksWaitingTermination+0x54>)
 8008166:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008168:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <prvCheckTasksWaitingTermination+0x58>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3b01      	subs	r3, #1
 800816e:	4a0a      	ldr	r2, [pc, #40]	; (8008198 <prvCheckTasksWaitingTermination+0x58>)
 8008170:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008172:	f000 feff 	bl	8008f74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f810 	bl	800819c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800817c:	4b06      	ldr	r3, [pc, #24]	; (8008198 <prvCheckTasksWaitingTermination+0x58>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e1      	bne.n	8008148 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	200015d0 	.word	0x200015d0
 8008194:	200015fc 	.word	0x200015fc
 8008198:	200015e4 	.word	0x200015e4

0800819c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d108      	bne.n	80081c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b2:	4618      	mov	r0, r3
 80081b4:	f001 f89c 	bl	80092f0 <vPortFree>
				vPortFree( pxTCB );
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 f899 	bl	80092f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80081be:	e018      	b.n	80081f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d103      	bne.n	80081d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 f890 	bl	80092f0 <vPortFree>
	}
 80081d0:	e00f      	b.n	80081f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d00a      	beq.n	80081f2 <prvDeleteTCB+0x56>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	60fb      	str	r3, [r7, #12]
}
 80081ee:	bf00      	nop
 80081f0:	e7fe      	b.n	80081f0 <prvDeleteTCB+0x54>
	}
 80081f2:	bf00      	nop
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
	...

080081fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008202:	4b0c      	ldr	r3, [pc, #48]	; (8008234 <prvResetNextTaskUnblockTime+0x38>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d104      	bne.n	8008216 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800820c:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <prvResetNextTaskUnblockTime+0x3c>)
 800820e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008212:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008214:	e008      	b.n	8008228 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008216:	4b07      	ldr	r3, [pc, #28]	; (8008234 <prvResetNextTaskUnblockTime+0x38>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	4a04      	ldr	r2, [pc, #16]	; (8008238 <prvResetNextTaskUnblockTime+0x3c>)
 8008226:	6013      	str	r3, [r2, #0]
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	200015b4 	.word	0x200015b4
 8008238:	2000161c 	.word	0x2000161c

0800823c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008242:	4b05      	ldr	r3, [pc, #20]	; (8008258 <xTaskGetCurrentTaskHandle+0x1c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008248:	687b      	ldr	r3, [r7, #4]
	}
 800824a:	4618      	mov	r0, r3
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	20001128 	.word	0x20001128

0800825c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008262:	4b0b      	ldr	r3, [pc, #44]	; (8008290 <xTaskGetSchedulerState+0x34>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d102      	bne.n	8008270 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800826a:	2301      	movs	r3, #1
 800826c:	607b      	str	r3, [r7, #4]
 800826e:	e008      	b.n	8008282 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008270:	4b08      	ldr	r3, [pc, #32]	; (8008294 <xTaskGetSchedulerState+0x38>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d102      	bne.n	800827e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008278:	2302      	movs	r3, #2
 800827a:	607b      	str	r3, [r7, #4]
 800827c:	e001      	b.n	8008282 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800827e:	2300      	movs	r3, #0
 8008280:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008282:	687b      	ldr	r3, [r7, #4]
	}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	20001608 	.word	0x20001608
 8008294:	20001624 	.word	0x20001624

08008298 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80082a4:	2300      	movs	r3, #0
 80082a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d051      	beq.n	8008352 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b2:	4b2a      	ldr	r3, [pc, #168]	; (800835c <xTaskPriorityInherit+0xc4>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d241      	bcs.n	8008340 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	db06      	blt.n	80082d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082c4:	4b25      	ldr	r3, [pc, #148]	; (800835c <xTaskPriorityInherit+0xc4>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	6959      	ldr	r1, [r3, #20]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4a1f      	ldr	r2, [pc, #124]	; (8008360 <xTaskPriorityInherit+0xc8>)
 80082e4:	4413      	add	r3, r2
 80082e6:	4299      	cmp	r1, r3
 80082e8:	d122      	bne.n	8008330 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	3304      	adds	r3, #4
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fa5c 	bl	80067ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80082f4:	4b19      	ldr	r3, [pc, #100]	; (800835c <xTaskPriorityInherit+0xc4>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008302:	4b18      	ldr	r3, [pc, #96]	; (8008364 <xTaskPriorityInherit+0xcc>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d903      	bls.n	8008312 <xTaskPriorityInherit+0x7a>
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830e:	4a15      	ldr	r2, [pc, #84]	; (8008364 <xTaskPriorityInherit+0xcc>)
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008316:	4613      	mov	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4a10      	ldr	r2, [pc, #64]	; (8008360 <xTaskPriorityInherit+0xc8>)
 8008320:	441a      	add	r2, r3
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	3304      	adds	r3, #4
 8008326:	4619      	mov	r1, r3
 8008328:	4610      	mov	r0, r2
 800832a:	f7fe f9e2 	bl	80066f2 <vListInsertEnd>
 800832e:	e004      	b.n	800833a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008330:	4b0a      	ldr	r3, [pc, #40]	; (800835c <xTaskPriorityInherit+0xc4>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800833a:	2301      	movs	r3, #1
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	e008      	b.n	8008352 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008344:	4b05      	ldr	r3, [pc, #20]	; (800835c <xTaskPriorityInherit+0xc4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834a:	429a      	cmp	r2, r3
 800834c:	d201      	bcs.n	8008352 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800834e:	2301      	movs	r3, #1
 8008350:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008352:	68fb      	ldr	r3, [r7, #12]
	}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	20001128 	.word	0x20001128
 8008360:	2000112c 	.word	0x2000112c
 8008364:	20001604 	.word	0x20001604

08008368 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008374:	2300      	movs	r3, #0
 8008376:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d056      	beq.n	800842c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800837e:	4b2e      	ldr	r3, [pc, #184]	; (8008438 <xTaskPriorityDisinherit+0xd0>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	429a      	cmp	r2, r3
 8008386:	d00a      	beq.n	800839e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	60fb      	str	r3, [r7, #12]
}
 800839a:	bf00      	nop
 800839c:	e7fe      	b.n	800839c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10a      	bne.n	80083bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	60bb      	str	r3, [r7, #8]
}
 80083b8:	bf00      	nop
 80083ba:	e7fe      	b.n	80083ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c0:	1e5a      	subs	r2, r3, #1
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d02c      	beq.n	800842c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d128      	bne.n	800842c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	3304      	adds	r3, #4
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe f9e4 	bl	80067ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083fc:	4b0f      	ldr	r3, [pc, #60]	; (800843c <xTaskPriorityDisinherit+0xd4>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	429a      	cmp	r2, r3
 8008402:	d903      	bls.n	800840c <xTaskPriorityDisinherit+0xa4>
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	4a0c      	ldr	r2, [pc, #48]	; (800843c <xTaskPriorityDisinherit+0xd4>)
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4a09      	ldr	r2, [pc, #36]	; (8008440 <xTaskPriorityDisinherit+0xd8>)
 800841a:	441a      	add	r2, r3
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	3304      	adds	r3, #4
 8008420:	4619      	mov	r1, r3
 8008422:	4610      	mov	r0, r2
 8008424:	f7fe f965 	bl	80066f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008428:	2301      	movs	r3, #1
 800842a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800842c:	697b      	ldr	r3, [r7, #20]
	}
 800842e:	4618      	mov	r0, r3
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20001128 	.word	0x20001128
 800843c:	20001604 	.word	0x20001604
 8008440:	2000112c 	.word	0x2000112c

08008444 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008444:	b580      	push	{r7, lr}
 8008446:	b088      	sub	sp, #32
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008452:	2301      	movs	r3, #1
 8008454:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d06a      	beq.n	8008532 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10a      	bne.n	800847a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	60fb      	str	r3, [r7, #12]
}
 8008476:	bf00      	nop
 8008478:	e7fe      	b.n	8008478 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	429a      	cmp	r2, r3
 8008482:	d902      	bls.n	800848a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	61fb      	str	r3, [r7, #28]
 8008488:	e002      	b.n	8008490 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800848e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008494:	69fa      	ldr	r2, [r7, #28]
 8008496:	429a      	cmp	r2, r3
 8008498:	d04b      	beq.n	8008532 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d146      	bne.n	8008532 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80084a4:	4b25      	ldr	r3, [pc, #148]	; (800853c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d10a      	bne.n	80084c4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	60bb      	str	r3, [r7, #8]
}
 80084c0:	bf00      	nop
 80084c2:	e7fe      	b.n	80084c2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	69fa      	ldr	r2, [r7, #28]
 80084ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	db04      	blt.n	80084e2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	6959      	ldr	r1, [r3, #20]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	4613      	mov	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4a13      	ldr	r2, [pc, #76]	; (8008540 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80084f2:	4413      	add	r3, r2
 80084f4:	4299      	cmp	r1, r3
 80084f6:	d11c      	bne.n	8008532 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	3304      	adds	r3, #4
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fe f955 	bl	80067ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008506:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	429a      	cmp	r2, r3
 800850c:	d903      	bls.n	8008516 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008512:	4a0c      	ldr	r2, [pc, #48]	; (8008544 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008514:	6013      	str	r3, [r2, #0]
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851a:	4613      	mov	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4a07      	ldr	r2, [pc, #28]	; (8008540 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008524:	441a      	add	r2, r3
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	3304      	adds	r3, #4
 800852a:	4619      	mov	r1, r3
 800852c:	4610      	mov	r0, r2
 800852e:	f7fe f8e0 	bl	80066f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008532:	bf00      	nop
 8008534:	3720      	adds	r7, #32
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20001128 	.word	0x20001128
 8008540:	2000112c 	.word	0x2000112c
 8008544:	20001604 	.word	0x20001604

08008548 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800854c:	4b07      	ldr	r3, [pc, #28]	; (800856c <pvTaskIncrementMutexHeldCount+0x24>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d004      	beq.n	800855e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008554:	4b05      	ldr	r3, [pc, #20]	; (800856c <pvTaskIncrementMutexHeldCount+0x24>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800855a:	3201      	adds	r2, #1
 800855c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800855e:	4b03      	ldr	r3, [pc, #12]	; (800856c <pvTaskIncrementMutexHeldCount+0x24>)
 8008560:	681b      	ldr	r3, [r3, #0]
	}
 8008562:	4618      	mov	r0, r3
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	20001128 	.word	0x20001128

08008570 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800857a:	4b21      	ldr	r3, [pc, #132]	; (8008600 <prvAddCurrentTaskToDelayedList+0x90>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008580:	4b20      	ldr	r3, [pc, #128]	; (8008604 <prvAddCurrentTaskToDelayedList+0x94>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3304      	adds	r3, #4
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe f910 	bl	80067ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008592:	d10a      	bne.n	80085aa <prvAddCurrentTaskToDelayedList+0x3a>
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d007      	beq.n	80085aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800859a:	4b1a      	ldr	r3, [pc, #104]	; (8008604 <prvAddCurrentTaskToDelayedList+0x94>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3304      	adds	r3, #4
 80085a0:	4619      	mov	r1, r3
 80085a2:	4819      	ldr	r0, [pc, #100]	; (8008608 <prvAddCurrentTaskToDelayedList+0x98>)
 80085a4:	f7fe f8a5 	bl	80066f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085a8:	e026      	b.n	80085f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4413      	add	r3, r2
 80085b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085b2:	4b14      	ldr	r3, [pc, #80]	; (8008604 <prvAddCurrentTaskToDelayedList+0x94>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d209      	bcs.n	80085d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085c2:	4b12      	ldr	r3, [pc, #72]	; (800860c <prvAddCurrentTaskToDelayedList+0x9c>)
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	4b0f      	ldr	r3, [pc, #60]	; (8008604 <prvAddCurrentTaskToDelayedList+0x94>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3304      	adds	r3, #4
 80085cc:	4619      	mov	r1, r3
 80085ce:	4610      	mov	r0, r2
 80085d0:	f7fe f8b3 	bl	800673a <vListInsert>
}
 80085d4:	e010      	b.n	80085f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085d6:	4b0e      	ldr	r3, [pc, #56]	; (8008610 <prvAddCurrentTaskToDelayedList+0xa0>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	4b0a      	ldr	r3, [pc, #40]	; (8008604 <prvAddCurrentTaskToDelayedList+0x94>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3304      	adds	r3, #4
 80085e0:	4619      	mov	r1, r3
 80085e2:	4610      	mov	r0, r2
 80085e4:	f7fe f8a9 	bl	800673a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085e8:	4b0a      	ldr	r3, [pc, #40]	; (8008614 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d202      	bcs.n	80085f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80085f2:	4a08      	ldr	r2, [pc, #32]	; (8008614 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	6013      	str	r3, [r2, #0]
}
 80085f8:	bf00      	nop
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	20001600 	.word	0x20001600
 8008604:	20001128 	.word	0x20001128
 8008608:	200015e8 	.word	0x200015e8
 800860c:	200015b8 	.word	0x200015b8
 8008610:	200015b4 	.word	0x200015b4
 8008614:	2000161c 	.word	0x2000161c

08008618 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b08a      	sub	sp, #40	; 0x28
 800861c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800861e:	2300      	movs	r3, #0
 8008620:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008622:	f000 fb07 	bl	8008c34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008626:	4b1c      	ldr	r3, [pc, #112]	; (8008698 <xTimerCreateTimerTask+0x80>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d021      	beq.n	8008672 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008632:	2300      	movs	r3, #0
 8008634:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008636:	1d3a      	adds	r2, r7, #4
 8008638:	f107 0108 	add.w	r1, r7, #8
 800863c:	f107 030c 	add.w	r3, r7, #12
 8008640:	4618      	mov	r0, r3
 8008642:	f7fe f80f 	bl	8006664 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	9202      	str	r2, [sp, #8]
 800864e:	9301      	str	r3, [sp, #4]
 8008650:	2302      	movs	r3, #2
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	2300      	movs	r3, #0
 8008656:	460a      	mov	r2, r1
 8008658:	4910      	ldr	r1, [pc, #64]	; (800869c <xTimerCreateTimerTask+0x84>)
 800865a:	4811      	ldr	r0, [pc, #68]	; (80086a0 <xTimerCreateTimerTask+0x88>)
 800865c:	f7fe ffd0 	bl	8007600 <xTaskCreateStatic>
 8008660:	4603      	mov	r3, r0
 8008662:	4a10      	ldr	r2, [pc, #64]	; (80086a4 <xTimerCreateTimerTask+0x8c>)
 8008664:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008666:	4b0f      	ldr	r3, [pc, #60]	; (80086a4 <xTimerCreateTimerTask+0x8c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800866e:	2301      	movs	r3, #1
 8008670:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10a      	bne.n	800868e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	613b      	str	r3, [r7, #16]
}
 800868a:	bf00      	nop
 800868c:	e7fe      	b.n	800868c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800868e:	697b      	ldr	r3, [r7, #20]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	20001658 	.word	0x20001658
 800869c:	0800a178 	.word	0x0800a178
 80086a0:	080087dd 	.word	0x080087dd
 80086a4:	2000165c 	.word	0x2000165c

080086a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b08a      	sub	sp, #40	; 0x28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80086b6:	2300      	movs	r3, #0
 80086b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10a      	bne.n	80086d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	623b      	str	r3, [r7, #32]
}
 80086d2:	bf00      	nop
 80086d4:	e7fe      	b.n	80086d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80086d6:	4b1a      	ldr	r3, [pc, #104]	; (8008740 <xTimerGenericCommand+0x98>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d02a      	beq.n	8008734 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2b05      	cmp	r3, #5
 80086ee:	dc18      	bgt.n	8008722 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80086f0:	f7ff fdb4 	bl	800825c <xTaskGetSchedulerState>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d109      	bne.n	800870e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80086fa:	4b11      	ldr	r3, [pc, #68]	; (8008740 <xTimerGenericCommand+0x98>)
 80086fc:	6818      	ldr	r0, [r3, #0]
 80086fe:	f107 0110 	add.w	r1, r7, #16
 8008702:	2300      	movs	r3, #0
 8008704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008706:	f7fe fa6f 	bl	8006be8 <xQueueGenericSend>
 800870a:	6278      	str	r0, [r7, #36]	; 0x24
 800870c:	e012      	b.n	8008734 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800870e:	4b0c      	ldr	r3, [pc, #48]	; (8008740 <xTimerGenericCommand+0x98>)
 8008710:	6818      	ldr	r0, [r3, #0]
 8008712:	f107 0110 	add.w	r1, r7, #16
 8008716:	2300      	movs	r3, #0
 8008718:	2200      	movs	r2, #0
 800871a:	f7fe fa65 	bl	8006be8 <xQueueGenericSend>
 800871e:	6278      	str	r0, [r7, #36]	; 0x24
 8008720:	e008      	b.n	8008734 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008722:	4b07      	ldr	r3, [pc, #28]	; (8008740 <xTimerGenericCommand+0x98>)
 8008724:	6818      	ldr	r0, [r3, #0]
 8008726:	f107 0110 	add.w	r1, r7, #16
 800872a:	2300      	movs	r3, #0
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	f7fe fb59 	bl	8006de4 <xQueueGenericSendFromISR>
 8008732:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008736:	4618      	mov	r0, r3
 8008738:	3728      	adds	r7, #40	; 0x28
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	20001658 	.word	0x20001658

08008744 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af02      	add	r7, sp, #8
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800874e:	4b22      	ldr	r3, [pc, #136]	; (80087d8 <prvProcessExpiredTimer+0x94>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	3304      	adds	r3, #4
 800875c:	4618      	mov	r0, r3
 800875e:	f7fe f825 	bl	80067ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008768:	f003 0304 	and.w	r3, r3, #4
 800876c:	2b00      	cmp	r3, #0
 800876e:	d022      	beq.n	80087b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	699a      	ldr	r2, [r3, #24]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	18d1      	adds	r1, r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	6978      	ldr	r0, [r7, #20]
 800877e:	f000 f8d1 	bl	8008924 <prvInsertTimerInActiveList>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d01f      	beq.n	80087c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008788:	2300      	movs	r3, #0
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	2300      	movs	r3, #0
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	2100      	movs	r1, #0
 8008792:	6978      	ldr	r0, [r7, #20]
 8008794:	f7ff ff88 	bl	80086a8 <xTimerGenericCommand>
 8008798:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d113      	bne.n	80087c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	60fb      	str	r3, [r7, #12]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087bc:	f023 0301 	bic.w	r3, r3, #1
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	6978      	ldr	r0, [r7, #20]
 80087ce:	4798      	blx	r3
}
 80087d0:	bf00      	nop
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	20001650 	.word	0x20001650

080087dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087e4:	f107 0308 	add.w	r3, r7, #8
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 f857 	bl	800889c <prvGetNextExpireTime>
 80087ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	4619      	mov	r1, r3
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 f803 	bl	8008800 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80087fa:	f000 f8d5 	bl	80089a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087fe:	e7f1      	b.n	80087e4 <prvTimerTask+0x8>

08008800 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800880a:	f7ff f935 	bl	8007a78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800880e:	f107 0308 	add.w	r3, r7, #8
 8008812:	4618      	mov	r0, r3
 8008814:	f000 f866 	bl	80088e4 <prvSampleTimeNow>
 8008818:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d130      	bne.n	8008882 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10a      	bne.n	800883c <prvProcessTimerOrBlockTask+0x3c>
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	429a      	cmp	r2, r3
 800882c:	d806      	bhi.n	800883c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800882e:	f7ff f931 	bl	8007a94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008832:	68f9      	ldr	r1, [r7, #12]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7ff ff85 	bl	8008744 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800883a:	e024      	b.n	8008886 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d008      	beq.n	8008854 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008842:	4b13      	ldr	r3, [pc, #76]	; (8008890 <prvProcessTimerOrBlockTask+0x90>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <prvProcessTimerOrBlockTask+0x50>
 800884c:	2301      	movs	r3, #1
 800884e:	e000      	b.n	8008852 <prvProcessTimerOrBlockTask+0x52>
 8008850:	2300      	movs	r3, #0
 8008852:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008854:	4b0f      	ldr	r3, [pc, #60]	; (8008894 <prvProcessTimerOrBlockTask+0x94>)
 8008856:	6818      	ldr	r0, [r3, #0]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	4619      	mov	r1, r3
 8008862:	f7fe fe99 	bl	8007598 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008866:	f7ff f915 	bl	8007a94 <xTaskResumeAll>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008870:	4b09      	ldr	r3, [pc, #36]	; (8008898 <prvProcessTimerOrBlockTask+0x98>)
 8008872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	f3bf 8f6f 	isb	sy
}
 8008880:	e001      	b.n	8008886 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008882:	f7ff f907 	bl	8007a94 <xTaskResumeAll>
}
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	20001654 	.word	0x20001654
 8008894:	20001658 	.word	0x20001658
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80088a4:	4b0e      	ldr	r3, [pc, #56]	; (80088e0 <prvGetNextExpireTime+0x44>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <prvGetNextExpireTime+0x16>
 80088ae:	2201      	movs	r2, #1
 80088b0:	e000      	b.n	80088b4 <prvGetNextExpireTime+0x18>
 80088b2:	2200      	movs	r2, #0
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d105      	bne.n	80088cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088c0:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <prvGetNextExpireTime+0x44>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	e001      	b.n	80088d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80088d0:	68fb      	ldr	r3, [r7, #12]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	20001650 	.word	0x20001650

080088e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80088ec:	f7ff f970 	bl	8007bd0 <xTaskGetTickCount>
 80088f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80088f2:	4b0b      	ldr	r3, [pc, #44]	; (8008920 <prvSampleTimeNow+0x3c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d205      	bcs.n	8008908 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80088fc:	f000 f936 	bl	8008b6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	e002      	b.n	800890e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800890e:	4a04      	ldr	r2, [pc, #16]	; (8008920 <prvSampleTimeNow+0x3c>)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008914:	68fb      	ldr	r3, [r7, #12]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20001660 	.word	0x20001660

08008924 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008932:	2300      	movs	r3, #0
 8008934:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	429a      	cmp	r2, r3
 8008948:	d812      	bhi.n	8008970 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	1ad2      	subs	r2, r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	429a      	cmp	r2, r3
 8008956:	d302      	bcc.n	800895e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008958:	2301      	movs	r3, #1
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	e01b      	b.n	8008996 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800895e:	4b10      	ldr	r3, [pc, #64]	; (80089a0 <prvInsertTimerInActiveList+0x7c>)
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3304      	adds	r3, #4
 8008966:	4619      	mov	r1, r3
 8008968:	4610      	mov	r0, r2
 800896a:	f7fd fee6 	bl	800673a <vListInsert>
 800896e:	e012      	b.n	8008996 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	429a      	cmp	r2, r3
 8008976:	d206      	bcs.n	8008986 <prvInsertTimerInActiveList+0x62>
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	429a      	cmp	r2, r3
 800897e:	d302      	bcc.n	8008986 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008980:	2301      	movs	r3, #1
 8008982:	617b      	str	r3, [r7, #20]
 8008984:	e007      	b.n	8008996 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008986:	4b07      	ldr	r3, [pc, #28]	; (80089a4 <prvInsertTimerInActiveList+0x80>)
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3304      	adds	r3, #4
 800898e:	4619      	mov	r1, r3
 8008990:	4610      	mov	r0, r2
 8008992:	f7fd fed2 	bl	800673a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008996:	697b      	ldr	r3, [r7, #20]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3718      	adds	r7, #24
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	20001654 	.word	0x20001654
 80089a4:	20001650 	.word	0x20001650

080089a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08e      	sub	sp, #56	; 0x38
 80089ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089ae:	e0ca      	b.n	8008b46 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	da18      	bge.n	80089e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80089b6:	1d3b      	adds	r3, r7, #4
 80089b8:	3304      	adds	r3, #4
 80089ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80089bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10a      	bne.n	80089d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	61fb      	str	r3, [r7, #28]
}
 80089d4:	bf00      	nop
 80089d6:	e7fe      	b.n	80089d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80089d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089de:	6850      	ldr	r0, [r2, #4]
 80089e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089e2:	6892      	ldr	r2, [r2, #8]
 80089e4:	4611      	mov	r1, r2
 80089e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f2c0 80ab 	blt.w	8008b46 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d004      	beq.n	8008a06 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	3304      	adds	r3, #4
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fd fed3 	bl	80067ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a06:	463b      	mov	r3, r7
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7ff ff6b 	bl	80088e4 <prvSampleTimeNow>
 8008a0e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b09      	cmp	r3, #9
 8008a14:	f200 8096 	bhi.w	8008b44 <prvProcessReceivedCommands+0x19c>
 8008a18:	a201      	add	r2, pc, #4	; (adr r2, 8008a20 <prvProcessReceivedCommands+0x78>)
 8008a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1e:	bf00      	nop
 8008a20:	08008a49 	.word	0x08008a49
 8008a24:	08008a49 	.word	0x08008a49
 8008a28:	08008a49 	.word	0x08008a49
 8008a2c:	08008abd 	.word	0x08008abd
 8008a30:	08008ad1 	.word	0x08008ad1
 8008a34:	08008b1b 	.word	0x08008b1b
 8008a38:	08008a49 	.word	0x08008a49
 8008a3c:	08008a49 	.word	0x08008a49
 8008a40:	08008abd 	.word	0x08008abd
 8008a44:	08008ad1 	.word	0x08008ad1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a4e:	f043 0301 	orr.w	r3, r3, #1
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	18d1      	adds	r1, r2, r3
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a68:	f7ff ff5c 	bl	8008924 <prvInsertTimerInActiveList>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d069      	beq.n	8008b46 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a80:	f003 0304 	and.w	r3, r3, #4
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d05e      	beq.n	8008b46 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	441a      	add	r2, r3
 8008a90:	2300      	movs	r3, #0
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	2300      	movs	r3, #0
 8008a96:	2100      	movs	r1, #0
 8008a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a9a:	f7ff fe05 	bl	80086a8 <xTimerGenericCommand>
 8008a9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d14f      	bne.n	8008b46 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	61bb      	str	r3, [r7, #24]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ac2:	f023 0301 	bic.w	r3, r3, #1
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008ace:	e03a      	b.n	8008b46 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ad6:	f043 0301 	orr.w	r3, r3, #1
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	617b      	str	r3, [r7, #20]
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b08:	699a      	ldr	r2, [r3, #24]
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	18d1      	adds	r1, r2, r3
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b14:	f7ff ff06 	bl	8008924 <prvInsertTimerInActiveList>
					break;
 8008b18:	e015      	b.n	8008b46 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d103      	bne.n	8008b30 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b2a:	f000 fbe1 	bl	80092f0 <vPortFree>
 8008b2e:	e00a      	b.n	8008b46 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b36:	f023 0301 	bic.w	r3, r3, #1
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b42:	e000      	b.n	8008b46 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008b44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b46:	4b08      	ldr	r3, [pc, #32]	; (8008b68 <prvProcessReceivedCommands+0x1c0>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	1d39      	adds	r1, r7, #4
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fe f9e4 	bl	8006f1c <xQueueReceive>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f47f af2a 	bne.w	80089b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008b5c:	bf00      	nop
 8008b5e:	bf00      	nop
 8008b60:	3730      	adds	r7, #48	; 0x30
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20001658 	.word	0x20001658

08008b6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b72:	e048      	b.n	8008c06 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b74:	4b2d      	ldr	r3, [pc, #180]	; (8008c2c <prvSwitchTimerLists+0xc0>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b7e:	4b2b      	ldr	r3, [pc, #172]	; (8008c2c <prvSwitchTimerLists+0xc0>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fd fe0d 	bl	80067ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ba0:	f003 0304 	and.w	r3, r3, #4
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d02e      	beq.n	8008c06 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	4413      	add	r3, r2
 8008bb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d90e      	bls.n	8008bd8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008bc6:	4b19      	ldr	r3, [pc, #100]	; (8008c2c <prvSwitchTimerLists+0xc0>)
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3304      	adds	r3, #4
 8008bce:	4619      	mov	r1, r3
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	f7fd fdb2 	bl	800673a <vListInsert>
 8008bd6:	e016      	b.n	8008c06 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bd8:	2300      	movs	r3, #0
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	2100      	movs	r1, #0
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f7ff fd60 	bl	80086a8 <xTimerGenericCommand>
 8008be8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10a      	bne.n	8008c06 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	603b      	str	r3, [r7, #0]
}
 8008c02:	bf00      	nop
 8008c04:	e7fe      	b.n	8008c04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c06:	4b09      	ldr	r3, [pc, #36]	; (8008c2c <prvSwitchTimerLists+0xc0>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1b1      	bne.n	8008b74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c10:	4b06      	ldr	r3, [pc, #24]	; (8008c2c <prvSwitchTimerLists+0xc0>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c16:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <prvSwitchTimerLists+0xc4>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a04      	ldr	r2, [pc, #16]	; (8008c2c <prvSwitchTimerLists+0xc0>)
 8008c1c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c1e:	4a04      	ldr	r2, [pc, #16]	; (8008c30 <prvSwitchTimerLists+0xc4>)
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	6013      	str	r3, [r2, #0]
}
 8008c24:	bf00      	nop
 8008c26:	3718      	adds	r7, #24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	20001650 	.word	0x20001650
 8008c30:	20001654 	.word	0x20001654

08008c34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c3a:	f000 f96b 	bl	8008f14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c3e:	4b15      	ldr	r3, [pc, #84]	; (8008c94 <prvCheckForValidListAndQueue+0x60>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d120      	bne.n	8008c88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c46:	4814      	ldr	r0, [pc, #80]	; (8008c98 <prvCheckForValidListAndQueue+0x64>)
 8008c48:	f7fd fd26 	bl	8006698 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c4c:	4813      	ldr	r0, [pc, #76]	; (8008c9c <prvCheckForValidListAndQueue+0x68>)
 8008c4e:	f7fd fd23 	bl	8006698 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c52:	4b13      	ldr	r3, [pc, #76]	; (8008ca0 <prvCheckForValidListAndQueue+0x6c>)
 8008c54:	4a10      	ldr	r2, [pc, #64]	; (8008c98 <prvCheckForValidListAndQueue+0x64>)
 8008c56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c58:	4b12      	ldr	r3, [pc, #72]	; (8008ca4 <prvCheckForValidListAndQueue+0x70>)
 8008c5a:	4a10      	ldr	r2, [pc, #64]	; (8008c9c <prvCheckForValidListAndQueue+0x68>)
 8008c5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c5e:	2300      	movs	r3, #0
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	4b11      	ldr	r3, [pc, #68]	; (8008ca8 <prvCheckForValidListAndQueue+0x74>)
 8008c64:	4a11      	ldr	r2, [pc, #68]	; (8008cac <prvCheckForValidListAndQueue+0x78>)
 8008c66:	2110      	movs	r1, #16
 8008c68:	200a      	movs	r0, #10
 8008c6a:	f7fd fe31 	bl	80068d0 <xQueueGenericCreateStatic>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	4a08      	ldr	r2, [pc, #32]	; (8008c94 <prvCheckForValidListAndQueue+0x60>)
 8008c72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c74:	4b07      	ldr	r3, [pc, #28]	; (8008c94 <prvCheckForValidListAndQueue+0x60>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d005      	beq.n	8008c88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c7c:	4b05      	ldr	r3, [pc, #20]	; (8008c94 <prvCheckForValidListAndQueue+0x60>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	490b      	ldr	r1, [pc, #44]	; (8008cb0 <prvCheckForValidListAndQueue+0x7c>)
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe fc5e 	bl	8007544 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c88:	f000 f974 	bl	8008f74 <vPortExitCritical>
}
 8008c8c:	bf00      	nop
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	20001658 	.word	0x20001658
 8008c98:	20001628 	.word	0x20001628
 8008c9c:	2000163c 	.word	0x2000163c
 8008ca0:	20001650 	.word	0x20001650
 8008ca4:	20001654 	.word	0x20001654
 8008ca8:	20001704 	.word	0x20001704
 8008cac:	20001664 	.word	0x20001664
 8008cb0:	0800a180 	.word	0x0800a180

08008cb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3b04      	subs	r3, #4
 8008cc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	3b04      	subs	r3, #4
 8008cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f023 0201 	bic.w	r2, r3, #1
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3b04      	subs	r3, #4
 8008ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ce4:	4a0c      	ldr	r2, [pc, #48]	; (8008d18 <pxPortInitialiseStack+0x64>)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	3b14      	subs	r3, #20
 8008cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	3b04      	subs	r3, #4
 8008cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f06f 0202 	mvn.w	r2, #2
 8008d02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3b20      	subs	r3, #32
 8008d08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	08008d1d 	.word	0x08008d1d

08008d1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d22:	2300      	movs	r3, #0
 8008d24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d26:	4b12      	ldr	r3, [pc, #72]	; (8008d70 <prvTaskExitError+0x54>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d2e:	d00a      	beq.n	8008d46 <prvTaskExitError+0x2a>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	60fb      	str	r3, [r7, #12]
}
 8008d42:	bf00      	nop
 8008d44:	e7fe      	b.n	8008d44 <prvTaskExitError+0x28>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	60bb      	str	r3, [r7, #8]
}
 8008d58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d5a:	bf00      	nop
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0fc      	beq.n	8008d5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d62:	bf00      	nop
 8008d64:	bf00      	nop
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	2000005c 	.word	0x2000005c
	...

08008d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d80:	4b07      	ldr	r3, [pc, #28]	; (8008da0 <pxCurrentTCBConst2>)
 8008d82:	6819      	ldr	r1, [r3, #0]
 8008d84:	6808      	ldr	r0, [r1, #0]
 8008d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8a:	f380 8809 	msr	PSP, r0
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f04f 0000 	mov.w	r0, #0
 8008d96:	f380 8811 	msr	BASEPRI, r0
 8008d9a:	4770      	bx	lr
 8008d9c:	f3af 8000 	nop.w

08008da0 <pxCurrentTCBConst2>:
 8008da0:	20001128 	.word	0x20001128
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop

08008da8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008da8:	4808      	ldr	r0, [pc, #32]	; (8008dcc <prvPortStartFirstTask+0x24>)
 8008daa:	6800      	ldr	r0, [r0, #0]
 8008dac:	6800      	ldr	r0, [r0, #0]
 8008dae:	f380 8808 	msr	MSP, r0
 8008db2:	f04f 0000 	mov.w	r0, #0
 8008db6:	f380 8814 	msr	CONTROL, r0
 8008dba:	b662      	cpsie	i
 8008dbc:	b661      	cpsie	f
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	df00      	svc	0
 8008dc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008dca:	bf00      	nop
 8008dcc:	e000ed08 	.word	0xe000ed08

08008dd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008dd6:	4b46      	ldr	r3, [pc, #280]	; (8008ef0 <xPortStartScheduler+0x120>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a46      	ldr	r2, [pc, #280]	; (8008ef4 <xPortStartScheduler+0x124>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d10a      	bne.n	8008df6 <xPortStartScheduler+0x26>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	613b      	str	r3, [r7, #16]
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008df6:	4b3e      	ldr	r3, [pc, #248]	; (8008ef0 <xPortStartScheduler+0x120>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a3f      	ldr	r2, [pc, #252]	; (8008ef8 <xPortStartScheduler+0x128>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d10a      	bne.n	8008e16 <xPortStartScheduler+0x46>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e04:	f383 8811 	msr	BASEPRI, r3
 8008e08:	f3bf 8f6f 	isb	sy
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	60fb      	str	r3, [r7, #12]
}
 8008e12:	bf00      	nop
 8008e14:	e7fe      	b.n	8008e14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e16:	4b39      	ldr	r3, [pc, #228]	; (8008efc <xPortStartScheduler+0x12c>)
 8008e18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	22ff      	movs	r2, #255	; 0xff
 8008e26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e30:	78fb      	ldrb	r3, [r7, #3]
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	4b31      	ldr	r3, [pc, #196]	; (8008f00 <xPortStartScheduler+0x130>)
 8008e3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e3e:	4b31      	ldr	r3, [pc, #196]	; (8008f04 <xPortStartScheduler+0x134>)
 8008e40:	2207      	movs	r2, #7
 8008e42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e44:	e009      	b.n	8008e5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008e46:	4b2f      	ldr	r3, [pc, #188]	; (8008f04 <xPortStartScheduler+0x134>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	4a2d      	ldr	r2, [pc, #180]	; (8008f04 <xPortStartScheduler+0x134>)
 8008e4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e50:	78fb      	ldrb	r3, [r7, #3]
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	005b      	lsls	r3, r3, #1
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e5a:	78fb      	ldrb	r3, [r7, #3]
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e62:	2b80      	cmp	r3, #128	; 0x80
 8008e64:	d0ef      	beq.n	8008e46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e66:	4b27      	ldr	r3, [pc, #156]	; (8008f04 <xPortStartScheduler+0x134>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f1c3 0307 	rsb	r3, r3, #7
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	d00a      	beq.n	8008e88 <xPortStartScheduler+0xb8>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	60bb      	str	r3, [r7, #8]
}
 8008e84:	bf00      	nop
 8008e86:	e7fe      	b.n	8008e86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e88:	4b1e      	ldr	r3, [pc, #120]	; (8008f04 <xPortStartScheduler+0x134>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	021b      	lsls	r3, r3, #8
 8008e8e:	4a1d      	ldr	r2, [pc, #116]	; (8008f04 <xPortStartScheduler+0x134>)
 8008e90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e92:	4b1c      	ldr	r3, [pc, #112]	; (8008f04 <xPortStartScheduler+0x134>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e9a:	4a1a      	ldr	r2, [pc, #104]	; (8008f04 <xPortStartScheduler+0x134>)
 8008e9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ea6:	4b18      	ldr	r3, [pc, #96]	; (8008f08 <xPortStartScheduler+0x138>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a17      	ldr	r2, [pc, #92]	; (8008f08 <xPortStartScheduler+0x138>)
 8008eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008eb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008eb2:	4b15      	ldr	r3, [pc, #84]	; (8008f08 <xPortStartScheduler+0x138>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a14      	ldr	r2, [pc, #80]	; (8008f08 <xPortStartScheduler+0x138>)
 8008eb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ebc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ebe:	f000 f8dd 	bl	800907c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ec2:	4b12      	ldr	r3, [pc, #72]	; (8008f0c <xPortStartScheduler+0x13c>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ec8:	f000 f8fc 	bl	80090c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ecc:	4b10      	ldr	r3, [pc, #64]	; (8008f10 <xPortStartScheduler+0x140>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a0f      	ldr	r2, [pc, #60]	; (8008f10 <xPortStartScheduler+0x140>)
 8008ed2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ed6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ed8:	f7ff ff66 	bl	8008da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008edc:	f7fe ff42 	bl	8007d64 <vTaskSwitchContext>
	prvTaskExitError();
 8008ee0:	f7ff ff1c 	bl	8008d1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	e000ed00 	.word	0xe000ed00
 8008ef4:	410fc271 	.word	0x410fc271
 8008ef8:	410fc270 	.word	0x410fc270
 8008efc:	e000e400 	.word	0xe000e400
 8008f00:	20001754 	.word	0x20001754
 8008f04:	20001758 	.word	0x20001758
 8008f08:	e000ed20 	.word	0xe000ed20
 8008f0c:	2000005c 	.word	0x2000005c
 8008f10:	e000ef34 	.word	0xe000ef34

08008f14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	607b      	str	r3, [r7, #4]
}
 8008f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f2e:	4b0f      	ldr	r3, [pc, #60]	; (8008f6c <vPortEnterCritical+0x58>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3301      	adds	r3, #1
 8008f34:	4a0d      	ldr	r2, [pc, #52]	; (8008f6c <vPortEnterCritical+0x58>)
 8008f36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f38:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <vPortEnterCritical+0x58>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d10f      	bne.n	8008f60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f40:	4b0b      	ldr	r3, [pc, #44]	; (8008f70 <vPortEnterCritical+0x5c>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00a      	beq.n	8008f60 <vPortEnterCritical+0x4c>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	603b      	str	r3, [r7, #0]
}
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <vPortEnterCritical+0x4a>
	}
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	2000005c 	.word	0x2000005c
 8008f70:	e000ed04 	.word	0xe000ed04

08008f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f7a:	4b12      	ldr	r3, [pc, #72]	; (8008fc4 <vPortExitCritical+0x50>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10a      	bne.n	8008f98 <vPortExitCritical+0x24>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	607b      	str	r3, [r7, #4]
}
 8008f94:	bf00      	nop
 8008f96:	e7fe      	b.n	8008f96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008f98:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <vPortExitCritical+0x50>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	4a09      	ldr	r2, [pc, #36]	; (8008fc4 <vPortExitCritical+0x50>)
 8008fa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fa2:	4b08      	ldr	r3, [pc, #32]	; (8008fc4 <vPortExitCritical+0x50>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d105      	bne.n	8008fb6 <vPortExitCritical+0x42>
 8008faa:	2300      	movs	r3, #0
 8008fac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	f383 8811 	msr	BASEPRI, r3
}
 8008fb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fb6:	bf00      	nop
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	2000005c 	.word	0x2000005c
	...

08008fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fd0:	f3ef 8009 	mrs	r0, PSP
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	4b15      	ldr	r3, [pc, #84]	; (8009030 <pxCurrentTCBConst>)
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	f01e 0f10 	tst.w	lr, #16
 8008fe0:	bf08      	it	eq
 8008fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fea:	6010      	str	r0, [r2, #0]
 8008fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ff4:	f380 8811 	msr	BASEPRI, r0
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	f3bf 8f6f 	isb	sy
 8009000:	f7fe feb0 	bl	8007d64 <vTaskSwitchContext>
 8009004:	f04f 0000 	mov.w	r0, #0
 8009008:	f380 8811 	msr	BASEPRI, r0
 800900c:	bc09      	pop	{r0, r3}
 800900e:	6819      	ldr	r1, [r3, #0]
 8009010:	6808      	ldr	r0, [r1, #0]
 8009012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009016:	f01e 0f10 	tst.w	lr, #16
 800901a:	bf08      	it	eq
 800901c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009020:	f380 8809 	msr	PSP, r0
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	f3af 8000 	nop.w

08009030 <pxCurrentTCBConst>:
 8009030:	20001128 	.word	0x20001128
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009034:	bf00      	nop
 8009036:	bf00      	nop

08009038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
	__asm volatile
 800903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	607b      	str	r3, [r7, #4]
}
 8009050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009052:	f7fe fdcd 	bl	8007bf0 <xTaskIncrementTick>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d003      	beq.n	8009064 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800905c:	4b06      	ldr	r3, [pc, #24]	; (8009078 <xPortSysTickHandler+0x40>)
 800905e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	2300      	movs	r3, #0
 8009066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	f383 8811 	msr	BASEPRI, r3
}
 800906e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009070:	bf00      	nop
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	e000ed04 	.word	0xe000ed04

0800907c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800907c:	b480      	push	{r7}
 800907e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009080:	4b0b      	ldr	r3, [pc, #44]	; (80090b0 <vPortSetupTimerInterrupt+0x34>)
 8009082:	2200      	movs	r2, #0
 8009084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009086:	4b0b      	ldr	r3, [pc, #44]	; (80090b4 <vPortSetupTimerInterrupt+0x38>)
 8009088:	2200      	movs	r2, #0
 800908a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800908c:	4b0a      	ldr	r3, [pc, #40]	; (80090b8 <vPortSetupTimerInterrupt+0x3c>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a0a      	ldr	r2, [pc, #40]	; (80090bc <vPortSetupTimerInterrupt+0x40>)
 8009092:	fba2 2303 	umull	r2, r3, r2, r3
 8009096:	099b      	lsrs	r3, r3, #6
 8009098:	4a09      	ldr	r2, [pc, #36]	; (80090c0 <vPortSetupTimerInterrupt+0x44>)
 800909a:	3b01      	subs	r3, #1
 800909c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800909e:	4b04      	ldr	r3, [pc, #16]	; (80090b0 <vPortSetupTimerInterrupt+0x34>)
 80090a0:	2207      	movs	r2, #7
 80090a2:	601a      	str	r2, [r3, #0]
}
 80090a4:	bf00      	nop
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	e000e010 	.word	0xe000e010
 80090b4:	e000e018 	.word	0xe000e018
 80090b8:	20000050 	.word	0x20000050
 80090bc:	10624dd3 	.word	0x10624dd3
 80090c0:	e000e014 	.word	0xe000e014

080090c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80090d4 <vPortEnableVFP+0x10>
 80090c8:	6801      	ldr	r1, [r0, #0]
 80090ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80090ce:	6001      	str	r1, [r0, #0]
 80090d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090d2:	bf00      	nop
 80090d4:	e000ed88 	.word	0xe000ed88

080090d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090de:	f3ef 8305 	mrs	r3, IPSR
 80090e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2b0f      	cmp	r3, #15
 80090e8:	d914      	bls.n	8009114 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090ea:	4a17      	ldr	r2, [pc, #92]	; (8009148 <vPortValidateInterruptPriority+0x70>)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	4413      	add	r3, r2
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090f4:	4b15      	ldr	r3, [pc, #84]	; (800914c <vPortValidateInterruptPriority+0x74>)
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	7afa      	ldrb	r2, [r7, #11]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d20a      	bcs.n	8009114 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	607b      	str	r3, [r7, #4]
}
 8009110:	bf00      	nop
 8009112:	e7fe      	b.n	8009112 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009114:	4b0e      	ldr	r3, [pc, #56]	; (8009150 <vPortValidateInterruptPriority+0x78>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800911c:	4b0d      	ldr	r3, [pc, #52]	; (8009154 <vPortValidateInterruptPriority+0x7c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	429a      	cmp	r2, r3
 8009122:	d90a      	bls.n	800913a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	603b      	str	r3, [r7, #0]
}
 8009136:	bf00      	nop
 8009138:	e7fe      	b.n	8009138 <vPortValidateInterruptPriority+0x60>
	}
 800913a:	bf00      	nop
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	e000e3f0 	.word	0xe000e3f0
 800914c:	20001754 	.word	0x20001754
 8009150:	e000ed0c 	.word	0xe000ed0c
 8009154:	20001758 	.word	0x20001758

08009158 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b08a      	sub	sp, #40	; 0x28
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009160:	2300      	movs	r3, #0
 8009162:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009164:	f7fe fc88 	bl	8007a78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009168:	4b5b      	ldr	r3, [pc, #364]	; (80092d8 <pvPortMalloc+0x180>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009170:	f000 f920 	bl	80093b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009174:	4b59      	ldr	r3, [pc, #356]	; (80092dc <pvPortMalloc+0x184>)
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4013      	ands	r3, r2
 800917c:	2b00      	cmp	r3, #0
 800917e:	f040 8093 	bne.w	80092a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d01d      	beq.n	80091c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009188:	2208      	movs	r2, #8
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4413      	add	r3, r2
 800918e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f003 0307 	and.w	r3, r3, #7
 8009196:	2b00      	cmp	r3, #0
 8009198:	d014      	beq.n	80091c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f023 0307 	bic.w	r3, r3, #7
 80091a0:	3308      	adds	r3, #8
 80091a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f003 0307 	and.w	r3, r3, #7
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00a      	beq.n	80091c4 <pvPortMalloc+0x6c>
	__asm volatile
 80091ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	617b      	str	r3, [r7, #20]
}
 80091c0:	bf00      	nop
 80091c2:	e7fe      	b.n	80091c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d06e      	beq.n	80092a8 <pvPortMalloc+0x150>
 80091ca:	4b45      	ldr	r3, [pc, #276]	; (80092e0 <pvPortMalloc+0x188>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d869      	bhi.n	80092a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091d4:	4b43      	ldr	r3, [pc, #268]	; (80092e4 <pvPortMalloc+0x18c>)
 80091d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091d8:	4b42      	ldr	r3, [pc, #264]	; (80092e4 <pvPortMalloc+0x18c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091de:	e004      	b.n	80091ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d903      	bls.n	80091fc <pvPortMalloc+0xa4>
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1f1      	bne.n	80091e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091fc:	4b36      	ldr	r3, [pc, #216]	; (80092d8 <pvPortMalloc+0x180>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009202:	429a      	cmp	r2, r3
 8009204:	d050      	beq.n	80092a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2208      	movs	r2, #8
 800920c:	4413      	add	r3, r2
 800920e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	1ad2      	subs	r2, r2, r3
 8009220:	2308      	movs	r3, #8
 8009222:	005b      	lsls	r3, r3, #1
 8009224:	429a      	cmp	r2, r3
 8009226:	d91f      	bls.n	8009268 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4413      	add	r3, r2
 800922e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	f003 0307 	and.w	r3, r3, #7
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <pvPortMalloc+0xf8>
	__asm volatile
 800923a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923e:	f383 8811 	msr	BASEPRI, r3
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	613b      	str	r3, [r7, #16]
}
 800924c:	bf00      	nop
 800924e:	e7fe      	b.n	800924e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	1ad2      	subs	r2, r2, r3
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009262:	69b8      	ldr	r0, [r7, #24]
 8009264:	f000 f908 	bl	8009478 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009268:	4b1d      	ldr	r3, [pc, #116]	; (80092e0 <pvPortMalloc+0x188>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	4a1b      	ldr	r2, [pc, #108]	; (80092e0 <pvPortMalloc+0x188>)
 8009274:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009276:	4b1a      	ldr	r3, [pc, #104]	; (80092e0 <pvPortMalloc+0x188>)
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	4b1b      	ldr	r3, [pc, #108]	; (80092e8 <pvPortMalloc+0x190>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	429a      	cmp	r2, r3
 8009280:	d203      	bcs.n	800928a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009282:	4b17      	ldr	r3, [pc, #92]	; (80092e0 <pvPortMalloc+0x188>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a18      	ldr	r2, [pc, #96]	; (80092e8 <pvPortMalloc+0x190>)
 8009288:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	4b13      	ldr	r3, [pc, #76]	; (80092dc <pvPortMalloc+0x184>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	431a      	orrs	r2, r3
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800929e:	4b13      	ldr	r3, [pc, #76]	; (80092ec <pvPortMalloc+0x194>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	3301      	adds	r3, #1
 80092a4:	4a11      	ldr	r2, [pc, #68]	; (80092ec <pvPortMalloc+0x194>)
 80092a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80092a8:	f7fe fbf4 	bl	8007a94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00a      	beq.n	80092cc <pvPortMalloc+0x174>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	60fb      	str	r3, [r7, #12]
}
 80092c8:	bf00      	nop
 80092ca:	e7fe      	b.n	80092ca <pvPortMalloc+0x172>
	return pvReturn;
 80092cc:	69fb      	ldr	r3, [r7, #28]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3728      	adds	r7, #40	; 0x28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	2000713c 	.word	0x2000713c
 80092dc:	20007150 	.word	0x20007150
 80092e0:	20007140 	.word	0x20007140
 80092e4:	20007134 	.word	0x20007134
 80092e8:	20007144 	.word	0x20007144
 80092ec:	20007148 	.word	0x20007148

080092f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d04d      	beq.n	800939e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009302:	2308      	movs	r3, #8
 8009304:	425b      	negs	r3, r3
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	4413      	add	r3, r2
 800930a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	4b24      	ldr	r3, [pc, #144]	; (80093a8 <vPortFree+0xb8>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4013      	ands	r3, r2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10a      	bne.n	8009334 <vPortFree+0x44>
	__asm volatile
 800931e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	60fb      	str	r3, [r7, #12]
}
 8009330:	bf00      	nop
 8009332:	e7fe      	b.n	8009332 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00a      	beq.n	8009352 <vPortFree+0x62>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	60bb      	str	r3, [r7, #8]
}
 800934e:	bf00      	nop
 8009350:	e7fe      	b.n	8009350 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	4b14      	ldr	r3, [pc, #80]	; (80093a8 <vPortFree+0xb8>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4013      	ands	r3, r2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d01e      	beq.n	800939e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d11a      	bne.n	800939e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	4b0e      	ldr	r3, [pc, #56]	; (80093a8 <vPortFree+0xb8>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	43db      	mvns	r3, r3
 8009372:	401a      	ands	r2, r3
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009378:	f7fe fb7e 	bl	8007a78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	4b0a      	ldr	r3, [pc, #40]	; (80093ac <vPortFree+0xbc>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4413      	add	r3, r2
 8009386:	4a09      	ldr	r2, [pc, #36]	; (80093ac <vPortFree+0xbc>)
 8009388:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800938a:	6938      	ldr	r0, [r7, #16]
 800938c:	f000 f874 	bl	8009478 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009390:	4b07      	ldr	r3, [pc, #28]	; (80093b0 <vPortFree+0xc0>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3301      	adds	r3, #1
 8009396:	4a06      	ldr	r2, [pc, #24]	; (80093b0 <vPortFree+0xc0>)
 8009398:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800939a:	f7fe fb7b 	bl	8007a94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800939e:	bf00      	nop
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	20007150 	.word	0x20007150
 80093ac:	20007140 	.word	0x20007140
 80093b0:	2000714c 	.word	0x2000714c

080093b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093ba:	f645 13d8 	movw	r3, #23000	; 0x59d8
 80093be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093c0:	4b27      	ldr	r3, [pc, #156]	; (8009460 <prvHeapInit+0xac>)
 80093c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f003 0307 	and.w	r3, r3, #7
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00c      	beq.n	80093e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	3307      	adds	r3, #7
 80093d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f023 0307 	bic.w	r3, r3, #7
 80093da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	4a1f      	ldr	r2, [pc, #124]	; (8009460 <prvHeapInit+0xac>)
 80093e4:	4413      	add	r3, r2
 80093e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093ec:	4a1d      	ldr	r2, [pc, #116]	; (8009464 <prvHeapInit+0xb0>)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093f2:	4b1c      	ldr	r3, [pc, #112]	; (8009464 <prvHeapInit+0xb0>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	4413      	add	r3, r2
 80093fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009400:	2208      	movs	r2, #8
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	1a9b      	subs	r3, r3, r2
 8009406:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 0307 	bic.w	r3, r3, #7
 800940e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4a15      	ldr	r2, [pc, #84]	; (8009468 <prvHeapInit+0xb4>)
 8009414:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009416:	4b14      	ldr	r3, [pc, #80]	; (8009468 <prvHeapInit+0xb4>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2200      	movs	r2, #0
 800941c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800941e:	4b12      	ldr	r3, [pc, #72]	; (8009468 <prvHeapInit+0xb4>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2200      	movs	r2, #0
 8009424:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	1ad2      	subs	r2, r2, r3
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009434:	4b0c      	ldr	r3, [pc, #48]	; (8009468 <prvHeapInit+0xb4>)
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	4a0a      	ldr	r2, [pc, #40]	; (800946c <prvHeapInit+0xb8>)
 8009442:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	4a09      	ldr	r2, [pc, #36]	; (8009470 <prvHeapInit+0xbc>)
 800944a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800944c:	4b09      	ldr	r3, [pc, #36]	; (8009474 <prvHeapInit+0xc0>)
 800944e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009452:	601a      	str	r2, [r3, #0]
}
 8009454:	bf00      	nop
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	2000175c 	.word	0x2000175c
 8009464:	20007134 	.word	0x20007134
 8009468:	2000713c 	.word	0x2000713c
 800946c:	20007144 	.word	0x20007144
 8009470:	20007140 	.word	0x20007140
 8009474:	20007150 	.word	0x20007150

08009478 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009480:	4b28      	ldr	r3, [pc, #160]	; (8009524 <prvInsertBlockIntoFreeList+0xac>)
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	e002      	b.n	800948c <prvInsertBlockIntoFreeList+0x14>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	60fb      	str	r3, [r7, #12]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	429a      	cmp	r2, r3
 8009494:	d8f7      	bhi.n	8009486 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	4413      	add	r3, r2
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d108      	bne.n	80094ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	441a      	add	r2, r3
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	441a      	add	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d118      	bne.n	8009500 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	4b15      	ldr	r3, [pc, #84]	; (8009528 <prvInsertBlockIntoFreeList+0xb0>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d00d      	beq.n	80094f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685a      	ldr	r2, [r3, #4]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	441a      	add	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	e008      	b.n	8009508 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094f6:	4b0c      	ldr	r3, [pc, #48]	; (8009528 <prvInsertBlockIntoFreeList+0xb0>)
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	e003      	b.n	8009508 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	429a      	cmp	r2, r3
 800950e:	d002      	beq.n	8009516 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009516:	bf00      	nop
 8009518:	3714      	adds	r7, #20
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	20007134 	.word	0x20007134
 8009528:	2000713c 	.word	0x2000713c

0800952c <malloc>:
 800952c:	4b02      	ldr	r3, [pc, #8]	; (8009538 <malloc+0xc>)
 800952e:	4601      	mov	r1, r0
 8009530:	6818      	ldr	r0, [r3, #0]
 8009532:	f000 b823 	b.w	800957c <_malloc_r>
 8009536:	bf00      	nop
 8009538:	200000ac 	.word	0x200000ac

0800953c <sbrk_aligned>:
 800953c:	b570      	push	{r4, r5, r6, lr}
 800953e:	4e0e      	ldr	r6, [pc, #56]	; (8009578 <sbrk_aligned+0x3c>)
 8009540:	460c      	mov	r4, r1
 8009542:	6831      	ldr	r1, [r6, #0]
 8009544:	4605      	mov	r5, r0
 8009546:	b911      	cbnz	r1, 800954e <sbrk_aligned+0x12>
 8009548:	f000 f8cc 	bl	80096e4 <_sbrk_r>
 800954c:	6030      	str	r0, [r6, #0]
 800954e:	4621      	mov	r1, r4
 8009550:	4628      	mov	r0, r5
 8009552:	f000 f8c7 	bl	80096e4 <_sbrk_r>
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	d00a      	beq.n	8009570 <sbrk_aligned+0x34>
 800955a:	1cc4      	adds	r4, r0, #3
 800955c:	f024 0403 	bic.w	r4, r4, #3
 8009560:	42a0      	cmp	r0, r4
 8009562:	d007      	beq.n	8009574 <sbrk_aligned+0x38>
 8009564:	1a21      	subs	r1, r4, r0
 8009566:	4628      	mov	r0, r5
 8009568:	f000 f8bc 	bl	80096e4 <_sbrk_r>
 800956c:	3001      	adds	r0, #1
 800956e:	d101      	bne.n	8009574 <sbrk_aligned+0x38>
 8009570:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009574:	4620      	mov	r0, r4
 8009576:	bd70      	pop	{r4, r5, r6, pc}
 8009578:	20007158 	.word	0x20007158

0800957c <_malloc_r>:
 800957c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009580:	1ccd      	adds	r5, r1, #3
 8009582:	f025 0503 	bic.w	r5, r5, #3
 8009586:	3508      	adds	r5, #8
 8009588:	2d0c      	cmp	r5, #12
 800958a:	bf38      	it	cc
 800958c:	250c      	movcc	r5, #12
 800958e:	2d00      	cmp	r5, #0
 8009590:	4607      	mov	r7, r0
 8009592:	db01      	blt.n	8009598 <_malloc_r+0x1c>
 8009594:	42a9      	cmp	r1, r5
 8009596:	d905      	bls.n	80095a4 <_malloc_r+0x28>
 8009598:	230c      	movs	r3, #12
 800959a:	603b      	str	r3, [r7, #0]
 800959c:	2600      	movs	r6, #0
 800959e:	4630      	mov	r0, r6
 80095a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009678 <_malloc_r+0xfc>
 80095a8:	f000 f868 	bl	800967c <__malloc_lock>
 80095ac:	f8d8 3000 	ldr.w	r3, [r8]
 80095b0:	461c      	mov	r4, r3
 80095b2:	bb5c      	cbnz	r4, 800960c <_malloc_r+0x90>
 80095b4:	4629      	mov	r1, r5
 80095b6:	4638      	mov	r0, r7
 80095b8:	f7ff ffc0 	bl	800953c <sbrk_aligned>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	4604      	mov	r4, r0
 80095c0:	d155      	bne.n	800966e <_malloc_r+0xf2>
 80095c2:	f8d8 4000 	ldr.w	r4, [r8]
 80095c6:	4626      	mov	r6, r4
 80095c8:	2e00      	cmp	r6, #0
 80095ca:	d145      	bne.n	8009658 <_malloc_r+0xdc>
 80095cc:	2c00      	cmp	r4, #0
 80095ce:	d048      	beq.n	8009662 <_malloc_r+0xe6>
 80095d0:	6823      	ldr	r3, [r4, #0]
 80095d2:	4631      	mov	r1, r6
 80095d4:	4638      	mov	r0, r7
 80095d6:	eb04 0903 	add.w	r9, r4, r3
 80095da:	f000 f883 	bl	80096e4 <_sbrk_r>
 80095de:	4581      	cmp	r9, r0
 80095e0:	d13f      	bne.n	8009662 <_malloc_r+0xe6>
 80095e2:	6821      	ldr	r1, [r4, #0]
 80095e4:	1a6d      	subs	r5, r5, r1
 80095e6:	4629      	mov	r1, r5
 80095e8:	4638      	mov	r0, r7
 80095ea:	f7ff ffa7 	bl	800953c <sbrk_aligned>
 80095ee:	3001      	adds	r0, #1
 80095f0:	d037      	beq.n	8009662 <_malloc_r+0xe6>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	442b      	add	r3, r5
 80095f6:	6023      	str	r3, [r4, #0]
 80095f8:	f8d8 3000 	ldr.w	r3, [r8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d038      	beq.n	8009672 <_malloc_r+0xf6>
 8009600:	685a      	ldr	r2, [r3, #4]
 8009602:	42a2      	cmp	r2, r4
 8009604:	d12b      	bne.n	800965e <_malloc_r+0xe2>
 8009606:	2200      	movs	r2, #0
 8009608:	605a      	str	r2, [r3, #4]
 800960a:	e00f      	b.n	800962c <_malloc_r+0xb0>
 800960c:	6822      	ldr	r2, [r4, #0]
 800960e:	1b52      	subs	r2, r2, r5
 8009610:	d41f      	bmi.n	8009652 <_malloc_r+0xd6>
 8009612:	2a0b      	cmp	r2, #11
 8009614:	d917      	bls.n	8009646 <_malloc_r+0xca>
 8009616:	1961      	adds	r1, r4, r5
 8009618:	42a3      	cmp	r3, r4
 800961a:	6025      	str	r5, [r4, #0]
 800961c:	bf18      	it	ne
 800961e:	6059      	strne	r1, [r3, #4]
 8009620:	6863      	ldr	r3, [r4, #4]
 8009622:	bf08      	it	eq
 8009624:	f8c8 1000 	streq.w	r1, [r8]
 8009628:	5162      	str	r2, [r4, r5]
 800962a:	604b      	str	r3, [r1, #4]
 800962c:	4638      	mov	r0, r7
 800962e:	f104 060b 	add.w	r6, r4, #11
 8009632:	f000 f829 	bl	8009688 <__malloc_unlock>
 8009636:	f026 0607 	bic.w	r6, r6, #7
 800963a:	1d23      	adds	r3, r4, #4
 800963c:	1af2      	subs	r2, r6, r3
 800963e:	d0ae      	beq.n	800959e <_malloc_r+0x22>
 8009640:	1b9b      	subs	r3, r3, r6
 8009642:	50a3      	str	r3, [r4, r2]
 8009644:	e7ab      	b.n	800959e <_malloc_r+0x22>
 8009646:	42a3      	cmp	r3, r4
 8009648:	6862      	ldr	r2, [r4, #4]
 800964a:	d1dd      	bne.n	8009608 <_malloc_r+0x8c>
 800964c:	f8c8 2000 	str.w	r2, [r8]
 8009650:	e7ec      	b.n	800962c <_malloc_r+0xb0>
 8009652:	4623      	mov	r3, r4
 8009654:	6864      	ldr	r4, [r4, #4]
 8009656:	e7ac      	b.n	80095b2 <_malloc_r+0x36>
 8009658:	4634      	mov	r4, r6
 800965a:	6876      	ldr	r6, [r6, #4]
 800965c:	e7b4      	b.n	80095c8 <_malloc_r+0x4c>
 800965e:	4613      	mov	r3, r2
 8009660:	e7cc      	b.n	80095fc <_malloc_r+0x80>
 8009662:	230c      	movs	r3, #12
 8009664:	603b      	str	r3, [r7, #0]
 8009666:	4638      	mov	r0, r7
 8009668:	f000 f80e 	bl	8009688 <__malloc_unlock>
 800966c:	e797      	b.n	800959e <_malloc_r+0x22>
 800966e:	6025      	str	r5, [r4, #0]
 8009670:	e7dc      	b.n	800962c <_malloc_r+0xb0>
 8009672:	605b      	str	r3, [r3, #4]
 8009674:	deff      	udf	#255	; 0xff
 8009676:	bf00      	nop
 8009678:	20007154 	.word	0x20007154

0800967c <__malloc_lock>:
 800967c:	4801      	ldr	r0, [pc, #4]	; (8009684 <__malloc_lock+0x8>)
 800967e:	f000 b86b 	b.w	8009758 <__retarget_lock_acquire_recursive>
 8009682:	bf00      	nop
 8009684:	20007294 	.word	0x20007294

08009688 <__malloc_unlock>:
 8009688:	4801      	ldr	r0, [pc, #4]	; (8009690 <__malloc_unlock+0x8>)
 800968a:	f000 b866 	b.w	800975a <__retarget_lock_release_recursive>
 800968e:	bf00      	nop
 8009690:	20007294 	.word	0x20007294

08009694 <siprintf>:
 8009694:	b40e      	push	{r1, r2, r3}
 8009696:	b500      	push	{lr}
 8009698:	b09c      	sub	sp, #112	; 0x70
 800969a:	ab1d      	add	r3, sp, #116	; 0x74
 800969c:	9002      	str	r0, [sp, #8]
 800969e:	9006      	str	r0, [sp, #24]
 80096a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096a4:	4809      	ldr	r0, [pc, #36]	; (80096cc <siprintf+0x38>)
 80096a6:	9107      	str	r1, [sp, #28]
 80096a8:	9104      	str	r1, [sp, #16]
 80096aa:	4909      	ldr	r1, [pc, #36]	; (80096d0 <siprintf+0x3c>)
 80096ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80096b0:	9105      	str	r1, [sp, #20]
 80096b2:	6800      	ldr	r0, [r0, #0]
 80096b4:	9301      	str	r3, [sp, #4]
 80096b6:	a902      	add	r1, sp, #8
 80096b8:	f000 f904 	bl	80098c4 <_svfiprintf_r>
 80096bc:	9b02      	ldr	r3, [sp, #8]
 80096be:	2200      	movs	r2, #0
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	b01c      	add	sp, #112	; 0x70
 80096c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096c8:	b003      	add	sp, #12
 80096ca:	4770      	bx	lr
 80096cc:	200000ac 	.word	0x200000ac
 80096d0:	ffff0208 	.word	0xffff0208

080096d4 <memset>:
 80096d4:	4402      	add	r2, r0
 80096d6:	4603      	mov	r3, r0
 80096d8:	4293      	cmp	r3, r2
 80096da:	d100      	bne.n	80096de <memset+0xa>
 80096dc:	4770      	bx	lr
 80096de:	f803 1b01 	strb.w	r1, [r3], #1
 80096e2:	e7f9      	b.n	80096d8 <memset+0x4>

080096e4 <_sbrk_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d06      	ldr	r5, [pc, #24]	; (8009700 <_sbrk_r+0x1c>)
 80096e8:	2300      	movs	r3, #0
 80096ea:	4604      	mov	r4, r0
 80096ec:	4608      	mov	r0, r1
 80096ee:	602b      	str	r3, [r5, #0]
 80096f0:	f7f8 fd70 	bl	80021d4 <_sbrk>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d102      	bne.n	80096fe <_sbrk_r+0x1a>
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	b103      	cbz	r3, 80096fe <_sbrk_r+0x1a>
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	20007298 	.word	0x20007298

08009704 <__errno>:
 8009704:	4b01      	ldr	r3, [pc, #4]	; (800970c <__errno+0x8>)
 8009706:	6818      	ldr	r0, [r3, #0]
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	200000ac 	.word	0x200000ac

08009710 <__libc_init_array>:
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	4d0d      	ldr	r5, [pc, #52]	; (8009748 <__libc_init_array+0x38>)
 8009714:	4c0d      	ldr	r4, [pc, #52]	; (800974c <__libc_init_array+0x3c>)
 8009716:	1b64      	subs	r4, r4, r5
 8009718:	10a4      	asrs	r4, r4, #2
 800971a:	2600      	movs	r6, #0
 800971c:	42a6      	cmp	r6, r4
 800971e:	d109      	bne.n	8009734 <__libc_init_array+0x24>
 8009720:	4d0b      	ldr	r5, [pc, #44]	; (8009750 <__libc_init_array+0x40>)
 8009722:	4c0c      	ldr	r4, [pc, #48]	; (8009754 <__libc_init_array+0x44>)
 8009724:	f000 fbae 	bl	8009e84 <_init>
 8009728:	1b64      	subs	r4, r4, r5
 800972a:	10a4      	asrs	r4, r4, #2
 800972c:	2600      	movs	r6, #0
 800972e:	42a6      	cmp	r6, r4
 8009730:	d105      	bne.n	800973e <__libc_init_array+0x2e>
 8009732:	bd70      	pop	{r4, r5, r6, pc}
 8009734:	f855 3b04 	ldr.w	r3, [r5], #4
 8009738:	4798      	blx	r3
 800973a:	3601      	adds	r6, #1
 800973c:	e7ee      	b.n	800971c <__libc_init_array+0xc>
 800973e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009742:	4798      	blx	r3
 8009744:	3601      	adds	r6, #1
 8009746:	e7f2      	b.n	800972e <__libc_init_array+0x1e>
 8009748:	0800a2d0 	.word	0x0800a2d0
 800974c:	0800a2d0 	.word	0x0800a2d0
 8009750:	0800a2d0 	.word	0x0800a2d0
 8009754:	0800a2d4 	.word	0x0800a2d4

08009758 <__retarget_lock_acquire_recursive>:
 8009758:	4770      	bx	lr

0800975a <__retarget_lock_release_recursive>:
 800975a:	4770      	bx	lr

0800975c <memcpy>:
 800975c:	440a      	add	r2, r1
 800975e:	4291      	cmp	r1, r2
 8009760:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009764:	d100      	bne.n	8009768 <memcpy+0xc>
 8009766:	4770      	bx	lr
 8009768:	b510      	push	{r4, lr}
 800976a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800976e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009772:	4291      	cmp	r1, r2
 8009774:	d1f9      	bne.n	800976a <memcpy+0xe>
 8009776:	bd10      	pop	{r4, pc}

08009778 <_free_r>:
 8009778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800977a:	2900      	cmp	r1, #0
 800977c:	d044      	beq.n	8009808 <_free_r+0x90>
 800977e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009782:	9001      	str	r0, [sp, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	f1a1 0404 	sub.w	r4, r1, #4
 800978a:	bfb8      	it	lt
 800978c:	18e4      	addlt	r4, r4, r3
 800978e:	f7ff ff75 	bl	800967c <__malloc_lock>
 8009792:	4a1e      	ldr	r2, [pc, #120]	; (800980c <_free_r+0x94>)
 8009794:	9801      	ldr	r0, [sp, #4]
 8009796:	6813      	ldr	r3, [r2, #0]
 8009798:	b933      	cbnz	r3, 80097a8 <_free_r+0x30>
 800979a:	6063      	str	r3, [r4, #4]
 800979c:	6014      	str	r4, [r2, #0]
 800979e:	b003      	add	sp, #12
 80097a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097a4:	f7ff bf70 	b.w	8009688 <__malloc_unlock>
 80097a8:	42a3      	cmp	r3, r4
 80097aa:	d908      	bls.n	80097be <_free_r+0x46>
 80097ac:	6825      	ldr	r5, [r4, #0]
 80097ae:	1961      	adds	r1, r4, r5
 80097b0:	428b      	cmp	r3, r1
 80097b2:	bf01      	itttt	eq
 80097b4:	6819      	ldreq	r1, [r3, #0]
 80097b6:	685b      	ldreq	r3, [r3, #4]
 80097b8:	1949      	addeq	r1, r1, r5
 80097ba:	6021      	streq	r1, [r4, #0]
 80097bc:	e7ed      	b.n	800979a <_free_r+0x22>
 80097be:	461a      	mov	r2, r3
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	b10b      	cbz	r3, 80097c8 <_free_r+0x50>
 80097c4:	42a3      	cmp	r3, r4
 80097c6:	d9fa      	bls.n	80097be <_free_r+0x46>
 80097c8:	6811      	ldr	r1, [r2, #0]
 80097ca:	1855      	adds	r5, r2, r1
 80097cc:	42a5      	cmp	r5, r4
 80097ce:	d10b      	bne.n	80097e8 <_free_r+0x70>
 80097d0:	6824      	ldr	r4, [r4, #0]
 80097d2:	4421      	add	r1, r4
 80097d4:	1854      	adds	r4, r2, r1
 80097d6:	42a3      	cmp	r3, r4
 80097d8:	6011      	str	r1, [r2, #0]
 80097da:	d1e0      	bne.n	800979e <_free_r+0x26>
 80097dc:	681c      	ldr	r4, [r3, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	6053      	str	r3, [r2, #4]
 80097e2:	440c      	add	r4, r1
 80097e4:	6014      	str	r4, [r2, #0]
 80097e6:	e7da      	b.n	800979e <_free_r+0x26>
 80097e8:	d902      	bls.n	80097f0 <_free_r+0x78>
 80097ea:	230c      	movs	r3, #12
 80097ec:	6003      	str	r3, [r0, #0]
 80097ee:	e7d6      	b.n	800979e <_free_r+0x26>
 80097f0:	6825      	ldr	r5, [r4, #0]
 80097f2:	1961      	adds	r1, r4, r5
 80097f4:	428b      	cmp	r3, r1
 80097f6:	bf04      	itt	eq
 80097f8:	6819      	ldreq	r1, [r3, #0]
 80097fa:	685b      	ldreq	r3, [r3, #4]
 80097fc:	6063      	str	r3, [r4, #4]
 80097fe:	bf04      	itt	eq
 8009800:	1949      	addeq	r1, r1, r5
 8009802:	6021      	streq	r1, [r4, #0]
 8009804:	6054      	str	r4, [r2, #4]
 8009806:	e7ca      	b.n	800979e <_free_r+0x26>
 8009808:	b003      	add	sp, #12
 800980a:	bd30      	pop	{r4, r5, pc}
 800980c:	20007154 	.word	0x20007154

08009810 <__ssputs_r>:
 8009810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009814:	688e      	ldr	r6, [r1, #8]
 8009816:	461f      	mov	r7, r3
 8009818:	42be      	cmp	r6, r7
 800981a:	680b      	ldr	r3, [r1, #0]
 800981c:	4682      	mov	sl, r0
 800981e:	460c      	mov	r4, r1
 8009820:	4690      	mov	r8, r2
 8009822:	d82c      	bhi.n	800987e <__ssputs_r+0x6e>
 8009824:	898a      	ldrh	r2, [r1, #12]
 8009826:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800982a:	d026      	beq.n	800987a <__ssputs_r+0x6a>
 800982c:	6965      	ldr	r5, [r4, #20]
 800982e:	6909      	ldr	r1, [r1, #16]
 8009830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009834:	eba3 0901 	sub.w	r9, r3, r1
 8009838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800983c:	1c7b      	adds	r3, r7, #1
 800983e:	444b      	add	r3, r9
 8009840:	106d      	asrs	r5, r5, #1
 8009842:	429d      	cmp	r5, r3
 8009844:	bf38      	it	cc
 8009846:	461d      	movcc	r5, r3
 8009848:	0553      	lsls	r3, r2, #21
 800984a:	d527      	bpl.n	800989c <__ssputs_r+0x8c>
 800984c:	4629      	mov	r1, r5
 800984e:	f7ff fe95 	bl	800957c <_malloc_r>
 8009852:	4606      	mov	r6, r0
 8009854:	b360      	cbz	r0, 80098b0 <__ssputs_r+0xa0>
 8009856:	6921      	ldr	r1, [r4, #16]
 8009858:	464a      	mov	r2, r9
 800985a:	f7ff ff7f 	bl	800975c <memcpy>
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009868:	81a3      	strh	r3, [r4, #12]
 800986a:	6126      	str	r6, [r4, #16]
 800986c:	6165      	str	r5, [r4, #20]
 800986e:	444e      	add	r6, r9
 8009870:	eba5 0509 	sub.w	r5, r5, r9
 8009874:	6026      	str	r6, [r4, #0]
 8009876:	60a5      	str	r5, [r4, #8]
 8009878:	463e      	mov	r6, r7
 800987a:	42be      	cmp	r6, r7
 800987c:	d900      	bls.n	8009880 <__ssputs_r+0x70>
 800987e:	463e      	mov	r6, r7
 8009880:	6820      	ldr	r0, [r4, #0]
 8009882:	4632      	mov	r2, r6
 8009884:	4641      	mov	r1, r8
 8009886:	f000 fada 	bl	8009e3e <memmove>
 800988a:	68a3      	ldr	r3, [r4, #8]
 800988c:	1b9b      	subs	r3, r3, r6
 800988e:	60a3      	str	r3, [r4, #8]
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	4433      	add	r3, r6
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	2000      	movs	r0, #0
 8009898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800989c:	462a      	mov	r2, r5
 800989e:	f000 fa9f 	bl	8009de0 <_realloc_r>
 80098a2:	4606      	mov	r6, r0
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d1e0      	bne.n	800986a <__ssputs_r+0x5a>
 80098a8:	6921      	ldr	r1, [r4, #16]
 80098aa:	4650      	mov	r0, sl
 80098ac:	f7ff ff64 	bl	8009778 <_free_r>
 80098b0:	230c      	movs	r3, #12
 80098b2:	f8ca 3000 	str.w	r3, [sl]
 80098b6:	89a3      	ldrh	r3, [r4, #12]
 80098b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098bc:	81a3      	strh	r3, [r4, #12]
 80098be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098c2:	e7e9      	b.n	8009898 <__ssputs_r+0x88>

080098c4 <_svfiprintf_r>:
 80098c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	4698      	mov	r8, r3
 80098ca:	898b      	ldrh	r3, [r1, #12]
 80098cc:	061b      	lsls	r3, r3, #24
 80098ce:	b09d      	sub	sp, #116	; 0x74
 80098d0:	4607      	mov	r7, r0
 80098d2:	460d      	mov	r5, r1
 80098d4:	4614      	mov	r4, r2
 80098d6:	d50e      	bpl.n	80098f6 <_svfiprintf_r+0x32>
 80098d8:	690b      	ldr	r3, [r1, #16]
 80098da:	b963      	cbnz	r3, 80098f6 <_svfiprintf_r+0x32>
 80098dc:	2140      	movs	r1, #64	; 0x40
 80098de:	f7ff fe4d 	bl	800957c <_malloc_r>
 80098e2:	6028      	str	r0, [r5, #0]
 80098e4:	6128      	str	r0, [r5, #16]
 80098e6:	b920      	cbnz	r0, 80098f2 <_svfiprintf_r+0x2e>
 80098e8:	230c      	movs	r3, #12
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098f0:	e0d0      	b.n	8009a94 <_svfiprintf_r+0x1d0>
 80098f2:	2340      	movs	r3, #64	; 0x40
 80098f4:	616b      	str	r3, [r5, #20]
 80098f6:	2300      	movs	r3, #0
 80098f8:	9309      	str	r3, [sp, #36]	; 0x24
 80098fa:	2320      	movs	r3, #32
 80098fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009900:	f8cd 800c 	str.w	r8, [sp, #12]
 8009904:	2330      	movs	r3, #48	; 0x30
 8009906:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009aac <_svfiprintf_r+0x1e8>
 800990a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800990e:	f04f 0901 	mov.w	r9, #1
 8009912:	4623      	mov	r3, r4
 8009914:	469a      	mov	sl, r3
 8009916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800991a:	b10a      	cbz	r2, 8009920 <_svfiprintf_r+0x5c>
 800991c:	2a25      	cmp	r2, #37	; 0x25
 800991e:	d1f9      	bne.n	8009914 <_svfiprintf_r+0x50>
 8009920:	ebba 0b04 	subs.w	fp, sl, r4
 8009924:	d00b      	beq.n	800993e <_svfiprintf_r+0x7a>
 8009926:	465b      	mov	r3, fp
 8009928:	4622      	mov	r2, r4
 800992a:	4629      	mov	r1, r5
 800992c:	4638      	mov	r0, r7
 800992e:	f7ff ff6f 	bl	8009810 <__ssputs_r>
 8009932:	3001      	adds	r0, #1
 8009934:	f000 80a9 	beq.w	8009a8a <_svfiprintf_r+0x1c6>
 8009938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800993a:	445a      	add	r2, fp
 800993c:	9209      	str	r2, [sp, #36]	; 0x24
 800993e:	f89a 3000 	ldrb.w	r3, [sl]
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 80a1 	beq.w	8009a8a <_svfiprintf_r+0x1c6>
 8009948:	2300      	movs	r3, #0
 800994a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800994e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009952:	f10a 0a01 	add.w	sl, sl, #1
 8009956:	9304      	str	r3, [sp, #16]
 8009958:	9307      	str	r3, [sp, #28]
 800995a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800995e:	931a      	str	r3, [sp, #104]	; 0x68
 8009960:	4654      	mov	r4, sl
 8009962:	2205      	movs	r2, #5
 8009964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009968:	4850      	ldr	r0, [pc, #320]	; (8009aac <_svfiprintf_r+0x1e8>)
 800996a:	f7f6 fc39 	bl	80001e0 <memchr>
 800996e:	9a04      	ldr	r2, [sp, #16]
 8009970:	b9d8      	cbnz	r0, 80099aa <_svfiprintf_r+0xe6>
 8009972:	06d0      	lsls	r0, r2, #27
 8009974:	bf44      	itt	mi
 8009976:	2320      	movmi	r3, #32
 8009978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800997c:	0711      	lsls	r1, r2, #28
 800997e:	bf44      	itt	mi
 8009980:	232b      	movmi	r3, #43	; 0x2b
 8009982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009986:	f89a 3000 	ldrb.w	r3, [sl]
 800998a:	2b2a      	cmp	r3, #42	; 0x2a
 800998c:	d015      	beq.n	80099ba <_svfiprintf_r+0xf6>
 800998e:	9a07      	ldr	r2, [sp, #28]
 8009990:	4654      	mov	r4, sl
 8009992:	2000      	movs	r0, #0
 8009994:	f04f 0c0a 	mov.w	ip, #10
 8009998:	4621      	mov	r1, r4
 800999a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800999e:	3b30      	subs	r3, #48	; 0x30
 80099a0:	2b09      	cmp	r3, #9
 80099a2:	d94d      	bls.n	8009a40 <_svfiprintf_r+0x17c>
 80099a4:	b1b0      	cbz	r0, 80099d4 <_svfiprintf_r+0x110>
 80099a6:	9207      	str	r2, [sp, #28]
 80099a8:	e014      	b.n	80099d4 <_svfiprintf_r+0x110>
 80099aa:	eba0 0308 	sub.w	r3, r0, r8
 80099ae:	fa09 f303 	lsl.w	r3, r9, r3
 80099b2:	4313      	orrs	r3, r2
 80099b4:	9304      	str	r3, [sp, #16]
 80099b6:	46a2      	mov	sl, r4
 80099b8:	e7d2      	b.n	8009960 <_svfiprintf_r+0x9c>
 80099ba:	9b03      	ldr	r3, [sp, #12]
 80099bc:	1d19      	adds	r1, r3, #4
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	9103      	str	r1, [sp, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	bfbb      	ittet	lt
 80099c6:	425b      	neglt	r3, r3
 80099c8:	f042 0202 	orrlt.w	r2, r2, #2
 80099cc:	9307      	strge	r3, [sp, #28]
 80099ce:	9307      	strlt	r3, [sp, #28]
 80099d0:	bfb8      	it	lt
 80099d2:	9204      	strlt	r2, [sp, #16]
 80099d4:	7823      	ldrb	r3, [r4, #0]
 80099d6:	2b2e      	cmp	r3, #46	; 0x2e
 80099d8:	d10c      	bne.n	80099f4 <_svfiprintf_r+0x130>
 80099da:	7863      	ldrb	r3, [r4, #1]
 80099dc:	2b2a      	cmp	r3, #42	; 0x2a
 80099de:	d134      	bne.n	8009a4a <_svfiprintf_r+0x186>
 80099e0:	9b03      	ldr	r3, [sp, #12]
 80099e2:	1d1a      	adds	r2, r3, #4
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	9203      	str	r2, [sp, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	bfb8      	it	lt
 80099ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80099f0:	3402      	adds	r4, #2
 80099f2:	9305      	str	r3, [sp, #20]
 80099f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009abc <_svfiprintf_r+0x1f8>
 80099f8:	7821      	ldrb	r1, [r4, #0]
 80099fa:	2203      	movs	r2, #3
 80099fc:	4650      	mov	r0, sl
 80099fe:	f7f6 fbef 	bl	80001e0 <memchr>
 8009a02:	b138      	cbz	r0, 8009a14 <_svfiprintf_r+0x150>
 8009a04:	9b04      	ldr	r3, [sp, #16]
 8009a06:	eba0 000a 	sub.w	r0, r0, sl
 8009a0a:	2240      	movs	r2, #64	; 0x40
 8009a0c:	4082      	lsls	r2, r0
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	3401      	adds	r4, #1
 8009a12:	9304      	str	r3, [sp, #16]
 8009a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a18:	4825      	ldr	r0, [pc, #148]	; (8009ab0 <_svfiprintf_r+0x1ec>)
 8009a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a1e:	2206      	movs	r2, #6
 8009a20:	f7f6 fbde 	bl	80001e0 <memchr>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d038      	beq.n	8009a9a <_svfiprintf_r+0x1d6>
 8009a28:	4b22      	ldr	r3, [pc, #136]	; (8009ab4 <_svfiprintf_r+0x1f0>)
 8009a2a:	bb1b      	cbnz	r3, 8009a74 <_svfiprintf_r+0x1b0>
 8009a2c:	9b03      	ldr	r3, [sp, #12]
 8009a2e:	3307      	adds	r3, #7
 8009a30:	f023 0307 	bic.w	r3, r3, #7
 8009a34:	3308      	adds	r3, #8
 8009a36:	9303      	str	r3, [sp, #12]
 8009a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3a:	4433      	add	r3, r6
 8009a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a3e:	e768      	b.n	8009912 <_svfiprintf_r+0x4e>
 8009a40:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a44:	460c      	mov	r4, r1
 8009a46:	2001      	movs	r0, #1
 8009a48:	e7a6      	b.n	8009998 <_svfiprintf_r+0xd4>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	3401      	adds	r4, #1
 8009a4e:	9305      	str	r3, [sp, #20]
 8009a50:	4619      	mov	r1, r3
 8009a52:	f04f 0c0a 	mov.w	ip, #10
 8009a56:	4620      	mov	r0, r4
 8009a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a5c:	3a30      	subs	r2, #48	; 0x30
 8009a5e:	2a09      	cmp	r2, #9
 8009a60:	d903      	bls.n	8009a6a <_svfiprintf_r+0x1a6>
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d0c6      	beq.n	80099f4 <_svfiprintf_r+0x130>
 8009a66:	9105      	str	r1, [sp, #20]
 8009a68:	e7c4      	b.n	80099f4 <_svfiprintf_r+0x130>
 8009a6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a6e:	4604      	mov	r4, r0
 8009a70:	2301      	movs	r3, #1
 8009a72:	e7f0      	b.n	8009a56 <_svfiprintf_r+0x192>
 8009a74:	ab03      	add	r3, sp, #12
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	462a      	mov	r2, r5
 8009a7a:	4b0f      	ldr	r3, [pc, #60]	; (8009ab8 <_svfiprintf_r+0x1f4>)
 8009a7c:	a904      	add	r1, sp, #16
 8009a7e:	4638      	mov	r0, r7
 8009a80:	f3af 8000 	nop.w
 8009a84:	1c42      	adds	r2, r0, #1
 8009a86:	4606      	mov	r6, r0
 8009a88:	d1d6      	bne.n	8009a38 <_svfiprintf_r+0x174>
 8009a8a:	89ab      	ldrh	r3, [r5, #12]
 8009a8c:	065b      	lsls	r3, r3, #25
 8009a8e:	f53f af2d 	bmi.w	80098ec <_svfiprintf_r+0x28>
 8009a92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a94:	b01d      	add	sp, #116	; 0x74
 8009a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9a:	ab03      	add	r3, sp, #12
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	462a      	mov	r2, r5
 8009aa0:	4b05      	ldr	r3, [pc, #20]	; (8009ab8 <_svfiprintf_r+0x1f4>)
 8009aa2:	a904      	add	r1, sp, #16
 8009aa4:	4638      	mov	r0, r7
 8009aa6:	f000 f879 	bl	8009b9c <_printf_i>
 8009aaa:	e7eb      	b.n	8009a84 <_svfiprintf_r+0x1c0>
 8009aac:	0800a294 	.word	0x0800a294
 8009ab0:	0800a29e 	.word	0x0800a29e
 8009ab4:	00000000 	.word	0x00000000
 8009ab8:	08009811 	.word	0x08009811
 8009abc:	0800a29a 	.word	0x0800a29a

08009ac0 <_printf_common>:
 8009ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac4:	4616      	mov	r6, r2
 8009ac6:	4699      	mov	r9, r3
 8009ac8:	688a      	ldr	r2, [r1, #8]
 8009aca:	690b      	ldr	r3, [r1, #16]
 8009acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	bfb8      	it	lt
 8009ad4:	4613      	movlt	r3, r2
 8009ad6:	6033      	str	r3, [r6, #0]
 8009ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009adc:	4607      	mov	r7, r0
 8009ade:	460c      	mov	r4, r1
 8009ae0:	b10a      	cbz	r2, 8009ae6 <_printf_common+0x26>
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	6033      	str	r3, [r6, #0]
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	0699      	lsls	r1, r3, #26
 8009aea:	bf42      	ittt	mi
 8009aec:	6833      	ldrmi	r3, [r6, #0]
 8009aee:	3302      	addmi	r3, #2
 8009af0:	6033      	strmi	r3, [r6, #0]
 8009af2:	6825      	ldr	r5, [r4, #0]
 8009af4:	f015 0506 	ands.w	r5, r5, #6
 8009af8:	d106      	bne.n	8009b08 <_printf_common+0x48>
 8009afa:	f104 0a19 	add.w	sl, r4, #25
 8009afe:	68e3      	ldr	r3, [r4, #12]
 8009b00:	6832      	ldr	r2, [r6, #0]
 8009b02:	1a9b      	subs	r3, r3, r2
 8009b04:	42ab      	cmp	r3, r5
 8009b06:	dc26      	bgt.n	8009b56 <_printf_common+0x96>
 8009b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b0c:	1e13      	subs	r3, r2, #0
 8009b0e:	6822      	ldr	r2, [r4, #0]
 8009b10:	bf18      	it	ne
 8009b12:	2301      	movne	r3, #1
 8009b14:	0692      	lsls	r2, r2, #26
 8009b16:	d42b      	bmi.n	8009b70 <_printf_common+0xb0>
 8009b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	4638      	mov	r0, r7
 8009b20:	47c0      	blx	r8
 8009b22:	3001      	adds	r0, #1
 8009b24:	d01e      	beq.n	8009b64 <_printf_common+0xa4>
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	6922      	ldr	r2, [r4, #16]
 8009b2a:	f003 0306 	and.w	r3, r3, #6
 8009b2e:	2b04      	cmp	r3, #4
 8009b30:	bf02      	ittt	eq
 8009b32:	68e5      	ldreq	r5, [r4, #12]
 8009b34:	6833      	ldreq	r3, [r6, #0]
 8009b36:	1aed      	subeq	r5, r5, r3
 8009b38:	68a3      	ldr	r3, [r4, #8]
 8009b3a:	bf0c      	ite	eq
 8009b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b40:	2500      	movne	r5, #0
 8009b42:	4293      	cmp	r3, r2
 8009b44:	bfc4      	itt	gt
 8009b46:	1a9b      	subgt	r3, r3, r2
 8009b48:	18ed      	addgt	r5, r5, r3
 8009b4a:	2600      	movs	r6, #0
 8009b4c:	341a      	adds	r4, #26
 8009b4e:	42b5      	cmp	r5, r6
 8009b50:	d11a      	bne.n	8009b88 <_printf_common+0xc8>
 8009b52:	2000      	movs	r0, #0
 8009b54:	e008      	b.n	8009b68 <_printf_common+0xa8>
 8009b56:	2301      	movs	r3, #1
 8009b58:	4652      	mov	r2, sl
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	4638      	mov	r0, r7
 8009b5e:	47c0      	blx	r8
 8009b60:	3001      	adds	r0, #1
 8009b62:	d103      	bne.n	8009b6c <_printf_common+0xac>
 8009b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b6c:	3501      	adds	r5, #1
 8009b6e:	e7c6      	b.n	8009afe <_printf_common+0x3e>
 8009b70:	18e1      	adds	r1, r4, r3
 8009b72:	1c5a      	adds	r2, r3, #1
 8009b74:	2030      	movs	r0, #48	; 0x30
 8009b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b7a:	4422      	add	r2, r4
 8009b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b84:	3302      	adds	r3, #2
 8009b86:	e7c7      	b.n	8009b18 <_printf_common+0x58>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	4622      	mov	r2, r4
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	4638      	mov	r0, r7
 8009b90:	47c0      	blx	r8
 8009b92:	3001      	adds	r0, #1
 8009b94:	d0e6      	beq.n	8009b64 <_printf_common+0xa4>
 8009b96:	3601      	adds	r6, #1
 8009b98:	e7d9      	b.n	8009b4e <_printf_common+0x8e>
	...

08009b9c <_printf_i>:
 8009b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba0:	7e0f      	ldrb	r7, [r1, #24]
 8009ba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ba4:	2f78      	cmp	r7, #120	; 0x78
 8009ba6:	4691      	mov	r9, r2
 8009ba8:	4680      	mov	r8, r0
 8009baa:	460c      	mov	r4, r1
 8009bac:	469a      	mov	sl, r3
 8009bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bb2:	d807      	bhi.n	8009bc4 <_printf_i+0x28>
 8009bb4:	2f62      	cmp	r7, #98	; 0x62
 8009bb6:	d80a      	bhi.n	8009bce <_printf_i+0x32>
 8009bb8:	2f00      	cmp	r7, #0
 8009bba:	f000 80d4 	beq.w	8009d66 <_printf_i+0x1ca>
 8009bbe:	2f58      	cmp	r7, #88	; 0x58
 8009bc0:	f000 80c0 	beq.w	8009d44 <_printf_i+0x1a8>
 8009bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bcc:	e03a      	b.n	8009c44 <_printf_i+0xa8>
 8009bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bd2:	2b15      	cmp	r3, #21
 8009bd4:	d8f6      	bhi.n	8009bc4 <_printf_i+0x28>
 8009bd6:	a101      	add	r1, pc, #4	; (adr r1, 8009bdc <_printf_i+0x40>)
 8009bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bdc:	08009c35 	.word	0x08009c35
 8009be0:	08009c49 	.word	0x08009c49
 8009be4:	08009bc5 	.word	0x08009bc5
 8009be8:	08009bc5 	.word	0x08009bc5
 8009bec:	08009bc5 	.word	0x08009bc5
 8009bf0:	08009bc5 	.word	0x08009bc5
 8009bf4:	08009c49 	.word	0x08009c49
 8009bf8:	08009bc5 	.word	0x08009bc5
 8009bfc:	08009bc5 	.word	0x08009bc5
 8009c00:	08009bc5 	.word	0x08009bc5
 8009c04:	08009bc5 	.word	0x08009bc5
 8009c08:	08009d4d 	.word	0x08009d4d
 8009c0c:	08009c75 	.word	0x08009c75
 8009c10:	08009d07 	.word	0x08009d07
 8009c14:	08009bc5 	.word	0x08009bc5
 8009c18:	08009bc5 	.word	0x08009bc5
 8009c1c:	08009d6f 	.word	0x08009d6f
 8009c20:	08009bc5 	.word	0x08009bc5
 8009c24:	08009c75 	.word	0x08009c75
 8009c28:	08009bc5 	.word	0x08009bc5
 8009c2c:	08009bc5 	.word	0x08009bc5
 8009c30:	08009d0f 	.word	0x08009d0f
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	1d1a      	adds	r2, r3, #4
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	602a      	str	r2, [r5, #0]
 8009c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c44:	2301      	movs	r3, #1
 8009c46:	e09f      	b.n	8009d88 <_printf_i+0x1ec>
 8009c48:	6820      	ldr	r0, [r4, #0]
 8009c4a:	682b      	ldr	r3, [r5, #0]
 8009c4c:	0607      	lsls	r7, r0, #24
 8009c4e:	f103 0104 	add.w	r1, r3, #4
 8009c52:	6029      	str	r1, [r5, #0]
 8009c54:	d501      	bpl.n	8009c5a <_printf_i+0xbe>
 8009c56:	681e      	ldr	r6, [r3, #0]
 8009c58:	e003      	b.n	8009c62 <_printf_i+0xc6>
 8009c5a:	0646      	lsls	r6, r0, #25
 8009c5c:	d5fb      	bpl.n	8009c56 <_printf_i+0xba>
 8009c5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c62:	2e00      	cmp	r6, #0
 8009c64:	da03      	bge.n	8009c6e <_printf_i+0xd2>
 8009c66:	232d      	movs	r3, #45	; 0x2d
 8009c68:	4276      	negs	r6, r6
 8009c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c6e:	485a      	ldr	r0, [pc, #360]	; (8009dd8 <_printf_i+0x23c>)
 8009c70:	230a      	movs	r3, #10
 8009c72:	e012      	b.n	8009c9a <_printf_i+0xfe>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	6820      	ldr	r0, [r4, #0]
 8009c78:	1d19      	adds	r1, r3, #4
 8009c7a:	6029      	str	r1, [r5, #0]
 8009c7c:	0605      	lsls	r5, r0, #24
 8009c7e:	d501      	bpl.n	8009c84 <_printf_i+0xe8>
 8009c80:	681e      	ldr	r6, [r3, #0]
 8009c82:	e002      	b.n	8009c8a <_printf_i+0xee>
 8009c84:	0641      	lsls	r1, r0, #25
 8009c86:	d5fb      	bpl.n	8009c80 <_printf_i+0xe4>
 8009c88:	881e      	ldrh	r6, [r3, #0]
 8009c8a:	4853      	ldr	r0, [pc, #332]	; (8009dd8 <_printf_i+0x23c>)
 8009c8c:	2f6f      	cmp	r7, #111	; 0x6f
 8009c8e:	bf0c      	ite	eq
 8009c90:	2308      	moveq	r3, #8
 8009c92:	230a      	movne	r3, #10
 8009c94:	2100      	movs	r1, #0
 8009c96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c9a:	6865      	ldr	r5, [r4, #4]
 8009c9c:	60a5      	str	r5, [r4, #8]
 8009c9e:	2d00      	cmp	r5, #0
 8009ca0:	bfa2      	ittt	ge
 8009ca2:	6821      	ldrge	r1, [r4, #0]
 8009ca4:	f021 0104 	bicge.w	r1, r1, #4
 8009ca8:	6021      	strge	r1, [r4, #0]
 8009caa:	b90e      	cbnz	r6, 8009cb0 <_printf_i+0x114>
 8009cac:	2d00      	cmp	r5, #0
 8009cae:	d04b      	beq.n	8009d48 <_printf_i+0x1ac>
 8009cb0:	4615      	mov	r5, r2
 8009cb2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cb6:	fb03 6711 	mls	r7, r3, r1, r6
 8009cba:	5dc7      	ldrb	r7, [r0, r7]
 8009cbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cc0:	4637      	mov	r7, r6
 8009cc2:	42bb      	cmp	r3, r7
 8009cc4:	460e      	mov	r6, r1
 8009cc6:	d9f4      	bls.n	8009cb2 <_printf_i+0x116>
 8009cc8:	2b08      	cmp	r3, #8
 8009cca:	d10b      	bne.n	8009ce4 <_printf_i+0x148>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	07de      	lsls	r6, r3, #31
 8009cd0:	d508      	bpl.n	8009ce4 <_printf_i+0x148>
 8009cd2:	6923      	ldr	r3, [r4, #16]
 8009cd4:	6861      	ldr	r1, [r4, #4]
 8009cd6:	4299      	cmp	r1, r3
 8009cd8:	bfde      	ittt	le
 8009cda:	2330      	movle	r3, #48	; 0x30
 8009cdc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ce0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009ce4:	1b52      	subs	r2, r2, r5
 8009ce6:	6122      	str	r2, [r4, #16]
 8009ce8:	f8cd a000 	str.w	sl, [sp]
 8009cec:	464b      	mov	r3, r9
 8009cee:	aa03      	add	r2, sp, #12
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	4640      	mov	r0, r8
 8009cf4:	f7ff fee4 	bl	8009ac0 <_printf_common>
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	d14a      	bne.n	8009d92 <_printf_i+0x1f6>
 8009cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d00:	b004      	add	sp, #16
 8009d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	f043 0320 	orr.w	r3, r3, #32
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	4833      	ldr	r0, [pc, #204]	; (8009ddc <_printf_i+0x240>)
 8009d10:	2778      	movs	r7, #120	; 0x78
 8009d12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	6829      	ldr	r1, [r5, #0]
 8009d1a:	061f      	lsls	r7, r3, #24
 8009d1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d20:	d402      	bmi.n	8009d28 <_printf_i+0x18c>
 8009d22:	065f      	lsls	r7, r3, #25
 8009d24:	bf48      	it	mi
 8009d26:	b2b6      	uxthmi	r6, r6
 8009d28:	07df      	lsls	r7, r3, #31
 8009d2a:	bf48      	it	mi
 8009d2c:	f043 0320 	orrmi.w	r3, r3, #32
 8009d30:	6029      	str	r1, [r5, #0]
 8009d32:	bf48      	it	mi
 8009d34:	6023      	strmi	r3, [r4, #0]
 8009d36:	b91e      	cbnz	r6, 8009d40 <_printf_i+0x1a4>
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	f023 0320 	bic.w	r3, r3, #32
 8009d3e:	6023      	str	r3, [r4, #0]
 8009d40:	2310      	movs	r3, #16
 8009d42:	e7a7      	b.n	8009c94 <_printf_i+0xf8>
 8009d44:	4824      	ldr	r0, [pc, #144]	; (8009dd8 <_printf_i+0x23c>)
 8009d46:	e7e4      	b.n	8009d12 <_printf_i+0x176>
 8009d48:	4615      	mov	r5, r2
 8009d4a:	e7bd      	b.n	8009cc8 <_printf_i+0x12c>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	6826      	ldr	r6, [r4, #0]
 8009d50:	6961      	ldr	r1, [r4, #20]
 8009d52:	1d18      	adds	r0, r3, #4
 8009d54:	6028      	str	r0, [r5, #0]
 8009d56:	0635      	lsls	r5, r6, #24
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	d501      	bpl.n	8009d60 <_printf_i+0x1c4>
 8009d5c:	6019      	str	r1, [r3, #0]
 8009d5e:	e002      	b.n	8009d66 <_printf_i+0x1ca>
 8009d60:	0670      	lsls	r0, r6, #25
 8009d62:	d5fb      	bpl.n	8009d5c <_printf_i+0x1c0>
 8009d64:	8019      	strh	r1, [r3, #0]
 8009d66:	2300      	movs	r3, #0
 8009d68:	6123      	str	r3, [r4, #16]
 8009d6a:	4615      	mov	r5, r2
 8009d6c:	e7bc      	b.n	8009ce8 <_printf_i+0x14c>
 8009d6e:	682b      	ldr	r3, [r5, #0]
 8009d70:	1d1a      	adds	r2, r3, #4
 8009d72:	602a      	str	r2, [r5, #0]
 8009d74:	681d      	ldr	r5, [r3, #0]
 8009d76:	6862      	ldr	r2, [r4, #4]
 8009d78:	2100      	movs	r1, #0
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	f7f6 fa30 	bl	80001e0 <memchr>
 8009d80:	b108      	cbz	r0, 8009d86 <_printf_i+0x1ea>
 8009d82:	1b40      	subs	r0, r0, r5
 8009d84:	6060      	str	r0, [r4, #4]
 8009d86:	6863      	ldr	r3, [r4, #4]
 8009d88:	6123      	str	r3, [r4, #16]
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d90:	e7aa      	b.n	8009ce8 <_printf_i+0x14c>
 8009d92:	6923      	ldr	r3, [r4, #16]
 8009d94:	462a      	mov	r2, r5
 8009d96:	4649      	mov	r1, r9
 8009d98:	4640      	mov	r0, r8
 8009d9a:	47d0      	blx	sl
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d0ad      	beq.n	8009cfc <_printf_i+0x160>
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	079b      	lsls	r3, r3, #30
 8009da4:	d413      	bmi.n	8009dce <_printf_i+0x232>
 8009da6:	68e0      	ldr	r0, [r4, #12]
 8009da8:	9b03      	ldr	r3, [sp, #12]
 8009daa:	4298      	cmp	r0, r3
 8009dac:	bfb8      	it	lt
 8009dae:	4618      	movlt	r0, r3
 8009db0:	e7a6      	b.n	8009d00 <_printf_i+0x164>
 8009db2:	2301      	movs	r3, #1
 8009db4:	4632      	mov	r2, r6
 8009db6:	4649      	mov	r1, r9
 8009db8:	4640      	mov	r0, r8
 8009dba:	47d0      	blx	sl
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	d09d      	beq.n	8009cfc <_printf_i+0x160>
 8009dc0:	3501      	adds	r5, #1
 8009dc2:	68e3      	ldr	r3, [r4, #12]
 8009dc4:	9903      	ldr	r1, [sp, #12]
 8009dc6:	1a5b      	subs	r3, r3, r1
 8009dc8:	42ab      	cmp	r3, r5
 8009dca:	dcf2      	bgt.n	8009db2 <_printf_i+0x216>
 8009dcc:	e7eb      	b.n	8009da6 <_printf_i+0x20a>
 8009dce:	2500      	movs	r5, #0
 8009dd0:	f104 0619 	add.w	r6, r4, #25
 8009dd4:	e7f5      	b.n	8009dc2 <_printf_i+0x226>
 8009dd6:	bf00      	nop
 8009dd8:	0800a2a5 	.word	0x0800a2a5
 8009ddc:	0800a2b6 	.word	0x0800a2b6

08009de0 <_realloc_r>:
 8009de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de4:	4680      	mov	r8, r0
 8009de6:	4614      	mov	r4, r2
 8009de8:	460e      	mov	r6, r1
 8009dea:	b921      	cbnz	r1, 8009df6 <_realloc_r+0x16>
 8009dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009df0:	4611      	mov	r1, r2
 8009df2:	f7ff bbc3 	b.w	800957c <_malloc_r>
 8009df6:	b92a      	cbnz	r2, 8009e04 <_realloc_r+0x24>
 8009df8:	f7ff fcbe 	bl	8009778 <_free_r>
 8009dfc:	4625      	mov	r5, r4
 8009dfe:	4628      	mov	r0, r5
 8009e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e04:	f000 f835 	bl	8009e72 <_malloc_usable_size_r>
 8009e08:	4284      	cmp	r4, r0
 8009e0a:	4607      	mov	r7, r0
 8009e0c:	d802      	bhi.n	8009e14 <_realloc_r+0x34>
 8009e0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e12:	d812      	bhi.n	8009e3a <_realloc_r+0x5a>
 8009e14:	4621      	mov	r1, r4
 8009e16:	4640      	mov	r0, r8
 8009e18:	f7ff fbb0 	bl	800957c <_malloc_r>
 8009e1c:	4605      	mov	r5, r0
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d0ed      	beq.n	8009dfe <_realloc_r+0x1e>
 8009e22:	42bc      	cmp	r4, r7
 8009e24:	4622      	mov	r2, r4
 8009e26:	4631      	mov	r1, r6
 8009e28:	bf28      	it	cs
 8009e2a:	463a      	movcs	r2, r7
 8009e2c:	f7ff fc96 	bl	800975c <memcpy>
 8009e30:	4631      	mov	r1, r6
 8009e32:	4640      	mov	r0, r8
 8009e34:	f7ff fca0 	bl	8009778 <_free_r>
 8009e38:	e7e1      	b.n	8009dfe <_realloc_r+0x1e>
 8009e3a:	4635      	mov	r5, r6
 8009e3c:	e7df      	b.n	8009dfe <_realloc_r+0x1e>

08009e3e <memmove>:
 8009e3e:	4288      	cmp	r0, r1
 8009e40:	b510      	push	{r4, lr}
 8009e42:	eb01 0402 	add.w	r4, r1, r2
 8009e46:	d902      	bls.n	8009e4e <memmove+0x10>
 8009e48:	4284      	cmp	r4, r0
 8009e4a:	4623      	mov	r3, r4
 8009e4c:	d807      	bhi.n	8009e5e <memmove+0x20>
 8009e4e:	1e43      	subs	r3, r0, #1
 8009e50:	42a1      	cmp	r1, r4
 8009e52:	d008      	beq.n	8009e66 <memmove+0x28>
 8009e54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e5c:	e7f8      	b.n	8009e50 <memmove+0x12>
 8009e5e:	4402      	add	r2, r0
 8009e60:	4601      	mov	r1, r0
 8009e62:	428a      	cmp	r2, r1
 8009e64:	d100      	bne.n	8009e68 <memmove+0x2a>
 8009e66:	bd10      	pop	{r4, pc}
 8009e68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e6c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e70:	e7f7      	b.n	8009e62 <memmove+0x24>

08009e72 <_malloc_usable_size_r>:
 8009e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e76:	1f18      	subs	r0, r3, #4
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	bfbc      	itt	lt
 8009e7c:	580b      	ldrlt	r3, [r1, r0]
 8009e7e:	18c0      	addlt	r0, r0, r3
 8009e80:	4770      	bx	lr
	...

08009e84 <_init>:
 8009e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e86:	bf00      	nop
 8009e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e8a:	bc08      	pop	{r3}
 8009e8c:	469e      	mov	lr, r3
 8009e8e:	4770      	bx	lr

08009e90 <_fini>:
 8009e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e92:	bf00      	nop
 8009e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e96:	bc08      	pop	{r3}
 8009e98:	469e      	mov	lr, r3
 8009e9a:	4770      	bx	lr
