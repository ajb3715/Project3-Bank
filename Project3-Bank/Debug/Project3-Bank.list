
Project3-Bank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08009098  08009098  00019098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800951c  0800951c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800951c  0800951c  0001951c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009524  08009524  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009524  08009524  00019524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009528  08009528  00019528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800952c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e84  200000b0  080095dc  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006f34  080095dc  00026f34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cfba  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e92  00000000  00000000  0003d0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001820  00000000  00000000  00040f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ae  00000000  00000000  00042790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a50d  00000000  00000000  00043a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d380  00000000  00000000  0006df4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe06b  00000000  00000000  0008b2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a0c  00000000  00000000  00189338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0018fd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009080 	.word	0x08009080

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08009080 	.word	0x08009080

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <updateDigit>:
#include "cmsis_os.h"

int num[] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0X80, 0X90};
int seg[] = {0xF1, 0xF2, 0xF4, 0xF8};

int updateDigit(int spot, int num){
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
	if (spot == 0){
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d107      	bne.n	800059c <updateDigit+0x20>
		return num / 1000;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	4a24      	ldr	r2, [pc, #144]	; (8000620 <updateDigit+0xa4>)
 8000590:	fb82 1203 	smull	r1, r2, r2, r3
 8000594:	1192      	asrs	r2, r2, #6
 8000596:	17db      	asrs	r3, r3, #31
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	e03a      	b.n	8000612 <updateDigit+0x96>
	} else if (spot == 1){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d113      	bne.n	80005ca <updateDigit+0x4e>
		return (num / 100) % 10;
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	4a1f      	ldr	r2, [pc, #124]	; (8000624 <updateDigit+0xa8>)
 80005a6:	fb82 1203 	smull	r1, r2, r2, r3
 80005aa:	1152      	asrs	r2, r2, #5
 80005ac:	17db      	asrs	r3, r3, #31
 80005ae:	1ad1      	subs	r1, r2, r3
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <updateDigit+0xac>)
 80005b2:	fb83 2301 	smull	r2, r3, r3, r1
 80005b6:	109a      	asrs	r2, r3, #2
 80005b8:	17cb      	asrs	r3, r1, #31
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	0092      	lsls	r2, r2, #2
 80005c0:	441a      	add	r2, r3
 80005c2:	0053      	lsls	r3, r2, #1
 80005c4:	461a      	mov	r2, r3
 80005c6:	1a8b      	subs	r3, r1, r2
 80005c8:	e023      	b.n	8000612 <updateDigit+0x96>
	} else if (spot == 2){
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d113      	bne.n	80005f8 <updateDigit+0x7c>
		return (num / 10) % 10;
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <updateDigit+0xac>)
 80005d4:	fb82 1203 	smull	r1, r2, r2, r3
 80005d8:	1092      	asrs	r2, r2, #2
 80005da:	17db      	asrs	r3, r3, #31
 80005dc:	1ad1      	subs	r1, r2, r3
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <updateDigit+0xac>)
 80005e0:	fb83 2301 	smull	r2, r3, r3, r1
 80005e4:	109a      	asrs	r2, r3, #2
 80005e6:	17cb      	asrs	r3, r1, #31
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	461a      	mov	r2, r3
 80005ec:	0092      	lsls	r2, r2, #2
 80005ee:	441a      	add	r2, r3
 80005f0:	0053      	lsls	r3, r2, #1
 80005f2:	461a      	mov	r2, r3
 80005f4:	1a8b      	subs	r3, r1, r2
 80005f6:	e00c      	b.n	8000612 <updateDigit+0x96>
	} else {
		return num % 10;
 80005f8:	6839      	ldr	r1, [r7, #0]
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <updateDigit+0xac>)
 80005fc:	fb83 2301 	smull	r2, r3, r3, r1
 8000600:	109a      	asrs	r2, r3, #2
 8000602:	17cb      	asrs	r3, r1, #31
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	461a      	mov	r2, r3
 8000608:	0092      	lsls	r2, r2, #2
 800060a:	441a      	add	r2, r3
 800060c:	0053      	lsls	r3, r2, #1
 800060e:	461a      	mov	r2, r3
 8000610:	1a8b      	subs	r3, r1, r2
	}
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	10624dd3 	.word	0x10624dd3
 8000624:	51eb851f 	.word	0x51eb851f
 8000628:	66666667 	.word	0x66666667

0800062c <run_manager>:

void run_manager(){
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b0d6      	sub	sp, #344	; 0x158
 8000630:	af04      	add	r7, sp, #16
//			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
//			sprintf(buffer,"Teller 1: %d Teller 2: %d Teller 3: %d \r\n", tellers[1].status,tellers[2].status,tellers[3].status);
//			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
//		}

	if (clock_compare(Clock, fiveOclockSomewhere) == 0 && waiting_customers == 0 && tellers[3].status == 0 && tellers[1].status == 0 && tellers[2].status == 0){
 8000632:	4b9a      	ldr	r3, [pc, #616]	; (800089c <run_manager+0x270>)
 8000634:	4a9a      	ldr	r2, [pc, #616]	; (80008a0 <run_manager+0x274>)
 8000636:	466c      	mov	r4, sp
 8000638:	1d19      	adds	r1, r3, #4
 800063a:	c903      	ldmia	r1, {r0, r1}
 800063c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	ca07      	ldmia	r2, {r0, r1, r2}
 8000644:	f000 fd06 	bl	8001054 <clock_compare>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	f040 81f5 	bne.w	8000a3a <run_manager+0x40e>
 8000650:	4b94      	ldr	r3, [pc, #592]	; (80008a4 <run_manager+0x278>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	f040 81f0 	bne.w	8000a3a <run_manager+0x40e>
 800065a:	4b93      	ldr	r3, [pc, #588]	; (80008a8 <run_manager+0x27c>)
 800065c:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8000660:	2b00      	cmp	r3, #0
 8000662:	f040 81ea 	bne.w	8000a3a <run_manager+0x40e>
 8000666:	4b90      	ldr	r3, [pc, #576]	; (80008a8 <run_manager+0x27c>)
 8000668:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800066c:	2b00      	cmp	r3, #0
 800066e:	f040 81e4 	bne.w	8000a3a <run_manager+0x40e>
 8000672:	4b8d      	ldr	r3, [pc, #564]	; (80008a8 <run_manager+0x27c>)
 8000674:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8000678:	2b00      	cmp	r3, #0
 800067a:	f040 81de 	bne.w	8000a3a <run_manager+0x40e>
		// Everyone stats
		int total_customers = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		WallClock total_service_time = {.hour = 0, .minute = 0, .second = 0};
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800068a:	2300      	movs	r3, #0
 800068c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000690:	2300      	movs	r3, #0
 8000692:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		WallClock avg_wait_time_customer = {.hour = 0, .minute = 0, .second = 0};
 8000696:	2300      	movs	r3, #0
 8000698:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800069c:	2300      	movs	r3, #0
 800069e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80006a2:	2300      	movs	r3, #0
 80006a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		WallClock avg_time_with_teller = {.hour = 0, .minute = 0, .second = 0};
 80006a8:	2300      	movs	r3, #0
 80006aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80006ae:	2300      	movs	r3, #0
 80006b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80006b4:	2300      	movs	r3, #0
 80006b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		WallClock avg_wait_time_teller = {.hour = 0, .minute = 0, .second = 0};
 80006ba:	2300      	movs	r3, #0
 80006bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80006c0:	2300      	movs	r3, #0
 80006c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		//WallClock max_queue_time = {.hour = 0, .minute = 0, .second = 0};
		// Individual Teller stats
		for (int i = 1; i < 4; i++){
 80006cc:	2301      	movs	r3, #1
 80006ce:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80006d2:	e028      	b.n	8000726 <run_manager+0xfa>
			total_customers += tellers[i].customers_served;
 80006d4:	4a74      	ldr	r2, [pc, #464]	; (80008a8 <run_manager+0x27c>)
 80006d6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80006da:	21bc      	movs	r1, #188	; 0xbc
 80006dc:	fb01 f303 	mul.w	r3, r1, r3
 80006e0:	4413      	add	r3, r2
 80006e2:	3318      	adds	r3, #24
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80006ea:	4413      	add	r3, r2
 80006ec:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			total_service_time = add_clocks(total_service_time, tellers[i].total_time_working);
 80006f0:	f507 7594 	add.w	r5, r7, #296	; 0x128
 80006f4:	4a6c      	ldr	r2, [pc, #432]	; (80008a8 <run_manager+0x27c>)
 80006f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80006fa:	21bc      	movs	r1, #188	; 0xbc
 80006fc:	fb01 f303 	mul.w	r3, r1, r3
 8000700:	4413      	add	r3, r2
 8000702:	3318      	adds	r3, #24
 8000704:	466c      	mov	r4, sp
 8000706:	3304      	adds	r3, #4
 8000708:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800070c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000710:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000714:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000716:	4628      	mov	r0, r5
 8000718:	f000 fc5b 	bl	8000fd2 <add_clocks>
		for (int i = 1; i < 4; i++){
 800071c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000720:	3301      	adds	r3, #1
 8000722:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8000726:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800072a:	2b03      	cmp	r3, #3
 800072c:	ddd2      	ble.n	80006d4 <run_manager+0xa8>
		}

		char buffer[256];
		sprintf(buffer, "\r\n-------------------- End of Day Report ---------------------\r\n");
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	495e      	ldr	r1, [pc, #376]	; (80008ac <run_manager+0x280>)
 8000732:	4618      	mov	r0, r3
 8000734:	f008 f856 	bl	80087e4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fd48 	bl	80001d0 <strlen>
 8000740:	4603      	mov	r3, r0
 8000742:	b29a      	uxth	r2, r3
 8000744:	1d39      	adds	r1, r7, #4
 8000746:	2364      	movs	r3, #100	; 0x64
 8000748:	4859      	ldr	r0, [pc, #356]	; (80008b0 <run_manager+0x284>)
 800074a:	f004 f891 	bl	8004870 <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced: %d\r\n", total_customers);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000754:	4957      	ldr	r1, [pc, #348]	; (80008b4 <run_manager+0x288>)
 8000756:	4618      	mov	r0, r3
 8000758:	f008 f844 	bl	80087e4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fd36 	bl	80001d0 <strlen>
 8000764:	4603      	mov	r3, r0
 8000766:	b29a      	uxth	r2, r3
 8000768:	1d39      	adds	r1, r7, #4
 800076a:	2364      	movs	r3, #100	; 0x64
 800076c:	4850      	ldr	r0, [pc, #320]	; (80008b0 <run_manager+0x284>)
 800076e:	f004 f87f 	bl	8004870 <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced by Teller 1: %d\r\n", tellers[1].customers_served);
 8000772:	4b4d      	ldr	r3, [pc, #308]	; (80008a8 <run_manager+0x27c>)
 8000774:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	494f      	ldr	r1, [pc, #316]	; (80008b8 <run_manager+0x28c>)
 800077c:	4618      	mov	r0, r3
 800077e:	f008 f831 	bl	80087e4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fd23 	bl	80001d0 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	b29a      	uxth	r2, r3
 800078e:	1d39      	adds	r1, r7, #4
 8000790:	2364      	movs	r3, #100	; 0x64
 8000792:	4847      	ldr	r0, [pc, #284]	; (80008b0 <run_manager+0x284>)
 8000794:	f004 f86c 	bl	8004870 <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced by Teller 2: %d\r\n", tellers[2].customers_served);
 8000798:	4b43      	ldr	r3, [pc, #268]	; (80008a8 <run_manager+0x27c>)
 800079a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4946      	ldr	r1, [pc, #280]	; (80008bc <run_manager+0x290>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f008 f81e 	bl	80087e4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fd10 	bl	80001d0 <strlen>
 80007b0:	4603      	mov	r3, r0
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	1d39      	adds	r1, r7, #4
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	483d      	ldr	r0, [pc, #244]	; (80008b0 <run_manager+0x284>)
 80007ba:	f004 f859 	bl	8004870 <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced by Teller 3: %d\r\n", tellers[3].customers_served);
 80007be:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <run_manager+0x27c>)
 80007c0:	f8d3 224c 	ldr.w	r2, [r3, #588]	; 0x24c
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	493e      	ldr	r1, [pc, #248]	; (80008c0 <run_manager+0x294>)
 80007c8:	4618      	mov	r0, r3
 80007ca:	f008 f80b 	bl	80087e4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fcfd 	bl	80001d0 <strlen>
 80007d6:	4603      	mov	r3, r0
 80007d8:	b29a      	uxth	r2, r3
 80007da:	1d39      	adds	r1, r7, #4
 80007dc:	2364      	movs	r3, #100	; 0x64
 80007de:	4834      	ldr	r0, [pc, #208]	; (80008b0 <run_manager+0x284>)
 80007e0:	f004 f846 	bl	8004870 <HAL_UART_Transmit>

		sprintf(buffer, "Average customer wait time: %d:%d:%d\r\n", avg_wait_time_customer.hour, avg_wait_time_customer.minute, avg_wait_time_customer.second);
 80007e4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80007e8:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80007ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80007f0:	1d38      	adds	r0, r7, #4
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	460b      	mov	r3, r1
 80007f6:	4933      	ldr	r1, [pc, #204]	; (80008c4 <run_manager+0x298>)
 80007f8:	f007 fff4 	bl	80087e4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fce6 	bl	80001d0 <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	b29a      	uxth	r2, r3
 8000808:	1d39      	adds	r1, r7, #4
 800080a:	2364      	movs	r3, #100	; 0x64
 800080c:	4828      	ldr	r0, [pc, #160]	; (80008b0 <run_manager+0x284>)
 800080e:	f004 f82f 	bl	8004870 <HAL_UART_Transmit>
		sprintf(buffer, "Average customer time with Tellers: %d:%d:%d\r\n", avg_time_with_teller.hour, avg_time_with_teller.minute, avg_time_with_teller.second);
 8000812:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000816:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800081a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800081e:	1d38      	adds	r0, r7, #4
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	460b      	mov	r3, r1
 8000824:	4928      	ldr	r1, [pc, #160]	; (80008c8 <run_manager+0x29c>)
 8000826:	f007 ffdd 	bl	80087e4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fccf 	bl	80001d0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	b29a      	uxth	r2, r3
 8000836:	1d39      	adds	r1, r7, #4
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	481d      	ldr	r0, [pc, #116]	; (80008b0 <run_manager+0x284>)
 800083c:	f004 f818 	bl	8004870 <HAL_UART_Transmit>
		sprintf(buffer, "Average teller wait time: %d:%d:%d\r\n", avg_wait_time_teller.hour, avg_wait_time_teller.minute, avg_wait_time_teller.second);
 8000840:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000844:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8000848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800084c:	1d38      	adds	r0, r7, #4
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	460b      	mov	r3, r1
 8000852:	491e      	ldr	r1, [pc, #120]	; (80008cc <run_manager+0x2a0>)
 8000854:	f007 ffc6 	bl	80087e4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fcb8 	bl	80001d0 <strlen>
 8000860:	4603      	mov	r3, r0
 8000862:	b29a      	uxth	r2, r3
 8000864:	1d39      	adds	r1, r7, #4
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	4811      	ldr	r0, [pc, #68]	; (80008b0 <run_manager+0x284>)
 800086a:	f004 f801 	bl	8004870 <HAL_UART_Transmit>
		sprintf(buffer, "Max customers in queue: %d\r\n", max_customer_waiting);
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <run_manager+0x2a4>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4917      	ldr	r1, [pc, #92]	; (80008d4 <run_manager+0x2a8>)
 8000876:	4618      	mov	r0, r3
 8000878:	f007 ffb4 	bl	80087e4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fca6 	bl	80001d0 <strlen>
 8000884:	4603      	mov	r3, r0
 8000886:	b29a      	uxth	r2, r3
 8000888:	1d39      	adds	r1, r7, #4
 800088a:	2364      	movs	r3, #100	; 0x64
 800088c:	4808      	ldr	r0, [pc, #32]	; (80008b0 <run_manager+0x284>)
 800088e:	f003 ffef 	bl	8004870 <HAL_UART_Transmit>

		for (int i = 1; i < 4; i++){
 8000892:	2301      	movs	r3, #1
 8000894:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000898:	e0ca      	b.n	8000a30 <run_manager+0x404>
 800089a:	bf00      	nop
 800089c:	20000044 	.word	0x20000044
 80008a0:	20000038 	.word	0x20000038
 80008a4:	20000124 	.word	0x20000124
 80008a8:	200003f4 	.word	0x200003f4
 80008ac:	08009098 	.word	0x08009098
 80008b0:	20000344 	.word	0x20000344
 80008b4:	080090dc 	.word	0x080090dc
 80008b8:	080090f8 	.word	0x080090f8
 80008bc:	08009120 	.word	0x08009120
 80008c0:	08009148 	.word	0x08009148
 80008c4:	08009170 	.word	0x08009170
 80008c8:	08009198 	.word	0x08009198
 80008cc:	080091c8 	.word	0x080091c8
 80008d0:	20000120 	.word	0x20000120
 80008d4:	080091f0 	.word	0x080091f0
			sprintf(buffer, "Number of breaks for Teller %d: %d\r\n", i, tellers[i].num_breaks);
 80008d8:	4a7c      	ldr	r2, [pc, #496]	; (8000acc <run_manager+0x4a0>)
 80008da:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80008de:	21bc      	movs	r1, #188	; 0xbc
 80008e0:	fb01 f303 	mul.w	r3, r1, r3
 80008e4:	4413      	add	r3, r2
 80008e6:	3394      	adds	r3, #148	; 0x94
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	1d38      	adds	r0, r7, #4
 80008ec:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80008f0:	4977      	ldr	r1, [pc, #476]	; (8000ad0 <run_manager+0x4a4>)
 80008f2:	f007 ff77 	bl	80087e4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fc69 	bl	80001d0 <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29a      	uxth	r2, r3
 8000902:	1d39      	adds	r1, r7, #4
 8000904:	2364      	movs	r3, #100	; 0x64
 8000906:	4873      	ldr	r0, [pc, #460]	; (8000ad4 <run_manager+0x4a8>)
 8000908:	f003 ffb2 	bl	8004870 <HAL_UART_Transmit>
			sprintf(buffer, "Average break time for Teller %d: %d:%d:%d\r\n", i, tellers[i].current_break.hour, tellers[i].current_break.minute, tellers[i].current_break.second); //calculate avg
 800090c:	4a6f      	ldr	r2, [pc, #444]	; (8000acc <run_manager+0x4a0>)
 800090e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000912:	21bc      	movs	r1, #188	; 0xbc
 8000914:	fb01 f303 	mul.w	r3, r1, r3
 8000918:	4413      	add	r3, r2
 800091a:	3388      	adds	r3, #136	; 0x88
 800091c:	6819      	ldr	r1, [r3, #0]
 800091e:	4a6b      	ldr	r2, [pc, #428]	; (8000acc <run_manager+0x4a0>)
 8000920:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000924:	20bc      	movs	r0, #188	; 0xbc
 8000926:	fb00 f303 	mul.w	r3, r0, r3
 800092a:	4413      	add	r3, r2
 800092c:	338c      	adds	r3, #140	; 0x8c
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4866      	ldr	r0, [pc, #408]	; (8000acc <run_manager+0x4a0>)
 8000932:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8000936:	24bc      	movs	r4, #188	; 0xbc
 8000938:	fb04 f202 	mul.w	r2, r4, r2
 800093c:	4402      	add	r2, r0
 800093e:	3290      	adds	r2, #144	; 0x90
 8000940:	6812      	ldr	r2, [r2, #0]
 8000942:	1d38      	adds	r0, r7, #4
 8000944:	9201      	str	r2, [sp, #4]
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	460b      	mov	r3, r1
 800094a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800094e:	4962      	ldr	r1, [pc, #392]	; (8000ad8 <run_manager+0x4ac>)
 8000950:	f007 ff48 	bl	80087e4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fc3a 	bl	80001d0 <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	b29a      	uxth	r2, r3
 8000960:	1d39      	adds	r1, r7, #4
 8000962:	2364      	movs	r3, #100	; 0x64
 8000964:	485b      	ldr	r0, [pc, #364]	; (8000ad4 <run_manager+0x4a8>)
 8000966:	f003 ff83 	bl	8004870 <HAL_UART_Transmit>
			sprintf(buffer, "Max break time for Teller %d: %d:%d:%d\r\n", i, tellers[i].max_break.hour, tellers[i].max_break.minute, tellers[i].max_break.second);
 800096a:	4a58      	ldr	r2, [pc, #352]	; (8000acc <run_manager+0x4a0>)
 800096c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000970:	21bc      	movs	r1, #188	; 0xbc
 8000972:	fb01 f303 	mul.w	r3, r1, r3
 8000976:	4413      	add	r3, r2
 8000978:	3398      	adds	r3, #152	; 0x98
 800097a:	6819      	ldr	r1, [r3, #0]
 800097c:	4a53      	ldr	r2, [pc, #332]	; (8000acc <run_manager+0x4a0>)
 800097e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000982:	20bc      	movs	r0, #188	; 0xbc
 8000984:	fb00 f303 	mul.w	r3, r0, r3
 8000988:	4413      	add	r3, r2
 800098a:	339c      	adds	r3, #156	; 0x9c
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	484f      	ldr	r0, [pc, #316]	; (8000acc <run_manager+0x4a0>)
 8000990:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8000994:	24bc      	movs	r4, #188	; 0xbc
 8000996:	fb04 f202 	mul.w	r2, r4, r2
 800099a:	4402      	add	r2, r0
 800099c:	32a0      	adds	r2, #160	; 0xa0
 800099e:	6812      	ldr	r2, [r2, #0]
 80009a0:	1d38      	adds	r0, r7, #4
 80009a2:	9201      	str	r2, [sp, #4]
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	460b      	mov	r3, r1
 80009a8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80009ac:	494b      	ldr	r1, [pc, #300]	; (8000adc <run_manager+0x4b0>)
 80009ae:	f007 ff19 	bl	80087e4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fc0b 	bl	80001d0 <strlen>
 80009ba:	4603      	mov	r3, r0
 80009bc:	b29a      	uxth	r2, r3
 80009be:	1d39      	adds	r1, r7, #4
 80009c0:	2364      	movs	r3, #100	; 0x64
 80009c2:	4844      	ldr	r0, [pc, #272]	; (8000ad4 <run_manager+0x4a8>)
 80009c4:	f003 ff54 	bl	8004870 <HAL_UART_Transmit>
			sprintf(buffer, "Min break time for Teller %d: %d:%d:%d\r\n", i, tellers[i].min_break.hour, tellers[i].min_break.minute, tellers[i].min_break.second);
 80009c8:	4a40      	ldr	r2, [pc, #256]	; (8000acc <run_manager+0x4a0>)
 80009ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80009ce:	21bc      	movs	r1, #188	; 0xbc
 80009d0:	fb01 f303 	mul.w	r3, r1, r3
 80009d4:	4413      	add	r3, r2
 80009d6:	33a4      	adds	r3, #164	; 0xa4
 80009d8:	6819      	ldr	r1, [r3, #0]
 80009da:	4a3c      	ldr	r2, [pc, #240]	; (8000acc <run_manager+0x4a0>)
 80009dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80009e0:	20bc      	movs	r0, #188	; 0xbc
 80009e2:	fb00 f303 	mul.w	r3, r0, r3
 80009e6:	4413      	add	r3, r2
 80009e8:	33a8      	adds	r3, #168	; 0xa8
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4837      	ldr	r0, [pc, #220]	; (8000acc <run_manager+0x4a0>)
 80009ee:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80009f2:	24bc      	movs	r4, #188	; 0xbc
 80009f4:	fb04 f202 	mul.w	r2, r4, r2
 80009f8:	4402      	add	r2, r0
 80009fa:	32ac      	adds	r2, #172	; 0xac
 80009fc:	6812      	ldr	r2, [r2, #0]
 80009fe:	1d38      	adds	r0, r7, #4
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	460b      	mov	r3, r1
 8000a06:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8000a0a:	4935      	ldr	r1, [pc, #212]	; (8000ae0 <run_manager+0x4b4>)
 8000a0c:	f007 feea 	bl	80087e4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fbdc 	bl	80001d0 <strlen>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	1d39      	adds	r1, r7, #4
 8000a1e:	2364      	movs	r3, #100	; 0x64
 8000a20:	482c      	ldr	r0, [pc, #176]	; (8000ad4 <run_manager+0x4a8>)
 8000a22:	f003 ff25 	bl	8004870 <HAL_UART_Transmit>
		for (int i = 1; i < 4; i++){
 8000a26:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000a30:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000a34:	2b03      	cmp	r3, #3
 8000a36:	f77f af4f 	ble.w	80008d8 <run_manager+0x2ac>
		}
	}

	for (int i = 0; i < 4; i++){
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000a40:	e039      	b.n	8000ab6 <run_manager+0x48a>
			int digit = updateDigit(i, waiting_customers);
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <run_manager+0x4b8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4619      	mov	r1, r3
 8000a48:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8000a4c:	f7ff fd96 	bl	800057c <updateDigit>
 8000a50:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
			HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2120      	movs	r1, #32
 8000a58:	4823      	ldr	r0, [pc, #140]	; (8000ae8 <run_manager+0x4bc>)
 8000a5a:	f001 ff25 	bl	80028a8 <HAL_GPIO_WritePin>
			shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, num[digit]);
 8000a5e:	4a23      	ldr	r2, [pc, #140]	; (8000aec <run_manager+0x4c0>)
 8000a60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a70:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f000 f83a 	bl	8000af4 <shiftOut>
			shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, seg[i]);
 8000a80:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <run_manager+0x4c4>)
 8000a82:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a92:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9e:	f000 f829 	bl	8000af4 <shiftOut>
			HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	4810      	ldr	r0, [pc, #64]	; (8000ae8 <run_manager+0x4bc>)
 8000aa8:	f001 fefe 	bl	80028a8 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++){
 8000aac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000ab6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	ddc1      	ble.n	8000a42 <run_manager+0x416>
		}
}
 8000abe:	bf00      	nop
 8000ac0:	bf00      	nop
 8000ac2:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200003f4 	.word	0x200003f4
 8000ad0:	08009210 	.word	0x08009210
 8000ad4:	20000344 	.word	0x20000344
 8000ad8:	08009238 	.word	0x08009238
 8000adc:	08009268 	.word	0x08009268
 8000ae0:	08009294 	.word	0x08009294
 8000ae4:	20000124 	.word	0x20000124
 8000ae8:	48000400 	.word	0x48000400
 8000aec:	20000000 	.word	0x20000000
 8000af0:	20000028 	.word	0x20000028

08000af4 <shiftOut>:



void shiftOut(GPIO_TypeDef* data_port, uint16_t data_pin, GPIO_TypeDef* clock_port, uint16_t clock_pin, uint8_t value) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	461a      	mov	r2, r3
 8000b00:	460b      	mov	r3, r1
 8000b02:	817b      	strh	r3, [r7, #10]
 8000b04:	4613      	mov	r3, r2
 8000b06:	813b      	strh	r3, [r7, #8]
	for(int ii=0x80; ii; ii>>=1) {
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e01d      	b.n	8000b4a <shiftOut+0x56>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_RESET);
 8000b0e:	893b      	ldrh	r3, [r7, #8]
 8000b10:	2200      	movs	r2, #0
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f001 fec7 	bl	80028a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pin, (value&ii)!=0);
 8000b1a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	4013      	ands	r3, r2
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bf14      	ite	ne
 8000b26:	2301      	movne	r3, #1
 8000b28:	2300      	moveq	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	897b      	ldrh	r3, [r7, #10]
 8000b30:	4619      	mov	r1, r3
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f001 feb8 	bl	80028a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_SET);
 8000b38:	893b      	ldrh	r3, [r7, #8]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f001 feb2 	bl	80028a8 <HAL_GPIO_WritePin>
	for(int ii=0x80; ii; ii>>=1) {
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	105b      	asrs	r3, r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1de      	bne.n	8000b0e <shiftOut+0x1a>
	}
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <init_breaker>:
#include "clock.h"
#include "teller.h"

Breaker breaker;

void init_breaker(void){
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	b0a1      	sub	sp, #132	; 0x84
 8000b60:	af04      	add	r7, sp, #16
	uint32_t random1 = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t random2 = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	66bb      	str	r3, [r7, #104]	; 0x68
	uint32_t random3 = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	667b      	str	r3, [r7, #100]	; 0x64

	//What time the variable for going on break will be assigned

	breaker.start_break[0] = 0;
 8000b6e:	4bae      	ldr	r3, [pc, #696]	; (8000e28 <init_breaker+0x2cc>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,&random1);
 8000b74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b78:	4619      	mov	r1, r3
 8000b7a:	48ac      	ldr	r0, [pc, #688]	; (8000e2c <init_breaker+0x2d0>)
 8000b7c:	f003 fa23 	bl	8003fc6 <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock1 = { .hour = 9, .minute = (30 + (random1 - 30) % 31), .second = (random1 % 60)};
 8000b80:	2309      	movs	r3, #9
 8000b82:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b86:	f1a3 011e 	sub.w	r1, r3, #30
 8000b8a:	4ba9      	ldr	r3, [pc, #676]	; (8000e30 <init_breaker+0x2d4>)
 8000b8c:	fba3 2301 	umull	r2, r3, r3, r1
 8000b90:	1aca      	subs	r2, r1, r3
 8000b92:	0852      	lsrs	r2, r2, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	091a      	lsrs	r2, r3, #4
 8000b98:	4613      	mov	r3, r2
 8000b9a:	015b      	lsls	r3, r3, #5
 8000b9c:	1a9b      	subs	r3, r3, r2
 8000b9e:	1aca      	subs	r2, r1, r3
 8000ba0:	f102 031e 	add.w	r3, r2, #30
 8000ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ba6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000ba8:	4ba2      	ldr	r3, [pc, #648]	; (8000e34 <init_breaker+0x2d8>)
 8000baa:	fba3 2301 	umull	r2, r3, r3, r1
 8000bae:	095a      	lsrs	r2, r3, #5
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	011b      	lsls	r3, r3, #4
 8000bb4:	1a9b      	subs	r3, r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	1aca      	subs	r2, r1, r3
 8000bba:	4613      	mov	r3, r2
 8000bbc:	663b      	str	r3, [r7, #96]	; 0x60
	WallClock temp_clock11 = { .hour = 0, .minute = (random1 % 5), .second = (random1 % 60)};
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bc2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000bc4:	4b9c      	ldr	r3, [pc, #624]	; (8000e38 <init_breaker+0x2dc>)
 8000bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8000bca:	089a      	lsrs	r2, r3, #2
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	1aca      	subs	r2, r1, r3
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	653b      	str	r3, [r7, #80]	; 0x50
 8000bd8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000bda:	4b96      	ldr	r3, [pc, #600]	; (8000e34 <init_breaker+0x2d8>)
 8000bdc:	fba3 2301 	umull	r2, r3, r3, r1
 8000be0:	095a      	lsrs	r2, r3, #5
 8000be2:	4613      	mov	r3, r2
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	1a9b      	subs	r3, r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	1aca      	subs	r2, r1, r3
 8000bec:	4613      	mov	r3, r2
 8000bee:	657b      	str	r3, [r7, #84]	; 0x54
	breaker.break_time[0] = add_clocks(breaker.break_time[0],temp_clock1);
 8000bf0:	4e8d      	ldr	r6, [pc, #564]	; (8000e28 <init_breaker+0x2cc>)
 8000bf2:	f107 0508 	add.w	r5, r7, #8
 8000bf6:	4b8c      	ldr	r3, [pc, #560]	; (8000e28 <init_breaker+0x2cc>)
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	466c      	mov	r4, sp
 8000bfc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	330c      	adds	r3, #12
 8000c0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c0e:	4628      	mov	r0, r5
 8000c10:	f000 f9df 	bl	8000fd2 <add_clocks>
 8000c14:	f106 030c 	add.w	r3, r6, #12
 8000c18:	f107 0208 	add.w	r2, r7, #8
 8000c1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration[0] = add_clocks(breaker.break_duration[0],temp_clock11);
 8000c22:	4e81      	ldr	r6, [pc, #516]	; (8000e28 <init_breaker+0x2cc>)
 8000c24:	f107 0508 	add.w	r5, r7, #8
 8000c28:	4b7f      	ldr	r3, [pc, #508]	; (8000e28 <init_breaker+0x2cc>)
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	466c      	mov	r4, sp
 8000c2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3330      	adds	r3, #48	; 0x30
 8000c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c40:	4628      	mov	r0, r5
 8000c42:	f000 f9c6 	bl	8000fd2 <add_clocks>
 8000c46:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8000c4a:	f107 0208 	add.w	r2, r7, #8
 8000c4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c50:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//What time the variable for going on break will be assigned
	breaker.start_break[1] = 0;
 8000c54:	4b74      	ldr	r3, [pc, #464]	; (8000e28 <init_breaker+0x2cc>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,&random2);
 8000c5a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4872      	ldr	r0, [pc, #456]	; (8000e2c <init_breaker+0x2d0>)
 8000c62:	f003 f9b0 	bl	8003fc6 <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock2 = { .hour = 9, .minute = (30 + (random2 - 30) % 31), .second = (random2 % 60)};
 8000c66:	2309      	movs	r3, #9
 8000c68:	643b      	str	r3, [r7, #64]	; 0x40
 8000c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c6c:	f1a3 011e 	sub.w	r1, r3, #30
 8000c70:	4b6f      	ldr	r3, [pc, #444]	; (8000e30 <init_breaker+0x2d4>)
 8000c72:	fba3 2301 	umull	r2, r3, r3, r1
 8000c76:	1aca      	subs	r2, r1, r3
 8000c78:	0852      	lsrs	r2, r2, #1
 8000c7a:	4413      	add	r3, r2
 8000c7c:	091a      	lsrs	r2, r3, #4
 8000c7e:	4613      	mov	r3, r2
 8000c80:	015b      	lsls	r3, r3, #5
 8000c82:	1a9b      	subs	r3, r3, r2
 8000c84:	1aca      	subs	r2, r1, r3
 8000c86:	f102 031e 	add.w	r3, r2, #30
 8000c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8000c8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000c8e:	4b69      	ldr	r3, [pc, #420]	; (8000e34 <init_breaker+0x2d8>)
 8000c90:	fba3 2301 	umull	r2, r3, r3, r1
 8000c94:	095a      	lsrs	r2, r3, #5
 8000c96:	4613      	mov	r3, r2
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	1a9b      	subs	r3, r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	1aca      	subs	r2, r1, r3
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	64bb      	str	r3, [r7, #72]	; 0x48
	WallClock temp_clock22 = { .hour = 0, .minute = (random2 % 5), .second = (random2 % 60)};
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000caa:	4b63      	ldr	r3, [pc, #396]	; (8000e38 <init_breaker+0x2dc>)
 8000cac:	fba3 2301 	umull	r2, r3, r3, r1
 8000cb0:	089a      	lsrs	r2, r3, #2
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	1aca      	subs	r2, r1, r3
 8000cba:	4613      	mov	r3, r2
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000cc0:	4b5c      	ldr	r3, [pc, #368]	; (8000e34 <init_breaker+0x2d8>)
 8000cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8000cc6:	095a      	lsrs	r2, r3, #5
 8000cc8:	4613      	mov	r3, r2
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	1a9b      	subs	r3, r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	1aca      	subs	r2, r1, r3
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	breaker.break_time[1] = add_clocks(breaker.break_time[1],temp_clock2);
 8000cd6:	4e54      	ldr	r6, [pc, #336]	; (8000e28 <init_breaker+0x2cc>)
 8000cd8:	f107 0508 	add.w	r5, r7, #8
 8000cdc:	4b52      	ldr	r3, [pc, #328]	; (8000e28 <init_breaker+0x2cc>)
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	466c      	mov	r4, sp
 8000ce2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ce6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3318      	adds	r3, #24
 8000cf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cf4:	4628      	mov	r0, r5
 8000cf6:	f000 f96c 	bl	8000fd2 <add_clocks>
 8000cfa:	f106 0318 	add.w	r3, r6, #24
 8000cfe:	f107 0208 	add.w	r2, r7, #8
 8000d02:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration[1] = add_clocks(breaker.break_duration[1],temp_clock22);
 8000d08:	4e47      	ldr	r6, [pc, #284]	; (8000e28 <init_breaker+0x2cc>)
 8000d0a:	f107 0508 	add.w	r5, r7, #8
 8000d0e:	4b46      	ldr	r3, [pc, #280]	; (8000e28 <init_breaker+0x2cc>)
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	466c      	mov	r4, sp
 8000d14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	333c      	adds	r3, #60	; 0x3c
 8000d24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d26:	4628      	mov	r0, r5
 8000d28:	f000 f953 	bl	8000fd2 <add_clocks>
 8000d2c:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 8000d30:	f107 0208 	add.w	r2, r7, #8
 8000d34:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//What time the variable for going on break will be assigned
	breaker.start_break[2] = 0;
 8000d3a:	4b3b      	ldr	r3, [pc, #236]	; (8000e28 <init_breaker+0x2cc>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,&random3);
 8000d40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d44:	4619      	mov	r1, r3
 8000d46:	4839      	ldr	r0, [pc, #228]	; (8000e2c <init_breaker+0x2d0>)
 8000d48:	f003 f93d 	bl	8003fc6 <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock3 = { .hour = 9, .minute = (30 + (random3 - 30) % 31), .second = (random3 % 60)};
 8000d4c:	2309      	movs	r3, #9
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d52:	f1a3 011e 	sub.w	r1, r3, #30
 8000d56:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <init_breaker+0x2d4>)
 8000d58:	fba3 2301 	umull	r2, r3, r3, r1
 8000d5c:	1aca      	subs	r2, r1, r3
 8000d5e:	0852      	lsrs	r2, r2, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	091a      	lsrs	r2, r3, #4
 8000d64:	4613      	mov	r3, r2
 8000d66:	015b      	lsls	r3, r3, #5
 8000d68:	1a9b      	subs	r3, r3, r2
 8000d6a:	1aca      	subs	r2, r1, r3
 8000d6c:	f102 031e 	add.w	r3, r2, #30
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d72:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000d74:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <init_breaker+0x2d8>)
 8000d76:	fba3 2301 	umull	r2, r3, r3, r1
 8000d7a:	095a      	lsrs	r2, r3, #5
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	1a9b      	subs	r3, r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	1aca      	subs	r2, r1, r3
 8000d86:	4613      	mov	r3, r2
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
	WallClock temp_clock33 = { .hour = 0, .minute = (random3 % 5), .second = (random3 % 60)};
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000d90:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <init_breaker+0x2dc>)
 8000d92:	fba3 2301 	umull	r2, r3, r3, r1
 8000d96:	089a      	lsrs	r2, r3, #2
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	1aca      	subs	r2, r1, r3
 8000da0:	4613      	mov	r3, r2
 8000da2:	623b      	str	r3, [r7, #32]
 8000da4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <init_breaker+0x2d8>)
 8000da8:	fba3 2301 	umull	r2, r3, r3, r1
 8000dac:	095a      	lsrs	r2, r3, #5
 8000dae:	4613      	mov	r3, r2
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	1a9b      	subs	r3, r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	1aca      	subs	r2, r1, r3
 8000db8:	4613      	mov	r3, r2
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
	breaker.break_time[2] = add_clocks(breaker.break_time[2],temp_clock3);
 8000dbc:	4e1a      	ldr	r6, [pc, #104]	; (8000e28 <init_breaker+0x2cc>)
 8000dbe:	f107 0508 	add.w	r5, r7, #8
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <init_breaker+0x2cc>)
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	466c      	mov	r4, sp
 8000dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dcc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000dd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3324      	adds	r3, #36	; 0x24
 8000dd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dda:	4628      	mov	r0, r5
 8000ddc:	f000 f8f9 	bl	8000fd2 <add_clocks>
 8000de0:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000de4:	f107 0208 	add.w	r2, r7, #8
 8000de8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration[2] =  add_clocks(breaker.break_duration[2],temp_clock33);
 8000dee:	4e0e      	ldr	r6, [pc, #56]	; (8000e28 <init_breaker+0x2cc>)
 8000df0:	f107 0508 	add.w	r5, r7, #8
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <init_breaker+0x2cc>)
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	466c      	mov	r4, sp
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3348      	adds	r3, #72	; 0x48
 8000e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	f000 f8e0 	bl	8000fd2 <add_clocks>
 8000e12:	f106 0348 	add.w	r3, r6, #72	; 0x48
 8000e16:	f107 0208 	add.w	r2, r7, #8
 8000e1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8000e20:	bf00      	nop
 8000e22:	3774      	adds	r7, #116	; 0x74
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e28:	200000cc 	.word	0x200000cc
 8000e2c:	200002e8 	.word	0x200002e8
 8000e30:	08421085 	.word	0x08421085
 8000e34:	88888889 	.word	0x88888889
 8000e38:	cccccccd 	.word	0xcccccccd

08000e3c <run_breaker>:

void run_breaker(){
 8000e3c:	b5b0      	push	{r4, r5, r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af02      	add	r7, sp, #8

	//Override automatic break if switch gets pressed
	if(((!HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)) == 1 ) || (clock_compare(breaker.break_time[0],Clock) == 1)){
 8000e42:	2102      	movs	r1, #2
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f001 fd16 	bl	8002878 <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d010      	beq.n	8000e74 <run_breaker+0x38>
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <run_breaker+0xb4>)
 8000e54:	4d27      	ldr	r5, [pc, #156]	; (8000ef4 <run_breaker+0xb8>)
 8000e56:	466c      	mov	r4, sp
 8000e58:	1d1a      	adds	r2, r3, #4
 8000e5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e5e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f105 020c 	add.w	r2, r5, #12
 8000e68:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e6a:	f000 f8f3 	bl	8001054 <clock_compare>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d102      	bne.n	8000e7a <run_breaker+0x3e>
		breaker.start_break[0] = 1;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <run_breaker+0xb8>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	601a      	str	r2, [r3, #0]
	}
	if(((!HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)) == 1 ) || (clock_compare(breaker.break_time[1],Clock) == 1)){
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e80:	f001 fcfa 	bl	8002878 <HAL_GPIO_ReadPin>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d010      	beq.n	8000eac <run_breaker+0x70>
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <run_breaker+0xb4>)
 8000e8c:	4d19      	ldr	r5, [pc, #100]	; (8000ef4 <run_breaker+0xb8>)
 8000e8e:	466c      	mov	r4, sp
 8000e90:	1d1a      	adds	r2, r3, #4
 8000e92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e96:	e884 0003 	stmia.w	r4, {r0, r1}
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f105 0218 	add.w	r2, r5, #24
 8000ea0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ea2:	f000 f8d7 	bl	8001054 <clock_compare>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d102      	bne.n	8000eb2 <run_breaker+0x76>
		breaker.start_break[0] = 1;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <run_breaker+0xb8>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
	}
	if(((!HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)) == 1 ) || (clock_compare(breaker.break_time[2],Clock) == 1)){
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f001 fcde 	bl	8002878 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d010      	beq.n	8000ee4 <run_breaker+0xa8>
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <run_breaker+0xb4>)
 8000ec4:	4d0b      	ldr	r5, [pc, #44]	; (8000ef4 <run_breaker+0xb8>)
 8000ec6:	466c      	mov	r4, sp
 8000ec8:	1d1a      	adds	r2, r3, #4
 8000eca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ece:	e884 0003 	stmia.w	r4, {r0, r1}
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8000ed8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eda:	f000 f8bb 	bl	8001054 <clock_compare>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d102      	bne.n	8000eea <run_breaker+0xae>
		breaker.start_break[0] = 1;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <run_breaker+0xb8>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]
	}

}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bdb0      	pop	{r4, r5, r7, pc}
 8000ef0:	20000038 	.word	0x20000038
 8000ef4:	200000cc 	.word	0x200000cc

08000ef8 <clock_init>:
//The main clock to be checked by the program
//Declare extern within the header file
WallClock Clock = {.hour = 9, .minute = 0, .second = 0};


WallClock clock_init(WallClock the_clock) {
 8000ef8:	b490      	push	{r4, r7}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	4638      	mov	r0, r7
 8000f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Initialize the main clock
	WallClock tempClock = the_clock;
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	463a      	mov	r2, r7
 8000f0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	tempClock.hour = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
	tempClock.minute = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
	tempClock.second = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]

	return tempClock;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	461c      	mov	r4, r3
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	3720      	adds	r7, #32
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc90      	pop	{r4, r7}
 8000f36:	4770      	bx	lr

08000f38 <day_init>:

WallClock day_init(WallClock the_clock) {
 8000f38:	b490      	push	{r4, r7}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	4638      	mov	r0, r7
 8000f42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Initialize the main clock
	WallClock tempClock = the_clock;
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	463a      	mov	r2, r7
 8000f4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	tempClock.hour = 9;
 8000f52:	2309      	movs	r3, #9
 8000f54:	617b      	str	r3, [r7, #20]
	tempClock.minute = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
	tempClock.second = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]

	return tempClock;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	461c      	mov	r4, r3
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	3720      	adds	r7, #32
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc90      	pop	{r4, r7}
 8000f76:	4770      	bx	lr

08000f78 <clock_increment>:

WallClock clock_increment(WallClock the_clock){
 8000f78:	b490      	push	{r4, r7}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	4638      	mov	r0, r7
 8000f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	WallClock tempClock = the_clock;
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	463a      	mov	r2, r7
 8000f8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Check if second is full, if so then increment
	//minute count and reset second count to 0
	//if minute count full increment hour count and reset minutes to 0
	tempClock.second++;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3301      	adds	r3, #1
 8000f96:	61fb      	str	r3, [r7, #28]
	if(tempClock.second == 60){
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	2b3c      	cmp	r3, #60	; 0x3c
 8000f9c:	d104      	bne.n	8000fa8 <clock_increment+0x30>
		tempClock.minute++;
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
		tempClock.second = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
	}
	if(tempClock.minute == 60){
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	2b3c      	cmp	r3, #60	; 0x3c
 8000fac:	d104      	bne.n	8000fb8 <clock_increment+0x40>
		tempClock.hour++;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
		tempClock.minute= 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
	}
	return tempClock;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	461c      	mov	r4, r3
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc90      	pop	{r4, r7}
 8000fd0:	4770      	bx	lr

08000fd2 <add_clocks>:

WallClock add_clocks(WallClock Clock1, WallClock Clock2){
 8000fd2:	b490      	push	{r4, r7}
 8000fd4:	b088      	sub	sp, #32
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	4638      	mov	r0, r7
 8000fdc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	WallClock tempClock = Clock1;
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	463a      	mov	r2, r7
 8000fe6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Adds seconds then minutes then hours, accounting for overflows as needed
	//Add seconds and account overflow
	tempClock.second += Clock2.second;
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff0:	4413      	add	r3, r2
 8000ff2:	61fb      	str	r3, [r7, #28]
	if(tempClock.second >= 60){
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	2b3b      	cmp	r3, #59	; 0x3b
 8000ff8:	dd0e      	ble.n	8001018 <add_clocks+0x46>
		tempClock.minute += 1;
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	61bb      	str	r3, [r7, #24]
		tempClock.second -= 60;
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	3b3c      	subs	r3, #60	; 0x3c
 8001004:	61fb      	str	r3, [r7, #28]
		if(tempClock.minute >= 60){
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	2b3b      	cmp	r3, #59	; 0x3b
 800100a:	dd05      	ble.n	8001018 <add_clocks+0x46>
			tempClock.hour += 1;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
			tempClock.minute -= 60;
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	3b3c      	subs	r3, #60	; 0x3c
 8001016:	61bb      	str	r3, [r7, #24]
		}
	}
	//Add minutes and account overflow
	tempClock.minute += Clock2.minute;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101c:	4413      	add	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
	if(tempClock.minute >= 60){
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2b3b      	cmp	r3, #59	; 0x3b
 8001024:	dd05      	ble.n	8001032 <add_clocks+0x60>
		tempClock.hour += 1;
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
		tempClock.minute -= 60;
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	3b3c      	subs	r3, #60	; 0x3c
 8001030:	61bb      	str	r3, [r7, #24]
	}
	//Add hours, don't account overflow as impossible
	tempClock.hour += Clock2.hour;
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	4413      	add	r3, r2
 8001038:	617b      	str	r3, [r7, #20]

	return tempClock;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	461c      	mov	r4, r3
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	3720      	adds	r7, #32
 800104e:	46bd      	mov	sp, r7
 8001050:	bc90      	pop	{r4, r7}
 8001052:	4770      	bx	lr

08001054 <clock_compare>:

//if clock 1 is greater than clock 2(later) then return 0
//if clock 1 is less than clock 2(earlier) then return 2
int clock_compare(WallClock Clock1, WallClock Clock2){
 8001054:	b082      	sub	sp, #8
 8001056:	b490      	push	{r4, r7}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	1d3c      	adds	r4, r7, #4
 800105e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001062:	61fb      	str	r3, [r7, #28]
	if(Clock1.hour == Clock2.hour){
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	429a      	cmp	r2, r3
 800106a:	d121      	bne.n	80010b0 <clock_compare+0x5c>
		if(Clock1.minute == Clock2.minute){
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	6a3b      	ldr	r3, [r7, #32]
 8001070:	429a      	cmp	r2, r3
 8001072:	d111      	bne.n	8001098 <clock_compare+0x44>
			if(Clock1.second == Clock2.second){
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	429a      	cmp	r2, r3
 800107a:	d101      	bne.n	8001080 <clock_compare+0x2c>
				return 1;
 800107c:	2301      	movs	r3, #1
 800107e:	e024      	b.n	80010ca <clock_compare+0x76>
			}
			else if(Clock1.second > Clock2.second){
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	429a      	cmp	r2, r3
 8001086:	dd01      	ble.n	800108c <clock_compare+0x38>
				return 0;
 8001088:	2300      	movs	r3, #0
 800108a:	e01e      	b.n	80010ca <clock_compare+0x76>
			}
			else if(Clock1.second < Clock2.second){
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	429a      	cmp	r2, r3
 8001092:	da19      	bge.n	80010c8 <clock_compare+0x74>
				return 2;
 8001094:	2302      	movs	r3, #2
 8001096:	e018      	b.n	80010ca <clock_compare+0x76>
			}
		}
		else if(Clock1.minute > Clock2.minute){
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	429a      	cmp	r2, r3
 800109e:	dd01      	ble.n	80010a4 <clock_compare+0x50>
			return 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e012      	b.n	80010ca <clock_compare+0x76>
		}
		else if(Clock1.minute < Clock2.minute){
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	da0d      	bge.n	80010c8 <clock_compare+0x74>
			return 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	e00c      	b.n	80010ca <clock_compare+0x76>
		}
	}
	else if(Clock1.hour > Clock2.hour){
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dd01      	ble.n	80010bc <clock_compare+0x68>
		return 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e006      	b.n	80010ca <clock_compare+0x76>
	}
	else if(Clock1.hour < Clock2.hour){
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	da01      	bge.n	80010c8 <clock_compare+0x74>
		return 2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	e000      	b.n	80010ca <clock_compare+0x76>
	}
	return 0;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc90      	pop	{r4, r7}
 80010d2:	b002      	add	sp, #8
 80010d4:	4770      	bx	lr
	...

080010d8 <init_GPIO>:
WallClock max_customer_wait;
int total_customers;
WallClock fiveOclockSomewhere = {.hour = 17, .minute = 0, .second = 0};


void init_GPIO(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b29      	ldr	r3, [pc, #164]	; (8001184 <init_GPIO+0xac>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a28      	ldr	r2, [pc, #160]	; (8001184 <init_GPIO+0xac>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <init_GPIO+0xac>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	4b23      	ldr	r3, [pc, #140]	; (8001184 <init_GPIO+0xac>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	4a22      	ldr	r2, [pc, #136]	; (8001184 <init_GPIO+0xac>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <init_GPIO+0xac>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pins : SHLD_D13_Pin SHLD_D12_Pin SHLD_D11_Pin SHLD_D7_SEG7_Clock_Pin */
	GPIO_InitStruct.Pin = SHLD_D13_Pin|SHLD_D12_Pin|SHLD_D11_Pin|SHLD_D7_SEG7_Clock_Pin;
 800111e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001122:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	4619      	mov	r1, r3
 8001136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113a:	f001 f9f3 	bl	8002524 <HAL_GPIO_Init>

	/*Configure GPIO pin : SHLD_D8_SEG7_Data_Pin */
	GPIO_InitStruct.Pin = SHLD_D8_SEG7_Data_Pin;
 800113e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001142:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800114c:	2301      	movs	r3, #1
 800114e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SHLD_D8_SEG7_Data_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	4619      	mov	r1, r3
 8001156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115a:	f001 f9e3 	bl	8002524 <HAL_GPIO_Init>

	/*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
	GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 800115e:	2320      	movs	r3, #32
 8001160:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	2301      	movs	r3, #1
 8001164:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	4619      	mov	r1, r3
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <init_GPIO+0xb0>)
 8001176:	f001 f9d5 	bl	8002524 <HAL_GPIO_Init>
}
 800117a:	bf00      	nop
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	48000400 	.word	0x48000400

0800118c <init_customer>:

void init_customer(){
 800118c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af04      	add	r7, sp, #16
	total_customers = 0;
 8001192:	4b3f      	ldr	r3, [pc, #252]	; (8001290 <init_customer+0x104>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
	total_customer_wait = clock_init(total_customer_wait);
 8001198:	4c3e      	ldr	r4, [pc, #248]	; (8001294 <init_customer+0x108>)
 800119a:	4638      	mov	r0, r7
 800119c:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <init_customer+0x108>)
 800119e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a0:	f7ff feaa 	bl	8000ef8 <clock_init>
 80011a4:	463b      	mov	r3, r7
 80011a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	max_customer_waiting = 0;
 80011ae:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <init_customer+0x10c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
	max_customer_wait = clock_init(max_customer_wait);
 80011b4:	4c39      	ldr	r4, [pc, #228]	; (800129c <init_customer+0x110>)
 80011b6:	4638      	mov	r0, r7
 80011b8:	4b38      	ldr	r3, [pc, #224]	; (800129c <init_customer+0x110>)
 80011ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011bc:	f7ff fe9c 	bl	8000ef8 <clock_init>
 80011c0:	463b      	mov	r3, r7
 80011c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	waiting_customers = 0;
 80011ca:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <init_customer+0x114>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
	HAL_RNG_GenerateRandomNumber(&hrng, random_new_customer);
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <init_customer+0x118>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	4834      	ldr	r0, [pc, #208]	; (80012a8 <init_customer+0x11c>)
 80011d8:	f002 fef5 	bl	8003fc6 <HAL_RNG_GenerateRandomNumber>
	new_customer_time.hour = 0;
 80011dc:	4b33      	ldr	r3, [pc, #204]	; (80012ac <init_customer+0x120>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
	new_customer_time.minute = (*random_new_customer % 5);
 80011e2:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <init_customer+0x118>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6819      	ldr	r1, [r3, #0]
 80011e8:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <init_customer+0x124>)
 80011ea:	fba3 2301 	umull	r2, r3, r3, r1
 80011ee:	089a      	lsrs	r2, r3, #2
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	1aca      	subs	r2, r1, r3
 80011f8:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <init_customer+0x120>)
 80011fa:	605a      	str	r2, [r3, #4]
	new_customer_time.second = (*random_new_customer % 60);
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <init_customer+0x118>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6819      	ldr	r1, [r3, #0]
 8001202:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <init_customer+0x128>)
 8001204:	fba3 2301 	umull	r2, r3, r3, r1
 8001208:	095a      	lsrs	r2, r3, #5
 800120a:	4613      	mov	r3, r2
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	1a9b      	subs	r3, r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	1aca      	subs	r2, r1, r3
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <init_customer+0x120>)
 8001216:	609a      	str	r2, [r3, #8]
	new_customer_time = add_clocks(new_customer_time, Clock);
 8001218:	4e24      	ldr	r6, [pc, #144]	; (80012ac <init_customer+0x120>)
 800121a:	463d      	mov	r5, r7
 800121c:	4c23      	ldr	r4, [pc, #140]	; (80012ac <init_customer+0x120>)
 800121e:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <init_customer+0x12c>)
 8001220:	466b      	mov	r3, sp
 8001222:	ca07      	ldmia	r2, {r0, r1, r2}
 8001224:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001228:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800122c:	4628      	mov	r0, r5
 800122e:	f7ff fed0 	bl	8000fd2 <add_clocks>
 8001232:	4634      	mov	r4, r6
 8001234:	463b      	mov	r3, r7
 8001236:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800123a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	init_GPIO();
 800123e:	f7ff ff4b 	bl	80010d8 <init_GPIO>
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2120      	movs	r1, #32
 8001246:	481d      	ldr	r0, [pc, #116]	; (80012bc <init_customer+0x130>)
 8001248:	f001 fb2e 	bl	80028a8 <HAL_GPIO_WritePin>
			shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, 0);
 800124c:	2300      	movs	r3, #0
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001254:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001260:	f7ff fc48 	bl	8000af4 <shiftOut>
			shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, 0);
 8001264:	2300      	movs	r3, #0
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800126c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f7ff fc3c 	bl	8000af4 <shiftOut>
			HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 800127c:	2201      	movs	r2, #1
 800127e:	2120      	movs	r1, #32
 8001280:	480e      	ldr	r0, [pc, #56]	; (80012bc <init_customer+0x130>)
 8001282:	f001 fb11 	bl	80028a8 <HAL_GPIO_WritePin>

}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128e:	bf00      	nop
 8001290:	200002e4 	.word	0x200002e4
 8001294:	200002cc 	.word	0x200002cc
 8001298:	20000120 	.word	0x20000120
 800129c:	200002d8 	.word	0x200002d8
 80012a0:	20000124 	.word	0x20000124
 80012a4:	200002c8 	.word	0x200002c8
 80012a8:	200002e8 	.word	0x200002e8
 80012ac:	200002b8 	.word	0x200002b8
 80012b0:	cccccccd 	.word	0xcccccccd
 80012b4:	88888889 	.word	0x88888889
 80012b8:	20000038 	.word	0x20000038
 80012bc:	48000400 	.word	0x48000400

080012c0 <run_customer>:



void run_customer(){
 80012c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c2:	b093      	sub	sp, #76	; 0x4c
 80012c4:	af04      	add	r7, sp, #16
	// shift customers if first customers want to
	if((waiting[0] == NULL) && waiting[1] != NULL){
 80012c6:	4b6c      	ldr	r3, [pc, #432]	; (8001478 <run_customer+0x1b8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d11c      	bne.n	8001308 <run_customer+0x48>
 80012ce:	4b6a      	ldr	r3, [pc, #424]	; (8001478 <run_customer+0x1b8>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d018      	beq.n	8001308 <run_customer+0x48>
		for (int i = 0; i < waiting_customers; i++){
 80012d6:	2300      	movs	r3, #0
 80012d8:	637b      	str	r3, [r7, #52]	; 0x34
 80012da:	e00b      	b.n	80012f4 <run_customer+0x34>
			waiting[i] = waiting[i+1];
 80012dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012de:	3301      	adds	r3, #1
 80012e0:	4a65      	ldr	r2, [pc, #404]	; (8001478 <run_customer+0x1b8>)
 80012e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012e6:	4964      	ldr	r1, [pc, #400]	; (8001478 <run_customer+0x1b8>)
 80012e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < waiting_customers; i++){
 80012ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f0:	3301      	adds	r3, #1
 80012f2:	637b      	str	r3, [r7, #52]	; 0x34
 80012f4:	4b61      	ldr	r3, [pc, #388]	; (800147c <run_customer+0x1bc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbee      	blt.n	80012dc <run_customer+0x1c>
//			waiting[i]->id = waiting[i+1]->id;
//			waiting[i]->left_queue_time = waiting[i+1]->left_queue_time;
//			waiting[i]->service_time = waiting[i+1]->service_time;
//			waiting[i]->total_queue_time = waiting[i+1]->total_queue_time;
		}
		waiting_customers--;
 80012fe:	4b5f      	ldr	r3, [pc, #380]	; (800147c <run_customer+0x1bc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3b01      	subs	r3, #1
 8001304:	4a5d      	ldr	r2, [pc, #372]	; (800147c <run_customer+0x1bc>)
 8001306:	6013      	str	r3, [r2, #0]
	}

	for (int i = 0; i < waiting_customers; i++){
 8001308:	2300      	movs	r3, #0
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
 800130c:	e015      	b.n	800133a <run_customer+0x7a>
		waiting[i]->total_queue_time = clock_increment(waiting[i]->total_queue_time);
 800130e:	4a5a      	ldr	r2, [pc, #360]	; (8001478 <run_customer+0x1b8>)
 8001310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	4958      	ldr	r1, [pc, #352]	; (8001478 <run_customer+0x1b8>)
 8001318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800131a:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 800131e:	4638      	mov	r0, r7
 8001320:	3328      	adds	r3, #40	; 0x28
 8001322:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001324:	f7ff fe28 	bl	8000f78 <clock_increment>
 8001328:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800132c:	463a      	mov	r2, r7
 800132e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001330:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < waiting_customers; i++){
 8001334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001336:	3301      	adds	r3, #1
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
 800133a:	4b50      	ldr	r3, [pc, #320]	; (800147c <run_customer+0x1bc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001340:	429a      	cmp	r2, r3
 8001342:	dbe4      	blt.n	800130e <run_customer+0x4e>
	}

	// add new customer if enough time has passed
	if (clock_compare(Clock, new_customer_time) == 1 && clock_compare(Clock, fiveOclockSomewhere) == 2){
 8001344:	4b4e      	ldr	r3, [pc, #312]	; (8001480 <run_customer+0x1c0>)
 8001346:	4a4f      	ldr	r2, [pc, #316]	; (8001484 <run_customer+0x1c4>)
 8001348:	466c      	mov	r4, sp
 800134a:	1d19      	adds	r1, r3, #4
 800134c:	c903      	ldmia	r1, {r0, r1}
 800134e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	ca07      	ldmia	r2, {r0, r1, r2}
 8001356:	f7ff fe7d 	bl	8001054 <clock_compare>
 800135a:	4603      	mov	r3, r0
 800135c:	2b01      	cmp	r3, #1
 800135e:	d17d      	bne.n	800145c <run_customer+0x19c>
 8001360:	4b49      	ldr	r3, [pc, #292]	; (8001488 <run_customer+0x1c8>)
 8001362:	4a48      	ldr	r2, [pc, #288]	; (8001484 <run_customer+0x1c4>)
 8001364:	466c      	mov	r4, sp
 8001366:	1d19      	adds	r1, r3, #4
 8001368:	c903      	ldmia	r1, {r0, r1}
 800136a:	e884 0003 	stmia.w	r4, {r0, r1}
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	ca07      	ldmia	r2, {r0, r1, r2}
 8001372:	f7ff fe6f 	bl	8001054 <clock_compare>
 8001376:	4603      	mov	r3, r0
 8001378:	2b02      	cmp	r3, #2
 800137a:	d16f      	bne.n	800145c <run_customer+0x19c>
//		char buf[20];
//				sprintf(buf, "\r\n\r\n%d\r\n\r\n", waiting[1]->id);
//				HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), 100);
		HAL_RNG_GenerateRandomNumber(&hrng, random_service_time);
 800137c:	4b43      	ldr	r3, [pc, #268]	; (800148c <run_customer+0x1cc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	4843      	ldr	r0, [pc, #268]	; (8001490 <run_customer+0x1d0>)
 8001384:	f002 fe1f 	bl	8003fc6 <HAL_RNG_GenerateRandomNumber>
//		WallClock service_time = { .hour = 0, .minute = (*random_service_time % 7), .second = (*random_service_time % 60)};
		WallClock service_time = { .hour = 0, .minute = 2, .second = 31};
 8001388:	4a42      	ldr	r2, [pc, #264]	; (8001494 <run_customer+0x1d4>)
 800138a:	f107 0320 	add.w	r3, r7, #32
 800138e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001390:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Customer *c = malloc(sizeof(Customer));
 8001394:	2034      	movs	r0, #52	; 0x34
 8001396:	f007 f971 	bl	800867c <malloc>
 800139a:	4603      	mov	r3, r0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
		c->service_time = service_time;
 800139e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a0:	3304      	adds	r3, #4
 80013a2:	f107 0220 	add.w	r2, r7, #32
 80013a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80013a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		c->id = ++total_customers;
 80013ac:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <run_customer+0x1d8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a39      	ldr	r2, [pc, #228]	; (8001498 <run_customer+0x1d8>)
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <run_customer+0x1d8>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013bc:	601a      	str	r2, [r3, #0]
		c->entered_queue_time = Clock;
 80013be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c0:	4a30      	ldr	r2, [pc, #192]	; (8001484 <run_customer+0x1c4>)
 80013c2:	3310      	adds	r3, #16
 80013c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80013c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		c->total_queue_time = (WallClock) {.hour = 0, .minute = 0, .second = 0};
 80013ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013cc:	2200      	movs	r2, #0
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d2:	2200      	movs	r2, #0
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	2200      	movs	r2, #0
 80013da:	631a      	str	r2, [r3, #48]	; 0x30
		waiting[waiting_customers++] = c;
 80013dc:	4b27      	ldr	r3, [pc, #156]	; (800147c <run_customer+0x1bc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	4926      	ldr	r1, [pc, #152]	; (800147c <run_customer+0x1bc>)
 80013e4:	600a      	str	r2, [r1, #0]
 80013e6:	4924      	ldr	r1, [pc, #144]	; (8001478 <run_customer+0x1b8>)
 80013e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_RNG_GenerateRandomNumber(&hrng, random_new_customer);
 80013ee:	4b2b      	ldr	r3, [pc, #172]	; (800149c <run_customer+0x1dc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4619      	mov	r1, r3
 80013f4:	4826      	ldr	r0, [pc, #152]	; (8001490 <run_customer+0x1d0>)
 80013f6:	f002 fde6 	bl	8003fc6 <HAL_RNG_GenerateRandomNumber>
		new_customer_time.hour = 0;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <run_customer+0x1c0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
		new_customer_time.minute = (*random_new_customer % 5);
 8001400:	4b26      	ldr	r3, [pc, #152]	; (800149c <run_customer+0x1dc>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6819      	ldr	r1, [r3, #0]
 8001406:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <run_customer+0x1e0>)
 8001408:	fba3 2301 	umull	r2, r3, r3, r1
 800140c:	089a      	lsrs	r2, r3, #2
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	1aca      	subs	r2, r1, r3
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <run_customer+0x1c0>)
 8001418:	605a      	str	r2, [r3, #4]
		new_customer_time.second = (*random_new_customer % 60);
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <run_customer+0x1dc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <run_customer+0x1e4>)
 8001422:	fba3 2301 	umull	r2, r3, r3, r1
 8001426:	095a      	lsrs	r2, r3, #5
 8001428:	4613      	mov	r3, r2
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	1aca      	subs	r2, r1, r3
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <run_customer+0x1c0>)
 8001434:	609a      	str	r2, [r3, #8]
		new_customer_time = add_clocks(new_customer_time, Clock);
 8001436:	4e12      	ldr	r6, [pc, #72]	; (8001480 <run_customer+0x1c0>)
 8001438:	463d      	mov	r5, r7
 800143a:	4c11      	ldr	r4, [pc, #68]	; (8001480 <run_customer+0x1c0>)
 800143c:	4a11      	ldr	r2, [pc, #68]	; (8001484 <run_customer+0x1c4>)
 800143e:	466b      	mov	r3, sp
 8001440:	ca07      	ldmia	r2, {r0, r1, r2}
 8001442:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001446:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800144a:	4628      	mov	r0, r5
 800144c:	f7ff fdc1 	bl	8000fd2 <add_clocks>
 8001450:	4634      	mov	r4, r6
 8001452:	463b      	mov	r3, r7
 8001454:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001458:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//		sprintf(buf, "\r\n\r\n%d:%d:%d\r\n\r\n", &waiting[0]->service_time.hour, &waiting[0]->service_time.minute, &waiting[0]->service_time.second);
//				print(buf);
	}

	// update max customers waiting
	if (max_customer_waiting < waiting_customers){
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <run_customer+0x1e8>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <run_customer+0x1bc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	da03      	bge.n	8001470 <run_customer+0x1b0>
		max_customer_waiting = waiting_customers;
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <run_customer+0x1bc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <run_customer+0x1e8>)
 800146e:	6013      	str	r3, [r2, #0]
	}

//	uint32_t display_num = 0;


}
 8001470:	bf00      	nop
 8001472:	373c      	adds	r7, #60	; 0x3c
 8001474:	46bd      	mov	sp, r7
 8001476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001478:	20000128 	.word	0x20000128
 800147c:	20000124 	.word	0x20000124
 8001480:	200002b8 	.word	0x200002b8
 8001484:	20000038 	.word	0x20000038
 8001488:	20000044 	.word	0x20000044
 800148c:	200002c4 	.word	0x200002c4
 8001490:	200002e8 	.word	0x200002e8
 8001494:	080092c0 	.word	0x080092c0
 8001498:	200002e4 	.word	0x200002e4
 800149c:	200002c8 	.word	0x200002c8
 80014a0:	cccccccd 	.word	0xcccccccd
 80014a4:	88888889 	.word	0x88888889
 80014a8:	20000120 	.word	0x20000120

080014ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b0:	f000 feaa 	bl	8002208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b4:	f000 f87e 	bl	80015b4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b8:	f000 f948 	bl	800174c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014bc:	f000 f916 	bl	80016ec <MX_USART2_UART_Init>
  MX_RNG_Init();
 80014c0:	f000 f8ca 	bl	8001658 <MX_RNG_Init>
  MX_TIM6_Init();
 80014c4:	f000 f8dc 	bl	8001680 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80014c8:	4822      	ldr	r0, [pc, #136]	; (8001554 <main+0xa8>)
 80014ca:	f002 fea9 	bl	8004220 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014ce:	f003 ff5b 	bl	8005388 <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 80014d2:	4821      	ldr	r0, [pc, #132]	; (8001558 <main+0xac>)
 80014d4:	f004 f854 	bl	8005580 <osMutexNew>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a20      	ldr	r2, [pc, #128]	; (800155c <main+0xb0>)
 80014dc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Teller0 */
  Teller0Handle = osThreadNew(StartTeller0, NULL, &Teller0_attributes);
 80014de:	4a20      	ldr	r2, [pc, #128]	; (8001560 <main+0xb4>)
 80014e0:	2100      	movs	r1, #0
 80014e2:	4820      	ldr	r0, [pc, #128]	; (8001564 <main+0xb8>)
 80014e4:	f003 ff9a 	bl	800541c <osThreadNew>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a1f      	ldr	r2, [pc, #124]	; (8001568 <main+0xbc>)
 80014ec:	6013      	str	r3, [r2, #0]

  /* creation of Customers */
  CustomersHandle = osThreadNew(StartCustomers, NULL, &Customers_attributes);
 80014ee:	4a1f      	ldr	r2, [pc, #124]	; (800156c <main+0xc0>)
 80014f0:	2100      	movs	r1, #0
 80014f2:	481f      	ldr	r0, [pc, #124]	; (8001570 <main+0xc4>)
 80014f4:	f003 ff92 	bl	800541c <osThreadNew>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4a1e      	ldr	r2, [pc, #120]	; (8001574 <main+0xc8>)
 80014fc:	6013      	str	r3, [r2, #0]

  /* creation of Clock */
  ClockHandle = osThreadNew(StartClock, NULL, &Clock_attributes);
 80014fe:	4a1e      	ldr	r2, [pc, #120]	; (8001578 <main+0xcc>)
 8001500:	2100      	movs	r1, #0
 8001502:	481e      	ldr	r0, [pc, #120]	; (800157c <main+0xd0>)
 8001504:	f003 ff8a 	bl	800541c <osThreadNew>
 8001508:	4603      	mov	r3, r0
 800150a:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <main+0xd4>)
 800150c:	6013      	str	r3, [r2, #0]

  /* creation of Manager */
  ManagerHandle = osThreadNew(StartManager, NULL, &Manager_attributes);
 800150e:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <main+0xd8>)
 8001510:	2100      	movs	r1, #0
 8001512:	481d      	ldr	r0, [pc, #116]	; (8001588 <main+0xdc>)
 8001514:	f003 ff82 	bl	800541c <osThreadNew>
 8001518:	4603      	mov	r3, r0
 800151a:	4a1c      	ldr	r2, [pc, #112]	; (800158c <main+0xe0>)
 800151c:	6013      	str	r3, [r2, #0]

  /* creation of Breaker */
  BreakerHandle = osThreadNew(StartBreaker, NULL, &Breaker_attributes);
 800151e:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <main+0xe4>)
 8001520:	2100      	movs	r1, #0
 8001522:	481c      	ldr	r0, [pc, #112]	; (8001594 <main+0xe8>)
 8001524:	f003 ff7a 	bl	800541c <osThreadNew>
 8001528:	4603      	mov	r3, r0
 800152a:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <main+0xec>)
 800152c:	6013      	str	r3, [r2, #0]

  /* creation of Teller1 */
  Teller1Handle = osThreadNew(StartTeller1, NULL, &Teller1_attributes);
 800152e:	4a1b      	ldr	r2, [pc, #108]	; (800159c <main+0xf0>)
 8001530:	2100      	movs	r1, #0
 8001532:	481b      	ldr	r0, [pc, #108]	; (80015a0 <main+0xf4>)
 8001534:	f003 ff72 	bl	800541c <osThreadNew>
 8001538:	4603      	mov	r3, r0
 800153a:	4a1a      	ldr	r2, [pc, #104]	; (80015a4 <main+0xf8>)
 800153c:	6013      	str	r3, [r2, #0]

  /* creation of Teller2 */
  Teller2Handle = osThreadNew(StartTeller2, NULL, &Teller2_attributes);
 800153e:	4a1a      	ldr	r2, [pc, #104]	; (80015a8 <main+0xfc>)
 8001540:	2100      	movs	r1, #0
 8001542:	481a      	ldr	r0, [pc, #104]	; (80015ac <main+0x100>)
 8001544:	f003 ff6a 	bl	800541c <osThreadNew>
 8001548:	4603      	mov	r3, r0
 800154a:	4a19      	ldr	r2, [pc, #100]	; (80015b0 <main+0x104>)
 800154c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800154e:	f003 ff3f 	bl	80053d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001552:	e7fe      	b.n	8001552 <main+0xa6>
 8001554:	200002f8 	.word	0x200002f8
 8001558:	08009490 	.word	0x08009490
 800155c:	200003e8 	.word	0x200003e8
 8001560:	08009394 	.word	0x08009394
 8001564:	080018a5 	.word	0x080018a5
 8001568:	200003cc 	.word	0x200003cc
 800156c:	080093b8 	.word	0x080093b8
 8001570:	080018d9 	.word	0x080018d9
 8001574:	200003d0 	.word	0x200003d0
 8001578:	080093dc 	.word	0x080093dc
 800157c:	08001909 	.word	0x08001909
 8001580:	200003d4 	.word	0x200003d4
 8001584:	08009400 	.word	0x08009400
 8001588:	08001a71 	.word	0x08001a71
 800158c:	200003d8 	.word	0x200003d8
 8001590:	08009424 	.word	0x08009424
 8001594:	08001aa1 	.word	0x08001aa1
 8001598:	200003dc 	.word	0x200003dc
 800159c:	08009448 	.word	0x08009448
 80015a0:	08001ad5 	.word	0x08001ad5
 80015a4:	200003e0 	.word	0x200003e0
 80015a8:	0800946c 	.word	0x0800946c
 80015ac:	08001b0d 	.word	0x08001b0d
 80015b0:	200003e4 	.word	0x200003e4

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b096      	sub	sp, #88	; 0x58
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	2244      	movs	r2, #68	; 0x44
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f007 f92e 	bl	8008824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015da:	f001 f98b 	bl	80028f4 <HAL_PWREx_ControlVoltageScaling>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015e4:	f000 faae 	bl	8001b44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80015e8:	2310      	movs	r3, #16
 80015ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015ec:	2301      	movs	r3, #1
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015f4:	2360      	movs	r3, #96	; 0x60
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f8:	2302      	movs	r3, #2
 80015fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015fc:	2301      	movs	r3, #1
 80015fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001600:	2301      	movs	r3, #1
 8001602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001604:	2328      	movs	r3, #40	; 0x28
 8001606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001608:	2307      	movs	r3, #7
 800160a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800160c:	2302      	movs	r3, #2
 800160e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001610:	2302      	movs	r3, #2
 8001612:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4618      	mov	r0, r3
 800161a:	f001 f9c1 	bl	80029a0 <HAL_RCC_OscConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001624:	f000 fa8e 	bl	8001b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001628:	230f      	movs	r3, #15
 800162a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162c:	2303      	movs	r3, #3
 800162e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	2104      	movs	r1, #4
 8001640:	4618      	mov	r0, r3
 8001642:	f001 fd89 	bl	8003158 <HAL_RCC_ClockConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800164c:	f000 fa7a 	bl	8001b44 <Error_Handler>
  }
}
 8001650:	bf00      	nop
 8001652:	3758      	adds	r7, #88	; 0x58
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_RNG_Init+0x20>)
 800165e:	4a07      	ldr	r2, [pc, #28]	; (800167c <MX_RNG_Init+0x24>)
 8001660:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_RNG_Init+0x20>)
 8001664:	f002 fc58 	bl	8003f18 <HAL_RNG_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800166e:	f000 fa69 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200002e8 	.word	0x200002e8
 800167c:	50060800 	.word	0x50060800

08001680 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_TIM6_Init+0x64>)
 8001692:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <MX_TIM6_Init+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_TIM6_Init+0x64>)
 8001698:	2202      	movs	r2, #2
 800169a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_TIM6_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 224;
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <MX_TIM6_Init+0x64>)
 80016a4:	22e0      	movs	r2, #224	; 0xe0
 80016a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_TIM6_Init+0x64>)
 80016aa:	2280      	movs	r2, #128	; 0x80
 80016ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <MX_TIM6_Init+0x64>)
 80016b0:	f002 fd5e 	bl	8004170 <HAL_TIM_Base_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80016ba:	f000 fa43 	bl	8001b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <MX_TIM6_Init+0x64>)
 80016cc:	f002 ffdc 	bl	8004688 <HAL_TIMEx_MasterConfigSynchronization>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80016d6:	f000 fa35 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200002f8 	.word	0x200002f8
 80016e8:	40001000 	.word	0x40001000

080016ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_USART2_UART_Init+0x58>)
 80016f2:	4a15      	ldr	r2, [pc, #84]	; (8001748 <MX_USART2_UART_Init+0x5c>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <MX_USART2_UART_Init+0x58>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_USART2_UART_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_USART2_UART_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_USART2_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_USART2_UART_Init+0x58>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_USART2_UART_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_USART2_UART_Init+0x58>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_USART2_UART_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_USART2_UART_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_USART2_UART_Init+0x58>)
 8001730:	f003 f850 	bl	80047d4 <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800173a:	f000 fa03 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000344 	.word	0x20000344
 8001748:	40004400 	.word	0x40004400

0800174c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001762:	4b45      	ldr	r3, [pc, #276]	; (8001878 <MX_GPIO_Init+0x12c>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	4a44      	ldr	r2, [pc, #272]	; (8001878 <MX_GPIO_Init+0x12c>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176e:	4b42      	ldr	r3, [pc, #264]	; (8001878 <MX_GPIO_Init+0x12c>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177a:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <MX_GPIO_Init+0x12c>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	4a3e      	ldr	r2, [pc, #248]	; (8001878 <MX_GPIO_Init+0x12c>)
 8001780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001786:	4b3c      	ldr	r3, [pc, #240]	; (8001878 <MX_GPIO_Init+0x12c>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	4b39      	ldr	r3, [pc, #228]	; (8001878 <MX_GPIO_Init+0x12c>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	4a38      	ldr	r2, [pc, #224]	; (8001878 <MX_GPIO_Init+0x12c>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179e:	4b36      	ldr	r3, [pc, #216]	; (8001878 <MX_GPIO_Init+0x12c>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	4b33      	ldr	r3, [pc, #204]	; (8001878 <MX_GPIO_Init+0x12c>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	4a32      	ldr	r2, [pc, #200]	; (8001878 <MX_GPIO_Init+0x12c>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b6:	4b30      	ldr	r3, [pc, #192]	; (8001878 <MX_GPIO_Init+0x12c>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2120      	movs	r1, #32
 80017c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ca:	f001 f86d 	bl	80028a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	4825      	ldr	r0, [pc, #148]	; (800187c <MX_GPIO_Init+0x130>)
 80017e6:	f000 fe9d 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ea:	2303      	movs	r3, #3
 80017ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ee:	2303      	movs	r3, #3
 80017f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	481f      	ldr	r0, [pc, #124]	; (800187c <MX_GPIO_Init+0x130>)
 80017fe:	f000 fe91 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 Switch1_Pin Switch2_Pin PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Switch1_Pin|Switch2_Pin|GPIO_PIN_10;
 8001802:	f240 4313 	movw	r3, #1043	; 0x413
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181a:	f000 fe83 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800181e:	2320      	movs	r3, #32
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001822:	2301      	movs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4619      	mov	r1, r3
 8001834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001838:	f000 fe74 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch3_Pin PB10 PB4 */
  GPIO_InitStruct.Pin = Switch3_Pin|GPIO_PIN_10|GPIO_PIN_4;
 800183c:	f240 4311 	movw	r3, #1041	; 0x411
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	480b      	ldr	r0, [pc, #44]	; (8001880 <MX_GPIO_Init+0x134>)
 8001852:	f000 fe67 	bl	8002524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <MX_GPIO_Init+0x130>)
 800186a:	f000 fe5b 	bl	8002524 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800186e:	bf00      	nop
 8001870:	3728      	adds	r7, #40	; 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	48000800 	.word	0x48000800
 8001880:	48000400 	.word	0x48000400

08001884 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	update_flag = 1;
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	200003ec 	.word	0x200003ec

080018a4 <StartTeller0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTeller0 */
void StartTeller0(void *argument)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Initialize 3 tellers
  /* Infinite loop */
	init_teller(0);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f000 fac5 	bl	8001e3c <init_teller>
  for(;;)
  {
		osMutexAcquire(MUTEXHandle, osWaitForever);
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <StartTeller0+0x30>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f04f 31ff 	mov.w	r1, #4294967295
 80018ba:	4618      	mov	r0, r3
 80018bc:	f003 fee6 	bl	800568c <osMutexAcquire>
		manage_teller(0);
 80018c0:	2000      	movs	r0, #0
 80018c2:	f000 fc19 	bl	80020f8 <manage_teller>
		osMutexRelease(MUTEXHandle);
 80018c6:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <StartTeller0+0x30>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 ff29 	bl	8005722 <osMutexRelease>
		osMutexAcquire(MUTEXHandle, osWaitForever);
 80018d0:	e7ef      	b.n	80018b2 <StartTeller0+0xe>
 80018d2:	bf00      	nop
 80018d4:	200003e8 	.word	0x200003e8

080018d8 <StartCustomers>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCustomers */
void StartCustomers(void *argument)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCustomers */
  /* Infinite loop */
  init_customer();
 80018e0:	f7ff fc54 	bl	800118c <init_customer>
  for(;;)
  {

	osMutexAcquire(MUTEXHandle, osWaitForever);
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <StartCustomers+0x2c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	4618      	mov	r0, r3
 80018ee:	f003 fecd 	bl	800568c <osMutexAcquire>
	run_customer();
 80018f2:	f7ff fce5 	bl	80012c0 <run_customer>
	osMutexRelease(MUTEXHandle);
 80018f6:	4b03      	ldr	r3, [pc, #12]	; (8001904 <StartCustomers+0x2c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 ff11 	bl	8005722 <osMutexRelease>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001900:	e7f0      	b.n	80018e4 <StartCustomers+0xc>
 8001902:	bf00      	nop
 8001904:	200003e8 	.word	0x200003e8

08001908 <StartClock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClock */
void StartClock(void *argument)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b0c9      	sub	sp, #292	; 0x124
 800190c:	af02      	add	r7, sp, #8
 800190e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001916:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartClock */
  /* Infinite loop */
	Clock = day_init(Clock);
 8001918:	4c4b      	ldr	r4, [pc, #300]	; (8001a48 <StartClock+0x140>)
 800191a:	4638      	mov	r0, r7
 800191c:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <StartClock+0x140>)
 800191e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001920:	f7ff fb0a 	bl	8000f38 <day_init>
 8001924:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001928:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800192c:	4623      	mov	r3, r4
 800192e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001930:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for(;;)
  {
	if(update_flag == 1){
 8001934:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <StartClock+0x144>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	f040 8081 	bne.w	8001a40 <StartClock+0x138>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 800193e:	4b44      	ldr	r3, [pc, #272]	; (8001a50 <StartClock+0x148>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f04f 31ff 	mov.w	r1, #4294967295
 8001946:	4618      	mov	r0, r3
 8001948:	f003 fea0 	bl	800568c <osMutexAcquire>
    Clock = clock_increment(Clock);
 800194c:	4c3e      	ldr	r4, [pc, #248]	; (8001a48 <StartClock+0x140>)
 800194e:	4638      	mov	r0, r7
 8001950:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <StartClock+0x140>)
 8001952:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001954:	f7ff fb10 	bl	8000f78 <clock_increment>
 8001958:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800195c:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8001960:	4623      	mov	r3, r4
 8001962:	ca07      	ldmia	r2, {r0, r1, r2}
 8001964:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	update_flag = 0;
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <StartClock+0x144>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
    osMutexRelease(MUTEXHandle);
 800196e:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <StartClock+0x148>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f003 fed5 	bl	8005722 <osMutexRelease>
    char buffer[256];
	if((Clock.minute  % 2) == 0 && (Clock.second % 60) == 30){
 8001978:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <StartClock+0x140>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d15b      	bne.n	8001a3c <StartClock+0x134>
 8001984:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <StartClock+0x140>)
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <StartClock+0x14c>)
 800198a:	fb83 1302 	smull	r1, r3, r3, r2
 800198e:	4413      	add	r3, r2
 8001990:	1159      	asrs	r1, r3, #5
 8001992:	17d3      	asrs	r3, r2, #31
 8001994:	1ac9      	subs	r1, r1, r3
 8001996:	460b      	mov	r3, r1
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	1a5b      	subs	r3, r3, r1
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	1ad1      	subs	r1, r2, r3
 80019a0:	291e      	cmp	r1, #30
 80019a2:	d14b      	bne.n	8001a3c <StartClock+0x134>
			sprintf(buffer, "Current time: %d:%d:%d \r\n", Clock.hour, Clock.minute, Clock.second);
 80019a4:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <StartClock+0x140>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <StartClock+0x140>)
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <StartClock+0x140>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f107 0018 	add.w	r0, r7, #24
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	460b      	mov	r3, r1
 80019b8:	4927      	ldr	r1, [pc, #156]	; (8001a58 <StartClock+0x150>)
 80019ba:	f006 ff13 	bl	80087e4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80019be:	f107 0318 	add.w	r3, r7, #24
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fc04 	bl	80001d0 <strlen>
 80019c8:	4603      	mov	r3, r0
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	f107 0118 	add.w	r1, r7, #24
 80019d0:	2364      	movs	r3, #100	; 0x64
 80019d2:	4822      	ldr	r0, [pc, #136]	; (8001a5c <StartClock+0x154>)
 80019d4:	f002 ff4c 	bl	8004870 <HAL_UART_Transmit>
			sprintf(buffer,"Customers waiting in Queue: %d \r\n", waiting_customers );
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <StartClock+0x158>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	f107 0318 	add.w	r3, r7, #24
 80019e0:	4920      	ldr	r1, [pc, #128]	; (8001a64 <StartClock+0x15c>)
 80019e2:	4618      	mov	r0, r3
 80019e4:	f006 fefe 	bl	80087e4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80019e8:	f107 0318 	add.w	r3, r7, #24
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fbef 	bl	80001d0 <strlen>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	f107 0118 	add.w	r1, r7, #24
 80019fa:	2364      	movs	r3, #100	; 0x64
 80019fc:	4817      	ldr	r0, [pc, #92]	; (8001a5c <StartClock+0x154>)
 80019fe:	f002 ff37 	bl	8004870 <HAL_UART_Transmit>
			sprintf(buffer,"Teller 1: %d Teller 2: %d Teller 3: %d \r\n", tellers[1].status,tellers[2].status,tellers[3].status);
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <StartClock+0x160>)
 8001a04:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <StartClock+0x160>)
 8001a0a:	f8d3 117c 	ldr.w	r1, [r3, #380]	; 0x17c
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <StartClock+0x160>)
 8001a10:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8001a14:	f107 0018 	add.w	r0, r7, #24
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4913      	ldr	r1, [pc, #76]	; (8001a6c <StartClock+0x164>)
 8001a1e:	f006 fee1 	bl	80087e4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001a22:	f107 0318 	add.w	r3, r7, #24
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fbd2 	bl	80001d0 <strlen>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	f107 0118 	add.w	r1, r7, #24
 8001a34:	2364      	movs	r3, #100	; 0x64
 8001a36:	4809      	ldr	r0, [pc, #36]	; (8001a5c <StartClock+0x154>)
 8001a38:	f002 ff1a 	bl	8004870 <HAL_UART_Transmit>
		}
	osThreadYield();
 8001a3c:	f003 fd80 	bl	8005540 <osThreadYield>

	}

	osThreadYield();
 8001a40:	f003 fd7e 	bl	8005540 <osThreadYield>
	if(update_flag == 1){
 8001a44:	e776      	b.n	8001934 <StartClock+0x2c>
 8001a46:	bf00      	nop
 8001a48:	20000038 	.word	0x20000038
 8001a4c:	200003ec 	.word	0x200003ec
 8001a50:	200003e8 	.word	0x200003e8
 8001a54:	88888889 	.word	0x88888889
 8001a58:	08009310 	.word	0x08009310
 8001a5c:	20000344 	.word	0x20000344
 8001a60:	20000124 	.word	0x20000124
 8001a64:	0800932c 	.word	0x0800932c
 8001a68:	200003f4 	.word	0x200003f4
 8001a6c:	08009350 	.word	0x08009350

08001a70 <StartManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManager */
void StartManager(void *argument)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManager */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <StartManager+0x2c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	4618      	mov	r0, r3
 8001a82:	f003 fe03 	bl	800568c <osMutexAcquire>
	  run_manager();
 8001a86:	f7fe fdd1 	bl	800062c <run_manager>
	  osMutexRelease(MUTEXHandle);
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <StartManager+0x2c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fe47 	bl	8005722 <osMutexRelease>
	  osThreadYield();
 8001a94:	f003 fd54 	bl	8005540 <osThreadYield>
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 8001a98:	e7ee      	b.n	8001a78 <StartManager+0x8>
 8001a9a:	bf00      	nop
 8001a9c:	200003e8 	.word	0x200003e8

08001aa0 <StartBreaker>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBreaker */
void StartBreaker(void *argument)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBreaker */
  /* Infinite loop */
	init_breaker();
 8001aa8:	f7ff f858 	bl	8000b5c <init_breaker>
  for(;;)
  {
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <StartBreaker+0x30>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 fde9 	bl	800568c <osMutexAcquire>
	run_breaker();
 8001aba:	f7ff f9bf 	bl	8000e3c <run_breaker>
	osMutexRelease(MUTEXHandle);
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <StartBreaker+0x30>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 fe2d 	bl	8005722 <osMutexRelease>
	osThreadYield();
 8001ac8:	f003 fd3a 	bl	8005540 <osThreadYield>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001acc:	e7ee      	b.n	8001aac <StartBreaker+0xc>
 8001ace:	bf00      	nop
 8001ad0:	200003e8 	.word	0x200003e8

08001ad4 <StartTeller1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller1 */
void StartTeller1(void *argument)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller1 */
  /* Infinite loop */
	init_teller(1);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f000 f9ad 	bl	8001e3c <init_teller>
  for(;;)
  {
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <StartTeller1+0x34>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f04f 31ff 	mov.w	r1, #4294967295
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fdce 	bl	800568c <osMutexAcquire>
	manage_teller(1);
 8001af0:	2001      	movs	r0, #1
 8001af2:	f000 fb01 	bl	80020f8 <manage_teller>
	osMutexRelease(MUTEXHandle);
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <StartTeller1+0x34>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fe11 	bl	8005722 <osMutexRelease>
	osThreadYield();
 8001b00:	f003 fd1e 	bl	8005540 <osThreadYield>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001b04:	e7ed      	b.n	8001ae2 <StartTeller1+0xe>
 8001b06:	bf00      	nop
 8001b08:	200003e8 	.word	0x200003e8

08001b0c <StartTeller2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTeller2 */
void StartTeller2(void *argument)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTeller2 */
  /* Infinite loop */
	init_teller(2);
 8001b14:	2002      	movs	r0, #2
 8001b16:	f000 f991 	bl	8001e3c <init_teller>
  for(;;){
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <StartTeller2+0x34>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fdb2 	bl	800568c <osMutexAcquire>
	manage_teller(2);
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f000 fae5 	bl	80020f8 <manage_teller>
	osMutexRelease(MUTEXHandle);
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <StartTeller2+0x34>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fdf5 	bl	8005722 <osMutexRelease>
	osThreadYield();
 8001b38:	f003 fd02 	bl	8005540 <osThreadYield>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001b3c:	e7ed      	b.n	8001b1a <StartTeller2+0xe>
 8001b3e:	bf00      	nop
 8001b40:	200003e8 	.word	0x200003e8

08001b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <Error_Handler+0x8>
	...

08001b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_MspInit+0x4c>)
 8001b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5a:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <HAL_MspInit+0x4c>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6613      	str	r3, [r2, #96]	; 0x60
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_MspInit+0x4c>)
 8001b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_MspInit+0x4c>)
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <HAL_MspInit+0x4c>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b78:	6593      	str	r3, [r2, #88]	; 0x58
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <HAL_MspInit+0x4c>)
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	210f      	movs	r1, #15
 8001b8a:	f06f 0001 	mvn.w	r0, #1
 8001b8e:	f000 fc92 	bl	80024b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0a6      	sub	sp, #152	; 0x98
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba8:	f107 0310 	add.w	r3, r7, #16
 8001bac:	2288      	movs	r2, #136	; 0x88
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f006 fe37 	bl	8008824 <memset>
  if(hrng->Instance==RNG)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a1d      	ldr	r2, [pc, #116]	; (8001c30 <HAL_RNG_MspInit+0x90>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d133      	bne.n	8001c28 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001bc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bc4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001bc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001bda:	2307      	movs	r3, #7
 8001bdc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001bde:	2302      	movs	r3, #2
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001be2:	2302      	movs	r3, #2
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001be6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f001 fcd5 	bl	80035a0 <HAL_RCCEx_PeriphCLKConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8001bfc:	f7ff ffa2 	bl	8001b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_RNG_MspInit+0x94>)
 8001c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c04:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <HAL_RNG_MspInit+0x94>)
 8001c06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_RNG_MspInit+0x94>)
 8001c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 5, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2105      	movs	r1, #5
 8001c1c:	2050      	movs	r0, #80	; 0x50
 8001c1e:	f000 fc4a 	bl	80024b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8001c22:	2050      	movs	r0, #80	; 0x50
 8001c24:	f000 fc63 	bl	80024ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001c28:	bf00      	nop
 8001c2a:	3798      	adds	r7, #152	; 0x98
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	50060800 	.word	0x50060800
 8001c34:	40021000 	.word	0x40021000

08001c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <HAL_TIM_Base_MspInit+0x44>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d113      	bne.n	8001c72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_TIM_Base_MspInit+0x48>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	4a0c      	ldr	r2, [pc, #48]	; (8001c80 <HAL_TIM_Base_MspInit+0x48>)
 8001c50:	f043 0310 	orr.w	r3, r3, #16
 8001c54:	6593      	str	r3, [r2, #88]	; 0x58
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_TIM_Base_MspInit+0x48>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2105      	movs	r1, #5
 8001c66:	2036      	movs	r0, #54	; 0x36
 8001c68:	f000 fc25 	bl	80024b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c6c:	2036      	movs	r0, #54	; 0x36
 8001c6e:	f000 fc3e 	bl	80024ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40001000 	.word	0x40001000
 8001c80:	40021000 	.word	0x40021000

08001c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b0ac      	sub	sp, #176	; 0xb0
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2288      	movs	r2, #136	; 0x88
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f006 fdbd 	bl	8008824 <memset>
  if(huart->Instance==USART2)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a21      	ldr	r2, [pc, #132]	; (8001d34 <HAL_UART_MspInit+0xb0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d13b      	bne.n	8001d2c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 fc6d 	bl	80035a0 <HAL_RCCEx_PeriphCLKConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ccc:	f7ff ff3a 	bl	8001b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_UART_MspInit+0xb4>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <HAL_UART_MspInit+0xb4>)
 8001cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cda:	6593      	str	r3, [r2, #88]	; 0x58
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_UART_MspInit+0xb4>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <HAL_UART_MspInit+0xb4>)
 8001cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cec:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <HAL_UART_MspInit+0xb4>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf4:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_UART_MspInit+0xb4>)
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d00:	230c      	movs	r3, #12
 8001d02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d18:	2307      	movs	r3, #7
 8001d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d22:	4619      	mov	r1, r3
 8001d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d28:	f000 fbfc 	bl	8002524 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d2c:	bf00      	nop
 8001d2e:	37b0      	adds	r7, #176	; 0xb0
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40004400 	.word	0x40004400
 8001d38:	40021000 	.word	0x40021000

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d40:	e7fe      	b.n	8001d40 <NMI_Handler+0x4>

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6c:	f000 faa8 	bl	80022c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d70:	f005 fb20 	bl	80073b4 <xTaskGetSchedulerState>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d001      	beq.n	8001d7e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d7a:	f006 fa05 	bl	8008188 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <TIM6_DAC_IRQHandler+0x10>)
 8001d8a:	f002 fab9 	bl	8004300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200002f8 	.word	0x200002f8

08001d98 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <RNG_IRQHandler+0x10>)
 8001d9e:	f002 f968 	bl	8004072 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200002e8 	.word	0x200002e8

08001dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <_sbrk+0x5c>)
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <_sbrk+0x60>)
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <_sbrk+0x64>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <_sbrk+0x64>)
 8001dca:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <_sbrk+0x68>)
 8001dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d207      	bcs.n	8001dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ddc:	f006 fd90 	bl	8008900 <__errno>
 8001de0:	4603      	mov	r3, r0
 8001de2:	220c      	movs	r2, #12
 8001de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dea:	e009      	b.n	8001e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <_sbrk+0x64>)
 8001dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20018000 	.word	0x20018000
 8001e0c:	00000400 	.word	0x00000400
 8001e10:	200003f0 	.word	0x200003f0
 8001e14:	20006f38 	.word	0x20006f38

08001e18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <SystemInit+0x20>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <SystemInit+0x20>)
 8001e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <init_teller>:

Teller VOID_TELLER;


//Pass in the teller ID
void init_teller(int i) {
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6178      	str	r0, [r7, #20]
    	//Initialize ID
        tellers[i].id = i;
 8001e44:	4aab      	ldr	r2, [pc, #684]	; (80020f4 <init_teller+0x2b8>)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	21bc      	movs	r1, #188	; 0xbc
 8001e4a:	fb01 f303 	mul.w	r3, r1, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	601a      	str	r2, [r3, #0]
        // Initialize statuses
        tellers[i].status = 0;
 8001e54:	4aa7      	ldr	r2, [pc, #668]	; (80020f4 <init_teller+0x2b8>)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	21bc      	movs	r1, #188	; 0xbc
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	4413      	add	r3, r2
 8001e60:	3304      	adds	r3, #4
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
        tellers[i].take_break = 0;
 8001e66:	4aa3      	ldr	r2, [pc, #652]	; (80020f4 <init_teller+0x2b8>)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	21bc      	movs	r1, #188	; 0xbc
 8001e6c:	fb01 f303 	mul.w	r3, r1, r3
 8001e70:	4413      	add	r3, r2
 8001e72:	3308      	adds	r3, #8
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
        //service function
        tellers[i].service_end_time = clock_init(tellers[i].service_end_time);
 8001e78:	4a9e      	ldr	r2, [pc, #632]	; (80020f4 <init_teller+0x2b8>)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	21bc      	movs	r1, #188	; 0xbc
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	f103 0408 	add.w	r4, r3, #8
 8001e88:	4638      	mov	r0, r7
 8001e8a:	4a9a      	ldr	r2, [pc, #616]	; (80020f4 <init_teller+0x2b8>)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	21bc      	movs	r1, #188	; 0xbc
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	3308      	adds	r3, #8
 8001e98:	3304      	adds	r3, #4
 8001e9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e9c:	f7ff f82c 	bl	8000ef8 <clock_init>
 8001ea0:	1d23      	adds	r3, r4, #4
 8001ea2:	463a      	mov	r2, r7
 8001ea4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ea6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize metrics
        tellers[i].customers_served = 0;
 8001eaa:	4a92      	ldr	r2, [pc, #584]	; (80020f4 <init_teller+0x2b8>)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	21bc      	movs	r1, #188	; 0xbc
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3318      	adds	r3, #24
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
        tellers[i].total_time_working = clock_init(tellers[i].total_time_working);
 8001ebc:	4a8d      	ldr	r2, [pc, #564]	; (80020f4 <init_teller+0x2b8>)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	21bc      	movs	r1, #188	; 0xbc
 8001ec2:	fb01 f303 	mul.w	r3, r1, r3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f103 0418 	add.w	r4, r3, #24
 8001ecc:	4638      	mov	r0, r7
 8001ece:	4a89      	ldr	r2, [pc, #548]	; (80020f4 <init_teller+0x2b8>)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	21bc      	movs	r1, #188	; 0xbc
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	3318      	adds	r3, #24
 8001edc:	3304      	adds	r3, #4
 8001ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee0:	f7ff f80a 	bl	8000ef8 <clock_init>
 8001ee4:	1d23      	adds	r3, r4, #4
 8001ee6:	463a      	mov	r2, r7
 8001ee8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].total_time_waiting = clock_init(tellers[i].total_time_waiting);
 8001eee:	4a81      	ldr	r2, [pc, #516]	; (80020f4 <init_teller+0x2b8>)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	21bc      	movs	r1, #188	; 0xbc
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001efe:	4638      	mov	r0, r7
 8001f00:	4a7c      	ldr	r2, [pc, #496]	; (80020f4 <init_teller+0x2b8>)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	21bc      	movs	r1, #188	; 0xbc
 8001f06:	fb01 f303 	mul.w	r3, r1, r3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3328      	adds	r3, #40	; 0x28
 8001f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f10:	f7fe fff2 	bl	8000ef8 <clock_init>
 8001f14:	463b      	mov	r3, r7
 8001f16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].current_time_working = clock_init(tellers[i].current_time_working);
 8001f1e:	4a75      	ldr	r2, [pc, #468]	; (80020f4 <init_teller+0x2b8>)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	21bc      	movs	r1, #188	; 0xbc
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001f2e:	4638      	mov	r0, r7
 8001f30:	4a70      	ldr	r2, [pc, #448]	; (80020f4 <init_teller+0x2b8>)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	21bc      	movs	r1, #188	; 0xbc
 8001f36:	fb01 f303 	mul.w	r3, r1, r3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3330      	adds	r3, #48	; 0x30
 8001f3e:	3304      	adds	r3, #4
 8001f40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f42:	f7fe ffd9 	bl	8000ef8 <clock_init>
 8001f46:	1d23      	adds	r3, r4, #4
 8001f48:	463a      	mov	r2, r7
 8001f4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 8001f50:	4a68      	ldr	r2, [pc, #416]	; (80020f4 <init_teller+0x2b8>)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	21bc      	movs	r1, #188	; 0xbc
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001f60:	4638      	mov	r0, r7
 8001f62:	4a64      	ldr	r2, [pc, #400]	; (80020f4 <init_teller+0x2b8>)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	21bc      	movs	r1, #188	; 0xbc
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3340      	adds	r3, #64	; 0x40
 8001f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f72:	f7fe ffc1 	bl	8000ef8 <clock_init>
 8001f76:	463b      	mov	r3, r7
 8001f78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].max_time_working = clock_init(tellers[i].max_time_working);
 8001f80:	4a5c      	ldr	r2, [pc, #368]	; (80020f4 <init_teller+0x2b8>)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	21bc      	movs	r1, #188	; 0xbc
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001f90:	4638      	mov	r0, r7
 8001f92:	4a58      	ldr	r2, [pc, #352]	; (80020f4 <init_teller+0x2b8>)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	21bc      	movs	r1, #188	; 0xbc
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3348      	adds	r3, #72	; 0x48
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa4:	f7fe ffa8 	bl	8000ef8 <clock_init>
 8001fa8:	1d23      	adds	r3, r4, #4
 8001faa:	463a      	mov	r2, r7
 8001fac:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].max_time_working = clock_init(tellers[i].max_time_working);
 8001fb2:	4a50      	ldr	r2, [pc, #320]	; (80020f4 <init_teller+0x2b8>)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	21bc      	movs	r1, #188	; 0xbc
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001fc2:	4638      	mov	r0, r7
 8001fc4:	4a4b      	ldr	r2, [pc, #300]	; (80020f4 <init_teller+0x2b8>)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	21bc      	movs	r1, #188	; 0xbc
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	3348      	adds	r3, #72	; 0x48
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd6:	f7fe ff8f 	bl	8000ef8 <clock_init>
 8001fda:	1d23      	adds	r3, r4, #4
 8001fdc:	463a      	mov	r2, r7
 8001fde:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fe0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize break taking
        tellers[i].break_end = clock_init(tellers[i].break_end);
 8001fe4:	4a43      	ldr	r2, [pc, #268]	; (80020f4 <init_teller+0x2b8>)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	21bc      	movs	r1, #188	; 0xbc
 8001fea:	fb01 f303 	mul.w	r3, r1, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8001ff4:	4638      	mov	r0, r7
 8001ff6:	4a3f      	ldr	r2, [pc, #252]	; (80020f4 <init_teller+0x2b8>)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	21bc      	movs	r1, #188	; 0xbc
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	3378      	adds	r3, #120	; 0x78
 8002004:	3304      	adds	r3, #4
 8002006:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002008:	f7fe ff76 	bl	8000ef8 <clock_init>
 800200c:	1d23      	adds	r3, r4, #4
 800200e:	463a      	mov	r2, r7
 8002010:	ca07      	ldmia	r2, {r0, r1, r2}
 8002012:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].current_break = clock_init(tellers[i].current_break);
 8002016:	4a37      	ldr	r2, [pc, #220]	; (80020f4 <init_teller+0x2b8>)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	21bc      	movs	r1, #188	; 0xbc
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8002026:	4638      	mov	r0, r7
 8002028:	4a32      	ldr	r2, [pc, #200]	; (80020f4 <init_teller+0x2b8>)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	21bc      	movs	r1, #188	; 0xbc
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	4413      	add	r3, r2
 8002034:	3388      	adds	r3, #136	; 0x88
 8002036:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002038:	f7fe ff5e 	bl	8000ef8 <clock_init>
 800203c:	463b      	mov	r3, r7
 800203e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002042:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        //Initialize break metrics
        tellers[i].num_breaks = 0;
 8002046:	4a2b      	ldr	r2, [pc, #172]	; (80020f4 <init_teller+0x2b8>)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	21bc      	movs	r1, #188	; 0xbc
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	3394      	adds	r3, #148	; 0x94
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
        tellers[i].max_break = clock_init(tellers[i].max_break);
 8002058:	4a26      	ldr	r2, [pc, #152]	; (80020f4 <init_teller+0x2b8>)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	21bc      	movs	r1, #188	; 0xbc
 800205e:	fb01 f303 	mul.w	r3, r1, r3
 8002062:	4413      	add	r3, r2
 8002064:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8002068:	4638      	mov	r0, r7
 800206a:	4a22      	ldr	r2, [pc, #136]	; (80020f4 <init_teller+0x2b8>)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	21bc      	movs	r1, #188	; 0xbc
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	3398      	adds	r3, #152	; 0x98
 8002078:	cb0e      	ldmia	r3, {r1, r2, r3}
 800207a:	f7fe ff3d 	bl	8000ef8 <clock_init>
 800207e:	463b      	mov	r3, r7
 8002080:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002084:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].min_break = clock_init(tellers[i].min_break);
 8002088:	4a1a      	ldr	r2, [pc, #104]	; (80020f4 <init_teller+0x2b8>)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	21bc      	movs	r1, #188	; 0xbc
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8002098:	4638      	mov	r0, r7
 800209a:	4a16      	ldr	r2, [pc, #88]	; (80020f4 <init_teller+0x2b8>)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	21bc      	movs	r1, #188	; 0xbc
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	33a0      	adds	r3, #160	; 0xa0
 80020a8:	3304      	adds	r3, #4
 80020aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ac:	f7fe ff24 	bl	8000ef8 <clock_init>
 80020b0:	1d23      	adds	r3, r4, #4
 80020b2:	463a      	mov	r2, r7
 80020b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].total_break = clock_init(tellers[i].total_break);
 80020ba:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <init_teller+0x2b8>)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	21bc      	movs	r1, #188	; 0xbc
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 80020ca:	4638      	mov	r0, r7
 80020cc:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <init_teller+0x2b8>)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	21bc      	movs	r1, #188	; 0xbc
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	33b0      	adds	r3, #176	; 0xb0
 80020da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020dc:	f7fe ff0c 	bl	8000ef8 <clock_init>
 80020e0:	463b      	mov	r3, r7
 80020e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80020ea:	bf00      	nop
 80020ec:	371c      	adds	r7, #28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd90      	pop	{r4, r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200003f4 	.word	0x200003f4

080020f8 <manage_teller>:

//Pass in Teller ID
void manage_teller(int i){
 80020f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fa:	b08b      	sub	sp, #44	; 0x2c
 80020fc:	af04      	add	r7, sp, #16
 80020fe:	6178      	str	r0, [r7, #20]
	switch (tellers[i].status){
 8002100:	4a29      	ldr	r2, [pc, #164]	; (80021a8 <manage_teller+0xb0>)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	21bc      	movs	r1, #188	; 0xbc
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	3304      	adds	r3, #4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d041      	beq.n	8002198 <manage_teller+0xa0>
 8002114:	2b02      	cmp	r3, #2
 8002116:	dc42      	bgt.n	800219e <manage_teller+0xa6>
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <manage_teller+0x28>
 800211c:	2b01      	cmp	r3, #1
		break;
	//Teller Currently Servicing
	case 1:

		//case break
		break;
 800211e:	e03e      	b.n	800219e <manage_teller+0xa6>
		if(breaker.start_break[i] == 1){
 8002120:	4a22      	ldr	r2, [pc, #136]	; (80021ac <manage_teller+0xb4>)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d137      	bne.n	800219c <manage_teller+0xa4>
			tellers[i].status = 2;
 800212c:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <manage_teller+0xb0>)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	21bc      	movs	r1, #188	; 0xbc
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	3304      	adds	r3, #4
 800213a:	2202      	movs	r2, #2
 800213c:	601a      	str	r2, [r3, #0]
			tellers[i].break_start = Clock;
 800213e:	4a1a      	ldr	r2, [pc, #104]	; (80021a8 <manage_teller+0xb0>)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	21bc      	movs	r1, #188	; 0xbc
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3370      	adds	r3, #112	; 0x70
 800214c:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <manage_teller+0xb8>)
 800214e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002150:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			tellers[i].break_end = add_clocks(Clock, breaker.break_duration[i]);
 8002154:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <manage_teller+0xb0>)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	21bc      	movs	r1, #188	; 0xbc
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	f103 0578 	add.w	r5, r3, #120	; 0x78
 8002164:	463e      	mov	r6, r7
 8002166:	4c12      	ldr	r4, [pc, #72]	; (80021b0 <manage_teller+0xb8>)
 8002168:	4910      	ldr	r1, [pc, #64]	; (80021ac <manage_teller+0xb4>)
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800217a:	466b      	mov	r3, sp
 800217c:	ca07      	ldmia	r2, {r0, r1, r2}
 800217e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002182:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002186:	4630      	mov	r0, r6
 8002188:	f7fe ff23 	bl	8000fd2 <add_clocks>
 800218c:	1d2b      	adds	r3, r5, #4
 800218e:	463a      	mov	r2, r7
 8002190:	ca07      	ldmia	r2, {r0, r1, r2}
 8002192:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		break;
 8002196:	e001      	b.n	800219c <manage_teller+0xa4>
		break;
 8002198:	bf00      	nop
 800219a:	e000      	b.n	800219e <manage_teller+0xa6>
		break;
 800219c:	bf00      	nop

	}

}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200003f4 	.word	0x200003f4
 80021ac:	200000cc 	.word	0x200000cc
 80021b0:	20000038 	.word	0x20000038

080021b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021b8:	f7ff fe2e 	bl	8001e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80021be:	490d      	ldr	r1, [pc, #52]	; (80021f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021c0:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <LoopForever+0xe>)
  movs r3, #0
 80021c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c4:	e002      	b.n	80021cc <LoopCopyDataInit>

080021c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ca:	3304      	adds	r3, #4

080021cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d0:	d3f9      	bcc.n	80021c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80021d4:	4c0a      	ldr	r4, [pc, #40]	; (8002200 <LoopForever+0x16>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d8:	e001      	b.n	80021de <LoopFillZerobss>

080021da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021dc:	3204      	adds	r2, #4

080021de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e0:	d3fb      	bcc.n	80021da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021e2:	f006 fb93 	bl	800890c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021e6:	f7ff f961 	bl	80014ac <main>

080021ea <LoopForever>:

LoopForever:
    b LoopForever
 80021ea:	e7fe      	b.n	80021ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f4:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80021f8:	0800952c 	.word	0x0800952c
  ldr r2, =_sbss
 80021fc:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002200:	20006f34 	.word	0x20006f34

08002204 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002204:	e7fe      	b.n	8002204 <ADC1_2_IRQHandler>
	...

08002208 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_Init+0x3c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a0b      	ldr	r2, [pc, #44]	; (8002244 <HAL_Init+0x3c>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221e:	2003      	movs	r0, #3
 8002220:	f000 f93e 	bl	80024a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002224:	200f      	movs	r0, #15
 8002226:	f000 f80f 	bl	8002248 <HAL_InitTick>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	71fb      	strb	r3, [r7, #7]
 8002234:	e001      	b.n	800223a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002236:	f7ff fc8b 	bl	8001b50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800223a:	79fb      	ldrb	r3, [r7, #7]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40022000 	.word	0x40022000

08002248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_InitTick+0x6c>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d023      	beq.n	80022a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800225c:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <HAL_InitTick+0x70>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_InitTick+0x6c>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	4619      	mov	r1, r3
 8002266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800226a:	fbb3 f3f1 	udiv	r3, r3, r1
 800226e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f949 	bl	800250a <HAL_SYSTICK_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10f      	bne.n	800229e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b0f      	cmp	r3, #15
 8002282:	d809      	bhi.n	8002298 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002284:	2200      	movs	r2, #0
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	f000 f913 	bl	80024b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002290:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <HAL_InitTick+0x74>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e007      	b.n	80022a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e004      	b.n	80022a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
 80022a2:	e001      	b.n	80022a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000058 	.word	0x20000058
 80022b8:	20000050 	.word	0x20000050
 80022bc:	20000054 	.word	0x20000054

080022c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_IncTick+0x20>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_IncTick+0x24>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_IncTick+0x24>)
 80022d2:	6013      	str	r3, [r2, #0]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000058 	.word	0x20000058
 80022e4:	20000628 	.word	0x20000628

080022e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return uwTick;
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <HAL_GetTick+0x14>)
 80022ee:	681b      	ldr	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000628 	.word	0x20000628

08002300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800231c:	4013      	ands	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800232c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002332:	4a04      	ldr	r2, [pc, #16]	; (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	60d3      	str	r3, [r2, #12]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <__NVIC_GetPriorityGrouping+0x18>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	f003 0307 	and.w	r3, r3, #7
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	2b00      	cmp	r3, #0
 8002374:	db0b      	blt.n	800238e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4907      	ldr	r1, [pc, #28]	; (800239c <__NVIC_EnableIRQ+0x38>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2001      	movs	r0, #1
 8002386:	fa00 f202 	lsl.w	r2, r0, r2
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000e100 	.word	0xe000e100

080023a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db0a      	blt.n	80023ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	490c      	ldr	r1, [pc, #48]	; (80023ec <__NVIC_SetPriority+0x4c>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	0112      	lsls	r2, r2, #4
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	440b      	add	r3, r1
 80023c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c8:	e00a      	b.n	80023e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4908      	ldr	r1, [pc, #32]	; (80023f0 <__NVIC_SetPriority+0x50>)
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	3b04      	subs	r3, #4
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	440b      	add	r3, r1
 80023de:	761a      	strb	r2, [r3, #24]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000e100 	.word	0xe000e100
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f1c3 0307 	rsb	r3, r3, #7
 800240e:	2b04      	cmp	r3, #4
 8002410:	bf28      	it	cs
 8002412:	2304      	movcs	r3, #4
 8002414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3304      	adds	r3, #4
 800241a:	2b06      	cmp	r3, #6
 800241c:	d902      	bls.n	8002424 <NVIC_EncodePriority+0x30>
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3b03      	subs	r3, #3
 8002422:	e000      	b.n	8002426 <NVIC_EncodePriority+0x32>
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	f04f 32ff 	mov.w	r2, #4294967295
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	401a      	ands	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800243c:	f04f 31ff 	mov.w	r1, #4294967295
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	43d9      	mvns	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	4313      	orrs	r3, r2
         );
}
 800244e:	4618      	mov	r0, r3
 8002450:	3724      	adds	r7, #36	; 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800246c:	d301      	bcc.n	8002472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246e:	2301      	movs	r3, #1
 8002470:	e00f      	b.n	8002492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <SysTick_Config+0x40>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247a:	210f      	movs	r1, #15
 800247c:	f04f 30ff 	mov.w	r0, #4294967295
 8002480:	f7ff ff8e 	bl	80023a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <SysTick_Config+0x40>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <SysTick_Config+0x40>)
 800248c:	2207      	movs	r2, #7
 800248e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	e000e010 	.word	0xe000e010

080024a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ff29 	bl	8002300 <__NVIC_SetPriorityGrouping>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b086      	sub	sp, #24
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024c8:	f7ff ff3e 	bl	8002348 <__NVIC_GetPriorityGrouping>
 80024cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	6978      	ldr	r0, [r7, #20]
 80024d4:	f7ff ff8e 	bl	80023f4 <NVIC_EncodePriority>
 80024d8:	4602      	mov	r2, r0
 80024da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff5d 	bl	80023a0 <__NVIC_SetPriority>
}
 80024e6:	bf00      	nop
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff31 	bl	8002364 <__NVIC_EnableIRQ>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ffa2 	bl	800245c <SysTick_Config>
 8002518:	4603      	mov	r3, r0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002532:	e17f      	b.n	8002834 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2101      	movs	r1, #1
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	4013      	ands	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8171 	beq.w	800282e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d005      	beq.n	8002564 <HAL_GPIO_Init+0x40>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d130      	bne.n	80025c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800259a:	2201      	movs	r2, #1
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	f003 0201 	and.w	r2, r3, #1
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d118      	bne.n	8002604 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025d8:	2201      	movs	r2, #1
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	08db      	lsrs	r3, r3, #3
 80025ee:	f003 0201 	and.w	r2, r3, #1
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b03      	cmp	r3, #3
 800260e:	d017      	beq.n	8002640 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d123      	bne.n	8002694 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	08da      	lsrs	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3208      	adds	r2, #8
 8002654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	220f      	movs	r2, #15
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	08da      	lsrs	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3208      	adds	r2, #8
 800268e:	6939      	ldr	r1, [r7, #16]
 8002690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0203 	and.w	r2, r3, #3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80ac 	beq.w	800282e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	4b5f      	ldr	r3, [pc, #380]	; (8002854 <HAL_GPIO_Init+0x330>)
 80026d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026da:	4a5e      	ldr	r2, [pc, #376]	; (8002854 <HAL_GPIO_Init+0x330>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6613      	str	r3, [r2, #96]	; 0x60
 80026e2:	4b5c      	ldr	r3, [pc, #368]	; (8002854 <HAL_GPIO_Init+0x330>)
 80026e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026ee:	4a5a      	ldr	r2, [pc, #360]	; (8002858 <HAL_GPIO_Init+0x334>)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	089b      	lsrs	r3, r3, #2
 80026f4:	3302      	adds	r3, #2
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002718:	d025      	beq.n	8002766 <HAL_GPIO_Init+0x242>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4f      	ldr	r2, [pc, #316]	; (800285c <HAL_GPIO_Init+0x338>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01f      	beq.n	8002762 <HAL_GPIO_Init+0x23e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4e      	ldr	r2, [pc, #312]	; (8002860 <HAL_GPIO_Init+0x33c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d019      	beq.n	800275e <HAL_GPIO_Init+0x23a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4d      	ldr	r2, [pc, #308]	; (8002864 <HAL_GPIO_Init+0x340>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0x236>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4c      	ldr	r2, [pc, #304]	; (8002868 <HAL_GPIO_Init+0x344>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_GPIO_Init+0x232>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4b      	ldr	r2, [pc, #300]	; (800286c <HAL_GPIO_Init+0x348>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_GPIO_Init+0x22e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4a      	ldr	r2, [pc, #296]	; (8002870 <HAL_GPIO_Init+0x34c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_GPIO_Init+0x22a>
 800274a:	2306      	movs	r3, #6
 800274c:	e00c      	b.n	8002768 <HAL_GPIO_Init+0x244>
 800274e:	2307      	movs	r3, #7
 8002750:	e00a      	b.n	8002768 <HAL_GPIO_Init+0x244>
 8002752:	2305      	movs	r3, #5
 8002754:	e008      	b.n	8002768 <HAL_GPIO_Init+0x244>
 8002756:	2304      	movs	r3, #4
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x244>
 800275a:	2303      	movs	r3, #3
 800275c:	e004      	b.n	8002768 <HAL_GPIO_Init+0x244>
 800275e:	2302      	movs	r3, #2
 8002760:	e002      	b.n	8002768 <HAL_GPIO_Init+0x244>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_GPIO_Init+0x244>
 8002766:	2300      	movs	r3, #0
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	f002 0203 	and.w	r2, r2, #3
 800276e:	0092      	lsls	r2, r2, #2
 8002770:	4093      	lsls	r3, r2
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002778:	4937      	ldr	r1, [pc, #220]	; (8002858 <HAL_GPIO_Init+0x334>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002786:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <HAL_GPIO_Init+0x350>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43db      	mvns	r3, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027aa:	4a32      	ldr	r2, [pc, #200]	; (8002874 <HAL_GPIO_Init+0x350>)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027b0:	4b30      	ldr	r3, [pc, #192]	; (8002874 <HAL_GPIO_Init+0x350>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027d4:	4a27      	ldr	r2, [pc, #156]	; (8002874 <HAL_GPIO_Init+0x350>)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_GPIO_Init+0x350>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027fe:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <HAL_GPIO_Init+0x350>)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <HAL_GPIO_Init+0x350>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	43db      	mvns	r3, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002828:	4a12      	ldr	r2, [pc, #72]	; (8002874 <HAL_GPIO_Init+0x350>)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3301      	adds	r3, #1
 8002832:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa22 f303 	lsr.w	r3, r2, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	f47f ae78 	bne.w	8002534 <HAL_GPIO_Init+0x10>
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	371c      	adds	r7, #28
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	40010000 	.word	0x40010000
 800285c:	48000400 	.word	0x48000400
 8002860:	48000800 	.word	0x48000800
 8002864:	48000c00 	.word	0x48000c00
 8002868:	48001000 	.word	0x48001000
 800286c:	48001400 	.word	0x48001400
 8002870:	48001800 	.word	0x48001800
 8002874:	40010400 	.word	0x40010400

08002878 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	887b      	ldrh	r3, [r7, #2]
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	e001      	b.n	800289a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800289a:	7bfb      	ldrb	r3, [r7, #15]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
 80028b4:	4613      	mov	r3, r2
 80028b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b8:	787b      	ldrb	r3, [r7, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028c4:	e002      	b.n	80028cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40007000 	.word	0x40007000

080028f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002902:	d130      	bne.n	8002966 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002904:	4b23      	ldr	r3, [pc, #140]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800290c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002910:	d038      	beq.n	8002984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002912:	4b20      	ldr	r3, [pc, #128]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800291a:	4a1e      	ldr	r2, [pc, #120]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800291c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002920:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2232      	movs	r2, #50	; 0x32
 8002928:	fb02 f303 	mul.w	r3, r2, r3
 800292c:	4a1b      	ldr	r2, [pc, #108]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800292e:	fba2 2303 	umull	r2, r3, r2, r3
 8002932:	0c9b      	lsrs	r3, r3, #18
 8002934:	3301      	adds	r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002938:	e002      	b.n	8002940 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3b01      	subs	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294c:	d102      	bne.n	8002954 <HAL_PWREx_ControlVoltageScaling+0x60>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f2      	bne.n	800293a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002960:	d110      	bne.n	8002984 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e00f      	b.n	8002986 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800296e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002972:	d007      	beq.n	8002984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002974:	4b07      	ldr	r3, [pc, #28]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800297c:	4a05      	ldr	r2, [pc, #20]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002982:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40007000 	.word	0x40007000
 8002998:	20000050 	.word	0x20000050
 800299c:	431bde83 	.word	0x431bde83

080029a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e3ca      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029b2:	4b97      	ldr	r3, [pc, #604]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029bc:	4b94      	ldr	r3, [pc, #592]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 80e4 	beq.w	8002b9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <HAL_RCC_OscConfig+0x4a>
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b0c      	cmp	r3, #12
 80029de:	f040 808b 	bne.w	8002af8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	f040 8087 	bne.w	8002af8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ea:	4b89      	ldr	r3, [pc, #548]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_RCC_OscConfig+0x62>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e3a2      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1a      	ldr	r2, [r3, #32]
 8002a06:	4b82      	ldr	r3, [pc, #520]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <HAL_RCC_OscConfig+0x7c>
 8002a12:	4b7f      	ldr	r3, [pc, #508]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a1a:	e005      	b.n	8002a28 <HAL_RCC_OscConfig+0x88>
 8002a1c:	4b7c      	ldr	r3, [pc, #496]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d223      	bcs.n	8002a74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fd55 	bl	80034e0 <RCC_SetFlashLatencyFromMSIRange>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e383      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a40:	4b73      	ldr	r3, [pc, #460]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a72      	ldr	r2, [pc, #456]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a46:	f043 0308 	orr.w	r3, r3, #8
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b70      	ldr	r3, [pc, #448]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	496d      	ldr	r1, [pc, #436]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a5e:	4b6c      	ldr	r3, [pc, #432]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	4968      	ldr	r1, [pc, #416]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
 8002a72:	e025      	b.n	8002ac0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a74:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a65      	ldr	r2, [pc, #404]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	f043 0308 	orr.w	r3, r3, #8
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4960      	ldr	r1, [pc, #384]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a92:	4b5f      	ldr	r3, [pc, #380]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	495b      	ldr	r1, [pc, #364]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fd15 	bl	80034e0 <RCC_SetFlashLatencyFromMSIRange>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e343      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ac0:	f000 fc4a 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4b52      	ldr	r3, [pc, #328]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	4950      	ldr	r1, [pc, #320]	; (8002c14 <HAL_RCC_OscConfig+0x274>)
 8002ad2:	5ccb      	ldrb	r3, [r1, r3]
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8002adc:	4a4e      	ldr	r2, [pc, #312]	; (8002c18 <HAL_RCC_OscConfig+0x278>)
 8002ade:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ae0:	4b4e      	ldr	r3, [pc, #312]	; (8002c1c <HAL_RCC_OscConfig+0x27c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fbaf 	bl	8002248 <HAL_InitTick>
 8002aea:	4603      	mov	r3, r0
 8002aec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d052      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	e327      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d032      	beq.n	8002b66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b00:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a42      	ldr	r2, [pc, #264]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b0c:	f7ff fbec 	bl	80022e8 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b14:	f7ff fbe8 	bl	80022e8 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e310      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b26:	4b3a      	ldr	r3, [pc, #232]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b32:	4b37      	ldr	r3, [pc, #220]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a36      	ldr	r2, [pc, #216]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b38:	f043 0308 	orr.w	r3, r3, #8
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	4b34      	ldr	r3, [pc, #208]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	4931      	ldr	r1, [pc, #196]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b50:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	492c      	ldr	r1, [pc, #176]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
 8002b64:	e01a      	b.n	8002b9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b66:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a29      	ldr	r2, [pc, #164]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b72:	f7ff fbb9 	bl	80022e8 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b7a:	f7ff fbb5 	bl	80022e8 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e2dd      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b8c:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x1da>
 8002b98:	e000      	b.n	8002b9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d074      	beq.n	8002c92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d005      	beq.n	8002bba <HAL_RCC_OscConfig+0x21a>
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b0c      	cmp	r3, #12
 8002bb2:	d10e      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d064      	beq.n	8002c90 <HAL_RCC_OscConfig+0x2f0>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d160      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e2ba      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x24a>
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	e026      	b.n	8002c38 <HAL_RCC_OscConfig+0x298>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf2:	d115      	bne.n	8002c20 <HAL_RCC_OscConfig+0x280>
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a05      	ldr	r2, [pc, #20]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a02      	ldr	r2, [pc, #8]	; (8002c10 <HAL_RCC_OscConfig+0x270>)
 8002c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e014      	b.n	8002c38 <HAL_RCC_OscConfig+0x298>
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	080094a0 	.word	0x080094a0
 8002c18:	20000050 	.word	0x20000050
 8002c1c:	20000054 	.word	0x20000054
 8002c20:	4ba0      	ldr	r3, [pc, #640]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a9f      	ldr	r2, [pc, #636]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b9d      	ldr	r3, [pc, #628]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a9c      	ldr	r2, [pc, #624]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d013      	beq.n	8002c68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7ff fb52 	bl	80022e8 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c48:	f7ff fb4e 	bl	80022e8 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e276      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c5a:	4b92      	ldr	r3, [pc, #584]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x2a8>
 8002c66:	e014      	b.n	8002c92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7ff fb3e 	bl	80022e8 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7ff fb3a 	bl	80022e8 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e262      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c82:	4b88      	ldr	r3, [pc, #544]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x2d0>
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d060      	beq.n	8002d60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x310>
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	d119      	bne.n	8002cde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d116      	bne.n	8002cde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb0:	4b7c      	ldr	r3, [pc, #496]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x328>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e23f      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc8:	4b76      	ldr	r3, [pc, #472]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	061b      	lsls	r3, r3, #24
 8002cd6:	4973      	ldr	r1, [pc, #460]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cdc:	e040      	b.n	8002d60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d023      	beq.n	8002d2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce6:	4b6f      	ldr	r3, [pc, #444]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a6e      	ldr	r2, [pc, #440]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7ff faf9 	bl	80022e8 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfa:	f7ff faf5 	bl	80022e8 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e21d      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d0c:	4b65      	ldr	r3, [pc, #404]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4b62      	ldr	r3, [pc, #392]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	495f      	ldr	r1, [pc, #380]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]
 8002d2c:	e018      	b.n	8002d60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a5c      	ldr	r2, [pc, #368]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7ff fad5 	bl	80022e8 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d42:	f7ff fad1 	bl	80022e8 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e1f9      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d54:	4b53      	ldr	r3, [pc, #332]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1f0      	bne.n	8002d42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d03c      	beq.n	8002de6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01c      	beq.n	8002dae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d74:	4b4b      	ldr	r3, [pc, #300]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7a:	4a4a      	ldr	r2, [pc, #296]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7ff fab0 	bl	80022e8 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7ff faac 	bl	80022e8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e1d4      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d9e:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ef      	beq.n	8002d8c <HAL_RCC_OscConfig+0x3ec>
 8002dac:	e01b      	b.n	8002de6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dae:	4b3d      	ldr	r3, [pc, #244]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db4:	4a3b      	ldr	r2, [pc, #236]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbe:	f7ff fa93 	bl	80022e8 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc6:	f7ff fa8f 	bl	80022e8 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e1b7      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dd8:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ef      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80a6 	beq.w	8002f40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df4:	2300      	movs	r3, #0
 8002df6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002df8:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10d      	bne.n	8002e20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	4a26      	ldr	r2, [pc, #152]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e10:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e20:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <HAL_RCC_OscConfig+0x508>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d118      	bne.n	8002e5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <HAL_RCC_OscConfig+0x508>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <HAL_RCC_OscConfig+0x508>)
 8002e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e38:	f7ff fa56 	bl	80022e8 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e40:	f7ff fa52 	bl	80022e8 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e17a      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_RCC_OscConfig+0x508>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d108      	bne.n	8002e78 <HAL_RCC_OscConfig+0x4d8>
 8002e66:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e76:	e029      	b.n	8002ecc <HAL_RCC_OscConfig+0x52c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d115      	bne.n	8002eac <HAL_RCC_OscConfig+0x50c>
 8002e80:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	4a07      	ldr	r2, [pc, #28]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e96:	4a03      	ldr	r2, [pc, #12]	; (8002ea4 <HAL_RCC_OscConfig+0x504>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ea0:	e014      	b.n	8002ecc <HAL_RCC_OscConfig+0x52c>
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40007000 	.word	0x40007000
 8002eac:	4b9c      	ldr	r3, [pc, #624]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	4a9b      	ldr	r2, [pc, #620]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ebc:	4b98      	ldr	r3, [pc, #608]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	4a97      	ldr	r2, [pc, #604]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d016      	beq.n	8002f02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7ff fa08 	bl	80022e8 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002edc:	f7ff fa04 	bl	80022e8 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e12a      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef2:	4b8b      	ldr	r3, [pc, #556]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ed      	beq.n	8002edc <HAL_RCC_OscConfig+0x53c>
 8002f00:	e015      	b.n	8002f2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7ff f9f1 	bl	80022e8 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7ff f9ed 	bl	80022e8 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e113      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f20:	4b7f      	ldr	r3, [pc, #508]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ed      	bne.n	8002f0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f2e:	7ffb      	ldrb	r3, [r7, #31]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f34:	4b7a      	ldr	r3, [pc, #488]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	4a79      	ldr	r2, [pc, #484]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80fe 	beq.w	8003146 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	f040 80d0 	bne.w	80030f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f54:	4b72      	ldr	r3, [pc, #456]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f003 0203 	and.w	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d130      	bne.n	8002fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	3b01      	subs	r3, #1
 8002f74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d127      	bne.n	8002fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d11f      	bne.n	8002fca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f94:	2a07      	cmp	r2, #7
 8002f96:	bf14      	ite	ne
 8002f98:	2201      	movne	r2, #1
 8002f9a:	2200      	moveq	r2, #0
 8002f9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d113      	bne.n	8002fca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d109      	bne.n	8002fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d06e      	beq.n	80030a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	d069      	beq.n	80030a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fd0:	4b53      	ldr	r3, [pc, #332]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d105      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fdc:	4b50      	ldr	r3, [pc, #320]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0ad      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fec:	4b4c      	ldr	r3, [pc, #304]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a4b      	ldr	r2, [pc, #300]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8002ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ff8:	f7ff f976 	bl	80022e8 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003000:	f7ff f972 	bl	80022e8 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e09a      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003012:	4b43      	ldr	r3, [pc, #268]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800301e:	4b40      	ldr	r3, [pc, #256]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	4b40      	ldr	r3, [pc, #256]	; (8003124 <HAL_RCC_OscConfig+0x784>)
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800302e:	3a01      	subs	r2, #1
 8003030:	0112      	lsls	r2, r2, #4
 8003032:	4311      	orrs	r1, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003038:	0212      	lsls	r2, r2, #8
 800303a:	4311      	orrs	r1, r2
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003040:	0852      	lsrs	r2, r2, #1
 8003042:	3a01      	subs	r2, #1
 8003044:	0552      	lsls	r2, r2, #21
 8003046:	4311      	orrs	r1, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800304c:	0852      	lsrs	r2, r2, #1
 800304e:	3a01      	subs	r2, #1
 8003050:	0652      	lsls	r2, r2, #25
 8003052:	4311      	orrs	r1, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003058:	0912      	lsrs	r2, r2, #4
 800305a:	0452      	lsls	r2, r2, #17
 800305c:	430a      	orrs	r2, r1
 800305e:	4930      	ldr	r1, [pc, #192]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003060:	4313      	orrs	r3, r2
 8003062:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003064:	4b2e      	ldr	r3, [pc, #184]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a2d      	ldr	r2, [pc, #180]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 800306a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003070:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a2a      	ldr	r2, [pc, #168]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800307c:	f7ff f934 	bl	80022e8 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7ff f930 	bl	80022e8 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e058      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a2:	e050      	b.n	8003146 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e04f      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d148      	bne.n	8003146 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a19      	ldr	r2, [pc, #100]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 80030ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a16      	ldr	r2, [pc, #88]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 80030c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030cc:	f7ff f90c 	bl	80022e8 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d4:	f7ff f908 	bl	80022e8 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e030      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x734>
 80030f2:	e028      	b.n	8003146 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b0c      	cmp	r3, #12
 80030f8:	d023      	beq.n	8003142 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <HAL_RCC_OscConfig+0x780>)
 8003100:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003106:	f7ff f8ef 	bl	80022e8 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310c:	e00c      	b.n	8003128 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310e:	f7ff f8eb 	bl	80022e8 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d905      	bls.n	8003128 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e013      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
 8003120:	40021000 	.word	0x40021000
 8003124:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_RCC_OscConfig+0x7b0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1ec      	bne.n	800310e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_RCC_OscConfig+0x7b0>)
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	4905      	ldr	r1, [pc, #20]	; (8003150 <HAL_RCC_OscConfig+0x7b0>)
 800313a:	4b06      	ldr	r3, [pc, #24]	; (8003154 <HAL_RCC_OscConfig+0x7b4>)
 800313c:	4013      	ands	r3, r2
 800313e:	60cb      	str	r3, [r1, #12]
 8003140:	e001      	b.n	8003146 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	feeefffc 	.word	0xfeeefffc

08003158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0e7      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b75      	ldr	r3, [pc, #468]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d910      	bls.n	800319c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b72      	ldr	r3, [pc, #456]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 0207 	bic.w	r2, r3, #7
 8003182:	4970      	ldr	r1, [pc, #448]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b6e      	ldr	r3, [pc, #440]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0cf      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	4b66      	ldr	r3, [pc, #408]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d908      	bls.n	80031ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b63      	ldr	r3, [pc, #396]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4960      	ldr	r1, [pc, #384]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d04c      	beq.n	8003270 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031de:	4b5a      	ldr	r3, [pc, #360]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d121      	bne.n	800322e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0a6      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f6:	4b54      	ldr	r3, [pc, #336]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d115      	bne.n	800322e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e09a      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800320e:	4b4e      	ldr	r3, [pc, #312]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e08e      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800321e:	4b4a      	ldr	r3, [pc, #296]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e086      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800322e:	4b46      	ldr	r3, [pc, #280]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f023 0203 	bic.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4943      	ldr	r1, [pc, #268]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 800323c:	4313      	orrs	r3, r2
 800323e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003240:	f7ff f852 	bl	80022e8 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	e00a      	b.n	800325e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003248:	f7ff f84e 	bl	80022e8 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e06e      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	4b3a      	ldr	r3, [pc, #232]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 020c 	and.w	r2, r3, #12
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	429a      	cmp	r2, r3
 800326e:	d1eb      	bne.n	8003248 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d010      	beq.n	800329e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	4b31      	ldr	r3, [pc, #196]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003288:	429a      	cmp	r2, r3
 800328a:	d208      	bcs.n	800329e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800328c:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	492b      	ldr	r1, [pc, #172]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800329e:	4b29      	ldr	r3, [pc, #164]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d210      	bcs.n	80032ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ac:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f023 0207 	bic.w	r2, r3, #7
 80032b4:	4923      	ldr	r1, [pc, #140]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032bc:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_RCC_ClockConfig+0x1ec>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d001      	beq.n	80032ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e036      	b.n	800333c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d008      	beq.n	80032ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032da:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	4918      	ldr	r1, [pc, #96]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d009      	beq.n	800330c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032f8:	4b13      	ldr	r3, [pc, #76]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4910      	ldr	r1, [pc, #64]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800330c:	f000 f824 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <HAL_RCC_ClockConfig+0x1f0>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	091b      	lsrs	r3, r3, #4
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	490b      	ldr	r1, [pc, #44]	; (800334c <HAL_RCC_ClockConfig+0x1f4>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
 8003328:	4a09      	ldr	r2, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1f8>)
 800332a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x1fc>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fe ff89 	bl	8002248 <HAL_InitTick>
 8003336:	4603      	mov	r3, r0
 8003338:	72fb      	strb	r3, [r7, #11]

  return status;
 800333a:	7afb      	ldrb	r3, [r7, #11]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40022000 	.word	0x40022000
 8003348:	40021000 	.word	0x40021000
 800334c:	080094a0 	.word	0x080094a0
 8003350:	20000050 	.word	0x20000050
 8003354:	20000054 	.word	0x20000054

08003358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	; 0x24
 800335c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003366:	4b3e      	ldr	r3, [pc, #248]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003370:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x34>
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d121      	bne.n	80033ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d11e      	bne.n	80033ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800338c:	4b34      	ldr	r3, [pc, #208]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003398:	4b31      	ldr	r3, [pc, #196]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 800339a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	e005      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033a8:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033b4:	4a2b      	ldr	r2, [pc, #172]	; (8003464 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10d      	bne.n	80033e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033c8:	e00a      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d102      	bne.n	80033d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033d0:	4b25      	ldr	r3, [pc, #148]	; (8003468 <HAL_RCC_GetSysClockFreq+0x110>)
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	e004      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033dc:	4b23      	ldr	r3, [pc, #140]	; (800346c <HAL_RCC_GetSysClockFreq+0x114>)
 80033de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b0c      	cmp	r3, #12
 80033e4:	d134      	bne.n	8003450 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033e6:	4b1e      	ldr	r3, [pc, #120]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0xa6>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d003      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0xac>
 80033fc:	e005      	b.n	800340a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_RCC_GetSysClockFreq+0x110>)
 8003400:	617b      	str	r3, [r7, #20]
      break;
 8003402:	e005      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003404:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_RCC_GetSysClockFreq+0x114>)
 8003406:	617b      	str	r3, [r7, #20]
      break;
 8003408:	e002      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	617b      	str	r3, [r7, #20]
      break;
 800340e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003410:	4b13      	ldr	r3, [pc, #76]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	3301      	adds	r3, #1
 800341c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	fb03 f202 	mul.w	r2, r3, r2
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_RCC_GetSysClockFreq+0x108>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	0e5b      	lsrs	r3, r3, #25
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	3301      	adds	r3, #1
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003450:	69bb      	ldr	r3, [r7, #24]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3724      	adds	r7, #36	; 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000
 8003464:	080094b8 	.word	0x080094b8
 8003468:	00f42400 	.word	0x00f42400
 800346c:	007a1200 	.word	0x007a1200

08003470 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_RCC_GetHCLKFreq+0x14>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000050 	.word	0x20000050

08003488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800348c:	f7ff fff0 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 8003490:	4602      	mov	r2, r0
 8003492:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	4904      	ldr	r1, [pc, #16]	; (80034b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800349e:	5ccb      	ldrb	r3, [r1, r3]
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40021000 	.word	0x40021000
 80034b0:	080094b0 	.word	0x080094b0

080034b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034b8:	f7ff ffda 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0adb      	lsrs	r3, r3, #11
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4904      	ldr	r1, [pc, #16]	; (80034dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40021000 	.word	0x40021000
 80034dc:	080094b0 	.word	0x080094b0

080034e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034ec:	4b2a      	ldr	r3, [pc, #168]	; (8003598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034f8:	f7ff f9ee 	bl	80028d8 <HAL_PWREx_GetVoltageRange>
 80034fc:	6178      	str	r0, [r7, #20]
 80034fe:	e014      	b.n	800352a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003500:	4b25      	ldr	r3, [pc, #148]	; (8003598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003504:	4a24      	ldr	r2, [pc, #144]	; (8003598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350a:	6593      	str	r3, [r2, #88]	; 0x58
 800350c:	4b22      	ldr	r3, [pc, #136]	; (8003598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003518:	f7ff f9de 	bl	80028d8 <HAL_PWREx_GetVoltageRange>
 800351c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800351e:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003528:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003530:	d10b      	bne.n	800354a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d919      	bls.n	800356c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2ba0      	cmp	r3, #160	; 0xa0
 800353c:	d902      	bls.n	8003544 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800353e:	2302      	movs	r3, #2
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	e013      	b.n	800356c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003544:	2301      	movs	r3, #1
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	e010      	b.n	800356c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b80      	cmp	r3, #128	; 0x80
 800354e:	d902      	bls.n	8003556 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003550:	2303      	movs	r3, #3
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	e00a      	b.n	800356c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b80      	cmp	r3, #128	; 0x80
 800355a:	d102      	bne.n	8003562 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800355c:	2302      	movs	r3, #2
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	e004      	b.n	800356c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b70      	cmp	r3, #112	; 0x70
 8003566:	d101      	bne.n	800356c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003568:	2301      	movs	r3, #1
 800356a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f023 0207 	bic.w	r2, r3, #7
 8003574:	4909      	ldr	r1, [pc, #36]	; (800359c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800357c:	4b07      	ldr	r3, [pc, #28]	; (800359c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	429a      	cmp	r2, r3
 8003588:	d001      	beq.n	800358e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40021000 	.word	0x40021000
 800359c:	40022000 	.word	0x40022000

080035a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035a8:	2300      	movs	r3, #0
 80035aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035ac:	2300      	movs	r3, #0
 80035ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d041      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035c4:	d02a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035ca:	d824      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035d0:	d008      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035d6:	d81e      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e0:	d010      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035e2:	e018      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035e4:	4b86      	ldr	r3, [pc, #536]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4a85      	ldr	r2, [pc, #532]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035f0:	e015      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fabb 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 80035fe:	4603      	mov	r3, r0
 8003600:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003602:	e00c      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3320      	adds	r3, #32
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fba6 	bl	8003d5c <RCCEx_PLLSAI2_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003614:	e003      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	74fb      	strb	r3, [r7, #19]
      break;
 800361a:	e000      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800361c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003624:	4b76      	ldr	r3, [pc, #472]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003632:	4973      	ldr	r1, [pc, #460]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800363a:	e001      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d041      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003650:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003654:	d02a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003656:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800365a:	d824      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800365c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003660:	d008      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003666:	d81e      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800366c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003670:	d010      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003672:	e018      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003674:	4b62      	ldr	r3, [pc, #392]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a61      	ldr	r2, [pc, #388]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003680:	e015      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fa73 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003692:	e00c      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3320      	adds	r3, #32
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fb5e 	bl	8003d5c <RCCEx_PLLSAI2_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036a4:	e003      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	74fb      	strb	r3, [r7, #19]
      break;
 80036aa:	e000      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036b4:	4b52      	ldr	r3, [pc, #328]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c2:	494f      	ldr	r1, [pc, #316]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ca:	e001      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80a0 	beq.w	800381e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036de:	2300      	movs	r3, #0
 80036e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036e2:	4b47      	ldr	r3, [pc, #284]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80036f2:	2300      	movs	r3, #0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00d      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f8:	4b41      	ldr	r3, [pc, #260]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	4a40      	ldr	r2, [pc, #256]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003702:	6593      	str	r3, [r2, #88]	; 0x58
 8003704:	4b3e      	ldr	r3, [pc, #248]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003710:	2301      	movs	r3, #1
 8003712:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003714:	4b3b      	ldr	r3, [pc, #236]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a3a      	ldr	r2, [pc, #232]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800371a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003720:	f7fe fde2 	bl	80022e8 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003726:	e009      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003728:	f7fe fdde 	bl	80022e8 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d902      	bls.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	74fb      	strb	r3, [r7, #19]
        break;
 800373a:	e005      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800373c:	4b31      	ldr	r3, [pc, #196]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0ef      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d15c      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800374e:	4b2c      	ldr	r3, [pc, #176]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003758:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01f      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	429a      	cmp	r2, r3
 800376a:	d019      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800376c:	4b24      	ldr	r3, [pc, #144]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003776:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	4a20      	ldr	r2, [pc, #128]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003788:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	4a1c      	ldr	r2, [pc, #112]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003798:	4a19      	ldr	r2, [pc, #100]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d016      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037aa:	f7fe fd9d 	bl	80022e8 <HAL_GetTick>
 80037ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b0:	e00b      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b2:	f7fe fd99 	bl	80022e8 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d902      	bls.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	74fb      	strb	r3, [r7, #19]
            break;
 80037c8:	e006      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0ec      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037de:	4b08      	ldr	r3, [pc, #32]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ee:	4904      	ldr	r1, [pc, #16]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037f6:	e009      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	74bb      	strb	r3, [r7, #18]
 80037fc:	e006      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800380c:	7c7b      	ldrb	r3, [r7, #17]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d105      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003812:	4b9e      	ldr	r3, [pc, #632]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003816:	4a9d      	ldr	r2, [pc, #628]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800381c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800382a:	4b98      	ldr	r3, [pc, #608]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f023 0203 	bic.w	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	4994      	ldr	r1, [pc, #592]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800384c:	4b8f      	ldr	r3, [pc, #572]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	f023 020c 	bic.w	r2, r3, #12
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385a:	498c      	ldr	r1, [pc, #560]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800386e:	4b87      	ldr	r3, [pc, #540]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	4983      	ldr	r1, [pc, #524]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003890:	4b7e      	ldr	r3, [pc, #504]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	497b      	ldr	r1, [pc, #492]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038b2:	4b76      	ldr	r3, [pc, #472]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c0:	4972      	ldr	r1, [pc, #456]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038d4:	4b6d      	ldr	r3, [pc, #436]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e2:	496a      	ldr	r1, [pc, #424]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038f6:	4b65      	ldr	r3, [pc, #404]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	4961      	ldr	r1, [pc, #388]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003918:	4b5c      	ldr	r3, [pc, #368]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003926:	4959      	ldr	r1, [pc, #356]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800393a:	4b54      	ldr	r3, [pc, #336]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003948:	4950      	ldr	r1, [pc, #320]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800395c:	4b4b      	ldr	r3, [pc, #300]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396a:	4948      	ldr	r1, [pc, #288]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800397e:	4b43      	ldr	r3, [pc, #268]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	493f      	ldr	r1, [pc, #252]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d028      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039a0:	4b3a      	ldr	r3, [pc, #232]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ae:	4937      	ldr	r1, [pc, #220]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039be:	d106      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c0:	4b32      	ldr	r3, [pc, #200]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4a31      	ldr	r2, [pc, #196]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ca:	60d3      	str	r3, [r2, #12]
 80039cc:	e011      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039d6:	d10c      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3304      	adds	r3, #4
 80039dc:	2101      	movs	r1, #1
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f8c8 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039ee:	7cfb      	ldrb	r3, [r7, #19]
 80039f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d028      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039fe:	4b23      	ldr	r3, [pc, #140]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	491f      	ldr	r1, [pc, #124]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a1c:	d106      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	4a1a      	ldr	r2, [pc, #104]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a28:	60d3      	str	r3, [r2, #12]
 8003a2a:	e011      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 f899 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a46:	7cfb      	ldrb	r3, [r7, #19]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d02b      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6a:	4908      	ldr	r1, [pc, #32]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a7a:	d109      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a7c:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4a02      	ldr	r2, [pc, #8]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a86:	60d3      	str	r3, [r2, #12]
 8003a88:	e014      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a8a:	bf00      	nop
 8003a8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f867 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ab0:	7cfb      	ldrb	r3, [r7, #19]
 8003ab2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d02f      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ace:	4928      	ldr	r1, [pc, #160]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ada:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ade:	d10d      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f844 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003af0:	7cfb      	ldrb	r3, [r7, #19]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d014      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003af6:	7cfb      	ldrb	r3, [r7, #19]
 8003af8:	74bb      	strb	r3, [r7, #18]
 8003afa:	e011      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3320      	adds	r3, #32
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 f925 	bl	8003d5c <RCCEx_PLLSAI2_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b16:	7cfb      	ldrb	r3, [r7, #19]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b2c:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b3a:	490d      	ldr	r1, [pc, #52]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b5e:	4904      	ldr	r1, [pc, #16]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b66:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021000 	.word	0x40021000

08003b74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b82:	4b75      	ldr	r3, [pc, #468]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d018      	beq.n	8003bc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b8e:	4b72      	ldr	r3, [pc, #456]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 0203 	and.w	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d10d      	bne.n	8003bba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ba6:	4b6c      	ldr	r3, [pc, #432]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
       ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d047      	beq.n	8003c4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	73fb      	strb	r3, [r7, #15]
 8003bbe:	e044      	b.n	8003c4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d018      	beq.n	8003bfa <RCCEx_PLLSAI1_Config+0x86>
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d825      	bhi.n	8003c18 <RCCEx_PLLSAI1_Config+0xa4>
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d002      	beq.n	8003bd6 <RCCEx_PLLSAI1_Config+0x62>
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d009      	beq.n	8003be8 <RCCEx_PLLSAI1_Config+0x74>
 8003bd4:	e020      	b.n	8003c18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bd6:	4b60      	ldr	r3, [pc, #384]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d11d      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be6:	e01a      	b.n	8003c1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003be8:	4b5b      	ldr	r3, [pc, #364]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d116      	bne.n	8003c22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf8:	e013      	b.n	8003c22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bfa:	4b57      	ldr	r3, [pc, #348]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10f      	bne.n	8003c26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c06:	4b54      	ldr	r3, [pc, #336]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c16:	e006      	b.n	8003c26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c1c:	e004      	b.n	8003c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c1e:	bf00      	nop
 8003c20:	e002      	b.n	8003c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c22:	bf00      	nop
 8003c24:	e000      	b.n	8003c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c26:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10d      	bne.n	8003c4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c2e:	4b4a      	ldr	r3, [pc, #296]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6819      	ldr	r1, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	430b      	orrs	r3, r1
 8003c44:	4944      	ldr	r1, [pc, #272]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d17d      	bne.n	8003d4c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c50:	4b41      	ldr	r3, [pc, #260]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a40      	ldr	r2, [pc, #256]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c5c:	f7fe fb44 	bl	80022e8 <HAL_GetTick>
 8003c60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c62:	e009      	b.n	8003c78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c64:	f7fe fb40 	bl	80022e8 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d902      	bls.n	8003c78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	73fb      	strb	r3, [r7, #15]
        break;
 8003c76:	e005      	b.n	8003c84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c78:	4b37      	ldr	r3, [pc, #220]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ef      	bne.n	8003c64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d160      	bne.n	8003d4c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d111      	bne.n	8003cb4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c90:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6892      	ldr	r2, [r2, #8]
 8003ca0:	0211      	lsls	r1, r2, #8
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68d2      	ldr	r2, [r2, #12]
 8003ca6:	0912      	lsrs	r2, r2, #4
 8003ca8:	0452      	lsls	r2, r2, #17
 8003caa:	430a      	orrs	r2, r1
 8003cac:	492a      	ldr	r1, [pc, #168]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	610b      	str	r3, [r1, #16]
 8003cb2:	e027      	b.n	8003d04 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d112      	bne.n	8003ce0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cba:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003cc2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6892      	ldr	r2, [r2, #8]
 8003cca:	0211      	lsls	r1, r2, #8
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6912      	ldr	r2, [r2, #16]
 8003cd0:	0852      	lsrs	r2, r2, #1
 8003cd2:	3a01      	subs	r2, #1
 8003cd4:	0552      	lsls	r2, r2, #21
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	491f      	ldr	r1, [pc, #124]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	610b      	str	r3, [r1, #16]
 8003cde:	e011      	b.n	8003d04 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ce0:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ce8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6892      	ldr	r2, [r2, #8]
 8003cf0:	0211      	lsls	r1, r2, #8
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6952      	ldr	r2, [r2, #20]
 8003cf6:	0852      	lsrs	r2, r2, #1
 8003cf8:	3a01      	subs	r2, #1
 8003cfa:	0652      	lsls	r2, r2, #25
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	4916      	ldr	r1, [pc, #88]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d04:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a13      	ldr	r2, [pc, #76]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7fe faea 	bl	80022e8 <HAL_GetTick>
 8003d14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d16:	e009      	b.n	8003d2c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d18:	f7fe fae6 	bl	80022e8 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d902      	bls.n	8003d2c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	73fb      	strb	r3, [r7, #15]
          break;
 8003d2a:	e005      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ef      	beq.n	8003d18 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	4904      	ldr	r1, [pc, #16]	; (8003d58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000

08003d5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d6a:	4b6a      	ldr	r3, [pc, #424]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d018      	beq.n	8003da8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d76:	4b67      	ldr	r3, [pc, #412]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0203 	and.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d10d      	bne.n	8003da2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
       ||
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d8e:	4b61      	ldr	r3, [pc, #388]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	091b      	lsrs	r3, r3, #4
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
       ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d047      	beq.n	8003e32 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	73fb      	strb	r3, [r7, #15]
 8003da6:	e044      	b.n	8003e32 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d018      	beq.n	8003de2 <RCCEx_PLLSAI2_Config+0x86>
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d825      	bhi.n	8003e00 <RCCEx_PLLSAI2_Config+0xa4>
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d002      	beq.n	8003dbe <RCCEx_PLLSAI2_Config+0x62>
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d009      	beq.n	8003dd0 <RCCEx_PLLSAI2_Config+0x74>
 8003dbc:	e020      	b.n	8003e00 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dbe:	4b55      	ldr	r3, [pc, #340]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d11d      	bne.n	8003e06 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dce:	e01a      	b.n	8003e06 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dd0:	4b50      	ldr	r3, [pc, #320]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d116      	bne.n	8003e0a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de0:	e013      	b.n	8003e0a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003de2:	4b4c      	ldr	r3, [pc, #304]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10f      	bne.n	8003e0e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dee:	4b49      	ldr	r3, [pc, #292]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003dfe:	e006      	b.n	8003e0e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      break;
 8003e04:	e004      	b.n	8003e10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e06:	bf00      	nop
 8003e08:	e002      	b.n	8003e10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10d      	bne.n	8003e32 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e16:	4b3f      	ldr	r3, [pc, #252]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6819      	ldr	r1, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	4939      	ldr	r1, [pc, #228]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d167      	bne.n	8003f08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e38:	4b36      	ldr	r3, [pc, #216]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a35      	ldr	r2, [pc, #212]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e44:	f7fe fa50 	bl	80022e8 <HAL_GetTick>
 8003e48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e4a:	e009      	b.n	8003e60 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e4c:	f7fe fa4c 	bl	80022e8 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d902      	bls.n	8003e60 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e5e:	e005      	b.n	8003e6c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e60:	4b2c      	ldr	r3, [pc, #176]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1ef      	bne.n	8003e4c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d14a      	bne.n	8003f08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d111      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e78:	4b26      	ldr	r3, [pc, #152]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6892      	ldr	r2, [r2, #8]
 8003e88:	0211      	lsls	r1, r2, #8
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68d2      	ldr	r2, [r2, #12]
 8003e8e:	0912      	lsrs	r2, r2, #4
 8003e90:	0452      	lsls	r2, r2, #17
 8003e92:	430a      	orrs	r2, r1
 8003e94:	491f      	ldr	r1, [pc, #124]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	614b      	str	r3, [r1, #20]
 8003e9a:	e011      	b.n	8003ec0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ea4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6892      	ldr	r2, [r2, #8]
 8003eac:	0211      	lsls	r1, r2, #8
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6912      	ldr	r2, [r2, #16]
 8003eb2:	0852      	lsrs	r2, r2, #1
 8003eb4:	3a01      	subs	r2, #1
 8003eb6:	0652      	lsls	r2, r2, #25
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	4916      	ldr	r1, [pc, #88]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ec0:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a13      	ldr	r2, [pc, #76]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fe fa0c 	bl	80022e8 <HAL_GetTick>
 8003ed0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ed2:	e009      	b.n	8003ee8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ed4:	f7fe fa08 	bl	80022e8 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d902      	bls.n	8003ee8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ee6:	e005      	b.n	8003ef4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0ef      	beq.n	8003ed4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d106      	bne.n	8003f08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	4904      	ldr	r1, [pc, #16]	; (8003f14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000

08003f18 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e049      	b.n	8003fbe <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	795b      	ldrb	r3, [r3, #5]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd fe30 	bl	8001ba0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0204 	orr.w	r2, r2, #4
 8003f54:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d104      	bne.n	8003f6e <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2204      	movs	r2, #4
 8003f68:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e027      	b.n	8003fbe <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003f6e:	f7fe f9bb 	bl	80022e8 <HAL_GetTick>
 8003f72:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003f74:	e015      	b.n	8003fa2 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003f76:	f7fe f9b7 	bl	80022e8 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d90e      	bls.n	8003fa2 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d107      	bne.n	8003fa2 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2204      	movs	r2, #4
 8003f96:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e00d      	b.n	8003fbe <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d0e2      	beq.n	8003f76 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	791b      	ldrb	r3, [r3, #4]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_RNG_GenerateRandomNumber+0x1a>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e044      	b.n	800406a <HAL_RNG_GenerateRandomNumber+0xa4>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	795b      	ldrb	r3, [r3, #5]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d133      	bne.n	8004058 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ff6:	f7fe f977 	bl	80022e8 <HAL_GetTick>
 8003ffa:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003ffc:	e018      	b.n	8004030 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003ffe:	f7fe f973 	bl	80022e8 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d911      	bls.n	8004030 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b01      	cmp	r3, #1
 8004018:	d00a      	beq.n	8004030 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e01c      	b.n	800406a <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b01      	cmp	r3, #1
 800403c:	d1df      	bne.n	8003ffe <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	715a      	strb	r2, [r3, #5]
 8004056:	e004      	b.n	8004062 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2204      	movs	r2, #4
 800405c:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	711a      	strb	r2, [r3, #4]

  return status;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2210      	movs	r2, #16
 8004094:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004096:	2301      	movs	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	e01f      	b.n	80040dc <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01a      	beq.n	80040dc <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d108      	bne.n	80040c2 <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	e00c      	b.n	80040dc <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2208      	movs	r2, #8
 80040c6:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 80040c8:	2301      	movs	r3, #1
 80040ca:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0208 	bic.w	r2, r2, #8
 80040da:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d10b      	bne.n	80040fa <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2204      	movs	r2, #4
 80040e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f837 	bl	800415c <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f06f 0260 	mvn.w	r2, #96	; 0x60
 80040f6:	605a      	str	r2, [r3, #4]

    return;
 80040f8:	e022      	b.n	8004140 <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01d      	beq.n	8004140 <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0208 	bic.w	r2, r2, #8
 8004112:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	795b      	ldrb	r3, [r3, #5]
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b04      	cmp	r3, #4
 8004126:	d00b      	beq.n	8004140 <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4619      	mov	r1, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f803 	bl	8004146 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e049      	b.n	8004216 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fd fd4e 	bl	8001c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4619      	mov	r1, r3
 80041ae:	4610      	mov	r0, r2
 80041b0:	f000 f9d0 	bl	8004554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	d001      	beq.n	8004238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e04f      	b.n	80042d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a23      	ldr	r2, [pc, #140]	; (80042e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01d      	beq.n	8004296 <HAL_TIM_Base_Start_IT+0x76>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004262:	d018      	beq.n	8004296 <HAL_TIM_Base_Start_IT+0x76>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1f      	ldr	r2, [pc, #124]	; (80042e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <HAL_TIM_Base_Start_IT+0x76>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1e      	ldr	r2, [pc, #120]	; (80042ec <HAL_TIM_Base_Start_IT+0xcc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00e      	beq.n	8004296 <HAL_TIM_Base_Start_IT+0x76>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a1c      	ldr	r2, [pc, #112]	; (80042f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d009      	beq.n	8004296 <HAL_TIM_Base_Start_IT+0x76>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1b      	ldr	r2, [pc, #108]	; (80042f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d004      	beq.n	8004296 <HAL_TIM_Base_Start_IT+0x76>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a19      	ldr	r2, [pc, #100]	; (80042f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d115      	bne.n	80042c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	4b17      	ldr	r3, [pc, #92]	; (80042fc <HAL_TIM_Base_Start_IT+0xdc>)
 800429e:	4013      	ands	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b06      	cmp	r3, #6
 80042a6:	d015      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0xb4>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ae:	d011      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c0:	e008      	b.n	80042d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0201 	orr.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e000      	b.n	80042d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40012c00 	.word	0x40012c00
 80042e8:	40000400 	.word	0x40000400
 80042ec:	40000800 	.word	0x40000800
 80042f0:	40000c00 	.word	0x40000c00
 80042f4:	40013400 	.word	0x40013400
 80042f8:	40014000 	.word	0x40014000
 80042fc:	00010007 	.word	0x00010007

08004300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d020      	beq.n	8004364 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01b      	beq.n	8004364 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0202 	mvn.w	r2, #2
 8004334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8e4 	bl	8004518 <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f8d6 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f8e7 	bl	800452c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d020      	beq.n	80043b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01b      	beq.n	80043b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0204 	mvn.w	r2, #4
 8004380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2202      	movs	r2, #2
 8004386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f8be 	bl	8004518 <HAL_TIM_IC_CaptureCallback>
 800439c:	e005      	b.n	80043aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f8b0 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f8c1 	bl	800452c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d020      	beq.n	80043fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01b      	beq.n	80043fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0208 	mvn.w	r2, #8
 80043cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2204      	movs	r2, #4
 80043d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f898 	bl	8004518 <HAL_TIM_IC_CaptureCallback>
 80043e8:	e005      	b.n	80043f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f88a 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f89b 	bl	800452c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b00      	cmp	r3, #0
 8004404:	d020      	beq.n	8004448 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01b      	beq.n	8004448 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0210 	mvn.w	r2, #16
 8004418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2208      	movs	r2, #8
 800441e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f872 	bl	8004518 <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f864 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f875 	bl	800452c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00c      	beq.n	800446c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0201 	mvn.w	r2, #1
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fd fa0c 	bl	8001884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00c      	beq.n	8004490 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f98e 	bl	80047ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00c      	beq.n	80044b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f986 	bl	80047c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00c      	beq.n	80044d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f834 	bl	8004540 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00c      	beq.n	80044fc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d007      	beq.n	80044fc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0220 	mvn.w	r2, #32
 80044f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f94e 	bl	8004798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044fc:	bf00      	nop
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a40      	ldr	r2, [pc, #256]	; (8004668 <TIM_Base_SetConfig+0x114>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d013      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004572:	d00f      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a3d      	ldr	r2, [pc, #244]	; (800466c <TIM_Base_SetConfig+0x118>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00b      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a3c      	ldr	r2, [pc, #240]	; (8004670 <TIM_Base_SetConfig+0x11c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d007      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a3b      	ldr	r2, [pc, #236]	; (8004674 <TIM_Base_SetConfig+0x120>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_Base_SetConfig+0x40>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a3a      	ldr	r2, [pc, #232]	; (8004678 <TIM_Base_SetConfig+0x124>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d108      	bne.n	80045a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2f      	ldr	r2, [pc, #188]	; (8004668 <TIM_Base_SetConfig+0x114>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01f      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b4:	d01b      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a2c      	ldr	r2, [pc, #176]	; (800466c <TIM_Base_SetConfig+0x118>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d017      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a2b      	ldr	r2, [pc, #172]	; (8004670 <TIM_Base_SetConfig+0x11c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a2a      	ldr	r2, [pc, #168]	; (8004674 <TIM_Base_SetConfig+0x120>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00f      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a29      	ldr	r2, [pc, #164]	; (8004678 <TIM_Base_SetConfig+0x124>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00b      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a28      	ldr	r2, [pc, #160]	; (800467c <TIM_Base_SetConfig+0x128>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d007      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a27      	ldr	r2, [pc, #156]	; (8004680 <TIM_Base_SetConfig+0x12c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <TIM_Base_SetConfig+0x9a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a26      	ldr	r2, [pc, #152]	; (8004684 <TIM_Base_SetConfig+0x130>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d108      	bne.n	8004600 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a10      	ldr	r2, [pc, #64]	; (8004668 <TIM_Base_SetConfig+0x114>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00f      	beq.n	800464c <TIM_Base_SetConfig+0xf8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a12      	ldr	r2, [pc, #72]	; (8004678 <TIM_Base_SetConfig+0x124>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00b      	beq.n	800464c <TIM_Base_SetConfig+0xf8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a11      	ldr	r2, [pc, #68]	; (800467c <TIM_Base_SetConfig+0x128>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d007      	beq.n	800464c <TIM_Base_SetConfig+0xf8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a10      	ldr	r2, [pc, #64]	; (8004680 <TIM_Base_SetConfig+0x12c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d003      	beq.n	800464c <TIM_Base_SetConfig+0xf8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a0f      	ldr	r2, [pc, #60]	; (8004684 <TIM_Base_SetConfig+0x130>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d103      	bne.n	8004654 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	615a      	str	r2, [r3, #20]
}
 800465a:	bf00      	nop
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800
 8004674:	40000c00 	.word	0x40000c00
 8004678:	40013400 	.word	0x40013400
 800467c:	40014000 	.word	0x40014000
 8004680:	40014400 	.word	0x40014400
 8004684:	40014800 	.word	0x40014800

08004688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800469c:	2302      	movs	r3, #2
 800469e:	e068      	b.n	8004772 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a2e      	ldr	r2, [pc, #184]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d004      	beq.n	80046d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a2d      	ldr	r2, [pc, #180]	; (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d108      	bne.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1e      	ldr	r2, [pc, #120]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d01d      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004712:	d018      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1b      	ldr	r2, [pc, #108]	; (8004788 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1a      	ldr	r2, [pc, #104]	; (800478c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00e      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a18      	ldr	r2, [pc, #96]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d009      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a13      	ldr	r2, [pc, #76]	; (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a14      	ldr	r2, [pc, #80]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d10c      	bne.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800474c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	4313      	orrs	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40013400 	.word	0x40013400
 8004788:	40000400 	.word	0x40000400
 800478c:	40000800 	.word	0x40000800
 8004790:	40000c00 	.word	0x40000c00
 8004794:	40014000 	.word	0x40014000

08004798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e040      	b.n	8004868 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fd fa44 	bl	8001c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2224      	movs	r2, #36	; 0x24
 8004800:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0201 	bic.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fb6a 	bl	8004ef4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f8af 	bl	8004984 <UART_SetConfig>
 8004826:	4603      	mov	r3, r0
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e01b      	b.n	8004868 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800483e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800484e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fbe9 	bl	8005038 <UART_CheckIdleState>
 8004866:	4603      	mov	r3, r0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	; 0x28
 8004874:	af02      	add	r7, sp, #8
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	603b      	str	r3, [r7, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004884:	2b20      	cmp	r3, #32
 8004886:	d178      	bne.n	800497a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_UART_Transmit+0x24>
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e071      	b.n	800497c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2221      	movs	r2, #33	; 0x21
 80048a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048a6:	f7fd fd1f 	bl	80022e8 <HAL_GetTick>
 80048aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	88fa      	ldrh	r2, [r7, #6]
 80048b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	88fa      	ldrh	r2, [r7, #6]
 80048b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c4:	d108      	bne.n	80048d8 <HAL_UART_Transmit+0x68>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d104      	bne.n	80048d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	e003      	b.n	80048e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048dc:	2300      	movs	r3, #0
 80048de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048e0:	e030      	b.n	8004944 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2200      	movs	r2, #0
 80048ea:	2180      	movs	r1, #128	; 0x80
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 fc4b 	bl	8005188 <UART_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d004      	beq.n	8004902 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e03c      	b.n	800497c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10b      	bne.n	8004920 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	881a      	ldrh	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004914:	b292      	uxth	r2, r2
 8004916:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	3302      	adds	r3, #2
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	e008      	b.n	8004932 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	781a      	ldrb	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	b292      	uxth	r2, r2
 800492a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	3301      	adds	r3, #1
 8004930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1c8      	bne.n	80048e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2200      	movs	r2, #0
 8004958:	2140      	movs	r1, #64	; 0x40
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 fc14 	bl	8005188 <UART_WaitOnFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d004      	beq.n	8004970 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e005      	b.n	800497c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	e000      	b.n	800497c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800497a:	2302      	movs	r3, #2
  }
}
 800497c:	4618      	mov	r0, r3
 800497e:	3720      	adds	r7, #32
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004988:	b08a      	sub	sp, #40	; 0x28
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	431a      	orrs	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4ba4      	ldr	r3, [pc, #656]	; (8004c44 <UART_SetConfig+0x2c0>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	6812      	ldr	r2, [r2, #0]
 80049ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049bc:	430b      	orrs	r3, r1
 80049be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a99      	ldr	r2, [pc, #612]	; (8004c48 <UART_SetConfig+0x2c4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ec:	4313      	orrs	r3, r2
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a00:	430a      	orrs	r2, r1
 8004a02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a90      	ldr	r2, [pc, #576]	; (8004c4c <UART_SetConfig+0x2c8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d126      	bne.n	8004a5c <UART_SetConfig+0xd8>
 8004a0e:	4b90      	ldr	r3, [pc, #576]	; (8004c50 <UART_SetConfig+0x2cc>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d81b      	bhi.n	8004a54 <UART_SetConfig+0xd0>
 8004a1c:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <UART_SetConfig+0xa0>)
 8004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a22:	bf00      	nop
 8004a24:	08004a35 	.word	0x08004a35
 8004a28:	08004a45 	.word	0x08004a45
 8004a2c:	08004a3d 	.word	0x08004a3d
 8004a30:	08004a4d 	.word	0x08004a4d
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a3a:	e116      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a42:	e112      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004a44:	2304      	movs	r3, #4
 8004a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a4a:	e10e      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004a4c:	2308      	movs	r3, #8
 8004a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a52:	e10a      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004a54:	2310      	movs	r3, #16
 8004a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a5a:	e106      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a7c      	ldr	r2, [pc, #496]	; (8004c54 <UART_SetConfig+0x2d0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d138      	bne.n	8004ad8 <UART_SetConfig+0x154>
 8004a66:	4b7a      	ldr	r3, [pc, #488]	; (8004c50 <UART_SetConfig+0x2cc>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6c:	f003 030c 	and.w	r3, r3, #12
 8004a70:	2b0c      	cmp	r3, #12
 8004a72:	d82d      	bhi.n	8004ad0 <UART_SetConfig+0x14c>
 8004a74:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <UART_SetConfig+0xf8>)
 8004a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7a:	bf00      	nop
 8004a7c:	08004ab1 	.word	0x08004ab1
 8004a80:	08004ad1 	.word	0x08004ad1
 8004a84:	08004ad1 	.word	0x08004ad1
 8004a88:	08004ad1 	.word	0x08004ad1
 8004a8c:	08004ac1 	.word	0x08004ac1
 8004a90:	08004ad1 	.word	0x08004ad1
 8004a94:	08004ad1 	.word	0x08004ad1
 8004a98:	08004ad1 	.word	0x08004ad1
 8004a9c:	08004ab9 	.word	0x08004ab9
 8004aa0:	08004ad1 	.word	0x08004ad1
 8004aa4:	08004ad1 	.word	0x08004ad1
 8004aa8:	08004ad1 	.word	0x08004ad1
 8004aac:	08004ac9 	.word	0x08004ac9
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab6:	e0d8      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004abe:	e0d4      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004ac0:	2304      	movs	r3, #4
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac6:	e0d0      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004ac8:	2308      	movs	r3, #8
 8004aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ace:	e0cc      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad6:	e0c8      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a5e      	ldr	r2, [pc, #376]	; (8004c58 <UART_SetConfig+0x2d4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d125      	bne.n	8004b2e <UART_SetConfig+0x1aa>
 8004ae2:	4b5b      	ldr	r3, [pc, #364]	; (8004c50 <UART_SetConfig+0x2cc>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004aec:	2b30      	cmp	r3, #48	; 0x30
 8004aee:	d016      	beq.n	8004b1e <UART_SetConfig+0x19a>
 8004af0:	2b30      	cmp	r3, #48	; 0x30
 8004af2:	d818      	bhi.n	8004b26 <UART_SetConfig+0x1a2>
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d00a      	beq.n	8004b0e <UART_SetConfig+0x18a>
 8004af8:	2b20      	cmp	r3, #32
 8004afa:	d814      	bhi.n	8004b26 <UART_SetConfig+0x1a2>
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <UART_SetConfig+0x182>
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d008      	beq.n	8004b16 <UART_SetConfig+0x192>
 8004b04:	e00f      	b.n	8004b26 <UART_SetConfig+0x1a2>
 8004b06:	2300      	movs	r3, #0
 8004b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0c:	e0ad      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b14:	e0a9      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004b16:	2304      	movs	r3, #4
 8004b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b1c:	e0a5      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004b1e:	2308      	movs	r3, #8
 8004b20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b24:	e0a1      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004b26:	2310      	movs	r3, #16
 8004b28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2c:	e09d      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a4a      	ldr	r2, [pc, #296]	; (8004c5c <UART_SetConfig+0x2d8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d125      	bne.n	8004b84 <UART_SetConfig+0x200>
 8004b38:	4b45      	ldr	r3, [pc, #276]	; (8004c50 <UART_SetConfig+0x2cc>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b42:	2bc0      	cmp	r3, #192	; 0xc0
 8004b44:	d016      	beq.n	8004b74 <UART_SetConfig+0x1f0>
 8004b46:	2bc0      	cmp	r3, #192	; 0xc0
 8004b48:	d818      	bhi.n	8004b7c <UART_SetConfig+0x1f8>
 8004b4a:	2b80      	cmp	r3, #128	; 0x80
 8004b4c:	d00a      	beq.n	8004b64 <UART_SetConfig+0x1e0>
 8004b4e:	2b80      	cmp	r3, #128	; 0x80
 8004b50:	d814      	bhi.n	8004b7c <UART_SetConfig+0x1f8>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <UART_SetConfig+0x1d8>
 8004b56:	2b40      	cmp	r3, #64	; 0x40
 8004b58:	d008      	beq.n	8004b6c <UART_SetConfig+0x1e8>
 8004b5a:	e00f      	b.n	8004b7c <UART_SetConfig+0x1f8>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b62:	e082      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004b64:	2302      	movs	r3, #2
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6a:	e07e      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b72:	e07a      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004b74:	2308      	movs	r3, #8
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7a:	e076      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b82:	e072      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a35      	ldr	r2, [pc, #212]	; (8004c60 <UART_SetConfig+0x2dc>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d12a      	bne.n	8004be4 <UART_SetConfig+0x260>
 8004b8e:	4b30      	ldr	r3, [pc, #192]	; (8004c50 <UART_SetConfig+0x2cc>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b9c:	d01a      	beq.n	8004bd4 <UART_SetConfig+0x250>
 8004b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ba2:	d81b      	bhi.n	8004bdc <UART_SetConfig+0x258>
 8004ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba8:	d00c      	beq.n	8004bc4 <UART_SetConfig+0x240>
 8004baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bae:	d815      	bhi.n	8004bdc <UART_SetConfig+0x258>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <UART_SetConfig+0x238>
 8004bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb8:	d008      	beq.n	8004bcc <UART_SetConfig+0x248>
 8004bba:	e00f      	b.n	8004bdc <UART_SetConfig+0x258>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc2:	e052      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bca:	e04e      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd2:	e04a      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bda:	e046      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be2:	e042      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a17      	ldr	r2, [pc, #92]	; (8004c48 <UART_SetConfig+0x2c4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d13a      	bne.n	8004c64 <UART_SetConfig+0x2e0>
 8004bee:	4b18      	ldr	r3, [pc, #96]	; (8004c50 <UART_SetConfig+0x2cc>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bfc:	d01a      	beq.n	8004c34 <UART_SetConfig+0x2b0>
 8004bfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c02:	d81b      	bhi.n	8004c3c <UART_SetConfig+0x2b8>
 8004c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c08:	d00c      	beq.n	8004c24 <UART_SetConfig+0x2a0>
 8004c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c0e:	d815      	bhi.n	8004c3c <UART_SetConfig+0x2b8>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <UART_SetConfig+0x298>
 8004c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c18:	d008      	beq.n	8004c2c <UART_SetConfig+0x2a8>
 8004c1a:	e00f      	b.n	8004c3c <UART_SetConfig+0x2b8>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c22:	e022      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004c24:	2302      	movs	r3, #2
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2a:	e01e      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c32:	e01a      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004c34:	2308      	movs	r3, #8
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3a:	e016      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c42:	e012      	b.n	8004c6a <UART_SetConfig+0x2e6>
 8004c44:	efff69f3 	.word	0xefff69f3
 8004c48:	40008000 	.word	0x40008000
 8004c4c:	40013800 	.word	0x40013800
 8004c50:	40021000 	.word	0x40021000
 8004c54:	40004400 	.word	0x40004400
 8004c58:	40004800 	.word	0x40004800
 8004c5c:	40004c00 	.word	0x40004c00
 8004c60:	40005000 	.word	0x40005000
 8004c64:	2310      	movs	r3, #16
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a9f      	ldr	r2, [pc, #636]	; (8004eec <UART_SetConfig+0x568>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d17a      	bne.n	8004d6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d824      	bhi.n	8004cc6 <UART_SetConfig+0x342>
 8004c7c:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <UART_SetConfig+0x300>)
 8004c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c82:	bf00      	nop
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004cc7 	.word	0x08004cc7
 8004c8c:	08004cb1 	.word	0x08004cb1
 8004c90:	08004cc7 	.word	0x08004cc7
 8004c94:	08004cb7 	.word	0x08004cb7
 8004c98:	08004cc7 	.word	0x08004cc7
 8004c9c:	08004cc7 	.word	0x08004cc7
 8004ca0:	08004cc7 	.word	0x08004cc7
 8004ca4:	08004cbf 	.word	0x08004cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f7fe fbee 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 8004cac:	61f8      	str	r0, [r7, #28]
        break;
 8004cae:	e010      	b.n	8004cd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb0:	4b8f      	ldr	r3, [pc, #572]	; (8004ef0 <UART_SetConfig+0x56c>)
 8004cb2:	61fb      	str	r3, [r7, #28]
        break;
 8004cb4:	e00d      	b.n	8004cd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb6:	f7fe fb4f 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8004cba:	61f8      	str	r0, [r7, #28]
        break;
 8004cbc:	e009      	b.n	8004cd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc2:	61fb      	str	r3, [r7, #28]
        break;
 8004cc4:	e005      	b.n	8004cd2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80fb 	beq.w	8004ed0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	4413      	add	r3, r2
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d305      	bcc.n	8004cf6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d903      	bls.n	8004cfe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cfc:	e0e8      	b.n	8004ed0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	2200      	movs	r2, #0
 8004d02:	461c      	mov	r4, r3
 8004d04:	4615      	mov	r5, r2
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	022b      	lsls	r3, r5, #8
 8004d10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d14:	0222      	lsls	r2, r4, #8
 8004d16:	68f9      	ldr	r1, [r7, #12]
 8004d18:	6849      	ldr	r1, [r1, #4]
 8004d1a:	0849      	lsrs	r1, r1, #1
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	4688      	mov	r8, r1
 8004d20:	4681      	mov	r9, r0
 8004d22:	eb12 0a08 	adds.w	sl, r2, r8
 8004d26:	eb43 0b09 	adc.w	fp, r3, r9
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d38:	4650      	mov	r0, sl
 8004d3a:	4659      	mov	r1, fp
 8004d3c:	f7fb faa0 	bl	8000280 <__aeabi_uldivmod>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4613      	mov	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d4e:	d308      	bcc.n	8004d62 <UART_SetConfig+0x3de>
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d56:	d204      	bcs.n	8004d62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	60da      	str	r2, [r3, #12]
 8004d60:	e0b6      	b.n	8004ed0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d68:	e0b2      	b.n	8004ed0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d72:	d15e      	bne.n	8004e32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d828      	bhi.n	8004dce <UART_SetConfig+0x44a>
 8004d7c:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <UART_SetConfig+0x400>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004db1 	.word	0x08004db1
 8004d8c:	08004db9 	.word	0x08004db9
 8004d90:	08004dcf 	.word	0x08004dcf
 8004d94:	08004dbf 	.word	0x08004dbf
 8004d98:	08004dcf 	.word	0x08004dcf
 8004d9c:	08004dcf 	.word	0x08004dcf
 8004da0:	08004dcf 	.word	0x08004dcf
 8004da4:	08004dc7 	.word	0x08004dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da8:	f7fe fb6e 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 8004dac:	61f8      	str	r0, [r7, #28]
        break;
 8004dae:	e014      	b.n	8004dda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db0:	f7fe fb80 	bl	80034b4 <HAL_RCC_GetPCLK2Freq>
 8004db4:	61f8      	str	r0, [r7, #28]
        break;
 8004db6:	e010      	b.n	8004dda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db8:	4b4d      	ldr	r3, [pc, #308]	; (8004ef0 <UART_SetConfig+0x56c>)
 8004dba:	61fb      	str	r3, [r7, #28]
        break;
 8004dbc:	e00d      	b.n	8004dda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dbe:	f7fe facb 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8004dc2:	61f8      	str	r0, [r7, #28]
        break;
 8004dc4:	e009      	b.n	8004dda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dca:	61fb      	str	r3, [r7, #28]
        break;
 8004dcc:	e005      	b.n	8004dda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004dd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d077      	beq.n	8004ed0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	005a      	lsls	r2, r3, #1
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	085b      	lsrs	r3, r3, #1
 8004dea:	441a      	add	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b0f      	cmp	r3, #15
 8004dfa:	d916      	bls.n	8004e2a <UART_SetConfig+0x4a6>
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e02:	d212      	bcs.n	8004e2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f023 030f 	bic.w	r3, r3, #15
 8004e0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	085b      	lsrs	r3, r3, #1
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	8afb      	ldrh	r3, [r7, #22]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	8afa      	ldrh	r2, [r7, #22]
 8004e26:	60da      	str	r2, [r3, #12]
 8004e28:	e052      	b.n	8004ed0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e30:	e04e      	b.n	8004ed0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d827      	bhi.n	8004e8a <UART_SetConfig+0x506>
 8004e3a:	a201      	add	r2, pc, #4	; (adr r2, 8004e40 <UART_SetConfig+0x4bc>)
 8004e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e40:	08004e65 	.word	0x08004e65
 8004e44:	08004e6d 	.word	0x08004e6d
 8004e48:	08004e75 	.word	0x08004e75
 8004e4c:	08004e8b 	.word	0x08004e8b
 8004e50:	08004e7b 	.word	0x08004e7b
 8004e54:	08004e8b 	.word	0x08004e8b
 8004e58:	08004e8b 	.word	0x08004e8b
 8004e5c:	08004e8b 	.word	0x08004e8b
 8004e60:	08004e83 	.word	0x08004e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e64:	f7fe fb10 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 8004e68:	61f8      	str	r0, [r7, #28]
        break;
 8004e6a:	e014      	b.n	8004e96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e6c:	f7fe fb22 	bl	80034b4 <HAL_RCC_GetPCLK2Freq>
 8004e70:	61f8      	str	r0, [r7, #28]
        break;
 8004e72:	e010      	b.n	8004e96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e74:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <UART_SetConfig+0x56c>)
 8004e76:	61fb      	str	r3, [r7, #28]
        break;
 8004e78:	e00d      	b.n	8004e96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e7a:	f7fe fa6d 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8004e7e:	61f8      	str	r0, [r7, #28]
        break;
 8004e80:	e009      	b.n	8004e96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e86:	61fb      	str	r3, [r7, #28]
        break;
 8004e88:	e005      	b.n	8004e96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e94:	bf00      	nop
    }

    if (pclk != 0U)
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d019      	beq.n	8004ed0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	085a      	lsrs	r2, r3, #1
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	441a      	add	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b0f      	cmp	r3, #15
 8004eb4:	d909      	bls.n	8004eca <UART_SetConfig+0x546>
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ebc:	d205      	bcs.n	8004eca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60da      	str	r2, [r3, #12]
 8004ec8:	e002      	b.n	8004ed0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004edc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3728      	adds	r7, #40	; 0x28
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eea:	bf00      	nop
 8004eec:	40008000 	.word	0x40008000
 8004ef0:	00f42400 	.word	0x00f42400

08004ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01a      	beq.n	800500a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff2:	d10a      	bne.n	800500a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
  }
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b098      	sub	sp, #96	; 0x60
 800503c:	af02      	add	r7, sp, #8
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005048:	f7fd f94e 	bl	80022e8 <HAL_GetTick>
 800504c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b08      	cmp	r3, #8
 800505a:	d12e      	bne.n	80050ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800505c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005064:	2200      	movs	r2, #0
 8005066:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f88c 	bl	8005188 <UART_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d021      	beq.n	80050ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507e:	e853 3f00 	ldrex	r3, [r3]
 8005082:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800508a:	653b      	str	r3, [r7, #80]	; 0x50
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	461a      	mov	r2, r3
 8005092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005094:	647b      	str	r3, [r7, #68]	; 0x44
 8005096:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005098:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800509a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800509c:	e841 2300 	strex	r3, r2, [r1]
 80050a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e6      	bne.n	8005076 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e062      	b.n	8005180 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d149      	bne.n	800515c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050d0:	2200      	movs	r2, #0
 80050d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f856 	bl	8005188 <UART_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d03c      	beq.n	800515c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	623b      	str	r3, [r7, #32]
   return(result);
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005100:	633b      	str	r3, [r7, #48]	; 0x30
 8005102:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005104:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005108:	e841 2300 	strex	r3, r2, [r1]
 800510c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e6      	bne.n	80050e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3308      	adds	r3, #8
 800511a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	60fb      	str	r3, [r7, #12]
   return(result);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	64bb      	str	r3, [r7, #72]	; 0x48
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3308      	adds	r3, #8
 8005132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005134:	61fa      	str	r2, [r7, #28]
 8005136:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	69b9      	ldr	r1, [r7, #24]
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	617b      	str	r3, [r7, #20]
   return(result);
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e5      	bne.n	8005114 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e011      	b.n	8005180 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2220      	movs	r2, #32
 8005160:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3758      	adds	r7, #88	; 0x58
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	4613      	mov	r3, r2
 8005196:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005198:	e049      	b.n	800522e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d045      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a2:	f7fd f8a1 	bl	80022e8 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e048      	b.n	800524e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d031      	beq.n	800522e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d110      	bne.n	80051fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2208      	movs	r2, #8
 80051de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f838 	bl	8005256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2208      	movs	r2, #8
 80051ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e029      	b.n	800524e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005208:	d111      	bne.n	800522e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005212:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f81e 	bl	8005256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e00f      	b.n	800524e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4013      	ands	r3, r2
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	429a      	cmp	r2, r3
 800523c:	bf0c      	ite	eq
 800523e:	2301      	moveq	r3, #1
 8005240:	2300      	movne	r3, #0
 8005242:	b2db      	uxtb	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	429a      	cmp	r2, r3
 800524a:	d0a6      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005256:	b480      	push	{r7}
 8005258:	b095      	sub	sp, #84	; 0x54
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	461a      	mov	r2, r3
 800527a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527c:	643b      	str	r3, [r7, #64]	; 0x40
 800527e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005282:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005284:	e841 2300 	strex	r3, r2, [r1]
 8005288:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e6      	bne.n	800525e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3308      	adds	r3, #8
 8005296:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	61fb      	str	r3, [r7, #28]
   return(result);
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f023 0301 	bic.w	r3, r3, #1
 80052a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3308      	adds	r3, #8
 80052ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e5      	bne.n	8005290 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d118      	bne.n	80052fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f023 0310 	bic.w	r3, r3, #16
 80052e0:	647b      	str	r3, [r7, #68]	; 0x44
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ea:	61bb      	str	r3, [r7, #24]
 80052ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6979      	ldr	r1, [r7, #20]
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	613b      	str	r3, [r7, #16]
   return(result);
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e6      	bne.n	80052cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005312:	bf00      	nop
 8005314:	3754      	adds	r7, #84	; 0x54
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <__NVIC_SetPriority>:
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	6039      	str	r1, [r7, #0]
 800532a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800532c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005330:	2b00      	cmp	r3, #0
 8005332:	db0a      	blt.n	800534a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	b2da      	uxtb	r2, r3
 8005338:	490c      	ldr	r1, [pc, #48]	; (800536c <__NVIC_SetPriority+0x4c>)
 800533a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533e:	0112      	lsls	r2, r2, #4
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	440b      	add	r3, r1
 8005344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005348:	e00a      	b.n	8005360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	b2da      	uxtb	r2, r3
 800534e:	4908      	ldr	r1, [pc, #32]	; (8005370 <__NVIC_SetPriority+0x50>)
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	f003 030f 	and.w	r3, r3, #15
 8005356:	3b04      	subs	r3, #4
 8005358:	0112      	lsls	r2, r2, #4
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	440b      	add	r3, r1
 800535e:	761a      	strb	r2, [r3, #24]
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	e000e100 	.word	0xe000e100
 8005370:	e000ed00 	.word	0xe000ed00

08005374 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005378:	2100      	movs	r1, #0
 800537a:	f06f 0004 	mvn.w	r0, #4
 800537e:	f7ff ffcf 	bl	8005320 <__NVIC_SetPriority>
#endif
}
 8005382:	bf00      	nop
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800538e:	f3ef 8305 	mrs	r3, IPSR
 8005392:	603b      	str	r3, [r7, #0]
  return(result);
 8005394:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800539a:	f06f 0305 	mvn.w	r3, #5
 800539e:	607b      	str	r3, [r7, #4]
 80053a0:	e00c      	b.n	80053bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053a2:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <osKernelInitialize+0x44>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d105      	bne.n	80053b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80053aa:	4b08      	ldr	r3, [pc, #32]	; (80053cc <osKernelInitialize+0x44>)
 80053ac:	2201      	movs	r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	607b      	str	r3, [r7, #4]
 80053b4:	e002      	b.n	80053bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80053b6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053bc:	687b      	ldr	r3, [r7, #4]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	2000062c 	.word	0x2000062c

080053d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053d6:	f3ef 8305 	mrs	r3, IPSR
 80053da:	603b      	str	r3, [r7, #0]
  return(result);
 80053dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80053e2:	f06f 0305 	mvn.w	r3, #5
 80053e6:	607b      	str	r3, [r7, #4]
 80053e8:	e010      	b.n	800540c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80053ea:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <osKernelStart+0x48>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d109      	bne.n	8005406 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80053f2:	f7ff ffbf 	bl	8005374 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80053f6:	4b08      	ldr	r3, [pc, #32]	; (8005418 <osKernelStart+0x48>)
 80053f8:	2202      	movs	r2, #2
 80053fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80053fc:	f001 fb6e 	bl	8006adc <vTaskStartScheduler>
      stat = osOK;
 8005400:	2300      	movs	r3, #0
 8005402:	607b      	str	r3, [r7, #4]
 8005404:	e002      	b.n	800540c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005406:	f04f 33ff 	mov.w	r3, #4294967295
 800540a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800540c:	687b      	ldr	r3, [r7, #4]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	2000062c 	.word	0x2000062c

0800541c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800541c:	b580      	push	{r7, lr}
 800541e:	b08e      	sub	sp, #56	; 0x38
 8005420:	af04      	add	r7, sp, #16
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005428:	2300      	movs	r3, #0
 800542a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800542c:	f3ef 8305 	mrs	r3, IPSR
 8005430:	617b      	str	r3, [r7, #20]
  return(result);
 8005432:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005434:	2b00      	cmp	r3, #0
 8005436:	d17e      	bne.n	8005536 <osThreadNew+0x11a>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d07b      	beq.n	8005536 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005442:	2318      	movs	r3, #24
 8005444:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005446:	2300      	movs	r3, #0
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800544a:	f04f 33ff 	mov.w	r3, #4294967295
 800544e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d045      	beq.n	80054e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <osThreadNew+0x48>
        name = attr->name;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <osThreadNew+0x6e>
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	2b38      	cmp	r3, #56	; 0x38
 800547c:	d805      	bhi.n	800548a <osThreadNew+0x6e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <osThreadNew+0x72>
        return (NULL);
 800548a:	2300      	movs	r3, #0
 800548c:	e054      	b.n	8005538 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	089b      	lsrs	r3, r3, #2
 800549c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00e      	beq.n	80054c4 <osThreadNew+0xa8>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	2ba7      	cmp	r3, #167	; 0xa7
 80054ac:	d90a      	bls.n	80054c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d006      	beq.n	80054c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <osThreadNew+0xa8>
        mem = 1;
 80054be:	2301      	movs	r3, #1
 80054c0:	61bb      	str	r3, [r7, #24]
 80054c2:	e010      	b.n	80054e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10c      	bne.n	80054e6 <osThreadNew+0xca>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d108      	bne.n	80054e6 <osThreadNew+0xca>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d104      	bne.n	80054e6 <osThreadNew+0xca>
          mem = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	61bb      	str	r3, [r7, #24]
 80054e0:	e001      	b.n	80054e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d110      	bne.n	800550e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054f4:	9202      	str	r2, [sp, #8]
 80054f6:	9301      	str	r3, [sp, #4]
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	6a3a      	ldr	r2, [r7, #32]
 8005500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f001 f932 	bl	800676c <xTaskCreateStatic>
 8005508:	4603      	mov	r3, r0
 800550a:	613b      	str	r3, [r7, #16]
 800550c:	e013      	b.n	8005536 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d110      	bne.n	8005536 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	b29a      	uxth	r2, r3
 8005518:	f107 0310 	add.w	r3, r7, #16
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f001 f97d 	bl	8006826 <xTaskCreate>
 800552c:	4603      	mov	r3, r0
 800552e:	2b01      	cmp	r3, #1
 8005530:	d001      	beq.n	8005536 <osThreadNew+0x11a>
            hTask = NULL;
 8005532:	2300      	movs	r3, #0
 8005534:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005536:	693b      	ldr	r3, [r7, #16]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3728      	adds	r7, #40	; 0x28
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005546:	f3ef 8305 	mrs	r3, IPSR
 800554a:	603b      	str	r3, [r7, #0]
  return(result);
 800554c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <osThreadYield+0x1a>
    stat = osErrorISR;
 8005552:	f06f 0305 	mvn.w	r3, #5
 8005556:	607b      	str	r3, [r7, #4]
 8005558:	e009      	b.n	800556e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800555a:	2300      	movs	r3, #0
 800555c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800555e:	4b07      	ldr	r3, [pc, #28]	; (800557c <osThreadYield+0x3c>)
 8005560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800556e:	687b      	ldr	r3, [r7, #4]
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	e000ed04 	.word	0xe000ed04

08005580 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005588:	2300      	movs	r3, #0
 800558a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800558c:	f3ef 8305 	mrs	r3, IPSR
 8005590:	60bb      	str	r3, [r7, #8]
  return(result);
 8005592:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005594:	2b00      	cmp	r3, #0
 8005596:	d174      	bne.n	8005682 <osMutexNew+0x102>
    if (attr != NULL) {
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <osMutexNew+0x26>
      type = attr->attr_bits;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	61bb      	str	r3, [r7, #24]
 80055a4:	e001      	b.n	80055aa <osMutexNew+0x2a>
    } else {
      type = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <osMutexNew+0x3a>
      rmtx = 1U;
 80055b4:	2301      	movs	r3, #1
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	e001      	b.n	80055be <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d15c      	bne.n	8005682 <osMutexNew+0x102>
      mem = -1;
 80055c8:	f04f 33ff 	mov.w	r3, #4294967295
 80055cc:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d015      	beq.n	8005600 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d006      	beq.n	80055ea <osMutexNew+0x6a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	2b4f      	cmp	r3, #79	; 0x4f
 80055e2:	d902      	bls.n	80055ea <osMutexNew+0x6a>
          mem = 1;
 80055e4:	2301      	movs	r3, #1
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	e00c      	b.n	8005604 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d108      	bne.n	8005604 <osMutexNew+0x84>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d104      	bne.n	8005604 <osMutexNew+0x84>
            mem = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	e001      	b.n	8005604 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d112      	bne.n	8005630 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	4619      	mov	r1, r3
 8005616:	2004      	movs	r0, #4
 8005618:	f000 fb17 	bl	8005c4a <xQueueCreateMutexStatic>
 800561c:	61f8      	str	r0, [r7, #28]
 800561e:	e016      	b.n	800564e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	4619      	mov	r1, r3
 8005626:	2001      	movs	r0, #1
 8005628:	f000 fb0f 	bl	8005c4a <xQueueCreateMutexStatic>
 800562c:	61f8      	str	r0, [r7, #28]
 800562e:	e00e      	b.n	800564e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10b      	bne.n	800564e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d004      	beq.n	8005646 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800563c:	2004      	movs	r0, #4
 800563e:	f000 faec 	bl	8005c1a <xQueueCreateMutex>
 8005642:	61f8      	str	r0, [r7, #28]
 8005644:	e003      	b.n	800564e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005646:	2001      	movs	r0, #1
 8005648:	f000 fae7 	bl	8005c1a <xQueueCreateMutex>
 800564c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00c      	beq.n	800566e <osMutexNew+0xee>
        if (attr != NULL) {
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <osMutexNew+0xe2>
          name = attr->name;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	e001      	b.n	8005666 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005666:	68f9      	ldr	r1, [r7, #12]
 8005668:	69f8      	ldr	r0, [r7, #28]
 800566a:	f001 f821 	bl	80066b0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d006      	beq.n	8005682 <osMutexNew+0x102>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f043 0301 	orr.w	r3, r3, #1
 8005680:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005682:	69fb      	ldr	r3, [r7, #28]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3720      	adds	r7, #32
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f023 0301 	bic.w	r3, r3, #1
 800569c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056aa:	f3ef 8305 	mrs	r3, IPSR
 80056ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80056b0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <osMutexAcquire+0x32>
    stat = osErrorISR;
 80056b6:	f06f 0305 	mvn.w	r3, #5
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	e02c      	b.n	8005718 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d103      	bne.n	80056cc <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80056c4:	f06f 0303 	mvn.w	r3, #3
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e025      	b.n	8005718 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d011      	beq.n	80056f6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	6938      	ldr	r0, [r7, #16]
 80056d6:	f000 fb07 	bl	8005ce8 <xQueueTakeMutexRecursive>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d01b      	beq.n	8005718 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80056e6:	f06f 0301 	mvn.w	r3, #1
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	e014      	b.n	8005718 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80056ee:	f06f 0302 	mvn.w	r3, #2
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	e010      	b.n	8005718 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80056f6:	6839      	ldr	r1, [r7, #0]
 80056f8:	6938      	ldr	r0, [r7, #16]
 80056fa:	f000 fda5 	bl	8006248 <xQueueSemaphoreTake>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b01      	cmp	r3, #1
 8005702:	d009      	beq.n	8005718 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800570a:	f06f 0301 	mvn.w	r3, #1
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	e002      	b.n	8005718 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005712:	f06f 0302 	mvn.w	r3, #2
 8005716:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005718:	697b      	ldr	r3, [r7, #20]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005722:	b580      	push	{r7, lr}
 8005724:	b086      	sub	sp, #24
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800573e:	f3ef 8305 	mrs	r3, IPSR
 8005742:	60bb      	str	r3, [r7, #8]
  return(result);
 8005744:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <osMutexRelease+0x30>
    stat = osErrorISR;
 800574a:	f06f 0305 	mvn.w	r3, #5
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	e01f      	b.n	8005792 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d103      	bne.n	8005760 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005758:	f06f 0303 	mvn.w	r3, #3
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	e018      	b.n	8005792 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d009      	beq.n	800577a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005766:	6938      	ldr	r0, [r7, #16]
 8005768:	f000 fa8a 	bl	8005c80 <xQueueGiveMutexRecursive>
 800576c:	4603      	mov	r3, r0
 800576e:	2b01      	cmp	r3, #1
 8005770:	d00f      	beq.n	8005792 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005772:	f06f 0302 	mvn.w	r3, #2
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	e00b      	b.n	8005792 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800577a:	2300      	movs	r3, #0
 800577c:	2200      	movs	r2, #0
 800577e:	2100      	movs	r1, #0
 8005780:	6938      	ldr	r0, [r7, #16]
 8005782:	f000 fae7 	bl	8005d54 <xQueueGenericSend>
 8005786:	4603      	mov	r3, r0
 8005788:	2b01      	cmp	r3, #1
 800578a:	d002      	beq.n	8005792 <osMutexRelease+0x70>
        stat = osErrorResource;
 800578c:	f06f 0302 	mvn.w	r3, #2
 8005790:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005792:	697b      	ldr	r3, [r7, #20]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4a07      	ldr	r2, [pc, #28]	; (80057c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80057ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	4a06      	ldr	r2, [pc, #24]	; (80057cc <vApplicationGetIdleTaskMemory+0x30>)
 80057b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2280      	movs	r2, #128	; 0x80
 80057b8:	601a      	str	r2, [r3, #0]
}
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	20000630 	.word	0x20000630
 80057cc:	200006d8 	.word	0x200006d8

080057d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4a07      	ldr	r2, [pc, #28]	; (80057fc <vApplicationGetTimerTaskMemory+0x2c>)
 80057e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	4a06      	ldr	r2, [pc, #24]	; (8005800 <vApplicationGetTimerTaskMemory+0x30>)
 80057e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057ee:	601a      	str	r2, [r3, #0]
}
 80057f0:	bf00      	nop
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	200008d8 	.word	0x200008d8
 8005800:	20000980 	.word	0x20000980

08005804 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f103 0208 	add.w	r2, r3, #8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f04f 32ff 	mov.w	r2, #4294967295
 800581c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f103 0208 	add.w	r2, r3, #8
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f103 0208 	add.w	r2, r3, #8
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	601a      	str	r2, [r3, #0]
}
 800589a:	bf00      	nop
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058bc:	d103      	bne.n	80058c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	e00c      	b.n	80058e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3308      	adds	r3, #8
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	e002      	b.n	80058d4 <vListInsert+0x2e>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d2f6      	bcs.n	80058ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	601a      	str	r2, [r3, #0]
}
 800590c:	bf00      	nop
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6892      	ldr	r2, [r2, #8]
 800592e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6852      	ldr	r2, [r2, #4]
 8005938:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	429a      	cmp	r2, r3
 8005942:	d103      	bne.n	800594c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	1e5a      	subs	r2, r3, #1
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10a      	bne.n	8005996 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005992:	bf00      	nop
 8005994:	e7fe      	b.n	8005994 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005996:	f002 fb65 	bl	8008064 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	68f9      	ldr	r1, [r7, #12]
 80059a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059a6:	fb01 f303 	mul.w	r3, r1, r3
 80059aa:	441a      	add	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c6:	3b01      	subs	r3, #1
 80059c8:	68f9      	ldr	r1, [r7, #12]
 80059ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059cc:	fb01 f303 	mul.w	r3, r1, r3
 80059d0:	441a      	add	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	22ff      	movs	r2, #255	; 0xff
 80059da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	22ff      	movs	r2, #255	; 0xff
 80059e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d114      	bne.n	8005a16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01a      	beq.n	8005a2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3310      	adds	r3, #16
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 fb09 	bl	8007010 <xTaskRemoveFromEventList>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d012      	beq.n	8005a2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a04:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <xQueueGenericReset+0xcc>)
 8005a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	e009      	b.n	8005a2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	3310      	adds	r3, #16
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff fef2 	bl	8005804 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3324      	adds	r3, #36	; 0x24
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff feed 	bl	8005804 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a2a:	f002 fb4b 	bl	80080c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a2e:	2301      	movs	r3, #1
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08e      	sub	sp, #56	; 0x38
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a7e:	bf00      	nop
 8005a80:	e7fe      	b.n	8005a80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <xQueueGenericCreateStatic+0x52>
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <xQueueGenericCreateStatic+0x56>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <xQueueGenericCreateStatic+0x58>
 8005a92:	2300      	movs	r3, #0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10a      	bne.n	8005aae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	623b      	str	r3, [r7, #32]
}
 8005aaa:	bf00      	nop
 8005aac:	e7fe      	b.n	8005aac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d102      	bne.n	8005aba <xQueueGenericCreateStatic+0x7e>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <xQueueGenericCreateStatic+0x82>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <xQueueGenericCreateStatic+0x84>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	61fb      	str	r3, [r7, #28]
}
 8005ad6:	bf00      	nop
 8005ad8:	e7fe      	b.n	8005ad8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ada:	2350      	movs	r3, #80	; 0x50
 8005adc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b50      	cmp	r3, #80	; 0x50
 8005ae2:	d00a      	beq.n	8005afa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	61bb      	str	r3, [r7, #24]
}
 8005af6:	bf00      	nop
 8005af8:	e7fe      	b.n	8005af8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005afa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00d      	beq.n	8005b22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	4613      	mov	r3, r2
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	68b9      	ldr	r1, [r7, #8]
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f83f 	bl	8005ba0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3730      	adds	r7, #48	; 0x30
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	; 0x28
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	4613      	mov	r3, r2
 8005b38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	613b      	str	r3, [r7, #16]
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	fb02 f303 	mul.w	r3, r2, r3
 8005b5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	3350      	adds	r3, #80	; 0x50
 8005b64:	4618      	mov	r0, r3
 8005b66:	f002 fb9f 	bl	80082a8 <pvPortMalloc>
 8005b6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d011      	beq.n	8005b96 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	3350      	adds	r3, #80	; 0x50
 8005b7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b84:	79fa      	ldrb	r2, [r7, #7]
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f805 	bl	8005ba0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b96:	69bb      	ldr	r3, [r7, #24]
	}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3720      	adds	r7, #32
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d103      	bne.n	8005bbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005bce:	2101      	movs	r1, #1
 8005bd0:	69b8      	ldr	r0, [r7, #24]
 8005bd2:	f7ff fecb 	bl	800596c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	78fa      	ldrb	r2, [r7, #3]
 8005bda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00e      	beq.n	8005c12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005c06:	2300      	movs	r3, #0
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f8a1 	bl	8005d54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b086      	sub	sp, #24
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	4603      	mov	r3, r0
 8005c22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c24:	2301      	movs	r3, #1
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	2300      	movs	r3, #0
 8005c2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	6939      	ldr	r1, [r7, #16]
 8005c32:	6978      	ldr	r0, [r7, #20]
 8005c34:	f7ff ff7a 	bl	8005b2c <xQueueGenericCreate>
 8005c38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f7ff ffd3 	bl	8005be6 <prvInitialiseMutex>

		return xNewQueue;
 8005c40:	68fb      	ldr	r3, [r7, #12]
	}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b088      	sub	sp, #32
 8005c4e:	af02      	add	r7, sp, #8
 8005c50:	4603      	mov	r3, r0
 8005c52:	6039      	str	r1, [r7, #0]
 8005c54:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c56:	2301      	movs	r3, #1
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2200      	movs	r2, #0
 8005c66:	6939      	ldr	r1, [r7, #16]
 8005c68:	6978      	ldr	r0, [r7, #20]
 8005c6a:	f7ff fee7 	bl	8005a3c <xQueueGenericCreateStatic>
 8005c6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f7ff ffb8 	bl	8005be6 <prvInitialiseMutex>

		return xNewQueue;
 8005c76:	68fb      	ldr	r3, [r7, #12]
	}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10a      	bne.n	8005ca8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	60fb      	str	r3, [r7, #12]
}
 8005ca4:	bf00      	nop
 8005ca6:	e7fe      	b.n	8005ca6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	689c      	ldr	r4, [r3, #8]
 8005cac:	f001 fb72 	bl	8007394 <xTaskGetCurrentTaskHandle>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	429c      	cmp	r4, r3
 8005cb4:	d111      	bne.n	8005cda <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	1e5a      	subs	r2, r3, #1
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d105      	bne.n	8005cd4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005cc8:	2300      	movs	r3, #0
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2100      	movs	r1, #0
 8005cce:	6938      	ldr	r0, [r7, #16]
 8005cd0:	f000 f840 	bl	8005d54 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	e001      	b.n	8005cde <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005cde:	697b      	ldr	r3, [r7, #20]
	}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd90      	pop	{r4, r7, pc}

08005ce8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005ce8:	b590      	push	{r4, r7, lr}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10a      	bne.n	8005d12 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	60fb      	str	r3, [r7, #12]
}
 8005d0e:	bf00      	nop
 8005d10:	e7fe      	b.n	8005d10 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	689c      	ldr	r4, [r3, #8]
 8005d16:	f001 fb3d 	bl	8007394 <xTaskGetCurrentTaskHandle>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	429c      	cmp	r4, r3
 8005d1e:	d107      	bne.n	8005d30 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	617b      	str	r3, [r7, #20]
 8005d2e:	e00c      	b.n	8005d4a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	6938      	ldr	r0, [r7, #16]
 8005d34:	f000 fa88 	bl	8006248 <xQueueSemaphoreTake>
 8005d38:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005d4a:	697b      	ldr	r3, [r7, #20]
	}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	371c      	adds	r7, #28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd90      	pop	{r4, r7, pc}

08005d54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08e      	sub	sp, #56	; 0x38
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d62:	2300      	movs	r3, #0
 8005d64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <xQueueGenericSend+0x32>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d103      	bne.n	8005d94 <xQueueGenericSend+0x40>
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <xQueueGenericSend+0x44>
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <xQueueGenericSend+0x46>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <xQueueGenericSend+0x60>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005db0:	bf00      	nop
 8005db2:	e7fe      	b.n	8005db2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d103      	bne.n	8005dc2 <xQueueGenericSend+0x6e>
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <xQueueGenericSend+0x72>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <xQueueGenericSend+0x74>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	623b      	str	r3, [r7, #32]
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005de2:	f001 fae7 	bl	80073b4 <xTaskGetSchedulerState>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d102      	bne.n	8005df2 <xQueueGenericSend+0x9e>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <xQueueGenericSend+0xa2>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <xQueueGenericSend+0xa4>
 8005df6:	2300      	movs	r3, #0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10a      	bne.n	8005e12 <xQueueGenericSend+0xbe>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	61fb      	str	r3, [r7, #28]
}
 8005e0e:	bf00      	nop
 8005e10:	e7fe      	b.n	8005e10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e12:	f002 f927 	bl	8008064 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d302      	bcc.n	8005e28 <xQueueGenericSend+0xd4>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d129      	bne.n	8005e7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e2e:	f000 fb2f 	bl	8006490 <prvCopyDataToQueue>
 8005e32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d010      	beq.n	8005e5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	3324      	adds	r3, #36	; 0x24
 8005e40:	4618      	mov	r0, r3
 8005e42:	f001 f8e5 	bl	8007010 <xTaskRemoveFromEventList>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d013      	beq.n	8005e74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e4c:	4b3f      	ldr	r3, [pc, #252]	; (8005f4c <xQueueGenericSend+0x1f8>)
 8005e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	e00a      	b.n	8005e74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e64:	4b39      	ldr	r3, [pc, #228]	; (8005f4c <xQueueGenericSend+0x1f8>)
 8005e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e74:	f002 f926 	bl	80080c4 <vPortExitCritical>
				return pdPASS;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e063      	b.n	8005f44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d103      	bne.n	8005e8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e82:	f002 f91f 	bl	80080c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	e05c      	b.n	8005f44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d106      	bne.n	8005e9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e90:	f107 0314 	add.w	r3, r7, #20
 8005e94:	4618      	mov	r0, r3
 8005e96:	f001 f91f 	bl	80070d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e9e:	f002 f911 	bl	80080c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ea2:	f000 fe8b 	bl	8006bbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ea6:	f002 f8dd 	bl	8008064 <vPortEnterCritical>
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eb0:	b25b      	sxtb	r3, r3
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb6:	d103      	bne.n	8005ec0 <xQueueGenericSend+0x16c>
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ec6:	b25b      	sxtb	r3, r3
 8005ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ecc:	d103      	bne.n	8005ed6 <xQueueGenericSend+0x182>
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ed6:	f002 f8f5 	bl	80080c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005eda:	1d3a      	adds	r2, r7, #4
 8005edc:	f107 0314 	add.w	r3, r7, #20
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 f90e 	bl	8007104 <xTaskCheckForTimeOut>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d124      	bne.n	8005f38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005eee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ef0:	f000 fbc6 	bl	8006680 <prvIsQueueFull>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d018      	beq.n	8005f2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	3310      	adds	r3, #16
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	4611      	mov	r1, r2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f001 f834 	bl	8006f70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f0a:	f000 fb51 	bl	80065b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f0e:	f000 fe63 	bl	8006bd8 <xTaskResumeAll>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f47f af7c 	bne.w	8005e12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <xQueueGenericSend+0x1f8>)
 8005f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	e772      	b.n	8005e12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f2e:	f000 fb3f 	bl	80065b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f32:	f000 fe51 	bl	8006bd8 <xTaskResumeAll>
 8005f36:	e76c      	b.n	8005e12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f3a:	f000 fb39 	bl	80065b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f3e:	f000 fe4b 	bl	8006bd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3738      	adds	r7, #56	; 0x38
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	e000ed04 	.word	0xe000ed04

08005f50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b090      	sub	sp, #64	; 0x40
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10a      	bne.n	8005f7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f7a:	bf00      	nop
 8005f7c:	e7fe      	b.n	8005f7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d103      	bne.n	8005f8c <xQueueGenericSendFromISR+0x3c>
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <xQueueGenericSendFromISR+0x40>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e000      	b.n	8005f92 <xQueueGenericSendFromISR+0x42>
 8005f90:	2300      	movs	r3, #0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fa8:	bf00      	nop
 8005faa:	e7fe      	b.n	8005faa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d103      	bne.n	8005fba <xQueueGenericSendFromISR+0x6a>
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <xQueueGenericSendFromISR+0x6e>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <xQueueGenericSendFromISR+0x70>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	623b      	str	r3, [r7, #32]
}
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fda:	f002 f925 	bl	8008228 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fde:	f3ef 8211 	mrs	r2, BASEPRI
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	61fa      	str	r2, [r7, #28]
 8005ff4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ff6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ff8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006002:	429a      	cmp	r2, r3
 8006004:	d302      	bcc.n	800600c <xQueueGenericSendFromISR+0xbc>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d12f      	bne.n	800606c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006022:	f000 fa35 	bl	8006490 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006026:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602e:	d112      	bne.n	8006056 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	2b00      	cmp	r3, #0
 8006036:	d016      	beq.n	8006066 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	3324      	adds	r3, #36	; 0x24
 800603c:	4618      	mov	r0, r3
 800603e:	f000 ffe7 	bl	8007010 <xTaskRemoveFromEventList>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00e      	beq.n	8006066 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	e007      	b.n	8006066 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006056:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800605a:	3301      	adds	r3, #1
 800605c:	b2db      	uxtb	r3, r3
 800605e:	b25a      	sxtb	r2, r3
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006066:	2301      	movs	r3, #1
 8006068:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800606a:	e001      	b.n	8006070 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800606c:	2300      	movs	r3, #0
 800606e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006072:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800607a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800607c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800607e:	4618      	mov	r0, r3
 8006080:	3740      	adds	r7, #64	; 0x40
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08c      	sub	sp, #48	; 0x30
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006094:	2300      	movs	r3, #0
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <xQueueReceive+0x30>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	623b      	str	r3, [r7, #32]
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d103      	bne.n	80060c6 <xQueueReceive+0x3e>
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <xQueueReceive+0x42>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <xQueueReceive+0x44>
 80060ca:	2300      	movs	r3, #0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <xQueueReceive+0x5e>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	61fb      	str	r3, [r7, #28]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060e6:	f001 f965 	bl	80073b4 <xTaskGetSchedulerState>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d102      	bne.n	80060f6 <xQueueReceive+0x6e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <xQueueReceive+0x72>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <xQueueReceive+0x74>
 80060fa:	2300      	movs	r3, #0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <xQueueReceive+0x8e>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	61bb      	str	r3, [r7, #24]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006116:	f001 ffa5 	bl	8008064 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01f      	beq.n	8006166 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800612a:	f000 fa1b 	bl	8006564 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	1e5a      	subs	r2, r3, #1
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00f      	beq.n	800615e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	3310      	adds	r3, #16
 8006142:	4618      	mov	r0, r3
 8006144:	f000 ff64 	bl	8007010 <xTaskRemoveFromEventList>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d007      	beq.n	800615e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800614e:	4b3d      	ldr	r3, [pc, #244]	; (8006244 <xQueueReceive+0x1bc>)
 8006150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800615e:	f001 ffb1 	bl	80080c4 <vPortExitCritical>
				return pdPASS;
 8006162:	2301      	movs	r3, #1
 8006164:	e069      	b.n	800623a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800616c:	f001 ffaa 	bl	80080c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006170:	2300      	movs	r3, #0
 8006172:	e062      	b.n	800623a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800617a:	f107 0310 	add.w	r3, r7, #16
 800617e:	4618      	mov	r0, r3
 8006180:	f000 ffaa 	bl	80070d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006184:	2301      	movs	r3, #1
 8006186:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006188:	f001 ff9c 	bl	80080c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800618c:	f000 fd16 	bl	8006bbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006190:	f001 ff68 	bl	8008064 <vPortEnterCritical>
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800619a:	b25b      	sxtb	r3, r3
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a0:	d103      	bne.n	80061aa <xQueueReceive+0x122>
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061b0:	b25b      	sxtb	r3, r3
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d103      	bne.n	80061c0 <xQueueReceive+0x138>
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061c0:	f001 ff80 	bl	80080c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061c4:	1d3a      	adds	r2, r7, #4
 80061c6:	f107 0310 	add.w	r3, r7, #16
 80061ca:	4611      	mov	r1, r2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 ff99 	bl	8007104 <xTaskCheckForTimeOut>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d123      	bne.n	8006220 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061da:	f000 fa3b 	bl	8006654 <prvIsQueueEmpty>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d017      	beq.n	8006214 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	3324      	adds	r3, #36	; 0x24
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	4611      	mov	r1, r2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 febf 	bl	8006f70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f4:	f000 f9dc 	bl	80065b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061f8:	f000 fcee 	bl	8006bd8 <xTaskResumeAll>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d189      	bne.n	8006116 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006202:	4b10      	ldr	r3, [pc, #64]	; (8006244 <xQueueReceive+0x1bc>)
 8006204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	e780      	b.n	8006116 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006216:	f000 f9cb 	bl	80065b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800621a:	f000 fcdd 	bl	8006bd8 <xTaskResumeAll>
 800621e:	e77a      	b.n	8006116 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006222:	f000 f9c5 	bl	80065b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006226:	f000 fcd7 	bl	8006bd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800622a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800622c:	f000 fa12 	bl	8006654 <prvIsQueueEmpty>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	f43f af6f 	beq.w	8006116 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006238:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800623a:	4618      	mov	r0, r3
 800623c:	3730      	adds	r7, #48	; 0x30
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	e000ed04 	.word	0xe000ed04

08006248 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08e      	sub	sp, #56	; 0x38
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006252:	2300      	movs	r3, #0
 8006254:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800625a:	2300      	movs	r3, #0
 800625c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	623b      	str	r3, [r7, #32]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	61fb      	str	r3, [r7, #28]
}
 8006294:	bf00      	nop
 8006296:	e7fe      	b.n	8006296 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006298:	f001 f88c 	bl	80073b4 <xTaskGetSchedulerState>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d102      	bne.n	80062a8 <xQueueSemaphoreTake+0x60>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <xQueueSemaphoreTake+0x64>
 80062a8:	2301      	movs	r3, #1
 80062aa:	e000      	b.n	80062ae <xQueueSemaphoreTake+0x66>
 80062ac:	2300      	movs	r3, #0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10a      	bne.n	80062c8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	61bb      	str	r3, [r7, #24]
}
 80062c4:	bf00      	nop
 80062c6:	e7fe      	b.n	80062c6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062c8:	f001 fecc 	bl	8008064 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d024      	beq.n	8006322 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	1e5a      	subs	r2, r3, #1
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d104      	bne.n	80062f2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80062e8:	f001 f9da 	bl	80076a0 <pvTaskIncrementMutexHeldCount>
 80062ec:	4602      	mov	r2, r0
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00f      	beq.n	800631a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fc:	3310      	adds	r3, #16
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fe86 	bl	8007010 <xTaskRemoveFromEventList>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800630a:	4b54      	ldr	r3, [pc, #336]	; (800645c <xQueueSemaphoreTake+0x214>)
 800630c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800631a:	f001 fed3 	bl	80080c4 <vPortExitCritical>
				return pdPASS;
 800631e:	2301      	movs	r3, #1
 8006320:	e097      	b.n	8006452 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d111      	bne.n	800634c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	617b      	str	r3, [r7, #20]
}
 8006340:	bf00      	nop
 8006342:	e7fe      	b.n	8006342 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006344:	f001 febe 	bl	80080c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006348:	2300      	movs	r3, #0
 800634a:	e082      	b.n	8006452 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800634c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006352:	f107 030c 	add.w	r3, r7, #12
 8006356:	4618      	mov	r0, r3
 8006358:	f000 febe 	bl	80070d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800635c:	2301      	movs	r3, #1
 800635e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006360:	f001 feb0 	bl	80080c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006364:	f000 fc2a 	bl	8006bbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006368:	f001 fe7c 	bl	8008064 <vPortEnterCritical>
 800636c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006372:	b25b      	sxtb	r3, r3
 8006374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006378:	d103      	bne.n	8006382 <xQueueSemaphoreTake+0x13a>
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006388:	b25b      	sxtb	r3, r3
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638e:	d103      	bne.n	8006398 <xQueueSemaphoreTake+0x150>
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006398:	f001 fe94 	bl	80080c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800639c:	463a      	mov	r2, r7
 800639e:	f107 030c 	add.w	r3, r7, #12
 80063a2:	4611      	mov	r1, r2
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 fead 	bl	8007104 <xTaskCheckForTimeOut>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d132      	bne.n	8006416 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063b2:	f000 f94f 	bl	8006654 <prvIsQueueEmpty>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d026      	beq.n	800640a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d109      	bne.n	80063d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80063c4:	f001 fe4e 	bl	8008064 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 f80f 	bl	80073f0 <xTaskPriorityInherit>
 80063d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80063d4:	f001 fe76 	bl	80080c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	3324      	adds	r3, #36	; 0x24
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	4611      	mov	r1, r2
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 fdc5 	bl	8006f70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063e8:	f000 f8e2 	bl	80065b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063ec:	f000 fbf4 	bl	8006bd8 <xTaskResumeAll>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f47f af68 	bne.w	80062c8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80063f8:	4b18      	ldr	r3, [pc, #96]	; (800645c <xQueueSemaphoreTake+0x214>)
 80063fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	e75e      	b.n	80062c8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800640a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800640c:	f000 f8d0 	bl	80065b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006410:	f000 fbe2 	bl	8006bd8 <xTaskResumeAll>
 8006414:	e758      	b.n	80062c8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006416:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006418:	f000 f8ca 	bl	80065b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800641c:	f000 fbdc 	bl	8006bd8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006422:	f000 f917 	bl	8006654 <prvIsQueueEmpty>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	f43f af4d 	beq.w	80062c8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00d      	beq.n	8006450 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006434:	f001 fe16 	bl	8008064 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800643a:	f000 f811 	bl	8006460 <prvGetDisinheritPriorityAfterTimeout>
 800643e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006446:	4618      	mov	r0, r3
 8006448:	f001 f8a8 	bl	800759c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800644c:	f001 fe3a 	bl	80080c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006450:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006452:	4618      	mov	r0, r3
 8006454:	3738      	adds	r7, #56	; 0x38
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	e000ed04 	.word	0xe000ed04

08006460 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d006      	beq.n	800647e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	e001      	b.n	8006482 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006482:	68fb      	ldr	r3, [r7, #12]
	}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800649c:	2300      	movs	r3, #0
 800649e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10d      	bne.n	80064ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d14d      	bne.n	8006552 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f001 f800 	bl	80074c0 <xTaskPriorityDisinherit>
 80064c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	609a      	str	r2, [r3, #8]
 80064c8:	e043      	b.n	8006552 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d119      	bne.n	8006504 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6858      	ldr	r0, [r3, #4]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d8:	461a      	mov	r2, r3
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	f002 fa3c 	bl	8008958 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e8:	441a      	add	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d32b      	bcc.n	8006552 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	605a      	str	r2, [r3, #4]
 8006502:	e026      	b.n	8006552 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	68d8      	ldr	r0, [r3, #12]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650c:	461a      	mov	r2, r3
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	f002 fa22 	bl	8008958 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	425b      	negs	r3, r3
 800651e:	441a      	add	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	68da      	ldr	r2, [r3, #12]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	429a      	cmp	r2, r3
 800652e:	d207      	bcs.n	8006540 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	425b      	negs	r3, r3
 800653a:	441a      	add	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b02      	cmp	r3, #2
 8006544:	d105      	bne.n	8006552 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	3b01      	subs	r3, #1
 8006550:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800655a:	697b      	ldr	r3, [r7, #20]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d018      	beq.n	80065a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	441a      	add	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	429a      	cmp	r2, r3
 800658e:	d303      	bcc.n	8006598 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68d9      	ldr	r1, [r3, #12]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	461a      	mov	r2, r3
 80065a2:	6838      	ldr	r0, [r7, #0]
 80065a4:	f002 f9d8 	bl	8008958 <memcpy>
	}
}
 80065a8:	bf00      	nop
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065b8:	f001 fd54 	bl	8008064 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065c4:	e011      	b.n	80065ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d012      	beq.n	80065f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3324      	adds	r3, #36	; 0x24
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fd1c 	bl	8007010 <xTaskRemoveFromEventList>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065de:	f000 fdf3 	bl	80071c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	dce9      	bgt.n	80065c6 <prvUnlockQueue+0x16>
 80065f2:	e000      	b.n	80065f6 <prvUnlockQueue+0x46>
					break;
 80065f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	22ff      	movs	r2, #255	; 0xff
 80065fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80065fe:	f001 fd61 	bl	80080c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006602:	f001 fd2f 	bl	8008064 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800660c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800660e:	e011      	b.n	8006634 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d012      	beq.n	800663e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3310      	adds	r3, #16
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fcf7 	bl	8007010 <xTaskRemoveFromEventList>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006628:	f000 fdce 	bl	80071c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800662c:	7bbb      	ldrb	r3, [r7, #14]
 800662e:	3b01      	subs	r3, #1
 8006630:	b2db      	uxtb	r3, r3
 8006632:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006638:	2b00      	cmp	r3, #0
 800663a:	dce9      	bgt.n	8006610 <prvUnlockQueue+0x60>
 800663c:	e000      	b.n	8006640 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800663e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	22ff      	movs	r2, #255	; 0xff
 8006644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006648:	f001 fd3c 	bl	80080c4 <vPortExitCritical>
}
 800664c:	bf00      	nop
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800665c:	f001 fd02 	bl	8008064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006664:	2b00      	cmp	r3, #0
 8006666:	d102      	bne.n	800666e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006668:	2301      	movs	r3, #1
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	e001      	b.n	8006672 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006672:	f001 fd27 	bl	80080c4 <vPortExitCritical>

	return xReturn;
 8006676:	68fb      	ldr	r3, [r7, #12]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006688:	f001 fcec 	bl	8008064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006694:	429a      	cmp	r2, r3
 8006696:	d102      	bne.n	800669e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	e001      	b.n	80066a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066a2:	f001 fd0f 	bl	80080c4 <vPortExitCritical>

	return xReturn;
 80066a6:	68fb      	ldr	r3, [r7, #12]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	e014      	b.n	80066ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80066c0:	4a0f      	ldr	r2, [pc, #60]	; (8006700 <vQueueAddToRegistry+0x50>)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10b      	bne.n	80066e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80066cc:	490c      	ldr	r1, [pc, #48]	; (8006700 <vQueueAddToRegistry+0x50>)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80066d6:	4a0a      	ldr	r2, [pc, #40]	; (8006700 <vQueueAddToRegistry+0x50>)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	4413      	add	r3, r2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80066e2:	e006      	b.n	80066f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3301      	adds	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b07      	cmp	r3, #7
 80066ee:	d9e7      	bls.n	80066c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80066f0:	bf00      	nop
 80066f2:	bf00      	nop
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20000d80 	.word	0x20000d80

08006704 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006714:	f001 fca6 	bl	8008064 <vPortEnterCritical>
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800671e:	b25b      	sxtb	r3, r3
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006724:	d103      	bne.n	800672e <vQueueWaitForMessageRestricted+0x2a>
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006734:	b25b      	sxtb	r3, r3
 8006736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673a:	d103      	bne.n	8006744 <vQueueWaitForMessageRestricted+0x40>
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006744:	f001 fcbe 	bl	80080c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	2b00      	cmp	r3, #0
 800674e:	d106      	bne.n	800675e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	3324      	adds	r3, #36	; 0x24
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fc2d 	bl	8006fb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800675e:	6978      	ldr	r0, [r7, #20]
 8006760:	f7ff ff26 	bl	80065b0 <prvUnlockQueue>
	}
 8006764:	bf00      	nop
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08e      	sub	sp, #56	; 0x38
 8006770:	af04      	add	r7, sp, #16
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800677a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10a      	bne.n	8006796 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	623b      	str	r3, [r7, #32]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10a      	bne.n	80067b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	61fb      	str	r3, [r7, #28]
}
 80067ae:	bf00      	nop
 80067b0:	e7fe      	b.n	80067b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067b2:	23a8      	movs	r3, #168	; 0xa8
 80067b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2ba8      	cmp	r3, #168	; 0xa8
 80067ba:	d00a      	beq.n	80067d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	61bb      	str	r3, [r7, #24]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80067d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d01e      	beq.n	8006818 <xTaskCreateStatic+0xac>
 80067da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01b      	beq.n	8006818 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	2202      	movs	r2, #2
 80067ee:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067f2:	2300      	movs	r3, #0
 80067f4:	9303      	str	r3, [sp, #12]
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	9302      	str	r3, [sp, #8]
 80067fa:	f107 0314 	add.w	r3, r7, #20
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 f850 	bl	80068b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006812:	f000 f8f3 	bl	80069fc <prvAddNewTaskToReadyList>
 8006816:	e001      	b.n	800681c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800681c:	697b      	ldr	r3, [r7, #20]
	}
 800681e:	4618      	mov	r0, r3
 8006820:	3728      	adds	r7, #40	; 0x28
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006826:	b580      	push	{r7, lr}
 8006828:	b08c      	sub	sp, #48	; 0x30
 800682a:	af04      	add	r7, sp, #16
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	60b9      	str	r1, [r7, #8]
 8006830:	603b      	str	r3, [r7, #0]
 8006832:	4613      	mov	r3, r2
 8006834:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006836:	88fb      	ldrh	r3, [r7, #6]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4618      	mov	r0, r3
 800683c:	f001 fd34 	bl	80082a8 <pvPortMalloc>
 8006840:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00e      	beq.n	8006866 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006848:	20a8      	movs	r0, #168	; 0xa8
 800684a:	f001 fd2d 	bl	80082a8 <pvPortMalloc>
 800684e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	631a      	str	r2, [r3, #48]	; 0x30
 800685c:	e005      	b.n	800686a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800685e:	6978      	ldr	r0, [r7, #20]
 8006860:	f001 fdee 	bl	8008440 <vPortFree>
 8006864:	e001      	b.n	800686a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d017      	beq.n	80068a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006878:	88fa      	ldrh	r2, [r7, #6]
 800687a:	2300      	movs	r3, #0
 800687c:	9303      	str	r3, [sp, #12]
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	9302      	str	r3, [sp, #8]
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 f80e 	bl	80068b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006894:	69f8      	ldr	r0, [r7, #28]
 8006896:	f000 f8b1 	bl	80069fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800689a:	2301      	movs	r3, #1
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	e002      	b.n	80068a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068a0:	f04f 33ff 	mov.w	r3, #4294967295
 80068a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068a6:	69bb      	ldr	r3, [r7, #24]
	}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3720      	adds	r7, #32
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	461a      	mov	r2, r3
 80068c8:	21a5      	movs	r1, #165	; 0xa5
 80068ca:	f001 ffab 	bl	8008824 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80068d8:	3b01      	subs	r3, #1
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	f023 0307 	bic.w	r3, r3, #7
 80068e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00a      	beq.n	8006908 <prvInitialiseNewTask+0x58>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	617b      	str	r3, [r7, #20]
}
 8006904:	bf00      	nop
 8006906:	e7fe      	b.n	8006906 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01f      	beq.n	800694e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800690e:	2300      	movs	r3, #0
 8006910:	61fb      	str	r3, [r7, #28]
 8006912:	e012      	b.n	800693a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	7819      	ldrb	r1, [r3, #0]
 800691c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	4413      	add	r3, r2
 8006922:	3334      	adds	r3, #52	; 0x34
 8006924:	460a      	mov	r2, r1
 8006926:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	4413      	add	r3, r2
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d006      	beq.n	8006942 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	3301      	adds	r3, #1
 8006938:	61fb      	str	r3, [r7, #28]
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	2b0f      	cmp	r3, #15
 800693e:	d9e9      	bls.n	8006914 <prvInitialiseNewTask+0x64>
 8006940:	e000      	b.n	8006944 <prvInitialiseNewTask+0x94>
			{
				break;
 8006942:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800694c:	e003      	b.n	8006956 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006958:	2b37      	cmp	r3, #55	; 0x37
 800695a:	d901      	bls.n	8006960 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800695c:	2337      	movs	r3, #55	; 0x37
 800695e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006964:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800696a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	2200      	movs	r2, #0
 8006970:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	3304      	adds	r3, #4
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe ff64 	bl	8005844 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	3318      	adds	r3, #24
 8006980:	4618      	mov	r0, r3
 8006982:	f7fe ff5f 	bl	8005844 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800699a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	3354      	adds	r3, #84	; 0x54
 80069b0:	224c      	movs	r2, #76	; 0x4c
 80069b2:	2100      	movs	r1, #0
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 ff35 	bl	8008824 <memset>
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	4a0c      	ldr	r2, [pc, #48]	; (80069f0 <prvInitialiseNewTask+0x140>)
 80069be:	659a      	str	r2, [r3, #88]	; 0x58
 80069c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c2:	4a0c      	ldr	r2, [pc, #48]	; (80069f4 <prvInitialiseNewTask+0x144>)
 80069c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	4a0b      	ldr	r2, [pc, #44]	; (80069f8 <prvInitialiseNewTask+0x148>)
 80069ca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	68f9      	ldr	r1, [r7, #12]
 80069d0:	69b8      	ldr	r0, [r7, #24]
 80069d2:	f001 fa1b 	bl	8007e0c <pxPortInitialiseStack>
 80069d6:	4602      	mov	r2, r0
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069e8:	bf00      	nop
 80069ea:	3720      	adds	r7, #32
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20006df4 	.word	0x20006df4
 80069f4:	20006e5c 	.word	0x20006e5c
 80069f8:	20006ec4 	.word	0x20006ec4

080069fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a04:	f001 fb2e 	bl	8008064 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a08:	4b2d      	ldr	r3, [pc, #180]	; (8006ac0 <prvAddNewTaskToReadyList+0xc4>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	4a2c      	ldr	r2, [pc, #176]	; (8006ac0 <prvAddNewTaskToReadyList+0xc4>)
 8006a10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a12:	4b2c      	ldr	r3, [pc, #176]	; (8006ac4 <prvAddNewTaskToReadyList+0xc8>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d109      	bne.n	8006a2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a1a:	4a2a      	ldr	r2, [pc, #168]	; (8006ac4 <prvAddNewTaskToReadyList+0xc8>)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a20:	4b27      	ldr	r3, [pc, #156]	; (8006ac0 <prvAddNewTaskToReadyList+0xc4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d110      	bne.n	8006a4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a28:	f000 fbf2 	bl	8007210 <prvInitialiseTaskLists>
 8006a2c:	e00d      	b.n	8006a4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a2e:	4b26      	ldr	r3, [pc, #152]	; (8006ac8 <prvAddNewTaskToReadyList+0xcc>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d109      	bne.n	8006a4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a36:	4b23      	ldr	r3, [pc, #140]	; (8006ac4 <prvAddNewTaskToReadyList+0xc8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d802      	bhi.n	8006a4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a44:	4a1f      	ldr	r2, [pc, #124]	; (8006ac4 <prvAddNewTaskToReadyList+0xc8>)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a4a:	4b20      	ldr	r3, [pc, #128]	; (8006acc <prvAddNewTaskToReadyList+0xd0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	4a1e      	ldr	r2, [pc, #120]	; (8006acc <prvAddNewTaskToReadyList+0xd0>)
 8006a52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a54:	4b1d      	ldr	r3, [pc, #116]	; (8006acc <prvAddNewTaskToReadyList+0xd0>)
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a60:	4b1b      	ldr	r3, [pc, #108]	; (8006ad0 <prvAddNewTaskToReadyList+0xd4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d903      	bls.n	8006a70 <prvAddNewTaskToReadyList+0x74>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	4a18      	ldr	r2, [pc, #96]	; (8006ad0 <prvAddNewTaskToReadyList+0xd4>)
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4a15      	ldr	r2, [pc, #84]	; (8006ad4 <prvAddNewTaskToReadyList+0xd8>)
 8006a7e:	441a      	add	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3304      	adds	r3, #4
 8006a84:	4619      	mov	r1, r3
 8006a86:	4610      	mov	r0, r2
 8006a88:	f7fe fee9 	bl	800585e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a8c:	f001 fb1a 	bl	80080c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a90:	4b0d      	ldr	r3, [pc, #52]	; (8006ac8 <prvAddNewTaskToReadyList+0xcc>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00e      	beq.n	8006ab6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a98:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <prvAddNewTaskToReadyList+0xc8>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d207      	bcs.n	8006ab6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006aa6:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <prvAddNewTaskToReadyList+0xdc>)
 8006aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ab6:	bf00      	nop
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20001294 	.word	0x20001294
 8006ac4:	20000dc0 	.word	0x20000dc0
 8006ac8:	200012a0 	.word	0x200012a0
 8006acc:	200012b0 	.word	0x200012b0
 8006ad0:	2000129c 	.word	0x2000129c
 8006ad4:	20000dc4 	.word	0x20000dc4
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	; 0x28
 8006ae0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006aea:	463a      	mov	r2, r7
 8006aec:	1d39      	adds	r1, r7, #4
 8006aee:	f107 0308 	add.w	r3, r7, #8
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe fe52 	bl	800579c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	9202      	str	r2, [sp, #8]
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	2300      	movs	r3, #0
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	2300      	movs	r3, #0
 8006b08:	460a      	mov	r2, r1
 8006b0a:	4924      	ldr	r1, [pc, #144]	; (8006b9c <vTaskStartScheduler+0xc0>)
 8006b0c:	4824      	ldr	r0, [pc, #144]	; (8006ba0 <vTaskStartScheduler+0xc4>)
 8006b0e:	f7ff fe2d 	bl	800676c <xTaskCreateStatic>
 8006b12:	4603      	mov	r3, r0
 8006b14:	4a23      	ldr	r2, [pc, #140]	; (8006ba4 <vTaskStartScheduler+0xc8>)
 8006b16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b18:	4b22      	ldr	r3, [pc, #136]	; (8006ba4 <vTaskStartScheduler+0xc8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b20:	2301      	movs	r3, #1
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	e001      	b.n	8006b2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d102      	bne.n	8006b36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b30:	f000 fe1e 	bl	8007770 <xTimerCreateTimerTask>
 8006b34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d11b      	bne.n	8006b74 <vTaskStartScheduler+0x98>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	613b      	str	r3, [r7, #16]
}
 8006b4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b50:	4b15      	ldr	r3, [pc, #84]	; (8006ba8 <vTaskStartScheduler+0xcc>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3354      	adds	r3, #84	; 0x54
 8006b56:	4a15      	ldr	r2, [pc, #84]	; (8006bac <vTaskStartScheduler+0xd0>)
 8006b58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b5a:	4b15      	ldr	r3, [pc, #84]	; (8006bb0 <vTaskStartScheduler+0xd4>)
 8006b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b62:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <vTaskStartScheduler+0xd8>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b68:	4b13      	ldr	r3, [pc, #76]	; (8006bb8 <vTaskStartScheduler+0xdc>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b6e:	f001 f9d7 	bl	8007f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b72:	e00e      	b.n	8006b92 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7a:	d10a      	bne.n	8006b92 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	60fb      	str	r3, [r7, #12]
}
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <vTaskStartScheduler+0xb4>
}
 8006b92:	bf00      	nop
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	0800937c 	.word	0x0800937c
 8006ba0:	080071e1 	.word	0x080071e1
 8006ba4:	200012b8 	.word	0x200012b8
 8006ba8:	20000dc0 	.word	0x20000dc0
 8006bac:	200000ac 	.word	0x200000ac
 8006bb0:	200012b4 	.word	0x200012b4
 8006bb4:	200012a0 	.word	0x200012a0
 8006bb8:	20001298 	.word	0x20001298

08006bbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006bc0:	4b04      	ldr	r3, [pc, #16]	; (8006bd4 <vTaskSuspendAll+0x18>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	4a03      	ldr	r2, [pc, #12]	; (8006bd4 <vTaskSuspendAll+0x18>)
 8006bc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006bca:	bf00      	nop
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	200012bc 	.word	0x200012bc

08006bd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006be6:	4b42      	ldr	r3, [pc, #264]	; (8006cf0 <xTaskResumeAll+0x118>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <xTaskResumeAll+0x2c>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	603b      	str	r3, [r7, #0]
}
 8006c00:	bf00      	nop
 8006c02:	e7fe      	b.n	8006c02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c04:	f001 fa2e 	bl	8008064 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c08:	4b39      	ldr	r3, [pc, #228]	; (8006cf0 <xTaskResumeAll+0x118>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	4a38      	ldr	r2, [pc, #224]	; (8006cf0 <xTaskResumeAll+0x118>)
 8006c10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c12:	4b37      	ldr	r3, [pc, #220]	; (8006cf0 <xTaskResumeAll+0x118>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d162      	bne.n	8006ce0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c1a:	4b36      	ldr	r3, [pc, #216]	; (8006cf4 <xTaskResumeAll+0x11c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d05e      	beq.n	8006ce0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c22:	e02f      	b.n	8006c84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c24:	4b34      	ldr	r3, [pc, #208]	; (8006cf8 <xTaskResumeAll+0x120>)
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3318      	adds	r3, #24
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fe fe71 	bl	8005918 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe fe6c 	bl	8005918 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c44:	4b2d      	ldr	r3, [pc, #180]	; (8006cfc <xTaskResumeAll+0x124>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d903      	bls.n	8006c54 <xTaskResumeAll+0x7c>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	4a2a      	ldr	r2, [pc, #168]	; (8006cfc <xTaskResumeAll+0x124>)
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4a27      	ldr	r2, [pc, #156]	; (8006d00 <xTaskResumeAll+0x128>)
 8006c62:	441a      	add	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3304      	adds	r3, #4
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	f7fe fdf7 	bl	800585e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c74:	4b23      	ldr	r3, [pc, #140]	; (8006d04 <xTaskResumeAll+0x12c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d302      	bcc.n	8006c84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c7e:	4b22      	ldr	r3, [pc, #136]	; (8006d08 <xTaskResumeAll+0x130>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c84:	4b1c      	ldr	r3, [pc, #112]	; (8006cf8 <xTaskResumeAll+0x120>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1cb      	bne.n	8006c24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c92:	f000 fb5f 	bl	8007354 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c96:	4b1d      	ldr	r3, [pc, #116]	; (8006d0c <xTaskResumeAll+0x134>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d010      	beq.n	8006cc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ca2:	f000 f847 	bl	8006d34 <xTaskIncrementTick>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006cac:	4b16      	ldr	r3, [pc, #88]	; (8006d08 <xTaskResumeAll+0x130>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f1      	bne.n	8006ca2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006cbe:	4b13      	ldr	r3, [pc, #76]	; (8006d0c <xTaskResumeAll+0x134>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cc4:	4b10      	ldr	r3, [pc, #64]	; (8006d08 <xTaskResumeAll+0x130>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d009      	beq.n	8006ce0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cd0:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <xTaskResumeAll+0x138>)
 8006cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ce0:	f001 f9f0 	bl	80080c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	200012bc 	.word	0x200012bc
 8006cf4:	20001294 	.word	0x20001294
 8006cf8:	20001254 	.word	0x20001254
 8006cfc:	2000129c 	.word	0x2000129c
 8006d00:	20000dc4 	.word	0x20000dc4
 8006d04:	20000dc0 	.word	0x20000dc0
 8006d08:	200012a8 	.word	0x200012a8
 8006d0c:	200012a4 	.word	0x200012a4
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <xTaskGetTickCount+0x1c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d20:	687b      	ldr	r3, [r7, #4]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20001298 	.word	0x20001298

08006d34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d3e:	4b4f      	ldr	r3, [pc, #316]	; (8006e7c <xTaskIncrementTick+0x148>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f040 808f 	bne.w	8006e66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d48:	4b4d      	ldr	r3, [pc, #308]	; (8006e80 <xTaskIncrementTick+0x14c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d50:	4a4b      	ldr	r2, [pc, #300]	; (8006e80 <xTaskIncrementTick+0x14c>)
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d120      	bne.n	8006d9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d5c:	4b49      	ldr	r3, [pc, #292]	; (8006e84 <xTaskIncrementTick+0x150>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <xTaskIncrementTick+0x48>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	603b      	str	r3, [r7, #0]
}
 8006d78:	bf00      	nop
 8006d7a:	e7fe      	b.n	8006d7a <xTaskIncrementTick+0x46>
 8006d7c:	4b41      	ldr	r3, [pc, #260]	; (8006e84 <xTaskIncrementTick+0x150>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	4b41      	ldr	r3, [pc, #260]	; (8006e88 <xTaskIncrementTick+0x154>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a3f      	ldr	r2, [pc, #252]	; (8006e84 <xTaskIncrementTick+0x150>)
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	4a3f      	ldr	r2, [pc, #252]	; (8006e88 <xTaskIncrementTick+0x154>)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	4b3e      	ldr	r3, [pc, #248]	; (8006e8c <xTaskIncrementTick+0x158>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3301      	adds	r3, #1
 8006d96:	4a3d      	ldr	r2, [pc, #244]	; (8006e8c <xTaskIncrementTick+0x158>)
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	f000 fadb 	bl	8007354 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d9e:	4b3c      	ldr	r3, [pc, #240]	; (8006e90 <xTaskIncrementTick+0x15c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d349      	bcc.n	8006e3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006da8:	4b36      	ldr	r3, [pc, #216]	; (8006e84 <xTaskIncrementTick+0x150>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d104      	bne.n	8006dbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db2:	4b37      	ldr	r3, [pc, #220]	; (8006e90 <xTaskIncrementTick+0x15c>)
 8006db4:	f04f 32ff 	mov.w	r2, #4294967295
 8006db8:	601a      	str	r2, [r3, #0]
					break;
 8006dba:	e03f      	b.n	8006e3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dbc:	4b31      	ldr	r3, [pc, #196]	; (8006e84 <xTaskIncrementTick+0x150>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d203      	bcs.n	8006ddc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006dd4:	4a2e      	ldr	r2, [pc, #184]	; (8006e90 <xTaskIncrementTick+0x15c>)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006dda:	e02f      	b.n	8006e3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe fd99 	bl	8005918 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	3318      	adds	r3, #24
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fe fd90 	bl	8005918 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfc:	4b25      	ldr	r3, [pc, #148]	; (8006e94 <xTaskIncrementTick+0x160>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d903      	bls.n	8006e0c <xTaskIncrementTick+0xd8>
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	4a22      	ldr	r2, [pc, #136]	; (8006e94 <xTaskIncrementTick+0x160>)
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4a1f      	ldr	r2, [pc, #124]	; (8006e98 <xTaskIncrementTick+0x164>)
 8006e1a:	441a      	add	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f7fe fd1b 	bl	800585e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2c:	4b1b      	ldr	r3, [pc, #108]	; (8006e9c <xTaskIncrementTick+0x168>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d3b8      	bcc.n	8006da8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006e36:	2301      	movs	r3, #1
 8006e38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e3a:	e7b5      	b.n	8006da8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e3c:	4b17      	ldr	r3, [pc, #92]	; (8006e9c <xTaskIncrementTick+0x168>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e42:	4915      	ldr	r1, [pc, #84]	; (8006e98 <xTaskIncrementTick+0x164>)
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d901      	bls.n	8006e58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006e54:	2301      	movs	r3, #1
 8006e56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e58:	4b11      	ldr	r3, [pc, #68]	; (8006ea0 <xTaskIncrementTick+0x16c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d007      	beq.n	8006e70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006e60:	2301      	movs	r3, #1
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	e004      	b.n	8006e70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e66:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <xTaskIncrementTick+0x170>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	4a0d      	ldr	r2, [pc, #52]	; (8006ea4 <xTaskIncrementTick+0x170>)
 8006e6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e70:	697b      	ldr	r3, [r7, #20]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	200012bc 	.word	0x200012bc
 8006e80:	20001298 	.word	0x20001298
 8006e84:	2000124c 	.word	0x2000124c
 8006e88:	20001250 	.word	0x20001250
 8006e8c:	200012ac 	.word	0x200012ac
 8006e90:	200012b4 	.word	0x200012b4
 8006e94:	2000129c 	.word	0x2000129c
 8006e98:	20000dc4 	.word	0x20000dc4
 8006e9c:	20000dc0 	.word	0x20000dc0
 8006ea0:	200012a8 	.word	0x200012a8
 8006ea4:	200012a4 	.word	0x200012a4

08006ea8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006eae:	4b2a      	ldr	r3, [pc, #168]	; (8006f58 <vTaskSwitchContext+0xb0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006eb6:	4b29      	ldr	r3, [pc, #164]	; (8006f5c <vTaskSwitchContext+0xb4>)
 8006eb8:	2201      	movs	r2, #1
 8006eba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ebc:	e046      	b.n	8006f4c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006ebe:	4b27      	ldr	r3, [pc, #156]	; (8006f5c <vTaskSwitchContext+0xb4>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec4:	4b26      	ldr	r3, [pc, #152]	; (8006f60 <vTaskSwitchContext+0xb8>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	e010      	b.n	8006eee <vTaskSwitchContext+0x46>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <vTaskSwitchContext+0x40>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	607b      	str	r3, [r7, #4]
}
 8006ee4:	bf00      	nop
 8006ee6:	e7fe      	b.n	8006ee6 <vTaskSwitchContext+0x3e>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	491d      	ldr	r1, [pc, #116]	; (8006f64 <vTaskSwitchContext+0xbc>)
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	440b      	add	r3, r1
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d0e4      	beq.n	8006ecc <vTaskSwitchContext+0x24>
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	4613      	mov	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4a15      	ldr	r2, [pc, #84]	; (8006f64 <vTaskSwitchContext+0xbc>)
 8006f0e:	4413      	add	r3, r2
 8006f10:	60bb      	str	r3, [r7, #8]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	605a      	str	r2, [r3, #4]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	3308      	adds	r3, #8
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d104      	bne.n	8006f32 <vTaskSwitchContext+0x8a>
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	605a      	str	r2, [r3, #4]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	4a0b      	ldr	r2, [pc, #44]	; (8006f68 <vTaskSwitchContext+0xc0>)
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	4a08      	ldr	r2, [pc, #32]	; (8006f60 <vTaskSwitchContext+0xb8>)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f42:	4b09      	ldr	r3, [pc, #36]	; (8006f68 <vTaskSwitchContext+0xc0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3354      	adds	r3, #84	; 0x54
 8006f48:	4a08      	ldr	r2, [pc, #32]	; (8006f6c <vTaskSwitchContext+0xc4>)
 8006f4a:	6013      	str	r3, [r2, #0]
}
 8006f4c:	bf00      	nop
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	200012bc 	.word	0x200012bc
 8006f5c:	200012a8 	.word	0x200012a8
 8006f60:	2000129c 	.word	0x2000129c
 8006f64:	20000dc4 	.word	0x20000dc4
 8006f68:	20000dc0 	.word	0x20000dc0
 8006f6c:	200000ac 	.word	0x200000ac

08006f70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	60fb      	str	r3, [r7, #12]
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f96:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <vTaskPlaceOnEventList+0x44>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3318      	adds	r3, #24
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fe fc81 	bl	80058a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	6838      	ldr	r0, [r7, #0]
 8006fa8:	f000 fb8e 	bl	80076c8 <prvAddCurrentTaskToDelayedList>
}
 8006fac:	bf00      	nop
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	20000dc0 	.word	0x20000dc0

08006fb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	617b      	str	r3, [r7, #20]
}
 8006fdc:	bf00      	nop
 8006fde:	e7fe      	b.n	8006fde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fe0:	4b0a      	ldr	r3, [pc, #40]	; (800700c <vTaskPlaceOnEventListRestricted+0x54>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3318      	adds	r3, #24
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f7fe fc38 	bl	800585e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	68b8      	ldr	r0, [r7, #8]
 8006ffe:	f000 fb63 	bl	80076c8 <prvAddCurrentTaskToDelayedList>
	}
 8007002:	bf00      	nop
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20000dc0 	.word	0x20000dc0

08007010 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10a      	bne.n	800703c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	60fb      	str	r3, [r7, #12]
}
 8007038:	bf00      	nop
 800703a:	e7fe      	b.n	800703a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	3318      	adds	r3, #24
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe fc69 	bl	8005918 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007046:	4b1e      	ldr	r3, [pc, #120]	; (80070c0 <xTaskRemoveFromEventList+0xb0>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d11d      	bne.n	800708a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	3304      	adds	r3, #4
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fc60 	bl	8005918 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705c:	4b19      	ldr	r3, [pc, #100]	; (80070c4 <xTaskRemoveFromEventList+0xb4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d903      	bls.n	800706c <xTaskRemoveFromEventList+0x5c>
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	4a16      	ldr	r2, [pc, #88]	; (80070c4 <xTaskRemoveFromEventList+0xb4>)
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007070:	4613      	mov	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4a13      	ldr	r2, [pc, #76]	; (80070c8 <xTaskRemoveFromEventList+0xb8>)
 800707a:	441a      	add	r2, r3
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	3304      	adds	r3, #4
 8007080:	4619      	mov	r1, r3
 8007082:	4610      	mov	r0, r2
 8007084:	f7fe fbeb 	bl	800585e <vListInsertEnd>
 8007088:	e005      	b.n	8007096 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	3318      	adds	r3, #24
 800708e:	4619      	mov	r1, r3
 8007090:	480e      	ldr	r0, [pc, #56]	; (80070cc <xTaskRemoveFromEventList+0xbc>)
 8007092:	f7fe fbe4 	bl	800585e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709a:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <xTaskRemoveFromEventList+0xc0>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d905      	bls.n	80070b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070a4:	2301      	movs	r3, #1
 80070a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070a8:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <xTaskRemoveFromEventList+0xc4>)
 80070aa:	2201      	movs	r2, #1
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	e001      	b.n	80070b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80070b4:	697b      	ldr	r3, [r7, #20]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	200012bc 	.word	0x200012bc
 80070c4:	2000129c 	.word	0x2000129c
 80070c8:	20000dc4 	.word	0x20000dc4
 80070cc:	20001254 	.word	0x20001254
 80070d0:	20000dc0 	.word	0x20000dc0
 80070d4:	200012a8 	.word	0x200012a8

080070d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070e0:	4b06      	ldr	r3, [pc, #24]	; (80070fc <vTaskInternalSetTimeOutState+0x24>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070e8:	4b05      	ldr	r3, [pc, #20]	; (8007100 <vTaskInternalSetTimeOutState+0x28>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	605a      	str	r2, [r3, #4]
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	200012ac 	.word	0x200012ac
 8007100:	20001298 	.word	0x20001298

08007104 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	613b      	str	r3, [r7, #16]
}
 8007126:	bf00      	nop
 8007128:	e7fe      	b.n	8007128 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10a      	bne.n	8007146 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	60fb      	str	r3, [r7, #12]
}
 8007142:	bf00      	nop
 8007144:	e7fe      	b.n	8007144 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007146:	f000 ff8d 	bl	8008064 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800714a:	4b1d      	ldr	r3, [pc, #116]	; (80071c0 <xTaskCheckForTimeOut+0xbc>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007162:	d102      	bne.n	800716a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007164:	2300      	movs	r3, #0
 8007166:	61fb      	str	r3, [r7, #28]
 8007168:	e023      	b.n	80071b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4b15      	ldr	r3, [pc, #84]	; (80071c4 <xTaskCheckForTimeOut+0xc0>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d007      	beq.n	8007186 <xTaskCheckForTimeOut+0x82>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	429a      	cmp	r2, r3
 800717e:	d302      	bcc.n	8007186 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007180:	2301      	movs	r3, #1
 8007182:	61fb      	str	r3, [r7, #28]
 8007184:	e015      	b.n	80071b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	429a      	cmp	r2, r3
 800718e:	d20b      	bcs.n	80071a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	1ad2      	subs	r2, r2, r3
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff ff9b 	bl	80070d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61fb      	str	r3, [r7, #28]
 80071a6:	e004      	b.n	80071b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071ae:	2301      	movs	r3, #1
 80071b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071b2:	f000 ff87 	bl	80080c4 <vPortExitCritical>

	return xReturn;
 80071b6:	69fb      	ldr	r3, [r7, #28]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	20001298 	.word	0x20001298
 80071c4:	200012ac 	.word	0x200012ac

080071c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071c8:	b480      	push	{r7}
 80071ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071cc:	4b03      	ldr	r3, [pc, #12]	; (80071dc <vTaskMissedYield+0x14>)
 80071ce:	2201      	movs	r2, #1
 80071d0:	601a      	str	r2, [r3, #0]
}
 80071d2:	bf00      	nop
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	200012a8 	.word	0x200012a8

080071e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071e8:	f000 f852 	bl	8007290 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071ec:	4b06      	ldr	r3, [pc, #24]	; (8007208 <prvIdleTask+0x28>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d9f9      	bls.n	80071e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071f4:	4b05      	ldr	r3, [pc, #20]	; (800720c <prvIdleTask+0x2c>)
 80071f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007204:	e7f0      	b.n	80071e8 <prvIdleTask+0x8>
 8007206:	bf00      	nop
 8007208:	20000dc4 	.word	0x20000dc4
 800720c:	e000ed04 	.word	0xe000ed04

08007210 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007216:	2300      	movs	r3, #0
 8007218:	607b      	str	r3, [r7, #4]
 800721a:	e00c      	b.n	8007236 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	4613      	mov	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4a12      	ldr	r2, [pc, #72]	; (8007270 <prvInitialiseTaskLists+0x60>)
 8007228:	4413      	add	r3, r2
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe faea 	bl	8005804 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3301      	adds	r3, #1
 8007234:	607b      	str	r3, [r7, #4]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b37      	cmp	r3, #55	; 0x37
 800723a:	d9ef      	bls.n	800721c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800723c:	480d      	ldr	r0, [pc, #52]	; (8007274 <prvInitialiseTaskLists+0x64>)
 800723e:	f7fe fae1 	bl	8005804 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007242:	480d      	ldr	r0, [pc, #52]	; (8007278 <prvInitialiseTaskLists+0x68>)
 8007244:	f7fe fade 	bl	8005804 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007248:	480c      	ldr	r0, [pc, #48]	; (800727c <prvInitialiseTaskLists+0x6c>)
 800724a:	f7fe fadb 	bl	8005804 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800724e:	480c      	ldr	r0, [pc, #48]	; (8007280 <prvInitialiseTaskLists+0x70>)
 8007250:	f7fe fad8 	bl	8005804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007254:	480b      	ldr	r0, [pc, #44]	; (8007284 <prvInitialiseTaskLists+0x74>)
 8007256:	f7fe fad5 	bl	8005804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800725a:	4b0b      	ldr	r3, [pc, #44]	; (8007288 <prvInitialiseTaskLists+0x78>)
 800725c:	4a05      	ldr	r2, [pc, #20]	; (8007274 <prvInitialiseTaskLists+0x64>)
 800725e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007260:	4b0a      	ldr	r3, [pc, #40]	; (800728c <prvInitialiseTaskLists+0x7c>)
 8007262:	4a05      	ldr	r2, [pc, #20]	; (8007278 <prvInitialiseTaskLists+0x68>)
 8007264:	601a      	str	r2, [r3, #0]
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	20000dc4 	.word	0x20000dc4
 8007274:	20001224 	.word	0x20001224
 8007278:	20001238 	.word	0x20001238
 800727c:	20001254 	.word	0x20001254
 8007280:	20001268 	.word	0x20001268
 8007284:	20001280 	.word	0x20001280
 8007288:	2000124c 	.word	0x2000124c
 800728c:	20001250 	.word	0x20001250

08007290 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007296:	e019      	b.n	80072cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007298:	f000 fee4 	bl	8008064 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800729c:	4b10      	ldr	r3, [pc, #64]	; (80072e0 <prvCheckTasksWaitingTermination+0x50>)
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3304      	adds	r3, #4
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fe fb35 	bl	8005918 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072ae:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <prvCheckTasksWaitingTermination+0x54>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	4a0b      	ldr	r2, [pc, #44]	; (80072e4 <prvCheckTasksWaitingTermination+0x54>)
 80072b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072b8:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <prvCheckTasksWaitingTermination+0x58>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3b01      	subs	r3, #1
 80072be:	4a0a      	ldr	r2, [pc, #40]	; (80072e8 <prvCheckTasksWaitingTermination+0x58>)
 80072c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072c2:	f000 feff 	bl	80080c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f810 	bl	80072ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072cc:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <prvCheckTasksWaitingTermination+0x58>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1e1      	bne.n	8007298 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20001268 	.word	0x20001268
 80072e4:	20001294 	.word	0x20001294
 80072e8:	2000127c 	.word	0x2000127c

080072ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	3354      	adds	r3, #84	; 0x54
 80072f8:	4618      	mov	r0, r3
 80072fa:	f001 fa9b 	bl	8008834 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007304:	2b00      	cmp	r3, #0
 8007306:	d108      	bne.n	800731a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730c:	4618      	mov	r0, r3
 800730e:	f001 f897 	bl	8008440 <vPortFree>
				vPortFree( pxTCB );
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f001 f894 	bl	8008440 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007318:	e018      	b.n	800734c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007320:	2b01      	cmp	r3, #1
 8007322:	d103      	bne.n	800732c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 f88b 	bl	8008440 <vPortFree>
	}
 800732a:	e00f      	b.n	800734c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007332:	2b02      	cmp	r3, #2
 8007334:	d00a      	beq.n	800734c <prvDeleteTCB+0x60>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	60fb      	str	r3, [r7, #12]
}
 8007348:	bf00      	nop
 800734a:	e7fe      	b.n	800734a <prvDeleteTCB+0x5e>
	}
 800734c:	bf00      	nop
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800735a:	4b0c      	ldr	r3, [pc, #48]	; (800738c <prvResetNextTaskUnblockTime+0x38>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d104      	bne.n	800736e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007364:	4b0a      	ldr	r3, [pc, #40]	; (8007390 <prvResetNextTaskUnblockTime+0x3c>)
 8007366:	f04f 32ff 	mov.w	r2, #4294967295
 800736a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800736c:	e008      	b.n	8007380 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800736e:	4b07      	ldr	r3, [pc, #28]	; (800738c <prvResetNextTaskUnblockTime+0x38>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	4a04      	ldr	r2, [pc, #16]	; (8007390 <prvResetNextTaskUnblockTime+0x3c>)
 800737e:	6013      	str	r3, [r2, #0]
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	2000124c 	.word	0x2000124c
 8007390:	200012b4 	.word	0x200012b4

08007394 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800739a:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <xTaskGetCurrentTaskHandle+0x1c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	607b      	str	r3, [r7, #4]

		return xReturn;
 80073a0:	687b      	ldr	r3, [r7, #4]
	}
 80073a2:	4618      	mov	r0, r3
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	20000dc0 	.word	0x20000dc0

080073b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073ba:	4b0b      	ldr	r3, [pc, #44]	; (80073e8 <xTaskGetSchedulerState+0x34>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073c2:	2301      	movs	r3, #1
 80073c4:	607b      	str	r3, [r7, #4]
 80073c6:	e008      	b.n	80073da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073c8:	4b08      	ldr	r3, [pc, #32]	; (80073ec <xTaskGetSchedulerState+0x38>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d102      	bne.n	80073d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073d0:	2302      	movs	r3, #2
 80073d2:	607b      	str	r3, [r7, #4]
 80073d4:	e001      	b.n	80073da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073d6:	2300      	movs	r3, #0
 80073d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073da:	687b      	ldr	r3, [r7, #4]
	}
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	200012a0 	.word	0x200012a0
 80073ec:	200012bc 	.word	0x200012bc

080073f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80073fc:	2300      	movs	r3, #0
 80073fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d051      	beq.n	80074aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740a:	4b2a      	ldr	r3, [pc, #168]	; (80074b4 <xTaskPriorityInherit+0xc4>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	429a      	cmp	r2, r3
 8007412:	d241      	bcs.n	8007498 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	db06      	blt.n	800742a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800741c:	4b25      	ldr	r3, [pc, #148]	; (80074b4 <xTaskPriorityInherit+0xc4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007422:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	6959      	ldr	r1, [r3, #20]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007432:	4613      	mov	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4a1f      	ldr	r2, [pc, #124]	; (80074b8 <xTaskPriorityInherit+0xc8>)
 800743c:	4413      	add	r3, r2
 800743e:	4299      	cmp	r1, r3
 8007440:	d122      	bne.n	8007488 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	3304      	adds	r3, #4
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe fa66 	bl	8005918 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800744c:	4b19      	ldr	r3, [pc, #100]	; (80074b4 <xTaskPriorityInherit+0xc4>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745a:	4b18      	ldr	r3, [pc, #96]	; (80074bc <xTaskPriorityInherit+0xcc>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	429a      	cmp	r2, r3
 8007460:	d903      	bls.n	800746a <xTaskPriorityInherit+0x7a>
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	4a15      	ldr	r2, [pc, #84]	; (80074bc <xTaskPriorityInherit+0xcc>)
 8007468:	6013      	str	r3, [r2, #0]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4a10      	ldr	r2, [pc, #64]	; (80074b8 <xTaskPriorityInherit+0xc8>)
 8007478:	441a      	add	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	3304      	adds	r3, #4
 800747e:	4619      	mov	r1, r3
 8007480:	4610      	mov	r0, r2
 8007482:	f7fe f9ec 	bl	800585e <vListInsertEnd>
 8007486:	e004      	b.n	8007492 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007488:	4b0a      	ldr	r3, [pc, #40]	; (80074b4 <xTaskPriorityInherit+0xc4>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007492:	2301      	movs	r3, #1
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	e008      	b.n	80074aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800749c:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <xTaskPriorityInherit+0xc4>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d201      	bcs.n	80074aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80074a6:	2301      	movs	r3, #1
 80074a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074aa:	68fb      	ldr	r3, [r7, #12]
	}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20000dc0 	.word	0x20000dc0
 80074b8:	20000dc4 	.word	0x20000dc4
 80074bc:	2000129c 	.word	0x2000129c

080074c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074cc:	2300      	movs	r3, #0
 80074ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d056      	beq.n	8007584 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074d6:	4b2e      	ldr	r3, [pc, #184]	; (8007590 <xTaskPriorityDisinherit+0xd0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d00a      	beq.n	80074f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	60fb      	str	r3, [r7, #12]
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	60bb      	str	r3, [r7, #8]
}
 8007510:	bf00      	nop
 8007512:	e7fe      	b.n	8007512 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007518:	1e5a      	subs	r2, r3, #1
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007526:	429a      	cmp	r2, r3
 8007528:	d02c      	beq.n	8007584 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752e:	2b00      	cmp	r3, #0
 8007530:	d128      	bne.n	8007584 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	3304      	adds	r3, #4
 8007536:	4618      	mov	r0, r3
 8007538:	f7fe f9ee 	bl	8005918 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007554:	4b0f      	ldr	r3, [pc, #60]	; (8007594 <xTaskPriorityDisinherit+0xd4>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	429a      	cmp	r2, r3
 800755a:	d903      	bls.n	8007564 <xTaskPriorityDisinherit+0xa4>
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	4a0c      	ldr	r2, [pc, #48]	; (8007594 <xTaskPriorityDisinherit+0xd4>)
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4a09      	ldr	r2, [pc, #36]	; (8007598 <xTaskPriorityDisinherit+0xd8>)
 8007572:	441a      	add	r2, r3
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	3304      	adds	r3, #4
 8007578:	4619      	mov	r1, r3
 800757a:	4610      	mov	r0, r2
 800757c:	f7fe f96f 	bl	800585e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007580:	2301      	movs	r3, #1
 8007582:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007584:	697b      	ldr	r3, [r7, #20]
	}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20000dc0 	.word	0x20000dc0
 8007594:	2000129c 	.word	0x2000129c
 8007598:	20000dc4 	.word	0x20000dc4

0800759c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800759c:	b580      	push	{r7, lr}
 800759e:	b088      	sub	sp, #32
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80075aa:	2301      	movs	r3, #1
 80075ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d06a      	beq.n	800768a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10a      	bne.n	80075d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	60fb      	str	r3, [r7, #12]
}
 80075ce:	bf00      	nop
 80075d0:	e7fe      	b.n	80075d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d902      	bls.n	80075e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	61fb      	str	r3, [r7, #28]
 80075e0:	e002      	b.n	80075e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	69fa      	ldr	r2, [r7, #28]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d04b      	beq.n	800768a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d146      	bne.n	800768a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80075fc:	4b25      	ldr	r3, [pc, #148]	; (8007694 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	429a      	cmp	r2, r3
 8007604:	d10a      	bne.n	800761c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	60bb      	str	r3, [r7, #8]
}
 8007618:	bf00      	nop
 800761a:	e7fe      	b.n	800761a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007620:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	2b00      	cmp	r3, #0
 800762e:	db04      	blt.n	800763a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	6959      	ldr	r1, [r3, #20]
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	4613      	mov	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4413      	add	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4a13      	ldr	r2, [pc, #76]	; (8007698 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800764a:	4413      	add	r3, r2
 800764c:	4299      	cmp	r1, r3
 800764e:	d11c      	bne.n	800768a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	3304      	adds	r3, #4
 8007654:	4618      	mov	r0, r3
 8007656:	f7fe f95f 	bl	8005918 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765e:	4b0f      	ldr	r3, [pc, #60]	; (800769c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d903      	bls.n	800766e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766a:	4a0c      	ldr	r2, [pc, #48]	; (800769c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4a07      	ldr	r2, [pc, #28]	; (8007698 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800767c:	441a      	add	r2, r3
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	3304      	adds	r3, #4
 8007682:	4619      	mov	r1, r3
 8007684:	4610      	mov	r0, r2
 8007686:	f7fe f8ea 	bl	800585e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800768a:	bf00      	nop
 800768c:	3720      	adds	r7, #32
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	20000dc0 	.word	0x20000dc0
 8007698:	20000dc4 	.word	0x20000dc4
 800769c:	2000129c 	.word	0x2000129c

080076a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80076a4:	4b07      	ldr	r3, [pc, #28]	; (80076c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d004      	beq.n	80076b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80076ac:	4b05      	ldr	r3, [pc, #20]	; (80076c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076b2:	3201      	adds	r2, #1
 80076b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80076b6:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80076b8:	681b      	ldr	r3, [r3, #0]
	}
 80076ba:	4618      	mov	r0, r3
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	20000dc0 	.word	0x20000dc0

080076c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076d2:	4b21      	ldr	r3, [pc, #132]	; (8007758 <prvAddCurrentTaskToDelayedList+0x90>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076d8:	4b20      	ldr	r3, [pc, #128]	; (800775c <prvAddCurrentTaskToDelayedList+0x94>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3304      	adds	r3, #4
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe f91a 	bl	8005918 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ea:	d10a      	bne.n	8007702 <prvAddCurrentTaskToDelayedList+0x3a>
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d007      	beq.n	8007702 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076f2:	4b1a      	ldr	r3, [pc, #104]	; (800775c <prvAddCurrentTaskToDelayedList+0x94>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	3304      	adds	r3, #4
 80076f8:	4619      	mov	r1, r3
 80076fa:	4819      	ldr	r0, [pc, #100]	; (8007760 <prvAddCurrentTaskToDelayedList+0x98>)
 80076fc:	f7fe f8af 	bl	800585e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007700:	e026      	b.n	8007750 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4413      	add	r3, r2
 8007708:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800770a:	4b14      	ldr	r3, [pc, #80]	; (800775c <prvAddCurrentTaskToDelayedList+0x94>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	429a      	cmp	r2, r3
 8007718:	d209      	bcs.n	800772e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800771a:	4b12      	ldr	r3, [pc, #72]	; (8007764 <prvAddCurrentTaskToDelayedList+0x9c>)
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	4b0f      	ldr	r3, [pc, #60]	; (800775c <prvAddCurrentTaskToDelayedList+0x94>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3304      	adds	r3, #4
 8007724:	4619      	mov	r1, r3
 8007726:	4610      	mov	r0, r2
 8007728:	f7fe f8bd 	bl	80058a6 <vListInsert>
}
 800772c:	e010      	b.n	8007750 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800772e:	4b0e      	ldr	r3, [pc, #56]	; (8007768 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4b0a      	ldr	r3, [pc, #40]	; (800775c <prvAddCurrentTaskToDelayedList+0x94>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3304      	adds	r3, #4
 8007738:	4619      	mov	r1, r3
 800773a:	4610      	mov	r0, r2
 800773c:	f7fe f8b3 	bl	80058a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007740:	4b0a      	ldr	r3, [pc, #40]	; (800776c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	429a      	cmp	r2, r3
 8007748:	d202      	bcs.n	8007750 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800774a:	4a08      	ldr	r2, [pc, #32]	; (800776c <prvAddCurrentTaskToDelayedList+0xa4>)
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	6013      	str	r3, [r2, #0]
}
 8007750:	bf00      	nop
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	20001298 	.word	0x20001298
 800775c:	20000dc0 	.word	0x20000dc0
 8007760:	20001280 	.word	0x20001280
 8007764:	20001250 	.word	0x20001250
 8007768:	2000124c 	.word	0x2000124c
 800776c:	200012b4 	.word	0x200012b4

08007770 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b08a      	sub	sp, #40	; 0x28
 8007774:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007776:	2300      	movs	r3, #0
 8007778:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800777a:	f000 fb07 	bl	8007d8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800777e:	4b1c      	ldr	r3, [pc, #112]	; (80077f0 <xTimerCreateTimerTask+0x80>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d021      	beq.n	80077ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007786:	2300      	movs	r3, #0
 8007788:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800778a:	2300      	movs	r3, #0
 800778c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800778e:	1d3a      	adds	r2, r7, #4
 8007790:	f107 0108 	add.w	r1, r7, #8
 8007794:	f107 030c 	add.w	r3, r7, #12
 8007798:	4618      	mov	r0, r3
 800779a:	f7fe f819 	bl	80057d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	9202      	str	r2, [sp, #8]
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	2302      	movs	r3, #2
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	2300      	movs	r3, #0
 80077ae:	460a      	mov	r2, r1
 80077b0:	4910      	ldr	r1, [pc, #64]	; (80077f4 <xTimerCreateTimerTask+0x84>)
 80077b2:	4811      	ldr	r0, [pc, #68]	; (80077f8 <xTimerCreateTimerTask+0x88>)
 80077b4:	f7fe ffda 	bl	800676c <xTaskCreateStatic>
 80077b8:	4603      	mov	r3, r0
 80077ba:	4a10      	ldr	r2, [pc, #64]	; (80077fc <xTimerCreateTimerTask+0x8c>)
 80077bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077be:	4b0f      	ldr	r3, [pc, #60]	; (80077fc <xTimerCreateTimerTask+0x8c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077c6:	2301      	movs	r3, #1
 80077c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	613b      	str	r3, [r7, #16]
}
 80077e2:	bf00      	nop
 80077e4:	e7fe      	b.n	80077e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077e6:	697b      	ldr	r3, [r7, #20]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	200012f0 	.word	0x200012f0
 80077f4:	08009384 	.word	0x08009384
 80077f8:	08007935 	.word	0x08007935
 80077fc:	200012f4 	.word	0x200012f4

08007800 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b08a      	sub	sp, #40	; 0x28
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
 800780c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800780e:	2300      	movs	r3, #0
 8007810:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10a      	bne.n	800782e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	623b      	str	r3, [r7, #32]
}
 800782a:	bf00      	nop
 800782c:	e7fe      	b.n	800782c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800782e:	4b1a      	ldr	r3, [pc, #104]	; (8007898 <xTimerGenericCommand+0x98>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d02a      	beq.n	800788c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b05      	cmp	r3, #5
 8007846:	dc18      	bgt.n	800787a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007848:	f7ff fdb4 	bl	80073b4 <xTaskGetSchedulerState>
 800784c:	4603      	mov	r3, r0
 800784e:	2b02      	cmp	r3, #2
 8007850:	d109      	bne.n	8007866 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007852:	4b11      	ldr	r3, [pc, #68]	; (8007898 <xTimerGenericCommand+0x98>)
 8007854:	6818      	ldr	r0, [r3, #0]
 8007856:	f107 0110 	add.w	r1, r7, #16
 800785a:	2300      	movs	r3, #0
 800785c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800785e:	f7fe fa79 	bl	8005d54 <xQueueGenericSend>
 8007862:	6278      	str	r0, [r7, #36]	; 0x24
 8007864:	e012      	b.n	800788c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007866:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <xTimerGenericCommand+0x98>)
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	f107 0110 	add.w	r1, r7, #16
 800786e:	2300      	movs	r3, #0
 8007870:	2200      	movs	r2, #0
 8007872:	f7fe fa6f 	bl	8005d54 <xQueueGenericSend>
 8007876:	6278      	str	r0, [r7, #36]	; 0x24
 8007878:	e008      	b.n	800788c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800787a:	4b07      	ldr	r3, [pc, #28]	; (8007898 <xTimerGenericCommand+0x98>)
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	f107 0110 	add.w	r1, r7, #16
 8007882:	2300      	movs	r3, #0
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	f7fe fb63 	bl	8005f50 <xQueueGenericSendFromISR>
 800788a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800788e:	4618      	mov	r0, r3
 8007890:	3728      	adds	r7, #40	; 0x28
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	200012f0 	.word	0x200012f0

0800789c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b088      	sub	sp, #32
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a6:	4b22      	ldr	r3, [pc, #136]	; (8007930 <prvProcessExpiredTimer+0x94>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	3304      	adds	r3, #4
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fe f82f 	bl	8005918 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d022      	beq.n	800790e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	699a      	ldr	r2, [r3, #24]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	18d1      	adds	r1, r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	6978      	ldr	r0, [r7, #20]
 80078d6:	f000 f8d1 	bl	8007a7c <prvInsertTimerInActiveList>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d01f      	beq.n	8007920 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078e0:	2300      	movs	r3, #0
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	2300      	movs	r3, #0
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	2100      	movs	r1, #0
 80078ea:	6978      	ldr	r0, [r7, #20]
 80078ec:	f7ff ff88 	bl	8007800 <xTimerGenericCommand>
 80078f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d113      	bne.n	8007920 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	60fb      	str	r3, [r7, #12]
}
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007914:	f023 0301 	bic.w	r3, r3, #1
 8007918:	b2da      	uxtb	r2, r3
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	6978      	ldr	r0, [r7, #20]
 8007926:	4798      	blx	r3
}
 8007928:	bf00      	nop
 800792a:	3718      	adds	r7, #24
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	200012e8 	.word	0x200012e8

08007934 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800793c:	f107 0308 	add.w	r3, r7, #8
 8007940:	4618      	mov	r0, r3
 8007942:	f000 f857 	bl	80079f4 <prvGetNextExpireTime>
 8007946:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	4619      	mov	r1, r3
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 f803 	bl	8007958 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007952:	f000 f8d5 	bl	8007b00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007956:	e7f1      	b.n	800793c <prvTimerTask+0x8>

08007958 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007962:	f7ff f92b 	bl	8006bbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007966:	f107 0308 	add.w	r3, r7, #8
 800796a:	4618      	mov	r0, r3
 800796c:	f000 f866 	bl	8007a3c <prvSampleTimeNow>
 8007970:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d130      	bne.n	80079da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <prvProcessTimerOrBlockTask+0x3c>
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	429a      	cmp	r2, r3
 8007984:	d806      	bhi.n	8007994 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007986:	f7ff f927 	bl	8006bd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff ff85 	bl	800789c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007992:	e024      	b.n	80079de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d008      	beq.n	80079ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800799a:	4b13      	ldr	r3, [pc, #76]	; (80079e8 <prvProcessTimerOrBlockTask+0x90>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <prvProcessTimerOrBlockTask+0x50>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e000      	b.n	80079aa <prvProcessTimerOrBlockTask+0x52>
 80079a8:	2300      	movs	r3, #0
 80079aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079ac:	4b0f      	ldr	r3, [pc, #60]	; (80079ec <prvProcessTimerOrBlockTask+0x94>)
 80079ae:	6818      	ldr	r0, [r3, #0]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	4619      	mov	r1, r3
 80079ba:	f7fe fea3 	bl	8006704 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079be:	f7ff f90b 	bl	8006bd8 <xTaskResumeAll>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80079c8:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <prvProcessTimerOrBlockTask+0x98>)
 80079ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ce:	601a      	str	r2, [r3, #0]
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	f3bf 8f6f 	isb	sy
}
 80079d8:	e001      	b.n	80079de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80079da:	f7ff f8fd 	bl	8006bd8 <xTaskResumeAll>
}
 80079de:	bf00      	nop
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	200012ec 	.word	0x200012ec
 80079ec:	200012f0 	.word	0x200012f0
 80079f0:	e000ed04 	.word	0xe000ed04

080079f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079fc:	4b0e      	ldr	r3, [pc, #56]	; (8007a38 <prvGetNextExpireTime+0x44>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <prvGetNextExpireTime+0x16>
 8007a06:	2201      	movs	r2, #1
 8007a08:	e000      	b.n	8007a0c <prvGetNextExpireTime+0x18>
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d105      	bne.n	8007a24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a18:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <prvGetNextExpireTime+0x44>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	60fb      	str	r3, [r7, #12]
 8007a22:	e001      	b.n	8007a28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a28:	68fb      	ldr	r3, [r7, #12]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	200012e8 	.word	0x200012e8

08007a3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a44:	f7ff f966 	bl	8006d14 <xTaskGetTickCount>
 8007a48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a4a:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <prvSampleTimeNow+0x3c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d205      	bcs.n	8007a60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a54:	f000 f936 	bl	8007cc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	e002      	b.n	8007a66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a66:	4a04      	ldr	r2, [pc, #16]	; (8007a78 <prvSampleTimeNow+0x3c>)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	200012f8 	.word	0x200012f8

08007a7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d812      	bhi.n	8007ac8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	1ad2      	subs	r2, r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d302      	bcc.n	8007ab6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	e01b      	b.n	8007aee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ab6:	4b10      	ldr	r3, [pc, #64]	; (8007af8 <prvInsertTimerInActiveList+0x7c>)
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f7fd fef0 	bl	80058a6 <vListInsert>
 8007ac6:	e012      	b.n	8007aee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d206      	bcs.n	8007ade <prvInsertTimerInActiveList+0x62>
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d302      	bcc.n	8007ade <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	e007      	b.n	8007aee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ade:	4b07      	ldr	r3, [pc, #28]	; (8007afc <prvInsertTimerInActiveList+0x80>)
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4610      	mov	r0, r2
 8007aea:	f7fd fedc 	bl	80058a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007aee:	697b      	ldr	r3, [r7, #20]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	200012ec 	.word	0x200012ec
 8007afc:	200012e8 	.word	0x200012e8

08007b00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08e      	sub	sp, #56	; 0x38
 8007b04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b06:	e0ca      	b.n	8007c9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	da18      	bge.n	8007b40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b0e:	1d3b      	adds	r3, r7, #4
 8007b10:	3304      	adds	r3, #4
 8007b12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	61fb      	str	r3, [r7, #28]
}
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b36:	6850      	ldr	r0, [r2, #4]
 8007b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b3a:	6892      	ldr	r2, [r2, #8]
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f2c0 80ab 	blt.w	8007c9e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d004      	beq.n	8007b5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b56:	3304      	adds	r3, #4
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fd fedd 	bl	8005918 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b5e:	463b      	mov	r3, r7
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff ff6b 	bl	8007a3c <prvSampleTimeNow>
 8007b66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b09      	cmp	r3, #9
 8007b6c:	f200 8096 	bhi.w	8007c9c <prvProcessReceivedCommands+0x19c>
 8007b70:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <prvProcessReceivedCommands+0x78>)
 8007b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b76:	bf00      	nop
 8007b78:	08007ba1 	.word	0x08007ba1
 8007b7c:	08007ba1 	.word	0x08007ba1
 8007b80:	08007ba1 	.word	0x08007ba1
 8007b84:	08007c15 	.word	0x08007c15
 8007b88:	08007c29 	.word	0x08007c29
 8007b8c:	08007c73 	.word	0x08007c73
 8007b90:	08007ba1 	.word	0x08007ba1
 8007b94:	08007ba1 	.word	0x08007ba1
 8007b98:	08007c15 	.word	0x08007c15
 8007b9c:	08007c29 	.word	0x08007c29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ba6:	f043 0301 	orr.w	r3, r3, #1
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	18d1      	adds	r1, r2, r3
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bc0:	f7ff ff5c 	bl	8007a7c <prvInsertTimerInActiveList>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d069      	beq.n	8007c9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d05e      	beq.n	8007c9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	441a      	add	r2, r3
 8007be8:	2300      	movs	r3, #0
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	2300      	movs	r3, #0
 8007bee:	2100      	movs	r1, #0
 8007bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf2:	f7ff fe05 	bl	8007800 <xTimerGenericCommand>
 8007bf6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d14f      	bne.n	8007c9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	61bb      	str	r3, [r7, #24]
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c1a:	f023 0301 	bic.w	r3, r3, #1
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007c26:	e03a      	b.n	8007c9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c2e:	f043 0301 	orr.w	r3, r3, #1
 8007c32:	b2da      	uxtb	r2, r3
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10a      	bne.n	8007c5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
 8007c58:	617b      	str	r3, [r7, #20]
}
 8007c5a:	bf00      	nop
 8007c5c:	e7fe      	b.n	8007c5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	18d1      	adds	r1, r2, r3
 8007c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c6c:	f7ff ff06 	bl	8007a7c <prvInsertTimerInActiveList>
					break;
 8007c70:	e015      	b.n	8007c9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d103      	bne.n	8007c88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c82:	f000 fbdd 	bl	8008440 <vPortFree>
 8007c86:	e00a      	b.n	8007c9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c8e:	f023 0301 	bic.w	r3, r3, #1
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c9a:	e000      	b.n	8007c9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007c9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c9e:	4b08      	ldr	r3, [pc, #32]	; (8007cc0 <prvProcessReceivedCommands+0x1c0>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	1d39      	adds	r1, r7, #4
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe f9ee 	bl	8006088 <xQueueReceive>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f47f af2a 	bne.w	8007b08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop
 8007cb8:	3730      	adds	r7, #48	; 0x30
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	200012f0 	.word	0x200012f0

08007cc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cca:	e048      	b.n	8007d5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ccc:	4b2d      	ldr	r3, [pc, #180]	; (8007d84 <prvSwitchTimerLists+0xc0>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cd6:	4b2b      	ldr	r3, [pc, #172]	; (8007d84 <prvSwitchTimerLists+0xc0>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fd fe17 	bl	8005918 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d02e      	beq.n	8007d5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	4413      	add	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d90e      	bls.n	8007d30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d1e:	4b19      	ldr	r3, [pc, #100]	; (8007d84 <prvSwitchTimerLists+0xc0>)
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4619      	mov	r1, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	f7fd fdbc 	bl	80058a6 <vListInsert>
 8007d2e:	e016      	b.n	8007d5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d30:	2300      	movs	r3, #0
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	2300      	movs	r3, #0
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	2100      	movs	r1, #0
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f7ff fd60 	bl	8007800 <xTimerGenericCommand>
 8007d40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	603b      	str	r3, [r7, #0]
}
 8007d5a:	bf00      	nop
 8007d5c:	e7fe      	b.n	8007d5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d5e:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <prvSwitchTimerLists+0xc0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1b1      	bne.n	8007ccc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d68:	4b06      	ldr	r3, [pc, #24]	; (8007d84 <prvSwitchTimerLists+0xc0>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d6e:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <prvSwitchTimerLists+0xc4>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a04      	ldr	r2, [pc, #16]	; (8007d84 <prvSwitchTimerLists+0xc0>)
 8007d74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d76:	4a04      	ldr	r2, [pc, #16]	; (8007d88 <prvSwitchTimerLists+0xc4>)
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	6013      	str	r3, [r2, #0]
}
 8007d7c:	bf00      	nop
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	200012e8 	.word	0x200012e8
 8007d88:	200012ec 	.word	0x200012ec

08007d8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d92:	f000 f967 	bl	8008064 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d96:	4b15      	ldr	r3, [pc, #84]	; (8007dec <prvCheckForValidListAndQueue+0x60>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d120      	bne.n	8007de0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d9e:	4814      	ldr	r0, [pc, #80]	; (8007df0 <prvCheckForValidListAndQueue+0x64>)
 8007da0:	f7fd fd30 	bl	8005804 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007da4:	4813      	ldr	r0, [pc, #76]	; (8007df4 <prvCheckForValidListAndQueue+0x68>)
 8007da6:	f7fd fd2d 	bl	8005804 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007daa:	4b13      	ldr	r3, [pc, #76]	; (8007df8 <prvCheckForValidListAndQueue+0x6c>)
 8007dac:	4a10      	ldr	r2, [pc, #64]	; (8007df0 <prvCheckForValidListAndQueue+0x64>)
 8007dae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007db0:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <prvCheckForValidListAndQueue+0x70>)
 8007db2:	4a10      	ldr	r2, [pc, #64]	; (8007df4 <prvCheckForValidListAndQueue+0x68>)
 8007db4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007db6:	2300      	movs	r3, #0
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	4b11      	ldr	r3, [pc, #68]	; (8007e00 <prvCheckForValidListAndQueue+0x74>)
 8007dbc:	4a11      	ldr	r2, [pc, #68]	; (8007e04 <prvCheckForValidListAndQueue+0x78>)
 8007dbe:	2110      	movs	r1, #16
 8007dc0:	200a      	movs	r0, #10
 8007dc2:	f7fd fe3b 	bl	8005a3c <xQueueGenericCreateStatic>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4a08      	ldr	r2, [pc, #32]	; (8007dec <prvCheckForValidListAndQueue+0x60>)
 8007dca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007dcc:	4b07      	ldr	r3, [pc, #28]	; (8007dec <prvCheckForValidListAndQueue+0x60>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d005      	beq.n	8007de0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <prvCheckForValidListAndQueue+0x60>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	490b      	ldr	r1, [pc, #44]	; (8007e08 <prvCheckForValidListAndQueue+0x7c>)
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe fc68 	bl	80066b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007de0:	f000 f970 	bl	80080c4 <vPortExitCritical>
}
 8007de4:	bf00      	nop
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	200012f0 	.word	0x200012f0
 8007df0:	200012c0 	.word	0x200012c0
 8007df4:	200012d4 	.word	0x200012d4
 8007df8:	200012e8 	.word	0x200012e8
 8007dfc:	200012ec 	.word	0x200012ec
 8007e00:	2000139c 	.word	0x2000139c
 8007e04:	200012fc 	.word	0x200012fc
 8007e08:	0800938c 	.word	0x0800938c

08007e0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3b04      	subs	r3, #4
 8007e1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3b04      	subs	r3, #4
 8007e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f023 0201 	bic.w	r2, r3, #1
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3b04      	subs	r3, #4
 8007e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e3c:	4a0c      	ldr	r2, [pc, #48]	; (8007e70 <pxPortInitialiseStack+0x64>)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3b14      	subs	r3, #20
 8007e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3b04      	subs	r3, #4
 8007e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f06f 0202 	mvn.w	r2, #2
 8007e5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3b20      	subs	r3, #32
 8007e60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e62:	68fb      	ldr	r3, [r7, #12]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	08007e75 	.word	0x08007e75

08007e74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e7e:	4b12      	ldr	r3, [pc, #72]	; (8007ec8 <prvTaskExitError+0x54>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e86:	d00a      	beq.n	8007e9e <prvTaskExitError+0x2a>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	60fb      	str	r3, [r7, #12]
}
 8007e9a:	bf00      	nop
 8007e9c:	e7fe      	b.n	8007e9c <prvTaskExitError+0x28>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	60bb      	str	r3, [r7, #8]
}
 8007eb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007eb2:	bf00      	nop
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0fc      	beq.n	8007eb4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007eba:	bf00      	nop
 8007ebc:	bf00      	nop
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	2000005c 	.word	0x2000005c
 8007ecc:	00000000 	.word	0x00000000

08007ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ed0:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <pxCurrentTCBConst2>)
 8007ed2:	6819      	ldr	r1, [r3, #0]
 8007ed4:	6808      	ldr	r0, [r1, #0]
 8007ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eda:	f380 8809 	msr	PSP, r0
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f04f 0000 	mov.w	r0, #0
 8007ee6:	f380 8811 	msr	BASEPRI, r0
 8007eea:	4770      	bx	lr
 8007eec:	f3af 8000 	nop.w

08007ef0 <pxCurrentTCBConst2>:
 8007ef0:	20000dc0 	.word	0x20000dc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop

08007ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ef8:	4808      	ldr	r0, [pc, #32]	; (8007f1c <prvPortStartFirstTask+0x24>)
 8007efa:	6800      	ldr	r0, [r0, #0]
 8007efc:	6800      	ldr	r0, [r0, #0]
 8007efe:	f380 8808 	msr	MSP, r0
 8007f02:	f04f 0000 	mov.w	r0, #0
 8007f06:	f380 8814 	msr	CONTROL, r0
 8007f0a:	b662      	cpsie	i
 8007f0c:	b661      	cpsie	f
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	df00      	svc	0
 8007f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f1a:	bf00      	nop
 8007f1c:	e000ed08 	.word	0xe000ed08

08007f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f26:	4b46      	ldr	r3, [pc, #280]	; (8008040 <xPortStartScheduler+0x120>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a46      	ldr	r2, [pc, #280]	; (8008044 <xPortStartScheduler+0x124>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d10a      	bne.n	8007f46 <xPortStartScheduler+0x26>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	613b      	str	r3, [r7, #16]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f46:	4b3e      	ldr	r3, [pc, #248]	; (8008040 <xPortStartScheduler+0x120>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a3f      	ldr	r2, [pc, #252]	; (8008048 <xPortStartScheduler+0x128>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d10a      	bne.n	8007f66 <xPortStartScheduler+0x46>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	60fb      	str	r3, [r7, #12]
}
 8007f62:	bf00      	nop
 8007f64:	e7fe      	b.n	8007f64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f66:	4b39      	ldr	r3, [pc, #228]	; (800804c <xPortStartScheduler+0x12c>)
 8007f68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	22ff      	movs	r2, #255	; 0xff
 8007f76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	4b31      	ldr	r3, [pc, #196]	; (8008050 <xPortStartScheduler+0x130>)
 8007f8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f8e:	4b31      	ldr	r3, [pc, #196]	; (8008054 <xPortStartScheduler+0x134>)
 8007f90:	2207      	movs	r2, #7
 8007f92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f94:	e009      	b.n	8007faa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f96:	4b2f      	ldr	r3, [pc, #188]	; (8008054 <xPortStartScheduler+0x134>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	4a2d      	ldr	r2, [pc, #180]	; (8008054 <xPortStartScheduler+0x134>)
 8007f9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007faa:	78fb      	ldrb	r3, [r7, #3]
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb2:	2b80      	cmp	r3, #128	; 0x80
 8007fb4:	d0ef      	beq.n	8007f96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fb6:	4b27      	ldr	r3, [pc, #156]	; (8008054 <xPortStartScheduler+0x134>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f1c3 0307 	rsb	r3, r3, #7
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d00a      	beq.n	8007fd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	60bb      	str	r3, [r7, #8]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fd8:	4b1e      	ldr	r3, [pc, #120]	; (8008054 <xPortStartScheduler+0x134>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	021b      	lsls	r3, r3, #8
 8007fde:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <xPortStartScheduler+0x134>)
 8007fe0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fe2:	4b1c      	ldr	r3, [pc, #112]	; (8008054 <xPortStartScheduler+0x134>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fea:	4a1a      	ldr	r2, [pc, #104]	; (8008054 <xPortStartScheduler+0x134>)
 8007fec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ff6:	4b18      	ldr	r3, [pc, #96]	; (8008058 <xPortStartScheduler+0x138>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a17      	ldr	r2, [pc, #92]	; (8008058 <xPortStartScheduler+0x138>)
 8007ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008000:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008002:	4b15      	ldr	r3, [pc, #84]	; (8008058 <xPortStartScheduler+0x138>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a14      	ldr	r2, [pc, #80]	; (8008058 <xPortStartScheduler+0x138>)
 8008008:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800800c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800800e:	f000 f8dd 	bl	80081cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008012:	4b12      	ldr	r3, [pc, #72]	; (800805c <xPortStartScheduler+0x13c>)
 8008014:	2200      	movs	r2, #0
 8008016:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008018:	f000 f8fc 	bl	8008214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800801c:	4b10      	ldr	r3, [pc, #64]	; (8008060 <xPortStartScheduler+0x140>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a0f      	ldr	r2, [pc, #60]	; (8008060 <xPortStartScheduler+0x140>)
 8008022:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008026:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008028:	f7ff ff66 	bl	8007ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800802c:	f7fe ff3c 	bl	8006ea8 <vTaskSwitchContext>
	prvTaskExitError();
 8008030:	f7ff ff20 	bl	8007e74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	e000ed00 	.word	0xe000ed00
 8008044:	410fc271 	.word	0x410fc271
 8008048:	410fc270 	.word	0x410fc270
 800804c:	e000e400 	.word	0xe000e400
 8008050:	200013ec 	.word	0x200013ec
 8008054:	200013f0 	.word	0x200013f0
 8008058:	e000ed20 	.word	0xe000ed20
 800805c:	2000005c 	.word	0x2000005c
 8008060:	e000ef34 	.word	0xe000ef34

08008064 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	607b      	str	r3, [r7, #4]
}
 800807c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800807e:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <vPortEnterCritical+0x58>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3301      	adds	r3, #1
 8008084:	4a0d      	ldr	r2, [pc, #52]	; (80080bc <vPortEnterCritical+0x58>)
 8008086:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008088:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <vPortEnterCritical+0x58>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d10f      	bne.n	80080b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008090:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <vPortEnterCritical+0x5c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	603b      	str	r3, [r7, #0]
}
 80080ac:	bf00      	nop
 80080ae:	e7fe      	b.n	80080ae <vPortEnterCritical+0x4a>
	}
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	2000005c 	.word	0x2000005c
 80080c0:	e000ed04 	.word	0xe000ed04

080080c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080ca:	4b12      	ldr	r3, [pc, #72]	; (8008114 <vPortExitCritical+0x50>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10a      	bne.n	80080e8 <vPortExitCritical+0x24>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	607b      	str	r3, [r7, #4]
}
 80080e4:	bf00      	nop
 80080e6:	e7fe      	b.n	80080e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080e8:	4b0a      	ldr	r3, [pc, #40]	; (8008114 <vPortExitCritical+0x50>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	4a09      	ldr	r2, [pc, #36]	; (8008114 <vPortExitCritical+0x50>)
 80080f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080f2:	4b08      	ldr	r3, [pc, #32]	; (8008114 <vPortExitCritical+0x50>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d105      	bne.n	8008106 <vPortExitCritical+0x42>
 80080fa:	2300      	movs	r3, #0
 80080fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	f383 8811 	msr	BASEPRI, r3
}
 8008104:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	2000005c 	.word	0x2000005c
	...

08008120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008120:	f3ef 8009 	mrs	r0, PSP
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	4b15      	ldr	r3, [pc, #84]	; (8008180 <pxCurrentTCBConst>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	f01e 0f10 	tst.w	lr, #16
 8008130:	bf08      	it	eq
 8008132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813a:	6010      	str	r0, [r2, #0]
 800813c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008144:	f380 8811 	msr	BASEPRI, r0
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f7fe feaa 	bl	8006ea8 <vTaskSwitchContext>
 8008154:	f04f 0000 	mov.w	r0, #0
 8008158:	f380 8811 	msr	BASEPRI, r0
 800815c:	bc09      	pop	{r0, r3}
 800815e:	6819      	ldr	r1, [r3, #0]
 8008160:	6808      	ldr	r0, [r1, #0]
 8008162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008166:	f01e 0f10 	tst.w	lr, #16
 800816a:	bf08      	it	eq
 800816c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008170:	f380 8809 	msr	PSP, r0
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	f3af 8000 	nop.w

08008180 <pxCurrentTCBConst>:
 8008180:	20000dc0 	.word	0x20000dc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop

08008188 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	607b      	str	r3, [r7, #4]
}
 80081a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081a2:	f7fe fdc7 	bl	8006d34 <xTaskIncrementTick>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081ac:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <xPortSysTickHandler+0x40>)
 80081ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	2300      	movs	r3, #0
 80081b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f383 8811 	msr	BASEPRI, r3
}
 80081be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	e000ed04 	.word	0xe000ed04

080081cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081d0:	4b0b      	ldr	r3, [pc, #44]	; (8008200 <vPortSetupTimerInterrupt+0x34>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081d6:	4b0b      	ldr	r3, [pc, #44]	; (8008204 <vPortSetupTimerInterrupt+0x38>)
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081dc:	4b0a      	ldr	r3, [pc, #40]	; (8008208 <vPortSetupTimerInterrupt+0x3c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a0a      	ldr	r2, [pc, #40]	; (800820c <vPortSetupTimerInterrupt+0x40>)
 80081e2:	fba2 2303 	umull	r2, r3, r2, r3
 80081e6:	099b      	lsrs	r3, r3, #6
 80081e8:	4a09      	ldr	r2, [pc, #36]	; (8008210 <vPortSetupTimerInterrupt+0x44>)
 80081ea:	3b01      	subs	r3, #1
 80081ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081ee:	4b04      	ldr	r3, [pc, #16]	; (8008200 <vPortSetupTimerInterrupt+0x34>)
 80081f0:	2207      	movs	r2, #7
 80081f2:	601a      	str	r2, [r3, #0]
}
 80081f4:	bf00      	nop
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	e000e010 	.word	0xe000e010
 8008204:	e000e018 	.word	0xe000e018
 8008208:	20000050 	.word	0x20000050
 800820c:	10624dd3 	.word	0x10624dd3
 8008210:	e000e014 	.word	0xe000e014

08008214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008214:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008224 <vPortEnableVFP+0x10>
 8008218:	6801      	ldr	r1, [r0, #0]
 800821a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800821e:	6001      	str	r1, [r0, #0]
 8008220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008222:	bf00      	nop
 8008224:	e000ed88 	.word	0xe000ed88

08008228 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800822e:	f3ef 8305 	mrs	r3, IPSR
 8008232:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b0f      	cmp	r3, #15
 8008238:	d914      	bls.n	8008264 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800823a:	4a17      	ldr	r2, [pc, #92]	; (8008298 <vPortValidateInterruptPriority+0x70>)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4413      	add	r3, r2
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008244:	4b15      	ldr	r3, [pc, #84]	; (800829c <vPortValidateInterruptPriority+0x74>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	7afa      	ldrb	r2, [r7, #11]
 800824a:	429a      	cmp	r2, r3
 800824c:	d20a      	bcs.n	8008264 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	607b      	str	r3, [r7, #4]
}
 8008260:	bf00      	nop
 8008262:	e7fe      	b.n	8008262 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008264:	4b0e      	ldr	r3, [pc, #56]	; (80082a0 <vPortValidateInterruptPriority+0x78>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800826c:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <vPortValidateInterruptPriority+0x7c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	429a      	cmp	r2, r3
 8008272:	d90a      	bls.n	800828a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	603b      	str	r3, [r7, #0]
}
 8008286:	bf00      	nop
 8008288:	e7fe      	b.n	8008288 <vPortValidateInterruptPriority+0x60>
	}
 800828a:	bf00      	nop
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	e000e3f0 	.word	0xe000e3f0
 800829c:	200013ec 	.word	0x200013ec
 80082a0:	e000ed0c 	.word	0xe000ed0c
 80082a4:	200013f0 	.word	0x200013f0

080082a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	; 0x28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082b4:	f7fe fc82 	bl	8006bbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082b8:	4b5b      	ldr	r3, [pc, #364]	; (8008428 <pvPortMalloc+0x180>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d101      	bne.n	80082c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082c0:	f000 f920 	bl	8008504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082c4:	4b59      	ldr	r3, [pc, #356]	; (800842c <pvPortMalloc+0x184>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4013      	ands	r3, r2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f040 8093 	bne.w	80083f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d01d      	beq.n	8008314 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80082d8:	2208      	movs	r2, #8
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4413      	add	r3, r2
 80082de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d014      	beq.n	8008314 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f023 0307 	bic.w	r3, r3, #7
 80082f0:	3308      	adds	r3, #8
 80082f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00a      	beq.n	8008314 <pvPortMalloc+0x6c>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	617b      	str	r3, [r7, #20]
}
 8008310:	bf00      	nop
 8008312:	e7fe      	b.n	8008312 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d06e      	beq.n	80083f8 <pvPortMalloc+0x150>
 800831a:	4b45      	ldr	r3, [pc, #276]	; (8008430 <pvPortMalloc+0x188>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	429a      	cmp	r2, r3
 8008322:	d869      	bhi.n	80083f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008324:	4b43      	ldr	r3, [pc, #268]	; (8008434 <pvPortMalloc+0x18c>)
 8008326:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008328:	4b42      	ldr	r3, [pc, #264]	; (8008434 <pvPortMalloc+0x18c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800832e:	e004      	b.n	800833a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	429a      	cmp	r2, r3
 8008342:	d903      	bls.n	800834c <pvPortMalloc+0xa4>
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1f1      	bne.n	8008330 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800834c:	4b36      	ldr	r3, [pc, #216]	; (8008428 <pvPortMalloc+0x180>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008352:	429a      	cmp	r2, r3
 8008354:	d050      	beq.n	80083f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2208      	movs	r2, #8
 800835c:	4413      	add	r3, r2
 800835e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	1ad2      	subs	r2, r2, r3
 8008370:	2308      	movs	r3, #8
 8008372:	005b      	lsls	r3, r3, #1
 8008374:	429a      	cmp	r2, r3
 8008376:	d91f      	bls.n	80083b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4413      	add	r3, r2
 800837e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <pvPortMalloc+0xf8>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	613b      	str	r3, [r7, #16]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	1ad2      	subs	r2, r2, r3
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083b2:	69b8      	ldr	r0, [r7, #24]
 80083b4:	f000 f908 	bl	80085c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083b8:	4b1d      	ldr	r3, [pc, #116]	; (8008430 <pvPortMalloc+0x188>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	4a1b      	ldr	r2, [pc, #108]	; (8008430 <pvPortMalloc+0x188>)
 80083c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083c6:	4b1a      	ldr	r3, [pc, #104]	; (8008430 <pvPortMalloc+0x188>)
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	4b1b      	ldr	r3, [pc, #108]	; (8008438 <pvPortMalloc+0x190>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d203      	bcs.n	80083da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083d2:	4b17      	ldr	r3, [pc, #92]	; (8008430 <pvPortMalloc+0x188>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a18      	ldr	r2, [pc, #96]	; (8008438 <pvPortMalloc+0x190>)
 80083d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	4b13      	ldr	r3, [pc, #76]	; (800842c <pvPortMalloc+0x184>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	431a      	orrs	r2, r3
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083ee:	4b13      	ldr	r3, [pc, #76]	; (800843c <pvPortMalloc+0x194>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3301      	adds	r3, #1
 80083f4:	4a11      	ldr	r2, [pc, #68]	; (800843c <pvPortMalloc+0x194>)
 80083f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083f8:	f7fe fbee 	bl	8006bd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <pvPortMalloc+0x174>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	60fb      	str	r3, [r7, #12]
}
 8008418:	bf00      	nop
 800841a:	e7fe      	b.n	800841a <pvPortMalloc+0x172>
	return pvReturn;
 800841c:	69fb      	ldr	r3, [r7, #28]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3728      	adds	r7, #40	; 0x28
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20006dd4 	.word	0x20006dd4
 800842c:	20006de8 	.word	0x20006de8
 8008430:	20006dd8 	.word	0x20006dd8
 8008434:	20006dcc 	.word	0x20006dcc
 8008438:	20006ddc 	.word	0x20006ddc
 800843c:	20006de0 	.word	0x20006de0

08008440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d04d      	beq.n	80084ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008452:	2308      	movs	r3, #8
 8008454:	425b      	negs	r3, r3
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	4413      	add	r3, r2
 800845a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	4b24      	ldr	r3, [pc, #144]	; (80084f8 <vPortFree+0xb8>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4013      	ands	r3, r2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10a      	bne.n	8008484 <vPortFree+0x44>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	60fb      	str	r3, [r7, #12]
}
 8008480:	bf00      	nop
 8008482:	e7fe      	b.n	8008482 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00a      	beq.n	80084a2 <vPortFree+0x62>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	60bb      	str	r3, [r7, #8]
}
 800849e:	bf00      	nop
 80084a0:	e7fe      	b.n	80084a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	4b14      	ldr	r3, [pc, #80]	; (80084f8 <vPortFree+0xb8>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4013      	ands	r3, r2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d01e      	beq.n	80084ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d11a      	bne.n	80084ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	4b0e      	ldr	r3, [pc, #56]	; (80084f8 <vPortFree+0xb8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	43db      	mvns	r3, r3
 80084c2:	401a      	ands	r2, r3
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084c8:	f7fe fb78 	bl	8006bbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	4b0a      	ldr	r3, [pc, #40]	; (80084fc <vPortFree+0xbc>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4413      	add	r3, r2
 80084d6:	4a09      	ldr	r2, [pc, #36]	; (80084fc <vPortFree+0xbc>)
 80084d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084da:	6938      	ldr	r0, [r7, #16]
 80084dc:	f000 f874 	bl	80085c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084e0:	4b07      	ldr	r3, [pc, #28]	; (8008500 <vPortFree+0xc0>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3301      	adds	r3, #1
 80084e6:	4a06      	ldr	r2, [pc, #24]	; (8008500 <vPortFree+0xc0>)
 80084e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084ea:	f7fe fb75 	bl	8006bd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084ee:	bf00      	nop
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20006de8 	.word	0x20006de8
 80084fc:	20006dd8 	.word	0x20006dd8
 8008500:	20006de4 	.word	0x20006de4

08008504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800850a:	f645 13d8 	movw	r3, #23000	; 0x59d8
 800850e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008510:	4b27      	ldr	r3, [pc, #156]	; (80085b0 <prvHeapInit+0xac>)
 8008512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00c      	beq.n	8008538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3307      	adds	r3, #7
 8008522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0307 	bic.w	r3, r3, #7
 800852a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	4a1f      	ldr	r2, [pc, #124]	; (80085b0 <prvHeapInit+0xac>)
 8008534:	4413      	add	r3, r2
 8008536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800853c:	4a1d      	ldr	r2, [pc, #116]	; (80085b4 <prvHeapInit+0xb0>)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008542:	4b1c      	ldr	r3, [pc, #112]	; (80085b4 <prvHeapInit+0xb0>)
 8008544:	2200      	movs	r2, #0
 8008546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	4413      	add	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008550:	2208      	movs	r2, #8
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	1a9b      	subs	r3, r3, r2
 8008556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 0307 	bic.w	r3, r3, #7
 800855e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4a15      	ldr	r2, [pc, #84]	; (80085b8 <prvHeapInit+0xb4>)
 8008564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008566:	4b14      	ldr	r3, [pc, #80]	; (80085b8 <prvHeapInit+0xb4>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2200      	movs	r2, #0
 800856c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800856e:	4b12      	ldr	r3, [pc, #72]	; (80085b8 <prvHeapInit+0xb4>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2200      	movs	r2, #0
 8008574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	1ad2      	subs	r2, r2, r3
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008584:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <prvHeapInit+0xb4>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	4a0a      	ldr	r2, [pc, #40]	; (80085bc <prvHeapInit+0xb8>)
 8008592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	4a09      	ldr	r2, [pc, #36]	; (80085c0 <prvHeapInit+0xbc>)
 800859a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800859c:	4b09      	ldr	r3, [pc, #36]	; (80085c4 <prvHeapInit+0xc0>)
 800859e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085a2:	601a      	str	r2, [r3, #0]
}
 80085a4:	bf00      	nop
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr
 80085b0:	200013f4 	.word	0x200013f4
 80085b4:	20006dcc 	.word	0x20006dcc
 80085b8:	20006dd4 	.word	0x20006dd4
 80085bc:	20006ddc 	.word	0x20006ddc
 80085c0:	20006dd8 	.word	0x20006dd8
 80085c4:	20006de8 	.word	0x20006de8

080085c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085d0:	4b28      	ldr	r3, [pc, #160]	; (8008674 <prvInsertBlockIntoFreeList+0xac>)
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	e002      	b.n	80085dc <prvInsertBlockIntoFreeList+0x14>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d8f7      	bhi.n	80085d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	4413      	add	r3, r2
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d108      	bne.n	800860a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	441a      	add	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	441a      	add	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d118      	bne.n	8008650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	4b15      	ldr	r3, [pc, #84]	; (8008678 <prvInsertBlockIntoFreeList+0xb0>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d00d      	beq.n	8008646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	441a      	add	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	e008      	b.n	8008658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008646:	4b0c      	ldr	r3, [pc, #48]	; (8008678 <prvInsertBlockIntoFreeList+0xb0>)
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e003      	b.n	8008658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	429a      	cmp	r2, r3
 800865e:	d002      	beq.n	8008666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008666:	bf00      	nop
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	20006dcc 	.word	0x20006dcc
 8008678:	20006dd4 	.word	0x20006dd4

0800867c <malloc>:
 800867c:	4b02      	ldr	r3, [pc, #8]	; (8008688 <malloc+0xc>)
 800867e:	4601      	mov	r1, r0
 8008680:	6818      	ldr	r0, [r3, #0]
 8008682:	f000 b823 	b.w	80086cc <_malloc_r>
 8008686:	bf00      	nop
 8008688:	200000ac 	.word	0x200000ac

0800868c <sbrk_aligned>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	4e0e      	ldr	r6, [pc, #56]	; (80086c8 <sbrk_aligned+0x3c>)
 8008690:	460c      	mov	r4, r1
 8008692:	6831      	ldr	r1, [r6, #0]
 8008694:	4605      	mov	r5, r0
 8008696:	b911      	cbnz	r1, 800869e <sbrk_aligned+0x12>
 8008698:	f000 f922 	bl	80088e0 <_sbrk_r>
 800869c:	6030      	str	r0, [r6, #0]
 800869e:	4621      	mov	r1, r4
 80086a0:	4628      	mov	r0, r5
 80086a2:	f000 f91d 	bl	80088e0 <_sbrk_r>
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	d00a      	beq.n	80086c0 <sbrk_aligned+0x34>
 80086aa:	1cc4      	adds	r4, r0, #3
 80086ac:	f024 0403 	bic.w	r4, r4, #3
 80086b0:	42a0      	cmp	r0, r4
 80086b2:	d007      	beq.n	80086c4 <sbrk_aligned+0x38>
 80086b4:	1a21      	subs	r1, r4, r0
 80086b6:	4628      	mov	r0, r5
 80086b8:	f000 f912 	bl	80088e0 <_sbrk_r>
 80086bc:	3001      	adds	r0, #1
 80086be:	d101      	bne.n	80086c4 <sbrk_aligned+0x38>
 80086c0:	f04f 34ff 	mov.w	r4, #4294967295
 80086c4:	4620      	mov	r0, r4
 80086c6:	bd70      	pop	{r4, r5, r6, pc}
 80086c8:	20006df0 	.word	0x20006df0

080086cc <_malloc_r>:
 80086cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086d0:	1ccd      	adds	r5, r1, #3
 80086d2:	f025 0503 	bic.w	r5, r5, #3
 80086d6:	3508      	adds	r5, #8
 80086d8:	2d0c      	cmp	r5, #12
 80086da:	bf38      	it	cc
 80086dc:	250c      	movcc	r5, #12
 80086de:	2d00      	cmp	r5, #0
 80086e0:	4607      	mov	r7, r0
 80086e2:	db01      	blt.n	80086e8 <_malloc_r+0x1c>
 80086e4:	42a9      	cmp	r1, r5
 80086e6:	d905      	bls.n	80086f4 <_malloc_r+0x28>
 80086e8:	230c      	movs	r3, #12
 80086ea:	603b      	str	r3, [r7, #0]
 80086ec:	2600      	movs	r6, #0
 80086ee:	4630      	mov	r0, r6
 80086f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087c8 <_malloc_r+0xfc>
 80086f8:	f000 f868 	bl	80087cc <__malloc_lock>
 80086fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008700:	461c      	mov	r4, r3
 8008702:	bb5c      	cbnz	r4, 800875c <_malloc_r+0x90>
 8008704:	4629      	mov	r1, r5
 8008706:	4638      	mov	r0, r7
 8008708:	f7ff ffc0 	bl	800868c <sbrk_aligned>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	4604      	mov	r4, r0
 8008710:	d155      	bne.n	80087be <_malloc_r+0xf2>
 8008712:	f8d8 4000 	ldr.w	r4, [r8]
 8008716:	4626      	mov	r6, r4
 8008718:	2e00      	cmp	r6, #0
 800871a:	d145      	bne.n	80087a8 <_malloc_r+0xdc>
 800871c:	2c00      	cmp	r4, #0
 800871e:	d048      	beq.n	80087b2 <_malloc_r+0xe6>
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	4631      	mov	r1, r6
 8008724:	4638      	mov	r0, r7
 8008726:	eb04 0903 	add.w	r9, r4, r3
 800872a:	f000 f8d9 	bl	80088e0 <_sbrk_r>
 800872e:	4581      	cmp	r9, r0
 8008730:	d13f      	bne.n	80087b2 <_malloc_r+0xe6>
 8008732:	6821      	ldr	r1, [r4, #0]
 8008734:	1a6d      	subs	r5, r5, r1
 8008736:	4629      	mov	r1, r5
 8008738:	4638      	mov	r0, r7
 800873a:	f7ff ffa7 	bl	800868c <sbrk_aligned>
 800873e:	3001      	adds	r0, #1
 8008740:	d037      	beq.n	80087b2 <_malloc_r+0xe6>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	442b      	add	r3, r5
 8008746:	6023      	str	r3, [r4, #0]
 8008748:	f8d8 3000 	ldr.w	r3, [r8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d038      	beq.n	80087c2 <_malloc_r+0xf6>
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	42a2      	cmp	r2, r4
 8008754:	d12b      	bne.n	80087ae <_malloc_r+0xe2>
 8008756:	2200      	movs	r2, #0
 8008758:	605a      	str	r2, [r3, #4]
 800875a:	e00f      	b.n	800877c <_malloc_r+0xb0>
 800875c:	6822      	ldr	r2, [r4, #0]
 800875e:	1b52      	subs	r2, r2, r5
 8008760:	d41f      	bmi.n	80087a2 <_malloc_r+0xd6>
 8008762:	2a0b      	cmp	r2, #11
 8008764:	d917      	bls.n	8008796 <_malloc_r+0xca>
 8008766:	1961      	adds	r1, r4, r5
 8008768:	42a3      	cmp	r3, r4
 800876a:	6025      	str	r5, [r4, #0]
 800876c:	bf18      	it	ne
 800876e:	6059      	strne	r1, [r3, #4]
 8008770:	6863      	ldr	r3, [r4, #4]
 8008772:	bf08      	it	eq
 8008774:	f8c8 1000 	streq.w	r1, [r8]
 8008778:	5162      	str	r2, [r4, r5]
 800877a:	604b      	str	r3, [r1, #4]
 800877c:	4638      	mov	r0, r7
 800877e:	f104 060b 	add.w	r6, r4, #11
 8008782:	f000 f829 	bl	80087d8 <__malloc_unlock>
 8008786:	f026 0607 	bic.w	r6, r6, #7
 800878a:	1d23      	adds	r3, r4, #4
 800878c:	1af2      	subs	r2, r6, r3
 800878e:	d0ae      	beq.n	80086ee <_malloc_r+0x22>
 8008790:	1b9b      	subs	r3, r3, r6
 8008792:	50a3      	str	r3, [r4, r2]
 8008794:	e7ab      	b.n	80086ee <_malloc_r+0x22>
 8008796:	42a3      	cmp	r3, r4
 8008798:	6862      	ldr	r2, [r4, #4]
 800879a:	d1dd      	bne.n	8008758 <_malloc_r+0x8c>
 800879c:	f8c8 2000 	str.w	r2, [r8]
 80087a0:	e7ec      	b.n	800877c <_malloc_r+0xb0>
 80087a2:	4623      	mov	r3, r4
 80087a4:	6864      	ldr	r4, [r4, #4]
 80087a6:	e7ac      	b.n	8008702 <_malloc_r+0x36>
 80087a8:	4634      	mov	r4, r6
 80087aa:	6876      	ldr	r6, [r6, #4]
 80087ac:	e7b4      	b.n	8008718 <_malloc_r+0x4c>
 80087ae:	4613      	mov	r3, r2
 80087b0:	e7cc      	b.n	800874c <_malloc_r+0x80>
 80087b2:	230c      	movs	r3, #12
 80087b4:	603b      	str	r3, [r7, #0]
 80087b6:	4638      	mov	r0, r7
 80087b8:	f000 f80e 	bl	80087d8 <__malloc_unlock>
 80087bc:	e797      	b.n	80086ee <_malloc_r+0x22>
 80087be:	6025      	str	r5, [r4, #0]
 80087c0:	e7dc      	b.n	800877c <_malloc_r+0xb0>
 80087c2:	605b      	str	r3, [r3, #4]
 80087c4:	deff      	udf	#255	; 0xff
 80087c6:	bf00      	nop
 80087c8:	20006dec 	.word	0x20006dec

080087cc <__malloc_lock>:
 80087cc:	4801      	ldr	r0, [pc, #4]	; (80087d4 <__malloc_lock+0x8>)
 80087ce:	f000 b8c1 	b.w	8008954 <__retarget_lock_acquire_recursive>
 80087d2:	bf00      	nop
 80087d4:	20006f30 	.word	0x20006f30

080087d8 <__malloc_unlock>:
 80087d8:	4801      	ldr	r0, [pc, #4]	; (80087e0 <__malloc_unlock+0x8>)
 80087da:	f000 b8bc 	b.w	8008956 <__retarget_lock_release_recursive>
 80087de:	bf00      	nop
 80087e0:	20006f30 	.word	0x20006f30

080087e4 <siprintf>:
 80087e4:	b40e      	push	{r1, r2, r3}
 80087e6:	b500      	push	{lr}
 80087e8:	b09c      	sub	sp, #112	; 0x70
 80087ea:	ab1d      	add	r3, sp, #116	; 0x74
 80087ec:	9002      	str	r0, [sp, #8]
 80087ee:	9006      	str	r0, [sp, #24]
 80087f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087f4:	4809      	ldr	r0, [pc, #36]	; (800881c <siprintf+0x38>)
 80087f6:	9107      	str	r1, [sp, #28]
 80087f8:	9104      	str	r1, [sp, #16]
 80087fa:	4909      	ldr	r1, [pc, #36]	; (8008820 <siprintf+0x3c>)
 80087fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008800:	9105      	str	r1, [sp, #20]
 8008802:	6800      	ldr	r0, [r0, #0]
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	a902      	add	r1, sp, #8
 8008808:	f000 f95a 	bl	8008ac0 <_svfiprintf_r>
 800880c:	9b02      	ldr	r3, [sp, #8]
 800880e:	2200      	movs	r2, #0
 8008810:	701a      	strb	r2, [r3, #0]
 8008812:	b01c      	add	sp, #112	; 0x70
 8008814:	f85d eb04 	ldr.w	lr, [sp], #4
 8008818:	b003      	add	sp, #12
 800881a:	4770      	bx	lr
 800881c:	200000ac 	.word	0x200000ac
 8008820:	ffff0208 	.word	0xffff0208

08008824 <memset>:
 8008824:	4402      	add	r2, r0
 8008826:	4603      	mov	r3, r0
 8008828:	4293      	cmp	r3, r2
 800882a:	d100      	bne.n	800882e <memset+0xa>
 800882c:	4770      	bx	lr
 800882e:	f803 1b01 	strb.w	r1, [r3], #1
 8008832:	e7f9      	b.n	8008828 <memset+0x4>

08008834 <_reclaim_reent>:
 8008834:	4b29      	ldr	r3, [pc, #164]	; (80088dc <_reclaim_reent+0xa8>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4283      	cmp	r3, r0
 800883a:	b570      	push	{r4, r5, r6, lr}
 800883c:	4604      	mov	r4, r0
 800883e:	d04b      	beq.n	80088d8 <_reclaim_reent+0xa4>
 8008840:	69c3      	ldr	r3, [r0, #28]
 8008842:	b143      	cbz	r3, 8008856 <_reclaim_reent+0x22>
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d144      	bne.n	80088d4 <_reclaim_reent+0xa0>
 800884a:	69e3      	ldr	r3, [r4, #28]
 800884c:	6819      	ldr	r1, [r3, #0]
 800884e:	b111      	cbz	r1, 8008856 <_reclaim_reent+0x22>
 8008850:	4620      	mov	r0, r4
 8008852:	f000 f88f 	bl	8008974 <_free_r>
 8008856:	6961      	ldr	r1, [r4, #20]
 8008858:	b111      	cbz	r1, 8008860 <_reclaim_reent+0x2c>
 800885a:	4620      	mov	r0, r4
 800885c:	f000 f88a 	bl	8008974 <_free_r>
 8008860:	69e1      	ldr	r1, [r4, #28]
 8008862:	b111      	cbz	r1, 800886a <_reclaim_reent+0x36>
 8008864:	4620      	mov	r0, r4
 8008866:	f000 f885 	bl	8008974 <_free_r>
 800886a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800886c:	b111      	cbz	r1, 8008874 <_reclaim_reent+0x40>
 800886e:	4620      	mov	r0, r4
 8008870:	f000 f880 	bl	8008974 <_free_r>
 8008874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008876:	b111      	cbz	r1, 800887e <_reclaim_reent+0x4a>
 8008878:	4620      	mov	r0, r4
 800887a:	f000 f87b 	bl	8008974 <_free_r>
 800887e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008880:	b111      	cbz	r1, 8008888 <_reclaim_reent+0x54>
 8008882:	4620      	mov	r0, r4
 8008884:	f000 f876 	bl	8008974 <_free_r>
 8008888:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800888a:	b111      	cbz	r1, 8008892 <_reclaim_reent+0x5e>
 800888c:	4620      	mov	r0, r4
 800888e:	f000 f871 	bl	8008974 <_free_r>
 8008892:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008894:	b111      	cbz	r1, 800889c <_reclaim_reent+0x68>
 8008896:	4620      	mov	r0, r4
 8008898:	f000 f86c 	bl	8008974 <_free_r>
 800889c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800889e:	b111      	cbz	r1, 80088a6 <_reclaim_reent+0x72>
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 f867 	bl	8008974 <_free_r>
 80088a6:	6a23      	ldr	r3, [r4, #32]
 80088a8:	b1b3      	cbz	r3, 80088d8 <_reclaim_reent+0xa4>
 80088aa:	4620      	mov	r0, r4
 80088ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80088b0:	4718      	bx	r3
 80088b2:	5949      	ldr	r1, [r1, r5]
 80088b4:	b941      	cbnz	r1, 80088c8 <_reclaim_reent+0x94>
 80088b6:	3504      	adds	r5, #4
 80088b8:	69e3      	ldr	r3, [r4, #28]
 80088ba:	2d80      	cmp	r5, #128	; 0x80
 80088bc:	68d9      	ldr	r1, [r3, #12]
 80088be:	d1f8      	bne.n	80088b2 <_reclaim_reent+0x7e>
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 f857 	bl	8008974 <_free_r>
 80088c6:	e7c0      	b.n	800884a <_reclaim_reent+0x16>
 80088c8:	680e      	ldr	r6, [r1, #0]
 80088ca:	4620      	mov	r0, r4
 80088cc:	f000 f852 	bl	8008974 <_free_r>
 80088d0:	4631      	mov	r1, r6
 80088d2:	e7ef      	b.n	80088b4 <_reclaim_reent+0x80>
 80088d4:	2500      	movs	r5, #0
 80088d6:	e7ef      	b.n	80088b8 <_reclaim_reent+0x84>
 80088d8:	bd70      	pop	{r4, r5, r6, pc}
 80088da:	bf00      	nop
 80088dc:	200000ac 	.word	0x200000ac

080088e0 <_sbrk_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	4d06      	ldr	r5, [pc, #24]	; (80088fc <_sbrk_r+0x1c>)
 80088e4:	2300      	movs	r3, #0
 80088e6:	4604      	mov	r4, r0
 80088e8:	4608      	mov	r0, r1
 80088ea:	602b      	str	r3, [r5, #0]
 80088ec:	f7f9 fa5e 	bl	8001dac <_sbrk>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d102      	bne.n	80088fa <_sbrk_r+0x1a>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	b103      	cbz	r3, 80088fa <_sbrk_r+0x1a>
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	20006f2c 	.word	0x20006f2c

08008900 <__errno>:
 8008900:	4b01      	ldr	r3, [pc, #4]	; (8008908 <__errno+0x8>)
 8008902:	6818      	ldr	r0, [r3, #0]
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	200000ac 	.word	0x200000ac

0800890c <__libc_init_array>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	4d0d      	ldr	r5, [pc, #52]	; (8008944 <__libc_init_array+0x38>)
 8008910:	4c0d      	ldr	r4, [pc, #52]	; (8008948 <__libc_init_array+0x3c>)
 8008912:	1b64      	subs	r4, r4, r5
 8008914:	10a4      	asrs	r4, r4, #2
 8008916:	2600      	movs	r6, #0
 8008918:	42a6      	cmp	r6, r4
 800891a:	d109      	bne.n	8008930 <__libc_init_array+0x24>
 800891c:	4d0b      	ldr	r5, [pc, #44]	; (800894c <__libc_init_array+0x40>)
 800891e:	4c0c      	ldr	r4, [pc, #48]	; (8008950 <__libc_init_array+0x44>)
 8008920:	f000 fbae 	bl	8009080 <_init>
 8008924:	1b64      	subs	r4, r4, r5
 8008926:	10a4      	asrs	r4, r4, #2
 8008928:	2600      	movs	r6, #0
 800892a:	42a6      	cmp	r6, r4
 800892c:	d105      	bne.n	800893a <__libc_init_array+0x2e>
 800892e:	bd70      	pop	{r4, r5, r6, pc}
 8008930:	f855 3b04 	ldr.w	r3, [r5], #4
 8008934:	4798      	blx	r3
 8008936:	3601      	adds	r6, #1
 8008938:	e7ee      	b.n	8008918 <__libc_init_array+0xc>
 800893a:	f855 3b04 	ldr.w	r3, [r5], #4
 800893e:	4798      	blx	r3
 8008940:	3601      	adds	r6, #1
 8008942:	e7f2      	b.n	800892a <__libc_init_array+0x1e>
 8008944:	08009524 	.word	0x08009524
 8008948:	08009524 	.word	0x08009524
 800894c:	08009524 	.word	0x08009524
 8008950:	08009528 	.word	0x08009528

08008954 <__retarget_lock_acquire_recursive>:
 8008954:	4770      	bx	lr

08008956 <__retarget_lock_release_recursive>:
 8008956:	4770      	bx	lr

08008958 <memcpy>:
 8008958:	440a      	add	r2, r1
 800895a:	4291      	cmp	r1, r2
 800895c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008960:	d100      	bne.n	8008964 <memcpy+0xc>
 8008962:	4770      	bx	lr
 8008964:	b510      	push	{r4, lr}
 8008966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800896a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800896e:	4291      	cmp	r1, r2
 8008970:	d1f9      	bne.n	8008966 <memcpy+0xe>
 8008972:	bd10      	pop	{r4, pc}

08008974 <_free_r>:
 8008974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008976:	2900      	cmp	r1, #0
 8008978:	d044      	beq.n	8008a04 <_free_r+0x90>
 800897a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800897e:	9001      	str	r0, [sp, #4]
 8008980:	2b00      	cmp	r3, #0
 8008982:	f1a1 0404 	sub.w	r4, r1, #4
 8008986:	bfb8      	it	lt
 8008988:	18e4      	addlt	r4, r4, r3
 800898a:	f7ff ff1f 	bl	80087cc <__malloc_lock>
 800898e:	4a1e      	ldr	r2, [pc, #120]	; (8008a08 <_free_r+0x94>)
 8008990:	9801      	ldr	r0, [sp, #4]
 8008992:	6813      	ldr	r3, [r2, #0]
 8008994:	b933      	cbnz	r3, 80089a4 <_free_r+0x30>
 8008996:	6063      	str	r3, [r4, #4]
 8008998:	6014      	str	r4, [r2, #0]
 800899a:	b003      	add	sp, #12
 800899c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089a0:	f7ff bf1a 	b.w	80087d8 <__malloc_unlock>
 80089a4:	42a3      	cmp	r3, r4
 80089a6:	d908      	bls.n	80089ba <_free_r+0x46>
 80089a8:	6825      	ldr	r5, [r4, #0]
 80089aa:	1961      	adds	r1, r4, r5
 80089ac:	428b      	cmp	r3, r1
 80089ae:	bf01      	itttt	eq
 80089b0:	6819      	ldreq	r1, [r3, #0]
 80089b2:	685b      	ldreq	r3, [r3, #4]
 80089b4:	1949      	addeq	r1, r1, r5
 80089b6:	6021      	streq	r1, [r4, #0]
 80089b8:	e7ed      	b.n	8008996 <_free_r+0x22>
 80089ba:	461a      	mov	r2, r3
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	b10b      	cbz	r3, 80089c4 <_free_r+0x50>
 80089c0:	42a3      	cmp	r3, r4
 80089c2:	d9fa      	bls.n	80089ba <_free_r+0x46>
 80089c4:	6811      	ldr	r1, [r2, #0]
 80089c6:	1855      	adds	r5, r2, r1
 80089c8:	42a5      	cmp	r5, r4
 80089ca:	d10b      	bne.n	80089e4 <_free_r+0x70>
 80089cc:	6824      	ldr	r4, [r4, #0]
 80089ce:	4421      	add	r1, r4
 80089d0:	1854      	adds	r4, r2, r1
 80089d2:	42a3      	cmp	r3, r4
 80089d4:	6011      	str	r1, [r2, #0]
 80089d6:	d1e0      	bne.n	800899a <_free_r+0x26>
 80089d8:	681c      	ldr	r4, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	6053      	str	r3, [r2, #4]
 80089de:	440c      	add	r4, r1
 80089e0:	6014      	str	r4, [r2, #0]
 80089e2:	e7da      	b.n	800899a <_free_r+0x26>
 80089e4:	d902      	bls.n	80089ec <_free_r+0x78>
 80089e6:	230c      	movs	r3, #12
 80089e8:	6003      	str	r3, [r0, #0]
 80089ea:	e7d6      	b.n	800899a <_free_r+0x26>
 80089ec:	6825      	ldr	r5, [r4, #0]
 80089ee:	1961      	adds	r1, r4, r5
 80089f0:	428b      	cmp	r3, r1
 80089f2:	bf04      	itt	eq
 80089f4:	6819      	ldreq	r1, [r3, #0]
 80089f6:	685b      	ldreq	r3, [r3, #4]
 80089f8:	6063      	str	r3, [r4, #4]
 80089fa:	bf04      	itt	eq
 80089fc:	1949      	addeq	r1, r1, r5
 80089fe:	6021      	streq	r1, [r4, #0]
 8008a00:	6054      	str	r4, [r2, #4]
 8008a02:	e7ca      	b.n	800899a <_free_r+0x26>
 8008a04:	b003      	add	sp, #12
 8008a06:	bd30      	pop	{r4, r5, pc}
 8008a08:	20006dec 	.word	0x20006dec

08008a0c <__ssputs_r>:
 8008a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	688e      	ldr	r6, [r1, #8]
 8008a12:	461f      	mov	r7, r3
 8008a14:	42be      	cmp	r6, r7
 8008a16:	680b      	ldr	r3, [r1, #0]
 8008a18:	4682      	mov	sl, r0
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	4690      	mov	r8, r2
 8008a1e:	d82c      	bhi.n	8008a7a <__ssputs_r+0x6e>
 8008a20:	898a      	ldrh	r2, [r1, #12]
 8008a22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a26:	d026      	beq.n	8008a76 <__ssputs_r+0x6a>
 8008a28:	6965      	ldr	r5, [r4, #20]
 8008a2a:	6909      	ldr	r1, [r1, #16]
 8008a2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a30:	eba3 0901 	sub.w	r9, r3, r1
 8008a34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a38:	1c7b      	adds	r3, r7, #1
 8008a3a:	444b      	add	r3, r9
 8008a3c:	106d      	asrs	r5, r5, #1
 8008a3e:	429d      	cmp	r5, r3
 8008a40:	bf38      	it	cc
 8008a42:	461d      	movcc	r5, r3
 8008a44:	0553      	lsls	r3, r2, #21
 8008a46:	d527      	bpl.n	8008a98 <__ssputs_r+0x8c>
 8008a48:	4629      	mov	r1, r5
 8008a4a:	f7ff fe3f 	bl	80086cc <_malloc_r>
 8008a4e:	4606      	mov	r6, r0
 8008a50:	b360      	cbz	r0, 8008aac <__ssputs_r+0xa0>
 8008a52:	6921      	ldr	r1, [r4, #16]
 8008a54:	464a      	mov	r2, r9
 8008a56:	f7ff ff7f 	bl	8008958 <memcpy>
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a64:	81a3      	strh	r3, [r4, #12]
 8008a66:	6126      	str	r6, [r4, #16]
 8008a68:	6165      	str	r5, [r4, #20]
 8008a6a:	444e      	add	r6, r9
 8008a6c:	eba5 0509 	sub.w	r5, r5, r9
 8008a70:	6026      	str	r6, [r4, #0]
 8008a72:	60a5      	str	r5, [r4, #8]
 8008a74:	463e      	mov	r6, r7
 8008a76:	42be      	cmp	r6, r7
 8008a78:	d900      	bls.n	8008a7c <__ssputs_r+0x70>
 8008a7a:	463e      	mov	r6, r7
 8008a7c:	6820      	ldr	r0, [r4, #0]
 8008a7e:	4632      	mov	r2, r6
 8008a80:	4641      	mov	r1, r8
 8008a82:	f000 faab 	bl	8008fdc <memmove>
 8008a86:	68a3      	ldr	r3, [r4, #8]
 8008a88:	1b9b      	subs	r3, r3, r6
 8008a8a:	60a3      	str	r3, [r4, #8]
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	4433      	add	r3, r6
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	2000      	movs	r0, #0
 8008a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a98:	462a      	mov	r2, r5
 8008a9a:	f000 fab9 	bl	8009010 <_realloc_r>
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d1e0      	bne.n	8008a66 <__ssputs_r+0x5a>
 8008aa4:	6921      	ldr	r1, [r4, #16]
 8008aa6:	4650      	mov	r0, sl
 8008aa8:	f7ff ff64 	bl	8008974 <_free_r>
 8008aac:	230c      	movs	r3, #12
 8008aae:	f8ca 3000 	str.w	r3, [sl]
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ab8:	81a3      	strh	r3, [r4, #12]
 8008aba:	f04f 30ff 	mov.w	r0, #4294967295
 8008abe:	e7e9      	b.n	8008a94 <__ssputs_r+0x88>

08008ac0 <_svfiprintf_r>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	4698      	mov	r8, r3
 8008ac6:	898b      	ldrh	r3, [r1, #12]
 8008ac8:	061b      	lsls	r3, r3, #24
 8008aca:	b09d      	sub	sp, #116	; 0x74
 8008acc:	4607      	mov	r7, r0
 8008ace:	460d      	mov	r5, r1
 8008ad0:	4614      	mov	r4, r2
 8008ad2:	d50e      	bpl.n	8008af2 <_svfiprintf_r+0x32>
 8008ad4:	690b      	ldr	r3, [r1, #16]
 8008ad6:	b963      	cbnz	r3, 8008af2 <_svfiprintf_r+0x32>
 8008ad8:	2140      	movs	r1, #64	; 0x40
 8008ada:	f7ff fdf7 	bl	80086cc <_malloc_r>
 8008ade:	6028      	str	r0, [r5, #0]
 8008ae0:	6128      	str	r0, [r5, #16]
 8008ae2:	b920      	cbnz	r0, 8008aee <_svfiprintf_r+0x2e>
 8008ae4:	230c      	movs	r3, #12
 8008ae6:	603b      	str	r3, [r7, #0]
 8008ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aec:	e0d0      	b.n	8008c90 <_svfiprintf_r+0x1d0>
 8008aee:	2340      	movs	r3, #64	; 0x40
 8008af0:	616b      	str	r3, [r5, #20]
 8008af2:	2300      	movs	r3, #0
 8008af4:	9309      	str	r3, [sp, #36]	; 0x24
 8008af6:	2320      	movs	r3, #32
 8008af8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008afc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b00:	2330      	movs	r3, #48	; 0x30
 8008b02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ca8 <_svfiprintf_r+0x1e8>
 8008b06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b0a:	f04f 0901 	mov.w	r9, #1
 8008b0e:	4623      	mov	r3, r4
 8008b10:	469a      	mov	sl, r3
 8008b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b16:	b10a      	cbz	r2, 8008b1c <_svfiprintf_r+0x5c>
 8008b18:	2a25      	cmp	r2, #37	; 0x25
 8008b1a:	d1f9      	bne.n	8008b10 <_svfiprintf_r+0x50>
 8008b1c:	ebba 0b04 	subs.w	fp, sl, r4
 8008b20:	d00b      	beq.n	8008b3a <_svfiprintf_r+0x7a>
 8008b22:	465b      	mov	r3, fp
 8008b24:	4622      	mov	r2, r4
 8008b26:	4629      	mov	r1, r5
 8008b28:	4638      	mov	r0, r7
 8008b2a:	f7ff ff6f 	bl	8008a0c <__ssputs_r>
 8008b2e:	3001      	adds	r0, #1
 8008b30:	f000 80a9 	beq.w	8008c86 <_svfiprintf_r+0x1c6>
 8008b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b36:	445a      	add	r2, fp
 8008b38:	9209      	str	r2, [sp, #36]	; 0x24
 8008b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f000 80a1 	beq.w	8008c86 <_svfiprintf_r+0x1c6>
 8008b44:	2300      	movs	r3, #0
 8008b46:	f04f 32ff 	mov.w	r2, #4294967295
 8008b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b4e:	f10a 0a01 	add.w	sl, sl, #1
 8008b52:	9304      	str	r3, [sp, #16]
 8008b54:	9307      	str	r3, [sp, #28]
 8008b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8008b5c:	4654      	mov	r4, sl
 8008b5e:	2205      	movs	r2, #5
 8008b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b64:	4850      	ldr	r0, [pc, #320]	; (8008ca8 <_svfiprintf_r+0x1e8>)
 8008b66:	f7f7 fb3b 	bl	80001e0 <memchr>
 8008b6a:	9a04      	ldr	r2, [sp, #16]
 8008b6c:	b9d8      	cbnz	r0, 8008ba6 <_svfiprintf_r+0xe6>
 8008b6e:	06d0      	lsls	r0, r2, #27
 8008b70:	bf44      	itt	mi
 8008b72:	2320      	movmi	r3, #32
 8008b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b78:	0711      	lsls	r1, r2, #28
 8008b7a:	bf44      	itt	mi
 8008b7c:	232b      	movmi	r3, #43	; 0x2b
 8008b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b82:	f89a 3000 	ldrb.w	r3, [sl]
 8008b86:	2b2a      	cmp	r3, #42	; 0x2a
 8008b88:	d015      	beq.n	8008bb6 <_svfiprintf_r+0xf6>
 8008b8a:	9a07      	ldr	r2, [sp, #28]
 8008b8c:	4654      	mov	r4, sl
 8008b8e:	2000      	movs	r0, #0
 8008b90:	f04f 0c0a 	mov.w	ip, #10
 8008b94:	4621      	mov	r1, r4
 8008b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b9a:	3b30      	subs	r3, #48	; 0x30
 8008b9c:	2b09      	cmp	r3, #9
 8008b9e:	d94d      	bls.n	8008c3c <_svfiprintf_r+0x17c>
 8008ba0:	b1b0      	cbz	r0, 8008bd0 <_svfiprintf_r+0x110>
 8008ba2:	9207      	str	r2, [sp, #28]
 8008ba4:	e014      	b.n	8008bd0 <_svfiprintf_r+0x110>
 8008ba6:	eba0 0308 	sub.w	r3, r0, r8
 8008baa:	fa09 f303 	lsl.w	r3, r9, r3
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	9304      	str	r3, [sp, #16]
 8008bb2:	46a2      	mov	sl, r4
 8008bb4:	e7d2      	b.n	8008b5c <_svfiprintf_r+0x9c>
 8008bb6:	9b03      	ldr	r3, [sp, #12]
 8008bb8:	1d19      	adds	r1, r3, #4
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	9103      	str	r1, [sp, #12]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	bfbb      	ittet	lt
 8008bc2:	425b      	neglt	r3, r3
 8008bc4:	f042 0202 	orrlt.w	r2, r2, #2
 8008bc8:	9307      	strge	r3, [sp, #28]
 8008bca:	9307      	strlt	r3, [sp, #28]
 8008bcc:	bfb8      	it	lt
 8008bce:	9204      	strlt	r2, [sp, #16]
 8008bd0:	7823      	ldrb	r3, [r4, #0]
 8008bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8008bd4:	d10c      	bne.n	8008bf0 <_svfiprintf_r+0x130>
 8008bd6:	7863      	ldrb	r3, [r4, #1]
 8008bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8008bda:	d134      	bne.n	8008c46 <_svfiprintf_r+0x186>
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	1d1a      	adds	r2, r3, #4
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	9203      	str	r2, [sp, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	bfb8      	it	lt
 8008be8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bec:	3402      	adds	r4, #2
 8008bee:	9305      	str	r3, [sp, #20]
 8008bf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008cb8 <_svfiprintf_r+0x1f8>
 8008bf4:	7821      	ldrb	r1, [r4, #0]
 8008bf6:	2203      	movs	r2, #3
 8008bf8:	4650      	mov	r0, sl
 8008bfa:	f7f7 faf1 	bl	80001e0 <memchr>
 8008bfe:	b138      	cbz	r0, 8008c10 <_svfiprintf_r+0x150>
 8008c00:	9b04      	ldr	r3, [sp, #16]
 8008c02:	eba0 000a 	sub.w	r0, r0, sl
 8008c06:	2240      	movs	r2, #64	; 0x40
 8008c08:	4082      	lsls	r2, r0
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	3401      	adds	r4, #1
 8008c0e:	9304      	str	r3, [sp, #16]
 8008c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c14:	4825      	ldr	r0, [pc, #148]	; (8008cac <_svfiprintf_r+0x1ec>)
 8008c16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c1a:	2206      	movs	r2, #6
 8008c1c:	f7f7 fae0 	bl	80001e0 <memchr>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d038      	beq.n	8008c96 <_svfiprintf_r+0x1d6>
 8008c24:	4b22      	ldr	r3, [pc, #136]	; (8008cb0 <_svfiprintf_r+0x1f0>)
 8008c26:	bb1b      	cbnz	r3, 8008c70 <_svfiprintf_r+0x1b0>
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	3307      	adds	r3, #7
 8008c2c:	f023 0307 	bic.w	r3, r3, #7
 8008c30:	3308      	adds	r3, #8
 8008c32:	9303      	str	r3, [sp, #12]
 8008c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c36:	4433      	add	r3, r6
 8008c38:	9309      	str	r3, [sp, #36]	; 0x24
 8008c3a:	e768      	b.n	8008b0e <_svfiprintf_r+0x4e>
 8008c3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c40:	460c      	mov	r4, r1
 8008c42:	2001      	movs	r0, #1
 8008c44:	e7a6      	b.n	8008b94 <_svfiprintf_r+0xd4>
 8008c46:	2300      	movs	r3, #0
 8008c48:	3401      	adds	r4, #1
 8008c4a:	9305      	str	r3, [sp, #20]
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	f04f 0c0a 	mov.w	ip, #10
 8008c52:	4620      	mov	r0, r4
 8008c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c58:	3a30      	subs	r2, #48	; 0x30
 8008c5a:	2a09      	cmp	r2, #9
 8008c5c:	d903      	bls.n	8008c66 <_svfiprintf_r+0x1a6>
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d0c6      	beq.n	8008bf0 <_svfiprintf_r+0x130>
 8008c62:	9105      	str	r1, [sp, #20]
 8008c64:	e7c4      	b.n	8008bf0 <_svfiprintf_r+0x130>
 8008c66:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e7f0      	b.n	8008c52 <_svfiprintf_r+0x192>
 8008c70:	ab03      	add	r3, sp, #12
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	462a      	mov	r2, r5
 8008c76:	4b0f      	ldr	r3, [pc, #60]	; (8008cb4 <_svfiprintf_r+0x1f4>)
 8008c78:	a904      	add	r1, sp, #16
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	f3af 8000 	nop.w
 8008c80:	1c42      	adds	r2, r0, #1
 8008c82:	4606      	mov	r6, r0
 8008c84:	d1d6      	bne.n	8008c34 <_svfiprintf_r+0x174>
 8008c86:	89ab      	ldrh	r3, [r5, #12]
 8008c88:	065b      	lsls	r3, r3, #25
 8008c8a:	f53f af2d 	bmi.w	8008ae8 <_svfiprintf_r+0x28>
 8008c8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c90:	b01d      	add	sp, #116	; 0x74
 8008c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c96:	ab03      	add	r3, sp, #12
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	462a      	mov	r2, r5
 8008c9c:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <_svfiprintf_r+0x1f4>)
 8008c9e:	a904      	add	r1, sp, #16
 8008ca0:	4638      	mov	r0, r7
 8008ca2:	f000 f879 	bl	8008d98 <_printf_i>
 8008ca6:	e7eb      	b.n	8008c80 <_svfiprintf_r+0x1c0>
 8008ca8:	080094e8 	.word	0x080094e8
 8008cac:	080094f2 	.word	0x080094f2
 8008cb0:	00000000 	.word	0x00000000
 8008cb4:	08008a0d 	.word	0x08008a0d
 8008cb8:	080094ee 	.word	0x080094ee

08008cbc <_printf_common>:
 8008cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc0:	4616      	mov	r6, r2
 8008cc2:	4699      	mov	r9, r3
 8008cc4:	688a      	ldr	r2, [r1, #8]
 8008cc6:	690b      	ldr	r3, [r1, #16]
 8008cc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	bfb8      	it	lt
 8008cd0:	4613      	movlt	r3, r2
 8008cd2:	6033      	str	r3, [r6, #0]
 8008cd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cd8:	4607      	mov	r7, r0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	b10a      	cbz	r2, 8008ce2 <_printf_common+0x26>
 8008cde:	3301      	adds	r3, #1
 8008ce0:	6033      	str	r3, [r6, #0]
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	0699      	lsls	r1, r3, #26
 8008ce6:	bf42      	ittt	mi
 8008ce8:	6833      	ldrmi	r3, [r6, #0]
 8008cea:	3302      	addmi	r3, #2
 8008cec:	6033      	strmi	r3, [r6, #0]
 8008cee:	6825      	ldr	r5, [r4, #0]
 8008cf0:	f015 0506 	ands.w	r5, r5, #6
 8008cf4:	d106      	bne.n	8008d04 <_printf_common+0x48>
 8008cf6:	f104 0a19 	add.w	sl, r4, #25
 8008cfa:	68e3      	ldr	r3, [r4, #12]
 8008cfc:	6832      	ldr	r2, [r6, #0]
 8008cfe:	1a9b      	subs	r3, r3, r2
 8008d00:	42ab      	cmp	r3, r5
 8008d02:	dc26      	bgt.n	8008d52 <_printf_common+0x96>
 8008d04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d08:	1e13      	subs	r3, r2, #0
 8008d0a:	6822      	ldr	r2, [r4, #0]
 8008d0c:	bf18      	it	ne
 8008d0e:	2301      	movne	r3, #1
 8008d10:	0692      	lsls	r2, r2, #26
 8008d12:	d42b      	bmi.n	8008d6c <_printf_common+0xb0>
 8008d14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d18:	4649      	mov	r1, r9
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	47c0      	blx	r8
 8008d1e:	3001      	adds	r0, #1
 8008d20:	d01e      	beq.n	8008d60 <_printf_common+0xa4>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	6922      	ldr	r2, [r4, #16]
 8008d26:	f003 0306 	and.w	r3, r3, #6
 8008d2a:	2b04      	cmp	r3, #4
 8008d2c:	bf02      	ittt	eq
 8008d2e:	68e5      	ldreq	r5, [r4, #12]
 8008d30:	6833      	ldreq	r3, [r6, #0]
 8008d32:	1aed      	subeq	r5, r5, r3
 8008d34:	68a3      	ldr	r3, [r4, #8]
 8008d36:	bf0c      	ite	eq
 8008d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d3c:	2500      	movne	r5, #0
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	bfc4      	itt	gt
 8008d42:	1a9b      	subgt	r3, r3, r2
 8008d44:	18ed      	addgt	r5, r5, r3
 8008d46:	2600      	movs	r6, #0
 8008d48:	341a      	adds	r4, #26
 8008d4a:	42b5      	cmp	r5, r6
 8008d4c:	d11a      	bne.n	8008d84 <_printf_common+0xc8>
 8008d4e:	2000      	movs	r0, #0
 8008d50:	e008      	b.n	8008d64 <_printf_common+0xa8>
 8008d52:	2301      	movs	r3, #1
 8008d54:	4652      	mov	r2, sl
 8008d56:	4649      	mov	r1, r9
 8008d58:	4638      	mov	r0, r7
 8008d5a:	47c0      	blx	r8
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	d103      	bne.n	8008d68 <_printf_common+0xac>
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d68:	3501      	adds	r5, #1
 8008d6a:	e7c6      	b.n	8008cfa <_printf_common+0x3e>
 8008d6c:	18e1      	adds	r1, r4, r3
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	2030      	movs	r0, #48	; 0x30
 8008d72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d76:	4422      	add	r2, r4
 8008d78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d80:	3302      	adds	r3, #2
 8008d82:	e7c7      	b.n	8008d14 <_printf_common+0x58>
 8008d84:	2301      	movs	r3, #1
 8008d86:	4622      	mov	r2, r4
 8008d88:	4649      	mov	r1, r9
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	47c0      	blx	r8
 8008d8e:	3001      	adds	r0, #1
 8008d90:	d0e6      	beq.n	8008d60 <_printf_common+0xa4>
 8008d92:	3601      	adds	r6, #1
 8008d94:	e7d9      	b.n	8008d4a <_printf_common+0x8e>
	...

08008d98 <_printf_i>:
 8008d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9c:	7e0f      	ldrb	r7, [r1, #24]
 8008d9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008da0:	2f78      	cmp	r7, #120	; 0x78
 8008da2:	4691      	mov	r9, r2
 8008da4:	4680      	mov	r8, r0
 8008da6:	460c      	mov	r4, r1
 8008da8:	469a      	mov	sl, r3
 8008daa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008dae:	d807      	bhi.n	8008dc0 <_printf_i+0x28>
 8008db0:	2f62      	cmp	r7, #98	; 0x62
 8008db2:	d80a      	bhi.n	8008dca <_printf_i+0x32>
 8008db4:	2f00      	cmp	r7, #0
 8008db6:	f000 80d4 	beq.w	8008f62 <_printf_i+0x1ca>
 8008dba:	2f58      	cmp	r7, #88	; 0x58
 8008dbc:	f000 80c0 	beq.w	8008f40 <_printf_i+0x1a8>
 8008dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dc8:	e03a      	b.n	8008e40 <_printf_i+0xa8>
 8008dca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008dce:	2b15      	cmp	r3, #21
 8008dd0:	d8f6      	bhi.n	8008dc0 <_printf_i+0x28>
 8008dd2:	a101      	add	r1, pc, #4	; (adr r1, 8008dd8 <_printf_i+0x40>)
 8008dd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dd8:	08008e31 	.word	0x08008e31
 8008ddc:	08008e45 	.word	0x08008e45
 8008de0:	08008dc1 	.word	0x08008dc1
 8008de4:	08008dc1 	.word	0x08008dc1
 8008de8:	08008dc1 	.word	0x08008dc1
 8008dec:	08008dc1 	.word	0x08008dc1
 8008df0:	08008e45 	.word	0x08008e45
 8008df4:	08008dc1 	.word	0x08008dc1
 8008df8:	08008dc1 	.word	0x08008dc1
 8008dfc:	08008dc1 	.word	0x08008dc1
 8008e00:	08008dc1 	.word	0x08008dc1
 8008e04:	08008f49 	.word	0x08008f49
 8008e08:	08008e71 	.word	0x08008e71
 8008e0c:	08008f03 	.word	0x08008f03
 8008e10:	08008dc1 	.word	0x08008dc1
 8008e14:	08008dc1 	.word	0x08008dc1
 8008e18:	08008f6b 	.word	0x08008f6b
 8008e1c:	08008dc1 	.word	0x08008dc1
 8008e20:	08008e71 	.word	0x08008e71
 8008e24:	08008dc1 	.word	0x08008dc1
 8008e28:	08008dc1 	.word	0x08008dc1
 8008e2c:	08008f0b 	.word	0x08008f0b
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	1d1a      	adds	r2, r3, #4
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	602a      	str	r2, [r5, #0]
 8008e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e40:	2301      	movs	r3, #1
 8008e42:	e09f      	b.n	8008f84 <_printf_i+0x1ec>
 8008e44:	6820      	ldr	r0, [r4, #0]
 8008e46:	682b      	ldr	r3, [r5, #0]
 8008e48:	0607      	lsls	r7, r0, #24
 8008e4a:	f103 0104 	add.w	r1, r3, #4
 8008e4e:	6029      	str	r1, [r5, #0]
 8008e50:	d501      	bpl.n	8008e56 <_printf_i+0xbe>
 8008e52:	681e      	ldr	r6, [r3, #0]
 8008e54:	e003      	b.n	8008e5e <_printf_i+0xc6>
 8008e56:	0646      	lsls	r6, r0, #25
 8008e58:	d5fb      	bpl.n	8008e52 <_printf_i+0xba>
 8008e5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008e5e:	2e00      	cmp	r6, #0
 8008e60:	da03      	bge.n	8008e6a <_printf_i+0xd2>
 8008e62:	232d      	movs	r3, #45	; 0x2d
 8008e64:	4276      	negs	r6, r6
 8008e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e6a:	485a      	ldr	r0, [pc, #360]	; (8008fd4 <_printf_i+0x23c>)
 8008e6c:	230a      	movs	r3, #10
 8008e6e:	e012      	b.n	8008e96 <_printf_i+0xfe>
 8008e70:	682b      	ldr	r3, [r5, #0]
 8008e72:	6820      	ldr	r0, [r4, #0]
 8008e74:	1d19      	adds	r1, r3, #4
 8008e76:	6029      	str	r1, [r5, #0]
 8008e78:	0605      	lsls	r5, r0, #24
 8008e7a:	d501      	bpl.n	8008e80 <_printf_i+0xe8>
 8008e7c:	681e      	ldr	r6, [r3, #0]
 8008e7e:	e002      	b.n	8008e86 <_printf_i+0xee>
 8008e80:	0641      	lsls	r1, r0, #25
 8008e82:	d5fb      	bpl.n	8008e7c <_printf_i+0xe4>
 8008e84:	881e      	ldrh	r6, [r3, #0]
 8008e86:	4853      	ldr	r0, [pc, #332]	; (8008fd4 <_printf_i+0x23c>)
 8008e88:	2f6f      	cmp	r7, #111	; 0x6f
 8008e8a:	bf0c      	ite	eq
 8008e8c:	2308      	moveq	r3, #8
 8008e8e:	230a      	movne	r3, #10
 8008e90:	2100      	movs	r1, #0
 8008e92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e96:	6865      	ldr	r5, [r4, #4]
 8008e98:	60a5      	str	r5, [r4, #8]
 8008e9a:	2d00      	cmp	r5, #0
 8008e9c:	bfa2      	ittt	ge
 8008e9e:	6821      	ldrge	r1, [r4, #0]
 8008ea0:	f021 0104 	bicge.w	r1, r1, #4
 8008ea4:	6021      	strge	r1, [r4, #0]
 8008ea6:	b90e      	cbnz	r6, 8008eac <_printf_i+0x114>
 8008ea8:	2d00      	cmp	r5, #0
 8008eaa:	d04b      	beq.n	8008f44 <_printf_i+0x1ac>
 8008eac:	4615      	mov	r5, r2
 8008eae:	fbb6 f1f3 	udiv	r1, r6, r3
 8008eb2:	fb03 6711 	mls	r7, r3, r1, r6
 8008eb6:	5dc7      	ldrb	r7, [r0, r7]
 8008eb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ebc:	4637      	mov	r7, r6
 8008ebe:	42bb      	cmp	r3, r7
 8008ec0:	460e      	mov	r6, r1
 8008ec2:	d9f4      	bls.n	8008eae <_printf_i+0x116>
 8008ec4:	2b08      	cmp	r3, #8
 8008ec6:	d10b      	bne.n	8008ee0 <_printf_i+0x148>
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	07de      	lsls	r6, r3, #31
 8008ecc:	d508      	bpl.n	8008ee0 <_printf_i+0x148>
 8008ece:	6923      	ldr	r3, [r4, #16]
 8008ed0:	6861      	ldr	r1, [r4, #4]
 8008ed2:	4299      	cmp	r1, r3
 8008ed4:	bfde      	ittt	le
 8008ed6:	2330      	movle	r3, #48	; 0x30
 8008ed8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008edc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ee0:	1b52      	subs	r2, r2, r5
 8008ee2:	6122      	str	r2, [r4, #16]
 8008ee4:	f8cd a000 	str.w	sl, [sp]
 8008ee8:	464b      	mov	r3, r9
 8008eea:	aa03      	add	r2, sp, #12
 8008eec:	4621      	mov	r1, r4
 8008eee:	4640      	mov	r0, r8
 8008ef0:	f7ff fee4 	bl	8008cbc <_printf_common>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d14a      	bne.n	8008f8e <_printf_i+0x1f6>
 8008ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8008efc:	b004      	add	sp, #16
 8008efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	f043 0320 	orr.w	r3, r3, #32
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	4833      	ldr	r0, [pc, #204]	; (8008fd8 <_printf_i+0x240>)
 8008f0c:	2778      	movs	r7, #120	; 0x78
 8008f0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	6829      	ldr	r1, [r5, #0]
 8008f16:	061f      	lsls	r7, r3, #24
 8008f18:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f1c:	d402      	bmi.n	8008f24 <_printf_i+0x18c>
 8008f1e:	065f      	lsls	r7, r3, #25
 8008f20:	bf48      	it	mi
 8008f22:	b2b6      	uxthmi	r6, r6
 8008f24:	07df      	lsls	r7, r3, #31
 8008f26:	bf48      	it	mi
 8008f28:	f043 0320 	orrmi.w	r3, r3, #32
 8008f2c:	6029      	str	r1, [r5, #0]
 8008f2e:	bf48      	it	mi
 8008f30:	6023      	strmi	r3, [r4, #0]
 8008f32:	b91e      	cbnz	r6, 8008f3c <_printf_i+0x1a4>
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	f023 0320 	bic.w	r3, r3, #32
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	2310      	movs	r3, #16
 8008f3e:	e7a7      	b.n	8008e90 <_printf_i+0xf8>
 8008f40:	4824      	ldr	r0, [pc, #144]	; (8008fd4 <_printf_i+0x23c>)
 8008f42:	e7e4      	b.n	8008f0e <_printf_i+0x176>
 8008f44:	4615      	mov	r5, r2
 8008f46:	e7bd      	b.n	8008ec4 <_printf_i+0x12c>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	6826      	ldr	r6, [r4, #0]
 8008f4c:	6961      	ldr	r1, [r4, #20]
 8008f4e:	1d18      	adds	r0, r3, #4
 8008f50:	6028      	str	r0, [r5, #0]
 8008f52:	0635      	lsls	r5, r6, #24
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	d501      	bpl.n	8008f5c <_printf_i+0x1c4>
 8008f58:	6019      	str	r1, [r3, #0]
 8008f5a:	e002      	b.n	8008f62 <_printf_i+0x1ca>
 8008f5c:	0670      	lsls	r0, r6, #25
 8008f5e:	d5fb      	bpl.n	8008f58 <_printf_i+0x1c0>
 8008f60:	8019      	strh	r1, [r3, #0]
 8008f62:	2300      	movs	r3, #0
 8008f64:	6123      	str	r3, [r4, #16]
 8008f66:	4615      	mov	r5, r2
 8008f68:	e7bc      	b.n	8008ee4 <_printf_i+0x14c>
 8008f6a:	682b      	ldr	r3, [r5, #0]
 8008f6c:	1d1a      	adds	r2, r3, #4
 8008f6e:	602a      	str	r2, [r5, #0]
 8008f70:	681d      	ldr	r5, [r3, #0]
 8008f72:	6862      	ldr	r2, [r4, #4]
 8008f74:	2100      	movs	r1, #0
 8008f76:	4628      	mov	r0, r5
 8008f78:	f7f7 f932 	bl	80001e0 <memchr>
 8008f7c:	b108      	cbz	r0, 8008f82 <_printf_i+0x1ea>
 8008f7e:	1b40      	subs	r0, r0, r5
 8008f80:	6060      	str	r0, [r4, #4]
 8008f82:	6863      	ldr	r3, [r4, #4]
 8008f84:	6123      	str	r3, [r4, #16]
 8008f86:	2300      	movs	r3, #0
 8008f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f8c:	e7aa      	b.n	8008ee4 <_printf_i+0x14c>
 8008f8e:	6923      	ldr	r3, [r4, #16]
 8008f90:	462a      	mov	r2, r5
 8008f92:	4649      	mov	r1, r9
 8008f94:	4640      	mov	r0, r8
 8008f96:	47d0      	blx	sl
 8008f98:	3001      	adds	r0, #1
 8008f9a:	d0ad      	beq.n	8008ef8 <_printf_i+0x160>
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	079b      	lsls	r3, r3, #30
 8008fa0:	d413      	bmi.n	8008fca <_printf_i+0x232>
 8008fa2:	68e0      	ldr	r0, [r4, #12]
 8008fa4:	9b03      	ldr	r3, [sp, #12]
 8008fa6:	4298      	cmp	r0, r3
 8008fa8:	bfb8      	it	lt
 8008faa:	4618      	movlt	r0, r3
 8008fac:	e7a6      	b.n	8008efc <_printf_i+0x164>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	4632      	mov	r2, r6
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	4640      	mov	r0, r8
 8008fb6:	47d0      	blx	sl
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d09d      	beq.n	8008ef8 <_printf_i+0x160>
 8008fbc:	3501      	adds	r5, #1
 8008fbe:	68e3      	ldr	r3, [r4, #12]
 8008fc0:	9903      	ldr	r1, [sp, #12]
 8008fc2:	1a5b      	subs	r3, r3, r1
 8008fc4:	42ab      	cmp	r3, r5
 8008fc6:	dcf2      	bgt.n	8008fae <_printf_i+0x216>
 8008fc8:	e7eb      	b.n	8008fa2 <_printf_i+0x20a>
 8008fca:	2500      	movs	r5, #0
 8008fcc:	f104 0619 	add.w	r6, r4, #25
 8008fd0:	e7f5      	b.n	8008fbe <_printf_i+0x226>
 8008fd2:	bf00      	nop
 8008fd4:	080094f9 	.word	0x080094f9
 8008fd8:	0800950a 	.word	0x0800950a

08008fdc <memmove>:
 8008fdc:	4288      	cmp	r0, r1
 8008fde:	b510      	push	{r4, lr}
 8008fe0:	eb01 0402 	add.w	r4, r1, r2
 8008fe4:	d902      	bls.n	8008fec <memmove+0x10>
 8008fe6:	4284      	cmp	r4, r0
 8008fe8:	4623      	mov	r3, r4
 8008fea:	d807      	bhi.n	8008ffc <memmove+0x20>
 8008fec:	1e43      	subs	r3, r0, #1
 8008fee:	42a1      	cmp	r1, r4
 8008ff0:	d008      	beq.n	8009004 <memmove+0x28>
 8008ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ffa:	e7f8      	b.n	8008fee <memmove+0x12>
 8008ffc:	4402      	add	r2, r0
 8008ffe:	4601      	mov	r1, r0
 8009000:	428a      	cmp	r2, r1
 8009002:	d100      	bne.n	8009006 <memmove+0x2a>
 8009004:	bd10      	pop	{r4, pc}
 8009006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800900a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800900e:	e7f7      	b.n	8009000 <memmove+0x24>

08009010 <_realloc_r>:
 8009010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009014:	4680      	mov	r8, r0
 8009016:	4614      	mov	r4, r2
 8009018:	460e      	mov	r6, r1
 800901a:	b921      	cbnz	r1, 8009026 <_realloc_r+0x16>
 800901c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009020:	4611      	mov	r1, r2
 8009022:	f7ff bb53 	b.w	80086cc <_malloc_r>
 8009026:	b92a      	cbnz	r2, 8009034 <_realloc_r+0x24>
 8009028:	f7ff fca4 	bl	8008974 <_free_r>
 800902c:	4625      	mov	r5, r4
 800902e:	4628      	mov	r0, r5
 8009030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009034:	f000 f81b 	bl	800906e <_malloc_usable_size_r>
 8009038:	4284      	cmp	r4, r0
 800903a:	4607      	mov	r7, r0
 800903c:	d802      	bhi.n	8009044 <_realloc_r+0x34>
 800903e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009042:	d812      	bhi.n	800906a <_realloc_r+0x5a>
 8009044:	4621      	mov	r1, r4
 8009046:	4640      	mov	r0, r8
 8009048:	f7ff fb40 	bl	80086cc <_malloc_r>
 800904c:	4605      	mov	r5, r0
 800904e:	2800      	cmp	r0, #0
 8009050:	d0ed      	beq.n	800902e <_realloc_r+0x1e>
 8009052:	42bc      	cmp	r4, r7
 8009054:	4622      	mov	r2, r4
 8009056:	4631      	mov	r1, r6
 8009058:	bf28      	it	cs
 800905a:	463a      	movcs	r2, r7
 800905c:	f7ff fc7c 	bl	8008958 <memcpy>
 8009060:	4631      	mov	r1, r6
 8009062:	4640      	mov	r0, r8
 8009064:	f7ff fc86 	bl	8008974 <_free_r>
 8009068:	e7e1      	b.n	800902e <_realloc_r+0x1e>
 800906a:	4635      	mov	r5, r6
 800906c:	e7df      	b.n	800902e <_realloc_r+0x1e>

0800906e <_malloc_usable_size_r>:
 800906e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009072:	1f18      	subs	r0, r3, #4
 8009074:	2b00      	cmp	r3, #0
 8009076:	bfbc      	itt	lt
 8009078:	580b      	ldrlt	r3, [r1, r0]
 800907a:	18c0      	addlt	r0, r0, r3
 800907c:	4770      	bx	lr
	...

08009080 <_init>:
 8009080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009082:	bf00      	nop
 8009084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009086:	bc08      	pop	{r3}
 8009088:	469e      	mov	lr, r3
 800908a:	4770      	bx	lr

0800908c <_fini>:
 800908c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908e:	bf00      	nop
 8009090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009092:	bc08      	pop	{r3}
 8009094:	469e      	mov	lr, r3
 8009096:	4770      	bx	lr
