
Project3-Bank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08009d1c  08009d1c  00019d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a148  0800a148  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a148  0800a148  0001a148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a150  0800a150  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a150  0800a150  0001a150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a154  0800a154  0001a154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000071ec  20000078  0800a1d0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007264  0800a1d0  00027264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb60  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d87  00000000  00000000  0003bc4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001800  00000000  00000000  0003f9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001293  00000000  00000000  000411d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296c8  00000000  00000000  0004246b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2fe  00000000  00000000  0006bb33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdaac  00000000  00000000  00087e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006984  00000000  00000000  001858e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0018c264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d04 	.word	0x08009d04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08009d04 	.word	0x08009d04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <init_breaker>:
uint32_t* random2;
uint32_t* random3;



void init_breaker(void){
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	b09d      	sub	sp, #116	; 0x74
 8000580:	af04      	add	r7, sp, #16

	//What time the variable for going on break will be assigned
	breaker.start_break[0] = 0;
 8000582:	4bbc      	ldr	r3, [pc, #752]	; (8000874 <init_breaker+0x2f8>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
	breaker.start_break[1] = 0;
 8000588:	4bba      	ldr	r3, [pc, #744]	; (8000874 <init_breaker+0x2f8>)
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random1);
 800058e:	4bba      	ldr	r3, [pc, #744]	; (8000878 <init_breaker+0x2fc>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4619      	mov	r1, r3
 8000594:	48b9      	ldr	r0, [pc, #740]	; (800087c <init_breaker+0x300>)
 8000596:	f004 fba8 	bl	8004cea <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock1 = { .hour = 9, .minute = (30 + (*random1 - 30) % 31), .second = (*random1 % 60)};
 800059a:	2309      	movs	r3, #9
 800059c:	657b      	str	r3, [r7, #84]	; 0x54
 800059e:	4bb6      	ldr	r3, [pc, #728]	; (8000878 <init_breaker+0x2fc>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f1a3 011e 	sub.w	r1, r3, #30
 80005a8:	4bb5      	ldr	r3, [pc, #724]	; (8000880 <init_breaker+0x304>)
 80005aa:	fba3 2301 	umull	r2, r3, r3, r1
 80005ae:	1aca      	subs	r2, r1, r3
 80005b0:	0852      	lsrs	r2, r2, #1
 80005b2:	4413      	add	r3, r2
 80005b4:	091a      	lsrs	r2, r3, #4
 80005b6:	4613      	mov	r3, r2
 80005b8:	015b      	lsls	r3, r3, #5
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	1aca      	subs	r2, r1, r3
 80005be:	f102 031e 	add.w	r3, r2, #30
 80005c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80005c4:	4bac      	ldr	r3, [pc, #688]	; (8000878 <init_breaker+0x2fc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6819      	ldr	r1, [r3, #0]
 80005ca:	4bae      	ldr	r3, [pc, #696]	; (8000884 <init_breaker+0x308>)
 80005cc:	fba3 2301 	umull	r2, r3, r3, r1
 80005d0:	095a      	lsrs	r2, r3, #5
 80005d2:	4613      	mov	r3, r2
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	1a9b      	subs	r3, r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	1aca      	subs	r2, r1, r3
 80005dc:	4613      	mov	r3, r2
 80005de:	65fb      	str	r3, [r7, #92]	; 0x5c
	WallClock temp_clock11 = { .hour = 0, .minute = (*random1 % 5), .second = (*random1 % 60)};
 80005e0:	2300      	movs	r3, #0
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80005e4:	4ba4      	ldr	r3, [pc, #656]	; (8000878 <init_breaker+0x2fc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	6819      	ldr	r1, [r3, #0]
 80005ea:	4ba7      	ldr	r3, [pc, #668]	; (8000888 <init_breaker+0x30c>)
 80005ec:	fba3 2301 	umull	r2, r3, r3, r1
 80005f0:	089a      	lsrs	r2, r3, #2
 80005f2:	4613      	mov	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	1aca      	subs	r2, r1, r3
 80005fa:	4613      	mov	r3, r2
 80005fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005fe:	4b9e      	ldr	r3, [pc, #632]	; (8000878 <init_breaker+0x2fc>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6819      	ldr	r1, [r3, #0]
 8000604:	4b9f      	ldr	r3, [pc, #636]	; (8000884 <init_breaker+0x308>)
 8000606:	fba3 2301 	umull	r2, r3, r3, r1
 800060a:	095a      	lsrs	r2, r3, #5
 800060c:	4613      	mov	r3, r2
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	1aca      	subs	r2, r1, r3
 8000616:	4613      	mov	r3, r2
 8000618:	653b      	str	r3, [r7, #80]	; 0x50
	breaker.break_time1 = add_clocks(breaker.break_time1,temp_clock1);
 800061a:	4e96      	ldr	r6, [pc, #600]	; (8000874 <init_breaker+0x2f8>)
 800061c:	f107 0508 	add.w	r5, r7, #8
 8000620:	4b94      	ldr	r3, [pc, #592]	; (8000874 <init_breaker+0x2f8>)
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	466c      	mov	r4, sp
 8000626:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800062a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800062e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	330c      	adds	r3, #12
 8000636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000638:	4628      	mov	r0, r5
 800063a:	f000 fbe1 	bl	8000e00 <add_clocks>
 800063e:	f106 030c 	add.w	r3, r6, #12
 8000642:	f107 0208 	add.w	r2, r7, #8
 8000646:	ca07      	ldmia	r2, {r0, r1, r2}
 8000648:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration1 = add_clocks(breaker.break_duration1,temp_clock11);
 800064c:	4e89      	ldr	r6, [pc, #548]	; (8000874 <init_breaker+0x2f8>)
 800064e:	f107 0508 	add.w	r5, r7, #8
 8000652:	4b88      	ldr	r3, [pc, #544]	; (8000874 <init_breaker+0x2f8>)
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	466c      	mov	r4, sp
 8000658:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800065c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3318      	adds	r3, #24
 8000668:	cb0e      	ldmia	r3, {r1, r2, r3}
 800066a:	4628      	mov	r0, r5
 800066c:	f000 fbc8 	bl	8000e00 <add_clocks>
 8000670:	f106 0318 	add.w	r3, r6, #24
 8000674:	f107 0208 	add.w	r2, r7, #8
 8000678:	ca07      	ldmia	r2, {r0, r1, r2}
 800067a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//What time the variable for going on break will be assigned
	breaker.start_break[2] = 0;
 800067e:	4b7d      	ldr	r3, [pc, #500]	; (8000874 <init_breaker+0x2f8>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random2);
 8000684:	4b81      	ldr	r3, [pc, #516]	; (800088c <init_breaker+0x310>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4619      	mov	r1, r3
 800068a:	487c      	ldr	r0, [pc, #496]	; (800087c <init_breaker+0x300>)
 800068c:	f004 fb2d 	bl	8004cea <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock2 = { .hour = 9, .minute = (30 + (*random2 - 30) % 31), .second = (*random2 % 60)};
 8000690:	2309      	movs	r3, #9
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000694:	4b7d      	ldr	r3, [pc, #500]	; (800088c <init_breaker+0x310>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f1a3 011e 	sub.w	r1, r3, #30
 800069e:	4b78      	ldr	r3, [pc, #480]	; (8000880 <init_breaker+0x304>)
 80006a0:	fba3 2301 	umull	r2, r3, r3, r1
 80006a4:	1aca      	subs	r2, r1, r3
 80006a6:	0852      	lsrs	r2, r2, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	091a      	lsrs	r2, r3, #4
 80006ac:	4613      	mov	r3, r2
 80006ae:	015b      	lsls	r3, r3, #5
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	1aca      	subs	r2, r1, r3
 80006b4:	f102 031e 	add.w	r3, r2, #30
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
 80006ba:	4b74      	ldr	r3, [pc, #464]	; (800088c <init_breaker+0x310>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	6819      	ldr	r1, [r3, #0]
 80006c0:	4b70      	ldr	r3, [pc, #448]	; (8000884 <init_breaker+0x308>)
 80006c2:	fba3 2301 	umull	r2, r3, r3, r1
 80006c6:	095a      	lsrs	r2, r3, #5
 80006c8:	4613      	mov	r3, r2
 80006ca:	011b      	lsls	r3, r3, #4
 80006cc:	1a9b      	subs	r3, r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	1aca      	subs	r2, r1, r3
 80006d2:	4613      	mov	r3, r2
 80006d4:	647b      	str	r3, [r7, #68]	; 0x44
	WallClock temp_clock22 = { .hour = 0, .minute = (*random2 % 5), .second = (*random2 % 60)};
 80006d6:	2300      	movs	r3, #0
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <init_breaker+0x310>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6819      	ldr	r1, [r3, #0]
 80006e0:	4b69      	ldr	r3, [pc, #420]	; (8000888 <init_breaker+0x30c>)
 80006e2:	fba3 2301 	umull	r2, r3, r3, r1
 80006e6:	089a      	lsrs	r2, r3, #2
 80006e8:	4613      	mov	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4413      	add	r3, r2
 80006ee:	1aca      	subs	r2, r1, r3
 80006f0:	4613      	mov	r3, r2
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
 80006f4:	4b65      	ldr	r3, [pc, #404]	; (800088c <init_breaker+0x310>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6819      	ldr	r1, [r3, #0]
 80006fa:	4b62      	ldr	r3, [pc, #392]	; (8000884 <init_breaker+0x308>)
 80006fc:	fba3 2301 	umull	r2, r3, r3, r1
 8000700:	095a      	lsrs	r2, r3, #5
 8000702:	4613      	mov	r3, r2
 8000704:	011b      	lsls	r3, r3, #4
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	1aca      	subs	r2, r1, r3
 800070c:	4613      	mov	r3, r2
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
	breaker.break_time2 = add_clocks(breaker.break_time2,temp_clock2);
 8000710:	4e58      	ldr	r6, [pc, #352]	; (8000874 <init_breaker+0x2f8>)
 8000712:	f107 0508 	add.w	r5, r7, #8
 8000716:	4b57      	ldr	r3, [pc, #348]	; (8000874 <init_breaker+0x2f8>)
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	466c      	mov	r4, sp
 800071c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000720:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3324      	adds	r3, #36	; 0x24
 800072c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800072e:	4628      	mov	r0, r5
 8000730:	f000 fb66 	bl	8000e00 <add_clocks>
 8000734:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000738:	f107 0208 	add.w	r2, r7, #8
 800073c:	ca07      	ldmia	r2, {r0, r1, r2}
 800073e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration2 = add_clocks(breaker.break_duration2,temp_clock22);
 8000742:	4e4c      	ldr	r6, [pc, #304]	; (8000874 <init_breaker+0x2f8>)
 8000744:	f107 0508 	add.w	r5, r7, #8
 8000748:	4b4a      	ldr	r3, [pc, #296]	; (8000874 <init_breaker+0x2f8>)
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	466c      	mov	r4, sp
 800074e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000752:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	3330      	adds	r3, #48	; 0x30
 800075e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000760:	4628      	mov	r0, r5
 8000762:	f000 fb4d 	bl	8000e00 <add_clocks>
 8000766:	f106 0330 	add.w	r3, r6, #48	; 0x30
 800076a:	f107 0208 	add.w	r2, r7, #8
 800076e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000770:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//What time the variable for going on break will be assigned
	breaker.start_break[3] = 0;
 8000774:	4b3f      	ldr	r3, [pc, #252]	; (8000874 <init_breaker+0x2f8>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
	//Duration of the assigned break;
	HAL_RNG_GenerateRandomNumber(&hrng,random3);
 800077a:	4b45      	ldr	r3, [pc, #276]	; (8000890 <init_breaker+0x314>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	483e      	ldr	r0, [pc, #248]	; (800087c <init_breaker+0x300>)
 8000782:	f004 fab2 	bl	8004cea <HAL_RNG_GenerateRandomNumber>
	WallClock temp_clock3 = { .hour = 9, .minute = (30 + (*random3 - 30) % 31), .second = (*random3 % 60)};
 8000786:	2309      	movs	r3, #9
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
 800078a:	4b41      	ldr	r3, [pc, #260]	; (8000890 <init_breaker+0x314>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f1a3 011e 	sub.w	r1, r3, #30
 8000794:	4b3a      	ldr	r3, [pc, #232]	; (8000880 <init_breaker+0x304>)
 8000796:	fba3 2301 	umull	r2, r3, r3, r1
 800079a:	1aca      	subs	r2, r1, r3
 800079c:	0852      	lsrs	r2, r2, #1
 800079e:	4413      	add	r3, r2
 80007a0:	091a      	lsrs	r2, r3, #4
 80007a2:	4613      	mov	r3, r2
 80007a4:	015b      	lsls	r3, r3, #5
 80007a6:	1a9b      	subs	r3, r3, r2
 80007a8:	1aca      	subs	r2, r1, r3
 80007aa:	f102 031e 	add.w	r3, r2, #30
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80007b0:	4b37      	ldr	r3, [pc, #220]	; (8000890 <init_breaker+0x314>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6819      	ldr	r1, [r3, #0]
 80007b6:	4b33      	ldr	r3, [pc, #204]	; (8000884 <init_breaker+0x308>)
 80007b8:	fba3 2301 	umull	r2, r3, r3, r1
 80007bc:	095a      	lsrs	r2, r3, #5
 80007be:	4613      	mov	r3, r2
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	1a9b      	subs	r3, r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	1aca      	subs	r2, r1, r3
 80007c8:	4613      	mov	r3, r2
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	WallClock temp_clock33 = { .hour = 0, .minute = (*random3 % 5), .second = (*random3 % 60)};
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <init_breaker+0x314>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6819      	ldr	r1, [r3, #0]
 80007d6:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <init_breaker+0x30c>)
 80007d8:	fba3 2301 	umull	r2, r3, r3, r1
 80007dc:	089a      	lsrs	r2, r3, #2
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	1aca      	subs	r2, r1, r3
 80007e6:	4613      	mov	r3, r2
 80007e8:	61fb      	str	r3, [r7, #28]
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <init_breaker+0x314>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	4b24      	ldr	r3, [pc, #144]	; (8000884 <init_breaker+0x308>)
 80007f2:	fba3 2301 	umull	r2, r3, r3, r1
 80007f6:	095a      	lsrs	r2, r3, #5
 80007f8:	4613      	mov	r3, r2
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	1a9b      	subs	r3, r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	1aca      	subs	r2, r1, r3
 8000802:	4613      	mov	r3, r2
 8000804:	623b      	str	r3, [r7, #32]
	breaker.break_time3 = add_clocks(breaker.break_time3,temp_clock3);
 8000806:	4e1b      	ldr	r6, [pc, #108]	; (8000874 <init_breaker+0x2f8>)
 8000808:	f107 0508 	add.w	r5, r7, #8
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <init_breaker+0x2f8>)
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	466c      	mov	r4, sp
 8000812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000816:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800081a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	333c      	adds	r3, #60	; 0x3c
 8000822:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000824:	4628      	mov	r0, r5
 8000826:	f000 faeb 	bl	8000e00 <add_clocks>
 800082a:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 800082e:	f107 0208 	add.w	r2, r7, #8
 8000832:	ca07      	ldmia	r2, {r0, r1, r2}
 8000834:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	breaker.break_duration3 =  add_clocks(breaker.break_duration3,temp_clock33);
 8000838:	4e0e      	ldr	r6, [pc, #56]	; (8000874 <init_breaker+0x2f8>)
 800083a:	f107 0508 	add.w	r5, r7, #8
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <init_breaker+0x2f8>)
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	466c      	mov	r4, sp
 8000844:	f107 0318 	add.w	r3, r7, #24
 8000848:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800084c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3348      	adds	r3, #72	; 0x48
 8000854:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000856:	4628      	mov	r0, r5
 8000858:	f000 fad2 	bl	8000e00 <add_clocks>
 800085c:	f106 0348 	add.w	r3, r6, #72	; 0x48
 8000860:	f107 0208 	add.w	r2, r7, #8
 8000864:	ca07      	ldmia	r2, {r0, r1, r2}
 8000866:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800086a:	bf00      	nop
 800086c:	3764      	adds	r7, #100	; 0x64
 800086e:	46bd      	mov	sp, r7
 8000870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000872:	bf00      	nop
 8000874:	20000094 	.word	0x20000094
 8000878:	200000e8 	.word	0x200000e8
 800087c:	200002bc 	.word	0x200002bc
 8000880:	08421085 	.word	0x08421085
 8000884:	88888889 	.word	0x88888889
 8000888:	cccccccd 	.word	0xcccccccd
 800088c:	200000ec 	.word	0x200000ec
 8000890:	200000f0 	.word	0x200000f0

08000894 <run_breaker>:

void run_breaker(){
 8000894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000896:	b09d      	sub	sp, #116	; 0x74
 8000898:	af04      	add	r7, sp, #16
	if(breaker.break_time1.hour == 0){
 800089a:	4bbd      	ldr	r3, [pc, #756]	; (8000b90 <run_breaker+0x2fc>)
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d102      	bne.n	80008a8 <run_breaker+0x14>
		breaker.break_time1.hour = 9;
 80008a2:	4bbb      	ldr	r3, [pc, #748]	; (8000b90 <run_breaker+0x2fc>)
 80008a4:	2209      	movs	r2, #9
 80008a6:	60da      	str	r2, [r3, #12]
	}
	if((!HAL_GPIO_ReadPin(Switch1_GPIO_Port, Switch1_Pin)) == 1 ){
 80008a8:	2102      	movs	r1, #2
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ae:	f002 fe75 	bl	800359c <HAL_GPIO_ReadPin>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d103      	bne.n	80008c0 <run_breaker+0x2c>
			  tellers[1].take_break = 1;
 80008b8:	4bb6      	ldr	r3, [pc, #728]	; (8000b94 <run_breaker+0x300>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	}
	if((!HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin)) == 1 ){
 80008c0:	2110      	movs	r1, #16
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f002 fe69 	bl	800359c <HAL_GPIO_ReadPin>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d103      	bne.n	80008d8 <run_breaker+0x44>
			  tellers[2].take_break = 2;
 80008d0:	4bb0      	ldr	r3, [pc, #704]	; (8000b94 <run_breaker+0x300>)
 80008d2:	2202      	movs	r2, #2
 80008d4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	}
	if((!HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch2_Pin)) == 1 ){
 80008d8:	2110      	movs	r1, #16
 80008da:	48af      	ldr	r0, [pc, #700]	; (8000b98 <run_breaker+0x304>)
 80008dc:	f002 fe5e 	bl	800359c <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d103      	bne.n	80008ee <run_breaker+0x5a>
			  tellers[3].take_break = 3;
 80008e6:	4bab      	ldr	r3, [pc, #684]	; (8000b94 <run_breaker+0x300>)
 80008e8:	2203      	movs	r2, #3
 80008ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	}
	if(clock_compare(Clock, breaker.break_time1) == 1){
 80008ee:	4ba8      	ldr	r3, [pc, #672]	; (8000b90 <run_breaker+0x2fc>)
 80008f0:	4aaa      	ldr	r2, [pc, #680]	; (8000b9c <run_breaker+0x308>)
 80008f2:	466c      	mov	r4, sp
 80008f4:	f103 0110 	add.w	r1, r3, #16
 80008f8:	c903      	ldmia	r1, {r0, r1}
 80008fa:	e884 0003 	stmia.w	r4, {r0, r1}
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	ca07      	ldmia	r2, {r0, r1, r2}
 8000902:	f000 fab7 	bl	8000e74 <clock_compare>
 8000906:	4603      	mov	r3, r0
 8000908:	2b01      	cmp	r3, #1
 800090a:	d103      	bne.n	8000914 <run_breaker+0x80>
		tellers[1].take_break = 1;
 800090c:	4ba1      	ldr	r3, [pc, #644]	; (8000b94 <run_breaker+0x300>)
 800090e:	2201      	movs	r2, #1
 8000910:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	}
	if(clock_compare(Clock, breaker.break_time2) == 1){
 8000914:	4b9e      	ldr	r3, [pc, #632]	; (8000b90 <run_breaker+0x2fc>)
 8000916:	4aa1      	ldr	r2, [pc, #644]	; (8000b9c <run_breaker+0x308>)
 8000918:	466c      	mov	r4, sp
 800091a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800091e:	c903      	ldmia	r1, {r0, r1}
 8000920:	e884 0003 	stmia.w	r4, {r0, r1}
 8000924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000926:	ca07      	ldmia	r2, {r0, r1, r2}
 8000928:	f000 faa4 	bl	8000e74 <clock_compare>
 800092c:	4603      	mov	r3, r0
 800092e:	2b01      	cmp	r3, #1
 8000930:	d103      	bne.n	800093a <run_breaker+0xa6>
		tellers[2].take_break = 1;
 8000932:	4b98      	ldr	r3, [pc, #608]	; (8000b94 <run_breaker+0x300>)
 8000934:	2201      	movs	r2, #1
 8000936:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	}
	if(clock_compare(Clock, breaker.break_time3) == 1){
 800093a:	4b95      	ldr	r3, [pc, #596]	; (8000b90 <run_breaker+0x2fc>)
 800093c:	4a97      	ldr	r2, [pc, #604]	; (8000b9c <run_breaker+0x308>)
 800093e:	466c      	mov	r4, sp
 8000940:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8000944:	c903      	ldmia	r1, {r0, r1}
 8000946:	e884 0003 	stmia.w	r4, {r0, r1}
 800094a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800094c:	ca07      	ldmia	r2, {r0, r1, r2}
 800094e:	f000 fa91 	bl	8000e74 <clock_compare>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	d103      	bne.n	8000960 <run_breaker+0xcc>
		tellers[3].take_break = 1;
 8000958:	4b8e      	ldr	r3, [pc, #568]	; (8000b94 <run_breaker+0x300>)
 800095a:	2201      	movs	r2, #1
 800095c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	}
	if(breaker.start_break[1] == 1){
 8000960:	4b8b      	ldr	r3, [pc, #556]	; (8000b90 <run_breaker+0x2fc>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2b01      	cmp	r3, #1
 8000966:	f040 8094 	bne.w	8000a92 <run_breaker+0x1fe>
		breaker.start_break[1] = 0;
 800096a:	4b89      	ldr	r3, [pc, #548]	; (8000b90 <run_breaker+0x2fc>)
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
		HAL_RNG_Init(&hrng);
 8000970:	488b      	ldr	r0, [pc, #556]	; (8000ba0 <run_breaker+0x30c>)
 8000972:	f004 f963 	bl	8004c3c <HAL_RNG_Init>
		HAL_RNG_GenerateRandomNumber(&hrng,random1);
 8000976:	4b8b      	ldr	r3, [pc, #556]	; (8000ba4 <run_breaker+0x310>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	4888      	ldr	r0, [pc, #544]	; (8000ba0 <run_breaker+0x30c>)
 800097e:	f004 f9b4 	bl	8004cea <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock1 = { .hour = 0, .minute = (30 + (*random1 - 30) % 31), .second = (*random1 % 60)};
 8000982:	2300      	movs	r3, #0
 8000984:	657b      	str	r3, [r7, #84]	; 0x54
 8000986:	4b87      	ldr	r3, [pc, #540]	; (8000ba4 <run_breaker+0x310>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f1a3 011e 	sub.w	r1, r3, #30
 8000990:	4b85      	ldr	r3, [pc, #532]	; (8000ba8 <run_breaker+0x314>)
 8000992:	fba3 2301 	umull	r2, r3, r3, r1
 8000996:	1aca      	subs	r2, r1, r3
 8000998:	0852      	lsrs	r2, r2, #1
 800099a:	4413      	add	r3, r2
 800099c:	091a      	lsrs	r2, r3, #4
 800099e:	4613      	mov	r3, r2
 80009a0:	015b      	lsls	r3, r3, #5
 80009a2:	1a9b      	subs	r3, r3, r2
 80009a4:	1aca      	subs	r2, r1, r3
 80009a6:	f102 031e 	add.w	r3, r2, #30
 80009aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80009ac:	4b7d      	ldr	r3, [pc, #500]	; (8000ba4 <run_breaker+0x310>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	4b7e      	ldr	r3, [pc, #504]	; (8000bac <run_breaker+0x318>)
 80009b4:	fba3 2301 	umull	r2, r3, r3, r1
 80009b8:	095a      	lsrs	r2, r3, #5
 80009ba:	4613      	mov	r3, r2
 80009bc:	011b      	lsls	r3, r3, #4
 80009be:	1a9b      	subs	r3, r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	1aca      	subs	r2, r1, r3
 80009c4:	4613      	mov	r3, r2
 80009c6:	65fb      	str	r3, [r7, #92]	; 0x5c
		WallClock temp_clock11 = { .hour = 0, .minute = (*random1 % 5), .second = (*random1 % 60)};
 80009c8:	2300      	movs	r3, #0
 80009ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80009cc:	4b75      	ldr	r3, [pc, #468]	; (8000ba4 <run_breaker+0x310>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6819      	ldr	r1, [r3, #0]
 80009d2:	4b77      	ldr	r3, [pc, #476]	; (8000bb0 <run_breaker+0x31c>)
 80009d4:	fba3 2301 	umull	r2, r3, r3, r1
 80009d8:	089a      	lsrs	r2, r3, #2
 80009da:	4613      	mov	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	1aca      	subs	r2, r1, r3
 80009e2:	4613      	mov	r3, r2
 80009e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009e6:	4b6f      	ldr	r3, [pc, #444]	; (8000ba4 <run_breaker+0x310>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6819      	ldr	r1, [r3, #0]
 80009ec:	4b6f      	ldr	r3, [pc, #444]	; (8000bac <run_breaker+0x318>)
 80009ee:	fba3 2301 	umull	r2, r3, r3, r1
 80009f2:	095a      	lsrs	r2, r3, #5
 80009f4:	4613      	mov	r3, r2
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	1a9b      	subs	r3, r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	1aca      	subs	r2, r1, r3
 80009fe:	4613      	mov	r3, r2
 8000a00:	653b      	str	r3, [r7, #80]	; 0x50
		breaker.break_time1 = add_clocks(breaker.break_time1,Clock);
 8000a02:	4d63      	ldr	r5, [pc, #396]	; (8000b90 <run_breaker+0x2fc>)
 8000a04:	f107 0408 	add.w	r4, r7, #8
 8000a08:	4e61      	ldr	r6, [pc, #388]	; (8000b90 <run_breaker+0x2fc>)
 8000a0a:	4a64      	ldr	r2, [pc, #400]	; (8000b9c <run_breaker+0x308>)
 8000a0c:	466b      	mov	r3, sp
 8000a0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000a14:	f106 030c 	add.w	r3, r6, #12
 8000a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f000 f9f0 	bl	8000e00 <add_clocks>
 8000a20:	f105 030c 	add.w	r3, r5, #12
 8000a24:	f107 0208 	add.w	r2, r7, #8
 8000a28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time1 = add_clocks(breaker.break_time1,temp_clock1);
 8000a2e:	4e58      	ldr	r6, [pc, #352]	; (8000b90 <run_breaker+0x2fc>)
 8000a30:	f107 0508 	add.w	r5, r7, #8
 8000a34:	4b56      	ldr	r3, [pc, #344]	; (8000b90 <run_breaker+0x2fc>)
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	466c      	mov	r4, sp
 8000a3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	330c      	adds	r3, #12
 8000a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	f000 f9d7 	bl	8000e00 <add_clocks>
 8000a52:	f106 030c 	add.w	r3, r6, #12
 8000a56:	f107 0208 	add.w	r2, r7, #8
 8000a5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration1 = add_clocks(breaker.break_duration1,temp_clock11);
 8000a60:	4e4b      	ldr	r6, [pc, #300]	; (8000b90 <run_breaker+0x2fc>)
 8000a62:	f107 0508 	add.w	r5, r7, #8
 8000a66:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <run_breaker+0x2fc>)
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	466c      	mov	r4, sp
 8000a6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000a74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a7e:	4628      	mov	r0, r5
 8000a80:	f000 f9be 	bl	8000e00 <add_clocks>
 8000a84:	f106 0318 	add.w	r3, r6, #24
 8000a88:	f107 0208 	add.w	r2, r7, #8
 8000a8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
	if(breaker.start_break[2] == 1){
 8000a92:	4b3f      	ldr	r3, [pc, #252]	; (8000b90 <run_breaker+0x2fc>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	f040 80aa 	bne.w	8000bf0 <run_breaker+0x35c>
		breaker.start_break[2] = 0;
 8000a9c:	4b3c      	ldr	r3, [pc, #240]	; (8000b90 <run_breaker+0x2fc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
		HAL_RNG_Init(&hrng);
 8000aa2:	483f      	ldr	r0, [pc, #252]	; (8000ba0 <run_breaker+0x30c>)
 8000aa4:	f004 f8ca 	bl	8004c3c <HAL_RNG_Init>
		HAL_RNG_GenerateRandomNumber(&hrng,random2);
 8000aa8:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <run_breaker+0x320>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	483c      	ldr	r0, [pc, #240]	; (8000ba0 <run_breaker+0x30c>)
 8000ab0:	f004 f91b 	bl	8004cea <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock2 = { .hour = 0, .minute = (30 + (*random2 - 30) % 31), .second = (*random2 % 60)};
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ab8:	4b3e      	ldr	r3, [pc, #248]	; (8000bb4 <run_breaker+0x320>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f1a3 011e 	sub.w	r1, r3, #30
 8000ac2:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <run_breaker+0x314>)
 8000ac4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ac8:	1aca      	subs	r2, r1, r3
 8000aca:	0852      	lsrs	r2, r2, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	091a      	lsrs	r2, r3, #4
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	015b      	lsls	r3, r3, #5
 8000ad4:	1a9b      	subs	r3, r3, r2
 8000ad6:	1aca      	subs	r2, r1, r3
 8000ad8:	f102 031e 	add.w	r3, r2, #30
 8000adc:	643b      	str	r3, [r7, #64]	; 0x40
 8000ade:	4b35      	ldr	r3, [pc, #212]	; (8000bb4 <run_breaker+0x320>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6819      	ldr	r1, [r3, #0]
 8000ae4:	4b31      	ldr	r3, [pc, #196]	; (8000bac <run_breaker+0x318>)
 8000ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8000aea:	095a      	lsrs	r2, r3, #5
 8000aec:	4613      	mov	r3, r2
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	1a9b      	subs	r3, r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	1aca      	subs	r2, r1, r3
 8000af6:	4613      	mov	r3, r2
 8000af8:	647b      	str	r3, [r7, #68]	; 0x44
		WallClock temp_clock22 = { .hour = 0, .minute = (*random2 % 5), .second = (*random2 % 60)};
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <run_breaker+0x320>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	6819      	ldr	r1, [r3, #0]
 8000b04:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <run_breaker+0x31c>)
 8000b06:	fba3 2301 	umull	r2, r3, r3, r1
 8000b0a:	089a      	lsrs	r2, r3, #2
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	1aca      	subs	r2, r1, r3
 8000b14:	4613      	mov	r3, r2
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <run_breaker+0x320>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6819      	ldr	r1, [r3, #0]
 8000b1e:	4b23      	ldr	r3, [pc, #140]	; (8000bac <run_breaker+0x318>)
 8000b20:	fba3 2301 	umull	r2, r3, r3, r1
 8000b24:	095a      	lsrs	r2, r3, #5
 8000b26:	4613      	mov	r3, r2
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	1a9b      	subs	r3, r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	1aca      	subs	r2, r1, r3
 8000b30:	4613      	mov	r3, r2
 8000b32:	63bb      	str	r3, [r7, #56]	; 0x38
		breaker.break_time2 = add_clocks(breaker.break_time2,Clock);
 8000b34:	4d16      	ldr	r5, [pc, #88]	; (8000b90 <run_breaker+0x2fc>)
 8000b36:	f107 0408 	add.w	r4, r7, #8
 8000b3a:	4e15      	ldr	r6, [pc, #84]	; (8000b90 <run_breaker+0x2fc>)
 8000b3c:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <run_breaker+0x308>)
 8000b3e:	466b      	mov	r3, sp
 8000b40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000b46:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000b4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	f000 f957 	bl	8000e00 <add_clocks>
 8000b52:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8000b56:	f107 0208 	add.w	r2, r7, #8
 8000b5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time2 = add_clocks(breaker.break_time2,temp_clock2);
 8000b60:	4e0b      	ldr	r6, [pc, #44]	; (8000b90 <run_breaker+0x2fc>)
 8000b62:	f107 0508 	add.w	r5, r7, #8
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <run_breaker+0x2fc>)
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	466c      	mov	r4, sp
 8000b6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3324      	adds	r3, #36	; 0x24
 8000b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b7e:	4628      	mov	r0, r5
 8000b80:	f000 f93e 	bl	8000e00 <add_clocks>
 8000b84:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8000b88:	f107 0208 	add.w	r2, r7, #8
 8000b8c:	e014      	b.n	8000bb8 <run_breaker+0x324>
 8000b8e:	bf00      	nop
 8000b90:	20000094 	.word	0x20000094
 8000b94:	200003c0 	.word	0x200003c0
 8000b98:	48000400 	.word	0x48000400
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	200002bc 	.word	0x200002bc
 8000ba4:	200000e8 	.word	0x200000e8
 8000ba8:	08421085 	.word	0x08421085
 8000bac:	88888889 	.word	0x88888889
 8000bb0:	cccccccd 	.word	0xcccccccd
 8000bb4:	200000ec 	.word	0x200000ec
 8000bb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration2 = add_clocks(breaker.break_duration2,temp_clock22);
 8000bbe:	4e5b      	ldr	r6, [pc, #364]	; (8000d2c <run_breaker+0x498>)
 8000bc0:	f107 0508 	add.w	r5, r7, #8
 8000bc4:	4b59      	ldr	r3, [pc, #356]	; (8000d2c <run_breaker+0x498>)
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	466c      	mov	r4, sp
 8000bca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3330      	adds	r3, #48	; 0x30
 8000bda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f000 f90f 	bl	8000e00 <add_clocks>
 8000be2:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8000be6:	f107 0208 	add.w	r2, r7, #8
 8000bea:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
	if(breaker.start_break[3] == 1){
 8000bf0:	4b4e      	ldr	r3, [pc, #312]	; (8000d2c <run_breaker+0x498>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	f040 8094 	bne.w	8000d22 <run_breaker+0x48e>
		breaker.start_break[3] = 0;
 8000bfa:	4b4c      	ldr	r3, [pc, #304]	; (8000d2c <run_breaker+0x498>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
		HAL_RNG_Init(&hrng);
 8000c00:	484b      	ldr	r0, [pc, #300]	; (8000d30 <run_breaker+0x49c>)
 8000c02:	f004 f81b 	bl	8004c3c <HAL_RNG_Init>
		HAL_RNG_GenerateRandomNumber(&hrng,random3);
 8000c06:	4b4b      	ldr	r3, [pc, #300]	; (8000d34 <run_breaker+0x4a0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4848      	ldr	r0, [pc, #288]	; (8000d30 <run_breaker+0x49c>)
 8000c0e:	f004 f86c 	bl	8004cea <HAL_RNG_GenerateRandomNumber>
		WallClock temp_clock3 = { .hour = 0, .minute = (30 + (*random3 - 30) % 31), .second = (*random3 % 60)};
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
 8000c16:	4b47      	ldr	r3, [pc, #284]	; (8000d34 <run_breaker+0x4a0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f1a3 011e 	sub.w	r1, r3, #30
 8000c20:	4b45      	ldr	r3, [pc, #276]	; (8000d38 <run_breaker+0x4a4>)
 8000c22:	fba3 2301 	umull	r2, r3, r3, r1
 8000c26:	1aca      	subs	r2, r1, r3
 8000c28:	0852      	lsrs	r2, r2, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	091a      	lsrs	r2, r3, #4
 8000c2e:	4613      	mov	r3, r2
 8000c30:	015b      	lsls	r3, r3, #5
 8000c32:	1a9b      	subs	r3, r3, r2
 8000c34:	1aca      	subs	r2, r1, r3
 8000c36:	f102 031e 	add.w	r3, r2, #30
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c3c:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <run_breaker+0x4a0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	6819      	ldr	r1, [r3, #0]
 8000c42:	4b3e      	ldr	r3, [pc, #248]	; (8000d3c <run_breaker+0x4a8>)
 8000c44:	fba3 2301 	umull	r2, r3, r3, r1
 8000c48:	095a      	lsrs	r2, r3, #5
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	1a9b      	subs	r3, r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	1aca      	subs	r2, r1, r3
 8000c54:	4613      	mov	r3, r2
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
		WallClock temp_clock33 = { .hour = 0, .minute = (*random3 % 5), .second = (*random3 % 60)};
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	4b35      	ldr	r3, [pc, #212]	; (8000d34 <run_breaker+0x4a0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6819      	ldr	r1, [r3, #0]
 8000c62:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <run_breaker+0x4ac>)
 8000c64:	fba3 2301 	umull	r2, r3, r3, r1
 8000c68:	089a      	lsrs	r2, r3, #2
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	1aca      	subs	r2, r1, r3
 8000c72:	4613      	mov	r3, r2
 8000c74:	61fb      	str	r3, [r7, #28]
 8000c76:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <run_breaker+0x4a0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6819      	ldr	r1, [r3, #0]
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <run_breaker+0x4a8>)
 8000c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8000c82:	095a      	lsrs	r2, r3, #5
 8000c84:	4613      	mov	r3, r2
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	1a9b      	subs	r3, r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	1aca      	subs	r2, r1, r3
 8000c8e:	4613      	mov	r3, r2
 8000c90:	623b      	str	r3, [r7, #32]
		breaker.break_time3 = add_clocks(breaker.break_time3,Clock);
 8000c92:	4d26      	ldr	r5, [pc, #152]	; (8000d2c <run_breaker+0x498>)
 8000c94:	f107 0408 	add.w	r4, r7, #8
 8000c98:	4e24      	ldr	r6, [pc, #144]	; (8000d2c <run_breaker+0x498>)
 8000c9a:	4a2a      	ldr	r2, [pc, #168]	; (8000d44 <run_breaker+0x4b0>)
 8000c9c:	466b      	mov	r3, sp
 8000c9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ca0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ca4:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 8000ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000caa:	4620      	mov	r0, r4
 8000cac:	f000 f8a8 	bl	8000e00 <add_clocks>
 8000cb0:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8000cb4:	f107 0208 	add.w	r2, r7, #8
 8000cb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_time3 = add_clocks(breaker.break_time3,temp_clock3);
 8000cbe:	4e1b      	ldr	r6, [pc, #108]	; (8000d2c <run_breaker+0x498>)
 8000cc0:	f107 0508 	add.w	r5, r7, #8
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <run_breaker+0x498>)
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	466c      	mov	r4, sp
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	333c      	adds	r3, #60	; 0x3c
 8000cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cdc:	4628      	mov	r0, r5
 8000cde:	f000 f88f 	bl	8000e00 <add_clocks>
 8000ce2:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 8000ce6:	f107 0208 	add.w	r2, r7, #8
 8000cea:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		breaker.break_duration3 =  add_clocks(breaker.break_duration3,temp_clock33);
 8000cf0:	4e0e      	ldr	r6, [pc, #56]	; (8000d2c <run_breaker+0x498>)
 8000cf2:	f107 0508 	add.w	r5, r7, #8
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <run_breaker+0x498>)
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	466c      	mov	r4, sp
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3348      	adds	r3, #72	; 0x48
 8000d0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d0e:	4628      	mov	r0, r5
 8000d10:	f000 f876 	bl	8000e00 <add_clocks>
 8000d14:	f106 0348 	add.w	r3, r6, #72	; 0x48
 8000d18:	f107 0208 	add.w	r2, r7, #8
 8000d1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}

}
 8000d22:	bf00      	nop
 8000d24:	3764      	adds	r7, #100	; 0x64
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000094 	.word	0x20000094
 8000d30:	200002bc 	.word	0x200002bc
 8000d34:	200000f0 	.word	0x200000f0
 8000d38:	08421085 	.word	0x08421085
 8000d3c:	88888889 	.word	0x88888889
 8000d40:	cccccccd 	.word	0xcccccccd
 8000d44:	20000000 	.word	0x20000000

08000d48 <clock_init>:
//The main clock to be checked by the program
//Declare extern within the header file
WallClock Clock = {.hour = 9, .minute = 0, .second = 0};


WallClock clock_init(WallClock the_clock) {
 8000d48:	b490      	push	{r4, r7}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	4638      	mov	r0, r7
 8000d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Initialize the main clock
	the_clock.hour = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
	the_clock.minute = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
	the_clock.second = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]

	return the_clock;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	461c      	mov	r4, r3
 8000d66:	463b      	mov	r3, r7
 8000d68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000d70:	68f8      	ldr	r0, [r7, #12]
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc90      	pop	{r4, r7}
 8000d78:	4770      	bx	lr

08000d7a <day_init>:

WallClock day_init(WallClock the_clock) {
 8000d7a:	b490      	push	{r4, r7}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	4638      	mov	r0, r7
 8000d84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Initialize the main clock
	the_clock.hour = 9;
 8000d88:	2309      	movs	r3, #9
 8000d8a:	603b      	str	r3, [r7, #0]
	the_clock.minute = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
	the_clock.second = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]

	return the_clock;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	461c      	mov	r4, r3
 8000d98:	463b      	mov	r3, r7
 8000d9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc90      	pop	{r4, r7}
 8000daa:	4770      	bx	lr

08000dac <clock_increment>:

WallClock clock_increment(WallClock the_clock){
 8000dac:	b490      	push	{r4, r7}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	4638      	mov	r0, r7
 8000db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Check if second is full, if so then increment
	//minute count and reset second count to 0
	//if minute count full increment hour count and reset minutes to 0
	if(the_clock.second >= 59){
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	2b3a      	cmp	r3, #58	; 0x3a
 8000dbe:	dd10      	ble.n	8000de2 <clock_increment+0x36>
		the_clock.second -= 59;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	3b3b      	subs	r3, #59	; 0x3b
 8000dc4:	60bb      	str	r3, [r7, #8]
		if(the_clock.minute >= 59){
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b3a      	cmp	r3, #58	; 0x3a
 8000dca:	dd06      	ble.n	8000dda <clock_increment+0x2e>
			the_clock.minute -= 59;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b3b      	subs	r3, #59	; 0x3b
 8000dd0:	607b      	str	r3, [r7, #4]
			the_clock.hour += 1;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	e006      	b.n	8000de8 <clock_increment+0x3c>
		}
		else{
			the_clock.minute += 1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	e002      	b.n	8000de8 <clock_increment+0x3c>
		}
	}
	else{
		the_clock.second += 1;
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
	}
	return the_clock;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	461c      	mov	r4, r3
 8000dec:	463b      	mov	r3, r7
 8000dee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000df2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc90      	pop	{r4, r7}
 8000dfe:	4770      	bx	lr

08000e00 <add_clocks>:

WallClock add_clocks(WallClock Clock1, WallClock Clock2){
 8000e00:	b490      	push	{r4, r7}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	4638      	mov	r0, r7
 8000e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Adds seconds then minutes then hours, accounting for overflows as needed
	//Add seconds and account overflow
	Clock1.second += Clock2.second;
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	6a3b      	ldr	r3, [r7, #32]
 8000e12:	4413      	add	r3, r2
 8000e14:	60bb      	str	r3, [r7, #8]
	if(Clock1.second >= 60){
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	2b3b      	cmp	r3, #59	; 0x3b
 8000e1a:	dd0e      	ble.n	8000e3a <add_clocks+0x3a>
		Clock1.minute += 1;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
		Clock1.second -= 60;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	3b3c      	subs	r3, #60	; 0x3c
 8000e26:	60bb      	str	r3, [r7, #8]
		if(Clock1.minute >= 60){
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b3b      	cmp	r3, #59	; 0x3b
 8000e2c:	dd05      	ble.n	8000e3a <add_clocks+0x3a>
			Clock1.hour += 1;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	603b      	str	r3, [r7, #0]
			Clock1.minute -= 60;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b3c      	subs	r3, #60	; 0x3c
 8000e38:	607b      	str	r3, [r7, #4]
		}
	}
	//Add minutes and account overflow
	Clock1.minute += Clock2.minute;
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	4413      	add	r3, r2
 8000e40:	607b      	str	r3, [r7, #4]
	if(Clock1.minute >= 60){
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b3b      	cmp	r3, #59	; 0x3b
 8000e46:	dd05      	ble.n	8000e54 <add_clocks+0x54>
		Clock1.hour += 1;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	603b      	str	r3, [r7, #0]
		Clock1.minute -= 60;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3b3c      	subs	r3, #60	; 0x3c
 8000e52:	607b      	str	r3, [r7, #4]
	}
	//Add hours, don't account overflow as impossible
	Clock1.hour += Clock2.hour;
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4413      	add	r3, r2
 8000e5a:	603b      	str	r3, [r7, #0]

	return Clock1;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	461c      	mov	r4, r3
 8000e60:	463b      	mov	r3, r7
 8000e62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc90      	pop	{r4, r7}
 8000e72:	4770      	bx	lr

08000e74 <clock_compare>:

//if clock 1 is greater than clock 2(later) then return 0
//if clock 1 is less than clock 2(earlier) then return 2
int clock_compare(WallClock Clock1, WallClock Clock2){
 8000e74:	b082      	sub	sp, #8
 8000e76:	b490      	push	{r4, r7}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	1d3c      	adds	r4, r7, #4
 8000e7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e82:	61fb      	str	r3, [r7, #28]
	if(Clock1.hour == Clock2.hour){
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d121      	bne.n	8000ed0 <clock_compare+0x5c>
		if(Clock1.minute == Clock2.minute){
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d111      	bne.n	8000eb8 <clock_compare+0x44>
			if(Clock1.second == Clock2.second){
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d101      	bne.n	8000ea0 <clock_compare+0x2c>
				return 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e024      	b.n	8000eea <clock_compare+0x76>
			}
			else if(Clock1.second > Clock2.second){
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dd01      	ble.n	8000eac <clock_compare+0x38>
				return 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e01e      	b.n	8000eea <clock_compare+0x76>
			}
			else if(Clock1.second < Clock2.second){
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	da19      	bge.n	8000ee8 <clock_compare+0x74>
				return 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e018      	b.n	8000eea <clock_compare+0x76>
			}
		}
		else if(Clock1.minute > Clock2.minute){
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	6a3b      	ldr	r3, [r7, #32]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dd01      	ble.n	8000ec4 <clock_compare+0x50>
			return 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e012      	b.n	8000eea <clock_compare+0x76>
		}
		else if(Clock1.minute < Clock2.minute){
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	6a3b      	ldr	r3, [r7, #32]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	da0d      	bge.n	8000ee8 <clock_compare+0x74>
			return 2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e00c      	b.n	8000eea <clock_compare+0x76>
		}
	}
	else if(Clock1.hour > Clock2.hour){
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dd01      	ble.n	8000edc <clock_compare+0x68>
		return 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e006      	b.n	8000eea <clock_compare+0x76>
	}
	else if(Clock1.hour < Clock2.hour){
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	da01      	bge.n	8000ee8 <clock_compare+0x74>
		return 2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e000      	b.n	8000eea <clock_compare+0x76>
	}
	return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc90      	pop	{r4, r7}
 8000ef2:	b002      	add	sp, #8
 8000ef4:	4770      	bx	lr
	...

08000ef8 <subtract_Clocks>:

WallClock subtract_Clocks(WallClock clock1, WallClock clock2) {
 8000ef8:	b490      	push	{r4, r7}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	4638      	mov	r0, r7
 8000f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    WallClock result;

    // Convert both clocks to total seconds
    int totalSeconds1 = clock1.hour * 3600 + clock1.minute * 60 + clock1.second;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f0c:	fb02 f103 	mul.w	r1, r2, r3
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	1a9b      	subs	r3, r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	18ca      	adds	r2, r1, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4413      	add	r3, r2
 8000f20:	623b      	str	r3, [r7, #32]
    int totalSeconds2 = clock2.hour * 3600 + clock2.minute * 60 + clock2.second;
 8000f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f24:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f28:	fb02 f103 	mul.w	r1, r2, r3
 8000f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f2e:	4613      	mov	r3, r2
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	1a9b      	subs	r3, r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	18ca      	adds	r2, r1, r3
 8000f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f3a:	4413      	add	r3, r2
 8000f3c:	61fb      	str	r3, [r7, #28]

    // Calculate the difference in total seconds
    int diffSeconds = totalSeconds1 - totalSeconds2;
 8000f3e:	6a3a      	ldr	r2, [r7, #32]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24

    // Handle negative differences
    if (diffSeconds < 0) {
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da05      	bge.n	8000f58 <subtract_Clocks+0x60>
        diffSeconds += 24 * 3600; // Assuming clocks are within a 24-hour period
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8000f52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Convert difference back to clock format
    result.hour = diffSeconds / 3600;
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	4a1d      	ldr	r2, [pc, #116]	; (8000fd0 <subtract_Clocks+0xd8>)
 8000f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f60:	441a      	add	r2, r3
 8000f62:	12d2      	asrs	r2, r2, #11
 8000f64:	17db      	asrs	r3, r3, #31
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	613b      	str	r3, [r7, #16]
    diffSeconds %= 3600;
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <subtract_Clocks+0xd8>)
 8000f6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f72:	441a      	add	r2, r3
 8000f74:	12d1      	asrs	r1, r2, #11
 8000f76:	17da      	asrs	r2, r3, #31
 8000f78:	1a8a      	subs	r2, r1, r2
 8000f7a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000f7e:	fb01 f202 	mul.w	r2, r1, r2
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    result.minute = diffSeconds / 60;
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <subtract_Clocks+0xdc>)
 8000f8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f8e:	441a      	add	r2, r3
 8000f90:	1152      	asrs	r2, r2, #5
 8000f92:	17db      	asrs	r3, r3, #31
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	617b      	str	r3, [r7, #20]
    result.second = diffSeconds % 60;
 8000f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <subtract_Clocks+0xdc>)
 8000f9c:	fb83 1302 	smull	r1, r3, r3, r2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	1159      	asrs	r1, r3, #5
 8000fa4:	17d3      	asrs	r3, r2, #31
 8000fa6:	1ac9      	subs	r1, r1, r3
 8000fa8:	460b      	mov	r3, r1
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	1a5b      	subs	r3, r3, r1
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	1ad1      	subs	r1, r2, r3
 8000fb2:	61b9      	str	r1, [r7, #24]

    return result;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	461c      	mov	r4, r3
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc90      	pop	{r4, r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	91a2b3c5 	.word	0x91a2b3c5
 8000fd4:	88888889 	.word	0x88888889

08000fd8 <init_GPIO>:
WallClock total_customer_wait;
WallClock max_customer_wait;
int total_customers;
WallClock fiveOclockSomewhere = {.hour = 10, .minute = 0, .second = 0};

void init_GPIO(){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <init_GPIO+0xac>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4a28      	ldr	r2, [pc, #160]	; (8001084 <init_GPIO+0xac>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <init_GPIO+0xac>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	4b23      	ldr	r3, [pc, #140]	; (8001084 <init_GPIO+0xac>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a22      	ldr	r2, [pc, #136]	; (8001084 <init_GPIO+0xac>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <init_GPIO+0xac>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pins : SHLD_D13_Pin SHLD_D12_Pin SHLD_D11_Pin SHLD_D7_SEG7_Clock_Pin */
	GPIO_InitStruct.Pin = SHLD_D13_Pin|SHLD_D12_Pin|SHLD_D11_Pin|SHLD_D7_SEG7_Clock_Pin;
 800101e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001022:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4619      	mov	r1, r3
 8001036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103a:	f002 f905 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pin : SHLD_D8_SEG7_Data_Pin */
	GPIO_InitStruct.Pin = SHLD_D8_SEG7_Data_Pin;
 800103e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001042:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800104c:	2301      	movs	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SHLD_D8_SEG7_Data_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4619      	mov	r1, r3
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f002 f8f5 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
	GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 800105e:	2310      	movs	r3, #16
 8001060:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	4619      	mov	r1, r3
 8001074:	4804      	ldr	r0, [pc, #16]	; (8001088 <init_GPIO+0xb0>)
 8001076:	f002 f8e7 	bl	8003248 <HAL_GPIO_Init>
}
 800107a:	bf00      	nop
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000
 8001088:	48000400 	.word	0x48000400

0800108c <init_customer>:

void init_customer(){
 800108c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af04      	add	r7, sp, #16
	total_customers = 0;
 8001092:	4b2e      	ldr	r3, [pc, #184]	; (800114c <init_customer+0xc0>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
	total_customer_wait = clock_init(total_customer_wait);
 8001098:	4c2d      	ldr	r4, [pc, #180]	; (8001150 <init_customer+0xc4>)
 800109a:	4638      	mov	r0, r7
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <init_customer+0xc4>)
 800109e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010a0:	f7ff fe52 	bl	8000d48 <clock_init>
 80010a4:	463b      	mov	r3, r7
 80010a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	max_customer_waiting = 0;
 80010ae:	4b29      	ldr	r3, [pc, #164]	; (8001154 <init_customer+0xc8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
	max_customer_wait = clock_init(max_customer_wait);
 80010b4:	4c28      	ldr	r4, [pc, #160]	; (8001158 <init_customer+0xcc>)
 80010b6:	4638      	mov	r0, r7
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <init_customer+0xcc>)
 80010ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010bc:	f7ff fe44 	bl	8000d48 <clock_init>
 80010c0:	463b      	mov	r3, r7
 80010c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	waiting_customers = 0;
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <init_customer+0xd0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
	HAL_RNG_GenerateRandomNumber(&hrng, random_new_customer);
 80010d0:	4b23      	ldr	r3, [pc, #140]	; (8001160 <init_customer+0xd4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	4823      	ldr	r0, [pc, #140]	; (8001164 <init_customer+0xd8>)
 80010d8:	f003 fe07 	bl	8004cea <HAL_RNG_GenerateRandomNumber>
	new_customer_time.hour = 0;
 80010dc:	4b22      	ldr	r3, [pc, #136]	; (8001168 <init_customer+0xdc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
	new_customer_time.minute = (*random_new_customer % 5);
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <init_customer+0xd4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6819      	ldr	r1, [r3, #0]
 80010e8:	4b20      	ldr	r3, [pc, #128]	; (800116c <init_customer+0xe0>)
 80010ea:	fba3 2301 	umull	r2, r3, r3, r1
 80010ee:	089a      	lsrs	r2, r3, #2
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	1aca      	subs	r2, r1, r3
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <init_customer+0xdc>)
 80010fa:	605a      	str	r2, [r3, #4]
	new_customer_time.second = (*random_new_customer % 60);
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <init_customer+0xd4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6819      	ldr	r1, [r3, #0]
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <init_customer+0xe4>)
 8001104:	fba3 2301 	umull	r2, r3, r3, r1
 8001108:	095a      	lsrs	r2, r3, #5
 800110a:	4613      	mov	r3, r2
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	1a9b      	subs	r3, r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	1aca      	subs	r2, r1, r3
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <init_customer+0xdc>)
 8001116:	609a      	str	r2, [r3, #8]
	new_customer_time = add_clocks(new_customer_time, Clock);
 8001118:	4e13      	ldr	r6, [pc, #76]	; (8001168 <init_customer+0xdc>)
 800111a:	463d      	mov	r5, r7
 800111c:	4c12      	ldr	r4, [pc, #72]	; (8001168 <init_customer+0xdc>)
 800111e:	4a15      	ldr	r2, [pc, #84]	; (8001174 <init_customer+0xe8>)
 8001120:	466b      	mov	r3, sp
 8001122:	ca07      	ldmia	r2, {r0, r1, r2}
 8001124:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001128:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800112c:	4628      	mov	r0, r5
 800112e:	f7ff fe67 	bl	8000e00 <add_clocks>
 8001132:	4634      	mov	r4, r6
 8001134:	463b      	mov	r3, r7
 8001136:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800113a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	init_GPIO();
 800113e:	f7ff ff4b 	bl	8000fd8 <init_GPIO>

}
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114a:	bf00      	nop
 800114c:	200002b8 	.word	0x200002b8
 8001150:	200002a0 	.word	0x200002a0
 8001154:	200000f4 	.word	0x200000f4
 8001158:	200002ac 	.word	0x200002ac
 800115c:	200000f8 	.word	0x200000f8
 8001160:	2000029c 	.word	0x2000029c
 8001164:	200002bc 	.word	0x200002bc
 8001168:	2000028c 	.word	0x2000028c
 800116c:	cccccccd 	.word	0xcccccccd
 8001170:	88888889 	.word	0x88888889
 8001174:	20000000 	.word	0x20000000

08001178 <run_customer>:



void run_customer(){
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117a:	b093      	sub	sp, #76	; 0x4c
 800117c:	af04      	add	r7, sp, #16
	// shift customers if first customers want to
	if((waiting[0] == NULL) && waiting[1] != NULL){
 800117e:	4b7d      	ldr	r3, [pc, #500]	; (8001374 <run_customer+0x1fc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d11c      	bne.n	80011c0 <run_customer+0x48>
 8001186:	4b7b      	ldr	r3, [pc, #492]	; (8001374 <run_customer+0x1fc>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d018      	beq.n	80011c0 <run_customer+0x48>
		for (int i = 0; i < waiting_customers; i++){
 800118e:	2300      	movs	r3, #0
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
 8001192:	e00b      	b.n	80011ac <run_customer+0x34>
			waiting[i] = waiting[i+1];
 8001194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001196:	3301      	adds	r3, #1
 8001198:	4a76      	ldr	r2, [pc, #472]	; (8001374 <run_customer+0x1fc>)
 800119a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800119e:	4975      	ldr	r1, [pc, #468]	; (8001374 <run_customer+0x1fc>)
 80011a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < waiting_customers; i++){
 80011a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a8:	3301      	adds	r3, #1
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
 80011ac:	4b72      	ldr	r3, [pc, #456]	; (8001378 <run_customer+0x200>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011b2:	429a      	cmp	r2, r3
 80011b4:	dbee      	blt.n	8001194 <run_customer+0x1c>
//			waiting[i]->id = waiting[i+1]->id;
//			waiting[i]->left_queue_time = waiting[i+1]->left_queue_time;
//			waiting[i]->service_time = waiting[i+1]->service_time;
//			waiting[i]->total_queue_time = waiting[i+1]->total_queue_time;
		}
		waiting_customers--;
 80011b6:	4b70      	ldr	r3, [pc, #448]	; (8001378 <run_customer+0x200>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	4a6e      	ldr	r2, [pc, #440]	; (8001378 <run_customer+0x200>)
 80011be:	6013      	str	r3, [r2, #0]
	}

	for (int i = 0; i < waiting_customers; i++){
 80011c0:	2300      	movs	r3, #0
 80011c2:	633b      	str	r3, [r7, #48]	; 0x30
 80011c4:	e015      	b.n	80011f2 <run_customer+0x7a>
		waiting[i]->total_queue_time = clock_increment(waiting[i]->total_queue_time);
 80011c6:	4a6b      	ldr	r2, [pc, #428]	; (8001374 <run_customer+0x1fc>)
 80011c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ce:	4969      	ldr	r1, [pc, #420]	; (8001374 <run_customer+0x1fc>)
 80011d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011d2:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 80011d6:	4638      	mov	r0, r7
 80011d8:	3328      	adds	r3, #40	; 0x28
 80011da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011dc:	f7ff fde6 	bl	8000dac <clock_increment>
 80011e0:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80011e4:	463a      	mov	r2, r7
 80011e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (int i = 0; i < waiting_customers; i++){
 80011ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ee:	3301      	adds	r3, #1
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
 80011f2:	4b61      	ldr	r3, [pc, #388]	; (8001378 <run_customer+0x200>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbe4      	blt.n	80011c6 <run_customer+0x4e>
	}

	// add new customer if enough time has passed
	if (clock_compare(Clock, new_customer_time) == 1 && clock_compare(Clock, fiveOclockSomewhere) == 2){
 80011fc:	4b5f      	ldr	r3, [pc, #380]	; (800137c <run_customer+0x204>)
 80011fe:	4a60      	ldr	r2, [pc, #384]	; (8001380 <run_customer+0x208>)
 8001200:	466c      	mov	r4, sp
 8001202:	1d19      	adds	r1, r3, #4
 8001204:	c903      	ldmia	r1, {r0, r1}
 8001206:	e884 0003 	stmia.w	r4, {r0, r1}
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	ca07      	ldmia	r2, {r0, r1, r2}
 800120e:	f7ff fe31 	bl	8000e74 <clock_compare>
 8001212:	4603      	mov	r3, r0
 8001214:	2b01      	cmp	r3, #1
 8001216:	d17d      	bne.n	8001314 <run_customer+0x19c>
 8001218:	4b5a      	ldr	r3, [pc, #360]	; (8001384 <run_customer+0x20c>)
 800121a:	4a59      	ldr	r2, [pc, #356]	; (8001380 <run_customer+0x208>)
 800121c:	466c      	mov	r4, sp
 800121e:	1d19      	adds	r1, r3, #4
 8001220:	c903      	ldmia	r1, {r0, r1}
 8001222:	e884 0003 	stmia.w	r4, {r0, r1}
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	ca07      	ldmia	r2, {r0, r1, r2}
 800122a:	f7ff fe23 	bl	8000e74 <clock_compare>
 800122e:	4603      	mov	r3, r0
 8001230:	2b02      	cmp	r3, #2
 8001232:	d16f      	bne.n	8001314 <run_customer+0x19c>
//		char buf[20];
//				sprintf(buf, "\r\n\r\n%d\r\n\r\n", waiting[1]->id);
//				HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), 100);
		HAL_RNG_GenerateRandomNumber(&hrng, random_service_time);
 8001234:	4b54      	ldr	r3, [pc, #336]	; (8001388 <run_customer+0x210>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	4854      	ldr	r0, [pc, #336]	; (800138c <run_customer+0x214>)
 800123c:	f003 fd55 	bl	8004cea <HAL_RNG_GenerateRandomNumber>
//		WallClock service_time = { .hour = 0, .minute = (*random_service_time % 7), .second = (*random_service_time % 60)};
		WallClock service_time = { .hour = 0, .minute = 2, .second = 31};
 8001240:	4a53      	ldr	r2, [pc, #332]	; (8001390 <run_customer+0x218>)
 8001242:	f107 0320 	add.w	r3, r7, #32
 8001246:	ca07      	ldmia	r2, {r0, r1, r2}
 8001248:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Customer *c = malloc(sizeof(Customer));
 800124c:	2034      	movs	r0, #52	; 0x34
 800124e:	f008 f8ad 	bl	80093ac <malloc>
 8001252:	4603      	mov	r3, r0
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
		c->service_time = service_time;
 8001256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001258:	3304      	adds	r3, #4
 800125a:	f107 0220 	add.w	r2, r7, #32
 800125e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001260:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		c->id = ++total_customers;
 8001264:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <run_customer+0x21c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	4a4a      	ldr	r2, [pc, #296]	; (8001394 <run_customer+0x21c>)
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b49      	ldr	r3, [pc, #292]	; (8001394 <run_customer+0x21c>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001274:	601a      	str	r2, [r3, #0]
		c->entered_queue_time = Clock;
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001278:	4a41      	ldr	r2, [pc, #260]	; (8001380 <run_customer+0x208>)
 800127a:	3310      	adds	r3, #16
 800127c:	ca07      	ldmia	r2, {r0, r1, r2}
 800127e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		c->total_queue_time = (WallClock) {.hour = 0, .minute = 0, .second = 0};
 8001282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001284:	2200      	movs	r2, #0
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
 8001288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128a:	2200      	movs	r2, #0
 800128c:	62da      	str	r2, [r3, #44]	; 0x2c
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	2200      	movs	r2, #0
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
		waiting[waiting_customers++] = c;
 8001294:	4b38      	ldr	r3, [pc, #224]	; (8001378 <run_customer+0x200>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	4937      	ldr	r1, [pc, #220]	; (8001378 <run_customer+0x200>)
 800129c:	600a      	str	r2, [r1, #0]
 800129e:	4935      	ldr	r1, [pc, #212]	; (8001374 <run_customer+0x1fc>)
 80012a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		HAL_RNG_GenerateRandomNumber(&hrng, random_new_customer);
 80012a6:	4b3c      	ldr	r3, [pc, #240]	; (8001398 <run_customer+0x220>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4619      	mov	r1, r3
 80012ac:	4837      	ldr	r0, [pc, #220]	; (800138c <run_customer+0x214>)
 80012ae:	f003 fd1c 	bl	8004cea <HAL_RNG_GenerateRandomNumber>
		new_customer_time.hour = 0;
 80012b2:	4b32      	ldr	r3, [pc, #200]	; (800137c <run_customer+0x204>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
		new_customer_time.minute = (*random_new_customer % 5);
 80012b8:	4b37      	ldr	r3, [pc, #220]	; (8001398 <run_customer+0x220>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6819      	ldr	r1, [r3, #0]
 80012be:	4b37      	ldr	r3, [pc, #220]	; (800139c <run_customer+0x224>)
 80012c0:	fba3 2301 	umull	r2, r3, r3, r1
 80012c4:	089a      	lsrs	r2, r3, #2
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	1aca      	subs	r2, r1, r3
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <run_customer+0x204>)
 80012d0:	605a      	str	r2, [r3, #4]
		new_customer_time.second = (*random_new_customer % 60);
 80012d2:	4b31      	ldr	r3, [pc, #196]	; (8001398 <run_customer+0x220>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6819      	ldr	r1, [r3, #0]
 80012d8:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <run_customer+0x228>)
 80012da:	fba3 2301 	umull	r2, r3, r3, r1
 80012de:	095a      	lsrs	r2, r3, #5
 80012e0:	4613      	mov	r3, r2
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	1aca      	subs	r2, r1, r3
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <run_customer+0x204>)
 80012ec:	609a      	str	r2, [r3, #8]
		new_customer_time = add_clocks(new_customer_time, Clock);
 80012ee:	4e23      	ldr	r6, [pc, #140]	; (800137c <run_customer+0x204>)
 80012f0:	463d      	mov	r5, r7
 80012f2:	4c22      	ldr	r4, [pc, #136]	; (800137c <run_customer+0x204>)
 80012f4:	4a22      	ldr	r2, [pc, #136]	; (8001380 <run_customer+0x208>)
 80012f6:	466b      	mov	r3, sp
 80012f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80012fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012fe:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001302:	4628      	mov	r0, r5
 8001304:	f7ff fd7c 	bl	8000e00 <add_clocks>
 8001308:	4634      	mov	r4, r6
 800130a:	463b      	mov	r3, r7
 800130c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001310:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//		sprintf(buf, "\r\n\r\n%d:%d:%d\r\n\r\n", &waiting[0]->service_time.hour, &waiting[0]->service_time.minute, &waiting[0]->service_time.second);
//				print(buf);
	}

	// update max customers waiting
	if (max_customer_waiting < waiting_customers){
 8001314:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <run_customer+0x22c>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <run_customer+0x200>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	da03      	bge.n	8001328 <run_customer+0x1b0>
		max_customer_waiting = waiting_customers;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <run_customer+0x200>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <run_customer+0x22c>)
 8001326:	6013      	str	r3, [r2, #0]

//	uint32_t display_num = 0;



	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	2110      	movs	r1, #16
 800132c:	481e      	ldr	r0, [pc, #120]	; (80013a8 <run_customer+0x230>)
 800132e:	f002 f94d 	bl	80035cc <HAL_GPIO_WritePin>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, 0xC0);
 8001332:	23c0      	movs	r3, #192	; 0xc0
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800133e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001346:	f000 f831 	bl	80013ac <shiftOut>
	shiftOut(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin, SHLD_D7_SEG7_Clock_GPIO_Port, SHLD_D7_SEG7_Clock_Pin, 0);
 800134a:	2300      	movs	r3, #0
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001352:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001356:	f44f 7100 	mov.w	r1, #512	; 0x200
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f000 f825 	bl	80013ac <shiftOut>
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 8001362:	2201      	movs	r2, #1
 8001364:	2110      	movs	r1, #16
 8001366:	4810      	ldr	r0, [pc, #64]	; (80013a8 <run_customer+0x230>)
 8001368:	f002 f930 	bl	80035cc <HAL_GPIO_WritePin>
}
 800136c:	bf00      	nop
 800136e:	373c      	adds	r7, #60	; 0x3c
 8001370:	46bd      	mov	sp, r7
 8001372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001374:	200000fc 	.word	0x200000fc
 8001378:	200000f8 	.word	0x200000f8
 800137c:	2000028c 	.word	0x2000028c
 8001380:	20000000 	.word	0x20000000
 8001384:	2000000c 	.word	0x2000000c
 8001388:	20000298 	.word	0x20000298
 800138c:	200002bc 	.word	0x200002bc
 8001390:	08009d1c 	.word	0x08009d1c
 8001394:	200002b8 	.word	0x200002b8
 8001398:	2000029c 	.word	0x2000029c
 800139c:	cccccccd 	.word	0xcccccccd
 80013a0:	88888889 	.word	0x88888889
 80013a4:	200000f4 	.word	0x200000f4
 80013a8:	48000400 	.word	0x48000400

080013ac <shiftOut>:

void shiftOut(GPIO_TypeDef* data_port, uint16_t data_pin, GPIO_TypeDef* clock_port, uint16_t clock_pin, uint8_t value) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	461a      	mov	r2, r3
 80013b8:	460b      	mov	r3, r1
 80013ba:	817b      	strh	r3, [r7, #10]
 80013bc:	4613      	mov	r3, r2
 80013be:	813b      	strh	r3, [r7, #8]
	for(int ii=0x80; ii; ii>>=1) {
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	e01d      	b.n	8001402 <shiftOut+0x56>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_RESET);
 80013c6:	893b      	ldrh	r3, [r7, #8]
 80013c8:	2200      	movs	r2, #0
 80013ca:	4619      	mov	r1, r3
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f002 f8fd 	bl	80035cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data_port, data_pin, (value&ii)!=0);
 80013d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	4013      	ands	r3, r2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	bf14      	ite	ne
 80013de:	2301      	movne	r3, #1
 80013e0:	2300      	moveq	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	897b      	ldrh	r3, [r7, #10]
 80013e8:	4619      	mov	r1, r3
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f002 f8ee 	bl	80035cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clock_port, clock_pin, GPIO_PIN_SET);
 80013f0:	893b      	ldrh	r3, [r7, #8]
 80013f2:	2201      	movs	r2, #1
 80013f4:	4619      	mov	r1, r3
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f002 f8e8 	bl	80035cc <HAL_GPIO_WritePin>
	for(int ii=0x80; ii; ii>>=1) {
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	105b      	asrs	r3, r3, #1
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1de      	bne.n	80013c6 <shiftOut+0x1a>
	}
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001418:	f001 fd88 	bl	8002f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141c:	f000 f862 	bl	80014e4 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001420:	f000 f92c 	bl	800167c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001424:	f000 f8fa 	bl	800161c <MX_USART2_UART_Init>
  MX_RNG_Init();
 8001428:	f000 f8ae 	bl	8001588 <MX_RNG_Init>
  MX_TIM6_Init();
 800142c:	f000 f8c0 	bl	80015b0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8001430:	481a      	ldr	r0, [pc, #104]	; (800149c <main+0x88>)
 8001432:	f003 fd87 	bl	8004f44 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001436:	f004 fe39 	bl	80060ac <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 800143a:	4819      	ldr	r0, [pc, #100]	; (80014a0 <main+0x8c>)
 800143c:	f004 ff2d 	bl	800629a <osMutexNew>
 8001440:	4603      	mov	r3, r0
 8001442:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <main+0x90>)
 8001444:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tellers */
  TellersHandle = osThreadNew(StartTellers, NULL, &Tellers_attributes);
 8001446:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <main+0x94>)
 8001448:	2100      	movs	r1, #0
 800144a:	4818      	ldr	r0, [pc, #96]	; (80014ac <main+0x98>)
 800144c:	f004 fe78 	bl	8006140 <osThreadNew>
 8001450:	4603      	mov	r3, r0
 8001452:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <main+0x9c>)
 8001454:	6013      	str	r3, [r2, #0]

  /* creation of Customers */
  CustomersHandle = osThreadNew(StartCustomers, NULL, &Customers_attributes);
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <main+0xa0>)
 8001458:	2100      	movs	r1, #0
 800145a:	4817      	ldr	r0, [pc, #92]	; (80014b8 <main+0xa4>)
 800145c:	f004 fe70 	bl	8006140 <osThreadNew>
 8001460:	4603      	mov	r3, r0
 8001462:	4a16      	ldr	r2, [pc, #88]	; (80014bc <main+0xa8>)
 8001464:	6013      	str	r3, [r2, #0]

  /* creation of Clock */
  ClockHandle = osThreadNew(StartClock, NULL, &Clock_attributes);
 8001466:	4a16      	ldr	r2, [pc, #88]	; (80014c0 <main+0xac>)
 8001468:	2100      	movs	r1, #0
 800146a:	4816      	ldr	r0, [pc, #88]	; (80014c4 <main+0xb0>)
 800146c:	f004 fe68 	bl	8006140 <osThreadNew>
 8001470:	4603      	mov	r3, r0
 8001472:	4a15      	ldr	r2, [pc, #84]	; (80014c8 <main+0xb4>)
 8001474:	6013      	str	r3, [r2, #0]

  /* creation of Manager */
  ManagerHandle = osThreadNew(StartManager, NULL, &Manager_attributes);
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <main+0xb8>)
 8001478:	2100      	movs	r1, #0
 800147a:	4815      	ldr	r0, [pc, #84]	; (80014d0 <main+0xbc>)
 800147c:	f004 fe60 	bl	8006140 <osThreadNew>
 8001480:	4603      	mov	r3, r0
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <main+0xc0>)
 8001484:	6013      	str	r3, [r2, #0]

  /* creation of Breaker */
  BreakerHandle = osThreadNew(StartBreaker, NULL, &Breaker_attributes);
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <main+0xc4>)
 8001488:	2100      	movs	r1, #0
 800148a:	4814      	ldr	r0, [pc, #80]	; (80014dc <main+0xc8>)
 800148c:	f004 fe58 	bl	8006140 <osThreadNew>
 8001490:	4603      	mov	r3, r0
 8001492:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <main+0xcc>)
 8001494:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001496:	f004 fe2d 	bl	80060f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800149a:	e7fe      	b.n	800149a <main+0x86>
 800149c:	200002cc 	.word	0x200002cc
 80014a0:	0800a0bc 	.word	0x0800a0bc
 80014a4:	200003b4 	.word	0x200003b4
 80014a8:	0800a008 	.word	0x0800a008
 80014ac:	080017d5 	.word	0x080017d5
 80014b0:	200003a0 	.word	0x200003a0
 80014b4:	0800a02c 	.word	0x0800a02c
 80014b8:	08001805 	.word	0x08001805
 80014bc:	200003a4 	.word	0x200003a4
 80014c0:	0800a050 	.word	0x0800a050
 80014c4:	08001835 	.word	0x08001835
 80014c8:	200003a8 	.word	0x200003a8
 80014cc:	0800a074 	.word	0x0800a074
 80014d0:	0800198d 	.word	0x0800198d
 80014d4:	200003ac 	.word	0x200003ac
 80014d8:	0800a098 	.word	0x0800a098
 80014dc:	080019b9 	.word	0x080019b9
 80014e0:	200003b0 	.word	0x200003b0

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b096      	sub	sp, #88	; 0x58
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2244      	movs	r2, #68	; 0x44
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f008 f82e 	bl	8009554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	463b      	mov	r3, r7
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001506:	f44f 7000 	mov.w	r0, #512	; 0x200
 800150a:	f002 f885 	bl	8003618 <HAL_PWREx_ControlVoltageScaling>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001514:	f000 fa68 	bl	80019e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001518:	2302      	movs	r3, #2
 800151a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001520:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001522:	2310      	movs	r3, #16
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001526:	2302      	movs	r3, #2
 8001528:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152a:	2302      	movs	r3, #2
 800152c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800152e:	2301      	movs	r3, #1
 8001530:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001532:	230a      	movs	r3, #10
 8001534:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001536:	2307      	movs	r3, #7
 8001538:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800153a:	2302      	movs	r3, #2
 800153c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800153e:	2302      	movs	r3, #2
 8001540:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4618      	mov	r0, r3
 8001548:	f002 f8bc 	bl	80036c4 <HAL_RCC_OscConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001552:	f000 fa49 	bl	80019e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	230f      	movs	r3, #15
 8001558:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155a:	2303      	movs	r3, #3
 800155c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800156a:	463b      	mov	r3, r7
 800156c:	2104      	movs	r1, #4
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fc84 	bl	8003e7c <HAL_RCC_ClockConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800157a:	f000 fa35 	bl	80019e8 <Error_Handler>
  }
}
 800157e:	bf00      	nop
 8001580:	3758      	adds	r7, #88	; 0x58
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_RNG_Init+0x20>)
 800158e:	4a07      	ldr	r2, [pc, #28]	; (80015ac <MX_RNG_Init+0x24>)
 8001590:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_RNG_Init+0x20>)
 8001594:	f003 fb52 	bl	8004c3c <HAL_RNG_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800159e:	f000 fa23 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200002bc 	.word	0x200002bc
 80015ac:	50060800 	.word	0x50060800

080015b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_TIM6_Init+0x64>)
 80015c2:	4a15      	ldr	r2, [pc, #84]	; (8001618 <MX_TIM6_Init+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 125;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_TIM6_Init+0x64>)
 80015c8:	227d      	movs	r2, #125	; 0x7d
 80015ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_TIM6_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_TIM6_Init+0x64>)
 80015d4:	2264      	movs	r2, #100	; 0x64
 80015d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_TIM6_Init+0x64>)
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_TIM6_Init+0x64>)
 80015e0:	f003 fc58 	bl	8004e94 <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80015ea:	f000 f9fd 	bl	80019e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <MX_TIM6_Init+0x64>)
 80015fc:	f003 fed6 	bl	80053ac <HAL_TIMEx_MasterConfigSynchronization>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001606:	f000 f9ef 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200002cc 	.word	0x200002cc
 8001618:	40001000 	.word	0x40001000

0800161c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001622:	4a15      	ldr	r2, [pc, #84]	; (8001678 <MX_USART2_UART_Init+0x5c>)
 8001624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001626:	4b13      	ldr	r3, [pc, #76]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <MX_USART2_UART_Init+0x58>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b09      	ldr	r3, [pc, #36]	; (8001674 <MX_USART2_UART_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <MX_USART2_UART_Init+0x58>)
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_USART2_UART_Init+0x58>)
 8001660:	f003 ff4a 	bl	80054f8 <HAL_UART_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800166a:	f000 f9bd 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000318 	.word	0x20000318
 8001678:	40004400 	.word	0x40004400

0800167c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001692:	4b45      	ldr	r3, [pc, #276]	; (80017a8 <MX_GPIO_Init+0x12c>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	4a44      	ldr	r2, [pc, #272]	; (80017a8 <MX_GPIO_Init+0x12c>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	4b42      	ldr	r3, [pc, #264]	; (80017a8 <MX_GPIO_Init+0x12c>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016aa:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <MX_GPIO_Init+0x12c>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ae:	4a3e      	ldr	r2, [pc, #248]	; (80017a8 <MX_GPIO_Init+0x12c>)
 80016b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b6:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <MX_GPIO_Init+0x12c>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <MX_GPIO_Init+0x12c>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	4a38      	ldr	r2, [pc, #224]	; (80017a8 <MX_GPIO_Init+0x12c>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ce:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <MX_GPIO_Init+0x12c>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	4b33      	ldr	r3, [pc, #204]	; (80017a8 <MX_GPIO_Init+0x12c>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a32      	ldr	r2, [pc, #200]	; (80017a8 <MX_GPIO_Init+0x12c>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <MX_GPIO_Init+0x12c>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2120      	movs	r1, #32
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f001 ff67 	bl	80035cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001704:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4825      	ldr	r0, [pc, #148]	; (80017ac <MX_GPIO_Init+0x130>)
 8001716:	f001 fd97 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800171a:	2303      	movs	r3, #3
 800171c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171e:	2303      	movs	r3, #3
 8001720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	481f      	ldr	r0, [pc, #124]	; (80017ac <MX_GPIO_Init+0x130>)
 800172e:	f001 fd8b 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 Switch1_Pin Switch2_Pin PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|Switch1_Pin|Switch2_Pin|GPIO_PIN_10;
 8001732:	f240 4313 	movw	r3, #1043	; 0x413
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174a:	f001 fd7d 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800174e:	2320      	movs	r3, #32
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001752:	2301      	movs	r3, #1
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001768:	f001 fd6e 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch3_Pin PB10 PB4 */
  GPIO_InitStruct.Pin = Switch3_Pin|GPIO_PIN_10|GPIO_PIN_4;
 800176c:	f240 4311 	movw	r3, #1041	; 0x411
 8001770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	480b      	ldr	r0, [pc, #44]	; (80017b0 <MX_GPIO_Init+0x134>)
 8001782:	f001 fd61 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <MX_GPIO_Init+0x130>)
 800179a:	f001 fd55 	bl	8003248 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	48000800 	.word	0x48000800
 80017b0:	48000400 	.word	0x48000400

080017b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	update_flag = 1;
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	200003b8 	.word	0x200003b8

080017d4 <StartTellers>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTellers */
void StartTellers(void *argument)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//Initialize 3 tellers
  /* Infinite loop */
	initialize_tellers();
 80017dc:	f000 fc86 	bl	80020ec <initialize_tellers>
  for(;;)
  {
    osMutexAcquire(MUTEXHandle, osWaitForever);
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <StartTellers+0x2c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017e8:	4618      	mov	r0, r3
 80017ea:	f004 fddc 	bl	80063a6 <osMutexAcquire>
    manage_tellers();
 80017ee:	f000 fe03 	bl	80023f8 <manage_tellers>
    osMutexRelease(MUTEXHandle);
 80017f2:	4b03      	ldr	r3, [pc, #12]	; (8001800 <StartTellers+0x2c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 fe20 	bl	800643c <osMutexRelease>
    osMutexAcquire(MUTEXHandle, osWaitForever);
 80017fc:	e7f0      	b.n	80017e0 <StartTellers+0xc>
 80017fe:	bf00      	nop
 8001800:	200003b4 	.word	0x200003b4

08001804 <StartCustomers>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCustomers */
void StartCustomers(void *argument)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCustomers */
  /* Infinite loop */
  init_customer();
 800180c:	f7ff fc3e 	bl	800108c <init_customer>
  for(;;)
  {

	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <StartCustomers+0x2c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001818:	4618      	mov	r0, r3
 800181a:	f004 fdc4 	bl	80063a6 <osMutexAcquire>
	run_customer();
 800181e:	f7ff fcab 	bl	8001178 <run_customer>
	osMutexRelease(MUTEXHandle);
 8001822:	4b03      	ldr	r3, [pc, #12]	; (8001830 <StartCustomers+0x2c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f004 fe08 	bl	800643c <osMutexRelease>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 800182c:	e7f0      	b.n	8001810 <StartCustomers+0xc>
 800182e:	bf00      	nop
 8001830:	200003b4 	.word	0x200003b4

08001834 <StartClock>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClock */
void StartClock(void *argument)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b0c9      	sub	sp, #292	; 0x124
 8001838:	af02      	add	r7, sp, #8
 800183a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800183e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001842:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartClock */
  /* Infinite loop */
	Clock = day_init(Clock);
 8001844:	4c47      	ldr	r4, [pc, #284]	; (8001964 <StartClock+0x130>)
 8001846:	4638      	mov	r0, r7
 8001848:	4b46      	ldr	r3, [pc, #280]	; (8001964 <StartClock+0x130>)
 800184a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184c:	f7ff fa95 	bl	8000d7a <day_init>
 8001850:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001854:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8001858:	4623      	mov	r3, r4
 800185a:	ca07      	ldmia	r2, {r0, r1, r2}
 800185c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for(;;)
  {
	if(update_flag == 1){
 8001860:	4b41      	ldr	r3, [pc, #260]	; (8001968 <StartClock+0x134>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d175      	bne.n	8001954 <StartClock+0x120>
	char buffer[256];
	osMutexAcquire(MUTEXHandle, osWaitForever);
 8001868:	4b40      	ldr	r3, [pc, #256]	; (800196c <StartClock+0x138>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001870:	4618      	mov	r0, r3
 8001872:	f004 fd98 	bl	80063a6 <osMutexAcquire>
    Clock = clock_increment(Clock);
 8001876:	4c3b      	ldr	r4, [pc, #236]	; (8001964 <StartClock+0x130>)
 8001878:	4638      	mov	r0, r7
 800187a:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <StartClock+0x130>)
 800187c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800187e:	f7ff fa95 	bl	8000dac <clock_increment>
 8001882:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001886:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800188a:	4623      	mov	r3, r4
 800188c:	ca07      	ldmia	r2, {r0, r1, r2}
 800188e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    osMutexRelease(MUTEXHandle);
 8001892:	4b36      	ldr	r3, [pc, #216]	; (800196c <StartClock+0x138>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f004 fdd0 	bl	800643c <osMutexRelease>
	if(/*(Clock.minute  % 2) == 0 &&*/ (Clock.second % 60) == 30){
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <StartClock+0x130>)
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	4b33      	ldr	r3, [pc, #204]	; (8001970 <StartClock+0x13c>)
 80018a2:	fb83 1302 	smull	r1, r3, r3, r2
 80018a6:	4413      	add	r3, r2
 80018a8:	1159      	asrs	r1, r3, #5
 80018aa:	17d3      	asrs	r3, r2, #31
 80018ac:	1ac9      	subs	r1, r1, r3
 80018ae:	460b      	mov	r3, r1
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	1a5b      	subs	r3, r3, r1
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	1ad1      	subs	r1, r2, r3
 80018b8:	291e      	cmp	r1, #30
 80018ba:	d14b      	bne.n	8001954 <StartClock+0x120>
		sprintf(buffer, "Current time: %d:%d:%d \r\n", Clock.hour, Clock.minute, Clock.second);
 80018bc:	4b29      	ldr	r3, [pc, #164]	; (8001964 <StartClock+0x130>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <StartClock+0x130>)
 80018c2:	6859      	ldr	r1, [r3, #4]
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <StartClock+0x130>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f107 0018 	add.w	r0, r7, #24
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	460b      	mov	r3, r1
 80018d0:	4928      	ldr	r1, [pc, #160]	; (8001974 <StartClock+0x140>)
 80018d2:	f007 fe1f 	bl	8009514 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 80018d6:	f107 0318 	add.w	r3, r7, #24
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fc78 	bl	80001d0 <strlen>
 80018e0:	4603      	mov	r3, r0
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	f107 0118 	add.w	r1, r7, #24
 80018e8:	2364      	movs	r3, #100	; 0x64
 80018ea:	4823      	ldr	r0, [pc, #140]	; (8001978 <StartClock+0x144>)
 80018ec:	f003 fe52 	bl	8005594 <HAL_UART_Transmit>
		sprintf(buffer,"Customers waiting in Queue: %d \r\n", waiting_customers);
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <StartClock+0x148>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	f107 0318 	add.w	r3, r7, #24
 80018f8:	4921      	ldr	r1, [pc, #132]	; (8001980 <StartClock+0x14c>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f007 fe0a 	bl	8009514 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001900:	f107 0318 	add.w	r3, r7, #24
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fc63 	bl	80001d0 <strlen>
 800190a:	4603      	mov	r3, r0
 800190c:	b29a      	uxth	r2, r3
 800190e:	f107 0118 	add.w	r1, r7, #24
 8001912:	2364      	movs	r3, #100	; 0x64
 8001914:	4818      	ldr	r0, [pc, #96]	; (8001978 <StartClock+0x144>)
 8001916:	f003 fe3d 	bl	8005594 <HAL_UART_Transmit>
		sprintf(buffer,"Teller 1: %d Teller 2: %d Teller 3: %d \r\n", tellers[1].status,tellers[2].status,tellers[3].status);
 800191a:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <StartClock+0x150>)
 800191c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001920:	4b18      	ldr	r3, [pc, #96]	; (8001984 <StartClock+0x150>)
 8001922:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <StartClock+0x150>)
 8001928:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800192c:	f107 0018 	add.w	r0, r7, #24
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	460b      	mov	r3, r1
 8001934:	4914      	ldr	r1, [pc, #80]	; (8001988 <StartClock+0x154>)
 8001936:	f007 fded 	bl	8009514 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 800193a:	f107 0318 	add.w	r3, r7, #24
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fc46 	bl	80001d0 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	f107 0118 	add.w	r1, r7, #24
 800194c:	2364      	movs	r3, #100	; 0x64
 800194e:	480a      	ldr	r0, [pc, #40]	; (8001978 <StartClock+0x144>)
 8001950:	f003 fe20 	bl	8005594 <HAL_UART_Transmit>
	}
	}
    update_flag = 0;
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <StartClock+0x134>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
    osDelay(1);
 800195a:	2001      	movs	r0, #1
 800195c:	f004 fc82 	bl	8006264 <osDelay>
	if(update_flag == 1){
 8001960:	e77e      	b.n	8001860 <StartClock+0x2c>
 8001962:	bf00      	nop
 8001964:	20000000 	.word	0x20000000
 8001968:	200003b8 	.word	0x200003b8
 800196c:	200003b4 	.word	0x200003b4
 8001970:	88888889 	.word	0x88888889
 8001974:	08009d5c 	.word	0x08009d5c
 8001978:	20000318 	.word	0x20000318
 800197c:	200000f8 	.word	0x200000f8
 8001980:	08009d78 	.word	0x08009d78
 8001984:	200003c0 	.word	0x200003c0
 8001988:	08009d9c 	.word	0x08009d9c

0800198c <StartManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManager */
void StartManager(void *argument)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManager */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <StartManager+0x28>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800199c:	4618      	mov	r0, r3
 800199e:	f004 fd02 	bl	80063a6 <osMutexAcquire>
	  run_manager();
 80019a2:	f000 f827 	bl	80019f4 <run_manager>
	  osMutexRelease(MUTEXHandle);
 80019a6:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <StartManager+0x28>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f004 fd46 	bl	800643c <osMutexRelease>
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 80019b0:	e7f0      	b.n	8001994 <StartManager+0x8>
 80019b2:	bf00      	nop
 80019b4:	200003b4 	.word	0x200003b4

080019b8 <StartBreaker>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBreaker */
void StartBreaker(void *argument)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBreaker */
  /* Infinite loop */
	init_breaker();
 80019c0:	f7fe fddc 	bl	800057c <init_breaker>
  for(;;)
  {
	osMutexAcquire(MUTEXHandle, osWaitForever);
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <StartBreaker+0x2c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019cc:	4618      	mov	r0, r3
 80019ce:	f004 fcea 	bl	80063a6 <osMutexAcquire>
	run_breaker();
 80019d2:	f7fe ff5f 	bl	8000894 <run_breaker>
	osMutexRelease(MUTEXHandle);
 80019d6:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <StartBreaker+0x2c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f004 fd2e 	bl	800643c <osMutexRelease>
	osMutexAcquire(MUTEXHandle, osWaitForever);
 80019e0:	e7f0      	b.n	80019c4 <StartBreaker+0xc>
 80019e2:	bf00      	nop
 80019e4:	200003b4 	.word	0x200003b4

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ec:	b672      	cpsid	i
}
 80019ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <Error_Handler+0x8>
	...

080019f4 <run_manager>:
#include "clock.h"
#include "teller.h"
#include "stdio.h"
#include "string.h"

void run_manager(){
 80019f4:	b5b0      	push	{r4, r5, r7, lr}
 80019f6:	b0d4      	sub	sp, #336	; 0x150
 80019f8:	af04      	add	r7, sp, #16
	if (clock_compare(Clock, fiveOclockSomewhere) == 1 && waiting_customers == 0){
 80019fa:	4b91      	ldr	r3, [pc, #580]	; (8001c40 <run_manager+0x24c>)
 80019fc:	4a91      	ldr	r2, [pc, #580]	; (8001c44 <run_manager+0x250>)
 80019fe:	466c      	mov	r4, sp
 8001a00:	1d19      	adds	r1, r3, #4
 8001a02:	c903      	ldmia	r1, {r0, r1}
 8001a04:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a0c:	f7ff fa32 	bl	8000e74 <clock_compare>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	f040 81e3 	bne.w	8001dde <run_manager+0x3ea>
 8001a18:	4b8b      	ldr	r3, [pc, #556]	; (8001c48 <run_manager+0x254>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f040 81de 	bne.w	8001dde <run_manager+0x3ea>
		// Everyone stats
		int total_customers = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		WallClock total_service_time = {.hour = 0, .minute = 0, .second = 0};
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		WallClock avg_wait_time_customer = {.hour = 0, .minute = 0, .second = 0};
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		WallClock avg_time_with_teller = {.hour = 0, .minute = 0, .second = 0};
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001a52:	2300      	movs	r3, #0
 8001a54:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		WallClock avg_wait_time_teller = {.hour = 0, .minute = 0, .second = 0};
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		//WallClock max_queue_time = {.hour = 0, .minute = 0, .second = 0};
		// Individual Teller stats
		for (int i = 1; i < 4; i++){
 8001a70:	2301      	movs	r3, #1
 8001a72:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001a76:	e028      	b.n	8001aca <run_manager+0xd6>
			total_customers += tellers[i].customers_served;
 8001a78:	4a74      	ldr	r2, [pc, #464]	; (8001c4c <run_manager+0x258>)
 8001a7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a7e:	21b0      	movs	r1, #176	; 0xb0
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	3318      	adds	r3, #24
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001a8e:	4413      	add	r3, r2
 8001a90:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
			total_service_time = add_clocks(total_service_time, tellers[i].total_time_working);
 8001a94:	f507 7594 	add.w	r5, r7, #296	; 0x128
 8001a98:	4a6c      	ldr	r2, [pc, #432]	; (8001c4c <run_manager+0x258>)
 8001a9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a9e:	21b0      	movs	r1, #176	; 0xb0
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3318      	adds	r3, #24
 8001aa8:	466c      	mov	r4, sp
 8001aaa:	3304      	adds	r3, #4
 8001aac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ab0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ab4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aba:	4628      	mov	r0, r5
 8001abc:	f7ff f9a0 	bl	8000e00 <add_clocks>
		for (int i = 1; i < 4; i++){
 8001ac0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001aca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	ddd2      	ble.n	8001a78 <run_manager+0x84>
		}

		char buffer[256];
		sprintf(buffer, "\r\n-------------------- End of Day Report ---------------------\r\n");
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	495e      	ldr	r1, [pc, #376]	; (8001c50 <run_manager+0x25c>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f007 fd1c 	bl	8009514 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fb76 	bl	80001d0 <strlen>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	1d39      	adds	r1, r7, #4
 8001aea:	2364      	movs	r3, #100	; 0x64
 8001aec:	4859      	ldr	r0, [pc, #356]	; (8001c54 <run_manager+0x260>)
 8001aee:	f003 fd51 	bl	8005594 <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced: %d\r\n", total_customers);
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001af8:	4957      	ldr	r1, [pc, #348]	; (8001c58 <run_manager+0x264>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f007 fd0a 	bl	8009514 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fb64 	bl	80001d0 <strlen>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	1d39      	adds	r1, r7, #4
 8001b0e:	2364      	movs	r3, #100	; 0x64
 8001b10:	4850      	ldr	r0, [pc, #320]	; (8001c54 <run_manager+0x260>)
 8001b12:	f003 fd3f 	bl	8005594 <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced by Teller 1: %d\r\n", tellers[1].customers_served);
 8001b16:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <run_manager+0x258>)
 8001b18:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	494f      	ldr	r1, [pc, #316]	; (8001c5c <run_manager+0x268>)
 8001b20:	4618      	mov	r0, r3
 8001b22:	f007 fcf7 	bl	8009514 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fb51 	bl	80001d0 <strlen>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	1d39      	adds	r1, r7, #4
 8001b34:	2364      	movs	r3, #100	; 0x64
 8001b36:	4847      	ldr	r0, [pc, #284]	; (8001c54 <run_manager+0x260>)
 8001b38:	f003 fd2c 	bl	8005594 <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced by Teller 2: %d\r\n", tellers[2].customers_served);
 8001b3c:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <run_manager+0x258>)
 8001b3e:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	4946      	ldr	r1, [pc, #280]	; (8001c60 <run_manager+0x26c>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f007 fce4 	bl	8009514 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fb3e 	bl	80001d0 <strlen>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	1d39      	adds	r1, r7, #4
 8001b5a:	2364      	movs	r3, #100	; 0x64
 8001b5c:	483d      	ldr	r0, [pc, #244]	; (8001c54 <run_manager+0x260>)
 8001b5e:	f003 fd19 	bl	8005594 <HAL_UART_Transmit>
		sprintf(buffer, "Customers serviced by Teller 3: %d\r\n", tellers[3].customers_served);
 8001b62:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <run_manager+0x258>)
 8001b64:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	493e      	ldr	r1, [pc, #248]	; (8001c64 <run_manager+0x270>)
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f007 fcd1 	bl	8009514 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fb2b 	bl	80001d0 <strlen>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	1d39      	adds	r1, r7, #4
 8001b80:	2364      	movs	r3, #100	; 0x64
 8001b82:	4834      	ldr	r0, [pc, #208]	; (8001c54 <run_manager+0x260>)
 8001b84:	f003 fd06 	bl	8005594 <HAL_UART_Transmit>

		sprintf(buffer, "Average customer wait time: %d:%d:%d\r\n", avg_wait_time_customer.hour, avg_wait_time_customer.minute, avg_wait_time_customer.second);
 8001b88:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001b8c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8001b90:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b94:	1d38      	adds	r0, r7, #4
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4933      	ldr	r1, [pc, #204]	; (8001c68 <run_manager+0x274>)
 8001b9c:	f007 fcba 	bl	8009514 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fb14 	bl	80001d0 <strlen>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	1d39      	adds	r1, r7, #4
 8001bae:	2364      	movs	r3, #100	; 0x64
 8001bb0:	4828      	ldr	r0, [pc, #160]	; (8001c54 <run_manager+0x260>)
 8001bb2:	f003 fcef 	bl	8005594 <HAL_UART_Transmit>
		sprintf(buffer, "Average customer time with Tellers: %d:%d:%d\r\n", avg_time_with_teller.hour, avg_time_with_teller.minute, avg_time_with_teller.second);
 8001bb6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001bba:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001bbe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001bc2:	1d38      	adds	r0, r7, #4
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4928      	ldr	r1, [pc, #160]	; (8001c6c <run_manager+0x278>)
 8001bca:	f007 fca3 	bl	8009514 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fafd 	bl	80001d0 <strlen>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	1d39      	adds	r1, r7, #4
 8001bdc:	2364      	movs	r3, #100	; 0x64
 8001bde:	481d      	ldr	r0, [pc, #116]	; (8001c54 <run_manager+0x260>)
 8001be0:	f003 fcd8 	bl	8005594 <HAL_UART_Transmit>
		sprintf(buffer, "Average teller wait time: %d:%d:%d\r\n", avg_wait_time_teller.hour, avg_wait_time_teller.minute, avg_wait_time_teller.second);
 8001be4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001be8:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8001bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001bf0:	1d38      	adds	r0, r7, #4
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	491e      	ldr	r1, [pc, #120]	; (8001c70 <run_manager+0x27c>)
 8001bf8:	f007 fc8c 	bl	8009514 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fae6 	bl	80001d0 <strlen>
 8001c04:	4603      	mov	r3, r0
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	1d39      	adds	r1, r7, #4
 8001c0a:	2364      	movs	r3, #100	; 0x64
 8001c0c:	4811      	ldr	r0, [pc, #68]	; (8001c54 <run_manager+0x260>)
 8001c0e:	f003 fcc1 	bl	8005594 <HAL_UART_Transmit>
		sprintf(buffer, "Max customers in queue: %d\r\n", max_customer_waiting);
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <run_manager+0x280>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	4917      	ldr	r1, [pc, #92]	; (8001c78 <run_manager+0x284>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f007 fc7a 	bl	8009514 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fad4 	bl	80001d0 <strlen>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	1d39      	adds	r1, r7, #4
 8001c2e:	2364      	movs	r3, #100	; 0x64
 8001c30:	4808      	ldr	r0, [pc, #32]	; (8001c54 <run_manager+0x260>)
 8001c32:	f003 fcaf 	bl	8005594 <HAL_UART_Transmit>

		for (int i = 1; i < 4; i++){
 8001c36:	2301      	movs	r3, #1
 8001c38:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001c3c:	e0ca      	b.n	8001dd4 <run_manager+0x3e0>
 8001c3e:	bf00      	nop
 8001c40:	2000000c 	.word	0x2000000c
 8001c44:	20000000 	.word	0x20000000
 8001c48:	200000f8 	.word	0x200000f8
 8001c4c:	200003c0 	.word	0x200003c0
 8001c50:	08009dc8 	.word	0x08009dc8
 8001c54:	20000318 	.word	0x20000318
 8001c58:	08009e0c 	.word	0x08009e0c
 8001c5c:	08009e28 	.word	0x08009e28
 8001c60:	08009e50 	.word	0x08009e50
 8001c64:	08009e78 	.word	0x08009e78
 8001c68:	08009ea0 	.word	0x08009ea0
 8001c6c:	08009ec8 	.word	0x08009ec8
 8001c70:	08009ef8 	.word	0x08009ef8
 8001c74:	200000f4 	.word	0x200000f4
 8001c78:	08009f20 	.word	0x08009f20
			sprintf(buffer, "Number of breaks for Teller %d: %d\r\n", i, tellers[i].num_breaks);
 8001c7c:	4a5a      	ldr	r2, [pc, #360]	; (8001de8 <run_manager+0x3f4>)
 8001c7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c82:	21b0      	movs	r1, #176	; 0xb0
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	4413      	add	r3, r2
 8001c8a:	3388      	adds	r3, #136	; 0x88
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	1d38      	adds	r0, r7, #4
 8001c90:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001c94:	4955      	ldr	r1, [pc, #340]	; (8001dec <run_manager+0x3f8>)
 8001c96:	f007 fc3d 	bl	8009514 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fa97 	bl	80001d0 <strlen>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	1d39      	adds	r1, r7, #4
 8001ca8:	2364      	movs	r3, #100	; 0x64
 8001caa:	4851      	ldr	r0, [pc, #324]	; (8001df0 <run_manager+0x3fc>)
 8001cac:	f003 fc72 	bl	8005594 <HAL_UART_Transmit>
			sprintf(buffer, "Average break time for Teller %d: %d:%d:%d\r\n", i, tellers[i].current_break.hour, tellers[i].current_break.minute, tellers[i].current_break.second); //calculate avg
 8001cb0:	4a4d      	ldr	r2, [pc, #308]	; (8001de8 <run_manager+0x3f4>)
 8001cb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001cb6:	21b0      	movs	r1, #176	; 0xb0
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	337c      	adds	r3, #124	; 0x7c
 8001cc0:	6819      	ldr	r1, [r3, #0]
 8001cc2:	4a49      	ldr	r2, [pc, #292]	; (8001de8 <run_manager+0x3f4>)
 8001cc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001cc8:	20b0      	movs	r0, #176	; 0xb0
 8001cca:	fb00 f303 	mul.w	r3, r0, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	3380      	adds	r3, #128	; 0x80
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4844      	ldr	r0, [pc, #272]	; (8001de8 <run_manager+0x3f4>)
 8001cd6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001cda:	24b0      	movs	r4, #176	; 0xb0
 8001cdc:	fb04 f202 	mul.w	r2, r4, r2
 8001ce0:	4402      	add	r2, r0
 8001ce2:	3284      	adds	r2, #132	; 0x84
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	1d38      	adds	r0, r7, #4
 8001ce8:	9201      	str	r2, [sp, #4]
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	460b      	mov	r3, r1
 8001cee:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001cf2:	4940      	ldr	r1, [pc, #256]	; (8001df4 <run_manager+0x400>)
 8001cf4:	f007 fc0e 	bl	8009514 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fa68 	bl	80001d0 <strlen>
 8001d00:	4603      	mov	r3, r0
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	1d39      	adds	r1, r7, #4
 8001d06:	2364      	movs	r3, #100	; 0x64
 8001d08:	4839      	ldr	r0, [pc, #228]	; (8001df0 <run_manager+0x3fc>)
 8001d0a:	f003 fc43 	bl	8005594 <HAL_UART_Transmit>
			sprintf(buffer, "Max break time for Teller %d: %d:%d:%d\r\n", i, tellers[i].max_break.hour, tellers[i].max_break.minute, tellers[i].max_break.second);
 8001d0e:	4a36      	ldr	r2, [pc, #216]	; (8001de8 <run_manager+0x3f4>)
 8001d10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d14:	21b0      	movs	r1, #176	; 0xb0
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	338c      	adds	r3, #140	; 0x8c
 8001d1e:	6819      	ldr	r1, [r3, #0]
 8001d20:	4a31      	ldr	r2, [pc, #196]	; (8001de8 <run_manager+0x3f4>)
 8001d22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d26:	20b0      	movs	r0, #176	; 0xb0
 8001d28:	fb00 f303 	mul.w	r3, r0, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3390      	adds	r3, #144	; 0x90
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	482d      	ldr	r0, [pc, #180]	; (8001de8 <run_manager+0x3f4>)
 8001d34:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001d38:	24b0      	movs	r4, #176	; 0xb0
 8001d3a:	fb04 f202 	mul.w	r2, r4, r2
 8001d3e:	4402      	add	r2, r0
 8001d40:	3294      	adds	r2, #148	; 0x94
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	1d38      	adds	r0, r7, #4
 8001d46:	9201      	str	r2, [sp, #4]
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001d50:	4929      	ldr	r1, [pc, #164]	; (8001df8 <run_manager+0x404>)
 8001d52:	f007 fbdf 	bl	8009514 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fa39 	bl	80001d0 <strlen>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	1d39      	adds	r1, r7, #4
 8001d64:	2364      	movs	r3, #100	; 0x64
 8001d66:	4822      	ldr	r0, [pc, #136]	; (8001df0 <run_manager+0x3fc>)
 8001d68:	f003 fc14 	bl	8005594 <HAL_UART_Transmit>
			sprintf(buffer, "Min break time for Teller %d: %d:%d:%d\r\n", i, tellers[i].min_break.hour, tellers[i].min_break.minute, tellers[i].min_break.second);
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <run_manager+0x3f4>)
 8001d6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d72:	21b0      	movs	r1, #176	; 0xb0
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	3398      	adds	r3, #152	; 0x98
 8001d7c:	6819      	ldr	r1, [r3, #0]
 8001d7e:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <run_manager+0x3f4>)
 8001d80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d84:	20b0      	movs	r0, #176	; 0xb0
 8001d86:	fb00 f303 	mul.w	r3, r0, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	339c      	adds	r3, #156	; 0x9c
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4815      	ldr	r0, [pc, #84]	; (8001de8 <run_manager+0x3f4>)
 8001d92:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001d96:	24b0      	movs	r4, #176	; 0xb0
 8001d98:	fb04 f202 	mul.w	r2, r4, r2
 8001d9c:	4402      	add	r2, r0
 8001d9e:	32a0      	adds	r2, #160	; 0xa0
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	1d38      	adds	r0, r7, #4
 8001da4:	9201      	str	r2, [sp, #4]
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	460b      	mov	r3, r1
 8001daa:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001dae:	4913      	ldr	r1, [pc, #76]	; (8001dfc <run_manager+0x408>)
 8001db0:	f007 fbb0 	bl	8009514 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 100);
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fa0a 	bl	80001d0 <strlen>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	1d39      	adds	r1, r7, #4
 8001dc2:	2364      	movs	r3, #100	; 0x64
 8001dc4:	480a      	ldr	r0, [pc, #40]	; (8001df0 <run_manager+0x3fc>)
 8001dc6:	f003 fbe5 	bl	8005594 <HAL_UART_Transmit>
		for (int i = 1; i < 4; i++){
 8001dca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001dd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	f77f af4f 	ble.w	8001c7c <run_manager+0x288>
		}
	}
}
 8001dde:	bf00      	nop
 8001de0:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bdb0      	pop	{r4, r5, r7, pc}
 8001de8:	200003c0 	.word	0x200003c0
 8001dec:	08009f40 	.word	0x08009f40
 8001df0:	20000318 	.word	0x20000318
 8001df4:	08009f68 	.word	0x08009f68
 8001df8:	08009f98 	.word	0x08009f98
 8001dfc:	08009fc4 	.word	0x08009fc4

08001e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6613      	str	r3, [r2, #96]	; 0x60
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_MspInit+0x4c>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	210f      	movs	r1, #15
 8001e3a:	f06f 0001 	mvn.w	r0, #1
 8001e3e:	f001 f9cc 	bl	80031da <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000

08001e50 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b0a6      	sub	sp, #152	; 0x98
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	2288      	movs	r2, #136	; 0x88
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f007 fb77 	bl	8009554 <memset>
  if(hrng->Instance==RNG)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <HAL_RNG_MspInit+0x90>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d133      	bne.n	8001ed8 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001e70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e74:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001e76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001e86:	2308      	movs	r3, #8
 8001e88:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001e8e:	2304      	movs	r3, #4
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001e92:	2302      	movs	r3, #2
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001e96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f002 fa0f 	bl	80042c4 <HAL_RCCEx_PeriphCLKConfig>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8001eac:	f7ff fd9c 	bl	80019e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <HAL_RNG_MspInit+0x94>)
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <HAL_RNG_MspInit+0x94>)
 8001eb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_RNG_MspInit+0x94>)
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 5, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2105      	movs	r1, #5
 8001ecc:	2050      	movs	r0, #80	; 0x50
 8001ece:	f001 f984 	bl	80031da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8001ed2:	2050      	movs	r0, #80	; 0x50
 8001ed4:	f001 f99d 	bl	8003212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001ed8:	bf00      	nop
 8001eda:	3798      	adds	r7, #152	; 0x98
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	50060800 	.word	0x50060800
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <HAL_TIM_Base_MspInit+0x44>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d113      	bne.n	8001f22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_TIM_Base_MspInit+0x48>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_TIM_Base_MspInit+0x48>)
 8001f00:	f043 0310 	orr.w	r3, r3, #16
 8001f04:	6593      	str	r3, [r2, #88]	; 0x58
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_TIM_Base_MspInit+0x48>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2105      	movs	r1, #5
 8001f16:	2036      	movs	r0, #54	; 0x36
 8001f18:	f001 f95f 	bl	80031da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f1c:	2036      	movs	r0, #54	; 0x36
 8001f1e:	f001 f978 	bl	8003212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40001000 	.word	0x40001000
 8001f30:	40021000 	.word	0x40021000

08001f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b0ac      	sub	sp, #176	; 0xb0
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2288      	movs	r2, #136	; 0x88
 8001f52:	2100      	movs	r1, #0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f007 fafd 	bl	8009554 <memset>
  if(huart->Instance==USART2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a21      	ldr	r2, [pc, #132]	; (8001fe4 <HAL_UART_MspInit+0xb0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d13b      	bne.n	8001fdc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f64:	2302      	movs	r3, #2
 8001f66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 f9a7 	bl	80042c4 <HAL_RCCEx_PeriphCLKConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f7c:	f7ff fd34 	bl	80019e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_UART_MspInit+0xb4>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	4a18      	ldr	r2, [pc, #96]	; (8001fe8 <HAL_UART_MspInit+0xb4>)
 8001f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_UART_MspInit+0xb4>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <HAL_UART_MspInit+0xb4>)
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9c:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <HAL_UART_MspInit+0xb4>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_UART_MspInit+0xb4>)
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fb0:	230c      	movs	r3, #12
 8001fb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fc8:	2307      	movs	r3, #7
 8001fca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd8:	f001 f936 	bl	8003248 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fdc:	bf00      	nop
 8001fde:	37b0      	adds	r7, #176	; 0xb0
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40004400 	.word	0x40004400
 8001fe8:	40021000 	.word	0x40021000

08001fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <NMI_Handler+0x4>

08001ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <HardFault_Handler+0x4>

08001ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <MemManage_Handler+0x4>

08001ffe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <BusFault_Handler+0x4>

08002004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <UsageFault_Handler+0x4>

0800200a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800201c:	f000 ffe2 	bl	8002fe4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002020:	f006 f860 	bl	80080e4 <xTaskGetSchedulerState>
 8002024:	4603      	mov	r3, r0
 8002026:	2b01      	cmp	r3, #1
 8002028:	d001      	beq.n	800202e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800202a:	f006 ff45 	bl	8008eb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <TIM6_DAC_IRQHandler+0x10>)
 800203a:	f002 fff3 	bl	8005024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200002cc 	.word	0x200002cc

08002048 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <RNG_IRQHandler+0x10>)
 800204e:	f002 fea2 	bl	8004d96 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200002bc 	.word	0x200002bc

0800205c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002064:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <_sbrk+0x5c>)
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <_sbrk+0x60>)
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <_sbrk+0x64>)
 800207a:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <_sbrk+0x68>)
 800207c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	429a      	cmp	r2, r3
 800208a:	d207      	bcs.n	800209c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800208c:	f007 fa7a 	bl	8009584 <__errno>
 8002090:	4603      	mov	r3, r0
 8002092:	220c      	movs	r2, #12
 8002094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800209a:	e009      	b.n	80020b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <_sbrk+0x64>)
 80020ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20018000 	.word	0x20018000
 80020bc:	00000400 	.word	0x00000400
 80020c0:	200003bc 	.word	0x200003bc
 80020c4:	20007268 	.word	0x20007268

080020c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <SystemInit+0x20>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <SystemInit+0x20>)
 80020d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <initialize_tellers>:

Teller VOID_TELLER;
//fix this
Teller teller_wait[4];

void initialize_tellers(void) {
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
    for (int i = 1; i < 4; i++) {
 80020f2:	2301      	movs	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	e168      	b.n	80023ca <initialize_tellers+0x2de>
    	//Initialize ID
        tellers[i].id = i;
 80020f8:	4abc      	ldr	r2, [pc, #752]	; (80023ec <initialize_tellers+0x300>)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	21b0      	movs	r1, #176	; 0xb0
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	601a      	str	r2, [r3, #0]
        // Initialize statuses
        tellers[i].status = 0;
 8002108:	4ab8      	ldr	r2, [pc, #736]	; (80023ec <initialize_tellers+0x300>)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	21b0      	movs	r1, #176	; 0xb0
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	3304      	adds	r3, #4
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
        tellers[i].take_break = 0;
 800211a:	4ab4      	ldr	r2, [pc, #720]	; (80023ec <initialize_tellers+0x300>)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	21b0      	movs	r1, #176	; 0xb0
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3308      	adds	r3, #8
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
        //service function
        tellers[i].service_end_time = clock_init(tellers[i].service_end_time);
 800212c:	4aaf      	ldr	r2, [pc, #700]	; (80023ec <initialize_tellers+0x300>)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	21b0      	movs	r1, #176	; 0xb0
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	f103 0408 	add.w	r4, r3, #8
 800213c:	4638      	mov	r0, r7
 800213e:	4aab      	ldr	r2, [pc, #684]	; (80023ec <initialize_tellers+0x300>)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	21b0      	movs	r1, #176	; 0xb0
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3308      	adds	r3, #8
 800214c:	3304      	adds	r3, #4
 800214e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002150:	f7fe fdfa 	bl	8000d48 <clock_init>
 8002154:	1d23      	adds	r3, r4, #4
 8002156:	463a      	mov	r2, r7
 8002158:	ca07      	ldmia	r2, {r0, r1, r2}
 800215a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize metrics
        tellers[i].customers_served = 0;
 800215e:	4aa3      	ldr	r2, [pc, #652]	; (80023ec <initialize_tellers+0x300>)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	21b0      	movs	r1, #176	; 0xb0
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	3318      	adds	r3, #24
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
        tellers[i].total_time_working = clock_init(tellers[i].total_time_working);
 8002170:	4a9e      	ldr	r2, [pc, #632]	; (80023ec <initialize_tellers+0x300>)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	21b0      	movs	r1, #176	; 0xb0
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	f103 0418 	add.w	r4, r3, #24
 8002180:	4638      	mov	r0, r7
 8002182:	4a9a      	ldr	r2, [pc, #616]	; (80023ec <initialize_tellers+0x300>)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	21b0      	movs	r1, #176	; 0xb0
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	4413      	add	r3, r2
 800218e:	3318      	adds	r3, #24
 8002190:	3304      	adds	r3, #4
 8002192:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002194:	f7fe fdd8 	bl	8000d48 <clock_init>
 8002198:	1d23      	adds	r3, r4, #4
 800219a:	463a      	mov	r2, r7
 800219c:	ca07      	ldmia	r2, {r0, r1, r2}
 800219e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].total_time_waiting = clock_init(tellers[i].total_time_waiting);
 80021a2:	4a92      	ldr	r2, [pc, #584]	; (80023ec <initialize_tellers+0x300>)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	21b0      	movs	r1, #176	; 0xb0
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80021b2:	4638      	mov	r0, r7
 80021b4:	4a8d      	ldr	r2, [pc, #564]	; (80023ec <initialize_tellers+0x300>)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	21b0      	movs	r1, #176	; 0xb0
 80021ba:	fb01 f303 	mul.w	r3, r1, r3
 80021be:	4413      	add	r3, r2
 80021c0:	3328      	adds	r3, #40	; 0x28
 80021c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c4:	f7fe fdc0 	bl	8000d48 <clock_init>
 80021c8:	463b      	mov	r3, r7
 80021ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].current_time_working = clock_init(tellers[i].current_time_working);
 80021d2:	4a86      	ldr	r2, [pc, #536]	; (80023ec <initialize_tellers+0x300>)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	21b0      	movs	r1, #176	; 0xb0
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80021e2:	4638      	mov	r0, r7
 80021e4:	4a81      	ldr	r2, [pc, #516]	; (80023ec <initialize_tellers+0x300>)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	21b0      	movs	r1, #176	; 0xb0
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3330      	adds	r3, #48	; 0x30
 80021f2:	3304      	adds	r3, #4
 80021f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021f6:	f7fe fda7 	bl	8000d48 <clock_init>
 80021fa:	1d23      	adds	r3, r4, #4
 80021fc:	463a      	mov	r2, r7
 80021fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002200:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 8002204:	4a79      	ldr	r2, [pc, #484]	; (80023ec <initialize_tellers+0x300>)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	21b0      	movs	r1, #176	; 0xb0
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002214:	4638      	mov	r0, r7
 8002216:	4a75      	ldr	r2, [pc, #468]	; (80023ec <initialize_tellers+0x300>)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	21b0      	movs	r1, #176	; 0xb0
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	3340      	adds	r3, #64	; 0x40
 8002224:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002226:	f7fe fd8f 	bl	8000d48 <clock_init>
 800222a:	463b      	mov	r3, r7
 800222c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002230:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].max_time_working = clock_init(tellers[i].max_time_working);
 8002234:	4a6d      	ldr	r2, [pc, #436]	; (80023ec <initialize_tellers+0x300>)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	21b0      	movs	r1, #176	; 0xb0
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8002244:	4638      	mov	r0, r7
 8002246:	4a69      	ldr	r2, [pc, #420]	; (80023ec <initialize_tellers+0x300>)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	21b0      	movs	r1, #176	; 0xb0
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	3348      	adds	r3, #72	; 0x48
 8002254:	3304      	adds	r3, #4
 8002256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002258:	f7fe fd76 	bl	8000d48 <clock_init>
 800225c:	1d23      	adds	r3, r4, #4
 800225e:	463a      	mov	r2, r7
 8002260:	ca07      	ldmia	r2, {r0, r1, r2}
 8002262:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].max_time_working = clock_init(tellers[i].max_time_working);
 8002266:	4a61      	ldr	r2, [pc, #388]	; (80023ec <initialize_tellers+0x300>)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	21b0      	movs	r1, #176	; 0xb0
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8002276:	4638      	mov	r0, r7
 8002278:	4a5c      	ldr	r2, [pc, #368]	; (80023ec <initialize_tellers+0x300>)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	21b0      	movs	r1, #176	; 0xb0
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	4413      	add	r3, r2
 8002284:	3348      	adds	r3, #72	; 0x48
 8002286:	3304      	adds	r3, #4
 8002288:	cb0e      	ldmia	r3, {r1, r2, r3}
 800228a:	f7fe fd5d 	bl	8000d48 <clock_init>
 800228e:	1d23      	adds	r3, r4, #4
 8002290:	463a      	mov	r2, r7
 8002292:	ca07      	ldmia	r2, {r0, r1, r2}
 8002294:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize break taking
        tellers[i].break_end = clock_init(tellers[i].break_end);
 8002298:	4a54      	ldr	r2, [pc, #336]	; (80023ec <initialize_tellers+0x300>)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	21b0      	movs	r1, #176	; 0xb0
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80022a8:	4638      	mov	r0, r7
 80022aa:	4a50      	ldr	r2, [pc, #320]	; (80023ec <initialize_tellers+0x300>)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	21b0      	movs	r1, #176	; 0xb0
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	3370      	adds	r3, #112	; 0x70
 80022b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ba:	f7fe fd45 	bl	8000d48 <clock_init>
 80022be:	463b      	mov	r3, r7
 80022c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].current_break = clock_init(tellers[i].current_break);
 80022c8:	4a48      	ldr	r2, [pc, #288]	; (80023ec <initialize_tellers+0x300>)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	21b0      	movs	r1, #176	; 0xb0
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80022d8:	4638      	mov	r0, r7
 80022da:	4a44      	ldr	r2, [pc, #272]	; (80023ec <initialize_tellers+0x300>)
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	21b0      	movs	r1, #176	; 0xb0
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3378      	adds	r3, #120	; 0x78
 80022e8:	3304      	adds	r3, #4
 80022ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ec:	f7fe fd2c 	bl	8000d48 <clock_init>
 80022f0:	1d23      	adds	r3, r4, #4
 80022f2:	463a      	mov	r2, r7
 80022f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80022f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        //Initialize break metrics
        tellers[i].num_breaks = 0;
 80022fa:	4a3c      	ldr	r2, [pc, #240]	; (80023ec <initialize_tellers+0x300>)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	21b0      	movs	r1, #176	; 0xb0
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	3388      	adds	r3, #136	; 0x88
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
        tellers[i].max_break = clock_init(tellers[i].max_break);
 800230c:	4a37      	ldr	r2, [pc, #220]	; (80023ec <initialize_tellers+0x300>)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	21b0      	movs	r1, #176	; 0xb0
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	f103 0488 	add.w	r4, r3, #136	; 0x88
 800231c:	4638      	mov	r0, r7
 800231e:	4a33      	ldr	r2, [pc, #204]	; (80023ec <initialize_tellers+0x300>)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	21b0      	movs	r1, #176	; 0xb0
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3388      	adds	r3, #136	; 0x88
 800232c:	3304      	adds	r3, #4
 800232e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002330:	f7fe fd0a 	bl	8000d48 <clock_init>
 8002334:	1d23      	adds	r3, r4, #4
 8002336:	463a      	mov	r2, r7
 8002338:	ca07      	ldmia	r2, {r0, r1, r2}
 800233a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        tellers[i].min_break = clock_init(tellers[i].min_break);
 800233e:	4a2b      	ldr	r2, [pc, #172]	; (80023ec <initialize_tellers+0x300>)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	21b0      	movs	r1, #176	; 0xb0
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800234e:	4638      	mov	r0, r7
 8002350:	4a26      	ldr	r2, [pc, #152]	; (80023ec <initialize_tellers+0x300>)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	21b0      	movs	r1, #176	; 0xb0
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	3398      	adds	r3, #152	; 0x98
 800235e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002360:	f7fe fcf2 	bl	8000d48 <clock_init>
 8002364:	463b      	mov	r3, r7
 8002366:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800236a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        tellers[i].total_break = clock_init(tellers[i].total_break);
 800236e:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <initialize_tellers+0x300>)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	21b0      	movs	r1, #176	; 0xb0
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800237e:	4638      	mov	r0, r7
 8002380:	4a1a      	ldr	r2, [pc, #104]	; (80023ec <initialize_tellers+0x300>)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	21b0      	movs	r1, #176	; 0xb0
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	33a0      	adds	r3, #160	; 0xa0
 800238e:	3304      	adds	r3, #4
 8002390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002392:	f7fe fcd9 	bl	8000d48 <clock_init>
 8002396:	1d23      	adds	r3, r4, #4
 8002398:	463a      	mov	r2, r7
 800239a:	ca07      	ldmia	r2, {r0, r1, r2}
 800239c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        //initialize tellers in Queue
        teller_wait[i-1] = tellers[i];
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <initialize_tellers+0x304>)
 80023a6:	21b0      	movs	r1, #176	; 0xb0
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	18d0      	adds	r0, r2, r3
 80023ae:	4a0f      	ldr	r2, [pc, #60]	; (80023ec <initialize_tellers+0x300>)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	21b0      	movs	r1, #176	; 0xb0
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	23b0      	movs	r3, #176	; 0xb0
 80023be:	461a      	mov	r2, r3
 80023c0:	f007 f90c 	bl	80095dc <memcpy>
    for (int i = 1; i < 4; i++) {
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3301      	adds	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	f77f ae93 	ble.w	80020f8 <initialize_tellers+0xc>

    }
    	teller_wait[0] = VOID_TELLER;
 80023d2:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <initialize_tellers+0x304>)
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <initialize_tellers+0x308>)
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	23b0      	movs	r3, #176	; 0xb0
 80023dc:	461a      	mov	r2, r3
 80023de:	f007 f8fd 	bl	80095dc <memcpy>
}
 80023e2:	bf00      	nop
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd90      	pop	{r4, r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200003c0 	.word	0x200003c0
 80023f0:	20000730 	.word	0x20000730
 80023f4:	20000680 	.word	0x20000680

080023f8 <manage_tellers>:

//Maybe Put entire thing inside a case statement if at all possible,
//Would Simplify logic and speed it up
void manage_tellers(void){
 80023f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023fc:	b098      	sub	sp, #96	; 0x60
 80023fe:	af04      	add	r7, sp, #16
	int i;
	for (i = 1; i < 4; i++) {
 8002400:	2301      	movs	r3, #1
 8002402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002404:	bf00      	nop
 8002406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002408:	2b03      	cmp	r3, #3
 800240a:	f300 8557 	bgt.w	8002ebc <manage_tellers+0xac4>
		switch (tellers[i].status){
 800240e:	4aa3      	ldr	r2, [pc, #652]	; (800269c <manage_tellers+0x2a4>)
 8002410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002412:	21b0      	movs	r1, #176	; 0xb0
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3304      	adds	r3, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d00a      	beq.n	8002438 <manage_tellers+0x40>
 8002422:	2b02      	cmp	r3, #2
 8002424:	f300 854c 	bgt.w	8002ec0 <manage_tellers+0xac8>
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 813d 	beq.w	80026a8 <manage_tellers+0x2b0>
 800242e:	2b01      	cmp	r3, #1
 8002430:	f000 840a 	beq.w	8002c48 <manage_tellers+0x850>
				}
				break;
			}
		}
			//Case Break
			break;
 8002434:	f000 bd44 	b.w	8002ec0 <manage_tellers+0xac8>
			if(clock_compare(Clock,tellers[i].break_end) != 1){
 8002438:	4a98      	ldr	r2, [pc, #608]	; (800269c <manage_tellers+0x2a4>)
 800243a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800243c:	21b0      	movs	r1, #176	; 0xb0
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	3370      	adds	r3, #112	; 0x70
 8002446:	4a96      	ldr	r2, [pc, #600]	; (80026a0 <manage_tellers+0x2a8>)
 8002448:	466c      	mov	r4, sp
 800244a:	1d19      	adds	r1, r3, #4
 800244c:	c903      	ldmia	r1, {r0, r1}
 800244e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	ca07      	ldmia	r2, {r0, r1, r2}
 8002456:	f7fe fd0d 	bl	8000e74 <clock_compare>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	f040 851f 	bne.w	8002ea0 <manage_tellers+0xaa8>
			if(clock_compare(Clock,tellers[i].break_end) == 1){
 8002462:	4a8e      	ldr	r2, [pc, #568]	; (800269c <manage_tellers+0x2a4>)
 8002464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002466:	21b0      	movs	r1, #176	; 0xb0
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3370      	adds	r3, #112	; 0x70
 8002470:	4a8b      	ldr	r2, [pc, #556]	; (80026a0 <manage_tellers+0x2a8>)
 8002472:	466c      	mov	r4, sp
 8002474:	1d19      	adds	r1, r3, #4
 8002476:	c903      	ldmia	r1, {r0, r1}
 8002478:	e884 0003 	stmia.w	r4, {r0, r1}
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002480:	f7fe fcf8 	bl	8000e74 <clock_compare>
 8002484:	4603      	mov	r3, r0
 8002486:	2b01      	cmp	r3, #1
 8002488:	f040 850c 	bne.w	8002ea4 <manage_tellers+0xaac>
				if(clock_compare(tellers[i].current_break,tellers[i].max_break) == 0){
 800248c:	4a83      	ldr	r2, [pc, #524]	; (800269c <manage_tellers+0x2a4>)
 800248e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002490:	21b0      	movs	r1, #176	; 0xb0
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3388      	adds	r3, #136	; 0x88
 800249a:	4980      	ldr	r1, [pc, #512]	; (800269c <manage_tellers+0x2a4>)
 800249c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800249e:	20b0      	movs	r0, #176	; 0xb0
 80024a0:	fb00 f202 	mul.w	r2, r0, r2
 80024a4:	440a      	add	r2, r1
 80024a6:	3278      	adds	r2, #120	; 0x78
 80024a8:	466c      	mov	r4, sp
 80024aa:	f103 0108 	add.w	r1, r3, #8
 80024ae:	c903      	ldmia	r1, {r0, r1}
 80024b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	3204      	adds	r2, #4
 80024b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80024ba:	f7fe fcdb 	bl	8000e74 <clock_compare>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d112      	bne.n	80024ea <manage_tellers+0xf2>
					tellers[i].max_break = tellers[i].current_break;
 80024c4:	4a75      	ldr	r2, [pc, #468]	; (800269c <manage_tellers+0x2a4>)
 80024c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c8:	21b0      	movs	r1, #176	; 0xb0
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	3388      	adds	r3, #136	; 0x88
 80024d2:	4972      	ldr	r1, [pc, #456]	; (800269c <manage_tellers+0x2a4>)
 80024d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024d6:	20b0      	movs	r0, #176	; 0xb0
 80024d8:	fb00 f202 	mul.w	r2, r0, r2
 80024dc:	440a      	add	r2, r1
 80024de:	3278      	adds	r2, #120	; 0x78
 80024e0:	3304      	adds	r3, #4
 80024e2:	3204      	adds	r2, #4
 80024e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80024e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				if(clock_compare(tellers[i].current_break,tellers[i].min_break) == 2){
 80024ea:	4a6c      	ldr	r2, [pc, #432]	; (800269c <manage_tellers+0x2a4>)
 80024ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ee:	21b0      	movs	r1, #176	; 0xb0
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	3398      	adds	r3, #152	; 0x98
 80024f8:	4968      	ldr	r1, [pc, #416]	; (800269c <manage_tellers+0x2a4>)
 80024fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024fc:	20b0      	movs	r0, #176	; 0xb0
 80024fe:	fb00 f202 	mul.w	r2, r0, r2
 8002502:	440a      	add	r2, r1
 8002504:	3278      	adds	r2, #120	; 0x78
 8002506:	466c      	mov	r4, sp
 8002508:	1d19      	adds	r1, r3, #4
 800250a:	c903      	ldmia	r1, {r0, r1}
 800250c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	3204      	adds	r2, #4
 8002514:	ca07      	ldmia	r2, {r0, r1, r2}
 8002516:	f7fe fcad 	bl	8000e74 <clock_compare>
 800251a:	4603      	mov	r3, r0
 800251c:	2b02      	cmp	r3, #2
 800251e:	d114      	bne.n	800254a <manage_tellers+0x152>
					tellers[i].min_break = tellers[i].current_break;
 8002520:	4a5e      	ldr	r2, [pc, #376]	; (800269c <manage_tellers+0x2a4>)
 8002522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002524:	21b0      	movs	r1, #176	; 0xb0
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8002530:	4a5a      	ldr	r2, [pc, #360]	; (800269c <manage_tellers+0x2a4>)
 8002532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002534:	21b0      	movs	r1, #176	; 0xb0
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	3378      	adds	r3, #120	; 0x78
 800253e:	4604      	mov	r4, r0
 8002540:	3304      	adds	r3, #4
 8002542:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				tellers[i].total_break = add_clocks(tellers[i].total_break, tellers[i].current_break);
 800254a:	4a54      	ldr	r2, [pc, #336]	; (800269c <manage_tellers+0x2a4>)
 800254c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254e:	21b0      	movs	r1, #176	; 0xb0
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	f103 05a0 	add.w	r5, r3, #160	; 0xa0
 800255a:	f107 0c08 	add.w	ip, r7, #8
 800255e:	4a4f      	ldr	r2, [pc, #316]	; (800269c <manage_tellers+0x2a4>)
 8002560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002562:	21b0      	movs	r1, #176	; 0xb0
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	f103 06a0 	add.w	r6, r3, #160	; 0xa0
 800256e:	4a4b      	ldr	r2, [pc, #300]	; (800269c <manage_tellers+0x2a4>)
 8002570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002572:	21b0      	movs	r1, #176	; 0xb0
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	3378      	adds	r3, #120	; 0x78
 800257c:	466c      	mov	r4, sp
 800257e:	3304      	adds	r3, #4
 8002580:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002588:	1d33      	adds	r3, r6, #4
 800258a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258c:	4660      	mov	r0, ip
 800258e:	f7fe fc37 	bl	8000e00 <add_clocks>
 8002592:	1d2b      	adds	r3, r5, #4
 8002594:	f107 0208 	add.w	r2, r7, #8
 8002598:	ca07      	ldmia	r2, {r0, r1, r2}
 800259a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].current_break = clock_init(tellers[i].current_break);
 800259e:	4a3f      	ldr	r2, [pc, #252]	; (800269c <manage_tellers+0x2a4>)
 80025a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a2:	21b0      	movs	r1, #176	; 0xb0
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	f103 0478 	add.w	r4, r3, #120	; 0x78
 80025ae:	f107 0008 	add.w	r0, r7, #8
 80025b2:	4a3a      	ldr	r2, [pc, #232]	; (800269c <manage_tellers+0x2a4>)
 80025b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b6:	21b0      	movs	r1, #176	; 0xb0
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	4413      	add	r3, r2
 80025be:	3378      	adds	r3, #120	; 0x78
 80025c0:	3304      	adds	r3, #4
 80025c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025c4:	f7fe fbc0 	bl	8000d48 <clock_init>
 80025c8:	1d23      	adds	r3, r4, #4
 80025ca:	f107 0208 	add.w	r2, r7, #8
 80025ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80025d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].status = 0;
 80025d4:	4a31      	ldr	r2, [pc, #196]	; (800269c <manage_tellers+0x2a4>)
 80025d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d8:	21b0      	movs	r1, #176	; 0xb0
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	4413      	add	r3, r2
 80025e0:	3304      	adds	r3, #4
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
				if(!((teller_wait[0].id == i) && (teller_wait[1].id == i) && (teller_wait[2].id == i))){
 80025e6:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <manage_tellers+0x2ac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d10b      	bne.n	8002608 <manage_tellers+0x210>
 80025f0:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <manage_tellers+0x2ac>)
 80025f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80025f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d105      	bne.n	8002608 <manage_tellers+0x210>
 80025fc:	4b29      	ldr	r3, [pc, #164]	; (80026a4 <manage_tellers+0x2ac>)
 80025fe:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002602:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002604:	429a      	cmp	r2, r3
 8002606:	d03a      	beq.n	800267e <manage_tellers+0x286>
					if(teller_wait[0].id == 0){
 8002608:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <manage_tellers+0x2ac>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10d      	bne.n	800262c <manage_tellers+0x234>
						teller_wait[0] = tellers[i];
 8002610:	4824      	ldr	r0, [pc, #144]	; (80026a4 <manage_tellers+0x2ac>)
 8002612:	4a22      	ldr	r2, [pc, #136]	; (800269c <manage_tellers+0x2a4>)
 8002614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002616:	21b0      	movs	r1, #176	; 0xb0
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	4619      	mov	r1, r3
 8002620:	23b0      	movs	r3, #176	; 0xb0
 8002622:	461a      	mov	r2, r3
 8002624:	f006 ffda 	bl	80095dc <memcpy>
					break;
 8002628:	f000 bc3e 	b.w	8002ea8 <manage_tellers+0xab0>
					else if(teller_wait[1].id == 0){
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <manage_tellers+0x2ac>)
 800262e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10e      	bne.n	8002654 <manage_tellers+0x25c>
						teller_wait[1] = tellers[i];
 8002636:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <manage_tellers+0x2ac>)
 8002638:	4918      	ldr	r1, [pc, #96]	; (800269c <manage_tellers+0x2a4>)
 800263a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800263c:	20b0      	movs	r0, #176	; 0xb0
 800263e:	fb00 f303 	mul.w	r3, r0, r3
 8002642:	4419      	add	r1, r3
 8002644:	f102 03b0 	add.w	r3, r2, #176	; 0xb0
 8002648:	22b0      	movs	r2, #176	; 0xb0
 800264a:	4618      	mov	r0, r3
 800264c:	f006 ffc6 	bl	80095dc <memcpy>
					break;
 8002650:	f000 bc2a 	b.w	8002ea8 <manage_tellers+0xab0>
					else if(teller_wait[2].id == 0){
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <manage_tellers+0x2ac>)
 8002656:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 8424 	bne.w	8002ea8 <manage_tellers+0xab0>
						teller_wait[2] = tellers[i];
 8002660:	4a10      	ldr	r2, [pc, #64]	; (80026a4 <manage_tellers+0x2ac>)
 8002662:	490e      	ldr	r1, [pc, #56]	; (800269c <manage_tellers+0x2a4>)
 8002664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002666:	20b0      	movs	r0, #176	; 0xb0
 8002668:	fb00 f303 	mul.w	r3, r0, r3
 800266c:	4419      	add	r1, r3
 800266e:	f502 73b0 	add.w	r3, r2, #352	; 0x160
 8002672:	22b0      	movs	r2, #176	; 0xb0
 8002674:	4618      	mov	r0, r3
 8002676:	f006 ffb1 	bl	80095dc <memcpy>
					break;
 800267a:	f000 bc15 	b.w	8002ea8 <manage_tellers+0xab0>
				tellers[i].teller_start_wait = Clock;
 800267e:	4a07      	ldr	r2, [pc, #28]	; (800269c <manage_tellers+0x2a4>)
 8002680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002682:	21b0      	movs	r1, #176	; 0xb0
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	3360      	adds	r3, #96	; 0x60
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <manage_tellers+0x2a8>)
 800268e:	3304      	adds	r3, #4
 8002690:	ca07      	ldmia	r2, {r0, r1, r2}
 8002692:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			break;
 8002696:	f000 bc05 	b.w	8002ea4 <manage_tellers+0xaac>
 800269a:	bf00      	nop
 800269c:	200003c0 	.word	0x200003c0
 80026a0:	20000000 	.word	0x20000000
 80026a4:	20000730 	.word	0x20000730
			if(tellers[i].take_break == 0){
 80026a8:	4abf      	ldr	r2, [pc, #764]	; (80029a8 <manage_tellers+0x5b0>)
 80026aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ac:	21b0      	movs	r1, #176	; 0xb0
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	3308      	adds	r3, #8
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f040 80ee 	bne.w	800289a <manage_tellers+0x4a2>
				  if((waiting[0] != NULL) && (tellers[i].id == teller_wait[0].id)){
 80026be:	4bbb      	ldr	r3, [pc, #748]	; (80029ac <manage_tellers+0x5b4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 83f2 	beq.w	8002eac <manage_tellers+0xab4>
 80026c8:	4ab7      	ldr	r2, [pc, #732]	; (80029a8 <manage_tellers+0x5b0>)
 80026ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026cc:	21b0      	movs	r1, #176	; 0xb0
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4bb6      	ldr	r3, [pc, #728]	; (80029b0 <manage_tellers+0x5b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	f040 83e6 	bne.w	8002eac <manage_tellers+0xab4>
					tellers[i].current_time_waiting = subtract_Clocks(Clock,tellers[i].teller_start_wait);
 80026e0:	4ab1      	ldr	r2, [pc, #708]	; (80029a8 <manage_tellers+0x5b0>)
 80026e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e4:	21b0      	movs	r1, #176	; 0xb0
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	f103 0840 	add.w	r8, r3, #64	; 0x40
 80026f0:	f107 0608 	add.w	r6, r7, #8
 80026f4:	4daf      	ldr	r5, [pc, #700]	; (80029b4 <manage_tellers+0x5bc>)
 80026f6:	4aac      	ldr	r2, [pc, #688]	; (80029a8 <manage_tellers+0x5b0>)
 80026f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026fa:	21b0      	movs	r1, #176	; 0xb0
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	3360      	adds	r3, #96	; 0x60
 8002704:	466c      	mov	r4, sp
 8002706:	3304      	adds	r3, #4
 8002708:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800270c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002710:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002714:	4630      	mov	r0, r6
 8002716:	f7fe fbef 	bl	8000ef8 <subtract_Clocks>
 800271a:	4644      	mov	r4, r8
 800271c:	f107 0308 	add.w	r3, r7, #8
 8002720:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Customer customer = *waiting[0];
 8002728:	4ba0      	ldr	r3, [pc, #640]	; (80029ac <manage_tellers+0x5b4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f107 0418 	add.w	r4, r7, #24
 8002730:	461d      	mov	r5, r3
 8002732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800273a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800273c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800273e:	682b      	ldr	r3, [r5, #0]
 8002740:	6023      	str	r3, [r4, #0]
					waiting[0] = NULL;
 8002742:	4b9a      	ldr	r3, [pc, #616]	; (80029ac <manage_tellers+0x5b4>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
				  	tellers[i].service_end_time = customer.service_time;
 8002748:	4a97      	ldr	r2, [pc, #604]	; (80029a8 <manage_tellers+0x5b0>)
 800274a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800274c:	21b0      	movs	r1, #176	; 0xb0
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	4413      	add	r3, r2
 8002754:	3308      	adds	r3, #8
 8002756:	3304      	adds	r3, #4
 8002758:	f107 021c 	add.w	r2, r7, #28
 800275c:	ca07      	ldmia	r2, {r0, r1, r2}
 800275e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				  	total_customer_wait = add_clocks(total_customer_wait, customer.total_queue_time);
 8002762:	4b95      	ldr	r3, [pc, #596]	; (80029b8 <manage_tellers+0x5c0>)
 8002764:	607b      	str	r3, [r7, #4]
 8002766:	f107 0608 	add.w	r6, r7, #8
 800276a:	4d93      	ldr	r5, [pc, #588]	; (80029b8 <manage_tellers+0x5c0>)
 800276c:	466c      	mov	r4, sp
 800276e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002772:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002776:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800277a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800277e:	4630      	mov	r0, r6
 8002780:	f7fe fb3e 	bl	8000e00 <add_clocks>
 8002784:	687c      	ldr	r4, [r7, #4]
 8002786:	f107 0308 	add.w	r3, r7, #8
 800278a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800278e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				  	if(clock_compare(customer.total_queue_time,max_customer_wait) == 0){
 8002792:	4b8a      	ldr	r3, [pc, #552]	; (80029bc <manage_tellers+0x5c4>)
 8002794:	466c      	mov	r4, sp
 8002796:	1d1a      	adds	r2, r3, #4
 8002798:	e892 0003 	ldmia.w	r2, {r0, r1}
 800279c:	e884 0003 	stmia.w	r4, {r0, r1}
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80027a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80027a8:	f7fe fb64 	bl	8000e74 <clock_compare>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d107      	bne.n	80027c2 <manage_tellers+0x3ca>
				  		max_customer_wait = customer.total_queue_time;
 80027b2:	4b82      	ldr	r3, [pc, #520]	; (80029bc <manage_tellers+0x5c4>)
 80027b4:	461c      	mov	r4, r3
 80027b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				  	tellers[i].status = 1;
 80027c2:	4a79      	ldr	r2, [pc, #484]	; (80029a8 <manage_tellers+0x5b0>)
 80027c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c6:	21b0      	movs	r1, #176	; 0xb0
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	3304      	adds	r3, #4
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
				  	if(clock_compare(tellers[i].current_time_waiting,tellers[i].max_time_waiting) == 0){
 80027d4:	4a74      	ldr	r2, [pc, #464]	; (80029a8 <manage_tellers+0x5b0>)
 80027d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d8:	21b0      	movs	r1, #176	; 0xb0
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	3358      	adds	r3, #88	; 0x58
 80027e2:	4971      	ldr	r1, [pc, #452]	; (80029a8 <manage_tellers+0x5b0>)
 80027e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027e6:	20b0      	movs	r0, #176	; 0xb0
 80027e8:	fb00 f202 	mul.w	r2, r0, r2
 80027ec:	440a      	add	r2, r1
 80027ee:	3240      	adds	r2, #64	; 0x40
 80027f0:	466c      	mov	r4, sp
 80027f2:	1d19      	adds	r1, r3, #4
 80027f4:	c903      	ldmia	r1, {r0, r1}
 80027f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80027fe:	f7fe fb39 	bl	8000e74 <clock_compare>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d12d      	bne.n	8002864 <manage_tellers+0x46c>
				 	tellers[i].max_time_waiting = tellers[i].current_time_waiting;
 8002808:	4a67      	ldr	r2, [pc, #412]	; (80029a8 <manage_tellers+0x5b0>)
 800280a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800280c:	21b0      	movs	r1, #176	; 0xb0
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8002818:	4a63      	ldr	r2, [pc, #396]	; (80029a8 <manage_tellers+0x5b0>)
 800281a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800281c:	21b0      	movs	r1, #176	; 0xb0
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002828:	4603      	mov	r3, r0
 800282a:	ca07      	ldmia	r2, {r0, r1, r2}
 800282c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				 	teller_wait[0] = teller_wait[1];
 8002830:	4a5f      	ldr	r2, [pc, #380]	; (80029b0 <manage_tellers+0x5b8>)
 8002832:	4b5f      	ldr	r3, [pc, #380]	; (80029b0 <manage_tellers+0x5b8>)
 8002834:	4610      	mov	r0, r2
 8002836:	33b0      	adds	r3, #176	; 0xb0
 8002838:	22b0      	movs	r2, #176	; 0xb0
 800283a:	4619      	mov	r1, r3
 800283c:	f006 fece 	bl	80095dc <memcpy>
				 	teller_wait[1] = teller_wait[2];
 8002840:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <manage_tellers+0x5b8>)
 8002842:	4a5b      	ldr	r2, [pc, #364]	; (80029b0 <manage_tellers+0x5b8>)
 8002844:	33b0      	adds	r3, #176	; 0xb0
 8002846:	f502 71b0 	add.w	r1, r2, #352	; 0x160
 800284a:	22b0      	movs	r2, #176	; 0xb0
 800284c:	4618      	mov	r0, r3
 800284e:	f006 fec5 	bl	80095dc <memcpy>
				 	teller_wait[4] = VOID_TELLER;
 8002852:	4b57      	ldr	r3, [pc, #348]	; (80029b0 <manage_tellers+0x5b8>)
 8002854:	4a5a      	ldr	r2, [pc, #360]	; (80029c0 <manage_tellers+0x5c8>)
 8002856:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800285a:	4611      	mov	r1, r2
 800285c:	22b0      	movs	r2, #176	; 0xb0
 800285e:	4618      	mov	r0, r3
 8002860:	f006 febc 	bl	80095dc <memcpy>
				  	tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 8002864:	4a50      	ldr	r2, [pc, #320]	; (80029a8 <manage_tellers+0x5b0>)
 8002866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002868:	21b0      	movs	r1, #176	; 0xb0
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002874:	f107 0008 	add.w	r0, r7, #8
 8002878:	4a4b      	ldr	r2, [pc, #300]	; (80029a8 <manage_tellers+0x5b0>)
 800287a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287c:	21b0      	movs	r1, #176	; 0xb0
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	3340      	adds	r3, #64	; 0x40
 8002886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002888:	f7fe fa5e 	bl	8000d48 <clock_init>
 800288c:	f107 0308 	add.w	r3, r7, #8
 8002890:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002894:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				break;
 8002898:	e308      	b.n	8002eac <manage_tellers+0xab4>
			if(tellers[i].take_break == 1){
 800289a:	4a43      	ldr	r2, [pc, #268]	; (80029a8 <manage_tellers+0x5b0>)
 800289c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800289e:	21b0      	movs	r1, #176	; 0xb0
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	3308      	adds	r3, #8
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	f040 8300 	bne.w	8002eb0 <manage_tellers+0xab8>
				tellers[i].status = 2;
 80028b0:	4a3d      	ldr	r2, [pc, #244]	; (80029a8 <manage_tellers+0x5b0>)
 80028b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b4:	21b0      	movs	r1, #176	; 0xb0
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3304      	adds	r3, #4
 80028be:	2202      	movs	r2, #2
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	f000 80e2 	beq.w	8002a8e <manage_tellers+0x696>
 80028ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	f300 8141 	bgt.w	8002b54 <manage_tellers+0x75c>
 80028d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d003      	beq.n	80028e0 <manage_tellers+0x4e8>
 80028d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d074      	beq.n	80029c8 <manage_tellers+0x5d0>
					break;
 80028de:	e139      	b.n	8002b54 <manage_tellers+0x75c>
					breaker.start_break[i] = 1;
 80028e0:	4a38      	ldr	r2, [pc, #224]	; (80029c4 <manage_tellers+0x5cc>)
 80028e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e4:	2101      	movs	r1, #1
 80028e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration1;
 80028ea:	4a2f      	ldr	r2, [pc, #188]	; (80029a8 <manage_tellers+0x5b0>)
 80028ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ee:	21b0      	movs	r1, #176	; 0xb0
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80028fa:	4b32      	ldr	r3, [pc, #200]	; (80029c4 <manage_tellers+0x5cc>)
 80028fc:	4614      	mov	r4, r2
 80028fe:	3318      	adds	r3, #24
 8002900:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002904:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					tellers[i].current_break = breaker.break_duration1;
 8002908:	4a27      	ldr	r2, [pc, #156]	; (80029a8 <manage_tellers+0x5b0>)
 800290a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290c:	21b0      	movs	r1, #176	; 0xb0
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3378      	adds	r3, #120	; 0x78
 8002916:	4a2b      	ldr	r2, [pc, #172]	; (80029c4 <manage_tellers+0x5cc>)
 8002918:	3304      	adds	r3, #4
 800291a:	3218      	adds	r2, #24
 800291c:	ca07      	ldmia	r2, {r0, r1, r2}
 800291e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_duration1 = clock_init(breaker.break_duration1);
 8002922:	4c28      	ldr	r4, [pc, #160]	; (80029c4 <manage_tellers+0x5cc>)
 8002924:	f107 0008 	add.w	r0, r7, #8
 8002928:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <manage_tellers+0x5cc>)
 800292a:	3318      	adds	r3, #24
 800292c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292e:	f7fe fa0b 	bl	8000d48 <clock_init>
 8002932:	f104 0318 	add.w	r3, r4, #24
 8002936:	f107 0208 	add.w	r2, r7, #8
 800293a:	ca07      	ldmia	r2, {r0, r1, r2}
 800293c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_time1 = clock_init(breaker.break_time1);
 8002940:	4c20      	ldr	r4, [pc, #128]	; (80029c4 <manage_tellers+0x5cc>)
 8002942:	f107 0008 	add.w	r0, r7, #8
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <manage_tellers+0x5cc>)
 8002948:	330c      	adds	r3, #12
 800294a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800294c:	f7fe f9fc 	bl	8000d48 <clock_init>
 8002950:	f104 030c 	add.w	r3, r4, #12
 8002954:	f107 0208 	add.w	r2, r7, #8
 8002958:	ca07      	ldmia	r2, {r0, r1, r2}
 800295a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					tellers[i].break_end = add_clocks(Clock, tellers[i].break_end);
 800295e:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <manage_tellers+0x5b0>)
 8002960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002962:	21b0      	movs	r1, #176	; 0xb0
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	f103 0670 	add.w	r6, r3, #112	; 0x70
 800296e:	f107 0508 	add.w	r5, r7, #8
 8002972:	4c10      	ldr	r4, [pc, #64]	; (80029b4 <manage_tellers+0x5bc>)
 8002974:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <manage_tellers+0x5b0>)
 8002976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002978:	21b0      	movs	r1, #176	; 0xb0
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002984:	466b      	mov	r3, sp
 8002986:	ca07      	ldmia	r2, {r0, r1, r2}
 8002988:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800298c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002990:	4628      	mov	r0, r5
 8002992:	f7fe fa35 	bl	8000e00 <add_clocks>
 8002996:	4634      	mov	r4, r6
 8002998:	f107 0308 	add.w	r3, r7, #8
 800299c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					break;
 80029a4:	e0d7      	b.n	8002b56 <manage_tellers+0x75e>
 80029a6:	bf00      	nop
 80029a8:	200003c0 	.word	0x200003c0
 80029ac:	200000fc 	.word	0x200000fc
 80029b0:	20000730 	.word	0x20000730
 80029b4:	20000000 	.word	0x20000000
 80029b8:	200002a0 	.word	0x200002a0
 80029bc:	200002ac 	.word	0x200002ac
 80029c0:	20000680 	.word	0x20000680
 80029c4:	20000094 	.word	0x20000094
					breaker.start_break[i] = 1;
 80029c8:	4abb      	ldr	r2, [pc, #748]	; (8002cb8 <manage_tellers+0x8c0>)
 80029ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029cc:	2101      	movs	r1, #1
 80029ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration2;
 80029d2:	4aba      	ldr	r2, [pc, #744]	; (8002cbc <manage_tellers+0x8c4>)
 80029d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d6:	21b0      	movs	r1, #176	; 0xb0
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80029e2:	4bb5      	ldr	r3, [pc, #724]	; (8002cb8 <manage_tellers+0x8c0>)
 80029e4:	4614      	mov	r4, r2
 80029e6:	3330      	adds	r3, #48	; 0x30
 80029e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					tellers[i].current_break = breaker.break_duration2;
 80029f0:	4ab2      	ldr	r2, [pc, #712]	; (8002cbc <manage_tellers+0x8c4>)
 80029f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f4:	21b0      	movs	r1, #176	; 0xb0
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3378      	adds	r3, #120	; 0x78
 80029fe:	4aae      	ldr	r2, [pc, #696]	; (8002cb8 <manage_tellers+0x8c0>)
 8002a00:	3304      	adds	r3, #4
 8002a02:	3230      	adds	r2, #48	; 0x30
 8002a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_duration2 = clock_init(breaker.break_duration2);
 8002a0a:	4cab      	ldr	r4, [pc, #684]	; (8002cb8 <manage_tellers+0x8c0>)
 8002a0c:	f107 0008 	add.w	r0, r7, #8
 8002a10:	4ba9      	ldr	r3, [pc, #676]	; (8002cb8 <manage_tellers+0x8c0>)
 8002a12:	3330      	adds	r3, #48	; 0x30
 8002a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a16:	f7fe f997 	bl	8000d48 <clock_init>
 8002a1a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8002a1e:	f107 0208 	add.w	r2, r7, #8
 8002a22:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_time2 = clock_init(breaker.break_time2);
 8002a28:	4ca3      	ldr	r4, [pc, #652]	; (8002cb8 <manage_tellers+0x8c0>)
 8002a2a:	f107 0008 	add.w	r0, r7, #8
 8002a2e:	4ba2      	ldr	r3, [pc, #648]	; (8002cb8 <manage_tellers+0x8c0>)
 8002a30:	3324      	adds	r3, #36	; 0x24
 8002a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a34:	f7fe f988 	bl	8000d48 <clock_init>
 8002a38:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8002a3c:	f107 0208 	add.w	r2, r7, #8
 8002a40:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					tellers[i].break_end = add_clocks(Clock, tellers[i].break_end);
 8002a46:	4a9d      	ldr	r2, [pc, #628]	; (8002cbc <manage_tellers+0x8c4>)
 8002a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a4a:	21b0      	movs	r1, #176	; 0xb0
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	f103 0670 	add.w	r6, r3, #112	; 0x70
 8002a56:	f107 0508 	add.w	r5, r7, #8
 8002a5a:	4c99      	ldr	r4, [pc, #612]	; (8002cc0 <manage_tellers+0x8c8>)
 8002a5c:	4a97      	ldr	r2, [pc, #604]	; (8002cbc <manage_tellers+0x8c4>)
 8002a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a60:	21b0      	movs	r1, #176	; 0xb0
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002a6c:	466b      	mov	r3, sp
 8002a6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a74:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002a78:	4628      	mov	r0, r5
 8002a7a:	f7fe f9c1 	bl	8000e00 <add_clocks>
 8002a7e:	4634      	mov	r4, r6
 8002a80:	f107 0308 	add.w	r3, r7, #8
 8002a84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					break;
 8002a8c:	e063      	b.n	8002b56 <manage_tellers+0x75e>
					breaker.start_break[i] = 1;
 8002a8e:	4a8a      	ldr	r2, [pc, #552]	; (8002cb8 <manage_tellers+0x8c0>)
 8002a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a92:	2101      	movs	r1, #1
 8002a94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tellers[i].break_end = breaker.break_duration3;
 8002a98:	4a88      	ldr	r2, [pc, #544]	; (8002cbc <manage_tellers+0x8c4>)
 8002a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a9c:	21b0      	movs	r1, #176	; 0xb0
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002aa8:	4b83      	ldr	r3, [pc, #524]	; (8002cb8 <manage_tellers+0x8c0>)
 8002aaa:	4614      	mov	r4, r2
 8002aac:	3348      	adds	r3, #72	; 0x48
 8002aae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					tellers[i].current_break = breaker.break_duration3;
 8002ab6:	4a81      	ldr	r2, [pc, #516]	; (8002cbc <manage_tellers+0x8c4>)
 8002ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aba:	21b0      	movs	r1, #176	; 0xb0
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3378      	adds	r3, #120	; 0x78
 8002ac4:	4a7c      	ldr	r2, [pc, #496]	; (8002cb8 <manage_tellers+0x8c0>)
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	3248      	adds	r2, #72	; 0x48
 8002aca:	ca07      	ldmia	r2, {r0, r1, r2}
 8002acc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_duration3 = clock_init(breaker.break_duration3);
 8002ad0:	4c79      	ldr	r4, [pc, #484]	; (8002cb8 <manage_tellers+0x8c0>)
 8002ad2:	f107 0008 	add.w	r0, r7, #8
 8002ad6:	4b78      	ldr	r3, [pc, #480]	; (8002cb8 <manage_tellers+0x8c0>)
 8002ad8:	3348      	adds	r3, #72	; 0x48
 8002ada:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002adc:	f7fe f934 	bl	8000d48 <clock_init>
 8002ae0:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8002ae4:	f107 0208 	add.w	r2, r7, #8
 8002ae8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					breaker.break_time3 = clock_init(breaker.break_time3);
 8002aee:	4c72      	ldr	r4, [pc, #456]	; (8002cb8 <manage_tellers+0x8c0>)
 8002af0:	f107 0008 	add.w	r0, r7, #8
 8002af4:	4b70      	ldr	r3, [pc, #448]	; (8002cb8 <manage_tellers+0x8c0>)
 8002af6:	333c      	adds	r3, #60	; 0x3c
 8002af8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002afa:	f7fe f925 	bl	8000d48 <clock_init>
 8002afe:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8002b02:	f107 0208 	add.w	r2, r7, #8
 8002b06:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					tellers[i].break_end = add_clocks(Clock, tellers[i].break_end);
 8002b0c:	4a6b      	ldr	r2, [pc, #428]	; (8002cbc <manage_tellers+0x8c4>)
 8002b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b10:	21b0      	movs	r1, #176	; 0xb0
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	f103 0670 	add.w	r6, r3, #112	; 0x70
 8002b1c:	f107 0508 	add.w	r5, r7, #8
 8002b20:	4c67      	ldr	r4, [pc, #412]	; (8002cc0 <manage_tellers+0x8c8>)
 8002b22:	4a66      	ldr	r2, [pc, #408]	; (8002cbc <manage_tellers+0x8c4>)
 8002b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b26:	21b0      	movs	r1, #176	; 0xb0
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002b32:	466b      	mov	r3, sp
 8002b34:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b3a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002b3e:	4628      	mov	r0, r5
 8002b40:	f7fe f95e 	bl	8000e00 <add_clocks>
 8002b44:	4634      	mov	r4, r6
 8002b46:	f107 0308 	add.w	r3, r7, #8
 8002b4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					break;
 8002b52:	e000      	b.n	8002b56 <manage_tellers+0x75e>
					break;
 8002b54:	bf00      	nop
				tellers[i].take_break = 0;
 8002b56:	4a59      	ldr	r2, [pc, #356]	; (8002cbc <manage_tellers+0x8c4>)
 8002b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5a:	21b0      	movs	r1, #176	; 0xb0
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	3308      	adds	r3, #8
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
				if(clock_compare(tellers[i].current_time_waiting,tellers[i].max_time_waiting) == 0){
 8002b68:	4a54      	ldr	r2, [pc, #336]	; (8002cbc <manage_tellers+0x8c4>)
 8002b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6c:	21b0      	movs	r1, #176	; 0xb0
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3358      	adds	r3, #88	; 0x58
 8002b76:	4951      	ldr	r1, [pc, #324]	; (8002cbc <manage_tellers+0x8c4>)
 8002b78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b7a:	20b0      	movs	r0, #176	; 0xb0
 8002b7c:	fb00 f202 	mul.w	r2, r0, r2
 8002b80:	440a      	add	r2, r1
 8002b82:	3240      	adds	r2, #64	; 0x40
 8002b84:	466c      	mov	r4, sp
 8002b86:	1d19      	adds	r1, r3, #4
 8002b88:	c903      	ldmia	r1, {r0, r1}
 8002b8a:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b92:	f7fe f96f 	bl	8000e74 <clock_compare>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d113      	bne.n	8002bc4 <manage_tellers+0x7cc>
					tellers[i].max_time_waiting = tellers[i].current_time_waiting;
 8002b9c:	4a47      	ldr	r2, [pc, #284]	; (8002cbc <manage_tellers+0x8c4>)
 8002b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba0:	21b0      	movs	r1, #176	; 0xb0
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8002bac:	4a43      	ldr	r2, [pc, #268]	; (8002cbc <manage_tellers+0x8c4>)
 8002bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb0:	21b0      	movs	r1, #176	; 0xb0
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].total_time_waiting = add_clocks(tellers[i].total_time_waiting,tellers[i].current_time_waiting);
 8002bc4:	4a3d      	ldr	r2, [pc, #244]	; (8002cbc <manage_tellers+0x8c4>)
 8002bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc8:	21b0      	movs	r1, #176	; 0xb0
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8002bd4:	f107 0508 	add.w	r5, r7, #8
 8002bd8:	4a38      	ldr	r2, [pc, #224]	; (8002cbc <manage_tellers+0x8c4>)
 8002bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bdc:	21b0      	movs	r1, #176	; 0xb0
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	3328      	adds	r3, #40	; 0x28
 8002be6:	4935      	ldr	r1, [pc, #212]	; (8002cbc <manage_tellers+0x8c4>)
 8002be8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bea:	20b0      	movs	r0, #176	; 0xb0
 8002bec:	fb00 f202 	mul.w	r2, r0, r2
 8002bf0:	440a      	add	r2, r1
 8002bf2:	3240      	adds	r2, #64	; 0x40
 8002bf4:	466c      	mov	r4, sp
 8002bf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bf8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfe:	4628      	mov	r0, r5
 8002c00:	f7fe f8fe 	bl	8000e00 <add_clocks>
 8002c04:	4634      	mov	r4, r6
 8002c06:	f107 0308 	add.w	r3, r7, #8
 8002c0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				tellers[i].current_time_waiting = clock_init(tellers[i].current_time_waiting);
 8002c12:	4a2a      	ldr	r2, [pc, #168]	; (8002cbc <manage_tellers+0x8c4>)
 8002c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c16:	21b0      	movs	r1, #176	; 0xb0
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002c22:	f107 0008 	add.w	r0, r7, #8
 8002c26:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <manage_tellers+0x8c4>)
 8002c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c2a:	21b0      	movs	r1, #176	; 0xb0
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3340      	adds	r3, #64	; 0x40
 8002c34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c36:	f7fe f887 	bl	8000d48 <clock_init>
 8002c3a:	f107 0308 	add.w	r3, r7, #8
 8002c3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			break;
 8002c46:	e133      	b.n	8002eb0 <manage_tellers+0xab8>
			if(clock_compare(tellers[i].current_time_working,tellers[i].service_end_time) == 1){
 8002c48:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <manage_tellers+0x8c4>)
 8002c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c4c:	21b0      	movs	r1, #176	; 0xb0
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	3308      	adds	r3, #8
 8002c56:	4919      	ldr	r1, [pc, #100]	; (8002cbc <manage_tellers+0x8c4>)
 8002c58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c5a:	20b0      	movs	r0, #176	; 0xb0
 8002c5c:	fb00 f202 	mul.w	r2, r0, r2
 8002c60:	440a      	add	r2, r1
 8002c62:	3230      	adds	r2, #48	; 0x30
 8002c64:	466c      	mov	r4, sp
 8002c66:	f103 0108 	add.w	r1, r3, #8
 8002c6a:	c903      	ldmia	r1, {r0, r1}
 8002c6c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	3204      	adds	r2, #4
 8002c74:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c76:	f7fe f8fd 	bl	8000e74 <clock_compare>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d121      	bne.n	8002cc4 <manage_tellers+0x8cc>
				tellers[i].current_time_working = clock_increment(tellers[i].current_time_working);
 8002c80:	4a0e      	ldr	r2, [pc, #56]	; (8002cbc <manage_tellers+0x8c4>)
 8002c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c84:	21b0      	movs	r1, #176	; 0xb0
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002c90:	f107 0008 	add.w	r0, r7, #8
 8002c94:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <manage_tellers+0x8c4>)
 8002c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c98:	21b0      	movs	r1, #176	; 0xb0
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3330      	adds	r3, #48	; 0x30
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca6:	f7fe f881 	bl	8000dac <clock_increment>
 8002caa:	1d23      	adds	r3, r4, #4
 8002cac:	f107 0208 	add.w	r2, r7, #8
 8002cb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				break;
 8002cb6:	e100      	b.n	8002eba <manage_tellers+0xac2>
 8002cb8:	20000094 	.word	0x20000094
 8002cbc:	200003c0 	.word	0x200003c0
 8002cc0:	20000000 	.word	0x20000000
			if(clock_compare(tellers[i].current_time_working,tellers[i].service_end_time) == 1){
 8002cc4:	4a81      	ldr	r2, [pc, #516]	; (8002ecc <manage_tellers+0xad4>)
 8002cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc8:	21b0      	movs	r1, #176	; 0xb0
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3308      	adds	r3, #8
 8002cd2:	497e      	ldr	r1, [pc, #504]	; (8002ecc <manage_tellers+0xad4>)
 8002cd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cd6:	20b0      	movs	r0, #176	; 0xb0
 8002cd8:	fb00 f202 	mul.w	r2, r0, r2
 8002cdc:	440a      	add	r2, r1
 8002cde:	3230      	adds	r2, #48	; 0x30
 8002ce0:	466c      	mov	r4, sp
 8002ce2:	f103 0108 	add.w	r1, r3, #8
 8002ce6:	c903      	ldmia	r1, {r0, r1}
 8002ce8:	e884 0003 	stmia.w	r4, {r0, r1}
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	3204      	adds	r2, #4
 8002cf0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cf2:	f7fe f8bf 	bl	8000e74 <clock_compare>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	f040 80e1 	bne.w	8002ec0 <manage_tellers+0xac8>
				if(clock_compare(tellers[i].current_time_working,tellers[i].max_time_working) == 0){
 8002cfe:	4a73      	ldr	r2, [pc, #460]	; (8002ecc <manage_tellers+0xad4>)
 8002d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d02:	21b0      	movs	r1, #176	; 0xb0
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3348      	adds	r3, #72	; 0x48
 8002d0c:	496f      	ldr	r1, [pc, #444]	; (8002ecc <manage_tellers+0xad4>)
 8002d0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d10:	20b0      	movs	r0, #176	; 0xb0
 8002d12:	fb00 f202 	mul.w	r2, r0, r2
 8002d16:	440a      	add	r2, r1
 8002d18:	3230      	adds	r2, #48	; 0x30
 8002d1a:	466c      	mov	r4, sp
 8002d1c:	f103 0108 	add.w	r1, r3, #8
 8002d20:	c903      	ldmia	r1, {r0, r1}
 8002d22:	e884 0003 	stmia.w	r4, {r0, r1}
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	3204      	adds	r2, #4
 8002d2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d2c:	f7fe f8a2 	bl	8000e74 <clock_compare>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d112      	bne.n	8002d5c <manage_tellers+0x964>
					tellers[i].max_time_working = tellers[i].current_time_working;
 8002d36:	4a65      	ldr	r2, [pc, #404]	; (8002ecc <manage_tellers+0xad4>)
 8002d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3a:	21b0      	movs	r1, #176	; 0xb0
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3348      	adds	r3, #72	; 0x48
 8002d44:	4961      	ldr	r1, [pc, #388]	; (8002ecc <manage_tellers+0xad4>)
 8002d46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d48:	20b0      	movs	r0, #176	; 0xb0
 8002d4a:	fb00 f202 	mul.w	r2, r0, r2
 8002d4e:	440a      	add	r2, r1
 8002d50:	3230      	adds	r2, #48	; 0x30
 8002d52:	3304      	adds	r3, #4
 8002d54:	3204      	adds	r2, #4
 8002d56:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].total_time_working = add_clocks(tellers[i].total_time_working,tellers[i].current_time_working);
 8002d5c:	4a5b      	ldr	r2, [pc, #364]	; (8002ecc <manage_tellers+0xad4>)
 8002d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d60:	21b0      	movs	r1, #176	; 0xb0
 8002d62:	fb01 f303 	mul.w	r3, r1, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	f103 0518 	add.w	r5, r3, #24
 8002d6c:	f107 0c08 	add.w	ip, r7, #8
 8002d70:	4a56      	ldr	r2, [pc, #344]	; (8002ecc <manage_tellers+0xad4>)
 8002d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d74:	21b0      	movs	r1, #176	; 0xb0
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f103 0618 	add.w	r6, r3, #24
 8002d80:	4a52      	ldr	r2, [pc, #328]	; (8002ecc <manage_tellers+0xad4>)
 8002d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d84:	21b0      	movs	r1, #176	; 0xb0
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3330      	adds	r3, #48	; 0x30
 8002d8e:	466c      	mov	r4, sp
 8002d90:	3304      	adds	r3, #4
 8002d92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d9a:	1d33      	adds	r3, r6, #4
 8002d9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d9e:	4660      	mov	r0, ip
 8002da0:	f7fe f82e 	bl	8000e00 <add_clocks>
 8002da4:	1d2b      	adds	r3, r5, #4
 8002da6:	f107 0208 	add.w	r2, r7, #8
 8002daa:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].current_time_working = clock_init(tellers[i].current_time_working);
 8002db0:	4a46      	ldr	r2, [pc, #280]	; (8002ecc <manage_tellers+0xad4>)
 8002db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db4:	21b0      	movs	r1, #176	; 0xb0
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002dc0:	f107 0008 	add.w	r0, r7, #8
 8002dc4:	4a41      	ldr	r2, [pc, #260]	; (8002ecc <manage_tellers+0xad4>)
 8002dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc8:	21b0      	movs	r1, #176	; 0xb0
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3330      	adds	r3, #48	; 0x30
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dd6:	f7fd ffb7 	bl	8000d48 <clock_init>
 8002dda:	1d23      	adds	r3, r4, #4
 8002ddc:	f107 0208 	add.w	r2, r7, #8
 8002de0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002de2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				tellers[i].status = 0;
 8002de6:	4a39      	ldr	r2, [pc, #228]	; (8002ecc <manage_tellers+0xad4>)
 8002de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dea:	21b0      	movs	r1, #176	; 0xb0
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	3304      	adds	r3, #4
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
				tellers[i].teller_start_wait = Clock;
 8002df8:	4a34      	ldr	r2, [pc, #208]	; (8002ecc <manage_tellers+0xad4>)
 8002dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfc:	21b0      	movs	r1, #176	; 0xb0
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3360      	adds	r3, #96	; 0x60
 8002e06:	4a32      	ldr	r2, [pc, #200]	; (8002ed0 <manage_tellers+0xad8>)
 8002e08:	3304      	adds	r3, #4
 8002e0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				if(!((teller_wait[0].id == i) && (teller_wait[1].id == i) && (teller_wait[2].id == i))){
 8002e10:	4b30      	ldr	r3, [pc, #192]	; (8002ed4 <manage_tellers+0xadc>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d10b      	bne.n	8002e32 <manage_tellers+0xa3a>
 8002e1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ed4 <manage_tellers+0xadc>)
 8002e1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d105      	bne.n	8002e32 <manage_tellers+0xa3a>
 8002e26:	4b2b      	ldr	r3, [pc, #172]	; (8002ed4 <manage_tellers+0xadc>)
 8002e28:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002e2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d040      	beq.n	8002eb4 <manage_tellers+0xabc>
					if(teller_wait[0].id == 0){
 8002e32:	4b28      	ldr	r3, [pc, #160]	; (8002ed4 <manage_tellers+0xadc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10c      	bne.n	8002e54 <manage_tellers+0xa5c>
						teller_wait[0] = tellers[i];
 8002e3a:	4826      	ldr	r0, [pc, #152]	; (8002ed4 <manage_tellers+0xadc>)
 8002e3c:	4a23      	ldr	r2, [pc, #140]	; (8002ecc <manage_tellers+0xad4>)
 8002e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e40:	21b0      	movs	r1, #176	; 0xb0
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	23b0      	movs	r3, #176	; 0xb0
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f006 fbc5 	bl	80095dc <memcpy>
					break;
 8002e52:	e031      	b.n	8002eb8 <manage_tellers+0xac0>
					else if(teller_wait[1].id == 0){
 8002e54:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <manage_tellers+0xadc>)
 8002e56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10d      	bne.n	8002e7a <manage_tellers+0xa82>
						teller_wait[1] = tellers[i];
 8002e5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <manage_tellers+0xadc>)
 8002e60:	491a      	ldr	r1, [pc, #104]	; (8002ecc <manage_tellers+0xad4>)
 8002e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e64:	20b0      	movs	r0, #176	; 0xb0
 8002e66:	fb00 f303 	mul.w	r3, r0, r3
 8002e6a:	4419      	add	r1, r3
 8002e6c:	f102 03b0 	add.w	r3, r2, #176	; 0xb0
 8002e70:	22b0      	movs	r2, #176	; 0xb0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f006 fbb2 	bl	80095dc <memcpy>
					break;
 8002e78:	e01e      	b.n	8002eb8 <manage_tellers+0xac0>
					else if(teller_wait[2].id == 0){
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <manage_tellers+0xadc>)
 8002e7c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d119      	bne.n	8002eb8 <manage_tellers+0xac0>
						teller_wait[2] = tellers[i];
 8002e84:	4a13      	ldr	r2, [pc, #76]	; (8002ed4 <manage_tellers+0xadc>)
 8002e86:	4911      	ldr	r1, [pc, #68]	; (8002ecc <manage_tellers+0xad4>)
 8002e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e8a:	20b0      	movs	r0, #176	; 0xb0
 8002e8c:	fb00 f303 	mul.w	r3, r0, r3
 8002e90:	4419      	add	r1, r3
 8002e92:	f502 73b0 	add.w	r3, r2, #352	; 0x160
 8002e96:	22b0      	movs	r2, #176	; 0xb0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f006 fb9f 	bl	80095dc <memcpy>
					break;
 8002e9e:	e00b      	b.n	8002eb8 <manage_tellers+0xac0>
				break;
 8002ea0:	bf00      	nop
 8002ea2:	e00d      	b.n	8002ec0 <manage_tellers+0xac8>
			break;
 8002ea4:	bf00      	nop
 8002ea6:	e00b      	b.n	8002ec0 <manage_tellers+0xac8>
					break;
 8002ea8:	bf00      	nop
 8002eaa:	e009      	b.n	8002ec0 <manage_tellers+0xac8>
				break;
 8002eac:	bf00      	nop
 8002eae:	e007      	b.n	8002ec0 <manage_tellers+0xac8>
			break;
 8002eb0:	bf00      	nop
 8002eb2:	e005      	b.n	8002ec0 <manage_tellers+0xac8>
				break;
 8002eb4:	bf00      	nop
 8002eb6:	e003      	b.n	8002ec0 <manage_tellers+0xac8>
					break;
 8002eb8:	bf00      	nop
			break;
 8002eba:	e001      	b.n	8002ec0 <manage_tellers+0xac8>
	}

}
 8002ebc:	bf00      	nop
 8002ebe:	e000      	b.n	8002ec2 <manage_tellers+0xaca>
			break;
 8002ec0:	bf00      	nop
}
 8002ec2:	bf00      	nop
 8002ec4:	3750      	adds	r7, #80	; 0x50
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ecc:	200003c0 	.word	0x200003c0
 8002ed0:	20000000 	.word	0x20000000
 8002ed4:	20000730 	.word	0x20000730

08002ed8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002edc:	f7ff f8f4 	bl	80020c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ee0:	480c      	ldr	r0, [pc, #48]	; (8002f14 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ee2:	490d      	ldr	r1, [pc, #52]	; (8002f18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <LoopForever+0xe>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ee8:	e002      	b.n	8002ef0 <LoopCopyDataInit>

08002eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eee:	3304      	adds	r3, #4

08002ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef4:	d3f9      	bcc.n	8002eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ef8:	4c0a      	ldr	r4, [pc, #40]	; (8002f24 <LoopForever+0x16>)
  movs r3, #0
 8002efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002efc:	e001      	b.n	8002f02 <LoopFillZerobss>

08002efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f00:	3204      	adds	r2, #4

08002f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f04:	d3fb      	bcc.n	8002efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f06:	f006 fb43 	bl	8009590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f0a:	f7fe fa83 	bl	8001414 <main>

08002f0e <LoopForever>:

LoopForever:
    b LoopForever
 8002f0e:	e7fe      	b.n	8002f0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f18:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002f1c:	0800a158 	.word	0x0800a158
  ldr r2, =_sbss
 8002f20:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002f24:	20007264 	.word	0x20007264

08002f28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f28:	e7fe      	b.n	8002f28 <ADC1_2_IRQHandler>
	...

08002f2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f36:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <HAL_Init+0x3c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a0b      	ldr	r2, [pc, #44]	; (8002f68 <HAL_Init+0x3c>)
 8002f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f42:	2003      	movs	r0, #3
 8002f44:	f000 f93e 	bl	80031c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f48:	200f      	movs	r0, #15
 8002f4a:	f000 f80f 	bl	8002f6c <HAL_InitTick>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	71fb      	strb	r3, [r7, #7]
 8002f58:	e001      	b.n	8002f5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f5a:	f7fe ff51 	bl	8001e00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40022000 	.word	0x40022000

08002f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f78:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <HAL_InitTick+0x6c>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d023      	beq.n	8002fc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f80:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <HAL_InitTick+0x70>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <HAL_InitTick+0x6c>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 f949 	bl	800322e <HAL_SYSTICK_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10f      	bne.n	8002fc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b0f      	cmp	r3, #15
 8002fa6:	d809      	bhi.n	8002fbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fb0:	f000 f913 	bl	80031da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <HAL_InitTick+0x74>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e007      	b.n	8002fcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
 8002fc0:	e004      	b.n	8002fcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
 8002fc6:	e001      	b.n	8002fcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000020 	.word	0x20000020
 8002fdc:	20000018 	.word	0x20000018
 8002fe0:	2000001c 	.word	0x2000001c

08002fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_IncTick+0x20>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_IncTick+0x24>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	4a04      	ldr	r2, [pc, #16]	; (8003008 <HAL_IncTick+0x24>)
 8002ff6:	6013      	str	r3, [r2, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000020 	.word	0x20000020
 8003008:	200009f0 	.word	0x200009f0

0800300c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return uwTick;
 8003010:	4b03      	ldr	r3, [pc, #12]	; (8003020 <HAL_GetTick+0x14>)
 8003012:	681b      	ldr	r3, [r3, #0]
}
 8003014:	4618      	mov	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	200009f0 	.word	0x200009f0

08003024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <__NVIC_SetPriorityGrouping+0x44>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003040:	4013      	ands	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800304c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003056:	4a04      	ldr	r2, [pc, #16]	; (8003068 <__NVIC_SetPriorityGrouping+0x44>)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	60d3      	str	r3, [r2, #12]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <__NVIC_GetPriorityGrouping+0x18>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	f003 0307 	and.w	r3, r3, #7
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	2b00      	cmp	r3, #0
 8003098:	db0b      	blt.n	80030b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	f003 021f 	and.w	r2, r3, #31
 80030a0:	4907      	ldr	r1, [pc, #28]	; (80030c0 <__NVIC_EnableIRQ+0x38>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	2001      	movs	r0, #1
 80030aa:	fa00 f202 	lsl.w	r2, r0, r2
 80030ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000e100 	.word	0xe000e100

080030c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	6039      	str	r1, [r7, #0]
 80030ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	db0a      	blt.n	80030ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	490c      	ldr	r1, [pc, #48]	; (8003110 <__NVIC_SetPriority+0x4c>)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	0112      	lsls	r2, r2, #4
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	440b      	add	r3, r1
 80030e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ec:	e00a      	b.n	8003104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	4908      	ldr	r1, [pc, #32]	; (8003114 <__NVIC_SetPriority+0x50>)
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	3b04      	subs	r3, #4
 80030fc:	0112      	lsls	r2, r2, #4
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	440b      	add	r3, r1
 8003102:	761a      	strb	r2, [r3, #24]
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	e000e100 	.word	0xe000e100
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003118:	b480      	push	{r7}
 800311a:	b089      	sub	sp, #36	; 0x24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f1c3 0307 	rsb	r3, r3, #7
 8003132:	2b04      	cmp	r3, #4
 8003134:	bf28      	it	cs
 8003136:	2304      	movcs	r3, #4
 8003138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3304      	adds	r3, #4
 800313e:	2b06      	cmp	r3, #6
 8003140:	d902      	bls.n	8003148 <NVIC_EncodePriority+0x30>
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3b03      	subs	r3, #3
 8003146:	e000      	b.n	800314a <NVIC_EncodePriority+0x32>
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800314c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43da      	mvns	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	401a      	ands	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003160:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	43d9      	mvns	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003170:	4313      	orrs	r3, r2
         );
}
 8003172:	4618      	mov	r0, r3
 8003174:	3724      	adds	r7, #36	; 0x24
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3b01      	subs	r3, #1
 800318c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003190:	d301      	bcc.n	8003196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003192:	2301      	movs	r3, #1
 8003194:	e00f      	b.n	80031b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003196:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <SysTick_Config+0x40>)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800319e:	210f      	movs	r1, #15
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031a4:	f7ff ff8e 	bl	80030c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <SysTick_Config+0x40>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ae:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <SysTick_Config+0x40>)
 80031b0:	2207      	movs	r2, #7
 80031b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	e000e010 	.word	0xe000e010

080031c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff ff29 	bl	8003024 <__NVIC_SetPriorityGrouping>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b086      	sub	sp, #24
 80031de:	af00      	add	r7, sp, #0
 80031e0:	4603      	mov	r3, r0
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031ec:	f7ff ff3e 	bl	800306c <__NVIC_GetPriorityGrouping>
 80031f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	6978      	ldr	r0, [r7, #20]
 80031f8:	f7ff ff8e 	bl	8003118 <NVIC_EncodePriority>
 80031fc:	4602      	mov	r2, r0
 80031fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff5d 	bl	80030c4 <__NVIC_SetPriority>
}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800321c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff31 	bl	8003088 <__NVIC_EnableIRQ>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ffa2 	bl	8003180 <SysTick_Config>
 800323c:	4603      	mov	r3, r0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003256:	e17f      	b.n	8003558 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2101      	movs	r1, #1
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	fa01 f303 	lsl.w	r3, r1, r3
 8003264:	4013      	ands	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8171 	beq.w	8003552 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d005      	beq.n	8003288 <HAL_GPIO_Init+0x40>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d130      	bne.n	80032ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	2203      	movs	r2, #3
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032be:	2201      	movs	r2, #1
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	f003 0201 	and.w	r2, r3, #1
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d118      	bne.n	8003328 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80032fc:	2201      	movs	r2, #1
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	08db      	lsrs	r3, r3, #3
 8003312:	f003 0201 	and.w	r2, r3, #1
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	2b03      	cmp	r3, #3
 8003332:	d017      	beq.n	8003364 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	2203      	movs	r2, #3
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d123      	bne.n	80033b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	08da      	lsrs	r2, r3, #3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3208      	adds	r2, #8
 8003378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	220f      	movs	r2, #15
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	08da      	lsrs	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3208      	adds	r2, #8
 80033b2:	6939      	ldr	r1, [r7, #16]
 80033b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0203 	and.w	r2, r3, #3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80ac 	beq.w	8003552 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fa:	4b5f      	ldr	r3, [pc, #380]	; (8003578 <HAL_GPIO_Init+0x330>)
 80033fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fe:	4a5e      	ldr	r2, [pc, #376]	; (8003578 <HAL_GPIO_Init+0x330>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6613      	str	r3, [r2, #96]	; 0x60
 8003406:	4b5c      	ldr	r3, [pc, #368]	; (8003578 <HAL_GPIO_Init+0x330>)
 8003408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003412:	4a5a      	ldr	r2, [pc, #360]	; (800357c <HAL_GPIO_Init+0x334>)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	3302      	adds	r3, #2
 800341a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	220f      	movs	r2, #15
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800343c:	d025      	beq.n	800348a <HAL_GPIO_Init+0x242>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a4f      	ldr	r2, [pc, #316]	; (8003580 <HAL_GPIO_Init+0x338>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d01f      	beq.n	8003486 <HAL_GPIO_Init+0x23e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4e      	ldr	r2, [pc, #312]	; (8003584 <HAL_GPIO_Init+0x33c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d019      	beq.n	8003482 <HAL_GPIO_Init+0x23a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a4d      	ldr	r2, [pc, #308]	; (8003588 <HAL_GPIO_Init+0x340>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_GPIO_Init+0x236>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a4c      	ldr	r2, [pc, #304]	; (800358c <HAL_GPIO_Init+0x344>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00d      	beq.n	800347a <HAL_GPIO_Init+0x232>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a4b      	ldr	r2, [pc, #300]	; (8003590 <HAL_GPIO_Init+0x348>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d007      	beq.n	8003476 <HAL_GPIO_Init+0x22e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a4a      	ldr	r2, [pc, #296]	; (8003594 <HAL_GPIO_Init+0x34c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d101      	bne.n	8003472 <HAL_GPIO_Init+0x22a>
 800346e:	2306      	movs	r3, #6
 8003470:	e00c      	b.n	800348c <HAL_GPIO_Init+0x244>
 8003472:	2307      	movs	r3, #7
 8003474:	e00a      	b.n	800348c <HAL_GPIO_Init+0x244>
 8003476:	2305      	movs	r3, #5
 8003478:	e008      	b.n	800348c <HAL_GPIO_Init+0x244>
 800347a:	2304      	movs	r3, #4
 800347c:	e006      	b.n	800348c <HAL_GPIO_Init+0x244>
 800347e:	2303      	movs	r3, #3
 8003480:	e004      	b.n	800348c <HAL_GPIO_Init+0x244>
 8003482:	2302      	movs	r3, #2
 8003484:	e002      	b.n	800348c <HAL_GPIO_Init+0x244>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_GPIO_Init+0x244>
 800348a:	2300      	movs	r3, #0
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	f002 0203 	and.w	r2, r2, #3
 8003492:	0092      	lsls	r2, r2, #2
 8003494:	4093      	lsls	r3, r2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800349c:	4937      	ldr	r1, [pc, #220]	; (800357c <HAL_GPIO_Init+0x334>)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	089b      	lsrs	r3, r3, #2
 80034a2:	3302      	adds	r3, #2
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034aa:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <HAL_GPIO_Init+0x350>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034ce:	4a32      	ldr	r2, [pc, #200]	; (8003598 <HAL_GPIO_Init+0x350>)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034d4:	4b30      	ldr	r3, [pc, #192]	; (8003598 <HAL_GPIO_Init+0x350>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	43db      	mvns	r3, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034f8:	4a27      	ldr	r2, [pc, #156]	; (8003598 <HAL_GPIO_Init+0x350>)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034fe:	4b26      	ldr	r3, [pc, #152]	; (8003598 <HAL_GPIO_Init+0x350>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003522:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <HAL_GPIO_Init+0x350>)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003528:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <HAL_GPIO_Init+0x350>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	43db      	mvns	r3, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800354c:	4a12      	ldr	r2, [pc, #72]	; (8003598 <HAL_GPIO_Init+0x350>)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	3301      	adds	r3, #1
 8003556:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	fa22 f303 	lsr.w	r3, r2, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	f47f ae78 	bne.w	8003258 <HAL_GPIO_Init+0x10>
  }
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	40010000 	.word	0x40010000
 8003580:	48000400 	.word	0x48000400
 8003584:	48000800 	.word	0x48000800
 8003588:	48000c00 	.word	0x48000c00
 800358c:	48001000 	.word	0x48001000
 8003590:	48001400 	.word	0x48001400
 8003594:	48001800 	.word	0x48001800
 8003598:	40010400 	.word	0x40010400

0800359c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	887b      	ldrh	r3, [r7, #2]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
 80035b8:	e001      	b.n	80035be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]
 80035d8:	4613      	mov	r3, r2
 80035da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035dc:	787b      	ldrb	r3, [r7, #1]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035e2:	887a      	ldrh	r2, [r7, #2]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035e8:	e002      	b.n	80035f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ea:	887a      	ldrh	r2, [r7, #2]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <HAL_PWREx_GetVoltageRange+0x18>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003608:	4618      	mov	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40007000 	.word	0x40007000

08003618 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003626:	d130      	bne.n	800368a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003628:	4b23      	ldr	r3, [pc, #140]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003634:	d038      	beq.n	80036a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003636:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800363e:	4a1e      	ldr	r2, [pc, #120]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003640:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003644:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003646:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2232      	movs	r2, #50	; 0x32
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	4a1b      	ldr	r2, [pc, #108]	; (80036c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0c9b      	lsrs	r3, r3, #18
 8003658:	3301      	adds	r3, #1
 800365a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800365c:	e002      	b.n	8003664 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3b01      	subs	r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003664:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003670:	d102      	bne.n	8003678 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f2      	bne.n	800365e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003678:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	d110      	bne.n	80036a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e00f      	b.n	80036aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003696:	d007      	beq.n	80036a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003698:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036a0:	4a05      	ldr	r2, [pc, #20]	; (80036b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40007000 	.word	0x40007000
 80036bc:	20000018 	.word	0x20000018
 80036c0:	431bde83 	.word	0x431bde83

080036c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e3ca      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036d6:	4b97      	ldr	r3, [pc, #604]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036e0:	4b94      	ldr	r3, [pc, #592]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80e4 	beq.w	80038c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <HAL_RCC_OscConfig+0x4a>
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b0c      	cmp	r3, #12
 8003702:	f040 808b 	bne.w	800381c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b01      	cmp	r3, #1
 800370a:	f040 8087 	bne.w	800381c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800370e:	4b89      	ldr	r3, [pc, #548]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_RCC_OscConfig+0x62>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e3a2      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1a      	ldr	r2, [r3, #32]
 800372a:	4b82      	ldr	r3, [pc, #520]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d004      	beq.n	8003740 <HAL_RCC_OscConfig+0x7c>
 8003736:	4b7f      	ldr	r3, [pc, #508]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800373e:	e005      	b.n	800374c <HAL_RCC_OscConfig+0x88>
 8003740:	4b7c      	ldr	r3, [pc, #496]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003746:	091b      	lsrs	r3, r3, #4
 8003748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800374c:	4293      	cmp	r3, r2
 800374e:	d223      	bcs.n	8003798 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fd55 	bl	8004204 <RCC_SetFlashLatencyFromMSIRange>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e383      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003764:	4b73      	ldr	r3, [pc, #460]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a72      	ldr	r2, [pc, #456]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 800376a:	f043 0308 	orr.w	r3, r3, #8
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	4b70      	ldr	r3, [pc, #448]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	496d      	ldr	r1, [pc, #436]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003782:	4b6c      	ldr	r3, [pc, #432]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	4968      	ldr	r1, [pc, #416]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
 8003796:	e025      	b.n	80037e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003798:	4b66      	ldr	r3, [pc, #408]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a65      	ldr	r2, [pc, #404]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 800379e:	f043 0308 	orr.w	r3, r3, #8
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	4b63      	ldr	r3, [pc, #396]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	4960      	ldr	r1, [pc, #384]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037b6:	4b5f      	ldr	r3, [pc, #380]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	495b      	ldr	r1, [pc, #364]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fd15 	bl	8004204 <RCC_SetFlashLatencyFromMSIRange>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e343      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037e4:	f000 fc4a 	bl	800407c <HAL_RCC_GetSysClockFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b52      	ldr	r3, [pc, #328]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	4950      	ldr	r1, [pc, #320]	; (8003938 <HAL_RCC_OscConfig+0x274>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003800:	4a4e      	ldr	r2, [pc, #312]	; (800393c <HAL_RCC_OscConfig+0x278>)
 8003802:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003804:	4b4e      	ldr	r3, [pc, #312]	; (8003940 <HAL_RCC_OscConfig+0x27c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fbaf 	bl	8002f6c <HAL_InitTick>
 800380e:	4603      	mov	r3, r0
 8003810:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d052      	beq.n	80038be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	e327      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d032      	beq.n	800388a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003824:	4b43      	ldr	r3, [pc, #268]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a42      	ldr	r2, [pc, #264]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003830:	f7ff fbec 	bl	800300c <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003838:	f7ff fbe8 	bl	800300c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e310      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800384a:	4b3a      	ldr	r3, [pc, #232]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003856:	4b37      	ldr	r3, [pc, #220]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a36      	ldr	r2, [pc, #216]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 800385c:	f043 0308 	orr.w	r3, r3, #8
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b34      	ldr	r3, [pc, #208]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	4931      	ldr	r1, [pc, #196]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003874:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	492c      	ldr	r1, [pc, #176]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
 8003888:	e01a      	b.n	80038c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800388a:	4b2a      	ldr	r3, [pc, #168]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a29      	ldr	r2, [pc, #164]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003896:	f7ff fbb9 	bl	800300c <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800389e:	f7ff fbb5 	bl	800300c <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e2dd      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038b0:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f0      	bne.n	800389e <HAL_RCC_OscConfig+0x1da>
 80038bc:	e000      	b.n	80038c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d074      	beq.n	80039b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d005      	beq.n	80038de <HAL_RCC_OscConfig+0x21a>
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b0c      	cmp	r3, #12
 80038d6:	d10e      	bne.n	80038f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d10b      	bne.n	80038f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d064      	beq.n	80039b4 <HAL_RCC_OscConfig+0x2f0>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d160      	bne.n	80039b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e2ba      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fe:	d106      	bne.n	800390e <HAL_RCC_OscConfig+0x24a>
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	e026      	b.n	800395c <HAL_RCC_OscConfig+0x298>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003916:	d115      	bne.n	8003944 <HAL_RCC_OscConfig+0x280>
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a05      	ldr	r2, [pc, #20]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 800391e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a02      	ldr	r2, [pc, #8]	; (8003934 <HAL_RCC_OscConfig+0x270>)
 800392a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	e014      	b.n	800395c <HAL_RCC_OscConfig+0x298>
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	0800a0cc 	.word	0x0800a0cc
 800393c:	20000018 	.word	0x20000018
 8003940:	2000001c 	.word	0x2000001c
 8003944:	4ba0      	ldr	r3, [pc, #640]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a9f      	ldr	r2, [pc, #636]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 800394a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b9d      	ldr	r3, [pc, #628]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a9c      	ldr	r2, [pc, #624]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d013      	beq.n	800398c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003964:	f7ff fb52 	bl	800300c <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800396c:	f7ff fb4e 	bl	800300c <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	; 0x64
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e276      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800397e:	4b92      	ldr	r3, [pc, #584]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x2a8>
 800398a:	e014      	b.n	80039b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398c:	f7ff fb3e 	bl	800300c <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003994:	f7ff fb3a 	bl	800300c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	; 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e262      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039a6:	4b88      	ldr	r3, [pc, #544]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x2d0>
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d060      	beq.n	8003a84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_OscConfig+0x310>
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d119      	bne.n	8003a02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d116      	bne.n	8003a02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d4:	4b7c      	ldr	r3, [pc, #496]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_OscConfig+0x328>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e23f      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ec:	4b76      	ldr	r3, [pc, #472]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	061b      	lsls	r3, r3, #24
 80039fa:	4973      	ldr	r1, [pc, #460]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a00:	e040      	b.n	8003a84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d023      	beq.n	8003a52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a0a:	4b6f      	ldr	r3, [pc, #444]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a6e      	ldr	r2, [pc, #440]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a16:	f7ff faf9 	bl	800300c <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a1e:	f7ff faf5 	bl	800300c <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e21d      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a30:	4b65      	ldr	r3, [pc, #404]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3c:	4b62      	ldr	r3, [pc, #392]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	061b      	lsls	r3, r3, #24
 8003a4a:	495f      	ldr	r1, [pc, #380]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]
 8003a50:	e018      	b.n	8003a84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a52:	4b5d      	ldr	r3, [pc, #372]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a5c      	ldr	r2, [pc, #368]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5e:	f7ff fad5 	bl	800300c <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a66:	f7ff fad1 	bl	800300c <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e1f9      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a78:	4b53      	ldr	r3, [pc, #332]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f0      	bne.n	8003a66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d03c      	beq.n	8003b0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01c      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a98:	4b4b      	ldr	r3, [pc, #300]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a9e:	4a4a      	ldr	r2, [pc, #296]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa8:	f7ff fab0 	bl	800300c <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab0:	f7ff faac 	bl	800300c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e1d4      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ac2:	4b41      	ldr	r3, [pc, #260]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0ef      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x3ec>
 8003ad0:	e01b      	b.n	8003b0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad2:	4b3d      	ldr	r3, [pc, #244]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad8:	4a3b      	ldr	r2, [pc, #236]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae2:	f7ff fa93 	bl	800300c <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aea:	f7ff fa8f 	bl	800300c <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e1b7      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003afc:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1ef      	bne.n	8003aea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80a6 	beq.w	8003c64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b1c:	4b2a      	ldr	r3, [pc, #168]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10d      	bne.n	8003b44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b28:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	4a26      	ldr	r2, [pc, #152]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b32:	6593      	str	r3, [r2, #88]	; 0x58
 8003b34:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b40:	2301      	movs	r3, #1
 8003b42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b44:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <HAL_RCC_OscConfig+0x508>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d118      	bne.n	8003b82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b50:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <HAL_RCC_OscConfig+0x508>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <HAL_RCC_OscConfig+0x508>)
 8003b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5c:	f7ff fa56 	bl	800300c <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b64:	f7ff fa52 	bl	800300c <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e17a      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b76:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <HAL_RCC_OscConfig+0x508>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d108      	bne.n	8003b9c <HAL_RCC_OscConfig+0x4d8>
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b90:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b9a:	e029      	b.n	8003bf0 <HAL_RCC_OscConfig+0x52c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b05      	cmp	r3, #5
 8003ba2:	d115      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x50c>
 8003ba4:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003baa:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003bac:	f043 0304 	orr.w	r3, r3, #4
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	4a03      	ldr	r2, [pc, #12]	; (8003bc8 <HAL_RCC_OscConfig+0x504>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bc4:	e014      	b.n	8003bf0 <HAL_RCC_OscConfig+0x52c>
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	4b9c      	ldr	r3, [pc, #624]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd6:	4a9b      	ldr	r2, [pc, #620]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003be0:	4b98      	ldr	r3, [pc, #608]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	4a97      	ldr	r2, [pc, #604]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003be8:	f023 0304 	bic.w	r3, r3, #4
 8003bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d016      	beq.n	8003c26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf8:	f7ff fa08 	bl	800300c <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c00:	f7ff fa04 	bl	800300c <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e12a      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c16:	4b8b      	ldr	r3, [pc, #556]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0ed      	beq.n	8003c00 <HAL_RCC_OscConfig+0x53c>
 8003c24:	e015      	b.n	8003c52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c26:	f7ff f9f1 	bl	800300c <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2e:	f7ff f9ed 	bl	800300c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e113      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c44:	4b7f      	ldr	r3, [pc, #508]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1ed      	bne.n	8003c2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c52:	7ffb      	ldrb	r3, [r7, #31]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d105      	bne.n	8003c64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c58:	4b7a      	ldr	r3, [pc, #488]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5c:	4a79      	ldr	r2, [pc, #484]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c62:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 80fe 	beq.w	8003e6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	f040 80d0 	bne.w	8003e18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c78:	4b72      	ldr	r3, [pc, #456]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f003 0203 	and.w	r2, r3, #3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d130      	bne.n	8003cee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	3b01      	subs	r3, #1
 8003c98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d127      	bne.n	8003cee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d11f      	bne.n	8003cee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cb8:	2a07      	cmp	r2, #7
 8003cba:	bf14      	ite	ne
 8003cbc:	2201      	movne	r2, #1
 8003cbe:	2200      	moveq	r2, #0
 8003cc0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d113      	bne.n	8003cee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	085b      	lsrs	r3, r3, #1
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d109      	bne.n	8003cee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	085b      	lsrs	r3, r3, #1
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d06e      	beq.n	8003dcc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	2b0c      	cmp	r3, #12
 8003cf2:	d069      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003cf4:	4b53      	ldr	r3, [pc, #332]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d105      	bne.n	8003d0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d00:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0ad      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d10:	4b4c      	ldr	r3, [pc, #304]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a4b      	ldr	r2, [pc, #300]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d1c:	f7ff f976 	bl	800300c <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d24:	f7ff f972 	bl	800300c <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e09a      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d36:	4b43      	ldr	r3, [pc, #268]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d42:	4b40      	ldr	r3, [pc, #256]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	4b40      	ldr	r3, [pc, #256]	; (8003e48 <HAL_RCC_OscConfig+0x784>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d52:	3a01      	subs	r2, #1
 8003d54:	0112      	lsls	r2, r2, #4
 8003d56:	4311      	orrs	r1, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d5c:	0212      	lsls	r2, r2, #8
 8003d5e:	4311      	orrs	r1, r2
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d64:	0852      	lsrs	r2, r2, #1
 8003d66:	3a01      	subs	r2, #1
 8003d68:	0552      	lsls	r2, r2, #21
 8003d6a:	4311      	orrs	r1, r2
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d70:	0852      	lsrs	r2, r2, #1
 8003d72:	3a01      	subs	r2, #1
 8003d74:	0652      	lsls	r2, r2, #25
 8003d76:	4311      	orrs	r1, r2
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d7c:	0912      	lsrs	r2, r2, #4
 8003d7e:	0452      	lsls	r2, r2, #17
 8003d80:	430a      	orrs	r2, r1
 8003d82:	4930      	ldr	r1, [pc, #192]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d88:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a2d      	ldr	r2, [pc, #180]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d94:	4b2b      	ldr	r3, [pc, #172]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4a2a      	ldr	r2, [pc, #168]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003da0:	f7ff f934 	bl	800300c <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da8:	f7ff f930 	bl	800300c <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e058      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dba:	4b22      	ldr	r3, [pc, #136]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dc6:	e050      	b.n	8003e6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e04f      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d148      	bne.n	8003e6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003dd8:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003de2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003de4:	4b17      	ldr	r3, [pc, #92]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4a16      	ldr	r2, [pc, #88]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003df0:	f7ff f90c 	bl	800300c <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df8:	f7ff f908 	bl	800300c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e030      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0a:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0x734>
 8003e16:	e028      	b.n	8003e6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2b0c      	cmp	r3, #12
 8003e1c:	d023      	beq.n	8003e66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <HAL_RCC_OscConfig+0x780>)
 8003e24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2a:	f7ff f8ef 	bl	800300c <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e30:	e00c      	b.n	8003e4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e32:	f7ff f8eb 	bl	800300c <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d905      	bls.n	8003e4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e013      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
 8003e44:	40021000 	.word	0x40021000
 8003e48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e4c:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_RCC_OscConfig+0x7b0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1ec      	bne.n	8003e32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e58:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <HAL_RCC_OscConfig+0x7b0>)
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	4905      	ldr	r1, [pc, #20]	; (8003e74 <HAL_RCC_OscConfig+0x7b0>)
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCC_OscConfig+0x7b4>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	60cb      	str	r3, [r1, #12]
 8003e64:	e001      	b.n	8003e6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3720      	adds	r7, #32
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40021000 	.word	0x40021000
 8003e78:	feeefffc 	.word	0xfeeefffc

08003e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0e7      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e90:	4b75      	ldr	r3, [pc, #468]	; (8004068 <HAL_RCC_ClockConfig+0x1ec>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d910      	bls.n	8003ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9e:	4b72      	ldr	r3, [pc, #456]	; (8004068 <HAL_RCC_ClockConfig+0x1ec>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f023 0207 	bic.w	r2, r3, #7
 8003ea6:	4970      	ldr	r1, [pc, #448]	; (8004068 <HAL_RCC_ClockConfig+0x1ec>)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b6e      	ldr	r3, [pc, #440]	; (8004068 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0cf      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d010      	beq.n	8003eee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	4b66      	ldr	r3, [pc, #408]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d908      	bls.n	8003eee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003edc:	4b63      	ldr	r3, [pc, #396]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	4960      	ldr	r1, [pc, #384]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d04c      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f02:	4b5a      	ldr	r3, [pc, #360]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d121      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e0a6      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d107      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f1a:	4b54      	ldr	r3, [pc, #336]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d115      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e09a      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d107      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f32:	4b4e      	ldr	r3, [pc, #312]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d109      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e08e      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f42:	4b4a      	ldr	r3, [pc, #296]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e086      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f52:	4b46      	ldr	r3, [pc, #280]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f023 0203 	bic.w	r2, r3, #3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4943      	ldr	r1, [pc, #268]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f64:	f7ff f852 	bl	800300c <HAL_GetTick>
 8003f68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6a:	e00a      	b.n	8003f82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f6c:	f7ff f84e 	bl	800300c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e06e      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	4b3a      	ldr	r3, [pc, #232]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 020c 	and.w	r2, r3, #12
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d1eb      	bne.n	8003f6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d010      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	4b31      	ldr	r3, [pc, #196]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d208      	bcs.n	8003fc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb0:	4b2e      	ldr	r3, [pc, #184]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	492b      	ldr	r1, [pc, #172]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc2:	4b29      	ldr	r3, [pc, #164]	; (8004068 <HAL_RCC_ClockConfig+0x1ec>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d210      	bcs.n	8003ff2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd0:	4b25      	ldr	r3, [pc, #148]	; (8004068 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f023 0207 	bic.w	r2, r3, #7
 8003fd8:	4923      	ldr	r1, [pc, #140]	; (8004068 <HAL_RCC_ClockConfig+0x1ec>)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe0:	4b21      	ldr	r3, [pc, #132]	; (8004068 <HAL_RCC_ClockConfig+0x1ec>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e036      	b.n	8004060 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d008      	beq.n	8004010 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	4918      	ldr	r1, [pc, #96]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 800400c:	4313      	orrs	r3, r2
 800400e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d009      	beq.n	8004030 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800401c:	4b13      	ldr	r3, [pc, #76]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	4910      	ldr	r1, [pc, #64]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 800402c:	4313      	orrs	r3, r2
 800402e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004030:	f000 f824 	bl	800407c <HAL_RCC_GetSysClockFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b0d      	ldr	r3, [pc, #52]	; (800406c <HAL_RCC_ClockConfig+0x1f0>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	091b      	lsrs	r3, r3, #4
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	490b      	ldr	r1, [pc, #44]	; (8004070 <HAL_RCC_ClockConfig+0x1f4>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	f003 031f 	and.w	r3, r3, #31
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
 800404c:	4a09      	ldr	r2, [pc, #36]	; (8004074 <HAL_RCC_ClockConfig+0x1f8>)
 800404e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004050:	4b09      	ldr	r3, [pc, #36]	; (8004078 <HAL_RCC_ClockConfig+0x1fc>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7fe ff89 	bl	8002f6c <HAL_InitTick>
 800405a:	4603      	mov	r3, r0
 800405c:	72fb      	strb	r3, [r7, #11]

  return status;
 800405e:	7afb      	ldrb	r3, [r7, #11]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40022000 	.word	0x40022000
 800406c:	40021000 	.word	0x40021000
 8004070:	0800a0cc 	.word	0x0800a0cc
 8004074:	20000018 	.word	0x20000018
 8004078:	2000001c 	.word	0x2000001c

0800407c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800407c:	b480      	push	{r7}
 800407e:	b089      	sub	sp, #36	; 0x24
 8004080:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	2300      	movs	r3, #0
 8004088:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800408a:	4b3e      	ldr	r3, [pc, #248]	; (8004184 <HAL_RCC_GetSysClockFreq+0x108>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004094:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <HAL_RCC_GetSysClockFreq+0x108>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x34>
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	2b0c      	cmp	r3, #12
 80040a8:	d121      	bne.n	80040ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d11e      	bne.n	80040ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040b0:	4b34      	ldr	r3, [pc, #208]	; (8004184 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d107      	bne.n	80040cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040bc:	4b31      	ldr	r3, [pc, #196]	; (8004184 <HAL_RCC_GetSysClockFreq+0x108>)
 80040be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	e005      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040cc:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040d8:	4a2b      	ldr	r2, [pc, #172]	; (8004188 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10d      	bne.n	8004104 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040ec:	e00a      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d102      	bne.n	80040fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040f4:	4b25      	ldr	r3, [pc, #148]	; (800418c <HAL_RCC_GetSysClockFreq+0x110>)
 80040f6:	61bb      	str	r3, [r7, #24]
 80040f8:	e004      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d101      	bne.n	8004104 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004100:	4b23      	ldr	r3, [pc, #140]	; (8004190 <HAL_RCC_GetSysClockFreq+0x114>)
 8004102:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b0c      	cmp	r3, #12
 8004108:	d134      	bne.n	8004174 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800410a:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <HAL_RCC_GetSysClockFreq+0x108>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d003      	beq.n	8004122 <HAL_RCC_GetSysClockFreq+0xa6>
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b03      	cmp	r3, #3
 800411e:	d003      	beq.n	8004128 <HAL_RCC_GetSysClockFreq+0xac>
 8004120:	e005      	b.n	800412e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004122:	4b1a      	ldr	r3, [pc, #104]	; (800418c <HAL_RCC_GetSysClockFreq+0x110>)
 8004124:	617b      	str	r3, [r7, #20]
      break;
 8004126:	e005      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004128:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_RCC_GetSysClockFreq+0x114>)
 800412a:	617b      	str	r3, [r7, #20]
      break;
 800412c:	e002      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	617b      	str	r3, [r7, #20]
      break;
 8004132:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004134:	4b13      	ldr	r3, [pc, #76]	; (8004184 <HAL_RCC_GetSysClockFreq+0x108>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	3301      	adds	r3, #1
 8004140:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004142:	4b10      	ldr	r3, [pc, #64]	; (8004184 <HAL_RCC_GetSysClockFreq+0x108>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	0a1b      	lsrs	r3, r3, #8
 8004148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	fb03 f202 	mul.w	r2, r3, r2
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	fbb2 f3f3 	udiv	r3, r2, r3
 8004158:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <HAL_RCC_GetSysClockFreq+0x108>)
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	0e5b      	lsrs	r3, r3, #25
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	3301      	adds	r3, #1
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004172:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004174:	69bb      	ldr	r3, [r7, #24]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3724      	adds	r7, #36	; 0x24
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000
 8004188:	0800a0e4 	.word	0x0800a0e4
 800418c:	00f42400 	.word	0x00f42400
 8004190:	007a1200 	.word	0x007a1200

08004194 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004198:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800419a:	681b      	ldr	r3, [r3, #0]
}
 800419c:	4618      	mov	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20000018 	.word	0x20000018

080041ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041b0:	f7ff fff0 	bl	8004194 <HAL_RCC_GetHCLKFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	4904      	ldr	r1, [pc, #16]	; (80041d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	f003 031f 	and.w	r3, r3, #31
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40021000 	.word	0x40021000
 80041d4:	0800a0dc 	.word	0x0800a0dc

080041d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041dc:	f7ff ffda 	bl	8004194 <HAL_RCC_GetHCLKFreq>
 80041e0:	4602      	mov	r2, r0
 80041e2:	4b06      	ldr	r3, [pc, #24]	; (80041fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	0adb      	lsrs	r3, r3, #11
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	4904      	ldr	r1, [pc, #16]	; (8004200 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041ee:	5ccb      	ldrb	r3, [r1, r3]
 80041f0:	f003 031f 	and.w	r3, r3, #31
 80041f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40021000 	.word	0x40021000
 8004200:	0800a0dc 	.word	0x0800a0dc

08004204 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800420c:	2300      	movs	r3, #0
 800420e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004210:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800421c:	f7ff f9ee 	bl	80035fc <HAL_PWREx_GetVoltageRange>
 8004220:	6178      	str	r0, [r7, #20]
 8004222:	e014      	b.n	800424e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004228:	4a24      	ldr	r2, [pc, #144]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800422a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422e:	6593      	str	r3, [r2, #88]	; 0x58
 8004230:	4b22      	ldr	r3, [pc, #136]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800423c:	f7ff f9de 	bl	80035fc <HAL_PWREx_GetVoltageRange>
 8004240:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004242:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	4a1d      	ldr	r2, [pc, #116]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004254:	d10b      	bne.n	800426e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b80      	cmp	r3, #128	; 0x80
 800425a:	d919      	bls.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2ba0      	cmp	r3, #160	; 0xa0
 8004260:	d902      	bls.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004262:	2302      	movs	r3, #2
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	e013      	b.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004268:	2301      	movs	r3, #1
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	e010      	b.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b80      	cmp	r3, #128	; 0x80
 8004272:	d902      	bls.n	800427a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004274:	2303      	movs	r3, #3
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	e00a      	b.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b80      	cmp	r3, #128	; 0x80
 800427e:	d102      	bne.n	8004286 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004280:	2302      	movs	r3, #2
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	e004      	b.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b70      	cmp	r3, #112	; 0x70
 800428a:	d101      	bne.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800428c:	2301      	movs	r3, #1
 800428e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f023 0207 	bic.w	r2, r3, #7
 8004298:	4909      	ldr	r1, [pc, #36]	; (80042c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d001      	beq.n	80042b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40022000 	.word	0x40022000

080042c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042cc:	2300      	movs	r3, #0
 80042ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042d0:	2300      	movs	r3, #0
 80042d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d041      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042e8:	d02a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80042ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ee:	d824      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042f4:	d008      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042fa:	d81e      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004304:	d010      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004306:	e018      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004308:	4b86      	ldr	r3, [pc, #536]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4a85      	ldr	r2, [pc, #532]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004312:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004314:	e015      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3304      	adds	r3, #4
 800431a:	2100      	movs	r1, #0
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fabb 	bl	8004898 <RCCEx_PLLSAI1_Config>
 8004322:	4603      	mov	r3, r0
 8004324:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004326:	e00c      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3320      	adds	r3, #32
 800432c:	2100      	movs	r1, #0
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fba6 	bl	8004a80 <RCCEx_PLLSAI2_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004338:	e003      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	74fb      	strb	r3, [r7, #19]
      break;
 800433e:	e000      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004340:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004342:	7cfb      	ldrb	r3, [r7, #19]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004348:	4b76      	ldr	r3, [pc, #472]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004356:	4973      	ldr	r1, [pc, #460]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800435e:	e001      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d041      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004374:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004378:	d02a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800437a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800437e:	d824      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004380:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004384:	d008      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004386:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800438a:	d81e      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004394:	d010      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004396:	e018      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004398:	4b62      	ldr	r3, [pc, #392]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	4a61      	ldr	r2, [pc, #388]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043a4:	e015      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3304      	adds	r3, #4
 80043aa:	2100      	movs	r1, #0
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fa73 	bl	8004898 <RCCEx_PLLSAI1_Config>
 80043b2:	4603      	mov	r3, r0
 80043b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043b6:	e00c      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3320      	adds	r3, #32
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fb5e 	bl	8004a80 <RCCEx_PLLSAI2_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043c8:	e003      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	74fb      	strb	r3, [r7, #19]
      break;
 80043ce:	e000      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80043d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d2:	7cfb      	ldrb	r3, [r7, #19]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10b      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043d8:	4b52      	ldr	r3, [pc, #328]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043e6:	494f      	ldr	r1, [pc, #316]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043ee:	e001      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80a0 	beq.w	8004542 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004402:	2300      	movs	r3, #0
 8004404:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004406:	4b47      	ldr	r3, [pc, #284]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004416:	2300      	movs	r3, #0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00d      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441c:	4b41      	ldr	r3, [pc, #260]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004420:	4a40      	ldr	r2, [pc, #256]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004426:	6593      	str	r3, [r2, #88]	; 0x58
 8004428:	4b3e      	ldr	r3, [pc, #248]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004434:	2301      	movs	r3, #1
 8004436:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004438:	4b3b      	ldr	r3, [pc, #236]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a3a      	ldr	r2, [pc, #232]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800443e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004442:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004444:	f7fe fde2 	bl	800300c <HAL_GetTick>
 8004448:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800444a:	e009      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444c:	f7fe fdde 	bl	800300c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d902      	bls.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	74fb      	strb	r3, [r7, #19]
        break;
 800445e:	e005      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004460:	4b31      	ldr	r3, [pc, #196]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0ef      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800446c:	7cfb      	ldrb	r3, [r7, #19]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d15c      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004472:	4b2c      	ldr	r3, [pc, #176]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01f      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	429a      	cmp	r2, r3
 800448e:	d019      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004490:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800449c:	4b21      	ldr	r3, [pc, #132]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	4a20      	ldr	r2, [pc, #128]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044ac:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b2:	4a1c      	ldr	r2, [pc, #112]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044bc:	4a19      	ldr	r2, [pc, #100]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d016      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ce:	f7fe fd9d 	bl	800300c <HAL_GetTick>
 80044d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d4:	e00b      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d6:	f7fe fd99 	bl	800300c <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d902      	bls.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	74fb      	strb	r3, [r7, #19]
            break;
 80044ec:	e006      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ee:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0ec      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80044fc:	7cfb      	ldrb	r3, [r7, #19]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10c      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004502:	4b08      	ldr	r3, [pc, #32]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004512:	4904      	ldr	r1, [pc, #16]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800451a:	e009      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	74bb      	strb	r3, [r7, #18]
 8004520:	e006      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000
 8004528:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452c:	7cfb      	ldrb	r3, [r7, #19]
 800452e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004530:	7c7b      	ldrb	r3, [r7, #17]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d105      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004536:	4b9e      	ldr	r3, [pc, #632]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453a:	4a9d      	ldr	r2, [pc, #628]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004540:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800454e:	4b98      	ldr	r3, [pc, #608]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004554:	f023 0203 	bic.w	r2, r3, #3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	4994      	ldr	r1, [pc, #592]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004570:	4b8f      	ldr	r3, [pc, #572]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f023 020c 	bic.w	r2, r3, #12
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	498c      	ldr	r1, [pc, #560]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004592:	4b87      	ldr	r3, [pc, #540]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	4983      	ldr	r1, [pc, #524]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045b4:	4b7e      	ldr	r3, [pc, #504]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c2:	497b      	ldr	r1, [pc, #492]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045d6:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e4:	4972      	ldr	r1, [pc, #456]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045f8:	4b6d      	ldr	r3, [pc, #436]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004606:	496a      	ldr	r1, [pc, #424]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800461a:	4b65      	ldr	r3, [pc, #404]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004620:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	4961      	ldr	r1, [pc, #388]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800463c:	4b5c      	ldr	r3, [pc, #368]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004642:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464a:	4959      	ldr	r1, [pc, #356]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800465e:	4b54      	ldr	r3, [pc, #336]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466c:	4950      	ldr	r1, [pc, #320]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004680:	4b4b      	ldr	r3, [pc, #300]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468e:	4948      	ldr	r1, [pc, #288]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046a2:	4b43      	ldr	r3, [pc, #268]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	493f      	ldr	r1, [pc, #252]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d028      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046c4:	4b3a      	ldr	r3, [pc, #232]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d2:	4937      	ldr	r1, [pc, #220]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046e2:	d106      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e4:	4b32      	ldr	r3, [pc, #200]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4a31      	ldr	r2, [pc, #196]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ee:	60d3      	str	r3, [r2, #12]
 80046f0:	e011      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046fa:	d10c      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	2101      	movs	r1, #1
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f8c8 	bl	8004898 <RCCEx_PLLSAI1_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004712:	7cfb      	ldrb	r3, [r7, #19]
 8004714:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d028      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004722:	4b23      	ldr	r3, [pc, #140]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004728:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	491f      	ldr	r1, [pc, #124]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004740:	d106      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004742:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	4a1a      	ldr	r2, [pc, #104]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004748:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800474c:	60d3      	str	r3, [r2, #12]
 800474e:	e011      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004754:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004758:	d10c      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3304      	adds	r3, #4
 800475e:	2101      	movs	r1, #1
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f899 	bl	8004898 <RCCEx_PLLSAI1_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800476a:	7cfb      	ldrb	r3, [r7, #19]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d02b      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004786:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478e:	4908      	ldr	r1, [pc, #32]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800479a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800479e:	d109      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a0:	4b03      	ldr	r3, [pc, #12]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	4a02      	ldr	r2, [pc, #8]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047aa:	60d3      	str	r3, [r2, #12]
 80047ac:	e014      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047bc:	d10c      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3304      	adds	r3, #4
 80047c2:	2101      	movs	r1, #1
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 f867 	bl	8004898 <RCCEx_PLLSAI1_Config>
 80047ca:	4603      	mov	r3, r0
 80047cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ce:	7cfb      	ldrb	r3, [r7, #19]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d02f      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047e4:	4b2b      	ldr	r3, [pc, #172]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047f2:	4928      	ldr	r1, [pc, #160]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004802:	d10d      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3304      	adds	r3, #4
 8004808:	2102      	movs	r1, #2
 800480a:	4618      	mov	r0, r3
 800480c:	f000 f844 	bl	8004898 <RCCEx_PLLSAI1_Config>
 8004810:	4603      	mov	r3, r0
 8004812:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004814:	7cfb      	ldrb	r3, [r7, #19]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d014      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800481a:	7cfb      	ldrb	r3, [r7, #19]
 800481c:	74bb      	strb	r3, [r7, #18]
 800481e:	e011      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004828:	d10c      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3320      	adds	r3, #32
 800482e:	2102      	movs	r1, #2
 8004830:	4618      	mov	r0, r3
 8004832:	f000 f925 	bl	8004a80 <RCCEx_PLLSAI2_Config>
 8004836:	4603      	mov	r3, r0
 8004838:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800483a:	7cfb      	ldrb	r3, [r7, #19]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004840:	7cfb      	ldrb	r3, [r7, #19]
 8004842:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004850:	4b10      	ldr	r3, [pc, #64]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800485e:	490d      	ldr	r1, [pc, #52]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004872:	4b08      	ldr	r3, [pc, #32]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004878:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004882:	4904      	ldr	r1, [pc, #16]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800488a:	7cbb      	ldrb	r3, [r7, #18]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40021000 	.word	0x40021000

08004898 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048a6:	4b75      	ldr	r3, [pc, #468]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d018      	beq.n	80048e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048b2:	4b72      	ldr	r3, [pc, #456]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f003 0203 	and.w	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d10d      	bne.n	80048de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
       ||
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048ca:	4b6c      	ldr	r3, [pc, #432]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
       ||
 80048da:	429a      	cmp	r2, r3
 80048dc:	d047      	beq.n	800496e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
 80048e2:	e044      	b.n	800496e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d018      	beq.n	800491e <RCCEx_PLLSAI1_Config+0x86>
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d825      	bhi.n	800493c <RCCEx_PLLSAI1_Config+0xa4>
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d002      	beq.n	80048fa <RCCEx_PLLSAI1_Config+0x62>
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d009      	beq.n	800490c <RCCEx_PLLSAI1_Config+0x74>
 80048f8:	e020      	b.n	800493c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048fa:	4b60      	ldr	r3, [pc, #384]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d11d      	bne.n	8004942 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800490a:	e01a      	b.n	8004942 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800490c:	4b5b      	ldr	r3, [pc, #364]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004914:	2b00      	cmp	r3, #0
 8004916:	d116      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800491c:	e013      	b.n	8004946 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800491e:	4b57      	ldr	r3, [pc, #348]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10f      	bne.n	800494a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800492a:	4b54      	ldr	r3, [pc, #336]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800493a:	e006      	b.n	800494a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
      break;
 8004940:	e004      	b.n	800494c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004942:	bf00      	nop
 8004944:	e002      	b.n	800494c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004946:	bf00      	nop
 8004948:	e000      	b.n	800494c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800494a:	bf00      	nop
    }

    if(status == HAL_OK)
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10d      	bne.n	800496e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004952:	4b4a      	ldr	r3, [pc, #296]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6819      	ldr	r1, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	3b01      	subs	r3, #1
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	430b      	orrs	r3, r1
 8004968:	4944      	ldr	r1, [pc, #272]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d17d      	bne.n	8004a70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004974:	4b41      	ldr	r3, [pc, #260]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a40      	ldr	r2, [pc, #256]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800497a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800497e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004980:	f7fe fb44 	bl	800300c <HAL_GetTick>
 8004984:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004986:	e009      	b.n	800499c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004988:	f7fe fb40 	bl	800300c <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d902      	bls.n	800499c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	73fb      	strb	r3, [r7, #15]
        break;
 800499a:	e005      	b.n	80049a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800499c:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1ef      	bne.n	8004988 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d160      	bne.n	8004a70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d111      	bne.n	80049d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049b4:	4b31      	ldr	r3, [pc, #196]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6892      	ldr	r2, [r2, #8]
 80049c4:	0211      	lsls	r1, r2, #8
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68d2      	ldr	r2, [r2, #12]
 80049ca:	0912      	lsrs	r2, r2, #4
 80049cc:	0452      	lsls	r2, r2, #17
 80049ce:	430a      	orrs	r2, r1
 80049d0:	492a      	ldr	r1, [pc, #168]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	610b      	str	r3, [r1, #16]
 80049d6:	e027      	b.n	8004a28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d112      	bne.n	8004a04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049de:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6892      	ldr	r2, [r2, #8]
 80049ee:	0211      	lsls	r1, r2, #8
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6912      	ldr	r2, [r2, #16]
 80049f4:	0852      	lsrs	r2, r2, #1
 80049f6:	3a01      	subs	r2, #1
 80049f8:	0552      	lsls	r2, r2, #21
 80049fa:	430a      	orrs	r2, r1
 80049fc:	491f      	ldr	r1, [pc, #124]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	610b      	str	r3, [r1, #16]
 8004a02:	e011      	b.n	8004a28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a04:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6892      	ldr	r2, [r2, #8]
 8004a14:	0211      	lsls	r1, r2, #8
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6952      	ldr	r2, [r2, #20]
 8004a1a:	0852      	lsrs	r2, r2, #1
 8004a1c:	3a01      	subs	r2, #1
 8004a1e:	0652      	lsls	r2, r2, #25
 8004a20:	430a      	orrs	r2, r1
 8004a22:	4916      	ldr	r1, [pc, #88]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a28:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a13      	ldr	r2, [pc, #76]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fe faea 	bl	800300c <HAL_GetTick>
 8004a38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a3a:	e009      	b.n	8004a50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a3c:	f7fe fae6 	bl	800300c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d902      	bls.n	8004a50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a4e:	e005      	b.n	8004a5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a50:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ef      	beq.n	8004a3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	4904      	ldr	r1, [pc, #16]	; (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000

08004a80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a8e:	4b6a      	ldr	r3, [pc, #424]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d018      	beq.n	8004acc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a9a:	4b67      	ldr	r3, [pc, #412]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f003 0203 	and.w	r2, r3, #3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d10d      	bne.n	8004ac6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
       ||
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ab2:	4b61      	ldr	r3, [pc, #388]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	091b      	lsrs	r3, r3, #4
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d047      	beq.n	8004b56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	73fb      	strb	r3, [r7, #15]
 8004aca:	e044      	b.n	8004b56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d018      	beq.n	8004b06 <RCCEx_PLLSAI2_Config+0x86>
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d825      	bhi.n	8004b24 <RCCEx_PLLSAI2_Config+0xa4>
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d002      	beq.n	8004ae2 <RCCEx_PLLSAI2_Config+0x62>
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d009      	beq.n	8004af4 <RCCEx_PLLSAI2_Config+0x74>
 8004ae0:	e020      	b.n	8004b24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ae2:	4b55      	ldr	r3, [pc, #340]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d11d      	bne.n	8004b2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af2:	e01a      	b.n	8004b2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004af4:	4b50      	ldr	r3, [pc, #320]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d116      	bne.n	8004b2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b04:	e013      	b.n	8004b2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b06:	4b4c      	ldr	r3, [pc, #304]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10f      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b12:	4b49      	ldr	r3, [pc, #292]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b22:	e006      	b.n	8004b32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
      break;
 8004b28:	e004      	b.n	8004b34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e002      	b.n	8004b34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b32:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10d      	bne.n	8004b56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b3a:	4b3f      	ldr	r3, [pc, #252]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6819      	ldr	r1, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	4939      	ldr	r1, [pc, #228]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d167      	bne.n	8004c2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b5c:	4b36      	ldr	r3, [pc, #216]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a35      	ldr	r2, [pc, #212]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b68:	f7fe fa50 	bl	800300c <HAL_GetTick>
 8004b6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b6e:	e009      	b.n	8004b84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b70:	f7fe fa4c 	bl	800300c <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d902      	bls.n	8004b84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	73fb      	strb	r3, [r7, #15]
        break;
 8004b82:	e005      	b.n	8004b90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b84:	4b2c      	ldr	r3, [pc, #176]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1ef      	bne.n	8004b70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d14a      	bne.n	8004c2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d111      	bne.n	8004bc0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b9c:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6892      	ldr	r2, [r2, #8]
 8004bac:	0211      	lsls	r1, r2, #8
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	68d2      	ldr	r2, [r2, #12]
 8004bb2:	0912      	lsrs	r2, r2, #4
 8004bb4:	0452      	lsls	r2, r2, #17
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	491f      	ldr	r1, [pc, #124]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	614b      	str	r3, [r1, #20]
 8004bbe:	e011      	b.n	8004be4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6892      	ldr	r2, [r2, #8]
 8004bd0:	0211      	lsls	r1, r2, #8
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6912      	ldr	r2, [r2, #16]
 8004bd6:	0852      	lsrs	r2, r2, #1
 8004bd8:	3a01      	subs	r2, #1
 8004bda:	0652      	lsls	r2, r2, #25
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	4916      	ldr	r1, [pc, #88]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004be4:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a13      	ldr	r2, [pc, #76]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf0:	f7fe fa0c 	bl	800300c <HAL_GetTick>
 8004bf4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bf6:	e009      	b.n	8004c0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bf8:	f7fe fa08 	bl	800300c <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d902      	bls.n	8004c0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	73fb      	strb	r3, [r7, #15]
          break;
 8004c0a:	e005      	b.n	8004c18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0ef      	beq.n	8004bf8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	4904      	ldr	r1, [pc, #16]	; (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000

08004c3c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e049      	b.n	8004ce2 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	795b      	ldrb	r3, [r3, #5]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d105      	bne.n	8004c64 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fd f8f6 	bl	8001e50 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0204 	orr.w	r2, r2, #4
 8004c78:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d104      	bne.n	8004c92 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e027      	b.n	8004ce2 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004c92:	f7fe f9bb 	bl	800300c <HAL_GetTick>
 8004c96:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004c98:	e015      	b.n	8004cc6 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004c9a:	f7fe f9b7 	bl	800300c <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d90e      	bls.n	8004cc6 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d107      	bne.n	8004cc6 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2204      	movs	r2, #4
 8004cba:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e00d      	b.n	8004ce2 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d0e2      	beq.n	8004c9a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	791b      	ldrb	r3, [r3, #4]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e044      	b.n	8004d8e <HAL_RNG_GenerateRandomNumber+0xa4>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	795b      	ldrb	r3, [r3, #5]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d133      	bne.n	8004d7c <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d1a:	f7fe f977 	bl	800300c <HAL_GetTick>
 8004d1e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d20:	e018      	b.n	8004d54 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004d22:	f7fe f973 	bl	800300c <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d911      	bls.n	8004d54 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d00a      	beq.n	8004d54 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e01c      	b.n	8004d8e <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d1df      	bne.n	8004d22 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	715a      	strb	r2, [r3, #5]
 8004d7a:	e004      	b.n	8004d86 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2204      	movs	r2, #4
 8004d80:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	711a      	strb	r2, [r3, #4]

  return status;
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2210      	movs	r2, #16
 8004db8:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	e01f      	b.n	8004e00 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d01a      	beq.n	8004e00 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d108      	bne.n	8004de6 <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de2:	605a      	str	r2, [r3, #4]
 8004de4:	e00c      	b.n	8004e00 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2208      	movs	r2, #8
 8004dea:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 8004dec:	2301      	movs	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0208 	bic.w	r2, r2, #8
 8004dfe:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d10b      	bne.n	8004e1e <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2204      	movs	r2, #4
 8004e0a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f837 	bl	8004e80 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8004e1a:	605a      	str	r2, [r3, #4]

    return;
 8004e1c:	e022      	b.n	8004e64 <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01d      	beq.n	8004e64 <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0208 	bic.w	r2, r2, #8
 8004e36:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	795b      	ldrb	r3, [r3, #5]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d00b      	beq.n	8004e64 <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f803 	bl	8004e6a <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e049      	b.n	8004f3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fd f814 	bl	8001ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f000 f9d0 	bl	8005278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d001      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e04f      	b.n	8004ffc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0201 	orr.w	r2, r2, #1
 8004f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a23      	ldr	r2, [pc, #140]	; (8005008 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d01d      	beq.n	8004fba <HAL_TIM_Base_Start_IT+0x76>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d018      	beq.n	8004fba <HAL_TIM_Base_Start_IT+0x76>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1f      	ldr	r2, [pc, #124]	; (800500c <HAL_TIM_Base_Start_IT+0xc8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <HAL_TIM_Base_Start_IT+0x76>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a1e      	ldr	r2, [pc, #120]	; (8005010 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00e      	beq.n	8004fba <HAL_TIM_Base_Start_IT+0x76>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1c      	ldr	r2, [pc, #112]	; (8005014 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_TIM_Base_Start_IT+0x76>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a1b      	ldr	r2, [pc, #108]	; (8005018 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_TIM_Base_Start_IT+0x76>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a19      	ldr	r2, [pc, #100]	; (800501c <HAL_TIM_Base_Start_IT+0xd8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d115      	bne.n	8004fe6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	4b17      	ldr	r3, [pc, #92]	; (8005020 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b06      	cmp	r3, #6
 8004fca:	d015      	beq.n	8004ff8 <HAL_TIM_Base_Start_IT+0xb4>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd2:	d011      	beq.n	8004ff8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe4:	e008      	b.n	8004ff8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0201 	orr.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	e000      	b.n	8004ffa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	40012c00 	.word	0x40012c00
 800500c:	40000400 	.word	0x40000400
 8005010:	40000800 	.word	0x40000800
 8005014:	40000c00 	.word	0x40000c00
 8005018:	40013400 	.word	0x40013400
 800501c:	40014000 	.word	0x40014000
 8005020:	00010007 	.word	0x00010007

08005024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d020      	beq.n	8005088 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01b      	beq.n	8005088 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0202 	mvn.w	r2, #2
 8005058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f8e4 	bl	800523c <HAL_TIM_IC_CaptureCallback>
 8005074:	e005      	b.n	8005082 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f8d6 	bl	8005228 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f8e7 	bl	8005250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	d020      	beq.n	80050d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01b      	beq.n	80050d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0204 	mvn.w	r2, #4
 80050a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2202      	movs	r2, #2
 80050aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f8be 	bl	800523c <HAL_TIM_IC_CaptureCallback>
 80050c0:	e005      	b.n	80050ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f8b0 	bl	8005228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f8c1 	bl	8005250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d020      	beq.n	8005120 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01b      	beq.n	8005120 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0208 	mvn.w	r2, #8
 80050f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2204      	movs	r2, #4
 80050f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f898 	bl	800523c <HAL_TIM_IC_CaptureCallback>
 800510c:	e005      	b.n	800511a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f88a 	bl	8005228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f89b 	bl	8005250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b00      	cmp	r3, #0
 8005128:	d020      	beq.n	800516c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01b      	beq.n	800516c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0210 	mvn.w	r2, #16
 800513c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2208      	movs	r2, #8
 8005142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f872 	bl	800523c <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f864 	bl	8005228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f875 	bl	8005250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00c      	beq.n	8005190 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d007      	beq.n	8005190 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0201 	mvn.w	r2, #1
 8005188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fc fb12 	bl	80017b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00c      	beq.n	80051b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f98e 	bl	80054d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00c      	beq.n	80051d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d007      	beq.n	80051d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f986 	bl	80054e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00c      	beq.n	80051fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d007      	beq.n	80051fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f834 	bl	8005264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00c      	beq.n	8005220 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b00      	cmp	r3, #0
 800520e:	d007      	beq.n	8005220 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0220 	mvn.w	r2, #32
 8005218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f94e 	bl	80054bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a40      	ldr	r2, [pc, #256]	; (800538c <TIM_Base_SetConfig+0x114>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d013      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005296:	d00f      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a3d      	ldr	r2, [pc, #244]	; (8005390 <TIM_Base_SetConfig+0x118>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00b      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a3c      	ldr	r2, [pc, #240]	; (8005394 <TIM_Base_SetConfig+0x11c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d007      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a3b      	ldr	r2, [pc, #236]	; (8005398 <TIM_Base_SetConfig+0x120>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d003      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a3a      	ldr	r2, [pc, #232]	; (800539c <TIM_Base_SetConfig+0x124>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d108      	bne.n	80052ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a2f      	ldr	r2, [pc, #188]	; (800538c <TIM_Base_SetConfig+0x114>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d01f      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d8:	d01b      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a2c      	ldr	r2, [pc, #176]	; (8005390 <TIM_Base_SetConfig+0x118>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d017      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a2b      	ldr	r2, [pc, #172]	; (8005394 <TIM_Base_SetConfig+0x11c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a2a      	ldr	r2, [pc, #168]	; (8005398 <TIM_Base_SetConfig+0x120>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00f      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a29      	ldr	r2, [pc, #164]	; (800539c <TIM_Base_SetConfig+0x124>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00b      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a28      	ldr	r2, [pc, #160]	; (80053a0 <TIM_Base_SetConfig+0x128>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d007      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a27      	ldr	r2, [pc, #156]	; (80053a4 <TIM_Base_SetConfig+0x12c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d003      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a26      	ldr	r2, [pc, #152]	; (80053a8 <TIM_Base_SetConfig+0x130>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d108      	bne.n	8005324 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a10      	ldr	r2, [pc, #64]	; (800538c <TIM_Base_SetConfig+0x114>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00f      	beq.n	8005370 <TIM_Base_SetConfig+0xf8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a12      	ldr	r2, [pc, #72]	; (800539c <TIM_Base_SetConfig+0x124>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00b      	beq.n	8005370 <TIM_Base_SetConfig+0xf8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a11      	ldr	r2, [pc, #68]	; (80053a0 <TIM_Base_SetConfig+0x128>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d007      	beq.n	8005370 <TIM_Base_SetConfig+0xf8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a10      	ldr	r2, [pc, #64]	; (80053a4 <TIM_Base_SetConfig+0x12c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d003      	beq.n	8005370 <TIM_Base_SetConfig+0xf8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a0f      	ldr	r2, [pc, #60]	; (80053a8 <TIM_Base_SetConfig+0x130>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d103      	bne.n	8005378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	615a      	str	r2, [r3, #20]
}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40012c00 	.word	0x40012c00
 8005390:	40000400 	.word	0x40000400
 8005394:	40000800 	.word	0x40000800
 8005398:	40000c00 	.word	0x40000c00
 800539c:	40013400 	.word	0x40013400
 80053a0:	40014000 	.word	0x40014000
 80053a4:	40014400 	.word	0x40014400
 80053a8:	40014800 	.word	0x40014800

080053ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e068      	b.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a2e      	ldr	r2, [pc, #184]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d004      	beq.n	80053f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a2d      	ldr	r2, [pc, #180]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d108      	bne.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005410:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1e      	ldr	r2, [pc, #120]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d01d      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005436:	d018      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1b      	ldr	r2, [pc, #108]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d013      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1a      	ldr	r2, [pc, #104]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00e      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d009      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a13      	ldr	r2, [pc, #76]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d004      	beq.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a14      	ldr	r2, [pc, #80]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d10c      	bne.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	4313      	orrs	r3, r2
 800547a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40013400 	.word	0x40013400
 80054ac:	40000400 	.word	0x40000400
 80054b0:	40000800 	.word	0x40000800
 80054b4:	40000c00 	.word	0x40000c00
 80054b8:	40014000 	.word	0x40014000

080054bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e040      	b.n	800558c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fc fd0a 	bl	8001f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2224      	movs	r2, #36	; 0x24
 8005524:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0201 	bic.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fb6a 	bl	8005c18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f8af 	bl	80056a8 <UART_SetConfig>
 800554a:	4603      	mov	r3, r0
 800554c:	2b01      	cmp	r3, #1
 800554e:	d101      	bne.n	8005554 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e01b      	b.n	800558c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fbe9 	bl	8005d5c <UART_CheckIdleState>
 800558a:	4603      	mov	r3, r0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08a      	sub	sp, #40	; 0x28
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	4613      	mov	r3, r2
 80055a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055a8:	2b20      	cmp	r3, #32
 80055aa:	d178      	bne.n	800569e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_UART_Transmit+0x24>
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e071      	b.n	80056a0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2221      	movs	r2, #33	; 0x21
 80055c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055ca:	f7fd fd1f 	bl	800300c <HAL_GetTick>
 80055ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	88fa      	ldrh	r2, [r7, #6]
 80055d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	88fa      	ldrh	r2, [r7, #6]
 80055dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e8:	d108      	bne.n	80055fc <HAL_UART_Transmit+0x68>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d104      	bne.n	80055fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	e003      	b.n	8005604 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005600:	2300      	movs	r3, #0
 8005602:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005604:	e030      	b.n	8005668 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2200      	movs	r2, #0
 800560e:	2180      	movs	r1, #128	; 0x80
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 fc4b 	bl	8005eac <UART_WaitOnFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e03c      	b.n	80056a0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10b      	bne.n	8005644 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	881a      	ldrh	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005638:	b292      	uxth	r2, r2
 800563a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	3302      	adds	r3, #2
 8005640:	61bb      	str	r3, [r7, #24]
 8005642:	e008      	b.n	8005656 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	781a      	ldrb	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	b292      	uxth	r2, r2
 800564e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	3301      	adds	r3, #1
 8005654:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1c8      	bne.n	8005606 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2200      	movs	r2, #0
 800567c:	2140      	movs	r1, #64	; 0x40
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fc14 	bl	8005eac <UART_WaitOnFlagUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d004      	beq.n	8005694 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2220      	movs	r2, #32
 800568e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e005      	b.n	80056a0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2220      	movs	r2, #32
 8005698:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	e000      	b.n	80056a0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800569e:	2302      	movs	r3, #2
  }
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056ac:	b08a      	sub	sp, #40	; 0x28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	431a      	orrs	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	431a      	orrs	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	4ba4      	ldr	r3, [pc, #656]	; (8005968 <UART_SetConfig+0x2c0>)
 80056d8:	4013      	ands	r3, r2
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	6812      	ldr	r2, [r2, #0]
 80056de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056e0:	430b      	orrs	r3, r1
 80056e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a99      	ldr	r2, [pc, #612]	; (800596c <UART_SetConfig+0x2c4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d004      	beq.n	8005714 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005710:	4313      	orrs	r3, r2
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005724:	430a      	orrs	r2, r1
 8005726:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a90      	ldr	r2, [pc, #576]	; (8005970 <UART_SetConfig+0x2c8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d126      	bne.n	8005780 <UART_SetConfig+0xd8>
 8005732:	4b90      	ldr	r3, [pc, #576]	; (8005974 <UART_SetConfig+0x2cc>)
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	2b03      	cmp	r3, #3
 800573e:	d81b      	bhi.n	8005778 <UART_SetConfig+0xd0>
 8005740:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <UART_SetConfig+0xa0>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	08005759 	.word	0x08005759
 800574c:	08005769 	.word	0x08005769
 8005750:	08005761 	.word	0x08005761
 8005754:	08005771 	.word	0x08005771
 8005758:	2301      	movs	r3, #1
 800575a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800575e:	e116      	b.n	800598e <UART_SetConfig+0x2e6>
 8005760:	2302      	movs	r3, #2
 8005762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005766:	e112      	b.n	800598e <UART_SetConfig+0x2e6>
 8005768:	2304      	movs	r3, #4
 800576a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800576e:	e10e      	b.n	800598e <UART_SetConfig+0x2e6>
 8005770:	2308      	movs	r3, #8
 8005772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005776:	e10a      	b.n	800598e <UART_SetConfig+0x2e6>
 8005778:	2310      	movs	r3, #16
 800577a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800577e:	e106      	b.n	800598e <UART_SetConfig+0x2e6>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a7c      	ldr	r2, [pc, #496]	; (8005978 <UART_SetConfig+0x2d0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d138      	bne.n	80057fc <UART_SetConfig+0x154>
 800578a:	4b7a      	ldr	r3, [pc, #488]	; (8005974 <UART_SetConfig+0x2cc>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005790:	f003 030c 	and.w	r3, r3, #12
 8005794:	2b0c      	cmp	r3, #12
 8005796:	d82d      	bhi.n	80057f4 <UART_SetConfig+0x14c>
 8005798:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <UART_SetConfig+0xf8>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	080057d5 	.word	0x080057d5
 80057a4:	080057f5 	.word	0x080057f5
 80057a8:	080057f5 	.word	0x080057f5
 80057ac:	080057f5 	.word	0x080057f5
 80057b0:	080057e5 	.word	0x080057e5
 80057b4:	080057f5 	.word	0x080057f5
 80057b8:	080057f5 	.word	0x080057f5
 80057bc:	080057f5 	.word	0x080057f5
 80057c0:	080057dd 	.word	0x080057dd
 80057c4:	080057f5 	.word	0x080057f5
 80057c8:	080057f5 	.word	0x080057f5
 80057cc:	080057f5 	.word	0x080057f5
 80057d0:	080057ed 	.word	0x080057ed
 80057d4:	2300      	movs	r3, #0
 80057d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057da:	e0d8      	b.n	800598e <UART_SetConfig+0x2e6>
 80057dc:	2302      	movs	r3, #2
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e2:	e0d4      	b.n	800598e <UART_SetConfig+0x2e6>
 80057e4:	2304      	movs	r3, #4
 80057e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ea:	e0d0      	b.n	800598e <UART_SetConfig+0x2e6>
 80057ec:	2308      	movs	r3, #8
 80057ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f2:	e0cc      	b.n	800598e <UART_SetConfig+0x2e6>
 80057f4:	2310      	movs	r3, #16
 80057f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fa:	e0c8      	b.n	800598e <UART_SetConfig+0x2e6>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a5e      	ldr	r2, [pc, #376]	; (800597c <UART_SetConfig+0x2d4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d125      	bne.n	8005852 <UART_SetConfig+0x1aa>
 8005806:	4b5b      	ldr	r3, [pc, #364]	; (8005974 <UART_SetConfig+0x2cc>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005810:	2b30      	cmp	r3, #48	; 0x30
 8005812:	d016      	beq.n	8005842 <UART_SetConfig+0x19a>
 8005814:	2b30      	cmp	r3, #48	; 0x30
 8005816:	d818      	bhi.n	800584a <UART_SetConfig+0x1a2>
 8005818:	2b20      	cmp	r3, #32
 800581a:	d00a      	beq.n	8005832 <UART_SetConfig+0x18a>
 800581c:	2b20      	cmp	r3, #32
 800581e:	d814      	bhi.n	800584a <UART_SetConfig+0x1a2>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <UART_SetConfig+0x182>
 8005824:	2b10      	cmp	r3, #16
 8005826:	d008      	beq.n	800583a <UART_SetConfig+0x192>
 8005828:	e00f      	b.n	800584a <UART_SetConfig+0x1a2>
 800582a:	2300      	movs	r3, #0
 800582c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005830:	e0ad      	b.n	800598e <UART_SetConfig+0x2e6>
 8005832:	2302      	movs	r3, #2
 8005834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005838:	e0a9      	b.n	800598e <UART_SetConfig+0x2e6>
 800583a:	2304      	movs	r3, #4
 800583c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005840:	e0a5      	b.n	800598e <UART_SetConfig+0x2e6>
 8005842:	2308      	movs	r3, #8
 8005844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005848:	e0a1      	b.n	800598e <UART_SetConfig+0x2e6>
 800584a:	2310      	movs	r3, #16
 800584c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005850:	e09d      	b.n	800598e <UART_SetConfig+0x2e6>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a4a      	ldr	r2, [pc, #296]	; (8005980 <UART_SetConfig+0x2d8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d125      	bne.n	80058a8 <UART_SetConfig+0x200>
 800585c:	4b45      	ldr	r3, [pc, #276]	; (8005974 <UART_SetConfig+0x2cc>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005862:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005866:	2bc0      	cmp	r3, #192	; 0xc0
 8005868:	d016      	beq.n	8005898 <UART_SetConfig+0x1f0>
 800586a:	2bc0      	cmp	r3, #192	; 0xc0
 800586c:	d818      	bhi.n	80058a0 <UART_SetConfig+0x1f8>
 800586e:	2b80      	cmp	r3, #128	; 0x80
 8005870:	d00a      	beq.n	8005888 <UART_SetConfig+0x1e0>
 8005872:	2b80      	cmp	r3, #128	; 0x80
 8005874:	d814      	bhi.n	80058a0 <UART_SetConfig+0x1f8>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <UART_SetConfig+0x1d8>
 800587a:	2b40      	cmp	r3, #64	; 0x40
 800587c:	d008      	beq.n	8005890 <UART_SetConfig+0x1e8>
 800587e:	e00f      	b.n	80058a0 <UART_SetConfig+0x1f8>
 8005880:	2300      	movs	r3, #0
 8005882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005886:	e082      	b.n	800598e <UART_SetConfig+0x2e6>
 8005888:	2302      	movs	r3, #2
 800588a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800588e:	e07e      	b.n	800598e <UART_SetConfig+0x2e6>
 8005890:	2304      	movs	r3, #4
 8005892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005896:	e07a      	b.n	800598e <UART_SetConfig+0x2e6>
 8005898:	2308      	movs	r3, #8
 800589a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589e:	e076      	b.n	800598e <UART_SetConfig+0x2e6>
 80058a0:	2310      	movs	r3, #16
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a6:	e072      	b.n	800598e <UART_SetConfig+0x2e6>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a35      	ldr	r2, [pc, #212]	; (8005984 <UART_SetConfig+0x2dc>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d12a      	bne.n	8005908 <UART_SetConfig+0x260>
 80058b2:	4b30      	ldr	r3, [pc, #192]	; (8005974 <UART_SetConfig+0x2cc>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058c0:	d01a      	beq.n	80058f8 <UART_SetConfig+0x250>
 80058c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058c6:	d81b      	bhi.n	8005900 <UART_SetConfig+0x258>
 80058c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058cc:	d00c      	beq.n	80058e8 <UART_SetConfig+0x240>
 80058ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058d2:	d815      	bhi.n	8005900 <UART_SetConfig+0x258>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <UART_SetConfig+0x238>
 80058d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058dc:	d008      	beq.n	80058f0 <UART_SetConfig+0x248>
 80058de:	e00f      	b.n	8005900 <UART_SetConfig+0x258>
 80058e0:	2300      	movs	r3, #0
 80058e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e6:	e052      	b.n	800598e <UART_SetConfig+0x2e6>
 80058e8:	2302      	movs	r3, #2
 80058ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ee:	e04e      	b.n	800598e <UART_SetConfig+0x2e6>
 80058f0:	2304      	movs	r3, #4
 80058f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058f6:	e04a      	b.n	800598e <UART_SetConfig+0x2e6>
 80058f8:	2308      	movs	r3, #8
 80058fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058fe:	e046      	b.n	800598e <UART_SetConfig+0x2e6>
 8005900:	2310      	movs	r3, #16
 8005902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005906:	e042      	b.n	800598e <UART_SetConfig+0x2e6>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a17      	ldr	r2, [pc, #92]	; (800596c <UART_SetConfig+0x2c4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d13a      	bne.n	8005988 <UART_SetConfig+0x2e0>
 8005912:	4b18      	ldr	r3, [pc, #96]	; (8005974 <UART_SetConfig+0x2cc>)
 8005914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005918:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800591c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005920:	d01a      	beq.n	8005958 <UART_SetConfig+0x2b0>
 8005922:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005926:	d81b      	bhi.n	8005960 <UART_SetConfig+0x2b8>
 8005928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800592c:	d00c      	beq.n	8005948 <UART_SetConfig+0x2a0>
 800592e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005932:	d815      	bhi.n	8005960 <UART_SetConfig+0x2b8>
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <UART_SetConfig+0x298>
 8005938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593c:	d008      	beq.n	8005950 <UART_SetConfig+0x2a8>
 800593e:	e00f      	b.n	8005960 <UART_SetConfig+0x2b8>
 8005940:	2300      	movs	r3, #0
 8005942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005946:	e022      	b.n	800598e <UART_SetConfig+0x2e6>
 8005948:	2302      	movs	r3, #2
 800594a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800594e:	e01e      	b.n	800598e <UART_SetConfig+0x2e6>
 8005950:	2304      	movs	r3, #4
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005956:	e01a      	b.n	800598e <UART_SetConfig+0x2e6>
 8005958:	2308      	movs	r3, #8
 800595a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595e:	e016      	b.n	800598e <UART_SetConfig+0x2e6>
 8005960:	2310      	movs	r3, #16
 8005962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005966:	e012      	b.n	800598e <UART_SetConfig+0x2e6>
 8005968:	efff69f3 	.word	0xefff69f3
 800596c:	40008000 	.word	0x40008000
 8005970:	40013800 	.word	0x40013800
 8005974:	40021000 	.word	0x40021000
 8005978:	40004400 	.word	0x40004400
 800597c:	40004800 	.word	0x40004800
 8005980:	40004c00 	.word	0x40004c00
 8005984:	40005000 	.word	0x40005000
 8005988:	2310      	movs	r3, #16
 800598a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a9f      	ldr	r2, [pc, #636]	; (8005c10 <UART_SetConfig+0x568>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d17a      	bne.n	8005a8e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005998:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800599c:	2b08      	cmp	r3, #8
 800599e:	d824      	bhi.n	80059ea <UART_SetConfig+0x342>
 80059a0:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <UART_SetConfig+0x300>)
 80059a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a6:	bf00      	nop
 80059a8:	080059cd 	.word	0x080059cd
 80059ac:	080059eb 	.word	0x080059eb
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	080059eb 	.word	0x080059eb
 80059b8:	080059db 	.word	0x080059db
 80059bc:	080059eb 	.word	0x080059eb
 80059c0:	080059eb 	.word	0x080059eb
 80059c4:	080059eb 	.word	0x080059eb
 80059c8:	080059e3 	.word	0x080059e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059cc:	f7fe fbee 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 80059d0:	61f8      	str	r0, [r7, #28]
        break;
 80059d2:	e010      	b.n	80059f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059d4:	4b8f      	ldr	r3, [pc, #572]	; (8005c14 <UART_SetConfig+0x56c>)
 80059d6:	61fb      	str	r3, [r7, #28]
        break;
 80059d8:	e00d      	b.n	80059f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059da:	f7fe fb4f 	bl	800407c <HAL_RCC_GetSysClockFreq>
 80059de:	61f8      	str	r0, [r7, #28]
        break;
 80059e0:	e009      	b.n	80059f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e6:	61fb      	str	r3, [r7, #28]
        break;
 80059e8:	e005      	b.n	80059f6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80059f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 80fb 	beq.w	8005bf4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	4413      	add	r3, r2
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d305      	bcc.n	8005a1a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d903      	bls.n	8005a22 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a20:	e0e8      	b.n	8005bf4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	2200      	movs	r2, #0
 8005a26:	461c      	mov	r4, r3
 8005a28:	4615      	mov	r5, r2
 8005a2a:	f04f 0200 	mov.w	r2, #0
 8005a2e:	f04f 0300 	mov.w	r3, #0
 8005a32:	022b      	lsls	r3, r5, #8
 8005a34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a38:	0222      	lsls	r2, r4, #8
 8005a3a:	68f9      	ldr	r1, [r7, #12]
 8005a3c:	6849      	ldr	r1, [r1, #4]
 8005a3e:	0849      	lsrs	r1, r1, #1
 8005a40:	2000      	movs	r0, #0
 8005a42:	4688      	mov	r8, r1
 8005a44:	4681      	mov	r9, r0
 8005a46:	eb12 0a08 	adds.w	sl, r2, r8
 8005a4a:	eb43 0b09 	adc.w	fp, r3, r9
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	603b      	str	r3, [r7, #0]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a5c:	4650      	mov	r0, sl
 8005a5e:	4659      	mov	r1, fp
 8005a60:	f7fa fc0e 	bl	8000280 <__aeabi_uldivmod>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4613      	mov	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a72:	d308      	bcc.n	8005a86 <UART_SetConfig+0x3de>
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a7a:	d204      	bcs.n	8005a86 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	60da      	str	r2, [r3, #12]
 8005a84:	e0b6      	b.n	8005bf4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a8c:	e0b2      	b.n	8005bf4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a96:	d15e      	bne.n	8005b56 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005a98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d828      	bhi.n	8005af2 <UART_SetConfig+0x44a>
 8005aa0:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <UART_SetConfig+0x400>)
 8005aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa6:	bf00      	nop
 8005aa8:	08005acd 	.word	0x08005acd
 8005aac:	08005ad5 	.word	0x08005ad5
 8005ab0:	08005add 	.word	0x08005add
 8005ab4:	08005af3 	.word	0x08005af3
 8005ab8:	08005ae3 	.word	0x08005ae3
 8005abc:	08005af3 	.word	0x08005af3
 8005ac0:	08005af3 	.word	0x08005af3
 8005ac4:	08005af3 	.word	0x08005af3
 8005ac8:	08005aeb 	.word	0x08005aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005acc:	f7fe fb6e 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 8005ad0:	61f8      	str	r0, [r7, #28]
        break;
 8005ad2:	e014      	b.n	8005afe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad4:	f7fe fb80 	bl	80041d8 <HAL_RCC_GetPCLK2Freq>
 8005ad8:	61f8      	str	r0, [r7, #28]
        break;
 8005ada:	e010      	b.n	8005afe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005adc:	4b4d      	ldr	r3, [pc, #308]	; (8005c14 <UART_SetConfig+0x56c>)
 8005ade:	61fb      	str	r3, [r7, #28]
        break;
 8005ae0:	e00d      	b.n	8005afe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ae2:	f7fe facb 	bl	800407c <HAL_RCC_GetSysClockFreq>
 8005ae6:	61f8      	str	r0, [r7, #28]
        break;
 8005ae8:	e009      	b.n	8005afe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aee:	61fb      	str	r3, [r7, #28]
        break;
 8005af0:	e005      	b.n	8005afe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005afc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d077      	beq.n	8005bf4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	005a      	lsls	r2, r3, #1
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	441a      	add	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	2b0f      	cmp	r3, #15
 8005b1e:	d916      	bls.n	8005b4e <UART_SetConfig+0x4a6>
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b26:	d212      	bcs.n	8005b4e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f023 030f 	bic.w	r3, r3, #15
 8005b30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	085b      	lsrs	r3, r3, #1
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	8afb      	ldrh	r3, [r7, #22]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	8afa      	ldrh	r2, [r7, #22]
 8005b4a:	60da      	str	r2, [r3, #12]
 8005b4c:	e052      	b.n	8005bf4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b54:	e04e      	b.n	8005bf4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	d827      	bhi.n	8005bae <UART_SetConfig+0x506>
 8005b5e:	a201      	add	r2, pc, #4	; (adr r2, 8005b64 <UART_SetConfig+0x4bc>)
 8005b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b64:	08005b89 	.word	0x08005b89
 8005b68:	08005b91 	.word	0x08005b91
 8005b6c:	08005b99 	.word	0x08005b99
 8005b70:	08005baf 	.word	0x08005baf
 8005b74:	08005b9f 	.word	0x08005b9f
 8005b78:	08005baf 	.word	0x08005baf
 8005b7c:	08005baf 	.word	0x08005baf
 8005b80:	08005baf 	.word	0x08005baf
 8005b84:	08005ba7 	.word	0x08005ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b88:	f7fe fb10 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 8005b8c:	61f8      	str	r0, [r7, #28]
        break;
 8005b8e:	e014      	b.n	8005bba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b90:	f7fe fb22 	bl	80041d8 <HAL_RCC_GetPCLK2Freq>
 8005b94:	61f8      	str	r0, [r7, #28]
        break;
 8005b96:	e010      	b.n	8005bba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b98:	4b1e      	ldr	r3, [pc, #120]	; (8005c14 <UART_SetConfig+0x56c>)
 8005b9a:	61fb      	str	r3, [r7, #28]
        break;
 8005b9c:	e00d      	b.n	8005bba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b9e:	f7fe fa6d 	bl	800407c <HAL_RCC_GetSysClockFreq>
 8005ba2:	61f8      	str	r0, [r7, #28]
        break;
 8005ba4:	e009      	b.n	8005bba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005baa:	61fb      	str	r3, [r7, #28]
        break;
 8005bac:	e005      	b.n	8005bba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005bb8:	bf00      	nop
    }

    if (pclk != 0U)
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d019      	beq.n	8005bf4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	085a      	lsrs	r2, r3, #1
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	441a      	add	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	2b0f      	cmp	r3, #15
 8005bd8:	d909      	bls.n	8005bee <UART_SetConfig+0x546>
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be0:	d205      	bcs.n	8005bee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60da      	str	r2, [r3, #12]
 8005bec:	e002      	b.n	8005bf4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3728      	adds	r7, #40	; 0x28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c0e:	bf00      	nop
 8005c10:	40008000 	.word	0x40008000
 8005c14:	00f42400 	.word	0x00f42400

08005c18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00a      	beq.n	8005c86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	f003 0310 	and.w	r3, r3, #16
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00a      	beq.n	8005cca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00a      	beq.n	8005cec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01a      	beq.n	8005d2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d16:	d10a      	bne.n	8005d2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	605a      	str	r2, [r3, #4]
  }
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b098      	sub	sp, #96	; 0x60
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d6c:	f7fd f94e 	bl	800300c <HAL_GetTick>
 8005d70:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d12e      	bne.n	8005dde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f88c 	bl	8005eac <UART_WaitOnFlagUntilTimeout>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d021      	beq.n	8005dde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dae:	653b      	str	r3, [r7, #80]	; 0x50
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e6      	bne.n	8005d9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e062      	b.n	8005ea4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d149      	bne.n	8005e80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df4:	2200      	movs	r2, #0
 8005df6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f856 	bl	8005eac <UART_WaitOnFlagUntilTimeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d03c      	beq.n	8005e80 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	623b      	str	r3, [r7, #32]
   return(result);
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e24:	633b      	str	r3, [r7, #48]	; 0x30
 8005e26:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e6      	bne.n	8005e06 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	e853 3f00 	ldrex	r3, [r3]
 8005e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0301 	bic.w	r3, r3, #1
 8005e4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3308      	adds	r3, #8
 8005e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e58:	61fa      	str	r2, [r7, #28]
 8005e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	617b      	str	r3, [r7, #20]
   return(result);
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e5      	bne.n	8005e38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e011      	b.n	8005ea4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3758      	adds	r7, #88	; 0x58
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	603b      	str	r3, [r7, #0]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ebc:	e049      	b.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec4:	d045      	beq.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec6:	f7fd f8a1 	bl	800300c <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d302      	bcc.n	8005edc <UART_WaitOnFlagUntilTimeout+0x30>
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e048      	b.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d031      	beq.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d110      	bne.n	8005f1e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2208      	movs	r2, #8
 8005f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 f838 	bl	8005f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e029      	b.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2c:	d111      	bne.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f38:	68f8      	ldr	r0, [r7, #12]
 8005f3a:	f000 f81e 	bl	8005f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e00f      	b.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69da      	ldr	r2, [r3, #28]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	bf0c      	ite	eq
 8005f62:	2301      	moveq	r3, #1
 8005f64:	2300      	movne	r3, #0
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d0a6      	beq.n	8005ebe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b095      	sub	sp, #84	; 0x54
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8005fa2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e6      	bne.n	8005f82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3308      	adds	r3, #8
 8005fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f023 0301 	bic.w	r3, r3, #1
 8005fca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e5      	bne.n	8005fb4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d118      	bne.n	8006022 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f023 0310 	bic.w	r3, r3, #16
 8006004:	647b      	str	r3, [r7, #68]	; 0x44
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	6979      	ldr	r1, [r7, #20]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	613b      	str	r3, [r7, #16]
   return(result);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e6      	bne.n	8005ff0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006036:	bf00      	nop
 8006038:	3754      	adds	r7, #84	; 0x54
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
	...

08006044 <__NVIC_SetPriority>:
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	4603      	mov	r3, r0
 800604c:	6039      	str	r1, [r7, #0]
 800604e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006054:	2b00      	cmp	r3, #0
 8006056:	db0a      	blt.n	800606e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	b2da      	uxtb	r2, r3
 800605c:	490c      	ldr	r1, [pc, #48]	; (8006090 <__NVIC_SetPriority+0x4c>)
 800605e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006062:	0112      	lsls	r2, r2, #4
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	440b      	add	r3, r1
 8006068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800606c:	e00a      	b.n	8006084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	b2da      	uxtb	r2, r3
 8006072:	4908      	ldr	r1, [pc, #32]	; (8006094 <__NVIC_SetPriority+0x50>)
 8006074:	79fb      	ldrb	r3, [r7, #7]
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	3b04      	subs	r3, #4
 800607c:	0112      	lsls	r2, r2, #4
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	440b      	add	r3, r1
 8006082:	761a      	strb	r2, [r3, #24]
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	e000e100 	.word	0xe000e100
 8006094:	e000ed00 	.word	0xe000ed00

08006098 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800609c:	2100      	movs	r1, #0
 800609e:	f06f 0004 	mvn.w	r0, #4
 80060a2:	f7ff ffcf 	bl	8006044 <__NVIC_SetPriority>
#endif
}
 80060a6:	bf00      	nop
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060b2:	f3ef 8305 	mrs	r3, IPSR
 80060b6:	603b      	str	r3, [r7, #0]
  return(result);
 80060b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80060be:	f06f 0305 	mvn.w	r3, #5
 80060c2:	607b      	str	r3, [r7, #4]
 80060c4:	e00c      	b.n	80060e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060c6:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <osKernelInitialize+0x44>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d105      	bne.n	80060da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80060ce:	4b08      	ldr	r3, [pc, #32]	; (80060f0 <osKernelInitialize+0x44>)
 80060d0:	2201      	movs	r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060d4:	2300      	movs	r3, #0
 80060d6:	607b      	str	r3, [r7, #4]
 80060d8:	e002      	b.n	80060e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80060da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060e0:	687b      	ldr	r3, [r7, #4]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	200009f4 	.word	0x200009f4

080060f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060fa:	f3ef 8305 	mrs	r3, IPSR
 80060fe:	603b      	str	r3, [r7, #0]
  return(result);
 8006100:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006106:	f06f 0305 	mvn.w	r3, #5
 800610a:	607b      	str	r3, [r7, #4]
 800610c:	e010      	b.n	8006130 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800610e:	4b0b      	ldr	r3, [pc, #44]	; (800613c <osKernelStart+0x48>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d109      	bne.n	800612a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006116:	f7ff ffbf 	bl	8006098 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800611a:	4b08      	ldr	r3, [pc, #32]	; (800613c <osKernelStart+0x48>)
 800611c:	2202      	movs	r2, #2
 800611e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006120:	f001 fb88 	bl	8007834 <vTaskStartScheduler>
      stat = osOK;
 8006124:	2300      	movs	r3, #0
 8006126:	607b      	str	r3, [r7, #4]
 8006128:	e002      	b.n	8006130 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800612a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800612e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006130:	687b      	ldr	r3, [r7, #4]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	200009f4 	.word	0x200009f4

08006140 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006140:	b580      	push	{r7, lr}
 8006142:	b08e      	sub	sp, #56	; 0x38
 8006144:	af04      	add	r7, sp, #16
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800614c:	2300      	movs	r3, #0
 800614e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006150:	f3ef 8305 	mrs	r3, IPSR
 8006154:	617b      	str	r3, [r7, #20]
  return(result);
 8006156:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006158:	2b00      	cmp	r3, #0
 800615a:	d17e      	bne.n	800625a <osThreadNew+0x11a>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d07b      	beq.n	800625a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006162:	2380      	movs	r3, #128	; 0x80
 8006164:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006166:	2318      	movs	r3, #24
 8006168:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800616e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006172:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d045      	beq.n	8006206 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <osThreadNew+0x48>
        name = attr->name;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d008      	beq.n	80061ae <osThreadNew+0x6e>
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	2b38      	cmp	r3, #56	; 0x38
 80061a0:	d805      	bhi.n	80061ae <osThreadNew+0x6e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <osThreadNew+0x72>
        return (NULL);
 80061ae:	2300      	movs	r3, #0
 80061b0:	e054      	b.n	800625c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	089b      	lsrs	r3, r3, #2
 80061c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00e      	beq.n	80061e8 <osThreadNew+0xa8>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	2b5b      	cmp	r3, #91	; 0x5b
 80061d0:	d90a      	bls.n	80061e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d006      	beq.n	80061e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <osThreadNew+0xa8>
        mem = 1;
 80061e2:	2301      	movs	r3, #1
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	e010      	b.n	800620a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10c      	bne.n	800620a <osThreadNew+0xca>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d108      	bne.n	800620a <osThreadNew+0xca>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d104      	bne.n	800620a <osThreadNew+0xca>
          mem = 0;
 8006200:	2300      	movs	r3, #0
 8006202:	61bb      	str	r3, [r7, #24]
 8006204:	e001      	b.n	800620a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006206:	2300      	movs	r3, #0
 8006208:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d110      	bne.n	8006232 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006218:	9202      	str	r2, [sp, #8]
 800621a:	9301      	str	r3, [sp, #4]
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	6a3a      	ldr	r2, [r7, #32]
 8006224:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f001 f92e 	bl	8007488 <xTaskCreateStatic>
 800622c:	4603      	mov	r3, r0
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	e013      	b.n	800625a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d110      	bne.n	800625a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	b29a      	uxth	r2, r3
 800623c:	f107 0310 	add.w	r3, r7, #16
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f001 f979 	bl	8007542 <xTaskCreate>
 8006250:	4603      	mov	r3, r0
 8006252:	2b01      	cmp	r3, #1
 8006254:	d001      	beq.n	800625a <osThreadNew+0x11a>
            hTask = NULL;
 8006256:	2300      	movs	r3, #0
 8006258:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800625a:	693b      	ldr	r3, [r7, #16]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3728      	adds	r7, #40	; 0x28
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800626c:	f3ef 8305 	mrs	r3, IPSR
 8006270:	60bb      	str	r3, [r7, #8]
  return(result);
 8006272:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <osDelay+0x1c>
    stat = osErrorISR;
 8006278:	f06f 0305 	mvn.w	r3, #5
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	e007      	b.n	8006290 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <osDelay+0x2c>
      vTaskDelay(ticks);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f001 fa9e 	bl	80077cc <vTaskDelay>
    }
  }

  return (stat);
 8006290:	68fb      	ldr	r3, [r7, #12]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800629a:	b580      	push	{r7, lr}
 800629c:	b088      	sub	sp, #32
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062a6:	f3ef 8305 	mrs	r3, IPSR
 80062aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80062ac:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d174      	bne.n	800639c <osMutexNew+0x102>
    if (attr != NULL) {
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <osMutexNew+0x26>
      type = attr->attr_bits;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	61bb      	str	r3, [r7, #24]
 80062be:	e001      	b.n	80062c4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <osMutexNew+0x3a>
      rmtx = 1U;
 80062ce:	2301      	movs	r3, #1
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	e001      	b.n	80062d8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d15c      	bne.n	800639c <osMutexNew+0x102>
      mem = -1;
 80062e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062e6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d015      	beq.n	800631a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d006      	beq.n	8006304 <osMutexNew+0x6a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	2b4f      	cmp	r3, #79	; 0x4f
 80062fc:	d902      	bls.n	8006304 <osMutexNew+0x6a>
          mem = 1;
 80062fe:	2301      	movs	r3, #1
 8006300:	613b      	str	r3, [r7, #16]
 8006302:	e00c      	b.n	800631e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d108      	bne.n	800631e <osMutexNew+0x84>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d104      	bne.n	800631e <osMutexNew+0x84>
            mem = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	613b      	str	r3, [r7, #16]
 8006318:	e001      	b.n	800631e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800631a:	2300      	movs	r3, #0
 800631c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d112      	bne.n	800634a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d007      	beq.n	800633a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	4619      	mov	r1, r3
 8006330:	2004      	movs	r0, #4
 8006332:	f000 fb18 	bl	8006966 <xQueueCreateMutexStatic>
 8006336:	61f8      	str	r0, [r7, #28]
 8006338:	e016      	b.n	8006368 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	4619      	mov	r1, r3
 8006340:	2001      	movs	r0, #1
 8006342:	f000 fb10 	bl	8006966 <xQueueCreateMutexStatic>
 8006346:	61f8      	str	r0, [r7, #28]
 8006348:	e00e      	b.n	8006368 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10b      	bne.n	8006368 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d004      	beq.n	8006360 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006356:	2004      	movs	r0, #4
 8006358:	f000 faed 	bl	8006936 <xQueueCreateMutex>
 800635c:	61f8      	str	r0, [r7, #28]
 800635e:	e003      	b.n	8006368 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006360:	2001      	movs	r0, #1
 8006362:	f000 fae8 	bl	8006936 <xQueueCreateMutex>
 8006366:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00c      	beq.n	8006388 <osMutexNew+0xee>
        if (attr != NULL) {
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <osMutexNew+0xe2>
          name = attr->name;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	e001      	b.n	8006380 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800637c:	2300      	movs	r3, #0
 800637e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006380:	68f9      	ldr	r1, [r7, #12]
 8006382:	69f8      	ldr	r0, [r7, #28]
 8006384:	f001 f822 	bl	80073cc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d006      	beq.n	800639c <osMutexNew+0x102>
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d003      	beq.n	800639c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f043 0301 	orr.w	r3, r3, #1
 800639a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800639c:	69fb      	ldr	r3, [r7, #28]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3720      	adds	r7, #32
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b086      	sub	sp, #24
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f023 0301 	bic.w	r3, r3, #1
 80063b6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063c4:	f3ef 8305 	mrs	r3, IPSR
 80063c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80063ca:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80063d0:	f06f 0305 	mvn.w	r3, #5
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	e02c      	b.n	8006432 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d103      	bne.n	80063e6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80063de:	f06f 0303 	mvn.w	r3, #3
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e025      	b.n	8006432 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d011      	beq.n	8006410 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6938      	ldr	r0, [r7, #16]
 80063f0:	f000 fb08 	bl	8006a04 <xQueueTakeMutexRecursive>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d01b      	beq.n	8006432 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006400:	f06f 0301 	mvn.w	r3, #1
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	e014      	b.n	8006432 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006408:	f06f 0302 	mvn.w	r3, #2
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	e010      	b.n	8006432 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6938      	ldr	r0, [r7, #16]
 8006414:	f000 fda6 	bl	8006f64 <xQueueSemaphoreTake>
 8006418:	4603      	mov	r3, r0
 800641a:	2b01      	cmp	r3, #1
 800641c:	d009      	beq.n	8006432 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006424:	f06f 0301 	mvn.w	r3, #1
 8006428:	617b      	str	r3, [r7, #20]
 800642a:	e002      	b.n	8006432 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800642c:	f06f 0302 	mvn.w	r3, #2
 8006430:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006432:	697b      	ldr	r3, [r7, #20]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f023 0301 	bic.w	r3, r3, #1
 800644a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006458:	f3ef 8305 	mrs	r3, IPSR
 800645c:	60bb      	str	r3, [r7, #8]
  return(result);
 800645e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <osMutexRelease+0x30>
    stat = osErrorISR;
 8006464:	f06f 0305 	mvn.w	r3, #5
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	e01f      	b.n	80064ac <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006472:	f06f 0303 	mvn.w	r3, #3
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e018      	b.n	80064ac <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d009      	beq.n	8006494 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006480:	6938      	ldr	r0, [r7, #16]
 8006482:	f000 fa8b 	bl	800699c <xQueueGiveMutexRecursive>
 8006486:	4603      	mov	r3, r0
 8006488:	2b01      	cmp	r3, #1
 800648a:	d00f      	beq.n	80064ac <osMutexRelease+0x70>
        stat = osErrorResource;
 800648c:	f06f 0302 	mvn.w	r3, #2
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	e00b      	b.n	80064ac <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006494:	2300      	movs	r3, #0
 8006496:	2200      	movs	r2, #0
 8006498:	2100      	movs	r1, #0
 800649a:	6938      	ldr	r0, [r7, #16]
 800649c:	f000 fae8 	bl	8006a70 <xQueueGenericSend>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d002      	beq.n	80064ac <osMutexRelease+0x70>
        stat = osErrorResource;
 80064a6:	f06f 0302 	mvn.w	r3, #2
 80064aa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80064ac:	697b      	ldr	r3, [r7, #20]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4a07      	ldr	r2, [pc, #28]	; (80064e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80064c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	4a06      	ldr	r2, [pc, #24]	; (80064e8 <vApplicationGetIdleTaskMemory+0x30>)
 80064ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2280      	movs	r2, #128	; 0x80
 80064d4:	601a      	str	r2, [r3, #0]
}
 80064d6:	bf00      	nop
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	200009f8 	.word	0x200009f8
 80064e8:	20000a54 	.word	0x20000a54

080064ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4a07      	ldr	r2, [pc, #28]	; (8006518 <vApplicationGetTimerTaskMemory+0x2c>)
 80064fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	4a06      	ldr	r2, [pc, #24]	; (800651c <vApplicationGetTimerTaskMemory+0x30>)
 8006502:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800650a:	601a      	str	r2, [r3, #0]
}
 800650c:	bf00      	nop
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	20000c54 	.word	0x20000c54
 800651c:	20000cb0 	.word	0x20000cb0

08006520 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f103 0208 	add.w	r2, r3, #8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006538:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f103 0208 	add.w	r2, r3, #8
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f103 0208 	add.w	r2, r3, #8
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800657a:	b480      	push	{r7}
 800657c:	b085      	sub	sp, #20
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	601a      	str	r2, [r3, #0]
}
 80065b6:	bf00      	nop
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065d8:	d103      	bne.n	80065e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	e00c      	b.n	80065fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3308      	adds	r3, #8
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	e002      	b.n	80065f0 <vListInsert+0x2e>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d2f6      	bcs.n	80065ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	601a      	str	r2, [r3, #0]
}
 8006628:	bf00      	nop
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6892      	ldr	r2, [r2, #8]
 800664a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6852      	ldr	r2, [r2, #4]
 8006654:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	429a      	cmp	r2, r3
 800665e:	d103      	bne.n	8006668 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	1e5a      	subs	r2, r3, #1
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80066ae:	bf00      	nop
 80066b0:	e7fe      	b.n	80066b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80066b2:	f002 fb6f 	bl	8008d94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066be:	68f9      	ldr	r1, [r7, #12]
 80066c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066c2:	fb01 f303 	mul.w	r3, r1, r3
 80066c6:	441a      	add	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	3b01      	subs	r3, #1
 80066e4:	68f9      	ldr	r1, [r7, #12]
 80066e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	441a      	add	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	22ff      	movs	r2, #255	; 0xff
 80066f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	22ff      	movs	r2, #255	; 0xff
 80066fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d114      	bne.n	8006732 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01a      	beq.n	8006746 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3310      	adds	r3, #16
 8006714:	4618      	mov	r0, r3
 8006716:	f001 fb17 	bl	8007d48 <xTaskRemoveFromEventList>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d012      	beq.n	8006746 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006720:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <xQueueGenericReset+0xcc>)
 8006722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	e009      	b.n	8006746 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3310      	adds	r3, #16
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff fef2 	bl	8006520 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3324      	adds	r3, #36	; 0x24
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff feed 	bl	8006520 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006746:	f002 fb55 	bl	8008df4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800674a:	2301      	movs	r3, #1
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	e000ed04 	.word	0xe000ed04

08006758 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08e      	sub	sp, #56	; 0x38
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10a      	bne.n	8006782 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
}
 800679a:	bf00      	nop
 800679c:	e7fe      	b.n	800679c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <xQueueGenericCreateStatic+0x52>
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <xQueueGenericCreateStatic+0x56>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <xQueueGenericCreateStatic+0x58>
 80067ae:	2300      	movs	r3, #0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	623b      	str	r3, [r7, #32]
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d102      	bne.n	80067d6 <xQueueGenericCreateStatic+0x7e>
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <xQueueGenericCreateStatic+0x82>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e000      	b.n	80067dc <xQueueGenericCreateStatic+0x84>
 80067da:	2300      	movs	r3, #0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10a      	bne.n	80067f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	61fb      	str	r3, [r7, #28]
}
 80067f2:	bf00      	nop
 80067f4:	e7fe      	b.n	80067f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067f6:	2350      	movs	r3, #80	; 0x50
 80067f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2b50      	cmp	r3, #80	; 0x50
 80067fe:	d00a      	beq.n	8006816 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	61bb      	str	r3, [r7, #24]
}
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006816:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00d      	beq.n	800683e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800682a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	4613      	mov	r3, r2
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	68b9      	ldr	r1, [r7, #8]
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f83f 	bl	80068bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006840:	4618      	mov	r0, r3
 8006842:	3730      	adds	r7, #48	; 0x30
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08a      	sub	sp, #40	; 0x28
 800684c:	af02      	add	r7, sp, #8
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	4613      	mov	r3, r2
 8006854:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <xQueueGenericCreate+0x2a>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	613b      	str	r3, [r7, #16]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	fb02 f303 	mul.w	r3, r2, r3
 800687a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	3350      	adds	r3, #80	; 0x50
 8006880:	4618      	mov	r0, r3
 8006882:	f002 fba9 	bl	8008fd8 <pvPortMalloc>
 8006886:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d011      	beq.n	80068b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	3350      	adds	r3, #80	; 0x50
 8006896:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068a0:	79fa      	ldrb	r2, [r7, #7]
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	4613      	mov	r3, r2
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 f805 	bl	80068bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068b2:	69bb      	ldr	r3, [r7, #24]
	}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3720      	adds	r7, #32
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d103      	bne.n	80068d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	e002      	b.n	80068de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068ea:	2101      	movs	r1, #1
 80068ec:	69b8      	ldr	r0, [r7, #24]
 80068ee:	f7ff fecb 	bl	8006688 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	78fa      	ldrb	r2, [r7, #3]
 80068f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068fa:	bf00      	nop
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006902:	b580      	push	{r7, lr}
 8006904:	b082      	sub	sp, #8
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00e      	beq.n	800692e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006922:	2300      	movs	r3, #0
 8006924:	2200      	movs	r2, #0
 8006926:	2100      	movs	r1, #0
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f8a1 	bl	8006a70 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800692e:	bf00      	nop
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006936:	b580      	push	{r7, lr}
 8006938:	b086      	sub	sp, #24
 800693a:	af00      	add	r7, sp, #0
 800693c:	4603      	mov	r3, r0
 800693e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006940:	2301      	movs	r3, #1
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	2300      	movs	r3, #0
 8006946:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	461a      	mov	r2, r3
 800694c:	6939      	ldr	r1, [r7, #16]
 800694e:	6978      	ldr	r0, [r7, #20]
 8006950:	f7ff ff7a 	bl	8006848 <xQueueGenericCreate>
 8006954:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f7ff ffd3 	bl	8006902 <prvInitialiseMutex>

		return xNewQueue;
 800695c:	68fb      	ldr	r3, [r7, #12]
	}
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006966:	b580      	push	{r7, lr}
 8006968:	b088      	sub	sp, #32
 800696a:	af02      	add	r7, sp, #8
 800696c:	4603      	mov	r3, r0
 800696e:	6039      	str	r1, [r7, #0]
 8006970:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006972:	2301      	movs	r3, #1
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	2300      	movs	r3, #0
 8006978:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800697a:	79fb      	ldrb	r3, [r7, #7]
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2200      	movs	r2, #0
 8006982:	6939      	ldr	r1, [r7, #16]
 8006984:	6978      	ldr	r0, [r7, #20]
 8006986:	f7ff fee7 	bl	8006758 <xQueueGenericCreateStatic>
 800698a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7ff ffb8 	bl	8006902 <prvInitialiseMutex>

		return xNewQueue;
 8006992:	68fb      	ldr	r3, [r7, #12]
	}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800699c:	b590      	push	{r4, r7, lr}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	60fb      	str	r3, [r7, #12]
}
 80069c0:	bf00      	nop
 80069c2:	e7fe      	b.n	80069c2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	689c      	ldr	r4, [r3, #8]
 80069c8:	f001 fb7c 	bl	80080c4 <xTaskGetCurrentTaskHandle>
 80069cc:	4603      	mov	r3, r0
 80069ce:	429c      	cmp	r4, r3
 80069d0:	d111      	bne.n	80069f6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	1e5a      	subs	r2, r3, #1
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d105      	bne.n	80069f0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80069e4:	2300      	movs	r3, #0
 80069e6:	2200      	movs	r2, #0
 80069e8:	2100      	movs	r1, #0
 80069ea:	6938      	ldr	r0, [r7, #16]
 80069ec:	f000 f840 	bl	8006a70 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80069f0:	2301      	movs	r3, #1
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	e001      	b.n	80069fa <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80069fa:	697b      	ldr	r3, [r7, #20]
	}
 80069fc:	4618      	mov	r0, r3
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd90      	pop	{r4, r7, pc}

08006a04 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006a04:	b590      	push	{r4, r7, lr}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	60fb      	str	r3, [r7, #12]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	689c      	ldr	r4, [r3, #8]
 8006a32:	f001 fb47 	bl	80080c4 <xTaskGetCurrentTaskHandle>
 8006a36:	4603      	mov	r3, r0
 8006a38:	429c      	cmp	r4, r3
 8006a3a:	d107      	bne.n	8006a4c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006a46:	2301      	movs	r3, #1
 8006a48:	617b      	str	r3, [r7, #20]
 8006a4a:	e00c      	b.n	8006a66 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6938      	ldr	r0, [r7, #16]
 8006a50:	f000 fa88 	bl	8006f64 <xQueueSemaphoreTake>
 8006a54:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d004      	beq.n	8006a66 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006a66:	697b      	ldr	r3, [r7, #20]
	}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd90      	pop	{r4, r7, pc}

08006a70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08e      	sub	sp, #56	; 0x38
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <xQueueGenericSend+0x32>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a9e:	bf00      	nop
 8006aa0:	e7fe      	b.n	8006aa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d103      	bne.n	8006ab0 <xQueueGenericSend+0x40>
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <xQueueGenericSend+0x44>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <xQueueGenericSend+0x46>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <xQueueGenericSend+0x60>
	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006acc:	bf00      	nop
 8006ace:	e7fe      	b.n	8006ace <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d103      	bne.n	8006ade <xQueueGenericSend+0x6e>
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <xQueueGenericSend+0x72>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e000      	b.n	8006ae4 <xQueueGenericSend+0x74>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <xQueueGenericSend+0x8e>
	__asm volatile
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	623b      	str	r3, [r7, #32]
}
 8006afa:	bf00      	nop
 8006afc:	e7fe      	b.n	8006afc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006afe:	f001 faf1 	bl	80080e4 <xTaskGetSchedulerState>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <xQueueGenericSend+0x9e>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <xQueueGenericSend+0xa2>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e000      	b.n	8006b14 <xQueueGenericSend+0xa4>
 8006b12:	2300      	movs	r3, #0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10a      	bne.n	8006b2e <xQueueGenericSend+0xbe>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	61fb      	str	r3, [r7, #28]
}
 8006b2a:	bf00      	nop
 8006b2c:	e7fe      	b.n	8006b2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b2e:	f002 f931 	bl	8008d94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d302      	bcc.n	8006b44 <xQueueGenericSend+0xd4>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d129      	bne.n	8006b98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	68b9      	ldr	r1, [r7, #8]
 8006b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b4a:	f000 fb2f 	bl	80071ac <prvCopyDataToQueue>
 8006b4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d010      	beq.n	8006b7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	3324      	adds	r3, #36	; 0x24
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 f8f3 	bl	8007d48 <xTaskRemoveFromEventList>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d013      	beq.n	8006b90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b68:	4b3f      	ldr	r3, [pc, #252]	; (8006c68 <xQueueGenericSend+0x1f8>)
 8006b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	e00a      	b.n	8006b90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d007      	beq.n	8006b90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b80:	4b39      	ldr	r3, [pc, #228]	; (8006c68 <xQueueGenericSend+0x1f8>)
 8006b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b90:	f002 f930 	bl	8008df4 <vPortExitCritical>
				return pdPASS;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e063      	b.n	8006c60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d103      	bne.n	8006ba6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b9e:	f002 f929 	bl	8008df4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e05c      	b.n	8006c60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bac:	f107 0314 	add.w	r3, r7, #20
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f001 f92d 	bl	8007e10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bba:	f002 f91b 	bl	8008df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bbe:	f000 fe9f 	bl	8007900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bc2:	f002 f8e7 	bl	8008d94 <vPortEnterCritical>
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bcc:	b25b      	sxtb	r3, r3
 8006bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bd2:	d103      	bne.n	8006bdc <xQueueGenericSend+0x16c>
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006be2:	b25b      	sxtb	r3, r3
 8006be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006be8:	d103      	bne.n	8006bf2 <xQueueGenericSend+0x182>
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bf2:	f002 f8ff 	bl	8008df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bf6:	1d3a      	adds	r2, r7, #4
 8006bf8:	f107 0314 	add.w	r3, r7, #20
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f001 f91c 	bl	8007e3c <xTaskCheckForTimeOut>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d124      	bne.n	8006c54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c0c:	f000 fbc6 	bl	800739c <prvIsQueueFull>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d018      	beq.n	8006c48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	3310      	adds	r3, #16
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 f842 	bl	8007ca8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c26:	f000 fb51 	bl	80072cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c2a:	f000 fe77 	bl	800791c <xTaskResumeAll>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f47f af7c 	bne.w	8006b2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c36:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <xQueueGenericSend+0x1f8>)
 8006c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	e772      	b.n	8006b2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c4a:	f000 fb3f 	bl	80072cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c4e:	f000 fe65 	bl	800791c <xTaskResumeAll>
 8006c52:	e76c      	b.n	8006b2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c56:	f000 fb39 	bl	80072cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c5a:	f000 fe5f 	bl	800791c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3738      	adds	r7, #56	; 0x38
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b090      	sub	sp, #64	; 0x40
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d103      	bne.n	8006ca8 <xQueueGenericSendFromISR+0x3c>
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <xQueueGenericSendFromISR+0x40>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e000      	b.n	8006cae <xQueueGenericSendFromISR+0x42>
 8006cac:	2300      	movs	r3, #0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d103      	bne.n	8006cd6 <xQueueGenericSendFromISR+0x6a>
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <xQueueGenericSendFromISR+0x6e>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <xQueueGenericSendFromISR+0x70>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10a      	bne.n	8006cf6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	623b      	str	r3, [r7, #32]
}
 8006cf2:	bf00      	nop
 8006cf4:	e7fe      	b.n	8006cf4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cf6:	f002 f92f 	bl	8008f58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006cfa:	f3ef 8211 	mrs	r2, BASEPRI
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	61fa      	str	r2, [r7, #28]
 8006d10:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d302      	bcc.n	8006d28 <xQueueGenericSendFromISR+0xbc>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d12f      	bne.n	8006d88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	68b9      	ldr	r1, [r7, #8]
 8006d3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d3e:	f000 fa35 	bl	80071ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d4a:	d112      	bne.n	8006d72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d016      	beq.n	8006d82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	3324      	adds	r3, #36	; 0x24
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fff5 	bl	8007d48 <xTaskRemoveFromEventList>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00e      	beq.n	8006d82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00b      	beq.n	8006d82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	e007      	b.n	8006d82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d76:	3301      	adds	r3, #1
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	b25a      	sxtb	r2, r3
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d82:	2301      	movs	r3, #1
 8006d84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006d86:	e001      	b.n	8006d8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3740      	adds	r7, #64	; 0x40
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08c      	sub	sp, #48	; 0x30
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006db0:	2300      	movs	r3, #0
 8006db2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <xQueueReceive+0x30>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	623b      	str	r3, [r7, #32]
}
 8006dd0:	bf00      	nop
 8006dd2:	e7fe      	b.n	8006dd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d103      	bne.n	8006de2 <xQueueReceive+0x3e>
 8006dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <xQueueReceive+0x42>
 8006de2:	2301      	movs	r3, #1
 8006de4:	e000      	b.n	8006de8 <xQueueReceive+0x44>
 8006de6:	2300      	movs	r3, #0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10a      	bne.n	8006e02 <xQueueReceive+0x5e>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	61fb      	str	r3, [r7, #28]
}
 8006dfe:	bf00      	nop
 8006e00:	e7fe      	b.n	8006e00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e02:	f001 f96f 	bl	80080e4 <xTaskGetSchedulerState>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d102      	bne.n	8006e12 <xQueueReceive+0x6e>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <xQueueReceive+0x72>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <xQueueReceive+0x74>
 8006e16:	2300      	movs	r3, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <xQueueReceive+0x8e>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	61bb      	str	r3, [r7, #24]
}
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e32:	f001 ffaf 	bl	8008d94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d01f      	beq.n	8006e82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e42:	68b9      	ldr	r1, [r7, #8]
 8006e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e46:	f000 fa1b 	bl	8007280 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	1e5a      	subs	r2, r3, #1
 8006e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00f      	beq.n	8006e7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5c:	3310      	adds	r3, #16
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 ff72 	bl	8007d48 <xTaskRemoveFromEventList>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d007      	beq.n	8006e7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e6a:	4b3d      	ldr	r3, [pc, #244]	; (8006f60 <xQueueReceive+0x1bc>)
 8006e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e7a:	f001 ffbb 	bl	8008df4 <vPortExitCritical>
				return pdPASS;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e069      	b.n	8006f56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d103      	bne.n	8006e90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e88:	f001 ffb4 	bl	8008df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	e062      	b.n	8006f56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d106      	bne.n	8006ea4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e96:	f107 0310 	add.w	r3, r7, #16
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 ffb8 	bl	8007e10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ea4:	f001 ffa6 	bl	8008df4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ea8:	f000 fd2a 	bl	8007900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eac:	f001 ff72 	bl	8008d94 <vPortEnterCritical>
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eb6:	b25b      	sxtb	r3, r3
 8006eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ebc:	d103      	bne.n	8006ec6 <xQueueReceive+0x122>
 8006ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ecc:	b25b      	sxtb	r3, r3
 8006ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ed2:	d103      	bne.n	8006edc <xQueueReceive+0x138>
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006edc:	f001 ff8a 	bl	8008df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ee0:	1d3a      	adds	r2, r7, #4
 8006ee2:	f107 0310 	add.w	r3, r7, #16
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 ffa7 	bl	8007e3c <xTaskCheckForTimeOut>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d123      	bne.n	8006f3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ef6:	f000 fa3b 	bl	8007370 <prvIsQueueEmpty>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d017      	beq.n	8006f30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	3324      	adds	r3, #36	; 0x24
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	4611      	mov	r1, r2
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 fecd 	bl	8007ca8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f10:	f000 f9dc 	bl	80072cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f14:	f000 fd02 	bl	800791c <xTaskResumeAll>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d189      	bne.n	8006e32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006f1e:	4b10      	ldr	r3, [pc, #64]	; (8006f60 <xQueueReceive+0x1bc>)
 8006f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	e780      	b.n	8006e32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f32:	f000 f9cb 	bl	80072cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f36:	f000 fcf1 	bl	800791c <xTaskResumeAll>
 8006f3a:	e77a      	b.n	8006e32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f3e:	f000 f9c5 	bl	80072cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f42:	f000 fceb 	bl	800791c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f48:	f000 fa12 	bl	8007370 <prvIsQueueEmpty>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f43f af6f 	beq.w	8006e32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3730      	adds	r7, #48	; 0x30
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08e      	sub	sp, #56	; 0x38
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f76:	2300      	movs	r3, #0
 8006f78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	623b      	str	r3, [r7, #32]
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	61fb      	str	r3, [r7, #28]
}
 8006fb0:	bf00      	nop
 8006fb2:	e7fe      	b.n	8006fb2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fb4:	f001 f896 	bl	80080e4 <xTaskGetSchedulerState>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d102      	bne.n	8006fc4 <xQueueSemaphoreTake+0x60>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <xQueueSemaphoreTake+0x64>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e000      	b.n	8006fca <xQueueSemaphoreTake+0x66>
 8006fc8:	2300      	movs	r3, #0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	61bb      	str	r3, [r7, #24]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fe4:	f001 fed6 	bl	8008d94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d024      	beq.n	800703e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	1e5a      	subs	r2, r3, #1
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007004:	f001 f9e4 	bl	80083d0 <pvTaskIncrementMutexHeldCount>
 8007008:	4602      	mov	r2, r0
 800700a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00f      	beq.n	8007036 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	3310      	adds	r3, #16
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fe94 	bl	8007d48 <xTaskRemoveFromEventList>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d007      	beq.n	8007036 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007026:	4b54      	ldr	r3, [pc, #336]	; (8007178 <xQueueSemaphoreTake+0x214>)
 8007028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007036:	f001 fedd 	bl	8008df4 <vPortExitCritical>
				return pdPASS;
 800703a:	2301      	movs	r3, #1
 800703c:	e097      	b.n	800716e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d111      	bne.n	8007068 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800704a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	617b      	str	r3, [r7, #20]
}
 800705c:	bf00      	nop
 800705e:	e7fe      	b.n	800705e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007060:	f001 fec8 	bl	8008df4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007064:	2300      	movs	r3, #0
 8007066:	e082      	b.n	800716e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706a:	2b00      	cmp	r3, #0
 800706c:	d106      	bne.n	800707c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800706e:	f107 030c 	add.w	r3, r7, #12
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fecc 	bl	8007e10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007078:	2301      	movs	r3, #1
 800707a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800707c:	f001 feba 	bl	8008df4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007080:	f000 fc3e 	bl	8007900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007084:	f001 fe86 	bl	8008d94 <vPortEnterCritical>
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800708e:	b25b      	sxtb	r3, r3
 8007090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007094:	d103      	bne.n	800709e <xQueueSemaphoreTake+0x13a>
 8007096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800709e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070a4:	b25b      	sxtb	r3, r3
 80070a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070aa:	d103      	bne.n	80070b4 <xQueueSemaphoreTake+0x150>
 80070ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070b4:	f001 fe9e 	bl	8008df4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070b8:	463a      	mov	r2, r7
 80070ba:	f107 030c 	add.w	r3, r7, #12
 80070be:	4611      	mov	r1, r2
 80070c0:	4618      	mov	r0, r3
 80070c2:	f000 febb 	bl	8007e3c <xTaskCheckForTimeOut>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d132      	bne.n	8007132 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ce:	f000 f94f 	bl	8007370 <prvIsQueueEmpty>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d026      	beq.n	8007126 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d109      	bne.n	80070f4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80070e0:	f001 fe58 	bl	8008d94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 f819 	bl	8008120 <xTaskPriorityInherit>
 80070ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80070f0:	f001 fe80 	bl	8008df4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	3324      	adds	r3, #36	; 0x24
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	4611      	mov	r1, r2
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 fdd3 	bl	8007ca8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007102:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007104:	f000 f8e2 	bl	80072cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007108:	f000 fc08 	bl	800791c <xTaskResumeAll>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	f47f af68 	bne.w	8006fe4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007114:	4b18      	ldr	r3, [pc, #96]	; (8007178 <xQueueSemaphoreTake+0x214>)
 8007116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	e75e      	b.n	8006fe4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007128:	f000 f8d0 	bl	80072cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800712c:	f000 fbf6 	bl	800791c <xTaskResumeAll>
 8007130:	e758      	b.n	8006fe4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007134:	f000 f8ca 	bl	80072cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007138:	f000 fbf0 	bl	800791c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800713c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800713e:	f000 f917 	bl	8007370 <prvIsQueueEmpty>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	f43f af4d 	beq.w	8006fe4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00d      	beq.n	800716c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007150:	f001 fe20 	bl	8008d94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007154:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007156:	f000 f811 	bl	800717c <prvGetDisinheritPriorityAfterTimeout>
 800715a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800715c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007162:	4618      	mov	r0, r3
 8007164:	f001 f8b2 	bl	80082cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007168:	f001 fe44 	bl	8008df4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800716c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800716e:	4618      	mov	r0, r3
 8007170:	3738      	adds	r7, #56	; 0x38
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	e000ed04 	.word	0xe000ed04

0800717c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	d006      	beq.n	800719a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	e001      	b.n	800719e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800719e:	68fb      	ldr	r3, [r7, #12]
	}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071b8:	2300      	movs	r3, #0
 80071ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10d      	bne.n	80071e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d14d      	bne.n	800726e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f001 f80a 	bl	80081f0 <xTaskPriorityDisinherit>
 80071dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	609a      	str	r2, [r3, #8]
 80071e4:	e043      	b.n	800726e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d119      	bne.n	8007220 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6858      	ldr	r0, [r3, #4]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f4:	461a      	mov	r2, r3
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	f002 f9f0 	bl	80095dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007204:	441a      	add	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	429a      	cmp	r2, r3
 8007214:	d32b      	bcc.n	800726e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	605a      	str	r2, [r3, #4]
 800721e:	e026      	b.n	800726e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	68d8      	ldr	r0, [r3, #12]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	461a      	mov	r2, r3
 800722a:	68b9      	ldr	r1, [r7, #8]
 800722c:	f002 f9d6 	bl	80095dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007238:	425b      	negs	r3, r3
 800723a:	441a      	add	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	429a      	cmp	r2, r3
 800724a:	d207      	bcs.n	800725c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007254:	425b      	negs	r3, r3
 8007256:	441a      	add	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b02      	cmp	r3, #2
 8007260:	d105      	bne.n	800726e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d002      	beq.n	800726e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	3b01      	subs	r3, #1
 800726c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007276:	697b      	ldr	r3, [r7, #20]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	2b00      	cmp	r3, #0
 8007290:	d018      	beq.n	80072c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	441a      	add	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d303      	bcc.n	80072b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68d9      	ldr	r1, [r3, #12]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	461a      	mov	r2, r3
 80072be:	6838      	ldr	r0, [r7, #0]
 80072c0:	f002 f98c 	bl	80095dc <memcpy>
	}
}
 80072c4:	bf00      	nop
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072d4:	f001 fd5e 	bl	8008d94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072e0:	e011      	b.n	8007306 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d012      	beq.n	8007310 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3324      	adds	r3, #36	; 0x24
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fd2a 	bl	8007d48 <xTaskRemoveFromEventList>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80072fa:	f000 fe01 	bl	8007f00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	3b01      	subs	r3, #1
 8007302:	b2db      	uxtb	r3, r3
 8007304:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800730a:	2b00      	cmp	r3, #0
 800730c:	dce9      	bgt.n	80072e2 <prvUnlockQueue+0x16>
 800730e:	e000      	b.n	8007312 <prvUnlockQueue+0x46>
					break;
 8007310:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	22ff      	movs	r2, #255	; 0xff
 8007316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800731a:	f001 fd6b 	bl	8008df4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800731e:	f001 fd39 	bl	8008d94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007328:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800732a:	e011      	b.n	8007350 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d012      	beq.n	800735a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3310      	adds	r3, #16
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fd05 	bl	8007d48 <xTaskRemoveFromEventList>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007344:	f000 fddc 	bl	8007f00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	3b01      	subs	r3, #1
 800734c:	b2db      	uxtb	r3, r3
 800734e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007354:	2b00      	cmp	r3, #0
 8007356:	dce9      	bgt.n	800732c <prvUnlockQueue+0x60>
 8007358:	e000      	b.n	800735c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800735a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	22ff      	movs	r2, #255	; 0xff
 8007360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007364:	f001 fd46 	bl	8008df4 <vPortExitCritical>
}
 8007368:	bf00      	nop
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007378:	f001 fd0c 	bl	8008d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	2b00      	cmp	r3, #0
 8007382:	d102      	bne.n	800738a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007384:	2301      	movs	r3, #1
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	e001      	b.n	800738e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800738e:	f001 fd31 	bl	8008df4 <vPortExitCritical>

	return xReturn;
 8007392:	68fb      	ldr	r3, [r7, #12]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073a4:	f001 fcf6 	bl	8008d94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d102      	bne.n	80073ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073b4:	2301      	movs	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	e001      	b.n	80073be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073be:	f001 fd19 	bl	8008df4 <vPortExitCritical>

	return xReturn;
 80073c2:	68fb      	ldr	r3, [r7, #12]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	e014      	b.n	8007406 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80073dc:	4a0f      	ldr	r2, [pc, #60]	; (800741c <vQueueAddToRegistry+0x50>)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10b      	bne.n	8007400 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80073e8:	490c      	ldr	r1, [pc, #48]	; (800741c <vQueueAddToRegistry+0x50>)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80073f2:	4a0a      	ldr	r2, [pc, #40]	; (800741c <vQueueAddToRegistry+0x50>)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	4413      	add	r3, r2
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80073fe:	e006      	b.n	800740e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3301      	adds	r3, #1
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b07      	cmp	r3, #7
 800740a:	d9e7      	bls.n	80073dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800740c:	bf00      	nop
 800740e:	bf00      	nop
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	200010b0 	.word	0x200010b0

08007420 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007430:	f001 fcb0 	bl	8008d94 <vPortEnterCritical>
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800743a:	b25b      	sxtb	r3, r3
 800743c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007440:	d103      	bne.n	800744a <vQueueWaitForMessageRestricted+0x2a>
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007450:	b25b      	sxtb	r3, r3
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007456:	d103      	bne.n	8007460 <vQueueWaitForMessageRestricted+0x40>
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007460:	f001 fcc8 	bl	8008df4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	2b00      	cmp	r3, #0
 800746a:	d106      	bne.n	800747a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	3324      	adds	r3, #36	; 0x24
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	68b9      	ldr	r1, [r7, #8]
 8007474:	4618      	mov	r0, r3
 8007476:	f000 fc3b 	bl	8007cf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800747a:	6978      	ldr	r0, [r7, #20]
 800747c:	f7ff ff26 	bl	80072cc <prvUnlockQueue>
	}
 8007480:	bf00      	nop
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08e      	sub	sp, #56	; 0x38
 800748c:	af04      	add	r7, sp, #16
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	623b      	str	r3, [r7, #32]
}
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10a      	bne.n	80074ce <xTaskCreateStatic+0x46>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	61fb      	str	r3, [r7, #28]
}
 80074ca:	bf00      	nop
 80074cc:	e7fe      	b.n	80074cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074ce:	235c      	movs	r3, #92	; 0x5c
 80074d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b5c      	cmp	r3, #92	; 0x5c
 80074d6:	d00a      	beq.n	80074ee <xTaskCreateStatic+0x66>
	__asm volatile
 80074d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	61bb      	str	r3, [r7, #24]
}
 80074ea:	bf00      	nop
 80074ec:	e7fe      	b.n	80074ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d01e      	beq.n	8007534 <xTaskCreateStatic+0xac>
 80074f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d01b      	beq.n	8007534 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007504:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	2202      	movs	r2, #2
 800750a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800750e:	2300      	movs	r3, #0
 8007510:	9303      	str	r3, [sp, #12]
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	9302      	str	r3, [sp, #8]
 8007516:	f107 0314 	add.w	r3, r7, #20
 800751a:	9301      	str	r3, [sp, #4]
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 f850 	bl	80075cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800752c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800752e:	f000 f8dd 	bl	80076ec <prvAddNewTaskToReadyList>
 8007532:	e001      	b.n	8007538 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007534:	2300      	movs	r3, #0
 8007536:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007538:	697b      	ldr	r3, [r7, #20]
	}
 800753a:	4618      	mov	r0, r3
 800753c:	3728      	adds	r7, #40	; 0x28
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007542:	b580      	push	{r7, lr}
 8007544:	b08c      	sub	sp, #48	; 0x30
 8007546:	af04      	add	r7, sp, #16
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	603b      	str	r3, [r7, #0]
 800754e:	4613      	mov	r3, r2
 8007550:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007552:	88fb      	ldrh	r3, [r7, #6]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4618      	mov	r0, r3
 8007558:	f001 fd3e 	bl	8008fd8 <pvPortMalloc>
 800755c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00e      	beq.n	8007582 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007564:	205c      	movs	r0, #92	; 0x5c
 8007566:	f001 fd37 	bl	8008fd8 <pvPortMalloc>
 800756a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	631a      	str	r2, [r3, #48]	; 0x30
 8007578:	e005      	b.n	8007586 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800757a:	6978      	ldr	r0, [r7, #20]
 800757c:	f001 fdf8 	bl	8009170 <vPortFree>
 8007580:	e001      	b.n	8007586 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007582:	2300      	movs	r3, #0
 8007584:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d017      	beq.n	80075bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007594:	88fa      	ldrh	r2, [r7, #6]
 8007596:	2300      	movs	r3, #0
 8007598:	9303      	str	r3, [sp, #12]
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	9302      	str	r3, [sp, #8]
 800759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a0:	9301      	str	r3, [sp, #4]
 80075a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68b9      	ldr	r1, [r7, #8]
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 f80e 	bl	80075cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075b0:	69f8      	ldr	r0, [r7, #28]
 80075b2:	f000 f89b 	bl	80076ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075b6:	2301      	movs	r3, #1
 80075b8:	61bb      	str	r3, [r7, #24]
 80075ba:	e002      	b.n	80075c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075c2:	69bb      	ldr	r3, [r7, #24]
	}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3720      	adds	r7, #32
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	461a      	mov	r2, r3
 80075e4:	21a5      	movs	r1, #165	; 0xa5
 80075e6:	f001 ffb5 	bl	8009554 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075f4:	3b01      	subs	r3, #1
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	f023 0307 	bic.w	r3, r3, #7
 8007602:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	f003 0307 	and.w	r3, r3, #7
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <prvInitialiseNewTask+0x58>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	617b      	str	r3, [r7, #20]
}
 8007620:	bf00      	nop
 8007622:	e7fe      	b.n	8007622 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d01f      	beq.n	800766a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800762a:	2300      	movs	r3, #0
 800762c:	61fb      	str	r3, [r7, #28]
 800762e:	e012      	b.n	8007656 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	4413      	add	r3, r2
 8007636:	7819      	ldrb	r1, [r3, #0]
 8007638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	4413      	add	r3, r2
 800763e:	3334      	adds	r3, #52	; 0x34
 8007640:	460a      	mov	r2, r1
 8007642:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	4413      	add	r3, r2
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d006      	beq.n	800765e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	3301      	adds	r3, #1
 8007654:	61fb      	str	r3, [r7, #28]
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	2b0f      	cmp	r3, #15
 800765a:	d9e9      	bls.n	8007630 <prvInitialiseNewTask+0x64>
 800765c:	e000      	b.n	8007660 <prvInitialiseNewTask+0x94>
			{
				break;
 800765e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007668:	e003      	b.n	8007672 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	2b37      	cmp	r3, #55	; 0x37
 8007676:	d901      	bls.n	800767c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007678:	2337      	movs	r3, #55	; 0x37
 800767a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007680:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007686:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	2200      	movs	r2, #0
 800768c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	3304      	adds	r3, #4
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe ff64 	bl	8006560 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	3318      	adds	r3, #24
 800769c:	4618      	mov	r0, r3
 800769e:	f7fe ff5f 	bl	8006560 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	2200      	movs	r2, #0
 80076bc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	68f9      	ldr	r1, [r7, #12]
 80076ca:	69b8      	ldr	r0, [r7, #24]
 80076cc:	f001 fa36 	bl	8008b3c <pxPortInitialiseStack>
 80076d0:	4602      	mov	r2, r0
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076e2:	bf00      	nop
 80076e4:	3720      	adds	r7, #32
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076f4:	f001 fb4e 	bl	8008d94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076f8:	4b2d      	ldr	r3, [pc, #180]	; (80077b0 <prvAddNewTaskToReadyList+0xc4>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3301      	adds	r3, #1
 80076fe:	4a2c      	ldr	r2, [pc, #176]	; (80077b0 <prvAddNewTaskToReadyList+0xc4>)
 8007700:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007702:	4b2c      	ldr	r3, [pc, #176]	; (80077b4 <prvAddNewTaskToReadyList+0xc8>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d109      	bne.n	800771e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800770a:	4a2a      	ldr	r2, [pc, #168]	; (80077b4 <prvAddNewTaskToReadyList+0xc8>)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007710:	4b27      	ldr	r3, [pc, #156]	; (80077b0 <prvAddNewTaskToReadyList+0xc4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d110      	bne.n	800773a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007718:	f000 fc16 	bl	8007f48 <prvInitialiseTaskLists>
 800771c:	e00d      	b.n	800773a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800771e:	4b26      	ldr	r3, [pc, #152]	; (80077b8 <prvAddNewTaskToReadyList+0xcc>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d109      	bne.n	800773a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007726:	4b23      	ldr	r3, [pc, #140]	; (80077b4 <prvAddNewTaskToReadyList+0xc8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	429a      	cmp	r2, r3
 8007732:	d802      	bhi.n	800773a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007734:	4a1f      	ldr	r2, [pc, #124]	; (80077b4 <prvAddNewTaskToReadyList+0xc8>)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800773a:	4b20      	ldr	r3, [pc, #128]	; (80077bc <prvAddNewTaskToReadyList+0xd0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3301      	adds	r3, #1
 8007740:	4a1e      	ldr	r2, [pc, #120]	; (80077bc <prvAddNewTaskToReadyList+0xd0>)
 8007742:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007744:	4b1d      	ldr	r3, [pc, #116]	; (80077bc <prvAddNewTaskToReadyList+0xd0>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007750:	4b1b      	ldr	r3, [pc, #108]	; (80077c0 <prvAddNewTaskToReadyList+0xd4>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	429a      	cmp	r2, r3
 8007756:	d903      	bls.n	8007760 <prvAddNewTaskToReadyList+0x74>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775c:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <prvAddNewTaskToReadyList+0xd4>)
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007764:	4613      	mov	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4a15      	ldr	r2, [pc, #84]	; (80077c4 <prvAddNewTaskToReadyList+0xd8>)
 800776e:	441a      	add	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3304      	adds	r3, #4
 8007774:	4619      	mov	r1, r3
 8007776:	4610      	mov	r0, r2
 8007778:	f7fe feff 	bl	800657a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800777c:	f001 fb3a 	bl	8008df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007780:	4b0d      	ldr	r3, [pc, #52]	; (80077b8 <prvAddNewTaskToReadyList+0xcc>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00e      	beq.n	80077a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007788:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <prvAddNewTaskToReadyList+0xc8>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007792:	429a      	cmp	r2, r3
 8007794:	d207      	bcs.n	80077a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007796:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <prvAddNewTaskToReadyList+0xdc>)
 8007798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	200015c4 	.word	0x200015c4
 80077b4:	200010f0 	.word	0x200010f0
 80077b8:	200015d0 	.word	0x200015d0
 80077bc:	200015e0 	.word	0x200015e0
 80077c0:	200015cc 	.word	0x200015cc
 80077c4:	200010f4 	.word	0x200010f4
 80077c8:	e000ed04 	.word	0xe000ed04

080077cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d017      	beq.n	800780e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077de:	4b13      	ldr	r3, [pc, #76]	; (800782c <vTaskDelay+0x60>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <vTaskDelay+0x30>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	60bb      	str	r3, [r7, #8]
}
 80077f8:	bf00      	nop
 80077fa:	e7fe      	b.n	80077fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077fc:	f000 f880 	bl	8007900 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007800:	2100      	movs	r1, #0
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fdf8 	bl	80083f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007808:	f000 f888 	bl	800791c <xTaskResumeAll>
 800780c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d107      	bne.n	8007824 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007814:	4b06      	ldr	r3, [pc, #24]	; (8007830 <vTaskDelay+0x64>)
 8007816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007824:	bf00      	nop
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	200015ec 	.word	0x200015ec
 8007830:	e000ed04 	.word	0xe000ed04

08007834 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08a      	sub	sp, #40	; 0x28
 8007838:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007842:	463a      	mov	r2, r7
 8007844:	1d39      	adds	r1, r7, #4
 8007846:	f107 0308 	add.w	r3, r7, #8
 800784a:	4618      	mov	r0, r3
 800784c:	f7fe fe34 	bl	80064b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	9202      	str	r2, [sp, #8]
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	2300      	movs	r3, #0
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	2300      	movs	r3, #0
 8007860:	460a      	mov	r2, r1
 8007862:	4921      	ldr	r1, [pc, #132]	; (80078e8 <vTaskStartScheduler+0xb4>)
 8007864:	4821      	ldr	r0, [pc, #132]	; (80078ec <vTaskStartScheduler+0xb8>)
 8007866:	f7ff fe0f 	bl	8007488 <xTaskCreateStatic>
 800786a:	4603      	mov	r3, r0
 800786c:	4a20      	ldr	r2, [pc, #128]	; (80078f0 <vTaskStartScheduler+0xbc>)
 800786e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007870:	4b1f      	ldr	r3, [pc, #124]	; (80078f0 <vTaskStartScheduler+0xbc>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007878:	2301      	movs	r3, #1
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	e001      	b.n	8007882 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800787e:	2300      	movs	r3, #0
 8007880:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d102      	bne.n	800788e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007888:	f000 fe0a 	bl	80084a0 <xTimerCreateTimerTask>
 800788c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d116      	bne.n	80078c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	613b      	str	r3, [r7, #16]
}
 80078a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078a8:	4b12      	ldr	r3, [pc, #72]	; (80078f4 <vTaskStartScheduler+0xc0>)
 80078aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078b0:	4b11      	ldr	r3, [pc, #68]	; (80078f8 <vTaskStartScheduler+0xc4>)
 80078b2:	2201      	movs	r2, #1
 80078b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078b6:	4b11      	ldr	r3, [pc, #68]	; (80078fc <vTaskStartScheduler+0xc8>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078bc:	f001 f9c8 	bl	8008c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078c0:	e00e      	b.n	80078e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078c8:	d10a      	bne.n	80078e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	60fb      	str	r3, [r7, #12]
}
 80078dc:	bf00      	nop
 80078de:	e7fe      	b.n	80078de <vTaskStartScheduler+0xaa>
}
 80078e0:	bf00      	nop
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	08009ff0 	.word	0x08009ff0
 80078ec:	08007f19 	.word	0x08007f19
 80078f0:	200015e8 	.word	0x200015e8
 80078f4:	200015e4 	.word	0x200015e4
 80078f8:	200015d0 	.word	0x200015d0
 80078fc:	200015c8 	.word	0x200015c8

08007900 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007900:	b480      	push	{r7}
 8007902:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007904:	4b04      	ldr	r3, [pc, #16]	; (8007918 <vTaskSuspendAll+0x18>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3301      	adds	r3, #1
 800790a:	4a03      	ldr	r2, [pc, #12]	; (8007918 <vTaskSuspendAll+0x18>)
 800790c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800790e:	bf00      	nop
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	200015ec 	.word	0x200015ec

0800791c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007922:	2300      	movs	r3, #0
 8007924:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007926:	2300      	movs	r3, #0
 8007928:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800792a:	4b42      	ldr	r3, [pc, #264]	; (8007a34 <xTaskResumeAll+0x118>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10a      	bne.n	8007948 <xTaskResumeAll+0x2c>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	603b      	str	r3, [r7, #0]
}
 8007944:	bf00      	nop
 8007946:	e7fe      	b.n	8007946 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007948:	f001 fa24 	bl	8008d94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800794c:	4b39      	ldr	r3, [pc, #228]	; (8007a34 <xTaskResumeAll+0x118>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3b01      	subs	r3, #1
 8007952:	4a38      	ldr	r2, [pc, #224]	; (8007a34 <xTaskResumeAll+0x118>)
 8007954:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007956:	4b37      	ldr	r3, [pc, #220]	; (8007a34 <xTaskResumeAll+0x118>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d162      	bne.n	8007a24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800795e:	4b36      	ldr	r3, [pc, #216]	; (8007a38 <xTaskResumeAll+0x11c>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d05e      	beq.n	8007a24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007966:	e02f      	b.n	80079c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007968:	4b34      	ldr	r3, [pc, #208]	; (8007a3c <xTaskResumeAll+0x120>)
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3318      	adds	r3, #24
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe fe5d 	bl	8006634 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3304      	adds	r3, #4
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe fe58 	bl	8006634 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007988:	4b2d      	ldr	r3, [pc, #180]	; (8007a40 <xTaskResumeAll+0x124>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d903      	bls.n	8007998 <xTaskResumeAll+0x7c>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007994:	4a2a      	ldr	r2, [pc, #168]	; (8007a40 <xTaskResumeAll+0x124>)
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4a27      	ldr	r2, [pc, #156]	; (8007a44 <xTaskResumeAll+0x128>)
 80079a6:	441a      	add	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3304      	adds	r3, #4
 80079ac:	4619      	mov	r1, r3
 80079ae:	4610      	mov	r0, r2
 80079b0:	f7fe fde3 	bl	800657a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b8:	4b23      	ldr	r3, [pc, #140]	; (8007a48 <xTaskResumeAll+0x12c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	429a      	cmp	r2, r3
 80079c0:	d302      	bcc.n	80079c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80079c2:	4b22      	ldr	r3, [pc, #136]	; (8007a4c <xTaskResumeAll+0x130>)
 80079c4:	2201      	movs	r2, #1
 80079c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079c8:	4b1c      	ldr	r3, [pc, #112]	; (8007a3c <xTaskResumeAll+0x120>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1cb      	bne.n	8007968 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079d6:	f000 fb55 	bl	8008084 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079da:	4b1d      	ldr	r3, [pc, #116]	; (8007a50 <xTaskResumeAll+0x134>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d010      	beq.n	8007a08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079e6:	f000 f847 	bl	8007a78 <xTaskIncrementTick>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80079f0:	4b16      	ldr	r3, [pc, #88]	; (8007a4c <xTaskResumeAll+0x130>)
 80079f2:	2201      	movs	r2, #1
 80079f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	3b01      	subs	r3, #1
 80079fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1f1      	bne.n	80079e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a02:	4b13      	ldr	r3, [pc, #76]	; (8007a50 <xTaskResumeAll+0x134>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a08:	4b10      	ldr	r3, [pc, #64]	; (8007a4c <xTaskResumeAll+0x130>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d009      	beq.n	8007a24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a10:	2301      	movs	r3, #1
 8007a12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a14:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <xTaskResumeAll+0x138>)
 8007a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a1a:	601a      	str	r2, [r3, #0]
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a24:	f001 f9e6 	bl	8008df4 <vPortExitCritical>

	return xAlreadyYielded;
 8007a28:	68bb      	ldr	r3, [r7, #8]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	200015ec 	.word	0x200015ec
 8007a38:	200015c4 	.word	0x200015c4
 8007a3c:	20001584 	.word	0x20001584
 8007a40:	200015cc 	.word	0x200015cc
 8007a44:	200010f4 	.word	0x200010f4
 8007a48:	200010f0 	.word	0x200010f0
 8007a4c:	200015d8 	.word	0x200015d8
 8007a50:	200015d4 	.word	0x200015d4
 8007a54:	e000ed04 	.word	0xe000ed04

08007a58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a5e:	4b05      	ldr	r3, [pc, #20]	; (8007a74 <xTaskGetTickCount+0x1c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a64:	687b      	ldr	r3, [r7, #4]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	200015c8 	.word	0x200015c8

08007a78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a82:	4b4f      	ldr	r3, [pc, #316]	; (8007bc0 <xTaskIncrementTick+0x148>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f040 808f 	bne.w	8007baa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a8c:	4b4d      	ldr	r3, [pc, #308]	; (8007bc4 <xTaskIncrementTick+0x14c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3301      	adds	r3, #1
 8007a92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a94:	4a4b      	ldr	r2, [pc, #300]	; (8007bc4 <xTaskIncrementTick+0x14c>)
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d120      	bne.n	8007ae2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007aa0:	4b49      	ldr	r3, [pc, #292]	; (8007bc8 <xTaskIncrementTick+0x150>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00a      	beq.n	8007ac0 <xTaskIncrementTick+0x48>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	603b      	str	r3, [r7, #0]
}
 8007abc:	bf00      	nop
 8007abe:	e7fe      	b.n	8007abe <xTaskIncrementTick+0x46>
 8007ac0:	4b41      	ldr	r3, [pc, #260]	; (8007bc8 <xTaskIncrementTick+0x150>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	60fb      	str	r3, [r7, #12]
 8007ac6:	4b41      	ldr	r3, [pc, #260]	; (8007bcc <xTaskIncrementTick+0x154>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a3f      	ldr	r2, [pc, #252]	; (8007bc8 <xTaskIncrementTick+0x150>)
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	4a3f      	ldr	r2, [pc, #252]	; (8007bcc <xTaskIncrementTick+0x154>)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6013      	str	r3, [r2, #0]
 8007ad4:	4b3e      	ldr	r3, [pc, #248]	; (8007bd0 <xTaskIncrementTick+0x158>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	4a3d      	ldr	r2, [pc, #244]	; (8007bd0 <xTaskIncrementTick+0x158>)
 8007adc:	6013      	str	r3, [r2, #0]
 8007ade:	f000 fad1 	bl	8008084 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ae2:	4b3c      	ldr	r3, [pc, #240]	; (8007bd4 <xTaskIncrementTick+0x15c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d349      	bcc.n	8007b80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aec:	4b36      	ldr	r3, [pc, #216]	; (8007bc8 <xTaskIncrementTick+0x150>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d104      	bne.n	8007b00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007af6:	4b37      	ldr	r3, [pc, #220]	; (8007bd4 <xTaskIncrementTick+0x15c>)
 8007af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007afc:	601a      	str	r2, [r3, #0]
					break;
 8007afe:	e03f      	b.n	8007b80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b00:	4b31      	ldr	r3, [pc, #196]	; (8007bc8 <xTaskIncrementTick+0x150>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d203      	bcs.n	8007b20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b18:	4a2e      	ldr	r2, [pc, #184]	; (8007bd4 <xTaskIncrementTick+0x15c>)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b1e:	e02f      	b.n	8007b80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	3304      	adds	r3, #4
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fe fd85 	bl	8006634 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d004      	beq.n	8007b3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	3318      	adds	r3, #24
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe fd7c 	bl	8006634 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b40:	4b25      	ldr	r3, [pc, #148]	; (8007bd8 <xTaskIncrementTick+0x160>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d903      	bls.n	8007b50 <xTaskIncrementTick+0xd8>
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4c:	4a22      	ldr	r2, [pc, #136]	; (8007bd8 <xTaskIncrementTick+0x160>)
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b54:	4613      	mov	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4a1f      	ldr	r2, [pc, #124]	; (8007bdc <xTaskIncrementTick+0x164>)
 8007b5e:	441a      	add	r2, r3
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	3304      	adds	r3, #4
 8007b64:	4619      	mov	r1, r3
 8007b66:	4610      	mov	r0, r2
 8007b68:	f7fe fd07 	bl	800657a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b70:	4b1b      	ldr	r3, [pc, #108]	; (8007be0 <xTaskIncrementTick+0x168>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d3b8      	bcc.n	8007aec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b7e:	e7b5      	b.n	8007aec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b80:	4b17      	ldr	r3, [pc, #92]	; (8007be0 <xTaskIncrementTick+0x168>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b86:	4915      	ldr	r1, [pc, #84]	; (8007bdc <xTaskIncrementTick+0x164>)
 8007b88:	4613      	mov	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4413      	add	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	440b      	add	r3, r1
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d901      	bls.n	8007b9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b9c:	4b11      	ldr	r3, [pc, #68]	; (8007be4 <xTaskIncrementTick+0x16c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d007      	beq.n	8007bb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	e004      	b.n	8007bb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007baa:	4b0f      	ldr	r3, [pc, #60]	; (8007be8 <xTaskIncrementTick+0x170>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	4a0d      	ldr	r2, [pc, #52]	; (8007be8 <xTaskIncrementTick+0x170>)
 8007bb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007bb4:	697b      	ldr	r3, [r7, #20]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3718      	adds	r7, #24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	200015ec 	.word	0x200015ec
 8007bc4:	200015c8 	.word	0x200015c8
 8007bc8:	2000157c 	.word	0x2000157c
 8007bcc:	20001580 	.word	0x20001580
 8007bd0:	200015dc 	.word	0x200015dc
 8007bd4:	200015e4 	.word	0x200015e4
 8007bd8:	200015cc 	.word	0x200015cc
 8007bdc:	200010f4 	.word	0x200010f4
 8007be0:	200010f0 	.word	0x200010f0
 8007be4:	200015d8 	.word	0x200015d8
 8007be8:	200015d4 	.word	0x200015d4

08007bec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bf2:	4b28      	ldr	r3, [pc, #160]	; (8007c94 <vTaskSwitchContext+0xa8>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bfa:	4b27      	ldr	r3, [pc, #156]	; (8007c98 <vTaskSwitchContext+0xac>)
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c00:	e041      	b.n	8007c86 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007c02:	4b25      	ldr	r3, [pc, #148]	; (8007c98 <vTaskSwitchContext+0xac>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c08:	4b24      	ldr	r3, [pc, #144]	; (8007c9c <vTaskSwitchContext+0xb0>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	e010      	b.n	8007c32 <vTaskSwitchContext+0x46>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10a      	bne.n	8007c2c <vTaskSwitchContext+0x40>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	607b      	str	r3, [r7, #4]
}
 8007c28:	bf00      	nop
 8007c2a:	e7fe      	b.n	8007c2a <vTaskSwitchContext+0x3e>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	491b      	ldr	r1, [pc, #108]	; (8007ca0 <vTaskSwitchContext+0xb4>)
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	440b      	add	r3, r1
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0e4      	beq.n	8007c10 <vTaskSwitchContext+0x24>
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4a13      	ldr	r2, [pc, #76]	; (8007ca0 <vTaskSwitchContext+0xb4>)
 8007c52:	4413      	add	r3, r2
 8007c54:	60bb      	str	r3, [r7, #8]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	605a      	str	r2, [r3, #4]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	3308      	adds	r3, #8
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d104      	bne.n	8007c76 <vTaskSwitchContext+0x8a>
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	605a      	str	r2, [r3, #4]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <vTaskSwitchContext+0xb8>)
 8007c7e:	6013      	str	r3, [r2, #0]
 8007c80:	4a06      	ldr	r2, [pc, #24]	; (8007c9c <vTaskSwitchContext+0xb0>)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6013      	str	r3, [r2, #0]
}
 8007c86:	bf00      	nop
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	200015ec 	.word	0x200015ec
 8007c98:	200015d8 	.word	0x200015d8
 8007c9c:	200015cc 	.word	0x200015cc
 8007ca0:	200010f4 	.word	0x200010f4
 8007ca4:	200010f0 	.word	0x200010f0

08007ca8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	60fb      	str	r3, [r7, #12]
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cce:	4b07      	ldr	r3, [pc, #28]	; (8007cec <vTaskPlaceOnEventList+0x44>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3318      	adds	r3, #24
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7fe fc73 	bl	80065c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cdc:	2101      	movs	r1, #1
 8007cde:	6838      	ldr	r0, [r7, #0]
 8007ce0:	f000 fb8a 	bl	80083f8 <prvAddCurrentTaskToDelayedList>
}
 8007ce4:	bf00      	nop
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	200010f0 	.word	0x200010f0

08007cf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10a      	bne.n	8007d18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	617b      	str	r3, [r7, #20]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d18:	4b0a      	ldr	r3, [pc, #40]	; (8007d44 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3318      	adds	r3, #24
 8007d1e:	4619      	mov	r1, r3
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f7fe fc2a 	bl	800657a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d32:	6879      	ldr	r1, [r7, #4]
 8007d34:	68b8      	ldr	r0, [r7, #8]
 8007d36:	f000 fb5f 	bl	80083f8 <prvAddCurrentTaskToDelayedList>
	}
 8007d3a:	bf00      	nop
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	200010f0 	.word	0x200010f0

08007d48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	60fb      	str	r3, [r7, #12]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	3318      	adds	r3, #24
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fe fc5b 	bl	8006634 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d7e:	4b1e      	ldr	r3, [pc, #120]	; (8007df8 <xTaskRemoveFromEventList+0xb0>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d11d      	bne.n	8007dc2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe fc52 	bl	8006634 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d94:	4b19      	ldr	r3, [pc, #100]	; (8007dfc <xTaskRemoveFromEventList+0xb4>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d903      	bls.n	8007da4 <xTaskRemoveFromEventList+0x5c>
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	4a16      	ldr	r2, [pc, #88]	; (8007dfc <xTaskRemoveFromEventList+0xb4>)
 8007da2:	6013      	str	r3, [r2, #0]
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da8:	4613      	mov	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4a13      	ldr	r2, [pc, #76]	; (8007e00 <xTaskRemoveFromEventList+0xb8>)
 8007db2:	441a      	add	r2, r3
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	3304      	adds	r3, #4
 8007db8:	4619      	mov	r1, r3
 8007dba:	4610      	mov	r0, r2
 8007dbc:	f7fe fbdd 	bl	800657a <vListInsertEnd>
 8007dc0:	e005      	b.n	8007dce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	3318      	adds	r3, #24
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	480e      	ldr	r0, [pc, #56]	; (8007e04 <xTaskRemoveFromEventList+0xbc>)
 8007dca:	f7fe fbd6 	bl	800657a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd2:	4b0d      	ldr	r3, [pc, #52]	; (8007e08 <xTaskRemoveFromEventList+0xc0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d905      	bls.n	8007de8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007de0:	4b0a      	ldr	r3, [pc, #40]	; (8007e0c <xTaskRemoveFromEventList+0xc4>)
 8007de2:	2201      	movs	r2, #1
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	e001      	b.n	8007dec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007de8:	2300      	movs	r3, #0
 8007dea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007dec:	697b      	ldr	r3, [r7, #20]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	200015ec 	.word	0x200015ec
 8007dfc:	200015cc 	.word	0x200015cc
 8007e00:	200010f4 	.word	0x200010f4
 8007e04:	20001584 	.word	0x20001584
 8007e08:	200010f0 	.word	0x200010f0
 8007e0c:	200015d8 	.word	0x200015d8

08007e10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e18:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <vTaskInternalSetTimeOutState+0x24>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e20:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <vTaskInternalSetTimeOutState+0x28>)
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	605a      	str	r2, [r3, #4]
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	200015dc 	.word	0x200015dc
 8007e38:	200015c8 	.word	0x200015c8

08007e3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b088      	sub	sp, #32
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10a      	bne.n	8007e62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	613b      	str	r3, [r7, #16]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10a      	bne.n	8007e7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	60fb      	str	r3, [r7, #12]
}
 8007e7a:	bf00      	nop
 8007e7c:	e7fe      	b.n	8007e7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e7e:	f000 ff89 	bl	8008d94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e82:	4b1d      	ldr	r3, [pc, #116]	; (8007ef8 <xTaskCheckForTimeOut+0xbc>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e9a:	d102      	bne.n	8007ea2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	e023      	b.n	8007eea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	4b15      	ldr	r3, [pc, #84]	; (8007efc <xTaskCheckForTimeOut+0xc0>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d007      	beq.n	8007ebe <xTaskCheckForTimeOut+0x82>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	69ba      	ldr	r2, [r7, #24]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d302      	bcc.n	8007ebe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	e015      	b.n	8007eea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d20b      	bcs.n	8007ee0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	1ad2      	subs	r2, r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7ff ff9b 	bl	8007e10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eda:	2300      	movs	r3, #0
 8007edc:	61fb      	str	r3, [r7, #28]
 8007ede:	e004      	b.n	8007eea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007eea:	f000 ff83 	bl	8008df4 <vPortExitCritical>

	return xReturn;
 8007eee:	69fb      	ldr	r3, [r7, #28]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3720      	adds	r7, #32
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	200015c8 	.word	0x200015c8
 8007efc:	200015dc 	.word	0x200015dc

08007f00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f00:	b480      	push	{r7}
 8007f02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f04:	4b03      	ldr	r3, [pc, #12]	; (8007f14 <vTaskMissedYield+0x14>)
 8007f06:	2201      	movs	r2, #1
 8007f08:	601a      	str	r2, [r3, #0]
}
 8007f0a:	bf00      	nop
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	200015d8 	.word	0x200015d8

08007f18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f20:	f000 f852 	bl	8007fc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f24:	4b06      	ldr	r3, [pc, #24]	; (8007f40 <prvIdleTask+0x28>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d9f9      	bls.n	8007f20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f2c:	4b05      	ldr	r3, [pc, #20]	; (8007f44 <prvIdleTask+0x2c>)
 8007f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f3c:	e7f0      	b.n	8007f20 <prvIdleTask+0x8>
 8007f3e:	bf00      	nop
 8007f40:	200010f4 	.word	0x200010f4
 8007f44:	e000ed04 	.word	0xe000ed04

08007f48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f4e:	2300      	movs	r3, #0
 8007f50:	607b      	str	r3, [r7, #4]
 8007f52:	e00c      	b.n	8007f6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	4613      	mov	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4a12      	ldr	r2, [pc, #72]	; (8007fa8 <prvInitialiseTaskLists+0x60>)
 8007f60:	4413      	add	r3, r2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe fadc 	bl	8006520 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	607b      	str	r3, [r7, #4]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b37      	cmp	r3, #55	; 0x37
 8007f72:	d9ef      	bls.n	8007f54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f74:	480d      	ldr	r0, [pc, #52]	; (8007fac <prvInitialiseTaskLists+0x64>)
 8007f76:	f7fe fad3 	bl	8006520 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f7a:	480d      	ldr	r0, [pc, #52]	; (8007fb0 <prvInitialiseTaskLists+0x68>)
 8007f7c:	f7fe fad0 	bl	8006520 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f80:	480c      	ldr	r0, [pc, #48]	; (8007fb4 <prvInitialiseTaskLists+0x6c>)
 8007f82:	f7fe facd 	bl	8006520 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f86:	480c      	ldr	r0, [pc, #48]	; (8007fb8 <prvInitialiseTaskLists+0x70>)
 8007f88:	f7fe faca 	bl	8006520 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f8c:	480b      	ldr	r0, [pc, #44]	; (8007fbc <prvInitialiseTaskLists+0x74>)
 8007f8e:	f7fe fac7 	bl	8006520 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f92:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <prvInitialiseTaskLists+0x78>)
 8007f94:	4a05      	ldr	r2, [pc, #20]	; (8007fac <prvInitialiseTaskLists+0x64>)
 8007f96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f98:	4b0a      	ldr	r3, [pc, #40]	; (8007fc4 <prvInitialiseTaskLists+0x7c>)
 8007f9a:	4a05      	ldr	r2, [pc, #20]	; (8007fb0 <prvInitialiseTaskLists+0x68>)
 8007f9c:	601a      	str	r2, [r3, #0]
}
 8007f9e:	bf00      	nop
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	200010f4 	.word	0x200010f4
 8007fac:	20001554 	.word	0x20001554
 8007fb0:	20001568 	.word	0x20001568
 8007fb4:	20001584 	.word	0x20001584
 8007fb8:	20001598 	.word	0x20001598
 8007fbc:	200015b0 	.word	0x200015b0
 8007fc0:	2000157c 	.word	0x2000157c
 8007fc4:	20001580 	.word	0x20001580

08007fc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fce:	e019      	b.n	8008004 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fd0:	f000 fee0 	bl	8008d94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd4:	4b10      	ldr	r3, [pc, #64]	; (8008018 <prvCheckTasksWaitingTermination+0x50>)
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	3304      	adds	r3, #4
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fe fb27 	bl	8006634 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	; (800801c <prvCheckTasksWaitingTermination+0x54>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	4a0b      	ldr	r2, [pc, #44]	; (800801c <prvCheckTasksWaitingTermination+0x54>)
 8007fee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <prvCheckTasksWaitingTermination+0x58>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	4a0a      	ldr	r2, [pc, #40]	; (8008020 <prvCheckTasksWaitingTermination+0x58>)
 8007ff8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ffa:	f000 fefb 	bl	8008df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f810 	bl	8008024 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008004:	4b06      	ldr	r3, [pc, #24]	; (8008020 <prvCheckTasksWaitingTermination+0x58>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e1      	bne.n	8007fd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	20001598 	.word	0x20001598
 800801c:	200015c4 	.word	0x200015c4
 8008020:	200015ac 	.word	0x200015ac

08008024 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008032:	2b00      	cmp	r3, #0
 8008034:	d108      	bne.n	8008048 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803a:	4618      	mov	r0, r3
 800803c:	f001 f898 	bl	8009170 <vPortFree>
				vPortFree( pxTCB );
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 f895 	bl	8009170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008046:	e018      	b.n	800807a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800804e:	2b01      	cmp	r3, #1
 8008050:	d103      	bne.n	800805a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 f88c 	bl	8009170 <vPortFree>
	}
 8008058:	e00f      	b.n	800807a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008060:	2b02      	cmp	r3, #2
 8008062:	d00a      	beq.n	800807a <prvDeleteTCB+0x56>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	60fb      	str	r3, [r7, #12]
}
 8008076:	bf00      	nop
 8008078:	e7fe      	b.n	8008078 <prvDeleteTCB+0x54>
	}
 800807a:	bf00      	nop
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800808a:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <prvResetNextTaskUnblockTime+0x38>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d104      	bne.n	800809e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008094:	4b0a      	ldr	r3, [pc, #40]	; (80080c0 <prvResetNextTaskUnblockTime+0x3c>)
 8008096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800809a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800809c:	e008      	b.n	80080b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800809e:	4b07      	ldr	r3, [pc, #28]	; (80080bc <prvResetNextTaskUnblockTime+0x38>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	4a04      	ldr	r2, [pc, #16]	; (80080c0 <prvResetNextTaskUnblockTime+0x3c>)
 80080ae:	6013      	str	r3, [r2, #0]
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	2000157c 	.word	0x2000157c
 80080c0:	200015e4 	.word	0x200015e4

080080c4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80080ca:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <xTaskGetCurrentTaskHandle+0x1c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	607b      	str	r3, [r7, #4]

		return xReturn;
 80080d0:	687b      	ldr	r3, [r7, #4]
	}
 80080d2:	4618      	mov	r0, r3
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	200010f0 	.word	0x200010f0

080080e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080ea:	4b0b      	ldr	r3, [pc, #44]	; (8008118 <xTaskGetSchedulerState+0x34>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d102      	bne.n	80080f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080f2:	2301      	movs	r3, #1
 80080f4:	607b      	str	r3, [r7, #4]
 80080f6:	e008      	b.n	800810a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080f8:	4b08      	ldr	r3, [pc, #32]	; (800811c <xTaskGetSchedulerState+0x38>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d102      	bne.n	8008106 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008100:	2302      	movs	r3, #2
 8008102:	607b      	str	r3, [r7, #4]
 8008104:	e001      	b.n	800810a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008106:	2300      	movs	r3, #0
 8008108:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800810a:	687b      	ldr	r3, [r7, #4]
	}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	200015d0 	.word	0x200015d0
 800811c:	200015ec 	.word	0x200015ec

08008120 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800812c:	2300      	movs	r3, #0
 800812e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d051      	beq.n	80081da <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813a:	4b2a      	ldr	r3, [pc, #168]	; (80081e4 <xTaskPriorityInherit+0xc4>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	429a      	cmp	r2, r3
 8008142:	d241      	bcs.n	80081c8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	2b00      	cmp	r3, #0
 800814a:	db06      	blt.n	800815a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800814c:	4b25      	ldr	r3, [pc, #148]	; (80081e4 <xTaskPriorityInherit+0xc4>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008152:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6959      	ldr	r1, [r3, #20]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008162:	4613      	mov	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4a1f      	ldr	r2, [pc, #124]	; (80081e8 <xTaskPriorityInherit+0xc8>)
 800816c:	4413      	add	r3, r2
 800816e:	4299      	cmp	r1, r3
 8008170:	d122      	bne.n	80081b8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	3304      	adds	r3, #4
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fa5c 	bl	8006634 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800817c:	4b19      	ldr	r3, [pc, #100]	; (80081e4 <xTaskPriorityInherit+0xc4>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818a:	4b18      	ldr	r3, [pc, #96]	; (80081ec <xTaskPriorityInherit+0xcc>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d903      	bls.n	800819a <xTaskPriorityInherit+0x7a>
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008196:	4a15      	ldr	r2, [pc, #84]	; (80081ec <xTaskPriorityInherit+0xcc>)
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4a10      	ldr	r2, [pc, #64]	; (80081e8 <xTaskPriorityInherit+0xc8>)
 80081a8:	441a      	add	r2, r3
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	3304      	adds	r3, #4
 80081ae:	4619      	mov	r1, r3
 80081b0:	4610      	mov	r0, r2
 80081b2:	f7fe f9e2 	bl	800657a <vListInsertEnd>
 80081b6:	e004      	b.n	80081c2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081b8:	4b0a      	ldr	r3, [pc, #40]	; (80081e4 <xTaskPriorityInherit+0xc4>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80081c2:	2301      	movs	r3, #1
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	e008      	b.n	80081da <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081cc:	4b05      	ldr	r3, [pc, #20]	; (80081e4 <xTaskPriorityInherit+0xc4>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d201      	bcs.n	80081da <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80081d6:	2301      	movs	r3, #1
 80081d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081da:	68fb      	ldr	r3, [r7, #12]
	}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	200010f0 	.word	0x200010f0
 80081e8:	200010f4 	.word	0x200010f4
 80081ec:	200015cc 	.word	0x200015cc

080081f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081fc:	2300      	movs	r3, #0
 80081fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d056      	beq.n	80082b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008206:	4b2e      	ldr	r3, [pc, #184]	; (80082c0 <xTaskPriorityDisinherit+0xd0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	429a      	cmp	r2, r3
 800820e:	d00a      	beq.n	8008226 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	60fb      	str	r3, [r7, #12]
}
 8008222:	bf00      	nop
 8008224:	e7fe      	b.n	8008224 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10a      	bne.n	8008244 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	60bb      	str	r3, [r7, #8]
}
 8008240:	bf00      	nop
 8008242:	e7fe      	b.n	8008242 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008248:	1e5a      	subs	r2, r3, #1
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008256:	429a      	cmp	r2, r3
 8008258:	d02c      	beq.n	80082b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800825e:	2b00      	cmp	r3, #0
 8008260:	d128      	bne.n	80082b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	3304      	adds	r3, #4
 8008266:	4618      	mov	r0, r3
 8008268:	f7fe f9e4 	bl	8006634 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008278:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008284:	4b0f      	ldr	r3, [pc, #60]	; (80082c4 <xTaskPriorityDisinherit+0xd4>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d903      	bls.n	8008294 <xTaskPriorityDisinherit+0xa4>
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008290:	4a0c      	ldr	r2, [pc, #48]	; (80082c4 <xTaskPriorityDisinherit+0xd4>)
 8008292:	6013      	str	r3, [r2, #0]
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008298:	4613      	mov	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4a09      	ldr	r2, [pc, #36]	; (80082c8 <xTaskPriorityDisinherit+0xd8>)
 80082a2:	441a      	add	r2, r3
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	3304      	adds	r3, #4
 80082a8:	4619      	mov	r1, r3
 80082aa:	4610      	mov	r0, r2
 80082ac:	f7fe f965 	bl	800657a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082b0:	2301      	movs	r3, #1
 80082b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082b4:	697b      	ldr	r3, [r7, #20]
	}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	200010f0 	.word	0x200010f0
 80082c4:	200015cc 	.word	0x200015cc
 80082c8:	200010f4 	.word	0x200010f4

080082cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80082da:	2301      	movs	r3, #1
 80082dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d06a      	beq.n	80083ba <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10a      	bne.n	8008302 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	60fb      	str	r3, [r7, #12]
}
 80082fe:	bf00      	nop
 8008300:	e7fe      	b.n	8008300 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	429a      	cmp	r2, r3
 800830a:	d902      	bls.n	8008312 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	61fb      	str	r3, [r7, #28]
 8008310:	e002      	b.n	8008318 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008316:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831c:	69fa      	ldr	r2, [r7, #28]
 800831e:	429a      	cmp	r2, r3
 8008320:	d04b      	beq.n	80083ba <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	429a      	cmp	r2, r3
 800832a:	d146      	bne.n	80083ba <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800832c:	4b25      	ldr	r3, [pc, #148]	; (80083c4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	69ba      	ldr	r2, [r7, #24]
 8008332:	429a      	cmp	r2, r3
 8008334:	d10a      	bne.n	800834c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	60bb      	str	r3, [r7, #8]
}
 8008348:	bf00      	nop
 800834a:	e7fe      	b.n	800834a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	2b00      	cmp	r3, #0
 800835e:	db04      	blt.n	800836a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	6959      	ldr	r1, [r3, #20]
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	4613      	mov	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4a13      	ldr	r2, [pc, #76]	; (80083c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800837a:	4413      	add	r3, r2
 800837c:	4299      	cmp	r1, r3
 800837e:	d11c      	bne.n	80083ba <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	3304      	adds	r3, #4
 8008384:	4618      	mov	r0, r3
 8008386:	f7fe f955 	bl	8006634 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800838e:	4b0f      	ldr	r3, [pc, #60]	; (80083cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	429a      	cmp	r2, r3
 8008394:	d903      	bls.n	800839e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839a:	4a0c      	ldr	r2, [pc, #48]	; (80083cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800839c:	6013      	str	r3, [r2, #0]
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a2:	4613      	mov	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4a07      	ldr	r2, [pc, #28]	; (80083c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80083ac:	441a      	add	r2, r3
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	3304      	adds	r3, #4
 80083b2:	4619      	mov	r1, r3
 80083b4:	4610      	mov	r0, r2
 80083b6:	f7fe f8e0 	bl	800657a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083ba:	bf00      	nop
 80083bc:	3720      	adds	r7, #32
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	200010f0 	.word	0x200010f0
 80083c8:	200010f4 	.word	0x200010f4
 80083cc:	200015cc 	.word	0x200015cc

080083d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80083d4:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d004      	beq.n	80083e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80083dc:	4b05      	ldr	r3, [pc, #20]	; (80083f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083e2:	3201      	adds	r2, #1
 80083e4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80083e6:	4b03      	ldr	r3, [pc, #12]	; (80083f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80083e8:	681b      	ldr	r3, [r3, #0]
	}
 80083ea:	4618      	mov	r0, r3
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	200010f0 	.word	0x200010f0

080083f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008402:	4b21      	ldr	r3, [pc, #132]	; (8008488 <prvAddCurrentTaskToDelayedList+0x90>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008408:	4b20      	ldr	r3, [pc, #128]	; (800848c <prvAddCurrentTaskToDelayedList+0x94>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3304      	adds	r3, #4
 800840e:	4618      	mov	r0, r3
 8008410:	f7fe f910 	bl	8006634 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800841a:	d10a      	bne.n	8008432 <prvAddCurrentTaskToDelayedList+0x3a>
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d007      	beq.n	8008432 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008422:	4b1a      	ldr	r3, [pc, #104]	; (800848c <prvAddCurrentTaskToDelayedList+0x94>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3304      	adds	r3, #4
 8008428:	4619      	mov	r1, r3
 800842a:	4819      	ldr	r0, [pc, #100]	; (8008490 <prvAddCurrentTaskToDelayedList+0x98>)
 800842c:	f7fe f8a5 	bl	800657a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008430:	e026      	b.n	8008480 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4413      	add	r3, r2
 8008438:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800843a:	4b14      	ldr	r3, [pc, #80]	; (800848c <prvAddCurrentTaskToDelayedList+0x94>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	429a      	cmp	r2, r3
 8008448:	d209      	bcs.n	800845e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800844a:	4b12      	ldr	r3, [pc, #72]	; (8008494 <prvAddCurrentTaskToDelayedList+0x9c>)
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	4b0f      	ldr	r3, [pc, #60]	; (800848c <prvAddCurrentTaskToDelayedList+0x94>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3304      	adds	r3, #4
 8008454:	4619      	mov	r1, r3
 8008456:	4610      	mov	r0, r2
 8008458:	f7fe f8b3 	bl	80065c2 <vListInsert>
}
 800845c:	e010      	b.n	8008480 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800845e:	4b0e      	ldr	r3, [pc, #56]	; (8008498 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	4b0a      	ldr	r3, [pc, #40]	; (800848c <prvAddCurrentTaskToDelayedList+0x94>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3304      	adds	r3, #4
 8008468:	4619      	mov	r1, r3
 800846a:	4610      	mov	r0, r2
 800846c:	f7fe f8a9 	bl	80065c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008470:	4b0a      	ldr	r3, [pc, #40]	; (800849c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	429a      	cmp	r2, r3
 8008478:	d202      	bcs.n	8008480 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800847a:	4a08      	ldr	r2, [pc, #32]	; (800849c <prvAddCurrentTaskToDelayedList+0xa4>)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	6013      	str	r3, [r2, #0]
}
 8008480:	bf00      	nop
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	200015c8 	.word	0x200015c8
 800848c:	200010f0 	.word	0x200010f0
 8008490:	200015b0 	.word	0x200015b0
 8008494:	20001580 	.word	0x20001580
 8008498:	2000157c 	.word	0x2000157c
 800849c:	200015e4 	.word	0x200015e4

080084a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08a      	sub	sp, #40	; 0x28
 80084a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80084aa:	f000 fb07 	bl	8008abc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084ae:	4b1c      	ldr	r3, [pc, #112]	; (8008520 <xTimerCreateTimerTask+0x80>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d021      	beq.n	80084fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084be:	1d3a      	adds	r2, r7, #4
 80084c0:	f107 0108 	add.w	r1, r7, #8
 80084c4:	f107 030c 	add.w	r3, r7, #12
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fe f80f 	bl	80064ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	9202      	str	r2, [sp, #8]
 80084d6:	9301      	str	r3, [sp, #4]
 80084d8:	2302      	movs	r3, #2
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	2300      	movs	r3, #0
 80084de:	460a      	mov	r2, r1
 80084e0:	4910      	ldr	r1, [pc, #64]	; (8008524 <xTimerCreateTimerTask+0x84>)
 80084e2:	4811      	ldr	r0, [pc, #68]	; (8008528 <xTimerCreateTimerTask+0x88>)
 80084e4:	f7fe ffd0 	bl	8007488 <xTaskCreateStatic>
 80084e8:	4603      	mov	r3, r0
 80084ea:	4a10      	ldr	r2, [pc, #64]	; (800852c <xTimerCreateTimerTask+0x8c>)
 80084ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084ee:	4b0f      	ldr	r3, [pc, #60]	; (800852c <xTimerCreateTimerTask+0x8c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084f6:	2301      	movs	r3, #1
 80084f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10a      	bne.n	8008516 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	613b      	str	r3, [r7, #16]
}
 8008512:	bf00      	nop
 8008514:	e7fe      	b.n	8008514 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008516:	697b      	ldr	r3, [r7, #20]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	20001620 	.word	0x20001620
 8008524:	08009ff8 	.word	0x08009ff8
 8008528:	08008665 	.word	0x08008665
 800852c:	20001624 	.word	0x20001624

08008530 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b08a      	sub	sp, #40	; 0x28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800853e:	2300      	movs	r3, #0
 8008540:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	623b      	str	r3, [r7, #32]
}
 800855a:	bf00      	nop
 800855c:	e7fe      	b.n	800855c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800855e:	4b1a      	ldr	r3, [pc, #104]	; (80085c8 <xTimerGenericCommand+0x98>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d02a      	beq.n	80085bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b05      	cmp	r3, #5
 8008576:	dc18      	bgt.n	80085aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008578:	f7ff fdb4 	bl	80080e4 <xTaskGetSchedulerState>
 800857c:	4603      	mov	r3, r0
 800857e:	2b02      	cmp	r3, #2
 8008580:	d109      	bne.n	8008596 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008582:	4b11      	ldr	r3, [pc, #68]	; (80085c8 <xTimerGenericCommand+0x98>)
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	f107 0110 	add.w	r1, r7, #16
 800858a:	2300      	movs	r3, #0
 800858c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800858e:	f7fe fa6f 	bl	8006a70 <xQueueGenericSend>
 8008592:	6278      	str	r0, [r7, #36]	; 0x24
 8008594:	e012      	b.n	80085bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008596:	4b0c      	ldr	r3, [pc, #48]	; (80085c8 <xTimerGenericCommand+0x98>)
 8008598:	6818      	ldr	r0, [r3, #0]
 800859a:	f107 0110 	add.w	r1, r7, #16
 800859e:	2300      	movs	r3, #0
 80085a0:	2200      	movs	r2, #0
 80085a2:	f7fe fa65 	bl	8006a70 <xQueueGenericSend>
 80085a6:	6278      	str	r0, [r7, #36]	; 0x24
 80085a8:	e008      	b.n	80085bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085aa:	4b07      	ldr	r3, [pc, #28]	; (80085c8 <xTimerGenericCommand+0x98>)
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	f107 0110 	add.w	r1, r7, #16
 80085b2:	2300      	movs	r3, #0
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	f7fe fb59 	bl	8006c6c <xQueueGenericSendFromISR>
 80085ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3728      	adds	r7, #40	; 0x28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20001620 	.word	0x20001620

080085cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af02      	add	r7, sp, #8
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085d6:	4b22      	ldr	r3, [pc, #136]	; (8008660 <prvProcessExpiredTimer+0x94>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	3304      	adds	r3, #4
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fe f825 	bl	8006634 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085f0:	f003 0304 	and.w	r3, r3, #4
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d022      	beq.n	800863e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	699a      	ldr	r2, [r3, #24]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	18d1      	adds	r1, r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	6978      	ldr	r0, [r7, #20]
 8008606:	f000 f8d1 	bl	80087ac <prvInsertTimerInActiveList>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d01f      	beq.n	8008650 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008610:	2300      	movs	r3, #0
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	2300      	movs	r3, #0
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	2100      	movs	r1, #0
 800861a:	6978      	ldr	r0, [r7, #20]
 800861c:	f7ff ff88 	bl	8008530 <xTimerGenericCommand>
 8008620:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d113      	bne.n	8008650 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	60fb      	str	r3, [r7, #12]
}
 800863a:	bf00      	nop
 800863c:	e7fe      	b.n	800863c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008644:	f023 0301 	bic.w	r3, r3, #1
 8008648:	b2da      	uxtb	r2, r3
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	6a1b      	ldr	r3, [r3, #32]
 8008654:	6978      	ldr	r0, [r7, #20]
 8008656:	4798      	blx	r3
}
 8008658:	bf00      	nop
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	20001618 	.word	0x20001618

08008664 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800866c:	f107 0308 	add.w	r3, r7, #8
 8008670:	4618      	mov	r0, r3
 8008672:	f000 f857 	bl	8008724 <prvGetNextExpireTime>
 8008676:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	4619      	mov	r1, r3
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 f803 	bl	8008688 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008682:	f000 f8d5 	bl	8008830 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008686:	e7f1      	b.n	800866c <prvTimerTask+0x8>

08008688 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008692:	f7ff f935 	bl	8007900 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008696:	f107 0308 	add.w	r3, r7, #8
 800869a:	4618      	mov	r0, r3
 800869c:	f000 f866 	bl	800876c <prvSampleTimeNow>
 80086a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d130      	bne.n	800870a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10a      	bne.n	80086c4 <prvProcessTimerOrBlockTask+0x3c>
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d806      	bhi.n	80086c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086b6:	f7ff f931 	bl	800791c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086ba:	68f9      	ldr	r1, [r7, #12]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f7ff ff85 	bl	80085cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80086c2:	e024      	b.n	800870e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d008      	beq.n	80086dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086ca:	4b13      	ldr	r3, [pc, #76]	; (8008718 <prvProcessTimerOrBlockTask+0x90>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <prvProcessTimerOrBlockTask+0x50>
 80086d4:	2301      	movs	r3, #1
 80086d6:	e000      	b.n	80086da <prvProcessTimerOrBlockTask+0x52>
 80086d8:	2300      	movs	r3, #0
 80086da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086dc:	4b0f      	ldr	r3, [pc, #60]	; (800871c <prvProcessTimerOrBlockTask+0x94>)
 80086de:	6818      	ldr	r0, [r3, #0]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	4619      	mov	r1, r3
 80086ea:	f7fe fe99 	bl	8007420 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086ee:	f7ff f915 	bl	800791c <xTaskResumeAll>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10a      	bne.n	800870e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086f8:	4b09      	ldr	r3, [pc, #36]	; (8008720 <prvProcessTimerOrBlockTask+0x98>)
 80086fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	f3bf 8f6f 	isb	sy
}
 8008708:	e001      	b.n	800870e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800870a:	f7ff f907 	bl	800791c <xTaskResumeAll>
}
 800870e:	bf00      	nop
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	2000161c 	.word	0x2000161c
 800871c:	20001620 	.word	0x20001620
 8008720:	e000ed04 	.word	0xe000ed04

08008724 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800872c:	4b0e      	ldr	r3, [pc, #56]	; (8008768 <prvGetNextExpireTime+0x44>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <prvGetNextExpireTime+0x16>
 8008736:	2201      	movs	r2, #1
 8008738:	e000      	b.n	800873c <prvGetNextExpireTime+0x18>
 800873a:	2200      	movs	r2, #0
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d105      	bne.n	8008754 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008748:	4b07      	ldr	r3, [pc, #28]	; (8008768 <prvGetNextExpireTime+0x44>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	60fb      	str	r3, [r7, #12]
 8008752:	e001      	b.n	8008758 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008758:	68fb      	ldr	r3, [r7, #12]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20001618 	.word	0x20001618

0800876c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008774:	f7ff f970 	bl	8007a58 <xTaskGetTickCount>
 8008778:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800877a:	4b0b      	ldr	r3, [pc, #44]	; (80087a8 <prvSampleTimeNow+0x3c>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	429a      	cmp	r2, r3
 8008782:	d205      	bcs.n	8008790 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008784:	f000 f936 	bl	80089f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	e002      	b.n	8008796 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008796:	4a04      	ldr	r2, [pc, #16]	; (80087a8 <prvSampleTimeNow+0x3c>)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800879c:	68fb      	ldr	r3, [r7, #12]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20001628 	.word	0x20001628

080087ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80087ba:	2300      	movs	r3, #0
 80087bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d812      	bhi.n	80087f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	1ad2      	subs	r2, r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d302      	bcc.n	80087e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087e0:	2301      	movs	r3, #1
 80087e2:	617b      	str	r3, [r7, #20]
 80087e4:	e01b      	b.n	800881e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087e6:	4b10      	ldr	r3, [pc, #64]	; (8008828 <prvInsertTimerInActiveList+0x7c>)
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3304      	adds	r3, #4
 80087ee:	4619      	mov	r1, r3
 80087f0:	4610      	mov	r0, r2
 80087f2:	f7fd fee6 	bl	80065c2 <vListInsert>
 80087f6:	e012      	b.n	800881e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d206      	bcs.n	800880e <prvInsertTimerInActiveList+0x62>
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	d302      	bcc.n	800880e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008808:	2301      	movs	r3, #1
 800880a:	617b      	str	r3, [r7, #20]
 800880c:	e007      	b.n	800881e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800880e:	4b07      	ldr	r3, [pc, #28]	; (800882c <prvInsertTimerInActiveList+0x80>)
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3304      	adds	r3, #4
 8008816:	4619      	mov	r1, r3
 8008818:	4610      	mov	r0, r2
 800881a:	f7fd fed2 	bl	80065c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800881e:	697b      	ldr	r3, [r7, #20]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	2000161c 	.word	0x2000161c
 800882c:	20001618 	.word	0x20001618

08008830 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08e      	sub	sp, #56	; 0x38
 8008834:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008836:	e0ca      	b.n	80089ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	da18      	bge.n	8008870 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800883e:	1d3b      	adds	r3, r7, #4
 8008840:	3304      	adds	r3, #4
 8008842:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10a      	bne.n	8008860 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	61fb      	str	r3, [r7, #28]
}
 800885c:	bf00      	nop
 800885e:	e7fe      	b.n	800885e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008866:	6850      	ldr	r0, [r2, #4]
 8008868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800886a:	6892      	ldr	r2, [r2, #8]
 800886c:	4611      	mov	r1, r2
 800886e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	f2c0 80ab 	blt.w	80089ce <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d004      	beq.n	800888e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008886:	3304      	adds	r3, #4
 8008888:	4618      	mov	r0, r3
 800888a:	f7fd fed3 	bl	8006634 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800888e:	463b      	mov	r3, r7
 8008890:	4618      	mov	r0, r3
 8008892:	f7ff ff6b 	bl	800876c <prvSampleTimeNow>
 8008896:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b09      	cmp	r3, #9
 800889c:	f200 8096 	bhi.w	80089cc <prvProcessReceivedCommands+0x19c>
 80088a0:	a201      	add	r2, pc, #4	; (adr r2, 80088a8 <prvProcessReceivedCommands+0x78>)
 80088a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a6:	bf00      	nop
 80088a8:	080088d1 	.word	0x080088d1
 80088ac:	080088d1 	.word	0x080088d1
 80088b0:	080088d1 	.word	0x080088d1
 80088b4:	08008945 	.word	0x08008945
 80088b8:	08008959 	.word	0x08008959
 80088bc:	080089a3 	.word	0x080089a3
 80088c0:	080088d1 	.word	0x080088d1
 80088c4:	080088d1 	.word	0x080088d1
 80088c8:	08008945 	.word	0x08008945
 80088cc:	08008959 	.word	0x08008959
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088d6:	f043 0301 	orr.w	r3, r3, #1
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	18d1      	adds	r1, r2, r3
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088f0:	f7ff ff5c 	bl	80087ac <prvInsertTimerInActiveList>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d069      	beq.n	80089ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008900:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008908:	f003 0304 	and.w	r3, r3, #4
 800890c:	2b00      	cmp	r3, #0
 800890e:	d05e      	beq.n	80089ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	441a      	add	r2, r3
 8008918:	2300      	movs	r3, #0
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	2300      	movs	r3, #0
 800891e:	2100      	movs	r1, #0
 8008920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008922:	f7ff fe05 	bl	8008530 <xTimerGenericCommand>
 8008926:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d14f      	bne.n	80089ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	61bb      	str	r3, [r7, #24]
}
 8008940:	bf00      	nop
 8008942:	e7fe      	b.n	8008942 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800894a:	f023 0301 	bic.w	r3, r3, #1
 800894e:	b2da      	uxtb	r2, r3
 8008950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008956:	e03a      	b.n	80089ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800895e:	f043 0301 	orr.w	r3, r3, #1
 8008962:	b2da      	uxtb	r2, r3
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10a      	bne.n	800898e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	617b      	str	r3, [r7, #20]
}
 800898a:	bf00      	nop
 800898c:	e7fe      	b.n	800898c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800898e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008990:	699a      	ldr	r2, [r3, #24]
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	18d1      	adds	r1, r2, r3
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800899a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800899c:	f7ff ff06 	bl	80087ac <prvInsertTimerInActiveList>
					break;
 80089a0:	e015      	b.n	80089ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80089a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d103      	bne.n	80089b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80089b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089b2:	f000 fbdd 	bl	8009170 <vPortFree>
 80089b6:	e00a      	b.n	80089ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089be:	f023 0301 	bic.w	r3, r3, #1
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80089ca:	e000      	b.n	80089ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80089cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089ce:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <prvProcessReceivedCommands+0x1c0>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	1d39      	adds	r1, r7, #4
 80089d4:	2200      	movs	r2, #0
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe f9e4 	bl	8006da4 <xQueueReceive>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f47f af2a 	bne.w	8008838 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
 80089e8:	3730      	adds	r7, #48	; 0x30
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20001620 	.word	0x20001620

080089f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089fa:	e048      	b.n	8008a8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089fc:	4b2d      	ldr	r3, [pc, #180]	; (8008ab4 <prvSwitchTimerLists+0xc0>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a06:	4b2b      	ldr	r3, [pc, #172]	; (8008ab4 <prvSwitchTimerLists+0xc0>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3304      	adds	r3, #4
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7fd fe0d 	bl	8006634 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d02e      	beq.n	8008a8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	4413      	add	r3, r2
 8008a38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d90e      	bls.n	8008a60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a4e:	4b19      	ldr	r3, [pc, #100]	; (8008ab4 <prvSwitchTimerLists+0xc0>)
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3304      	adds	r3, #4
 8008a56:	4619      	mov	r1, r3
 8008a58:	4610      	mov	r0, r2
 8008a5a:	f7fd fdb2 	bl	80065c2 <vListInsert>
 8008a5e:	e016      	b.n	8008a8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a60:	2300      	movs	r3, #0
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	2300      	movs	r3, #0
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f7ff fd60 	bl	8008530 <xTimerGenericCommand>
 8008a70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10a      	bne.n	8008a8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	603b      	str	r3, [r7, #0]
}
 8008a8a:	bf00      	nop
 8008a8c:	e7fe      	b.n	8008a8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a8e:	4b09      	ldr	r3, [pc, #36]	; (8008ab4 <prvSwitchTimerLists+0xc0>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1b1      	bne.n	80089fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a98:	4b06      	ldr	r3, [pc, #24]	; (8008ab4 <prvSwitchTimerLists+0xc0>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a9e:	4b06      	ldr	r3, [pc, #24]	; (8008ab8 <prvSwitchTimerLists+0xc4>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a04      	ldr	r2, [pc, #16]	; (8008ab4 <prvSwitchTimerLists+0xc0>)
 8008aa4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008aa6:	4a04      	ldr	r2, [pc, #16]	; (8008ab8 <prvSwitchTimerLists+0xc4>)
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	6013      	str	r3, [r2, #0]
}
 8008aac:	bf00      	nop
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	20001618 	.word	0x20001618
 8008ab8:	2000161c 	.word	0x2000161c

08008abc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ac2:	f000 f967 	bl	8008d94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ac6:	4b15      	ldr	r3, [pc, #84]	; (8008b1c <prvCheckForValidListAndQueue+0x60>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d120      	bne.n	8008b10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ace:	4814      	ldr	r0, [pc, #80]	; (8008b20 <prvCheckForValidListAndQueue+0x64>)
 8008ad0:	f7fd fd26 	bl	8006520 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008ad4:	4813      	ldr	r0, [pc, #76]	; (8008b24 <prvCheckForValidListAndQueue+0x68>)
 8008ad6:	f7fd fd23 	bl	8006520 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008ada:	4b13      	ldr	r3, [pc, #76]	; (8008b28 <prvCheckForValidListAndQueue+0x6c>)
 8008adc:	4a10      	ldr	r2, [pc, #64]	; (8008b20 <prvCheckForValidListAndQueue+0x64>)
 8008ade:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ae0:	4b12      	ldr	r3, [pc, #72]	; (8008b2c <prvCheckForValidListAndQueue+0x70>)
 8008ae2:	4a10      	ldr	r2, [pc, #64]	; (8008b24 <prvCheckForValidListAndQueue+0x68>)
 8008ae4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	4b11      	ldr	r3, [pc, #68]	; (8008b30 <prvCheckForValidListAndQueue+0x74>)
 8008aec:	4a11      	ldr	r2, [pc, #68]	; (8008b34 <prvCheckForValidListAndQueue+0x78>)
 8008aee:	2110      	movs	r1, #16
 8008af0:	200a      	movs	r0, #10
 8008af2:	f7fd fe31 	bl	8006758 <xQueueGenericCreateStatic>
 8008af6:	4603      	mov	r3, r0
 8008af8:	4a08      	ldr	r2, [pc, #32]	; (8008b1c <prvCheckForValidListAndQueue+0x60>)
 8008afa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008afc:	4b07      	ldr	r3, [pc, #28]	; (8008b1c <prvCheckForValidListAndQueue+0x60>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d005      	beq.n	8008b10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b04:	4b05      	ldr	r3, [pc, #20]	; (8008b1c <prvCheckForValidListAndQueue+0x60>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	490b      	ldr	r1, [pc, #44]	; (8008b38 <prvCheckForValidListAndQueue+0x7c>)
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe fc5e 	bl	80073cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b10:	f000 f970 	bl	8008df4 <vPortExitCritical>
}
 8008b14:	bf00      	nop
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20001620 	.word	0x20001620
 8008b20:	200015f0 	.word	0x200015f0
 8008b24:	20001604 	.word	0x20001604
 8008b28:	20001618 	.word	0x20001618
 8008b2c:	2000161c 	.word	0x2000161c
 8008b30:	200016cc 	.word	0x200016cc
 8008b34:	2000162c 	.word	0x2000162c
 8008b38:	0800a000 	.word	0x0800a000

08008b3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	3b04      	subs	r3, #4
 8008b4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3b04      	subs	r3, #4
 8008b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	f023 0201 	bic.w	r2, r3, #1
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3b04      	subs	r3, #4
 8008b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b6c:	4a0c      	ldr	r2, [pc, #48]	; (8008ba0 <pxPortInitialiseStack+0x64>)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3b14      	subs	r3, #20
 8008b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3b04      	subs	r3, #4
 8008b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f06f 0202 	mvn.w	r2, #2
 8008b8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3b20      	subs	r3, #32
 8008b90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b92:	68fb      	ldr	r3, [r7, #12]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	08008ba5 	.word	0x08008ba5

08008ba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008bae:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <prvTaskExitError+0x54>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bb6:	d00a      	beq.n	8008bce <prvTaskExitError+0x2a>
	__asm volatile
 8008bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	60fb      	str	r3, [r7, #12]
}
 8008bca:	bf00      	nop
 8008bcc:	e7fe      	b.n	8008bcc <prvTaskExitError+0x28>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	60bb      	str	r3, [r7, #8]
}
 8008be0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008be2:	bf00      	nop
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d0fc      	beq.n	8008be4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bea:	bf00      	nop
 8008bec:	bf00      	nop
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	20000024 	.word	0x20000024
 8008bfc:	00000000 	.word	0x00000000

08008c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c00:	4b07      	ldr	r3, [pc, #28]	; (8008c20 <pxCurrentTCBConst2>)
 8008c02:	6819      	ldr	r1, [r3, #0]
 8008c04:	6808      	ldr	r0, [r1, #0]
 8008c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0a:	f380 8809 	msr	PSP, r0
 8008c0e:	f3bf 8f6f 	isb	sy
 8008c12:	f04f 0000 	mov.w	r0, #0
 8008c16:	f380 8811 	msr	BASEPRI, r0
 8008c1a:	4770      	bx	lr
 8008c1c:	f3af 8000 	nop.w

08008c20 <pxCurrentTCBConst2>:
 8008c20:	200010f0 	.word	0x200010f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop

08008c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c28:	4808      	ldr	r0, [pc, #32]	; (8008c4c <prvPortStartFirstTask+0x24>)
 8008c2a:	6800      	ldr	r0, [r0, #0]
 8008c2c:	6800      	ldr	r0, [r0, #0]
 8008c2e:	f380 8808 	msr	MSP, r0
 8008c32:	f04f 0000 	mov.w	r0, #0
 8008c36:	f380 8814 	msr	CONTROL, r0
 8008c3a:	b662      	cpsie	i
 8008c3c:	b661      	cpsie	f
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	df00      	svc	0
 8008c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c4a:	bf00      	nop
 8008c4c:	e000ed08 	.word	0xe000ed08

08008c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c56:	4b46      	ldr	r3, [pc, #280]	; (8008d70 <xPortStartScheduler+0x120>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a46      	ldr	r2, [pc, #280]	; (8008d74 <xPortStartScheduler+0x124>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d10a      	bne.n	8008c76 <xPortStartScheduler+0x26>
	__asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	613b      	str	r3, [r7, #16]
}
 8008c72:	bf00      	nop
 8008c74:	e7fe      	b.n	8008c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c76:	4b3e      	ldr	r3, [pc, #248]	; (8008d70 <xPortStartScheduler+0x120>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a3f      	ldr	r2, [pc, #252]	; (8008d78 <xPortStartScheduler+0x128>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d10a      	bne.n	8008c96 <xPortStartScheduler+0x46>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	60fb      	str	r3, [r7, #12]
}
 8008c92:	bf00      	nop
 8008c94:	e7fe      	b.n	8008c94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c96:	4b39      	ldr	r3, [pc, #228]	; (8008d7c <xPortStartScheduler+0x12c>)
 8008c98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	22ff      	movs	r2, #255	; 0xff
 8008ca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	4b31      	ldr	r3, [pc, #196]	; (8008d80 <xPortStartScheduler+0x130>)
 8008cbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008cbe:	4b31      	ldr	r3, [pc, #196]	; (8008d84 <xPortStartScheduler+0x134>)
 8008cc0:	2207      	movs	r2, #7
 8008cc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cc4:	e009      	b.n	8008cda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008cc6:	4b2f      	ldr	r3, [pc, #188]	; (8008d84 <xPortStartScheduler+0x134>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	4a2d      	ldr	r2, [pc, #180]	; (8008d84 <xPortStartScheduler+0x134>)
 8008cce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cda:	78fb      	ldrb	r3, [r7, #3]
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce2:	2b80      	cmp	r3, #128	; 0x80
 8008ce4:	d0ef      	beq.n	8008cc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ce6:	4b27      	ldr	r3, [pc, #156]	; (8008d84 <xPortStartScheduler+0x134>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f1c3 0307 	rsb	r3, r3, #7
 8008cee:	2b04      	cmp	r3, #4
 8008cf0:	d00a      	beq.n	8008d08 <xPortStartScheduler+0xb8>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	60bb      	str	r3, [r7, #8]
}
 8008d04:	bf00      	nop
 8008d06:	e7fe      	b.n	8008d06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d08:	4b1e      	ldr	r3, [pc, #120]	; (8008d84 <xPortStartScheduler+0x134>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	021b      	lsls	r3, r3, #8
 8008d0e:	4a1d      	ldr	r2, [pc, #116]	; (8008d84 <xPortStartScheduler+0x134>)
 8008d10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d12:	4b1c      	ldr	r3, [pc, #112]	; (8008d84 <xPortStartScheduler+0x134>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d1a:	4a1a      	ldr	r2, [pc, #104]	; (8008d84 <xPortStartScheduler+0x134>)
 8008d1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d26:	4b18      	ldr	r3, [pc, #96]	; (8008d88 <xPortStartScheduler+0x138>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a17      	ldr	r2, [pc, #92]	; (8008d88 <xPortStartScheduler+0x138>)
 8008d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d32:	4b15      	ldr	r3, [pc, #84]	; (8008d88 <xPortStartScheduler+0x138>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a14      	ldr	r2, [pc, #80]	; (8008d88 <xPortStartScheduler+0x138>)
 8008d38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d3e:	f000 f8dd 	bl	8008efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d42:	4b12      	ldr	r3, [pc, #72]	; (8008d8c <xPortStartScheduler+0x13c>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d48:	f000 f8fc 	bl	8008f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d4c:	4b10      	ldr	r3, [pc, #64]	; (8008d90 <xPortStartScheduler+0x140>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a0f      	ldr	r2, [pc, #60]	; (8008d90 <xPortStartScheduler+0x140>)
 8008d52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d58:	f7ff ff66 	bl	8008c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d5c:	f7fe ff46 	bl	8007bec <vTaskSwitchContext>
	prvTaskExitError();
 8008d60:	f7ff ff20 	bl	8008ba4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	e000ed00 	.word	0xe000ed00
 8008d74:	410fc271 	.word	0x410fc271
 8008d78:	410fc270 	.word	0x410fc270
 8008d7c:	e000e400 	.word	0xe000e400
 8008d80:	2000171c 	.word	0x2000171c
 8008d84:	20001720 	.word	0x20001720
 8008d88:	e000ed20 	.word	0xe000ed20
 8008d8c:	20000024 	.word	0x20000024
 8008d90:	e000ef34 	.word	0xe000ef34

08008d94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	607b      	str	r3, [r7, #4]
}
 8008dac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008dae:	4b0f      	ldr	r3, [pc, #60]	; (8008dec <vPortEnterCritical+0x58>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3301      	adds	r3, #1
 8008db4:	4a0d      	ldr	r2, [pc, #52]	; (8008dec <vPortEnterCritical+0x58>)
 8008db6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008db8:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <vPortEnterCritical+0x58>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d10f      	bne.n	8008de0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008dc0:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <vPortEnterCritical+0x5c>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00a      	beq.n	8008de0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	603b      	str	r3, [r7, #0]
}
 8008ddc:	bf00      	nop
 8008dde:	e7fe      	b.n	8008dde <vPortEnterCritical+0x4a>
	}
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	20000024 	.word	0x20000024
 8008df0:	e000ed04 	.word	0xe000ed04

08008df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dfa:	4b12      	ldr	r3, [pc, #72]	; (8008e44 <vPortExitCritical+0x50>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10a      	bne.n	8008e18 <vPortExitCritical+0x24>
	__asm volatile
 8008e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e06:	f383 8811 	msr	BASEPRI, r3
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	607b      	str	r3, [r7, #4]
}
 8008e14:	bf00      	nop
 8008e16:	e7fe      	b.n	8008e16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e18:	4b0a      	ldr	r3, [pc, #40]	; (8008e44 <vPortExitCritical+0x50>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	4a09      	ldr	r2, [pc, #36]	; (8008e44 <vPortExitCritical+0x50>)
 8008e20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e22:	4b08      	ldr	r3, [pc, #32]	; (8008e44 <vPortExitCritical+0x50>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d105      	bne.n	8008e36 <vPortExitCritical+0x42>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	f383 8811 	msr	BASEPRI, r3
}
 8008e34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e36:	bf00      	nop
 8008e38:	370c      	adds	r7, #12
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	20000024 	.word	0x20000024
	...

08008e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e50:	f3ef 8009 	mrs	r0, PSP
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	4b15      	ldr	r3, [pc, #84]	; (8008eb0 <pxCurrentTCBConst>)
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	f01e 0f10 	tst.w	lr, #16
 8008e60:	bf08      	it	eq
 8008e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6a:	6010      	str	r0, [r2, #0]
 8008e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e74:	f380 8811 	msr	BASEPRI, r0
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f7fe feb4 	bl	8007bec <vTaskSwitchContext>
 8008e84:	f04f 0000 	mov.w	r0, #0
 8008e88:	f380 8811 	msr	BASEPRI, r0
 8008e8c:	bc09      	pop	{r0, r3}
 8008e8e:	6819      	ldr	r1, [r3, #0]
 8008e90:	6808      	ldr	r0, [r1, #0]
 8008e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e96:	f01e 0f10 	tst.w	lr, #16
 8008e9a:	bf08      	it	eq
 8008e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ea0:	f380 8809 	msr	PSP, r0
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	f3af 8000 	nop.w

08008eb0 <pxCurrentTCBConst>:
 8008eb0:	200010f0 	.word	0x200010f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop

08008eb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	607b      	str	r3, [r7, #4]
}
 8008ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ed2:	f7fe fdd1 	bl	8007a78 <xTaskIncrementTick>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d003      	beq.n	8008ee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008edc:	4b06      	ldr	r3, [pc, #24]	; (8008ef8 <xPortSysTickHandler+0x40>)
 8008ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee2:	601a      	str	r2, [r3, #0]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	f383 8811 	msr	BASEPRI, r3
}
 8008eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ef0:	bf00      	nop
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	e000ed04 	.word	0xe000ed04

08008efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f00:	4b0b      	ldr	r3, [pc, #44]	; (8008f30 <vPortSetupTimerInterrupt+0x34>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f06:	4b0b      	ldr	r3, [pc, #44]	; (8008f34 <vPortSetupTimerInterrupt+0x38>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f0c:	4b0a      	ldr	r3, [pc, #40]	; (8008f38 <vPortSetupTimerInterrupt+0x3c>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a0a      	ldr	r2, [pc, #40]	; (8008f3c <vPortSetupTimerInterrupt+0x40>)
 8008f12:	fba2 2303 	umull	r2, r3, r2, r3
 8008f16:	099b      	lsrs	r3, r3, #6
 8008f18:	4a09      	ldr	r2, [pc, #36]	; (8008f40 <vPortSetupTimerInterrupt+0x44>)
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f1e:	4b04      	ldr	r3, [pc, #16]	; (8008f30 <vPortSetupTimerInterrupt+0x34>)
 8008f20:	2207      	movs	r2, #7
 8008f22:	601a      	str	r2, [r3, #0]
}
 8008f24:	bf00      	nop
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	e000e010 	.word	0xe000e010
 8008f34:	e000e018 	.word	0xe000e018
 8008f38:	20000018 	.word	0x20000018
 8008f3c:	10624dd3 	.word	0x10624dd3
 8008f40:	e000e014 	.word	0xe000e014

08008f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f54 <vPortEnableVFP+0x10>
 8008f48:	6801      	ldr	r1, [r0, #0]
 8008f4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f4e:	6001      	str	r1, [r0, #0]
 8008f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f52:	bf00      	nop
 8008f54:	e000ed88 	.word	0xe000ed88

08008f58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f5e:	f3ef 8305 	mrs	r3, IPSR
 8008f62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2b0f      	cmp	r3, #15
 8008f68:	d914      	bls.n	8008f94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f6a:	4a17      	ldr	r2, [pc, #92]	; (8008fc8 <vPortValidateInterruptPriority+0x70>)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	4413      	add	r3, r2
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f74:	4b15      	ldr	r3, [pc, #84]	; (8008fcc <vPortValidateInterruptPriority+0x74>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	7afa      	ldrb	r2, [r7, #11]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d20a      	bcs.n	8008f94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	607b      	str	r3, [r7, #4]
}
 8008f90:	bf00      	nop
 8008f92:	e7fe      	b.n	8008f92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f94:	4b0e      	ldr	r3, [pc, #56]	; (8008fd0 <vPortValidateInterruptPriority+0x78>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f9c:	4b0d      	ldr	r3, [pc, #52]	; (8008fd4 <vPortValidateInterruptPriority+0x7c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d90a      	bls.n	8008fba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	603b      	str	r3, [r7, #0]
}
 8008fb6:	bf00      	nop
 8008fb8:	e7fe      	b.n	8008fb8 <vPortValidateInterruptPriority+0x60>
	}
 8008fba:	bf00      	nop
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	e000e3f0 	.word	0xe000e3f0
 8008fcc:	2000171c 	.word	0x2000171c
 8008fd0:	e000ed0c 	.word	0xe000ed0c
 8008fd4:	20001720 	.word	0x20001720

08008fd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08a      	sub	sp, #40	; 0x28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008fe4:	f7fe fc8c 	bl	8007900 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008fe8:	4b5b      	ldr	r3, [pc, #364]	; (8009158 <pvPortMalloc+0x180>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ff0:	f000 f920 	bl	8009234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ff4:	4b59      	ldr	r3, [pc, #356]	; (800915c <pvPortMalloc+0x184>)
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f040 8093 	bne.w	8009128 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01d      	beq.n	8009044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009008:	2208      	movs	r2, #8
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4413      	add	r3, r2
 800900e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f003 0307 	and.w	r3, r3, #7
 8009016:	2b00      	cmp	r3, #0
 8009018:	d014      	beq.n	8009044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f023 0307 	bic.w	r3, r3, #7
 8009020:	3308      	adds	r3, #8
 8009022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f003 0307 	and.w	r3, r3, #7
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00a      	beq.n	8009044 <pvPortMalloc+0x6c>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	617b      	str	r3, [r7, #20]
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d06e      	beq.n	8009128 <pvPortMalloc+0x150>
 800904a:	4b45      	ldr	r3, [pc, #276]	; (8009160 <pvPortMalloc+0x188>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	429a      	cmp	r2, r3
 8009052:	d869      	bhi.n	8009128 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009054:	4b43      	ldr	r3, [pc, #268]	; (8009164 <pvPortMalloc+0x18c>)
 8009056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009058:	4b42      	ldr	r3, [pc, #264]	; (8009164 <pvPortMalloc+0x18c>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800905e:	e004      	b.n	800906a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	429a      	cmp	r2, r3
 8009072:	d903      	bls.n	800907c <pvPortMalloc+0xa4>
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1f1      	bne.n	8009060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800907c:	4b36      	ldr	r3, [pc, #216]	; (8009158 <pvPortMalloc+0x180>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009082:	429a      	cmp	r2, r3
 8009084:	d050      	beq.n	8009128 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2208      	movs	r2, #8
 800908c:	4413      	add	r3, r2
 800908e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	1ad2      	subs	r2, r2, r3
 80090a0:	2308      	movs	r3, #8
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d91f      	bls.n	80090e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4413      	add	r3, r2
 80090ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	f003 0307 	and.w	r3, r3, #7
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00a      	beq.n	80090d0 <pvPortMalloc+0xf8>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	613b      	str	r3, [r7, #16]
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	685a      	ldr	r2, [r3, #4]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	1ad2      	subs	r2, r2, r3
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090e2:	69b8      	ldr	r0, [r7, #24]
 80090e4:	f000 f908 	bl	80092f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090e8:	4b1d      	ldr	r3, [pc, #116]	; (8009160 <pvPortMalloc+0x188>)
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	4a1b      	ldr	r2, [pc, #108]	; (8009160 <pvPortMalloc+0x188>)
 80090f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090f6:	4b1a      	ldr	r3, [pc, #104]	; (8009160 <pvPortMalloc+0x188>)
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	4b1b      	ldr	r3, [pc, #108]	; (8009168 <pvPortMalloc+0x190>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d203      	bcs.n	800910a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009102:	4b17      	ldr	r3, [pc, #92]	; (8009160 <pvPortMalloc+0x188>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a18      	ldr	r2, [pc, #96]	; (8009168 <pvPortMalloc+0x190>)
 8009108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	685a      	ldr	r2, [r3, #4]
 800910e:	4b13      	ldr	r3, [pc, #76]	; (800915c <pvPortMalloc+0x184>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	431a      	orrs	r2, r3
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	2200      	movs	r2, #0
 800911c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800911e:	4b13      	ldr	r3, [pc, #76]	; (800916c <pvPortMalloc+0x194>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3301      	adds	r3, #1
 8009124:	4a11      	ldr	r2, [pc, #68]	; (800916c <pvPortMalloc+0x194>)
 8009126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009128:	f7fe fbf8 	bl	800791c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	f003 0307 	and.w	r3, r3, #7
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00a      	beq.n	800914c <pvPortMalloc+0x174>
	__asm volatile
 8009136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	60fb      	str	r3, [r7, #12]
}
 8009148:	bf00      	nop
 800914a:	e7fe      	b.n	800914a <pvPortMalloc+0x172>
	return pvReturn;
 800914c:	69fb      	ldr	r3, [r7, #28]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3728      	adds	r7, #40	; 0x28
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	20007104 	.word	0x20007104
 800915c:	20007118 	.word	0x20007118
 8009160:	20007108 	.word	0x20007108
 8009164:	200070fc 	.word	0x200070fc
 8009168:	2000710c 	.word	0x2000710c
 800916c:	20007110 	.word	0x20007110

08009170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d04d      	beq.n	800921e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009182:	2308      	movs	r3, #8
 8009184:	425b      	negs	r3, r3
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	4413      	add	r3, r2
 800918a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	4b24      	ldr	r3, [pc, #144]	; (8009228 <vPortFree+0xb8>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4013      	ands	r3, r2
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10a      	bne.n	80091b4 <vPortFree+0x44>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	60fb      	str	r3, [r7, #12]
}
 80091b0:	bf00      	nop
 80091b2:	e7fe      	b.n	80091b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00a      	beq.n	80091d2 <vPortFree+0x62>
	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	60bb      	str	r3, [r7, #8]
}
 80091ce:	bf00      	nop
 80091d0:	e7fe      	b.n	80091d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	4b14      	ldr	r3, [pc, #80]	; (8009228 <vPortFree+0xb8>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4013      	ands	r3, r2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d01e      	beq.n	800921e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d11a      	bne.n	800921e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	685a      	ldr	r2, [r3, #4]
 80091ec:	4b0e      	ldr	r3, [pc, #56]	; (8009228 <vPortFree+0xb8>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	43db      	mvns	r3, r3
 80091f2:	401a      	ands	r2, r3
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80091f8:	f7fe fb82 	bl	8007900 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	4b0a      	ldr	r3, [pc, #40]	; (800922c <vPortFree+0xbc>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4413      	add	r3, r2
 8009206:	4a09      	ldr	r2, [pc, #36]	; (800922c <vPortFree+0xbc>)
 8009208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800920a:	6938      	ldr	r0, [r7, #16]
 800920c:	f000 f874 	bl	80092f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009210:	4b07      	ldr	r3, [pc, #28]	; (8009230 <vPortFree+0xc0>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3301      	adds	r3, #1
 8009216:	4a06      	ldr	r2, [pc, #24]	; (8009230 <vPortFree+0xc0>)
 8009218:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800921a:	f7fe fb7f 	bl	800791c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800921e:	bf00      	nop
 8009220:	3718      	adds	r7, #24
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	20007118 	.word	0x20007118
 800922c:	20007108 	.word	0x20007108
 8009230:	20007114 	.word	0x20007114

08009234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800923a:	f645 13d8 	movw	r3, #23000	; 0x59d8
 800923e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009240:	4b27      	ldr	r3, [pc, #156]	; (80092e0 <prvHeapInit+0xac>)
 8009242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f003 0307 	and.w	r3, r3, #7
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00c      	beq.n	8009268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3307      	adds	r3, #7
 8009252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f023 0307 	bic.w	r3, r3, #7
 800925a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	4a1f      	ldr	r2, [pc, #124]	; (80092e0 <prvHeapInit+0xac>)
 8009264:	4413      	add	r3, r2
 8009266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800926c:	4a1d      	ldr	r2, [pc, #116]	; (80092e4 <prvHeapInit+0xb0>)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009272:	4b1c      	ldr	r3, [pc, #112]	; (80092e4 <prvHeapInit+0xb0>)
 8009274:	2200      	movs	r2, #0
 8009276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	4413      	add	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009280:	2208      	movs	r2, #8
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	1a9b      	subs	r3, r3, r2
 8009286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f023 0307 	bic.w	r3, r3, #7
 800928e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	4a15      	ldr	r2, [pc, #84]	; (80092e8 <prvHeapInit+0xb4>)
 8009294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009296:	4b14      	ldr	r3, [pc, #80]	; (80092e8 <prvHeapInit+0xb4>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2200      	movs	r2, #0
 800929c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800929e:	4b12      	ldr	r3, [pc, #72]	; (80092e8 <prvHeapInit+0xb4>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	1ad2      	subs	r2, r2, r3
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092b4:	4b0c      	ldr	r3, [pc, #48]	; (80092e8 <prvHeapInit+0xb4>)
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	4a0a      	ldr	r2, [pc, #40]	; (80092ec <prvHeapInit+0xb8>)
 80092c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	4a09      	ldr	r2, [pc, #36]	; (80092f0 <prvHeapInit+0xbc>)
 80092ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092cc:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <prvHeapInit+0xc0>)
 80092ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092d2:	601a      	str	r2, [r3, #0]
}
 80092d4:	bf00      	nop
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	20001724 	.word	0x20001724
 80092e4:	200070fc 	.word	0x200070fc
 80092e8:	20007104 	.word	0x20007104
 80092ec:	2000710c 	.word	0x2000710c
 80092f0:	20007108 	.word	0x20007108
 80092f4:	20007118 	.word	0x20007118

080092f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009300:	4b28      	ldr	r3, [pc, #160]	; (80093a4 <prvInsertBlockIntoFreeList+0xac>)
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	e002      	b.n	800930c <prvInsertBlockIntoFreeList+0x14>
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	429a      	cmp	r2, r3
 8009314:	d8f7      	bhi.n	8009306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	4413      	add	r3, r2
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	429a      	cmp	r2, r3
 8009326:	d108      	bne.n	800933a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	441a      	add	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	441a      	add	r2, r3
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	429a      	cmp	r2, r3
 800934c:	d118      	bne.n	8009380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	4b15      	ldr	r3, [pc, #84]	; (80093a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	429a      	cmp	r2, r3
 8009358:	d00d      	beq.n	8009376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	441a      	add	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	e008      	b.n	8009388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009376:	4b0c      	ldr	r3, [pc, #48]	; (80093a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	601a      	str	r2, [r3, #0]
 800937e:	e003      	b.n	8009388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	429a      	cmp	r2, r3
 800938e:	d002      	beq.n	8009396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009396:	bf00      	nop
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	200070fc 	.word	0x200070fc
 80093a8:	20007104 	.word	0x20007104

080093ac <malloc>:
 80093ac:	4b02      	ldr	r3, [pc, #8]	; (80093b8 <malloc+0xc>)
 80093ae:	4601      	mov	r1, r0
 80093b0:	6818      	ldr	r0, [r3, #0]
 80093b2:	f000 b823 	b.w	80093fc <_malloc_r>
 80093b6:	bf00      	nop
 80093b8:	20000074 	.word	0x20000074

080093bc <sbrk_aligned>:
 80093bc:	b570      	push	{r4, r5, r6, lr}
 80093be:	4e0e      	ldr	r6, [pc, #56]	; (80093f8 <sbrk_aligned+0x3c>)
 80093c0:	460c      	mov	r4, r1
 80093c2:	6831      	ldr	r1, [r6, #0]
 80093c4:	4605      	mov	r5, r0
 80093c6:	b911      	cbnz	r1, 80093ce <sbrk_aligned+0x12>
 80093c8:	f000 f8cc 	bl	8009564 <_sbrk_r>
 80093cc:	6030      	str	r0, [r6, #0]
 80093ce:	4621      	mov	r1, r4
 80093d0:	4628      	mov	r0, r5
 80093d2:	f000 f8c7 	bl	8009564 <_sbrk_r>
 80093d6:	1c43      	adds	r3, r0, #1
 80093d8:	d00a      	beq.n	80093f0 <sbrk_aligned+0x34>
 80093da:	1cc4      	adds	r4, r0, #3
 80093dc:	f024 0403 	bic.w	r4, r4, #3
 80093e0:	42a0      	cmp	r0, r4
 80093e2:	d007      	beq.n	80093f4 <sbrk_aligned+0x38>
 80093e4:	1a21      	subs	r1, r4, r0
 80093e6:	4628      	mov	r0, r5
 80093e8:	f000 f8bc 	bl	8009564 <_sbrk_r>
 80093ec:	3001      	adds	r0, #1
 80093ee:	d101      	bne.n	80093f4 <sbrk_aligned+0x38>
 80093f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80093f4:	4620      	mov	r0, r4
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
 80093f8:	20007120 	.word	0x20007120

080093fc <_malloc_r>:
 80093fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009400:	1ccd      	adds	r5, r1, #3
 8009402:	f025 0503 	bic.w	r5, r5, #3
 8009406:	3508      	adds	r5, #8
 8009408:	2d0c      	cmp	r5, #12
 800940a:	bf38      	it	cc
 800940c:	250c      	movcc	r5, #12
 800940e:	2d00      	cmp	r5, #0
 8009410:	4607      	mov	r7, r0
 8009412:	db01      	blt.n	8009418 <_malloc_r+0x1c>
 8009414:	42a9      	cmp	r1, r5
 8009416:	d905      	bls.n	8009424 <_malloc_r+0x28>
 8009418:	230c      	movs	r3, #12
 800941a:	603b      	str	r3, [r7, #0]
 800941c:	2600      	movs	r6, #0
 800941e:	4630      	mov	r0, r6
 8009420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009424:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80094f8 <_malloc_r+0xfc>
 8009428:	f000 f868 	bl	80094fc <__malloc_lock>
 800942c:	f8d8 3000 	ldr.w	r3, [r8]
 8009430:	461c      	mov	r4, r3
 8009432:	bb5c      	cbnz	r4, 800948c <_malloc_r+0x90>
 8009434:	4629      	mov	r1, r5
 8009436:	4638      	mov	r0, r7
 8009438:	f7ff ffc0 	bl	80093bc <sbrk_aligned>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	4604      	mov	r4, r0
 8009440:	d155      	bne.n	80094ee <_malloc_r+0xf2>
 8009442:	f8d8 4000 	ldr.w	r4, [r8]
 8009446:	4626      	mov	r6, r4
 8009448:	2e00      	cmp	r6, #0
 800944a:	d145      	bne.n	80094d8 <_malloc_r+0xdc>
 800944c:	2c00      	cmp	r4, #0
 800944e:	d048      	beq.n	80094e2 <_malloc_r+0xe6>
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	4631      	mov	r1, r6
 8009454:	4638      	mov	r0, r7
 8009456:	eb04 0903 	add.w	r9, r4, r3
 800945a:	f000 f883 	bl	8009564 <_sbrk_r>
 800945e:	4581      	cmp	r9, r0
 8009460:	d13f      	bne.n	80094e2 <_malloc_r+0xe6>
 8009462:	6821      	ldr	r1, [r4, #0]
 8009464:	1a6d      	subs	r5, r5, r1
 8009466:	4629      	mov	r1, r5
 8009468:	4638      	mov	r0, r7
 800946a:	f7ff ffa7 	bl	80093bc <sbrk_aligned>
 800946e:	3001      	adds	r0, #1
 8009470:	d037      	beq.n	80094e2 <_malloc_r+0xe6>
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	442b      	add	r3, r5
 8009476:	6023      	str	r3, [r4, #0]
 8009478:	f8d8 3000 	ldr.w	r3, [r8]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d038      	beq.n	80094f2 <_malloc_r+0xf6>
 8009480:	685a      	ldr	r2, [r3, #4]
 8009482:	42a2      	cmp	r2, r4
 8009484:	d12b      	bne.n	80094de <_malloc_r+0xe2>
 8009486:	2200      	movs	r2, #0
 8009488:	605a      	str	r2, [r3, #4]
 800948a:	e00f      	b.n	80094ac <_malloc_r+0xb0>
 800948c:	6822      	ldr	r2, [r4, #0]
 800948e:	1b52      	subs	r2, r2, r5
 8009490:	d41f      	bmi.n	80094d2 <_malloc_r+0xd6>
 8009492:	2a0b      	cmp	r2, #11
 8009494:	d917      	bls.n	80094c6 <_malloc_r+0xca>
 8009496:	1961      	adds	r1, r4, r5
 8009498:	42a3      	cmp	r3, r4
 800949a:	6025      	str	r5, [r4, #0]
 800949c:	bf18      	it	ne
 800949e:	6059      	strne	r1, [r3, #4]
 80094a0:	6863      	ldr	r3, [r4, #4]
 80094a2:	bf08      	it	eq
 80094a4:	f8c8 1000 	streq.w	r1, [r8]
 80094a8:	5162      	str	r2, [r4, r5]
 80094aa:	604b      	str	r3, [r1, #4]
 80094ac:	4638      	mov	r0, r7
 80094ae:	f104 060b 	add.w	r6, r4, #11
 80094b2:	f000 f829 	bl	8009508 <__malloc_unlock>
 80094b6:	f026 0607 	bic.w	r6, r6, #7
 80094ba:	1d23      	adds	r3, r4, #4
 80094bc:	1af2      	subs	r2, r6, r3
 80094be:	d0ae      	beq.n	800941e <_malloc_r+0x22>
 80094c0:	1b9b      	subs	r3, r3, r6
 80094c2:	50a3      	str	r3, [r4, r2]
 80094c4:	e7ab      	b.n	800941e <_malloc_r+0x22>
 80094c6:	42a3      	cmp	r3, r4
 80094c8:	6862      	ldr	r2, [r4, #4]
 80094ca:	d1dd      	bne.n	8009488 <_malloc_r+0x8c>
 80094cc:	f8c8 2000 	str.w	r2, [r8]
 80094d0:	e7ec      	b.n	80094ac <_malloc_r+0xb0>
 80094d2:	4623      	mov	r3, r4
 80094d4:	6864      	ldr	r4, [r4, #4]
 80094d6:	e7ac      	b.n	8009432 <_malloc_r+0x36>
 80094d8:	4634      	mov	r4, r6
 80094da:	6876      	ldr	r6, [r6, #4]
 80094dc:	e7b4      	b.n	8009448 <_malloc_r+0x4c>
 80094de:	4613      	mov	r3, r2
 80094e0:	e7cc      	b.n	800947c <_malloc_r+0x80>
 80094e2:	230c      	movs	r3, #12
 80094e4:	603b      	str	r3, [r7, #0]
 80094e6:	4638      	mov	r0, r7
 80094e8:	f000 f80e 	bl	8009508 <__malloc_unlock>
 80094ec:	e797      	b.n	800941e <_malloc_r+0x22>
 80094ee:	6025      	str	r5, [r4, #0]
 80094f0:	e7dc      	b.n	80094ac <_malloc_r+0xb0>
 80094f2:	605b      	str	r3, [r3, #4]
 80094f4:	deff      	udf	#255	; 0xff
 80094f6:	bf00      	nop
 80094f8:	2000711c 	.word	0x2000711c

080094fc <__malloc_lock>:
 80094fc:	4801      	ldr	r0, [pc, #4]	; (8009504 <__malloc_lock+0x8>)
 80094fe:	f000 b86b 	b.w	80095d8 <__retarget_lock_acquire_recursive>
 8009502:	bf00      	nop
 8009504:	2000725c 	.word	0x2000725c

08009508 <__malloc_unlock>:
 8009508:	4801      	ldr	r0, [pc, #4]	; (8009510 <__malloc_unlock+0x8>)
 800950a:	f000 b866 	b.w	80095da <__retarget_lock_release_recursive>
 800950e:	bf00      	nop
 8009510:	2000725c 	.word	0x2000725c

08009514 <siprintf>:
 8009514:	b40e      	push	{r1, r2, r3}
 8009516:	b500      	push	{lr}
 8009518:	b09c      	sub	sp, #112	; 0x70
 800951a:	ab1d      	add	r3, sp, #116	; 0x74
 800951c:	9002      	str	r0, [sp, #8]
 800951e:	9006      	str	r0, [sp, #24]
 8009520:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009524:	4809      	ldr	r0, [pc, #36]	; (800954c <siprintf+0x38>)
 8009526:	9107      	str	r1, [sp, #28]
 8009528:	9104      	str	r1, [sp, #16]
 800952a:	4909      	ldr	r1, [pc, #36]	; (8009550 <siprintf+0x3c>)
 800952c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009530:	9105      	str	r1, [sp, #20]
 8009532:	6800      	ldr	r0, [r0, #0]
 8009534:	9301      	str	r3, [sp, #4]
 8009536:	a902      	add	r1, sp, #8
 8009538:	f000 f904 	bl	8009744 <_svfiprintf_r>
 800953c:	9b02      	ldr	r3, [sp, #8]
 800953e:	2200      	movs	r2, #0
 8009540:	701a      	strb	r2, [r3, #0]
 8009542:	b01c      	add	sp, #112	; 0x70
 8009544:	f85d eb04 	ldr.w	lr, [sp], #4
 8009548:	b003      	add	sp, #12
 800954a:	4770      	bx	lr
 800954c:	20000074 	.word	0x20000074
 8009550:	ffff0208 	.word	0xffff0208

08009554 <memset>:
 8009554:	4402      	add	r2, r0
 8009556:	4603      	mov	r3, r0
 8009558:	4293      	cmp	r3, r2
 800955a:	d100      	bne.n	800955e <memset+0xa>
 800955c:	4770      	bx	lr
 800955e:	f803 1b01 	strb.w	r1, [r3], #1
 8009562:	e7f9      	b.n	8009558 <memset+0x4>

08009564 <_sbrk_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4d06      	ldr	r5, [pc, #24]	; (8009580 <_sbrk_r+0x1c>)
 8009568:	2300      	movs	r3, #0
 800956a:	4604      	mov	r4, r0
 800956c:	4608      	mov	r0, r1
 800956e:	602b      	str	r3, [r5, #0]
 8009570:	f7f8 fd74 	bl	800205c <_sbrk>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	d102      	bne.n	800957e <_sbrk_r+0x1a>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	b103      	cbz	r3, 800957e <_sbrk_r+0x1a>
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	bd38      	pop	{r3, r4, r5, pc}
 8009580:	20007260 	.word	0x20007260

08009584 <__errno>:
 8009584:	4b01      	ldr	r3, [pc, #4]	; (800958c <__errno+0x8>)
 8009586:	6818      	ldr	r0, [r3, #0]
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	20000074 	.word	0x20000074

08009590 <__libc_init_array>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	4d0d      	ldr	r5, [pc, #52]	; (80095c8 <__libc_init_array+0x38>)
 8009594:	4c0d      	ldr	r4, [pc, #52]	; (80095cc <__libc_init_array+0x3c>)
 8009596:	1b64      	subs	r4, r4, r5
 8009598:	10a4      	asrs	r4, r4, #2
 800959a:	2600      	movs	r6, #0
 800959c:	42a6      	cmp	r6, r4
 800959e:	d109      	bne.n	80095b4 <__libc_init_array+0x24>
 80095a0:	4d0b      	ldr	r5, [pc, #44]	; (80095d0 <__libc_init_array+0x40>)
 80095a2:	4c0c      	ldr	r4, [pc, #48]	; (80095d4 <__libc_init_array+0x44>)
 80095a4:	f000 fbae 	bl	8009d04 <_init>
 80095a8:	1b64      	subs	r4, r4, r5
 80095aa:	10a4      	asrs	r4, r4, #2
 80095ac:	2600      	movs	r6, #0
 80095ae:	42a6      	cmp	r6, r4
 80095b0:	d105      	bne.n	80095be <__libc_init_array+0x2e>
 80095b2:	bd70      	pop	{r4, r5, r6, pc}
 80095b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b8:	4798      	blx	r3
 80095ba:	3601      	adds	r6, #1
 80095bc:	e7ee      	b.n	800959c <__libc_init_array+0xc>
 80095be:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c2:	4798      	blx	r3
 80095c4:	3601      	adds	r6, #1
 80095c6:	e7f2      	b.n	80095ae <__libc_init_array+0x1e>
 80095c8:	0800a150 	.word	0x0800a150
 80095cc:	0800a150 	.word	0x0800a150
 80095d0:	0800a150 	.word	0x0800a150
 80095d4:	0800a154 	.word	0x0800a154

080095d8 <__retarget_lock_acquire_recursive>:
 80095d8:	4770      	bx	lr

080095da <__retarget_lock_release_recursive>:
 80095da:	4770      	bx	lr

080095dc <memcpy>:
 80095dc:	440a      	add	r2, r1
 80095de:	4291      	cmp	r1, r2
 80095e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80095e4:	d100      	bne.n	80095e8 <memcpy+0xc>
 80095e6:	4770      	bx	lr
 80095e8:	b510      	push	{r4, lr}
 80095ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095f2:	4291      	cmp	r1, r2
 80095f4:	d1f9      	bne.n	80095ea <memcpy+0xe>
 80095f6:	bd10      	pop	{r4, pc}

080095f8 <_free_r>:
 80095f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095fa:	2900      	cmp	r1, #0
 80095fc:	d044      	beq.n	8009688 <_free_r+0x90>
 80095fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009602:	9001      	str	r0, [sp, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	f1a1 0404 	sub.w	r4, r1, #4
 800960a:	bfb8      	it	lt
 800960c:	18e4      	addlt	r4, r4, r3
 800960e:	f7ff ff75 	bl	80094fc <__malloc_lock>
 8009612:	4a1e      	ldr	r2, [pc, #120]	; (800968c <_free_r+0x94>)
 8009614:	9801      	ldr	r0, [sp, #4]
 8009616:	6813      	ldr	r3, [r2, #0]
 8009618:	b933      	cbnz	r3, 8009628 <_free_r+0x30>
 800961a:	6063      	str	r3, [r4, #4]
 800961c:	6014      	str	r4, [r2, #0]
 800961e:	b003      	add	sp, #12
 8009620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009624:	f7ff bf70 	b.w	8009508 <__malloc_unlock>
 8009628:	42a3      	cmp	r3, r4
 800962a:	d908      	bls.n	800963e <_free_r+0x46>
 800962c:	6825      	ldr	r5, [r4, #0]
 800962e:	1961      	adds	r1, r4, r5
 8009630:	428b      	cmp	r3, r1
 8009632:	bf01      	itttt	eq
 8009634:	6819      	ldreq	r1, [r3, #0]
 8009636:	685b      	ldreq	r3, [r3, #4]
 8009638:	1949      	addeq	r1, r1, r5
 800963a:	6021      	streq	r1, [r4, #0]
 800963c:	e7ed      	b.n	800961a <_free_r+0x22>
 800963e:	461a      	mov	r2, r3
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	b10b      	cbz	r3, 8009648 <_free_r+0x50>
 8009644:	42a3      	cmp	r3, r4
 8009646:	d9fa      	bls.n	800963e <_free_r+0x46>
 8009648:	6811      	ldr	r1, [r2, #0]
 800964a:	1855      	adds	r5, r2, r1
 800964c:	42a5      	cmp	r5, r4
 800964e:	d10b      	bne.n	8009668 <_free_r+0x70>
 8009650:	6824      	ldr	r4, [r4, #0]
 8009652:	4421      	add	r1, r4
 8009654:	1854      	adds	r4, r2, r1
 8009656:	42a3      	cmp	r3, r4
 8009658:	6011      	str	r1, [r2, #0]
 800965a:	d1e0      	bne.n	800961e <_free_r+0x26>
 800965c:	681c      	ldr	r4, [r3, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	6053      	str	r3, [r2, #4]
 8009662:	440c      	add	r4, r1
 8009664:	6014      	str	r4, [r2, #0]
 8009666:	e7da      	b.n	800961e <_free_r+0x26>
 8009668:	d902      	bls.n	8009670 <_free_r+0x78>
 800966a:	230c      	movs	r3, #12
 800966c:	6003      	str	r3, [r0, #0]
 800966e:	e7d6      	b.n	800961e <_free_r+0x26>
 8009670:	6825      	ldr	r5, [r4, #0]
 8009672:	1961      	adds	r1, r4, r5
 8009674:	428b      	cmp	r3, r1
 8009676:	bf04      	itt	eq
 8009678:	6819      	ldreq	r1, [r3, #0]
 800967a:	685b      	ldreq	r3, [r3, #4]
 800967c:	6063      	str	r3, [r4, #4]
 800967e:	bf04      	itt	eq
 8009680:	1949      	addeq	r1, r1, r5
 8009682:	6021      	streq	r1, [r4, #0]
 8009684:	6054      	str	r4, [r2, #4]
 8009686:	e7ca      	b.n	800961e <_free_r+0x26>
 8009688:	b003      	add	sp, #12
 800968a:	bd30      	pop	{r4, r5, pc}
 800968c:	2000711c 	.word	0x2000711c

08009690 <__ssputs_r>:
 8009690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009694:	688e      	ldr	r6, [r1, #8]
 8009696:	461f      	mov	r7, r3
 8009698:	42be      	cmp	r6, r7
 800969a:	680b      	ldr	r3, [r1, #0]
 800969c:	4682      	mov	sl, r0
 800969e:	460c      	mov	r4, r1
 80096a0:	4690      	mov	r8, r2
 80096a2:	d82c      	bhi.n	80096fe <__ssputs_r+0x6e>
 80096a4:	898a      	ldrh	r2, [r1, #12]
 80096a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096aa:	d026      	beq.n	80096fa <__ssputs_r+0x6a>
 80096ac:	6965      	ldr	r5, [r4, #20]
 80096ae:	6909      	ldr	r1, [r1, #16]
 80096b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096b4:	eba3 0901 	sub.w	r9, r3, r1
 80096b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096bc:	1c7b      	adds	r3, r7, #1
 80096be:	444b      	add	r3, r9
 80096c0:	106d      	asrs	r5, r5, #1
 80096c2:	429d      	cmp	r5, r3
 80096c4:	bf38      	it	cc
 80096c6:	461d      	movcc	r5, r3
 80096c8:	0553      	lsls	r3, r2, #21
 80096ca:	d527      	bpl.n	800971c <__ssputs_r+0x8c>
 80096cc:	4629      	mov	r1, r5
 80096ce:	f7ff fe95 	bl	80093fc <_malloc_r>
 80096d2:	4606      	mov	r6, r0
 80096d4:	b360      	cbz	r0, 8009730 <__ssputs_r+0xa0>
 80096d6:	6921      	ldr	r1, [r4, #16]
 80096d8:	464a      	mov	r2, r9
 80096da:	f7ff ff7f 	bl	80095dc <memcpy>
 80096de:	89a3      	ldrh	r3, [r4, #12]
 80096e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e8:	81a3      	strh	r3, [r4, #12]
 80096ea:	6126      	str	r6, [r4, #16]
 80096ec:	6165      	str	r5, [r4, #20]
 80096ee:	444e      	add	r6, r9
 80096f0:	eba5 0509 	sub.w	r5, r5, r9
 80096f4:	6026      	str	r6, [r4, #0]
 80096f6:	60a5      	str	r5, [r4, #8]
 80096f8:	463e      	mov	r6, r7
 80096fa:	42be      	cmp	r6, r7
 80096fc:	d900      	bls.n	8009700 <__ssputs_r+0x70>
 80096fe:	463e      	mov	r6, r7
 8009700:	6820      	ldr	r0, [r4, #0]
 8009702:	4632      	mov	r2, r6
 8009704:	4641      	mov	r1, r8
 8009706:	f000 fada 	bl	8009cbe <memmove>
 800970a:	68a3      	ldr	r3, [r4, #8]
 800970c:	1b9b      	subs	r3, r3, r6
 800970e:	60a3      	str	r3, [r4, #8]
 8009710:	6823      	ldr	r3, [r4, #0]
 8009712:	4433      	add	r3, r6
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	2000      	movs	r0, #0
 8009718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800971c:	462a      	mov	r2, r5
 800971e:	f000 fa9f 	bl	8009c60 <_realloc_r>
 8009722:	4606      	mov	r6, r0
 8009724:	2800      	cmp	r0, #0
 8009726:	d1e0      	bne.n	80096ea <__ssputs_r+0x5a>
 8009728:	6921      	ldr	r1, [r4, #16]
 800972a:	4650      	mov	r0, sl
 800972c:	f7ff ff64 	bl	80095f8 <_free_r>
 8009730:	230c      	movs	r3, #12
 8009732:	f8ca 3000 	str.w	r3, [sl]
 8009736:	89a3      	ldrh	r3, [r4, #12]
 8009738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800973c:	81a3      	strh	r3, [r4, #12]
 800973e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009742:	e7e9      	b.n	8009718 <__ssputs_r+0x88>

08009744 <_svfiprintf_r>:
 8009744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009748:	4698      	mov	r8, r3
 800974a:	898b      	ldrh	r3, [r1, #12]
 800974c:	061b      	lsls	r3, r3, #24
 800974e:	b09d      	sub	sp, #116	; 0x74
 8009750:	4607      	mov	r7, r0
 8009752:	460d      	mov	r5, r1
 8009754:	4614      	mov	r4, r2
 8009756:	d50e      	bpl.n	8009776 <_svfiprintf_r+0x32>
 8009758:	690b      	ldr	r3, [r1, #16]
 800975a:	b963      	cbnz	r3, 8009776 <_svfiprintf_r+0x32>
 800975c:	2140      	movs	r1, #64	; 0x40
 800975e:	f7ff fe4d 	bl	80093fc <_malloc_r>
 8009762:	6028      	str	r0, [r5, #0]
 8009764:	6128      	str	r0, [r5, #16]
 8009766:	b920      	cbnz	r0, 8009772 <_svfiprintf_r+0x2e>
 8009768:	230c      	movs	r3, #12
 800976a:	603b      	str	r3, [r7, #0]
 800976c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009770:	e0d0      	b.n	8009914 <_svfiprintf_r+0x1d0>
 8009772:	2340      	movs	r3, #64	; 0x40
 8009774:	616b      	str	r3, [r5, #20]
 8009776:	2300      	movs	r3, #0
 8009778:	9309      	str	r3, [sp, #36]	; 0x24
 800977a:	2320      	movs	r3, #32
 800977c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009780:	f8cd 800c 	str.w	r8, [sp, #12]
 8009784:	2330      	movs	r3, #48	; 0x30
 8009786:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800992c <_svfiprintf_r+0x1e8>
 800978a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800978e:	f04f 0901 	mov.w	r9, #1
 8009792:	4623      	mov	r3, r4
 8009794:	469a      	mov	sl, r3
 8009796:	f813 2b01 	ldrb.w	r2, [r3], #1
 800979a:	b10a      	cbz	r2, 80097a0 <_svfiprintf_r+0x5c>
 800979c:	2a25      	cmp	r2, #37	; 0x25
 800979e:	d1f9      	bne.n	8009794 <_svfiprintf_r+0x50>
 80097a0:	ebba 0b04 	subs.w	fp, sl, r4
 80097a4:	d00b      	beq.n	80097be <_svfiprintf_r+0x7a>
 80097a6:	465b      	mov	r3, fp
 80097a8:	4622      	mov	r2, r4
 80097aa:	4629      	mov	r1, r5
 80097ac:	4638      	mov	r0, r7
 80097ae:	f7ff ff6f 	bl	8009690 <__ssputs_r>
 80097b2:	3001      	adds	r0, #1
 80097b4:	f000 80a9 	beq.w	800990a <_svfiprintf_r+0x1c6>
 80097b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097ba:	445a      	add	r2, fp
 80097bc:	9209      	str	r2, [sp, #36]	; 0x24
 80097be:	f89a 3000 	ldrb.w	r3, [sl]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 80a1 	beq.w	800990a <_svfiprintf_r+0x1c6>
 80097c8:	2300      	movs	r3, #0
 80097ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097d2:	f10a 0a01 	add.w	sl, sl, #1
 80097d6:	9304      	str	r3, [sp, #16]
 80097d8:	9307      	str	r3, [sp, #28]
 80097da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097de:	931a      	str	r3, [sp, #104]	; 0x68
 80097e0:	4654      	mov	r4, sl
 80097e2:	2205      	movs	r2, #5
 80097e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e8:	4850      	ldr	r0, [pc, #320]	; (800992c <_svfiprintf_r+0x1e8>)
 80097ea:	f7f6 fcf9 	bl	80001e0 <memchr>
 80097ee:	9a04      	ldr	r2, [sp, #16]
 80097f0:	b9d8      	cbnz	r0, 800982a <_svfiprintf_r+0xe6>
 80097f2:	06d0      	lsls	r0, r2, #27
 80097f4:	bf44      	itt	mi
 80097f6:	2320      	movmi	r3, #32
 80097f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097fc:	0711      	lsls	r1, r2, #28
 80097fe:	bf44      	itt	mi
 8009800:	232b      	movmi	r3, #43	; 0x2b
 8009802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009806:	f89a 3000 	ldrb.w	r3, [sl]
 800980a:	2b2a      	cmp	r3, #42	; 0x2a
 800980c:	d015      	beq.n	800983a <_svfiprintf_r+0xf6>
 800980e:	9a07      	ldr	r2, [sp, #28]
 8009810:	4654      	mov	r4, sl
 8009812:	2000      	movs	r0, #0
 8009814:	f04f 0c0a 	mov.w	ip, #10
 8009818:	4621      	mov	r1, r4
 800981a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800981e:	3b30      	subs	r3, #48	; 0x30
 8009820:	2b09      	cmp	r3, #9
 8009822:	d94d      	bls.n	80098c0 <_svfiprintf_r+0x17c>
 8009824:	b1b0      	cbz	r0, 8009854 <_svfiprintf_r+0x110>
 8009826:	9207      	str	r2, [sp, #28]
 8009828:	e014      	b.n	8009854 <_svfiprintf_r+0x110>
 800982a:	eba0 0308 	sub.w	r3, r0, r8
 800982e:	fa09 f303 	lsl.w	r3, r9, r3
 8009832:	4313      	orrs	r3, r2
 8009834:	9304      	str	r3, [sp, #16]
 8009836:	46a2      	mov	sl, r4
 8009838:	e7d2      	b.n	80097e0 <_svfiprintf_r+0x9c>
 800983a:	9b03      	ldr	r3, [sp, #12]
 800983c:	1d19      	adds	r1, r3, #4
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	9103      	str	r1, [sp, #12]
 8009842:	2b00      	cmp	r3, #0
 8009844:	bfbb      	ittet	lt
 8009846:	425b      	neglt	r3, r3
 8009848:	f042 0202 	orrlt.w	r2, r2, #2
 800984c:	9307      	strge	r3, [sp, #28]
 800984e:	9307      	strlt	r3, [sp, #28]
 8009850:	bfb8      	it	lt
 8009852:	9204      	strlt	r2, [sp, #16]
 8009854:	7823      	ldrb	r3, [r4, #0]
 8009856:	2b2e      	cmp	r3, #46	; 0x2e
 8009858:	d10c      	bne.n	8009874 <_svfiprintf_r+0x130>
 800985a:	7863      	ldrb	r3, [r4, #1]
 800985c:	2b2a      	cmp	r3, #42	; 0x2a
 800985e:	d134      	bne.n	80098ca <_svfiprintf_r+0x186>
 8009860:	9b03      	ldr	r3, [sp, #12]
 8009862:	1d1a      	adds	r2, r3, #4
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	9203      	str	r2, [sp, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	bfb8      	it	lt
 800986c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009870:	3402      	adds	r4, #2
 8009872:	9305      	str	r3, [sp, #20]
 8009874:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800993c <_svfiprintf_r+0x1f8>
 8009878:	7821      	ldrb	r1, [r4, #0]
 800987a:	2203      	movs	r2, #3
 800987c:	4650      	mov	r0, sl
 800987e:	f7f6 fcaf 	bl	80001e0 <memchr>
 8009882:	b138      	cbz	r0, 8009894 <_svfiprintf_r+0x150>
 8009884:	9b04      	ldr	r3, [sp, #16]
 8009886:	eba0 000a 	sub.w	r0, r0, sl
 800988a:	2240      	movs	r2, #64	; 0x40
 800988c:	4082      	lsls	r2, r0
 800988e:	4313      	orrs	r3, r2
 8009890:	3401      	adds	r4, #1
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009898:	4825      	ldr	r0, [pc, #148]	; (8009930 <_svfiprintf_r+0x1ec>)
 800989a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800989e:	2206      	movs	r2, #6
 80098a0:	f7f6 fc9e 	bl	80001e0 <memchr>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d038      	beq.n	800991a <_svfiprintf_r+0x1d6>
 80098a8:	4b22      	ldr	r3, [pc, #136]	; (8009934 <_svfiprintf_r+0x1f0>)
 80098aa:	bb1b      	cbnz	r3, 80098f4 <_svfiprintf_r+0x1b0>
 80098ac:	9b03      	ldr	r3, [sp, #12]
 80098ae:	3307      	adds	r3, #7
 80098b0:	f023 0307 	bic.w	r3, r3, #7
 80098b4:	3308      	adds	r3, #8
 80098b6:	9303      	str	r3, [sp, #12]
 80098b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ba:	4433      	add	r3, r6
 80098bc:	9309      	str	r3, [sp, #36]	; 0x24
 80098be:	e768      	b.n	8009792 <_svfiprintf_r+0x4e>
 80098c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80098c4:	460c      	mov	r4, r1
 80098c6:	2001      	movs	r0, #1
 80098c8:	e7a6      	b.n	8009818 <_svfiprintf_r+0xd4>
 80098ca:	2300      	movs	r3, #0
 80098cc:	3401      	adds	r4, #1
 80098ce:	9305      	str	r3, [sp, #20]
 80098d0:	4619      	mov	r1, r3
 80098d2:	f04f 0c0a 	mov.w	ip, #10
 80098d6:	4620      	mov	r0, r4
 80098d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098dc:	3a30      	subs	r2, #48	; 0x30
 80098de:	2a09      	cmp	r2, #9
 80098e0:	d903      	bls.n	80098ea <_svfiprintf_r+0x1a6>
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d0c6      	beq.n	8009874 <_svfiprintf_r+0x130>
 80098e6:	9105      	str	r1, [sp, #20]
 80098e8:	e7c4      	b.n	8009874 <_svfiprintf_r+0x130>
 80098ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80098ee:	4604      	mov	r4, r0
 80098f0:	2301      	movs	r3, #1
 80098f2:	e7f0      	b.n	80098d6 <_svfiprintf_r+0x192>
 80098f4:	ab03      	add	r3, sp, #12
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	462a      	mov	r2, r5
 80098fa:	4b0f      	ldr	r3, [pc, #60]	; (8009938 <_svfiprintf_r+0x1f4>)
 80098fc:	a904      	add	r1, sp, #16
 80098fe:	4638      	mov	r0, r7
 8009900:	f3af 8000 	nop.w
 8009904:	1c42      	adds	r2, r0, #1
 8009906:	4606      	mov	r6, r0
 8009908:	d1d6      	bne.n	80098b8 <_svfiprintf_r+0x174>
 800990a:	89ab      	ldrh	r3, [r5, #12]
 800990c:	065b      	lsls	r3, r3, #25
 800990e:	f53f af2d 	bmi.w	800976c <_svfiprintf_r+0x28>
 8009912:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009914:	b01d      	add	sp, #116	; 0x74
 8009916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800991a:	ab03      	add	r3, sp, #12
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	462a      	mov	r2, r5
 8009920:	4b05      	ldr	r3, [pc, #20]	; (8009938 <_svfiprintf_r+0x1f4>)
 8009922:	a904      	add	r1, sp, #16
 8009924:	4638      	mov	r0, r7
 8009926:	f000 f879 	bl	8009a1c <_printf_i>
 800992a:	e7eb      	b.n	8009904 <_svfiprintf_r+0x1c0>
 800992c:	0800a114 	.word	0x0800a114
 8009930:	0800a11e 	.word	0x0800a11e
 8009934:	00000000 	.word	0x00000000
 8009938:	08009691 	.word	0x08009691
 800993c:	0800a11a 	.word	0x0800a11a

08009940 <_printf_common>:
 8009940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009944:	4616      	mov	r6, r2
 8009946:	4699      	mov	r9, r3
 8009948:	688a      	ldr	r2, [r1, #8]
 800994a:	690b      	ldr	r3, [r1, #16]
 800994c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009950:	4293      	cmp	r3, r2
 8009952:	bfb8      	it	lt
 8009954:	4613      	movlt	r3, r2
 8009956:	6033      	str	r3, [r6, #0]
 8009958:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800995c:	4607      	mov	r7, r0
 800995e:	460c      	mov	r4, r1
 8009960:	b10a      	cbz	r2, 8009966 <_printf_common+0x26>
 8009962:	3301      	adds	r3, #1
 8009964:	6033      	str	r3, [r6, #0]
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	0699      	lsls	r1, r3, #26
 800996a:	bf42      	ittt	mi
 800996c:	6833      	ldrmi	r3, [r6, #0]
 800996e:	3302      	addmi	r3, #2
 8009970:	6033      	strmi	r3, [r6, #0]
 8009972:	6825      	ldr	r5, [r4, #0]
 8009974:	f015 0506 	ands.w	r5, r5, #6
 8009978:	d106      	bne.n	8009988 <_printf_common+0x48>
 800997a:	f104 0a19 	add.w	sl, r4, #25
 800997e:	68e3      	ldr	r3, [r4, #12]
 8009980:	6832      	ldr	r2, [r6, #0]
 8009982:	1a9b      	subs	r3, r3, r2
 8009984:	42ab      	cmp	r3, r5
 8009986:	dc26      	bgt.n	80099d6 <_printf_common+0x96>
 8009988:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800998c:	1e13      	subs	r3, r2, #0
 800998e:	6822      	ldr	r2, [r4, #0]
 8009990:	bf18      	it	ne
 8009992:	2301      	movne	r3, #1
 8009994:	0692      	lsls	r2, r2, #26
 8009996:	d42b      	bmi.n	80099f0 <_printf_common+0xb0>
 8009998:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800999c:	4649      	mov	r1, r9
 800999e:	4638      	mov	r0, r7
 80099a0:	47c0      	blx	r8
 80099a2:	3001      	adds	r0, #1
 80099a4:	d01e      	beq.n	80099e4 <_printf_common+0xa4>
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	6922      	ldr	r2, [r4, #16]
 80099aa:	f003 0306 	and.w	r3, r3, #6
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	bf02      	ittt	eq
 80099b2:	68e5      	ldreq	r5, [r4, #12]
 80099b4:	6833      	ldreq	r3, [r6, #0]
 80099b6:	1aed      	subeq	r5, r5, r3
 80099b8:	68a3      	ldr	r3, [r4, #8]
 80099ba:	bf0c      	ite	eq
 80099bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099c0:	2500      	movne	r5, #0
 80099c2:	4293      	cmp	r3, r2
 80099c4:	bfc4      	itt	gt
 80099c6:	1a9b      	subgt	r3, r3, r2
 80099c8:	18ed      	addgt	r5, r5, r3
 80099ca:	2600      	movs	r6, #0
 80099cc:	341a      	adds	r4, #26
 80099ce:	42b5      	cmp	r5, r6
 80099d0:	d11a      	bne.n	8009a08 <_printf_common+0xc8>
 80099d2:	2000      	movs	r0, #0
 80099d4:	e008      	b.n	80099e8 <_printf_common+0xa8>
 80099d6:	2301      	movs	r3, #1
 80099d8:	4652      	mov	r2, sl
 80099da:	4649      	mov	r1, r9
 80099dc:	4638      	mov	r0, r7
 80099de:	47c0      	blx	r8
 80099e0:	3001      	adds	r0, #1
 80099e2:	d103      	bne.n	80099ec <_printf_common+0xac>
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ec:	3501      	adds	r5, #1
 80099ee:	e7c6      	b.n	800997e <_printf_common+0x3e>
 80099f0:	18e1      	adds	r1, r4, r3
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	2030      	movs	r0, #48	; 0x30
 80099f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099fa:	4422      	add	r2, r4
 80099fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a04:	3302      	adds	r3, #2
 8009a06:	e7c7      	b.n	8009998 <_printf_common+0x58>
 8009a08:	2301      	movs	r3, #1
 8009a0a:	4622      	mov	r2, r4
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	4638      	mov	r0, r7
 8009a10:	47c0      	blx	r8
 8009a12:	3001      	adds	r0, #1
 8009a14:	d0e6      	beq.n	80099e4 <_printf_common+0xa4>
 8009a16:	3601      	adds	r6, #1
 8009a18:	e7d9      	b.n	80099ce <_printf_common+0x8e>
	...

08009a1c <_printf_i>:
 8009a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a20:	7e0f      	ldrb	r7, [r1, #24]
 8009a22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a24:	2f78      	cmp	r7, #120	; 0x78
 8009a26:	4691      	mov	r9, r2
 8009a28:	4680      	mov	r8, r0
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	469a      	mov	sl, r3
 8009a2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a32:	d807      	bhi.n	8009a44 <_printf_i+0x28>
 8009a34:	2f62      	cmp	r7, #98	; 0x62
 8009a36:	d80a      	bhi.n	8009a4e <_printf_i+0x32>
 8009a38:	2f00      	cmp	r7, #0
 8009a3a:	f000 80d4 	beq.w	8009be6 <_printf_i+0x1ca>
 8009a3e:	2f58      	cmp	r7, #88	; 0x58
 8009a40:	f000 80c0 	beq.w	8009bc4 <_printf_i+0x1a8>
 8009a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a4c:	e03a      	b.n	8009ac4 <_printf_i+0xa8>
 8009a4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a52:	2b15      	cmp	r3, #21
 8009a54:	d8f6      	bhi.n	8009a44 <_printf_i+0x28>
 8009a56:	a101      	add	r1, pc, #4	; (adr r1, 8009a5c <_printf_i+0x40>)
 8009a58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a5c:	08009ab5 	.word	0x08009ab5
 8009a60:	08009ac9 	.word	0x08009ac9
 8009a64:	08009a45 	.word	0x08009a45
 8009a68:	08009a45 	.word	0x08009a45
 8009a6c:	08009a45 	.word	0x08009a45
 8009a70:	08009a45 	.word	0x08009a45
 8009a74:	08009ac9 	.word	0x08009ac9
 8009a78:	08009a45 	.word	0x08009a45
 8009a7c:	08009a45 	.word	0x08009a45
 8009a80:	08009a45 	.word	0x08009a45
 8009a84:	08009a45 	.word	0x08009a45
 8009a88:	08009bcd 	.word	0x08009bcd
 8009a8c:	08009af5 	.word	0x08009af5
 8009a90:	08009b87 	.word	0x08009b87
 8009a94:	08009a45 	.word	0x08009a45
 8009a98:	08009a45 	.word	0x08009a45
 8009a9c:	08009bef 	.word	0x08009bef
 8009aa0:	08009a45 	.word	0x08009a45
 8009aa4:	08009af5 	.word	0x08009af5
 8009aa8:	08009a45 	.word	0x08009a45
 8009aac:	08009a45 	.word	0x08009a45
 8009ab0:	08009b8f 	.word	0x08009b8f
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	1d1a      	adds	r2, r3, #4
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	602a      	str	r2, [r5, #0]
 8009abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e09f      	b.n	8009c08 <_printf_i+0x1ec>
 8009ac8:	6820      	ldr	r0, [r4, #0]
 8009aca:	682b      	ldr	r3, [r5, #0]
 8009acc:	0607      	lsls	r7, r0, #24
 8009ace:	f103 0104 	add.w	r1, r3, #4
 8009ad2:	6029      	str	r1, [r5, #0]
 8009ad4:	d501      	bpl.n	8009ada <_printf_i+0xbe>
 8009ad6:	681e      	ldr	r6, [r3, #0]
 8009ad8:	e003      	b.n	8009ae2 <_printf_i+0xc6>
 8009ada:	0646      	lsls	r6, r0, #25
 8009adc:	d5fb      	bpl.n	8009ad6 <_printf_i+0xba>
 8009ade:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009ae2:	2e00      	cmp	r6, #0
 8009ae4:	da03      	bge.n	8009aee <_printf_i+0xd2>
 8009ae6:	232d      	movs	r3, #45	; 0x2d
 8009ae8:	4276      	negs	r6, r6
 8009aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aee:	485a      	ldr	r0, [pc, #360]	; (8009c58 <_printf_i+0x23c>)
 8009af0:	230a      	movs	r3, #10
 8009af2:	e012      	b.n	8009b1a <_printf_i+0xfe>
 8009af4:	682b      	ldr	r3, [r5, #0]
 8009af6:	6820      	ldr	r0, [r4, #0]
 8009af8:	1d19      	adds	r1, r3, #4
 8009afa:	6029      	str	r1, [r5, #0]
 8009afc:	0605      	lsls	r5, r0, #24
 8009afe:	d501      	bpl.n	8009b04 <_printf_i+0xe8>
 8009b00:	681e      	ldr	r6, [r3, #0]
 8009b02:	e002      	b.n	8009b0a <_printf_i+0xee>
 8009b04:	0641      	lsls	r1, r0, #25
 8009b06:	d5fb      	bpl.n	8009b00 <_printf_i+0xe4>
 8009b08:	881e      	ldrh	r6, [r3, #0]
 8009b0a:	4853      	ldr	r0, [pc, #332]	; (8009c58 <_printf_i+0x23c>)
 8009b0c:	2f6f      	cmp	r7, #111	; 0x6f
 8009b0e:	bf0c      	ite	eq
 8009b10:	2308      	moveq	r3, #8
 8009b12:	230a      	movne	r3, #10
 8009b14:	2100      	movs	r1, #0
 8009b16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b1a:	6865      	ldr	r5, [r4, #4]
 8009b1c:	60a5      	str	r5, [r4, #8]
 8009b1e:	2d00      	cmp	r5, #0
 8009b20:	bfa2      	ittt	ge
 8009b22:	6821      	ldrge	r1, [r4, #0]
 8009b24:	f021 0104 	bicge.w	r1, r1, #4
 8009b28:	6021      	strge	r1, [r4, #0]
 8009b2a:	b90e      	cbnz	r6, 8009b30 <_printf_i+0x114>
 8009b2c:	2d00      	cmp	r5, #0
 8009b2e:	d04b      	beq.n	8009bc8 <_printf_i+0x1ac>
 8009b30:	4615      	mov	r5, r2
 8009b32:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b36:	fb03 6711 	mls	r7, r3, r1, r6
 8009b3a:	5dc7      	ldrb	r7, [r0, r7]
 8009b3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b40:	4637      	mov	r7, r6
 8009b42:	42bb      	cmp	r3, r7
 8009b44:	460e      	mov	r6, r1
 8009b46:	d9f4      	bls.n	8009b32 <_printf_i+0x116>
 8009b48:	2b08      	cmp	r3, #8
 8009b4a:	d10b      	bne.n	8009b64 <_printf_i+0x148>
 8009b4c:	6823      	ldr	r3, [r4, #0]
 8009b4e:	07de      	lsls	r6, r3, #31
 8009b50:	d508      	bpl.n	8009b64 <_printf_i+0x148>
 8009b52:	6923      	ldr	r3, [r4, #16]
 8009b54:	6861      	ldr	r1, [r4, #4]
 8009b56:	4299      	cmp	r1, r3
 8009b58:	bfde      	ittt	le
 8009b5a:	2330      	movle	r3, #48	; 0x30
 8009b5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b60:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009b64:	1b52      	subs	r2, r2, r5
 8009b66:	6122      	str	r2, [r4, #16]
 8009b68:	f8cd a000 	str.w	sl, [sp]
 8009b6c:	464b      	mov	r3, r9
 8009b6e:	aa03      	add	r2, sp, #12
 8009b70:	4621      	mov	r1, r4
 8009b72:	4640      	mov	r0, r8
 8009b74:	f7ff fee4 	bl	8009940 <_printf_common>
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d14a      	bne.n	8009c12 <_printf_i+0x1f6>
 8009b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b80:	b004      	add	sp, #16
 8009b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b86:	6823      	ldr	r3, [r4, #0]
 8009b88:	f043 0320 	orr.w	r3, r3, #32
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	4833      	ldr	r0, [pc, #204]	; (8009c5c <_printf_i+0x240>)
 8009b90:	2778      	movs	r7, #120	; 0x78
 8009b92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	6829      	ldr	r1, [r5, #0]
 8009b9a:	061f      	lsls	r7, r3, #24
 8009b9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ba0:	d402      	bmi.n	8009ba8 <_printf_i+0x18c>
 8009ba2:	065f      	lsls	r7, r3, #25
 8009ba4:	bf48      	it	mi
 8009ba6:	b2b6      	uxthmi	r6, r6
 8009ba8:	07df      	lsls	r7, r3, #31
 8009baa:	bf48      	it	mi
 8009bac:	f043 0320 	orrmi.w	r3, r3, #32
 8009bb0:	6029      	str	r1, [r5, #0]
 8009bb2:	bf48      	it	mi
 8009bb4:	6023      	strmi	r3, [r4, #0]
 8009bb6:	b91e      	cbnz	r6, 8009bc0 <_printf_i+0x1a4>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	f023 0320 	bic.w	r3, r3, #32
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	2310      	movs	r3, #16
 8009bc2:	e7a7      	b.n	8009b14 <_printf_i+0xf8>
 8009bc4:	4824      	ldr	r0, [pc, #144]	; (8009c58 <_printf_i+0x23c>)
 8009bc6:	e7e4      	b.n	8009b92 <_printf_i+0x176>
 8009bc8:	4615      	mov	r5, r2
 8009bca:	e7bd      	b.n	8009b48 <_printf_i+0x12c>
 8009bcc:	682b      	ldr	r3, [r5, #0]
 8009bce:	6826      	ldr	r6, [r4, #0]
 8009bd0:	6961      	ldr	r1, [r4, #20]
 8009bd2:	1d18      	adds	r0, r3, #4
 8009bd4:	6028      	str	r0, [r5, #0]
 8009bd6:	0635      	lsls	r5, r6, #24
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	d501      	bpl.n	8009be0 <_printf_i+0x1c4>
 8009bdc:	6019      	str	r1, [r3, #0]
 8009bde:	e002      	b.n	8009be6 <_printf_i+0x1ca>
 8009be0:	0670      	lsls	r0, r6, #25
 8009be2:	d5fb      	bpl.n	8009bdc <_printf_i+0x1c0>
 8009be4:	8019      	strh	r1, [r3, #0]
 8009be6:	2300      	movs	r3, #0
 8009be8:	6123      	str	r3, [r4, #16]
 8009bea:	4615      	mov	r5, r2
 8009bec:	e7bc      	b.n	8009b68 <_printf_i+0x14c>
 8009bee:	682b      	ldr	r3, [r5, #0]
 8009bf0:	1d1a      	adds	r2, r3, #4
 8009bf2:	602a      	str	r2, [r5, #0]
 8009bf4:	681d      	ldr	r5, [r3, #0]
 8009bf6:	6862      	ldr	r2, [r4, #4]
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	f7f6 faf0 	bl	80001e0 <memchr>
 8009c00:	b108      	cbz	r0, 8009c06 <_printf_i+0x1ea>
 8009c02:	1b40      	subs	r0, r0, r5
 8009c04:	6060      	str	r0, [r4, #4]
 8009c06:	6863      	ldr	r3, [r4, #4]
 8009c08:	6123      	str	r3, [r4, #16]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c10:	e7aa      	b.n	8009b68 <_printf_i+0x14c>
 8009c12:	6923      	ldr	r3, [r4, #16]
 8009c14:	462a      	mov	r2, r5
 8009c16:	4649      	mov	r1, r9
 8009c18:	4640      	mov	r0, r8
 8009c1a:	47d0      	blx	sl
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d0ad      	beq.n	8009b7c <_printf_i+0x160>
 8009c20:	6823      	ldr	r3, [r4, #0]
 8009c22:	079b      	lsls	r3, r3, #30
 8009c24:	d413      	bmi.n	8009c4e <_printf_i+0x232>
 8009c26:	68e0      	ldr	r0, [r4, #12]
 8009c28:	9b03      	ldr	r3, [sp, #12]
 8009c2a:	4298      	cmp	r0, r3
 8009c2c:	bfb8      	it	lt
 8009c2e:	4618      	movlt	r0, r3
 8009c30:	e7a6      	b.n	8009b80 <_printf_i+0x164>
 8009c32:	2301      	movs	r3, #1
 8009c34:	4632      	mov	r2, r6
 8009c36:	4649      	mov	r1, r9
 8009c38:	4640      	mov	r0, r8
 8009c3a:	47d0      	blx	sl
 8009c3c:	3001      	adds	r0, #1
 8009c3e:	d09d      	beq.n	8009b7c <_printf_i+0x160>
 8009c40:	3501      	adds	r5, #1
 8009c42:	68e3      	ldr	r3, [r4, #12]
 8009c44:	9903      	ldr	r1, [sp, #12]
 8009c46:	1a5b      	subs	r3, r3, r1
 8009c48:	42ab      	cmp	r3, r5
 8009c4a:	dcf2      	bgt.n	8009c32 <_printf_i+0x216>
 8009c4c:	e7eb      	b.n	8009c26 <_printf_i+0x20a>
 8009c4e:	2500      	movs	r5, #0
 8009c50:	f104 0619 	add.w	r6, r4, #25
 8009c54:	e7f5      	b.n	8009c42 <_printf_i+0x226>
 8009c56:	bf00      	nop
 8009c58:	0800a125 	.word	0x0800a125
 8009c5c:	0800a136 	.word	0x0800a136

08009c60 <_realloc_r>:
 8009c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c64:	4680      	mov	r8, r0
 8009c66:	4614      	mov	r4, r2
 8009c68:	460e      	mov	r6, r1
 8009c6a:	b921      	cbnz	r1, 8009c76 <_realloc_r+0x16>
 8009c6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c70:	4611      	mov	r1, r2
 8009c72:	f7ff bbc3 	b.w	80093fc <_malloc_r>
 8009c76:	b92a      	cbnz	r2, 8009c84 <_realloc_r+0x24>
 8009c78:	f7ff fcbe 	bl	80095f8 <_free_r>
 8009c7c:	4625      	mov	r5, r4
 8009c7e:	4628      	mov	r0, r5
 8009c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c84:	f000 f835 	bl	8009cf2 <_malloc_usable_size_r>
 8009c88:	4284      	cmp	r4, r0
 8009c8a:	4607      	mov	r7, r0
 8009c8c:	d802      	bhi.n	8009c94 <_realloc_r+0x34>
 8009c8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c92:	d812      	bhi.n	8009cba <_realloc_r+0x5a>
 8009c94:	4621      	mov	r1, r4
 8009c96:	4640      	mov	r0, r8
 8009c98:	f7ff fbb0 	bl	80093fc <_malloc_r>
 8009c9c:	4605      	mov	r5, r0
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	d0ed      	beq.n	8009c7e <_realloc_r+0x1e>
 8009ca2:	42bc      	cmp	r4, r7
 8009ca4:	4622      	mov	r2, r4
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	bf28      	it	cs
 8009caa:	463a      	movcs	r2, r7
 8009cac:	f7ff fc96 	bl	80095dc <memcpy>
 8009cb0:	4631      	mov	r1, r6
 8009cb2:	4640      	mov	r0, r8
 8009cb4:	f7ff fca0 	bl	80095f8 <_free_r>
 8009cb8:	e7e1      	b.n	8009c7e <_realloc_r+0x1e>
 8009cba:	4635      	mov	r5, r6
 8009cbc:	e7df      	b.n	8009c7e <_realloc_r+0x1e>

08009cbe <memmove>:
 8009cbe:	4288      	cmp	r0, r1
 8009cc0:	b510      	push	{r4, lr}
 8009cc2:	eb01 0402 	add.w	r4, r1, r2
 8009cc6:	d902      	bls.n	8009cce <memmove+0x10>
 8009cc8:	4284      	cmp	r4, r0
 8009cca:	4623      	mov	r3, r4
 8009ccc:	d807      	bhi.n	8009cde <memmove+0x20>
 8009cce:	1e43      	subs	r3, r0, #1
 8009cd0:	42a1      	cmp	r1, r4
 8009cd2:	d008      	beq.n	8009ce6 <memmove+0x28>
 8009cd4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cd8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cdc:	e7f8      	b.n	8009cd0 <memmove+0x12>
 8009cde:	4402      	add	r2, r0
 8009ce0:	4601      	mov	r1, r0
 8009ce2:	428a      	cmp	r2, r1
 8009ce4:	d100      	bne.n	8009ce8 <memmove+0x2a>
 8009ce6:	bd10      	pop	{r4, pc}
 8009ce8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cf0:	e7f7      	b.n	8009ce2 <memmove+0x24>

08009cf2 <_malloc_usable_size_r>:
 8009cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf6:	1f18      	subs	r0, r3, #4
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	bfbc      	itt	lt
 8009cfc:	580b      	ldrlt	r3, [r1, r0]
 8009cfe:	18c0      	addlt	r0, r0, r3
 8009d00:	4770      	bx	lr
	...

08009d04 <_init>:
 8009d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d06:	bf00      	nop
 8009d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0a:	bc08      	pop	{r3}
 8009d0c:	469e      	mov	lr, r3
 8009d0e:	4770      	bx	lr

08009d10 <_fini>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	bf00      	nop
 8009d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d16:	bc08      	pop	{r3}
 8009d18:	469e      	mov	lr, r3
 8009d1a:	4770      	bx	lr
